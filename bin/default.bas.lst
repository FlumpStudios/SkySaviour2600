------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 d4	   _sc3       =	score + 2
      7  3000 ????
      8  3000 ????	       00 d3	   _sc2       =	score + 1
      9  3000 ????
     10  3000 ????	       00 d2	   _sc1       =	score
     11  3000 ????
     12  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     13  3000 ????
     14  3000 ????	       00 ef	   _Bit0_Reset_Restrainer =	y
     15  3000 ????
     16  3000 ????	       00 f0	   gameReady  =	z
     17  3000 ????
     18  3000 ????	       00 ee	   _resetTicker =	x
     19  3000 ????
     20  3000 ????	       00 eb	   _High_Score2 =	u
     21  3000 ????
     22  3000 ????	       00 ea	   _High_Score1 =	t
     23  3000 ????
     24  3000 ????	       00 e9	   _High_Score3 =	s
     25  3000 ????
     26  3000 ????	       00 e8	   firstFrame =	r
     27  3000 ????
     28  3000 ????	       00 e6	   switchSprite =	p
     29  3000 ????
     30  3000 ????	       00 e2	   ticker     =	l
     31  3000 ????
     32  3000 ????	       00 e0	   bulletMultiplier =	j
     33  3000 ????
     34  3000 ????	       00 8b	   misy       =	missile1y
     35  3000 ????	       00 81	   misx       =	missile1x
     36  3000 ????	       00 dd	   realLives  =	g
     37  3000 ????
     38  3000 ????	       00 dc	   explosionTicker =	f
     39  3000 ????
     40  3000 ????	       00 91	   asteroid4Y =	player4y
     41  3000 ????	       00 90	   asteroid3Y =	player3y
     42  3000 ????	       00 8f	   asteroid2Y =	player2y
     43  3000 ????	       00 8e	   asteroidY  =	player1y
     44  3000 ????	       00 d7	   _P0_Luminosity =	a
     45  3000 ????	       00 01	   bs_mask    =	1
     46  3000 ????	       00 08	   bankswitch =	8
     47  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     48  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .L08 		;  includesfile multisprite_superchip.inc
     50  1100
     51  1100				   .L09 		;  set kernel multisprite
     52  1100
     53  1100				   .L010		;  set romsize 8k
     54  1100
     55  1100				   .
     56  1100							; 
     57  1100
     58  1100				   .L011		;  pfheight = 7
     59  1100
     60  1100		       a9 07		      LDA	#7
     61  1102		       85 c4		      STA	pfheight
     62  1104				   .
     63  1104							; 
     64  1104
     65  1104				   .L012		;  playfield:
     66  1104
     67  1104		       a9 6a		      LDA	#<PF1_data0
     68  1106		       85 bb		      STA	PF1pointer
     69  1108		       a9 fd		      LDA	#>PF1_data0
     70  110a		       85 bc		      STA	PF1pointer+1
     71  110c		       a9 75		      LDA	#<PF2_data0
     72  110e		       85 bd		      STA	PF2pointer
     73  1110		       a9 fd		      LDA	#>PF2_data0
     74  1112		       85 be		      STA	PF2pointer+1
     75  1114				   .
     76  1114							; 
     77  1114
     78  1114				   .
     79  1114							; 
     80  1114
     81  1114				   .L013		;  COLUBK  =  $0
     82  1114
     83  1114		       a9 00		      LDA	#$0
     84  1116		       85 09		      STA	COLUBK
     85  1118				   .L014		;  _COLUP1  =	$3A
     86  1118
     87  1118		       a9 3a		      LDA	#$3A
     88  111a		       85 98		      STA	_COLUP1
     89  111c				   .L015		;  COLUP2  =  $A4
     90  111c
     91  111c		       a9 a4		      LDA	#$A4
     92  111e		       85 99		      STA	COLUP2
     93  1120				   .L016		;  COLUP3  =  $A4
     94  1120
     95  1120		       a9 a4		      LDA	#$A4
     96  1122		       85 9a		      STA	COLUP3
     97  1124				   .L017		;  COLUP4  =  $76
     98  1124
     99  1124		       a9 76		      LDA	#$76
    100  1126		       85 9b		      STA	COLUP4
    101  1128				   .L018		;  COLUP5  =  $2E
    102  1128
    103  1128		       a9 2e		      LDA	#$2E
    104  112a		       85 9c		      STA	COLUP5
    105  112c				   .
    106  112c							; 
    107  112c
    108  112c				   .
    109  112c							; 
    110  112c
    111  112c				   .L019		;  lifecolor  =  $aa
    112  112c
    113  112c		       a9 aa		      LDA	#$aa
    114  112e		       85 c0		      STA	lifecolor
    115  1130				   .
    116  1130							; 
    117  1130
    118  1130				   .
    119  1130							; 
    120  1130
    121  1130				   .
    122  1130							; 
    123  1130
    124  1130				   .L020		;  player0x = 66
    125  1130
    126  1130		       a9 42		      LDA	#66
    127  1132		       85 84		      STA	player0x
    128  1134				   .L021		;  player0y = 57
    129  1134
    130  1134		       a9 39		      LDA	#57
    131  1136		       85 8d		      STA	player0y
    132  1138				   .
    133  1138							; 
    134  1138
    135  1138				   .L022		;  player1x = 76
    136  1138
    137  1138		       a9 4c		      LDA	#76
    138  113a		       85 85		      STA	player1x
    139  113c				   .L023		;  player1y = 99
    140  113c
    141  113c		       a9 63		      LDA	#99
    142  113e		       85 8e		      STA	player1y
    143  1140				   .
    144  1140							; 
    145  1140
    146  1140				   .L024		;  player2x = 86
    147  1140
    148  1140		       a9 56		      LDA	#86
    149  1142		       85 86		      STA	player2x
    150  1144				   .L025		;  player2y = 100
    151  1144
    152  1144		       a9 64		      LDA	#100
    153  1146		       85 8f		      STA	player2y
    154  1148				   .
    155  1148							; 
    156  1148
    157  1148				   .L026		;  player3x = 96
    158  1148
    159  1148		       a9 60		      LDA	#96
    160  114a		       85 87		      STA	player3x
    161  114c				   .L027		;  player3y = 100
    162  114c
    163  114c		       a9 64		      LDA	#100
    164  114e		       85 90		      STA	player3y
    165  1150				   .
    166  1150							; 
    167  1150
    168  1150				   .L028		;  player4x = 106
    169  1150
    170  1150		       a9 6a		      LDA	#106
    171  1152		       85 88		      STA	player4x
    172  1154				   .L029		;  player4y = 100
    173  1154
    174  1154		       a9 64		      LDA	#100
    175  1156		       85 91		      STA	player4y
    176  1158				   .
    177  1158							; 
    178  1158
    179  1158				   .L030		;  player5x = 100
    180  1158
    181  1158		       a9 64		      LDA	#100
    182  115a		       85 89		      STA	player5x
    183  115c				   .L031		;  player5y =	200
    184  115c
    185  115c		       a9 c8		      LDA	#200
    186  115e		       85 92		      STA	player5y
    187  1160				   .L032		;  missile0y = 255
    188  1160
    189  1160		       a9 ff		      LDA	#255
    190  1162		       85 8a		      STA	missile0y
    191  1164				   .
    192  1164							; 
    193  1164
    194  1164				   .
    195  1164							; 
    196  1164
    197  1164				   .L033		;  missile1y = 200
    198  1164
    199  1164		       a9 c8		      LDA	#200
    200  1166		       85 8b		      STA	missile1y
    201  1168				   .L034		;  missile1x = 50
    202  1168
    203  1168		       a9 32		      LDA	#50
    204  116a		       85 81		      STA	missile1x
    205  116c				   .
    206  116c							; 
    207  116c
    208  116c				   .
    209  116c							; 
    210  116c
    211  116c				   .
    212  116c							; 
    213  116c
    214  116c				   .
    215  116c							; 
    216  116c
    217  116c				   .
    218  116c							; 
    219  116c
    220  116c				   .
    221  116c							; 
    222  116c
    223  116c				   .L035		;  dim _P0_Luminosity	=  a.b
    224  116c
    225  116c				   .L036		;  dim asteroidY  =  player1y.b
    226  116c
    227  116c				   .L037		;  dim asteroid2Y  =  player2y.c
    228  116c
    229  116c				   .L038		;  dim asteroid3Y  =  player3y.d
    230  116c
    231  116c				   .L039		;  dim asteroid4Y  =  player4y.e
    232  116c
    233  116c				   .L040		;  dim explosionTicker  =  f
    234  116c
    235  116c				   .L041		;  dim realLives  =  g
    236  116c
    237  116c				   .L042		;  dim misx  =  missile1x.h
    238  116c
    239  116c				   .L043		;  dim misy  =  missile1y.i
    240  116c
    241  116c				   .L044		;  dim bulletMultiplier  =  j
    242  116c
    243  116c				   .L045		;  dim ticker	=  l
    244  116c
    245  116c				   .L046		;  dim switchSprite  =  p
    246  116c
    247  116c				   .L047		;  dim firstFrame  =  r
    248  116c
    249  116c				   .L048		;  dim _High_Score3  =  s
    250  116c
    251  116c				   .L049		;  dim _High_Score1  =  t
    252  116c
    253  116c				   .L050		;  dim _High_Score2  =  u
    254  116c
    255  116c				   .L051		;  dim _resetTicker  =  x
    256  116c
    257  116c				   .L052		;  dim gameReady  =  z
    258  116c
    259  116c				   .L053		;  dim _Bit0_Reset_Restrainer	=  y
    260  116c
    261  116c				   .L054		;  dim _Bit6_Sequence_Switch  =  y
    262  116c
    263  116c				   .
    264  116c							; 
    265  116c
    266  116c				   .L055		;  dim _sc1  =  score
    267  116c
    268  116c				   .L056		;  dim _sc2  =  score + 1
    269  116c
    270  116c				   .L057		;  dim _sc3  =  score + 2
    271  116c
    272  116c				   .L058		;  dim titlescreencolor  =  $F0
    273  116c
    274  116c				   .
    275  116c							; 
    276  116c
    277  116c				   .
    278  116c							; 
    279  116c
    280  116c				   .
    281  116c							; 
    282  116c
    283  116c				   .
    284  116c							; 
    285  116c
    286  116c				   .
    287  116c							; 
    288  116c
    289  116c				   .
    290  116c							; 
    291  116c
    292  116c				   .L059		;  bulletMultiplier  =  0
    293  116c
    294  116c		       a9 00		      LDA	#0
    295  116e		       85 e0		      STA	bulletMultiplier
    296  1170				   .L060		;  _High_Score1  =  _sc1
    297  1170
    298  1170		       a5 d2		      LDA	_sc1
    299  1172		       85 ea		      STA	_High_Score1
    300  1174				   .L061		;  _High_Score2  =  _sc2
    301  1174
    302  1174		       a5 d3		      LDA	_sc2
    303  1176		       85 eb		      STA	_High_Score2
    304  1178				   .L062		;  _High_Score3  =  _sc3
    305  1178
    306  1178		       a5 d4		      LDA	_sc3
    307  117a		       85 e9		      STA	_High_Score3
    308  117c				   .L063		;  lives  =  192
    309  117c
    310  117c		       a9 c0		      LDA	#192
    311  117e		       85 c2		      STA	lives
    312  1180				   .L064		;  ticker  =  0
    313  1180
    314  1180		       a9 00		      LDA	#0
    315  1182		       85 e2		      STA	ticker
    316  1184				   .L065		;  _resetTicker  =  0
    317  1184
    318  1184		       a9 00		      LDA	#0
    319  1186		       85 ee		      STA	_resetTicker
    320  1188				   .L066		;  switchSprite  =  0
    321  1188
    322  1188		       a9 00		      LDA	#0
    323  118a		       85 e6		      STA	switchSprite
    324  118c				   .L067		;  explosionTicker  =	0
    325  118c
    326  118c		       a9 00		      LDA	#0
    327  118e		       85 dc		      STA	explosionTicker
    328  1190				   .L068		;  scorecolor	=  $1b
    329  1190
    330  1190		       a9 1b		      LDA	#$1b
    331  1192		       85 d5		      STA	scorecolor
    332  1194				   .L069		;  firstFrame	=  0
    333  1194
    334  1194		       a9 00		      LDA	#0
    335  1196		       85 e8		      STA	firstFrame
    336  1198				   .L070		;  realLives  =  3
    337  1198
    338  1198		       a9 03		      LDA	#3
    339  119a		       85 dd		      STA	realLives
    340  119c				   .
    341  119c							; 
    342  119c
    343  119c				   .
    344  119c							; 
    345  119c
    346  119c				   .sprites
    347  119c							; sprites
    348  119c
    349  119c				   .L071		;  ticker  =  ticker  +  1
    350  119c
    351  119c		       e6 e2		      INC	ticker
    352  119e				   .L072		;  if ticker  >  10 then ticker  =  0
    353  119e
    354  119e		       a9 0a		      LDA	#10
    355  11a0		       c5 e2		      CMP	ticker
    356  11a2		       b0 04		      BCS	.skipL072
    357  11a4				   .condpart0
    358  11a4		       a9 00		      LDA	#0
    359  11a6		       85 e2		      STA	ticker
    360  11a8				   .skipL072
    361  11a8				   .
    362  11a8							; 
    363  11a8
    364  11a8				   .
    365  11a8							; 
    366  11a8
    367  11a8				   .
    368  11a8							; 
    369  11a8
    370  11a8				   .
    371  11a8							; 
    372  11a8
    373  11a8				   .
    374  11a8							; 
    375  11a8
    376  11a8				   .L073		;  if player1y  =  100  ||  player1y  =  0 then goto setPlayer1Color
    377  11a8
    378  11a8		       a5 8e		      LDA	player1y
    379  11aa		       c9 64		      CMP	#100
    380  11ac		       d0 03		      BNE	.skipL073
    381  11ae				   .condpart1
    382  11ae		       4c b7 d1 	      jmp	.condpart2
    383  11b1				   .skipL073
    384  11b1		       a5 8e		      LDA	player1y
    385  11b3		       c9 00		      CMP	#0
    386  11b5		       d0 03		      BNE	.skip0OR
    387  11b7				   .condpart2
    388  11b7		       4c a8 d6 	      jmp	.setPlayer1Color
    389  11ba
    390  11ba				   .skip0OR
    391  11ba				   .L074		;  if player2y  =  100  ||  player2y  =  0 then goto setPlayer2Color
    392  11ba
    393  11ba		       a5 8f		      LDA	player2y
    394  11bc		       c9 64		      CMP	#100
    395  11be		       d0 03		      BNE	.skipL074
    396  11c0				   .condpart3
    397  11c0		       4c c9 d1 	      jmp	.condpart4
    398  11c3				   .skipL074
    399  11c3		       a5 8f		      LDA	player2y
    400  11c5		       c9 00		      CMP	#0
    401  11c7		       d0 03		      BNE	.skip1OR
    402  11c9				   .condpart4
    403  11c9		       4c f1 d6 	      jmp	.setPlayer2Color
    404  11cc
    405  11cc				   .skip1OR
    406  11cc				   .L075		;  if player3y  =  100  ||  player4y  =  0 then goto setPlayer3Color
    407  11cc
    408  11cc		       a5 90		      LDA	player3y
    409  11ce		       c9 64		      CMP	#100
    410  11d0		       d0 03		      BNE	.skipL075
    411  11d2				   .condpart5
    412  11d2		       4c db d1 	      jmp	.condpart6
    413  11d5				   .skipL075
    414  11d5		       a5 91		      LDA	player4y
    415  11d7		       c9 00		      CMP	#0
    416  11d9		       d0 03		      BNE	.skip2OR
    417  11db				   .condpart6
    418  11db		       4c 76 d7 	      jmp	.setPlayer3Color
    419  11de
    420  11de				   .skip2OR
    421  11de				   .L076		;  if player4y  =  100  ||  player5y  =  0 then goto setPlayer4Color
    422  11de
    423  11de		       a5 91		      LDA	player4y
    424  11e0		       c9 64		      CMP	#100
    425  11e2		       d0 03		      BNE	.skipL076
    426  11e4				   .condpart7
    427  11e4		       4c ed d1 	      jmp	.condpart8
    428  11e7				   .skipL076
    429  11e7		       a5 92		      LDA	player5y
    430  11e9		       c9 00		      CMP	#0
    431  11eb		       d0 03		      BNE	.skip3OR
    432  11ed				   .condpart8
    433  11ed		       4c e7 d7 	      jmp	.setPlayer4Color
    434  11f0
    435  11f0				   .skip3OR
    436  11f0				   .
    437  11f0							; 
    438  11f0
    439  11f0				   .colorSetComplete
    440  11f0							; colorSetComplete
    441  11f0
    442  11f0				   .
    443  11f0							; 
    444  11f0
    445  11f0				   .L077		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    446  11f0
    447  11f0		       a5 92		      LDA	player5y
    448  11f2		       c9 c8		      CMP	#200
    449  11f4		       b0 02		      BCS	.skipL077
    450  11f6				   .condpart9
    451  11f6		       e6 dc		      INC	explosionTicker
    452  11f8				   .skipL077
    453  11f8				   .L078		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    454  11f8
    455  11f8		       a9 01		      LDA	#1
    456  11fa		       c5 dc		      CMP	explosionTicker
    457  11fc		       b0 0e		      BCS	.skipL078
    458  11fe				   .condpart10
    459  11fe		       a9 c8		      LDA	#200
    460  1200		       85 92		      STA	player5y
    461  1202		       a9 00		      LDA	#0
    462  1204		       85 dc		      STA	explosionTicker
    463  1206		       85 19		      STA	AUDV0
    464  1208		       85 15		      STA	AUDC0
    465  120a		       85 17		      STA	AUDF0
    466  120c				   .skipL078
    467  120c				   .
    468  120c							; 
    469  120c
    470  120c				   .L079		;  if player4y  <  80	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    471  120c
    472  120c		       a5 91		      LDA	player4y
    473  120e		       c9 50		      CMP	#80
    474  1210		       b0 11		      BCS	.skipL079
    475  1212				   .condpart11
    476  1212		       a9 96		      LDA	#150
    477  1214		       c5 8b		      CMP	missile1y
    478  1216		       b0 0b		      BCS	.skip11then
    479  1218				   .condpart12
    480  1218		       a5 91		      LDA	player4y
    481  121a		       85 8b		      STA	missile1y
    482  121c		       a5 88		      LDA	player4x
    483  121e		       38		      SEC
    484  121f		       e9 03		      SBC	#3
    485  1221		       85 81		      STA	missile1x
    486  1223				   .skip11then
    487  1223				   .skipL079
    488  1223				   .
    489  1223							; 
    490  1223
    491  1223				   .L080		;  if player3y  =  80	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    492  1223
    493  1223		       a5 90		      LDA	player3y
    494  1225		       c9 50		      CMP	#80
    495  1227		       d0 11		      BNE	.skipL080
    496  1229				   .condpart13
    497  1229		       a9 96		      LDA	#150
    498  122b		       c5 8b		      CMP	missile1y
    499  122d		       b0 0b		      BCS	.skip13then
    500  122f				   .condpart14
    501  122f		       a5 90		      LDA	player3y
    502  1231		       85 8b		      STA	missile1y
    503  1233		       a5 87		      LDA	player3x
    504  1235		       38		      SEC
    505  1236		       e9 03		      SBC	#3
    506  1238		       85 81		      STA	missile1x
    507  123a				   .skip13then
    508  123a				   .skipL080
    509  123a				   .
    510  123a							; 
    511  123a
    512  123a				   .L081		;  if player3y  =  70	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    513  123a
    514  123a		       a5 90		      LDA	player3y
    515  123c		       c9 46		      CMP	#70
    516  123e		       d0 11		      BNE	.skipL081
    517  1240				   .condpart15
    518  1240		       a9 96		      LDA	#150
    519  1242		       c5 8b		      CMP	missile1y
    520  1244		       b0 0b		      BCS	.skip15then
    521  1246				   .condpart16
    522  1246		       a5 90		      LDA	player3y
    523  1248		       85 8b		      STA	missile1y
    524  124a		       a5 87		      LDA	player3x
    525  124c		       38		      SEC
    526  124d		       e9 03		      SBC	#3
    527  124f		       85 81		      STA	missile1x
    528  1251				   .skip15then
    529  1251				   .skipL081
    530  1251				   .
    531  1251							; 
    532  1251
    533  1251				   .L082		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    534  1251
    535  1251		       a9 1e		      LDA	#30
    536  1253		       c5 8a		      CMP	missile0y
    537  1255		       b0 15		      BCS	.skipL082
    538  1257				   .condpart17
    539  1257		       a5 8a		      LDA	missile0y
    540  1259		       c9 3c		      CMP	#60
    541  125b		       b0 0f		      BCS	.skip17then
    542  125d				   .condpart18
    543  125d		       a9 02		      LDA	#2
    544  125f		       85 1a		      STA	AUDV1
    545  1261		       a9 0c		      LDA	#12
    546  1263		       85 16		      STA	AUDC1
    547  1265		       a9 07		      LDA	#7
    548  1267		       85 18		      STA	AUDF1
    549  1269		       4c 74 d2 	      jmp	.skipelse0
    550  126c				   .skip17then
    551  126c				   .skipL082
    552  126c		       a9 00		      LDA	#0
    553  126e		       85 1a		      STA	AUDV1
    554  1270		       85 16		      STA	AUDC1
    555  1272		       85 17		      STA	AUDF0
    556  1274				   .skipelse0
    557  1274				   .
    558  1274							; 
    559  1274
    560  1274				   .L083		;  if collision(missile1,player0) then goto gameOver
    561  1274
    562  1274		       24 01		      bit	CXM1P
    563  1276		       10 03		      BPL	.skipL083
    564  1278				   .condpart19
    565  1278		       4c 7e d9 	      jmp	.gameOver
    566  127b
    567  127b				   .skipL083
    568  127b				   .L084		;  if collision(player0,player1) then goto gameOver
    569  127b
    570  127b		       24 07		      bit	CXPPMM
    571  127d		       10 03		      BPL	.skipL084
    572  127f				   .condpart20
    573  127f		       4c 7e d9 	      jmp	.gameOver
    574  1282
    575  1282				   .skipL084
    576  1282				   .L085		;  if _resetTicker  >	0 then goto gameOver
    577  1282
    578  1282		       a9 00		      LDA	#0
    579  1284		       c5 ee		      CMP	_resetTicker
    580  1286		       b0 03		      BCS	.skipL085
    581  1288				   .condpart21
    582  1288		       4c 7e d9 	      jmp	.gameOver
    583  128b
    584  128b				   .skipL085
    585  128b				   .
    586  128b							; 
    587  128b
    588  128b				   .
    589  128b							; 
    590  128b
    591  128b				   .L086		;  if misy  <	150  &&  _resetTicker  =  0 then misy  =  misy	- 0.75
    592  128b
    593  128b		       a5 8b		      LDA	misy
    594  128d		       c9 96		      CMP	#150
    595  128f		       b0 13		      BCS	.skipL086
    596  1291				   .condpart22
    597  1291		       a5 ee		      LDA	_resetTicker
    598  1293		       c9 00		      CMP	#0
    599  1295		       d0 0d		      BNE	.skip22then
    600  1297				   .condpart23
    601  1297		       a5 df		      LDA	i
    602  1299		       38		      SEC
    603  129a		       e9 c0		      SBC	#192
    604  129c		       85 df		      STA	i
    605  129e		       a5 8b		      LDA	misy
    606  12a0		       e9 00		      SBC	#0
    607  12a2		       85 8b		      STA	misy
    608  12a4				   .skip22then
    609  12a4				   .skipL086
    610  12a4				   .
    611  12a4							; 
    612  12a4
    613  12a4				   .
    614  12a4							; 
    615  12a4
    616  12a4				   .titlepage
    617  12a4							; titlepage
    618  12a4
    619  12a4				   .L087		;  if joy0fire  ||  switchreset then gameReady  =  1
    620  12a4
    621  12a4		       24 0c		      bit	INPT4
    622  12a6		       30 03		      BMI	.skipL087
    623  12a8				   .condpart24
    624  12a8		       4c b2 d2 	      jmp	.condpart25
    625  12ab				   .skipL087
    626  12ab		       a9 01		      lda	#1
    627  12ad		       2c 82 02 	      bit	SWCHB
    628  12b0		       d0 04		      BNE	.skip9OR
    629  12b2				   .condpart25
    630  12b2		       a9 01		      LDA	#1
    631  12b4		       85 f0		      STA	gameReady
    632  12b6				   .skip9OR
    633  12b6				   .L088		;  if gameReady  =  1 then COLUBK  =  $0  :  goto gamestart
    634  12b6
    635  12b6		       a5 f0		      LDA	gameReady
    636  12b8		       c9 01		      CMP	#1
    637  12ba		       d0 07		      BNE	.skipL088
    638  12bc				   .condpart26
    639  12bc		       a9 00		      LDA	#$0
    640  12be		       85 09		      STA	COLUBK
    641  12c0		       4c f6 d2 	      jmp	.gamestart
    642  12c3
    643  12c3				   .skipL088
    644  12c3				   .L089		;  gosub titledrawscreen bank2
    645  12c3
    646  12c3		       85 d1		      sta	temp7
    647  12c5		       a9 d2		      lda	#>(ret_point1-1)
    648  12c7		       48		      pha
    649  12c8		       a9 da		      lda	#<(ret_point1-1)
    650  12ca		       48		      pha
    651  12cb		       a9 f4		      lda	#>(.titledrawscreen-1)
    652  12cd		       48		      pha
    653  12ce		       a9 40		      lda	#<(.titledrawscreen-1)
    654  12d0		       48		      pha
    655  12d1		       a5 d1		      lda	temp7
    656  12d3		       48		      pha
    657  12d4		       8a		      txa
    658  12d5		       48		      pha
    659  12d6		       a2 02		      ldx	#2
    660  12d8		       4c eb ff 	      jmp	BS_jsr
    661  12db				   ret_point1
    662  12db				   .L090		;  _sc1  =  0
    663  12db
    664  12db		       a9 00		      LDA	#0
    665  12dd		       85 d2		      STA	_sc1
    666  12df				   .L091		;  _sc2  =  0
    667  12df
    668  12df		       a9 00		      LDA	#0
    669  12e1		       85 d3		      STA	_sc2
    670  12e3				   .L092		;  _sc3  =  0
    671  12e3
    672  12e3		       a9 00		      LDA	#0
    673  12e5		       85 d4		      STA	_sc3
    674  12e7				   .L093		;  _sc1  =  _High_Score1
    675  12e7
    676  12e7		       a5 ea		      LDA	_High_Score1
    677  12e9		       85 d2		      STA	_sc1
    678  12eb				   .L094		;  _sc2  =  _High_Score2
    679  12eb
    680  12eb		       a5 eb		      LDA	_High_Score2
    681  12ed		       85 d3		      STA	_sc2
    682  12ef				   .L095		;  _sc3  =  _High_Score3
    683  12ef
    684  12ef		       a5 e9		      LDA	_High_Score3
    685  12f1		       85 d4		      STA	_sc3
    686  12f3				   .
    687  12f3							; 
    688  12f3
    689  12f3				   .L096		;  goto titlepage
    690  12f3
    691  12f3		       4c a4 d2 	      jmp	.titlepage
    692  12f6
    693  12f6				   .
    694  12f6							; 
    695  12f6
    696  12f6				   .gamestart
    697  12f6							; gamestart
    698  12f6
    699  12f6				   .L097		;  CTRLPF  =  1
    700  12f6
    701  12f6		       a9 01		      LDA	#1
    702  12f8		       85 0a		      STA	CTRLPF
    703  12fa				   .
    704  12fa							; 
    705  12fa
    706  12fa				   .L098		;  if firstFrame  =  0 then _sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1 :  lives  =  192 :  bulletMultiplier  =  0
    707  12fa
    708  12fa		       a5 e8		      LDA	firstFrame
    709  12fc		       c9 00		      CMP	#0
    710  12fe		       d0 14		      BNE	.skipL098
    711  1300				   .condpart27
    712  1300		       a9 00		      LDA	#0
    713  1302		       85 d2		      STA	_sc1
    714  1304		       85 d3		      STA	_sc2
    715  1306		       85 d4		      STA	_sc3
    716  1308		       a9 01		      LDA	#1
    717  130a		       85 e8		      STA	firstFrame
    718  130c		       a9 c0		      LDA	#192
    719  130e		       85 c2		      STA	lives
    720  1310		       a9 00		      LDA	#0
    721  1312		       85 e0		      STA	bulletMultiplier
    722  1314				   .skipL098
    723  1314				   .
    724  1314							; 
    725  1314
    726  1314				   .L099		;  lives:
    727  1314
    728  1314		       a9 84		      LDA	#<lives__L099
    729  1316		       85 c1		      STA	lifepointer
    730  1318		       a5 c2		      LDA	lifepointer+1
    731  131a		       29 e0		      AND	#$E0
    732  131c		       09 1c		      ORA	#(>lives__L099)&($1F)
    733  131e		       85 c2		      STA	lifepointer+1
    734  1320				   .
    735  1320							; 
    736  1320
    737  1320				   .L0100		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    738  1320
    739  1320		       a5 ea		      LDA	_High_Score1
    740  1322		       c5 d2		      CMP	_sc1
    741  1324		       b0 03		      BCS	.skipL0100
    742  1326				   .condpart28
    743  1326		       4c 59 d3 	      jmp	.__New_High_Score
    744  1329
    745  1329				   .skipL0100
    746  1329				   .L0101		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    747  1329
    748  1329		       a5 d2		      LDA	_sc1
    749  132b		       c5 ea		      CMP	_High_Score1
    750  132d		       b0 03		      BCS	.skipL0101
    751  132f				   .condpart29
    752  132f		       4c 65 d3 	      jmp	.__Skip_High_Score
    753  1332
    754  1332				   .skipL0101
    755  1332				   .L0102		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    756  1332
    757  1332		       a5 eb		      LDA	_High_Score2
    758  1334		       c5 d3		      CMP	_sc2
    759  1336		       b0 03		      BCS	.skipL0102
    760  1338				   .condpart30
    761  1338		       4c 59 d3 	      jmp	.__New_High_Score
    762  133b
    763  133b				   .skipL0102
    764  133b				   .L0103		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    765  133b
    766  133b		       a5 d3		      LDA	_sc2
    767  133d		       c5 eb		      CMP	_High_Score2
    768  133f		       b0 03		      BCS	.skipL0103
    769  1341				   .condpart31
    770  1341		       4c 65 d3 	      jmp	.__Skip_High_Score
    771  1344
    772  1344				   .skipL0103
    773  1344				   .
    774  1344							; 
    775  1344
    776  1344				   .L0104		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    777  1344
    778  1344		       a5 e9		      LDA	_High_Score3
    779  1346		       c5 d4		      CMP	_sc3
    780  1348		       b0 03		      BCS	.skipL0104
    781  134a				   .condpart32
    782  134a		       4c 59 d3 	      jmp	.__New_High_Score
    783  134d
    784  134d				   .skipL0104
    785  134d				   .L0105		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    786  134d
    787  134d		       a5 d4		      LDA	_sc3
    788  134f		       c5 e9		      CMP	_High_Score3
    789  1351		       b0 03		      BCS	.skipL0105
    790  1353				   .condpart33
    791  1353		       4c 65 d3 	      jmp	.__Skip_High_Score
    792  1356
    793  1356				   .skipL0105
    794  1356				   .
    795  1356							; 
    796  1356
    797  1356				   .L0106		;  goto __Skip_High_Score
    798  1356
    799  1356		       4c 65 d3 	      jmp	.__Skip_High_Score
    800  1359
    801  1359				   .
    802  1359							; 
    803  1359
    804  1359				   .
    805  1359							; 
    806  1359
    807  1359				   .__New_High_Score
    808  1359							; __New_High_Score
    809  1359
    810  1359				   .
    811  1359							; 
    812  1359
    813  1359				   .L0107		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    814  1359
    815  1359		       a5 d2		      LDA	_sc1
    816  135b		       85 ea		      STA	_High_Score1
    817  135d		       a5 d3		      LDA	_sc2
    818  135f		       85 eb		      STA	_High_Score2
    819  1361		       a5 d4		      LDA	_sc3
    820  1363		       85 e9		      STA	_High_Score3
    821  1365				   .__Skip_High_Score
    822  1365							; __Skip_High_Score
    823  1365
    824  1365				   .
    825  1365							; 
    826  1365
    827  1365				   .
    828  1365							; 
    829  1365
    830  1365				   .L0108		;  if ticker  <  5 then player0: 
    831  1365
    832  1365		       a5 e2		      LDA	ticker
    833  1367		       c9 05		      CMP	#5
    834  1369		       b0 0c		      BCS	.skipL0108
    835  136b				   .condpart34
    836  136b		       a2 8c		      LDX	#<player34then_0
    837  136d		       86 a2		      STX	player0pointerlo
    838  136f		       a9 fc		      LDA	#>player34then_0
    839  1371		       85 a3		      STA	player0pointerhi
    840  1373		       a9 09		      LDA	#9
    841  1375		       85 b0		      STA	player0height
    842  1377				   .skipL0108
    843  1377				   .
    844  1377							; 
    845  1377
    846  1377				   .L0109		;  if ticker  >=  5 then player0: 
    847  1377
    848  1377		       a5 e2		      LDA	ticker
    849  1379		       c9 05		      CMP	#5
    850  137b		       90 0c		      BCC	.skipL0109
    851  137d				   .condpart35
    852  137d		       a2 95		      LDX	#<player35then_0
    853  137f		       86 a2		      STX	player0pointerlo
    854  1381		       a9 fc		      LDA	#>player35then_0
    855  1383		       85 a3		      STA	player0pointerhi
    856  1385		       a9 09		      LDA	#9
    857  1387		       85 b0		      STA	player0height
    858  1389				   .skipL0109
    859  1389				   .
    860  1389							; 
    861  1389
    862  1389				   .L0110		;  if ticker  <  5 then player1:
    863  1389
    864  1389		       a5 e2		      LDA	ticker
    865  138b		       c9 05		      CMP	#5
    866  138d		       b0 0c		      BCS	.skipL0110
    867  138f				   .condpart36
    868  138f		       a2 9e		      LDX	#<player36then_1
    869  1391		       86 a6		      STX	player1pointerlo
    870  1393		       a9 fc		      LDA	#>player36then_1
    871  1395		       85 ab		      STA	player1pointerhi
    872  1397		       a9 09		      LDA	#9
    873  1399		       85 b1		      STA	player1height
    874  139b				   .skipL0110
    875  139b				   .
    876  139b							; 
    877  139b
    878  139b				   .L0111		;  if ticker  >=  5 then player1:
    879  139b
    880  139b		       a5 e2		      LDA	ticker
    881  139d		       c9 05		      CMP	#5
    882  139f		       90 0c		      BCC	.skipL0111
    883  13a1				   .condpart37
    884  13a1		       a2 a6		      LDX	#<player37then_1
    885  13a3		       86 a6		      STX	player1pointerlo
    886  13a5		       a9 fc		      LDA	#>player37then_1
    887  13a7		       85 ab		      STA	player1pointerhi
    888  13a9		       a9 09		      LDA	#9
    889  13ab		       85 b1		      STA	player1height
    890  13ad				   .skipL0111
    891  13ad				   .L0112		;  if ticker  <  5 then player2:
    892  13ad
    893  13ad		       a5 e2		      LDA	ticker
    894  13af		       c9 05		      CMP	#5
    895  13b1		       b0 0c		      BCS	.skipL0112
    896  13b3				   .condpart38
    897  13b3		       a2 ae		      LDX	#<player38then_2
    898  13b5		       86 a7		      STX	player2pointerlo
    899  13b7		       a9 fc		      LDA	#>player38then_2
    900  13b9		       85 ac		      STA	player2pointerhi
    901  13bb		       a9 09		      LDA	#9
    902  13bd		       85 b2		      STA	player2height
    903  13bf				   .skipL0112
    904  13bf				   .
    905  13bf							; 
    906  13bf
    907  13bf				   .L0113		;  if ticker  >=  5 then player2:
    908  13bf
    909  13bf		       a5 e2		      LDA	ticker
    910  13c1		       c9 05		      CMP	#5
    911  13c3		       90 0c		      BCC	.skipL0113
    912  13c5				   .condpart39
    913  13c5		       a2 b6		      LDX	#<player39then_2
    914  13c7		       86 a7		      STX	player2pointerlo
    915  13c9		       a9 fc		      LDA	#>player39then_2
    916  13cb		       85 ac		      STA	player2pointerhi
    917  13cd		       a9 09		      LDA	#9
    918  13cf		       85 b2		      STA	player2height
    919  13d1				   .skipL0113
    920  13d1				   .
    921  13d1							; 
    922  13d1
    923  13d1				   .L0114		;  if ticker  <  3 then player3: 
    924  13d1
    925  13d1		       a5 e2		      LDA	ticker
    926  13d3		       c9 03		      CMP	#3
    927  13d5		       b0 0c		      BCS	.skipL0114
    928  13d7				   .condpart40
    929  13d7		       a2 be		      LDX	#<player40then_3
    930  13d9		       86 a8		      STX	player3pointerlo
    931  13db		       a9 fc		      LDA	#>player40then_3
    932  13dd		       85 ad		      STA	player3pointerhi
    933  13df		       a9 09		      LDA	#9
    934  13e1		       85 b3		      STA	player3height
    935  13e3				   .skipL0114
    936  13e3				   .
    937  13e3							; 
    938  13e3
    939  13e3				   .L0115		;  if ticker  >= 3  &&  ticker  <  6 then player3: 
    940  13e3
    941  13e3		       a5 e2		      LDA	ticker
    942  13e5		       c9 03		      CMP	#3
    943  13e7		       90 12		      BCC	.skipL0115
    944  13e9				   .condpart41
    945  13e9		       a5 e2		      LDA	ticker
    946  13eb		       c9 06		      CMP	#6
    947  13ed		       b0 0c		      BCS	.skip41then
    948  13ef				   .condpart42
    949  13ef		       a2 c6		      LDX	#<player42then_3
    950  13f1		       86 a8		      STX	player3pointerlo
    951  13f3		       a9 fc		      LDA	#>player42then_3
    952  13f5		       85 ad		      STA	player3pointerhi
    953  13f7		       a9 09		      LDA	#9
    954  13f9		       85 b3		      STA	player3height
    955  13fb				   .skip41then
    956  13fb				   .skipL0115
    957  13fb				   .
    958  13fb							; 
    959  13fb
    960  13fb				   .L0116		;  if ticker  >=  6 then player3: 
    961  13fb
    962  13fb		       a5 e2		      LDA	ticker
    963  13fd		       c9 06		      CMP	#6
    964  13ff		       90 0c		      BCC	.skipL0116
    965  1401				   .condpart43
    966  1401		       a2 ce		      LDX	#<player43then_3
    967  1403		       86 a8		      STX	player3pointerlo
    968  1405		       a9 fc		      LDA	#>player43then_3
    969  1407		       85 ad		      STA	player3pointerhi
    970  1409		       a9 09		      LDA	#9
    971  140b		       85 b3		      STA	player3height
    972  140d				   .skipL0116
    973  140d				   .
    974  140d							; 
    975  140d
    976  140d				   .
    977  140d							; 
    978  140d
    979  140d				   .L0117		;  if switchSprite  >	0  &&  ticker  <  5 then player2:
    980  140d
    981  140d		       a9 00		      LDA	#0
    982  140f		       c5 e6		      CMP	switchSprite
    983  1411		       b0 12		      BCS	.skipL0117
    984  1413				   .condpart44
    985  1413		       a5 e2		      LDA	ticker
    986  1415		       c9 05		      CMP	#5
    987  1417		       b0 0c		      BCS	.skip44then
    988  1419				   .condpart45
    989  1419		       a2 d6		      LDX	#<player45then_2
    990  141b		       86 a7		      STX	player2pointerlo
    991  141d		       a9 fc		      LDA	#>player45then_2
    992  141f		       85 ac		      STA	player2pointerhi
    993  1421		       a9 09		      LDA	#9
    994  1423		       85 b2		      STA	player2height
    995  1425				   .skip44then
    996  1425				   .skipL0117
    997  1425				   .
    998  1425							; 
    999  1425
   1000  1425				   .L0118		;  if switchSprite  >	0  &&  ticker  >=  5 then player2:
   1001  1425
   1002  1425		       a9 00		      LDA	#0
   1003  1427		       c5 e6		      CMP	switchSprite
   1004  1429		       b0 12		      BCS	.skipL0118
   1005  142b				   .condpart46
   1006  142b		       a5 e2		      LDA	ticker
   1007  142d		       c9 05		      CMP	#5
   1008  142f		       90 0c		      BCC	.skip46then
   1009  1431				   .condpart47
   1010  1431		       a2 de		      LDX	#<player47then_2
   1011  1433		       86 a7		      STX	player2pointerlo
   1012  1435		       a9 fc		      LDA	#>player47then_2
   1013  1437		       85 ac		      STA	player2pointerhi
   1014  1439		       a9 09		      LDA	#9
   1015  143b		       85 b2		      STA	player2height
   1016  143d				   .skip46then
   1017  143d				   .skipL0118
   1018  143d				   .
   1019  143d							; 
   1020  143d
   1021  143d				   .
   1022  143d							; 
   1023  143d
   1024  143d				   .L0119		;  if ticker  <  5 then player4:
   1025  143d
   1026  143d		       a5 e2		      LDA	ticker
   1027  143f		       c9 05		      CMP	#5
   1028  1441		       b0 0c		      BCS	.skipL0119
   1029  1443				   .condpart48
   1030  1443		       a2 e6		      LDX	#<player48then_4
   1031  1445		       86 a9		      STX	player4pointerlo
   1032  1447		       a9 fc		      LDA	#>player48then_4
   1033  1449		       85 ae		      STA	player4pointerhi
   1034  144b		       a9 09		      LDA	#9
   1035  144d		       85 b4		      STA	player4height
   1036  144f				   .skipL0119
   1037  144f				   .
   1038  144f							; 
   1039  144f
   1040  144f				   .L0120		;  if ticker  >=  5 then player4:
   1041  144f
   1042  144f		       a5 e2		      LDA	ticker
   1043  1451		       c9 05		      CMP	#5
   1044  1453		       90 0c		      BCC	.skipL0120
   1045  1455				   .condpart49
   1046  1455		       a2 ee		      LDX	#<player49then_4
   1047  1457		       86 a9		      STX	player4pointerlo
   1048  1459		       a9 fc		      LDA	#>player49then_4
   1049  145b		       85 ae		      STA	player4pointerhi
   1050  145d		       a9 09		      LDA	#9
   1051  145f		       85 b4		      STA	player4height
   1052  1461				   .skipL0120
   1053  1461				   .
   1054  1461							; 
   1055  1461
   1056  1461				   .L0121		;  if explosionTicker	=  1 then player5:
   1057  1461
   1058  1461		       a5 dc		      LDA	explosionTicker
   1059  1463		       c9 01		      CMP	#1
   1060  1465		       d0 0c		      BNE	.skipL0121
   1061  1467				   .condpart50
   1062  1467		       a2 f6		      LDX	#<player50then_5
   1063  1469		       86 aa		      STX	player5pointerlo
   1064  146b		       a9 fc		      LDA	#>player50then_5
   1065  146d		       85 af		      STA	player5pointerhi
   1066  146f		       a9 09		      LDA	#9
   1067  1471		       85 b5		      STA	player5height
   1068  1473				   .skipL0121
   1069  1473				   .
   1070  1473							; 
   1071  1473
   1072  1473				   .L0122		;  if explosionTicker	=  2 then player5:
   1073  1473
   1074  1473		       a5 dc		      LDA	explosionTicker
   1075  1475		       c9 02		      CMP	#2
   1076  1477		       d0 0c		      BNE	.skipL0122
   1077  1479				   .condpart51
   1078  1479		       a2 5a		      LDX	#<player51then_5
   1079  147b		       86 aa		      STX	player5pointerlo
   1080  147d		       a9 fd		      LDA	#>player51then_5
   1081  147f		       85 af		      STA	player5pointerhi
   1082  1481		       a9 09		      LDA	#9
   1083  1483		       85 b5		      STA	player5height
   1084  1485				   .skipL0122
   1085  1485				   .
   1086  1485							; 
   1087  1485
   1088  1485				   .L0123		;  if explosionTicker	=  3 then player5:
   1089  1485
   1090  1485		       a5 dc		      LDA	explosionTicker
   1091  1487		       c9 03		      CMP	#3
   1092  1489		       d0 0c		      BNE	.skipL0123
   1093  148b				   .condpart52
   1094  148b		       a2 62		      LDX	#<player52then_5
   1095  148d		       86 aa		      STX	player5pointerlo
   1096  148f		       a9 fd		      LDA	#>player52then_5
   1097  1491		       85 af		      STA	player5pointerhi
   1098  1493		       a9 09		      LDA	#9
   1099  1495		       85 b5		      STA	player5height
   1100  1497				   .skipL0123
   1101  1497				   .
   1102  1497							; 
   1103  1497
   1104  1497				   .
   1105  1497							; 
   1106  1497
   1107  1497				   .
   1108  1497							; 
   1109  1497
   1110  1497				   .
   1111  1497							; 
   1112  1497
   1113  1497				   .L0124		;  if _resetTicker  >	0 then goto frameReset
   1114  1497
   1115  1497		       a9 00		      LDA	#0
   1116  1499		       c5 ee		      CMP	_resetTicker
   1117  149b		       b0 03		      BCS	.skipL0124
   1118  149d				   .condpart53
   1119  149d		       4c b4 d5 	      jmp	.frameReset
   1120  14a0
   1121  14a0				   .skipL0124
   1122  14a0				   .
   1123  14a0							; 
   1124  14a0
   1125  14a0				   .L0125		;  if player1y  <  41 then goto gameOver
   1126  14a0
   1127  14a0		       a5 8e		      LDA	player1y
   1128  14a2		       c9 29		      CMP	#41
   1129  14a4		       b0 03		      BCS	.skipL0125
   1130  14a6				   .condpart54
   1131  14a6		       4c 7e d9 	      jmp	.gameOver
   1132  14a9
   1133  14a9				   .skipL0125
   1134  14a9				   .L0126		;  if player2y  <  41 then goto gameOver
   1135  14a9
   1136  14a9		       a5 8f		      LDA	player2y
   1137  14ab		       c9 29		      CMP	#41
   1138  14ad		       b0 03		      BCS	.skipL0126
   1139  14af				   .condpart55
   1140  14af		       4c 7e d9 	      jmp	.gameOver
   1141  14b2
   1142  14b2				   .skipL0126
   1143  14b2				   .L0127		;  if player3y  <  41 then goto gameOver
   1144  14b2
   1145  14b2		       a5 90		      LDA	player3y
   1146  14b4		       c9 29		      CMP	#41
   1147  14b6		       b0 03		      BCS	.skipL0127
   1148  14b8				   .condpart56
   1149  14b8		       4c 7e d9 	      jmp	.gameOver
   1150  14bb
   1151  14bb				   .skipL0127
   1152  14bb				   .L0128		;  if player4y  <  41 then goto gameOver
   1153  14bb
   1154  14bb		       a5 91		      LDA	player4y
   1155  14bd		       c9 29		      CMP	#41
   1156  14bf		       b0 03		      BCS	.skipL0128
   1157  14c1				   .condpart57
   1158  14c1		       4c 7e d9 	      jmp	.gameOver
   1159  14c4
   1160  14c4				   .skipL0128
   1161  14c4				   .
   1162  14c4							; 
   1163  14c4
   1164  14c4				   .L0129		;  if missile1y  <  10 then missile1y	=  200
   1165  14c4
   1166  14c4		       a5 8b		      LDA	missile1y
   1167  14c6		       c9 0a		      CMP	#10
   1168  14c8		       b0 04		      BCS	.skipL0129
   1169  14ca				   .condpart58
   1170  14ca		       a9 c8		      LDA	#200
   1171  14cc		       85 8b		      STA	missile1y
   1172  14ce				   .skipL0129
   1173  14ce				   .
   1174  14ce							; 
   1175  14ce
   1176  14ce				   .
   1177  14ce							; 
   1178  14ce
   1179  14ce				   .
   1180  14ce							; 
   1181  14ce
   1182  14ce				   .L0130		;  if missile0y  >  100 then goto skip
   1183  14ce
   1184  14ce		       a9 64		      LDA	#100
   1185  14d0		       c5 8a		      CMP	missile0y
   1186  14d2		       b0 03		      BCS	.skipL0130
   1187  14d4				   .condpart59
   1188  14d4		       4c e1 d4 	      jmp	.skip
   1189  14d7
   1190  14d7				   .skipL0130
   1191  14d7				   .
   1192  14d7							; 
   1193  14d7
   1194  14d7				   .
   1195  14d7							; 
   1196  14d7
   1197  14d7				   .
   1198  14d7							; 
   1199  14d7
   1200  14d7				   .
   1201  14d7							; 
   1202  14d7
   1203  14d7				   .L0131		;  missile0y  =  missile0y + 2 : goto draw_loop
   1204  14d7
   1205  14d7		       a5 8a		      LDA	missile0y
   1206  14d9		       18		      CLC
   1207  14da		       69 02		      ADC	#2
   1208  14dc		       85 8a		      STA	missile0y
   1209  14de		       4c 32 d5 	      jmp	.draw_loop
   1210  14e1
   1211  14e1				   .
   1212  14e1							; 
   1213  14e1
   1214  14e1				   .
   1215  14e1							; 
   1216  14e1
   1217  14e1				   .
   1218  14e1							; 
   1219  14e1
   1220  14e1				   .skip
   1221  14e1							; skip
   1222  14e1
   1223  14e1				   .L0132		;  if player0y  <  41	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  bulletMultiplier  =	bulletMultiplier  -  1 :  goto draw_loop
   1224  14e1
   1225  14e1		       a5 8d		      LDA	player0y
   1226  14e3		       c9 29		      CMP	#41
   1227  14e5		       b0 18		      BCS	.skipL0132
   1228  14e7				   .condpart60
   1229  14e7		       a5 c2		      LDA	lives
   1230  14e9		       c9 c4		      CMP	#196
   1231  14eb		       b0 12		      BCS	.skip60then
   1232  14ed				   .condpart61
   1233  14ed		       a5 e2		      LDA	ticker
   1234  14ef		       c9 00		      CMP	#0
   1235  14f1		       d0 0c		      BNE	.skip61then
   1236  14f3				   .condpart62
   1237  14f3		       a5 c2		      LDA	lives
   1238  14f5		       18		      CLC
   1239  14f6		       69 20		      ADC	#32
   1240  14f8		       85 c2		      STA	lives
   1241  14fa		       c6 e0		      DEC	bulletMultiplier
   1242  14fc		       4c 32 d5 	      jmp	.draw_loop
   1243  14ff
   1244  14ff				   .skip61then
   1245  14ff				   .skip60then
   1246  14ff				   .skipL0132
   1247  14ff				   .L0133		;  if player0y  <  41 then goto draw_loop
   1248  14ff
   1249  14ff		       a5 8d		      LDA	player0y
   1250  1501		       c9 29		      CMP	#41
   1251  1503		       b0 03		      BCS	.skipL0133
   1252  1505				   .condpart63
   1253  1505		       4c 32 d5 	      jmp	.draw_loop
   1254  1508
   1255  1508				   .skipL0133
   1256  1508				   .L0134		;  if lives  <  32 then goto draw_loop
   1257  1508
   1258  1508		       a5 c2		      LDA	lives
   1259  150a		       c9 20		      CMP	#32
   1260  150c		       b0 03		      BCS	.skipL0134
   1261  150e				   .condpart64
   1262  150e		       4c 32 d5 	      jmp	.draw_loop
   1263  1511
   1264  1511				   .skipL0134
   1265  1511				   .L0135		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : bulletMultiplier  =  bulletMultiplier  +  1 :  lives	=  lives  -  32  : missile0x  =  player0x  +  5
   1266  1511
   1267  1511		       24 0c		      bit	INPT4
   1268  1513		       30 1d		      BMI	.skipL0135
   1269  1515				   .condpart65
   1270  1515		       a9 96		      LDA	#150
   1271  1517		       c5 92		      CMP	player5y
   1272  1519		       b0 17		      BCS	.skip65then
   1273  151b				   .condpart66
   1274  151b		       a5 8d		      LDA	player0y
   1275  151d		       38		      SEC
   1276  151e		       e9 04		      SBC	#4
   1277  1520		       85 8a		      STA	missile0y
   1278  1522		       e6 e0		      INC	bulletMultiplier
   1279  1524		       a5 c2		      LDA	lives
   1280  1526		       38		      SEC
   1281  1527		       e9 20		      SBC	#32
   1282  1529		       85 c2		      STA	lives
   1283  152b		       a5 84		      LDA	player0x
   1284  152d		       18		      CLC
   1285  152e		       69 05		      ADC	#5
   1286  1530		       85 80		      STA	missile0x
   1287  1532				   .skip65then
   1288  1532				   .skipL0135
   1289  1532				   .draw_loop
   1290  1532							; draw_loop
   1291  1532
   1292  1532				   .L0136		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x  +  1
   1293  1532
   1294  1532		       2c 80 02 	      bit	SWCHA
   1295  1535		       30 08		      BMI	.skipL0136
   1296  1537				   .condpart67
   1297  1537		       a5 84		      LDA	player0x
   1298  1539		       c9 86		      CMP	#134
   1299  153b		       b0 02		      BCS	.skip67then
   1300  153d				   .condpart68
   1301  153d		       e6 84		      INC	player0x
   1302  153f				   .skip67then
   1303  153f				   .skipL0136
   1304  153f				   .L0137		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x  -  1
   1305  153f
   1306  153f		       2c 80 02 	      bit	SWCHA
   1307  1542		       70 08		      BVS	.skipL0137
   1308  1544				   .condpart69
   1309  1544		       a9 13		      LDA	#19
   1310  1546		       c5 84		      CMP	player0x
   1311  1548		       b0 02		      BCS	.skip69then
   1312  154a				   .condpart70
   1313  154a		       c6 84		      DEC	player0x
   1314  154c				   .skip69then
   1315  154c				   .skipL0137
   1316  154c				   .L0138		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y  -  1
   1317  154c
   1318  154c		       a9 20		      lda	#$20
   1319  154e		       2c 80 02 	      bit	SWCHA
   1320  1551		       d0 08		      BNE	.skipL0138
   1321  1553				   .condpart71
   1322  1553		       a9 0a		      LDA	#10
   1323  1555		       c5 8d		      CMP	player0y
   1324  1557		       b0 02		      BCS	.skip71then
   1325  1559				   .condpart72
   1326  1559		       c6 8d		      DEC	player0y
   1327  155b				   .skip71then
   1328  155b				   .skipL0138
   1329  155b				   .L0139		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y  +  1
   1330  155b
   1331  155b		       a9 10		      lda	#$10
   1332  155d		       2c 80 02 	      bit	SWCHA
   1333  1560		       d0 08		      BNE	.skipL0139
   1334  1562				   .condpart73
   1335  1562		       a5 8d		      LDA	player0y
   1336  1564		       c9 5a		      CMP	#90
   1337  1566		       b0 02		      BCS	.skip73then
   1338  1568				   .condpart74
   1339  1568		       e6 8d		      INC	player0y
   1340  156a				   .skip73then
   1341  156a				   .skipL0139
   1342  156a				   .
   1343  156a							; 
   1344  156a
   1345  156a				   .L0140		;  if player0y  <  41	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1346  156a
   1347  156a		       a5 8d		      LDA	player0y
   1348  156c		       c9 29		      CMP	#41
   1349  156e		       b0 13		      BCS	.skipL0140
   1350  1570				   .condpart75
   1351  1570		       a5 c2		      LDA	lives
   1352  1572		       c9 c4		      CMP	#196
   1353  1574		       b0 0d		      BCS	.skip75then
   1354  1576				   .condpart76
   1355  1576		       a5 e2		      LDA	ticker
   1356  1578		       c9 05		      CMP	#5
   1357  157a		       b0 07		      BCS	.skip76then
   1358  157c				   .condpart77
   1359  157c		       a9 f0		      LDA	#$F0
   1360  157e		       85 06		      STA	COLUP0
   1361  1580		       4c ad d5 	      jmp	.exitColourSwitch
   1362  1583
   1363  1583				   .skip76then
   1364  1583				   .skip75then
   1365  1583				   .skipL0140
   1366  1583				   .L0141		;  if player0y  <  41	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1367  1583
   1368  1583		       a5 8d		      LDA	player0y
   1369  1585		       c9 29		      CMP	#41
   1370  1587		       b0 13		      BCS	.skipL0141
   1371  1589				   .condpart78
   1372  1589		       a5 c2		      LDA	lives
   1373  158b		       c9 c4		      CMP	#196
   1374  158d		       b0 0d		      BCS	.skip78then
   1375  158f				   .condpart79
   1376  158f		       a9 05		      LDA	#5
   1377  1591		       c5 e2		      CMP	ticker
   1378  1593		       b0 07		      BCS	.skip79then
   1379  1595				   .condpart80
   1380  1595		       a9 02		      LDA	#$02
   1381  1597		       85 06		      STA	COLUP0
   1382  1599		       4c ad d5 	      jmp	.exitColourSwitch
   1383  159c
   1384  159c				   .skip79then
   1385  159c				   .skip78then
   1386  159c				   .skipL0141
   1387  159c				   .L0142		;  if lives  <  32 then COLUP0  =  $40 else COLUP0  =	$C6
   1388  159c
   1389  159c		       a5 c2		      LDA	lives
   1390  159e		       c9 20		      CMP	#32
   1391  15a0		       b0 07		      BCS	.skipL0142
   1392  15a2				   .condpart81
   1393  15a2		       a9 40		      LDA	#$40
   1394  15a4		       85 06		      STA	COLUP0
   1395  15a6		       4c ad d5 	      jmp	.skipelse1
   1396  15a9				   .skipL0142
   1397  15a9		       a9 c6		      LDA	#$C6
   1398  15ab		       85 06		      STA	COLUP0
   1399  15ad				   .skipelse1
   1400  15ad				   .
   1401  15ad							; 
   1402  15ad
   1403  15ad				   .exitColourSwitch
   1404  15ad							; exitColourSwitch
   1405  15ad
   1406  15ad				   .
   1407  15ad							; 
   1408  15ad
   1409  15ad				   .L0143		;  if collision(missile0,player1) then goto collisions
   1410  15ad
   1411  15ad		       24 00		      bit	CXM0P
   1412  15af		       10 03		      BPL	.skipL0143
   1413  15b1				   .condpart82
   1414  15b1		       4c 58 d8 	      jmp	.collisions
   1415  15b4
   1416  15b4				   .skipL0143
   1417  15b4				   .
   1418  15b4							; 
   1419  15b4
   1420  15b4				   .
   1421  15b4							; 
   1422  15b4
   1423  15b4				   .
   1424  15b4							; 
   1425  15b4
   1426  15b4				   .
   1427  15b4							; 
   1428  15b4
   1429  15b4				   .
   1430  15b4							; 
   1431  15b4
   1432  15b4				   .
   1433  15b4							; 
   1434  15b4
   1435  15b4				   .
   1436  15b4							; 
   1437  15b4
   1438  15b4				   .frameReset
   1439  15b4							; frameReset
   1440  15b4
   1441  15b4				   .
   1442  15b4							; 
   1443  15b4
   1444  15b4				   .
   1445  15b4							; 
   1446  15b4
   1447  15b4				   .
   1448  15b4							; 
   1449  15b4
   1450  15b4				   .
   1451  15b4							; 
   1452  15b4
   1453  15b4				   .
   1454  15b4							; 
   1455  15b4
   1456  15b4				   .
   1457  15b4							; 
   1458  15b4
   1459  15b4				   .L0144		;  if _resetTicker  >	0 then goto resetScreen
   1460  15b4
   1461  15b4		       a9 00		      LDA	#0
   1462  15b6		       c5 ee		      CMP	_resetTicker
   1463  15b8		       b0 03		      BCS	.skipL0144
   1464  15ba				   .condpart83
   1465  15ba		       4c 89 d6 	      jmp	.resetScreen
   1466  15bd
   1467  15bd				   .skipL0144
   1468  15bd				   .
   1469  15bd							; 
   1470  15bd
   1471  15bd				   .L0145		;  if _sc3  <	60  &&	_sc2  <  1 then goto slow
   1472  15bd
   1473  15bd		       a5 d4		      LDA	_sc3
   1474  15bf		       c9 3c		      CMP	#60
   1475  15c1		       b0 09		      BCS	.skipL0145
   1476  15c3				   .condpart84
   1477  15c3		       a5 d3		      LDA	_sc2
   1478  15c5		       c9 01		      CMP	#1
   1479  15c7		       b0 03		      BCS	.skip84then
   1480  15c9				   .condpart85
   1481  15c9		       4c 43 d6 	      jmp	.slow
   1482  15cc
   1483  15cc				   .skip84then
   1484  15cc				   .skipL0145
   1485  15cc				   .
   1486  15cc							; 
   1487  15cc
   1488  15cc				   .L0146		;  if _sc2  <	1 then goto fast
   1489  15cc
   1490  15cc		       a5 d3		      LDA	_sc2
   1491  15ce		       c9 01		      CMP	#1
   1492  15d0		       b0 03		      BCS	.skipL0146
   1493  15d2				   .condpart86
   1494  15d2		       4c 0c d6 	      jmp	.fast
   1495  15d5
   1496  15d5				   .skipL0146
   1497  15d5				   .
   1498  15d5							; 
   1499  15d5
   1500  15d5				   .
   1501  15d5							; 
   1502  15d5
   1503  15d5				   .L0147		;  asteroidY  =  asteroidY  -	0.19
   1504  15d5
   1505  15d5		       a5 d8		      LDA	b
   1506  15d7		       38		      SEC
   1507  15d8		       e9 30		      SBC	#48
   1508  15da		       85 d8		      STA	b
   1509  15dc		       a5 8e		      LDA	asteroidY
   1510  15de		       e9 00		      SBC	#0
   1511  15e0		       85 8e		      STA	asteroidY
   1512  15e2				   .L0148		;  asteroid2Y	=  asteroid2Y  -  0.21
   1513  15e2
   1514  15e2		       a5 d9		      LDA	c
   1515  15e4		       38		      SEC
   1516  15e5		       e9 35		      SBC	#53
   1517  15e7		       85 d9		      STA	c
   1518  15e9		       a5 8f		      LDA	asteroid2Y
   1519  15eb		       e9 00		      SBC	#0
   1520  15ed		       85 8f		      STA	asteroid2Y
   1521  15ef				   .L0149		;  asteroid3Y	=  asteroid3Y  -  0.22
   1522  15ef
   1523  15ef		       a5 da		      LDA	d
   1524  15f1		       38		      SEC
   1525  15f2		       e9 38		      SBC	#56
   1526  15f4		       85 da		      STA	d
   1527  15f6		       a5 90		      LDA	asteroid3Y
   1528  15f8		       e9 00		      SBC	#0
   1529  15fa		       85 90		      STA	asteroid3Y
   1530  15fc				   .L0150		;  asteroid4Y	=  asteroid4Y  -  0.16
   1531  15fc
   1532  15fc		       a5 db		      LDA	e
   1533  15fe		       38		      SEC
   1534  15ff		       e9 28		      SBC	#40
   1535  1601		       85 db		      STA	e
   1536  1603		       a5 91		      LDA	asteroid4Y
   1537  1605		       e9 00		      SBC	#0
   1538  1607		       85 91		      STA	asteroid4Y
   1539  1609				   .
   1540  1609							; 
   1541  1609
   1542  1609				   .L0151		;  goto resetScreen
   1543  1609
   1544  1609		       4c 89 d6 	      jmp	.resetScreen
   1545  160c
   1546  160c				   .
   1547  160c							; 
   1548  160c
   1549  160c				   .fast
   1550  160c							; fast
   1551  160c
   1552  160c				   .L0152		;  asteroidY  =  asteroidY  -	0.15
   1553  160c
   1554  160c		       a5 d8		      LDA	b
   1555  160e		       38		      SEC
   1556  160f		       e9 26		      SBC	#38
   1557  1611		       85 d8		      STA	b
   1558  1613		       a5 8e		      LDA	asteroidY
   1559  1615		       e9 00		      SBC	#0
   1560  1617		       85 8e		      STA	asteroidY
   1561  1619				   .L0153		;  asteroid2Y	=  asteroid2Y  -  0.17
   1562  1619
   1563  1619		       a5 d9		      LDA	c
   1564  161b		       38		      SEC
   1565  161c		       e9 2b		      SBC	#43
   1566  161e		       85 d9		      STA	c
   1567  1620		       a5 8f		      LDA	asteroid2Y
   1568  1622		       e9 00		      SBC	#0
   1569  1624		       85 8f		      STA	asteroid2Y
   1570  1626				   .L0154		;  asteroid3Y	=  asteroid3Y  -  0.19
   1571  1626
   1572  1626		       a5 da		      LDA	d
   1573  1628		       38		      SEC
   1574  1629		       e9 30		      SBC	#48
   1575  162b		       85 da		      STA	d
   1576  162d		       a5 90		      LDA	asteroid3Y
   1577  162f		       e9 00		      SBC	#0
   1578  1631		       85 90		      STA	asteroid3Y
   1579  1633				   .L0155		;  asteroid4Y	=  asteroid4Y  -  0.13
   1580  1633
   1581  1633		       a5 db		      LDA	e
   1582  1635		       38		      SEC
   1583  1636		       e9 21		      SBC	#33
   1584  1638		       85 db		      STA	e
   1585  163a		       a5 91		      LDA	asteroid4Y
   1586  163c		       e9 00		      SBC	#0
   1587  163e		       85 91		      STA	asteroid4Y
   1588  1640				   .L0156		;  goto resetScreen
   1589  1640
   1590  1640		       4c 89 d6 	      jmp	.resetScreen
   1591  1643
   1592  1643				   .
   1593  1643							; 
   1594  1643
   1595  1643				   .
   1596  1643							; 
   1597  1643
   1598  1643				   .slow
   1599  1643							; slow
   1600  1643
   1601  1643				   .L0157		;  asteroidY  =  asteroidY  -	0.13
   1602  1643
   1603  1643		       a5 d8		      LDA	b
   1604  1645		       38		      SEC
   1605  1646		       e9 21		      SBC	#33
   1606  1648		       85 d8		      STA	b
   1607  164a		       a5 8e		      LDA	asteroidY
   1608  164c		       e9 00		      SBC	#0
   1609  164e		       85 8e		      STA	asteroidY
   1610  1650				   .L0158		;  if _sc3  >	$03 then asteroid2Y  =	asteroid2Y  -  0.15
   1611  1650
   1612  1650		       a9 03		      LDA	#$03
   1613  1652		       c5 d4		      CMP	_sc3
   1614  1654		       b0 0d		      BCS	.skipL0158
   1615  1656				   .condpart87
   1616  1656		       a5 d9		      LDA	c
   1617  1658		       38		      SEC
   1618  1659		       e9 26		      SBC	#38
   1619  165b		       85 d9		      STA	c
   1620  165d		       a5 8f		      LDA	asteroid2Y
   1621  165f		       e9 00		      SBC	#0
   1622  1661		       85 8f		      STA	asteroid2Y
   1623  1663				   .skipL0158
   1624  1663				   .L0159		;  if _sc3  >	$15 then asteroid3Y  =	asteroid3Y  -  0.17
   1625  1663
   1626  1663		       a9 15		      LDA	#$15
   1627  1665		       c5 d4		      CMP	_sc3
   1628  1667		       b0 0d		      BCS	.skipL0159
   1629  1669				   .condpart88
   1630  1669		       a5 da		      LDA	d
   1631  166b		       38		      SEC
   1632  166c		       e9 2b		      SBC	#43
   1633  166e		       85 da		      STA	d
   1634  1670		       a5 90		      LDA	asteroid3Y
   1635  1672		       e9 00		      SBC	#0
   1636  1674		       85 90		      STA	asteroid3Y
   1637  1676				   .skipL0159
   1638  1676				   .L0160		;  if _sc3  >	$20 then asteroid4Y  =	asteroid4Y  -  0.1
   1639  1676
   1640  1676		       a9 20		      LDA	#$20
   1641  1678		       c5 d4		      CMP	_sc3
   1642  167a		       b0 0d		      BCS	.skipL0160
   1643  167c				   .condpart89
   1644  167c		       a5 db		      LDA	e
   1645  167e		       38		      SEC
   1646  167f		       e9 19		      SBC	#25
   1647  1681		       85 db		      STA	e
   1648  1683		       a5 91		      LDA	asteroid4Y
   1649  1685		       e9 00		      SBC	#0
   1650  1687		       85 91		      STA	asteroid4Y
   1651  1689				   .skipL0160
   1652  1689				   .
   1653  1689							; 
   1654  1689
   1655  1689				   .resetScreen
   1656  1689							; resetScreen
   1657  1689
   1658  1689				   .
   1659  1689							; 
   1660  1689
   1661  1689				   .L0161		;  COLUPF  =  $70
   1662  1689
   1663  1689		       a9 70		      LDA	#$70
   1664  168b		       85 08		      STA	COLUPF
   1665  168d				   .L0162		;  drawscreen
   1666  168d
   1667  168d		       85 d1		      sta	temp7
   1668  168f		       a9 d6		      lda	#>(ret_point2-1)
   1669  1691		       48		      pha
   1670  1692		       a9 a4		      lda	#<(ret_point2-1)
   1671  1694		       48		      pha
   1672  1695		       a9 f0		      lda	#>(drawscreen-1)
   1673  1697		       48		      pha
   1674  1698		       a9 39		      lda	#<(drawscreen-1)
   1675  169a		       48		      pha
   1676  169b		       a5 d1		      lda	temp7
   1677  169d		       48		      pha
   1678  169e		       8a		      txa
   1679  169f		       48		      pha
   1680  16a0		       a2 02		      ldx	#2
   1681  16a2		       4c eb ff 	      jmp	BS_jsr
   1682  16a5				   ret_point2
   1683  16a5				   .
   1684  16a5							; 
   1685  16a5
   1686  16a5				   .L0163		;  goto sprites
   1687  16a5
   1688  16a5		       4c 9c d1 	      jmp	.sprites
   1689  16a8
   1690  16a8				   .
   1691  16a8							; 
   1692  16a8
   1693  16a8				   .setPlayer1Color
   1694  16a8							; setPlayer1Color
   1695  16a8
   1696  16a8				   .L0164		;  if ticker  =  0 then _COLUP1  =  $22
   1697  16a8
   1698  16a8		       a5 e2		      LDA	ticker
   1699  16aa		       c9 00		      CMP	#0
   1700  16ac		       d0 04		      BNE	.skipL0164
   1701  16ae				   .condpart90
   1702  16ae		       a9 22		      LDA	#$22
   1703  16b0		       85 98		      STA	_COLUP1
   1704  16b2				   .skipL0164
   1705  16b2				   .L0165		;  if ticker  =  1 then _COLUP1  =  $38
   1706  16b2
   1707  16b2		       a5 e2		      LDA	ticker
   1708  16b4		       c9 01		      CMP	#1
   1709  16b6		       d0 04		      BNE	.skipL0165
   1710  16b8				   .condpart91
   1711  16b8		       a9 38		      LDA	#$38
   1712  16ba		       85 98		      STA	_COLUP1
   1713  16bc				   .skipL0165
   1714  16bc				   .L0166		;  if ticker  =  2 then _COLUP1  =  $66
   1715  16bc
   1716  16bc		       a5 e2		      LDA	ticker
   1717  16be		       c9 02		      CMP	#2
   1718  16c0		       d0 04		      BNE	.skipL0166
   1719  16c2				   .condpart92
   1720  16c2		       a9 66		      LDA	#$66
   1721  16c4		       85 98		      STA	_COLUP1
   1722  16c6				   .skipL0166
   1723  16c6				   .L0167		;  if ticker  =  3 then _COLUP1  =  $78
   1724  16c6
   1725  16c6		       a5 e2		      LDA	ticker
   1726  16c8		       c9 03		      CMP	#3
   1727  16ca		       d0 04		      BNE	.skipL0167
   1728  16cc				   .condpart93
   1729  16cc		       a9 78		      LDA	#$78
   1730  16ce		       85 98		      STA	_COLUP1
   1731  16d0				   .skipL0167
   1732  16d0				   .L0168		;  if ticker  =  4 then _COLUP1  =  $CA
   1733  16d0
   1734  16d0		       a5 e2		      LDA	ticker
   1735  16d2		       c9 04		      CMP	#4
   1736  16d4		       d0 04		      BNE	.skipL0168
   1737  16d6				   .condpart94
   1738  16d6		       a9 ca		      LDA	#$CA
   1739  16d8		       85 98		      STA	_COLUP1
   1740  16da				   .skipL0168
   1741  16da				   .L0169		;  if ticker  =  5 then _COLUP1  =  $D6
   1742  16da
   1743  16da		       a5 e2		      LDA	ticker
   1744  16dc		       c9 05		      CMP	#5
   1745  16de		       d0 04		      BNE	.skipL0169
   1746  16e0				   .condpart95
   1747  16e0		       a9 d6		      LDA	#$D6
   1748  16e2		       85 98		      STA	_COLUP1
   1749  16e4				   .skipL0169
   1750  16e4				   .L0170		;  if ticker  =  6 then _COLUP1  =  $E8
   1751  16e4
   1752  16e4		       a5 e2		      LDA	ticker
   1753  16e6		       c9 06		      CMP	#6
   1754  16e8		       d0 04		      BNE	.skipL0170
   1755  16ea				   .condpart96
   1756  16ea		       a9 e8		      LDA	#$E8
   1757  16ec		       85 98		      STA	_COLUP1
   1758  16ee				   .skipL0170
   1759  16ee				   .
   1760  16ee							; 
   1761  16ee
   1762  16ee				   .L0171		;  goto colorSetComplete
   1763  16ee
   1764  16ee		       4c f0 d1 	      jmp	.colorSetComplete
   1765  16f1
   1766  16f1				   .
   1767  16f1							; 
   1768  16f1
   1769  16f1				   .setPlayer2Color
   1770  16f1							; setPlayer2Color
   1771  16f1
   1772  16f1				   .L0172		;  if ticker  =  0 then COLUP2  =  $22
   1773  16f1
   1774  16f1		       a5 e2		      LDA	ticker
   1775  16f3		       c9 00		      CMP	#0
   1776  16f5		       d0 04		      BNE	.skipL0172
   1777  16f7				   .condpart97
   1778  16f7		       a9 22		      LDA	#$22
   1779  16f9		       85 99		      STA	COLUP2
   1780  16fb				   .skipL0172
   1781  16fb				   .L0173		;  if ticker  =  1 then COLUP2  =  $38
   1782  16fb
   1783  16fb		       a5 e2		      LDA	ticker
   1784  16fd		       c9 01		      CMP	#1
   1785  16ff		       d0 04		      BNE	.skipL0173
   1786  1701				   .condpart98
   1787  1701		       a9 38		      LDA	#$38
   1788  1703		       85 99		      STA	COLUP2
   1789  1705				   .skipL0173
   1790  1705				   .L0174		;  if ticker  =  2 then COLUP2  =  $66
   1791  1705
   1792  1705		       a5 e2		      LDA	ticker
   1793  1707		       c9 02		      CMP	#2
   1794  1709		       d0 04		      BNE	.skipL0174
   1795  170b				   .condpart99
   1796  170b		       a9 66		      LDA	#$66
   1797  170d		       85 99		      STA	COLUP2
   1798  170f				   .skipL0174
   1799  170f				   .L0175		;  if ticker  =  3 then COLUP2  =  $78
   1800  170f
   1801  170f		       a5 e2		      LDA	ticker
   1802  1711		       c9 03		      CMP	#3
   1803  1713		       d0 04		      BNE	.skipL0175
   1804  1715				   .condpart100
   1805  1715		       a9 78		      LDA	#$78
   1806  1717		       85 99		      STA	COLUP2
   1807  1719				   .skipL0175
   1808  1719				   .L0176		;  if ticker  =  4 then COLUP2  =  $CA
   1809  1719
   1810  1719		       a5 e2		      LDA	ticker
   1811  171b		       c9 04		      CMP	#4
   1812  171d		       d0 04		      BNE	.skipL0176
   1813  171f				   .condpart101
   1814  171f		       a9 ca		      LDA	#$CA
   1815  1721		       85 99		      STA	COLUP2
   1816  1723				   .skipL0176
   1817  1723				   .L0177		;  if ticker  =  5 then COLUP2  =  $D6
   1818  1723
   1819  1723		       a5 e2		      LDA	ticker
   1820  1725		       c9 05		      CMP	#5
   1821  1727		       d0 04		      BNE	.skipL0177
   1822  1729				   .condpart102
   1823  1729		       a9 d6		      LDA	#$D6
   1824  172b		       85 99		      STA	COLUP2
   1825  172d				   .skipL0177
   1826  172d				   .L0178		;  if ticker  =  6 then COLUP2  =  $E8
   1827  172d
   1828  172d		       a5 e2		      LDA	ticker
   1829  172f		       c9 06		      CMP	#6
   1830  1731		       d0 04		      BNE	.skipL0178
   1831  1733				   .condpart103
   1832  1733		       a9 e8		      LDA	#$E8
   1833  1735		       85 99		      STA	COLUP2
   1834  1737				   .skipL0178
   1835  1737				   .L0179		;  if ticker  =  7 then COLUP2  =  $3E
   1836  1737
   1837  1737		       a5 e2		      LDA	ticker
   1838  1739		       c9 07		      CMP	#7
   1839  173b		       d0 04		      BNE	.skipL0179
   1840  173d				   .condpart104
   1841  173d		       a9 3e		      LDA	#$3E
   1842  173f		       85 99		      STA	COLUP2
   1843  1741				   .skipL0179
   1844  1741				   .L0180		;  if ticker  =  8 then COLUP2  =  $DC
   1845  1741
   1846  1741		       a5 e2		      LDA	ticker
   1847  1743		       c9 08		      CMP	#8
   1848  1745		       d0 04		      BNE	.skipL0180
   1849  1747				   .condpart105
   1850  1747		       a9 dc		      LDA	#$DC
   1851  1749		       85 99		      STA	COLUP2
   1852  174b				   .skipL0180
   1853  174b				   .L0181		;  if ticker  =  9 then COLUP2  =  $48
   1854  174b
   1855  174b		       a5 e2		      LDA	ticker
   1856  174d		       c9 09		      CMP	#9
   1857  174f		       d0 04		      BNE	.skipL0181
   1858  1751				   .condpart106
   1859  1751		       a9 48		      LDA	#$48
   1860  1753		       85 99		      STA	COLUP2
   1861  1755				   .skipL0181
   1862  1755				   .L0182		;  if ticker  =  10 then COLUP2  =  $68
   1863  1755
   1864  1755		       a5 e2		      LDA	ticker
   1865  1757		       c9 0a		      CMP	#10
   1866  1759		       d0 04		      BNE	.skipL0182
   1867  175b				   .condpart107
   1868  175b		       a9 68		      LDA	#$68
   1869  175d		       85 99		      STA	COLUP2
   1870  175f				   .skipL0182
   1871  175f				   .
   1872  175f							; 
   1873  175f
   1874  175f				   .L0183		;  if ticker  <  4 then switchSprite  =  0
   1875  175f
   1876  175f		       a5 e2		      LDA	ticker
   1877  1761		       c9 04		      CMP	#4
   1878  1763		       b0 04		      BCS	.skipL0183
   1879  1765				   .condpart108
   1880  1765		       a9 00		      LDA	#0
   1881  1767		       85 e6		      STA	switchSprite
   1882  1769				   .skipL0183
   1883  1769				   .L0184		;  if ticker  >=  4 then switchSprite	=  1
   1884  1769
   1885  1769		       a5 e2		      LDA	ticker
   1886  176b		       c9 04		      CMP	#4
   1887  176d		       90 04		      BCC	.skipL0184
   1888  176f				   .condpart109
   1889  176f		       a9 01		      LDA	#1
   1890  1771		       85 e6		      STA	switchSprite
   1891  1773				   .skipL0184
   1892  1773				   .
   1893  1773							; 
   1894  1773
   1895  1773				   .
   1896  1773							; 
   1897  1773
   1898  1773				   .L0185		;  goto colorSetComplete
   1899  1773
   1900  1773		       4c f0 d1 	      jmp	.colorSetComplete
   1901  1776
   1902  1776				   .
   1903  1776							; 
   1904  1776
   1905  1776				   .setPlayer3Color
   1906  1776							; setPlayer3Color
   1907  1776
   1908  1776				   .L0186		;  if ticker  =  0 then COLUP3  =  $22
   1909  1776
   1910  1776		       a5 e2		      LDA	ticker
   1911  1778		       c9 00		      CMP	#0
   1912  177a		       d0 04		      BNE	.skipL0186
   1913  177c				   .condpart110
   1914  177c		       a9 22		      LDA	#$22
   1915  177e		       85 9a		      STA	COLUP3
   1916  1780				   .skipL0186
   1917  1780				   .L0187		;  if ticker  =  1 then COLUP3  =  $38
   1918  1780
   1919  1780		       a5 e2		      LDA	ticker
   1920  1782		       c9 01		      CMP	#1
   1921  1784		       d0 04		      BNE	.skipL0187
   1922  1786				   .condpart111
   1923  1786		       a9 38		      LDA	#$38
   1924  1788		       85 9a		      STA	COLUP3
   1925  178a				   .skipL0187
   1926  178a				   .L0188		;  if ticker  =  2 then COLUP3  =  $66
   1927  178a
   1928  178a		       a5 e2		      LDA	ticker
   1929  178c		       c9 02		      CMP	#2
   1930  178e		       d0 04		      BNE	.skipL0188
   1931  1790				   .condpart112
   1932  1790		       a9 66		      LDA	#$66
   1933  1792		       85 9a		      STA	COLUP3
   1934  1794				   .skipL0188
   1935  1794				   .L0189		;  if ticker  =  3 then COLUP3  =  $78
   1936  1794
   1937  1794		       a5 e2		      LDA	ticker
   1938  1796		       c9 03		      CMP	#3
   1939  1798		       d0 04		      BNE	.skipL0189
   1940  179a				   .condpart113
   1941  179a		       a9 78		      LDA	#$78
   1942  179c		       85 9a		      STA	COLUP3
   1943  179e				   .skipL0189
   1944  179e				   .L0190		;  if ticker  =  4 then COLUP3  =  $CA
   1945  179e
   1946  179e		       a5 e2		      LDA	ticker
   1947  17a0		       c9 04		      CMP	#4
   1948  17a2		       d0 04		      BNE	.skipL0190
   1949  17a4				   .condpart114
   1950  17a4		       a9 ca		      LDA	#$CA
   1951  17a6		       85 9a		      STA	COLUP3
   1952  17a8				   .skipL0190
   1953  17a8				   .L0191		;  if ticker  =  5 then COLUP3  =  $D6
   1954  17a8
   1955  17a8		       a5 e2		      LDA	ticker
   1956  17aa		       c9 05		      CMP	#5
   1957  17ac		       d0 04		      BNE	.skipL0191
   1958  17ae				   .condpart115
   1959  17ae		       a9 d6		      LDA	#$D6
   1960  17b0		       85 9a		      STA	COLUP3
   1961  17b2				   .skipL0191
   1962  17b2				   .L0192		;  if ticker  =  6 then COLUP3  =  $E8
   1963  17b2
   1964  17b2		       a5 e2		      LDA	ticker
   1965  17b4		       c9 06		      CMP	#6
   1966  17b6		       d0 04		      BNE	.skipL0192
   1967  17b8				   .condpart116
   1968  17b8		       a9 e8		      LDA	#$E8
   1969  17ba		       85 9a		      STA	COLUP3
   1970  17bc				   .skipL0192
   1971  17bc				   .L0193		;  if ticker  =  7 then COLUP3  =  $3E
   1972  17bc
   1973  17bc		       a5 e2		      LDA	ticker
   1974  17be		       c9 07		      CMP	#7
   1975  17c0		       d0 04		      BNE	.skipL0193
   1976  17c2				   .condpart117
   1977  17c2		       a9 3e		      LDA	#$3E
   1978  17c4		       85 9a		      STA	COLUP3
   1979  17c6				   .skipL0193
   1980  17c6				   .L0194		;  if ticker  =  8 then COLUP3  =  $DC
   1981  17c6
   1982  17c6		       a5 e2		      LDA	ticker
   1983  17c8		       c9 08		      CMP	#8
   1984  17ca		       d0 04		      BNE	.skipL0194
   1985  17cc				   .condpart118
   1986  17cc		       a9 dc		      LDA	#$DC
   1987  17ce		       85 9a		      STA	COLUP3
   1988  17d0				   .skipL0194
   1989  17d0				   .L0195		;  if ticker  =  9 then COLUP3  =  $48
   1990  17d0
   1991  17d0		       a5 e2		      LDA	ticker
   1992  17d2		       c9 09		      CMP	#9
   1993  17d4		       d0 04		      BNE	.skipL0195
   1994  17d6				   .condpart119
   1995  17d6		       a9 48		      LDA	#$48
   1996  17d8		       85 9a		      STA	COLUP3
   1997  17da				   .skipL0195
   1998  17da				   .L0196		;  if ticker  =  10 then COLUP3  =  $68
   1999  17da
   2000  17da		       a5 e2		      LDA	ticker
   2001  17dc		       c9 0a		      CMP	#10
   2002  17de		       d0 04		      BNE	.skipL0196
   2003  17e0				   .condpart120
   2004  17e0		       a9 68		      LDA	#$68
   2005  17e2		       85 9a		      STA	COLUP3
   2006  17e4				   .skipL0196
   2007  17e4				   .L0197		;  goto colorSetComplete
   2008  17e4
   2009  17e4		       4c f0 d1 	      jmp	.colorSetComplete
   2010  17e7
   2011  17e7				   .
   2012  17e7							; 
   2013  17e7
   2014  17e7				   .setPlayer4Color
   2015  17e7							; setPlayer4Color
   2016  17e7
   2017  17e7				   .L0198		;  if ticker  =  0 then COLUP4  =  $22
   2018  17e7
   2019  17e7		       a5 e2		      LDA	ticker
   2020  17e9		       c9 00		      CMP	#0
   2021  17eb		       d0 04		      BNE	.skipL0198
   2022  17ed				   .condpart121
   2023  17ed		       a9 22		      LDA	#$22
   2024  17ef		       85 9b		      STA	COLUP4
   2025  17f1				   .skipL0198
   2026  17f1				   .L0199		;  if ticker  =  1 then COLUP4  =  $38
   2027  17f1
   2028  17f1		       a5 e2		      LDA	ticker
   2029  17f3		       c9 01		      CMP	#1
   2030  17f5		       d0 04		      BNE	.skipL0199
   2031  17f7				   .condpart122
   2032  17f7		       a9 38		      LDA	#$38
   2033  17f9		       85 9b		      STA	COLUP4
   2034  17fb				   .skipL0199
   2035  17fb				   .L0200		;  if ticker  =  2 then COLUP4  =  $66
   2036  17fb
   2037  17fb		       a5 e2		      LDA	ticker
   2038  17fd		       c9 02		      CMP	#2
   2039  17ff		       d0 04		      BNE	.skipL0200
   2040  1801				   .condpart123
   2041  1801		       a9 66		      LDA	#$66
   2042  1803		       85 9b		      STA	COLUP4
   2043  1805				   .skipL0200
   2044  1805				   .L0201		;  if ticker  =  3 then COLUP4  =  $78
   2045  1805
   2046  1805		       a5 e2		      LDA	ticker
   2047  1807		       c9 03		      CMP	#3
   2048  1809		       d0 04		      BNE	.skipL0201
   2049  180b				   .condpart124
   2050  180b		       a9 78		      LDA	#$78
   2051  180d		       85 9b		      STA	COLUP4
   2052  180f				   .skipL0201
   2053  180f				   .L0202		;  if ticker  =  4 then COLUP4  =  $CA
   2054  180f
   2055  180f		       a5 e2		      LDA	ticker
   2056  1811		       c9 04		      CMP	#4
   2057  1813		       d0 04		      BNE	.skipL0202
   2058  1815				   .condpart125
   2059  1815		       a9 ca		      LDA	#$CA
   2060  1817		       85 9b		      STA	COLUP4
   2061  1819				   .skipL0202
   2062  1819				   .L0203		;  if ticker  =  5 then COLUP4  =  $D6
   2063  1819
   2064  1819		       a5 e2		      LDA	ticker
   2065  181b		       c9 05		      CMP	#5
   2066  181d		       d0 04		      BNE	.skipL0203
   2067  181f				   .condpart126
   2068  181f		       a9 d6		      LDA	#$D6
   2069  1821		       85 9b		      STA	COLUP4
   2070  1823				   .skipL0203
   2071  1823				   .L0204		;  if ticker  =  6 then COLUP4  =  $E8
   2072  1823
   2073  1823		       a5 e2		      LDA	ticker
   2074  1825		       c9 06		      CMP	#6
   2075  1827		       d0 04		      BNE	.skipL0204
   2076  1829				   .condpart127
   2077  1829		       a9 e8		      LDA	#$E8
   2078  182b		       85 9b		      STA	COLUP4
   2079  182d				   .skipL0204
   2080  182d				   .L0205		;  if ticker  =  7 then COLUP4  =  $3E
   2081  182d
   2082  182d		       a5 e2		      LDA	ticker
   2083  182f		       c9 07		      CMP	#7
   2084  1831		       d0 04		      BNE	.skipL0205
   2085  1833				   .condpart128
   2086  1833		       a9 3e		      LDA	#$3E
   2087  1835		       85 9b		      STA	COLUP4
   2088  1837				   .skipL0205
   2089  1837				   .L0206		;  if ticker  =  8 then COLUP4  =  $DC
   2090  1837
   2091  1837		       a5 e2		      LDA	ticker
   2092  1839		       c9 08		      CMP	#8
   2093  183b		       d0 04		      BNE	.skipL0206
   2094  183d				   .condpart129
   2095  183d		       a9 dc		      LDA	#$DC
   2096  183f		       85 9b		      STA	COLUP4
   2097  1841				   .skipL0206
   2098  1841				   .L0207		;  if ticker  =  9 then COLUP4  =  $48
   2099  1841
   2100  1841		       a5 e2		      LDA	ticker
   2101  1843		       c9 09		      CMP	#9
   2102  1845		       d0 04		      BNE	.skipL0207
   2103  1847				   .condpart130
   2104  1847		       a9 48		      LDA	#$48
   2105  1849		       85 9b		      STA	COLUP4
   2106  184b				   .skipL0207
   2107  184b				   .L0208		;  if ticker  =  10 then COLUP4  =  $68
   2108  184b
   2109  184b		       a5 e2		      LDA	ticker
   2110  184d		       c9 0a		      CMP	#10
   2111  184f		       d0 04		      BNE	.skipL0208
   2112  1851				   .condpart131
   2113  1851		       a9 68		      LDA	#$68
   2114  1853		       85 9b		      STA	COLUP4
   2115  1855				   .skipL0208
   2116  1855				   .
   2117  1855							; 
   2118  1855
   2119  1855				   .L0209		;  goto colorSetComplete
   2120  1855
   2121  1855		       4c f0 d1 	      jmp	.colorSetComplete
   2122  1858
   2123  1858				   .
   2124  1858							; 
   2125  1858
   2126  1858				   .
   2127  1858							; 
   2128  1858
   2129  1858				   .
   2130  1858							; 
   2131  1858
   2132  1858				   .
   2133  1858							; 
   2134  1858
   2135  1858				   .
   2136  1858							; 
   2137  1858
   2138  1858				   .
   2139  1858							; 
   2140  1858
   2141  1858				   .
   2142  1858							; 
   2143  1858
   2144  1858				   .collisions
   2145  1858							; collisions
   2146  1858
   2147  1858				   .
   2148  1858							; 
   2149  1858
   2150  1858				   .L0210		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   2151  1858
   2152  1858		       a9 0c		      LDA	#12
   2153  185a		       85 19		      STA	AUDV0
   2154  185c		       a9 08		      LDA	#8
   2155  185e		       85 15		      STA	AUDC0
   2156  1860		       a9 1c		      LDA	#28
   2157  1862		       85 17		      STA	AUDF0
   2158  1864				   .L0211		;  score  =  score  +	bulletMultiplier
   2159  1864
   2160  1864		       f8		      SED
   2161  1865		       18		      CLC
   2162  1866		       a5 d4		      LDA	score+2
   2163  1868		       65 e0		      ADC	bulletMultiplier
   2164  186a
   2165  186a		       85 d4		      STA	score+2
   2166  186c		       a5 d3		      LDA	score+1
   2167  186e		       69 00		      ADC	#0
   2168  1870		       85 d3		      STA	score+1
   2169  1872		       a5 d2		      LDA	score
   2170  1874		       69 00		      ADC	#0
   2171  1876		       85 d2		      STA	score
   2172  1878		       d8		      CLD
   2173  1879				   .
   2174  1879							; 
   2175  1879
   2176  1879				   .
   2177  1879							; 
   2178  1879
   2179  1879				   .
   2180  1879							; 
   2181  1879
   2182  1879				   .
   2183  1879							; 
   2184  1879
   2185  1879				   .
   2186  1879							; 
   2187  1879
   2188  1879				   .L0212		;  player5x  =  missile0x  +  4
   2189  1879
   2190  1879		       a5 80		      LDA	missile0x
   2191  187b		       18		      CLC
   2192  187c		       69 04		      ADC	#4
   2193  187e		       85 89		      STA	player5x
   2194  1880				   .L0213		;  player5y  =  missile0y  +  2
   2195  1880
   2196  1880		       a5 8a		      LDA	missile0y
   2197  1882		       18		      CLC
   2198  1883		       69 02		      ADC	#2
   2199  1885		       85 92		      STA	player5y
   2200  1887				   .
   2201  1887							; 
   2202  1887
   2203  1887				   .L0214		;  missile0y  =  200
   2204  1887
   2205  1887		       a9 c8		      LDA	#200
   2206  1889		       85 8a		      STA	missile0y
   2207  188b				   .
   2208  188b							; 
   2209  188b
   2210  188b				   .L0215		;  if missile0x  >  27  &&  missile0x	<  37 then player1x  =	76 :  player1y	=  100
   2211  188b
   2212  188b		       a9 1b		      LDA	#27
   2213  188d		       c5 80		      CMP	missile0x
   2214  188f		       b0 0e		      BCS	.skipL0215
   2215  1891				   .condpart132
   2216  1891		       a5 80		      LDA	missile0x
   2217  1893		       c9 25		      CMP	#37
   2218  1895		       b0 08		      BCS	.skip132then
   2219  1897				   .condpart133
   2220  1897		       a9 4c		      LDA	#76
   2221  1899		       85 85		      STA	player1x
   2222  189b		       a9 64		      LDA	#100
   2223  189d		       85 8e		      STA	player1y
   2224  189f				   .skip132then
   2225  189f				   .skipL0215
   2226  189f				   .L0216		;  if missile0x  >  37  &&  missile0x	<  47 then player2x  =	86 :  player2y	=  100
   2227  189f
   2228  189f		       a9 25		      LDA	#37
   2229  18a1		       c5 80		      CMP	missile0x
   2230  18a3		       b0 0e		      BCS	.skipL0216
   2231  18a5				   .condpart134
   2232  18a5		       a5 80		      LDA	missile0x
   2233  18a7		       c9 2f		      CMP	#47
   2234  18a9		       b0 08		      BCS	.skip134then
   2235  18ab				   .condpart135
   2236  18ab		       a9 56		      LDA	#86
   2237  18ad		       85 86		      STA	player2x
   2238  18af		       a9 64		      LDA	#100
   2239  18b1		       85 8f		      STA	player2y
   2240  18b3				   .skip134then
   2241  18b3				   .skipL0216
   2242  18b3				   .L0217		;  if missile0x  >  47  &&  missile0x	<  57 then player3x  =	96 :  player3y	=  100
   2243  18b3
   2244  18b3		       a9 2f		      LDA	#47
   2245  18b5		       c5 80		      CMP	missile0x
   2246  18b7		       b0 0e		      BCS	.skipL0217
   2247  18b9				   .condpart136
   2248  18b9		       a5 80		      LDA	missile0x
   2249  18bb		       c9 39		      CMP	#57
   2250  18bd		       b0 08		      BCS	.skip136then
   2251  18bf				   .condpart137
   2252  18bf		       a9 60		      LDA	#96
   2253  18c1		       85 87		      STA	player3x
   2254  18c3		       a9 64		      LDA	#100
   2255  18c5		       85 90		      STA	player3y
   2256  18c7				   .skip136then
   2257  18c7				   .skipL0217
   2258  18c7				   .L0218		;  if missile0x  >  57  &&  missile0x	<  67 then player4x  =	106 :  player4y  =  100
   2259  18c7
   2260  18c7		       a9 39		      LDA	#57
   2261  18c9		       c5 80		      CMP	missile0x
   2262  18cb		       b0 0e		      BCS	.skipL0218
   2263  18cd				   .condpart138
   2264  18cd		       a5 80		      LDA	missile0x
   2265  18cf		       c9 43		      CMP	#67
   2266  18d1		       b0 08		      BCS	.skip138then
   2267  18d3				   .condpart139
   2268  18d3		       a9 6a		      LDA	#106
   2269  18d5		       85 88		      STA	player4x
   2270  18d7		       a9 64		      LDA	#100
   2271  18d9		       85 91		      STA	player4y
   2272  18db				   .skip138then
   2273  18db				   .skipL0218
   2274  18db				   .
   2275  18db							; 
   2276  18db
   2277  18db				   .L0219		;  if missile0x  >  67  &&  missile0x	<  77 then player1x  =	116 :  player1y  =  100
   2278  18db
   2279  18db		       a9 43		      LDA	#67
   2280  18dd		       c5 80		      CMP	missile0x
   2281  18df		       b0 0e		      BCS	.skipL0219
   2282  18e1				   .condpart140
   2283  18e1		       a5 80		      LDA	missile0x
   2284  18e3		       c9 4d		      CMP	#77
   2285  18e5		       b0 08		      BCS	.skip140then
   2286  18e7				   .condpart141
   2287  18e7		       a9 74		      LDA	#116
   2288  18e9		       85 85		      STA	player1x
   2289  18eb		       a9 64		      LDA	#100
   2290  18ed		       85 8e		      STA	player1y
   2291  18ef				   .skip140then
   2292  18ef				   .skipL0219
   2293  18ef				   .L0220		;  if missile0x  >  77  &&  missile0x	<  87 then player2x  =	126 :  player2y  =  100
   2294  18ef
   2295  18ef		       a9 4d		      LDA	#77
   2296  18f1		       c5 80		      CMP	missile0x
   2297  18f3		       b0 0e		      BCS	.skipL0220
   2298  18f5				   .condpart142
   2299  18f5		       a5 80		      LDA	missile0x
   2300  18f7		       c9 57		      CMP	#87
   2301  18f9		       b0 08		      BCS	.skip142then
   2302  18fb				   .condpart143
   2303  18fb		       a9 7e		      LDA	#126
   2304  18fd		       85 86		      STA	player2x
   2305  18ff		       a9 64		      LDA	#100
   2306  1901		       85 8f		      STA	player2y
   2307  1903				   .skip142then
   2308  1903				   .skipL0220
   2309  1903				   .L0221		;  if missile0x  >  87  &&  missile0x	<  97 then player3x  =	136 :  player3y  =  100
   2310  1903
   2311  1903		       a9 57		      LDA	#87
   2312  1905		       c5 80		      CMP	missile0x
   2313  1907		       b0 0e		      BCS	.skipL0221
   2314  1909				   .condpart144
   2315  1909		       a5 80		      LDA	missile0x
   2316  190b		       c9 61		      CMP	#97
   2317  190d		       b0 08		      BCS	.skip144then
   2318  190f				   .condpart145
   2319  190f		       a9 88		      LDA	#136
   2320  1911		       85 87		      STA	player3x
   2321  1913		       a9 64		      LDA	#100
   2322  1915		       85 90		      STA	player3y
   2323  1917				   .skip144then
   2324  1917				   .skipL0221
   2325  1917				   .L0222		;  if missile0x  >  97  &&  missile0x	<  107 then player4x  =  66 :  player4y  =  100
   2326  1917
   2327  1917		       a9 61		      LDA	#97
   2328  1919		       c5 80		      CMP	missile0x
   2329  191b		       b0 0e		      BCS	.skipL0222
   2330  191d				   .condpart146
   2331  191d		       a5 80		      LDA	missile0x
   2332  191f		       c9 6b		      CMP	#107
   2333  1921		       b0 08		      BCS	.skip146then
   2334  1923				   .condpart147
   2335  1923		       a9 42		      LDA	#66
   2336  1925		       85 88		      STA	player4x
   2337  1927		       a9 64		      LDA	#100
   2338  1929		       85 91		      STA	player4y
   2339  192b				   .skip146then
   2340  192b				   .skipL0222
   2341  192b				   .
   2342  192b							; 
   2343  192b
   2344  192b				   .L0223		;  if missile0x  >  107  &&  missile0x  <  117 then player1x  =  36 :	player1y  =  100
   2345  192b
   2346  192b		       a9 6b		      LDA	#107
   2347  192d		       c5 80		      CMP	missile0x
   2348  192f		       b0 0e		      BCS	.skipL0223
   2349  1931				   .condpart148
   2350  1931		       a5 80		      LDA	missile0x
   2351  1933		       c9 75		      CMP	#117
   2352  1935		       b0 08		      BCS	.skip148then
   2353  1937				   .condpart149
   2354  1937		       a9 24		      LDA	#36
   2355  1939		       85 85		      STA	player1x
   2356  193b		       a9 64		      LDA	#100
   2357  193d		       85 8e		      STA	player1y
   2358  193f				   .skip148then
   2359  193f				   .skipL0223
   2360  193f				   .L0224		;  if missile0x  >  117  &&  missile0x  <  127 then player2x  =  46 :	player2y  =  100
   2361  193f
   2362  193f		       a9 75		      LDA	#117
   2363  1941		       c5 80		      CMP	missile0x
   2364  1943		       b0 0e		      BCS	.skipL0224
   2365  1945				   .condpart150
   2366  1945		       a5 80		      LDA	missile0x
   2367  1947		       c9 7f		      CMP	#127
   2368  1949		       b0 08		      BCS	.skip150then
   2369  194b				   .condpart151
   2370  194b		       a9 2e		      LDA	#46
   2371  194d		       85 86		      STA	player2x
   2372  194f		       a9 64		      LDA	#100
   2373  1951		       85 8f		      STA	player2y
   2374  1953				   .skip150then
   2375  1953				   .skipL0224
   2376  1953				   .L0225		;  if missile0x  >  127  &&  missile0x  <  137 then player3x  =  56 :	player3y  =  100
   2377  1953
   2378  1953		       a9 7f		      LDA	#127
   2379  1955		       c5 80		      CMP	missile0x
   2380  1957		       b0 0e		      BCS	.skipL0225
   2381  1959				   .condpart152
   2382  1959		       a5 80		      LDA	missile0x
   2383  195b		       c9 89		      CMP	#137
   2384  195d		       b0 08		      BCS	.skip152then
   2385  195f				   .condpart153
   2386  195f		       a9 38		      LDA	#56
   2387  1961		       85 87		      STA	player3x
   2388  1963		       a9 64		      LDA	#100
   2389  1965		       85 90		      STA	player3y
   2390  1967				   .skip152then
   2391  1967				   .skipL0225
   2392  1967				   .L0226		;  if missile0x  >  137  &&  missile0x  <  147 then player4x  =  66 :	player4y  =  100
   2393  1967
   2394  1967		       a9 89		      LDA	#137
   2395  1969		       c5 80		      CMP	missile0x
   2396  196b		       b0 0e		      BCS	.skipL0226
   2397  196d				   .condpart154
   2398  196d		       a5 80		      LDA	missile0x
   2399  196f		       c9 93		      CMP	#147
   2400  1971		       b0 08		      BCS	.skip154then
   2401  1973				   .condpart155
   2402  1973		       a9 42		      LDA	#66
   2403  1975		       85 88		      STA	player4x
   2404  1977		       a9 64		      LDA	#100
   2405  1979		       85 91		      STA	player4y
   2406  197b				   .skip154then
   2407  197b				   .skipL0226
   2408  197b				   .
   2409  197b							; 
   2410  197b
   2411  197b				   .L0227		;  goto frameReset
   2412  197b
   2413  197b		       4c b4 d5 	      jmp	.frameReset
   2414  197e
   2415  197e				   .
   2416  197e							; 
   2417  197e
   2418  197e				   .gameOver
   2419  197e							; gameOver
   2420  197e
   2421  197e				   .L0228		;  if _resetTicker  <	1 then _resetTicker  =	1
   2422  197e
   2423  197e		       a5 ee		      LDA	_resetTicker
   2424  1980		       c9 01		      CMP	#1
   2425  1982		       b0 04		      BCS	.skipL0228
   2426  1984				   .condpart156
   2427  1984		       a9 01		      LDA	#1
   2428  1986		       85 ee		      STA	_resetTicker
   2429  1988				   .skipL0228
   2430  1988				   .L0229		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   2431  1988
   2432  1988		       24 ef		      BIT	_Bit6_Sequence_Switch
   2433  198a		       70 10		      BVS	.skipL0229
   2434  198c				   .condpart157
   2435  198c		       e6 d7		      INC	_P0_Luminosity
   2436  198e		       a5 d7		      LDA	_P0_Luminosity
   2437  1990		       c9 20		      CMP	#$20
   2438  1992		       90 08		      BCC	.skip157then
   2439  1994				   .condpart158
   2440  1994		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2441  1996		       09 40		      ORA	#64
   2442  1998		       85 ef		      STA	_Bit6_Sequence_Switch
   2443  199a		       e6 ee		      INC	_resetTicker
   2444  199c				   .skip157then
   2445  199c				   .skipL0229
   2446  199c				   .L0230		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   2447  199c
   2448  199c		       24 ef		      BIT	_Bit6_Sequence_Switch
   2449  199e		       50 16		      BVC	.skipL0230
   2450  19a0				   .condpart159
   2451  19a0		       c6 d7		      DEC	_P0_Luminosity
   2452  19a2		       a9 12		      LDA	#$12
   2453  19a4		       c5 d7		      CMP	_P0_Luminosity
   2454  19a6		       90 0e		      BCC	.skip159then
   2455  19a8				   .condpart160
   2456  19a8		       a9 00		      LDA	#0
   2457  19aa		       85 d8		      STA	b
   2458  19ac		       a9 10		      LDA	#$10
   2459  19ae		       85 d7		      STA	_P0_Luminosity
   2460  19b0		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2461  19b2		       29 bf		      AND	#191
   2462  19b4		       85 ef		      STA	_Bit6_Sequence_Switch
   2463  19b6				   .skip159then
   2464  19b6				   .skipL0230
   2465  19b6				   .L0231		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   2466  19b6
   2467  19b6		       a9 0a		      LDA	#10
   2468  19b8		       85 1a		      STA	AUDV1
   2469  19ba		       a9 08		      LDA	#8
   2470  19bc		       85 16		      STA	AUDC1
   2471  19be		       a9 19		      LDA	#25
   2472  19c0		       85 18		      STA	AUDF1
   2473  19c2				   .L0232		;  COLUBK  =  _P0_Luminosity
   2474  19c2
   2475  19c2		       a5 d7		      LDA	_P0_Luminosity
   2476  19c4		       85 09		      STA	COLUBK
   2477  19c6				   .
   2478  19c6							; 
   2479  19c6
   2480  19c6				   .L0233		;  if _resetTicker  >	3 then goto resetGame
   2481  19c6
   2482  19c6		       a9 03		      LDA	#3
   2483  19c8		       c5 ee		      CMP	_resetTicker
   2484  19ca		       b0 03		      BCS	.skipL0233
   2485  19cc				   .condpart161
   2486  19cc		       4c d2 d9 	      jmp	.resetGame
   2487  19cf
   2488  19cf				   .skipL0233
   2489  19cf				   .
   2490  19cf							; 
   2491  19cf
   2492  19cf				   .L0234		;  goto resetScreen
   2493  19cf
   2494  19cf		       4c 89 d6 	      jmp	.resetScreen
   2495  19d2
   2496  19d2				   .
   2497  19d2							; 
   2498  19d2
   2499  19d2				   .resetGame
   2500  19d2							; resetGame
   2501  19d2
   2502  19d2				   .
   2503  19d2							; 
   2504  19d2
   2505  19d2				   .L0235		;  player0x = 66
   2506  19d2
   2507  19d2		       a9 42		      LDA	#66
   2508  19d4		       85 84		      STA	player0x
   2509  19d6				   .L0236		;  player0y = 57
   2510  19d6
   2511  19d6		       a9 39		      LDA	#57
   2512  19d8		       85 8d		      STA	player0y
   2513  19da				   .
   2514  19da							; 
   2515  19da
   2516  19da				   .L0237		;  player1x = 76
   2517  19da
   2518  19da		       a9 4c		      LDA	#76
   2519  19dc		       85 85		      STA	player1x
   2520  19de				   .L0238		;  player1y = 100
   2521  19de
   2522  19de		       a9 64		      LDA	#100
   2523  19e0		       85 8e		      STA	player1y
   2524  19e2				   .
   2525  19e2							; 
   2526  19e2
   2527  19e2				   .L0239		;  player2x = 86
   2528  19e2
   2529  19e2		       a9 56		      LDA	#86
   2530  19e4		       85 86		      STA	player2x
   2531  19e6				   .L0240		;  player2y = 110
   2532  19e6
   2533  19e6		       a9 6e		      LDA	#110
   2534  19e8		       85 8f		      STA	player2y
   2535  19ea				   .
   2536  19ea							; 
   2537  19ea
   2538  19ea				   .L0241		;  player3x = 96
   2539  19ea
   2540  19ea		       a9 60		      LDA	#96
   2541  19ec		       85 87		      STA	player3x
   2542  19ee				   .L0242		;  player3y = 120
   2543  19ee
   2544  19ee		       a9 78		      LDA	#120
   2545  19f0		       85 90		      STA	player3y
   2546  19f2				   .
   2547  19f2							; 
   2548  19f2
   2549  19f2				   .L0243		;  player4x = 106
   2550  19f2
   2551  19f2		       a9 6a		      LDA	#106
   2552  19f4		       85 88		      STA	player4x
   2553  19f6				   .L0244		;  player4y =	100
   2554  19f6
   2555  19f6		       a9 64		      LDA	#100
   2556  19f8		       85 91		      STA	player4y
   2557  19fa				   .
   2558  19fa							; 
   2559  19fa
   2560  19fa				   .L0245		;  missile0y = 255
   2561  19fa
   2562  19fa		       a9 ff		      LDA	#255
   2563  19fc		       85 8a		      STA	missile0y
   2564  19fe				   .L0246		;  missile0y = 255
   2565  19fe
   2566  19fe		       a9 ff		      LDA	#255
   2567  1a00		       85 8a		      STA	missile0y
   2568  1a02				   .
   2569  1a02							; 
   2570  1a02
   2571  1a02				   .L0247		;  _resetTicker  =  0
   2572  1a02
   2573  1a02		       a9 00		      LDA	#0
   2574  1a04		       85 ee		      STA	_resetTicker
   2575  1a06				   .L0248		;  missile1y =  200
   2576  1a06
   2577  1a06		       a9 c8		      LDA	#200
   2578  1a08		       85 8b		      STA	missile1y
   2579  1a0a				   .L0249		;  COLUBK  =  $0
   2580  1a0a
   2581  1a0a		       a9 00		      LDA	#$0
   2582  1a0c		       85 09		      STA	COLUBK
   2583  1a0e				   .L0250		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   2584  1a0e
   2585  1a0e		       a9 00		      LDA	#0
   2586  1a10		       85 1a		      STA	AUDV1
   2587  1a12		       85 16		      STA	AUDC1
   2588  1a14		       85 18		      STA	AUDF1
   2589  1a16				   .L0251		;  realLives  =  realLives  -	1
   2590  1a16
   2591  1a16		       c6 dd		      DEC	realLives
   2592  1a18				   .L0252		;  if realLives  <  1 then gameReady  =  0 :  firstFrame  =  0 :  realLives  =  3
   2593  1a18
   2594  1a18		       a5 dd		      LDA	realLives
   2595  1a1a		       c9 01		      CMP	#1
   2596  1a1c		       b0 0a		      BCS	.skipL0252
   2597  1a1e				   .condpart162
   2598  1a1e		       a9 00		      LDA	#0
   2599  1a20		       85 f0		      STA	gameReady
   2600  1a22		       85 e8		      STA	firstFrame
   2601  1a24		       a9 03		      LDA	#3
   2602  1a26		       85 dd		      STA	realLives
   2603  1a28				   .skipL0252
   2604  1a28				   .L0253		;  goto resetScreen
   2605  1a28
   2606  1a28		       4c 89 d6 	      jmp	.resetScreen
   2607  1a2b
   2608  1a2b				   .
   2609  1a2b							; 
   2610  1a2b
   2611  1a2b				   .
   2612  1a2b							; 
   2613  1a2b
   2614  1a2b				   .L0254		;  bank 2
   2615  1a2b
   2616  1a2b					      if	ECHO1
      1449 bytes of ROM space left in bank 1
   2617  1a2b					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   2618  1a2b					      endif
   2619  1a2b		       00 01	   ECHO1      =	1
   2620  1fd4					      ORG	$1FF4-bscode_length
   2621  1fd4					      RORG	$DFF4-bscode_length
   2622  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   2623  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2624  1fd6				  -	      stx	FASTFETCH
   2625  1fd6					      endif
   2626  1fd6		       9a		      txs
   2627  1fd7				  -	      if	bankswitch == 64
   2628  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2629  1fd7					      else
   2630  1fd7		       a9 f3		      lda	#>(start-1)
   2631  1fd9					      endif
   2632  1fd9		       48		      pha
   2633  1fda		       a9 f7		      lda	#<(start-1)
   2634  1fdc		       48		      pha
   2635  1fdd		       48		      pha
   2636  1fde		       8a		      txa
   2637  1fdf		       48		      pha
   2638  1fe0		       ba		      tsx
   2639  1fe1					      if	bankswitch != 64
   2640  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   2641  1fe3		       2a		      rol
   2642  1fe4		       2a		      rol
   2643  1fe5		       2a		      rol
   2644  1fe6		       2a		      rol
   2645  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2646  1fe9		       aa		      tax
   2647  1fea		       e8		      inx
   2648  1feb				  -	      else
   2649  1feb				  -	      lda	4,x	; get high byte of return address
   2650  1feb				  -	      tay
   2651  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2652  1feb				  -	      sta	4,x
   2653  1feb				  -	      tya
   2654  1feb				  -	      lsr
   2655  1feb				  -	      lsr
   2656  1feb				  -	      lsr
   2657  1feb				  -	      lsr
   2658  1feb				  -	      tax
   2659  1feb				  -	      inx
   2660  1feb					      endif
   2661  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   2662  1fee		       68		      pla
   2663  1fef		       aa		      tax
   2664  1ff0		       68		      pla
   2665  1ff1		       60		      rts
   2666  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2667  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2668  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2669  1ff2					      endif
   2670  1ffc					      ORG	$1FFC
   2671  1ffc					      RORG	$DFFC
   2672  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   2673  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   2674  2000					      ORG	$2000
   2675  2000					      RORG	$F000
   2676  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2677  2000
   2678  2000				   FineAdjustTableBegin
   2679  2000		       60		      .byte.b	%01100000	;left 6
   2680  2001		       50		      .byte.b	%01010000
   2681  2002		       40		      .byte.b	%01000000
   2682  2003		       30		      .byte.b	%00110000
   2683  2004		       20		      .byte.b	%00100000
   2684  2005		       10		      .byte.b	%00010000
   2685  2006		       00		      .byte.b	%00000000	;left 0
   2686  2007		       f0		      .byte.b	%11110000
   2687  2008		       e0		      .byte.b	%11100000
   2688  2009		       d0		      .byte.b	%11010000
   2689  200a		       c0		      .byte.b	%11000000
   2690  200b		       b0		      .byte.b	%10110000
   2691  200c		       a0		      .byte.b	%10100000
   2692  200d		       90		      .byte.b	%10010000
   2693  200e		       80		      .byte.b	%10000000	;right 8
   2694  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   2695  200f
   2696  200f				   PFStart
   2697  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   2698  2017				   blank_pf
   2699  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   2700  201f							; .byte 43,21,0,10,0,0,0,5
   2701  201f				  -	      ifconst	screenheight
   2702  201f				  -pfsub
   2703  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   2704  201f					      endif
   2705  201f							;--set initial P1 positions
   2706  201f				   multisprite_setup
   2707  201f		       a9 0f		      lda	#15
   2708  2021		       85 c4		      sta	pfheight
   2709  2023
   2710  2023		       a2 04		      ldx	#4
   2711  2025							; stx temp3
   2712  2025				   SetCopyHeight
   2713  2025							;	lda #76
   2714  2025							;	sta NewSpriteX,X
   2715  2025							;	lda CopyColorData,X
   2716  2025							;	sta NewCOLUP1,X
   2717  2025							;lda SpriteHeightTable,X
   2718  2025							; sta spriteheight,x
   2719  2025		       8a		      txa
   2720  2026		       95 9d		      sta	SpriteGfxIndex,X
   2721  2028		       95 f1		      sta	spritesort,X
   2722  202a		       ca		      dex
   2723  202b		       10 f8		      bpl	SetCopyHeight
   2724  202d
   2725  202d
   2726  202d
   2727  202d							; since we can't turn off pf, point PF to zeros here
   2728  202d		       a9 f0		      lda	#>blank_pf
   2729  202f		       85 be		      sta	PF2pointer+1
   2730  2031		       85 bc		      sta	PF1pointer+1
   2731  2033		       a9 17		      lda	#<blank_pf
   2732  2035		       85 bd		      sta	PF2pointer
   2733  2037		       85 bb		      sta	PF1pointer
   2734  2039		       60		      rts
   2735  203a
   2736  203a				   drawscreen
   2737  203a				  -	      ifconst	debugscore
   2738  203a				  -	      jsr	debugcycles
   2739  203a					      endif
   2740  203a
   2741  203a				   WaitForOverscanEnd
   2742  203a		       ad 84 02 	      lda	INTIM
   2743  203d		       30 fb		      bmi	WaitForOverscanEnd
   2744  203f
   2745  203f		       a9 02		      lda	#2
   2746  2041		       85 02		      sta	WSYNC
   2747  2043		       85 00		      sta	VSYNC
   2748  2045		       85 02		      sta	WSYNC
   2749  2047		       85 02		      sta	WSYNC
   2750  2049		       4a		      lsr
   2751  204a		       85 27		      sta	VDELBL
   2752  204c		       85 25		      sta	VDELP0
   2753  204e		       85 02		      sta	WSYNC
   2754  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   2755  2052				  -	      ifconst	overscan_time
   2756  2052				  -	      lda	#overscan_time+5+128
   2757  2052					      else
   2758  2052		       a9 aa		      lda	#42+128
   2759  2054					      endif
   2760  2054		       8d 96 02 	      sta	TIM64T
   2761  2057
   2762  2057							; run possible vblank bB code
   2763  2057				  -	      ifconst	vblank_bB_code
   2764  2057				  -	      jsr	vblank_bB_code
   2765  2057					      endif
   2766  2057
   2767  2057		       20 df f1 	      jsr	setscorepointers
   2768  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   2769  205d
   2770  205d							;-------------
   2771  205d
   2772  205d
   2773  205d
   2774  205d
   2775  205d
   2776  205d							;--position P0, M0, M1, BL
   2777  205d
   2778  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   2779  2060
   2780  2060							;--set up player 0 pointer
   2781  2060
   2782  2060		       c6 8d		      dec	player0y
   2783  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   2784  2064		       38		      sec
   2785  2065		       e5 8d		      sbc	player0y
   2786  2067		       18		      clc
   2787  2068		       65 b0		      adc	player0height
   2788  206a		       85 a2		      sta	player0pointer
   2789  206c
   2790  206c		       a5 8d		      lda	player0y
   2791  206e		       85 cf		      sta	P0Top
   2792  2070		       38		      sec
   2793  2071		       e5 b0		      sbc	player0height
   2794  2073		       18		      clc
   2795  2074		       69 80		      adc	#$80
   2796  2076		       85 a4		      sta	P0Bottom
   2797  2078
   2798  2078
   2799  2078							;--some final setup
   2800  2078
   2801  2078		       a2 04		      ldx	#4
   2802  207a		       a9 80		      lda	#$80
   2803  207c				   cycle74_HMCLR
   2804  207c		       95 20		      sta	HMP0,X
   2805  207e		       ca		      dex
   2806  207f		       10 fb		      bpl	cycle74_HMCLR
   2807  2081							;	sta HMCLR
   2808  2081
   2809  2081
   2810  2081		       a9 00		      lda	#0
   2811  2083		       85 0e		      sta	PF1
   2812  2085		       85 0f		      sta	PF2
   2813  2087		       85 1b		      sta	GRP0
   2814  2089		       85 1c		      sta	GRP1
   2815  208b
   2816  208b
   2817  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   2818  208e
   2819  208e				   WaitForVblankEnd
   2820  208e		       ad 84 02 	      lda	INTIM
   2821  2091		       30 fb		      bmi	WaitForVblankEnd
   2822  2093		       a9 00		      lda	#0
   2823  2095		       85 02		      sta	WSYNC
   2824  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   2825  2099		       85 2c		      sta	CXCLR
   2826  209b
   2827  209b
   2828  209b		       4c 60 f1 	      jmp	KernelRoutine
   2829  209e
   2830  209e
   2831  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   2832  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   2833  209e							;if you do not wish to write to P1 during this function, make
   2834  209e							;sure Y==0 before you call it.  This function will change Y, and A
   2835  209e							;will be the value put into HMxx when returned.
   2836  209e							;Call this function with at least 11 cycles left in the scanline 
   2837  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   2838  209e							;into the second scanline
   2839  209e		       38		      sec
   2840  209f		       85 02		      sta	WSYNC	;begin line 1
   2841  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   2842  20a4				   DivideBy15Loop
   2843  20a4		       e9 0f		      sbc	#15
   2844  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   2845  20a8
   2846  20a8		       a8		      tay		;+2	10/15/...60
   2847  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   2848  20ac
   2849  20ac							;	15
   2850  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   2851  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   2852  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   2853  20b2		       85 2a		      sta	HMOVE	;+3
   2854  20b4		       60		      rts		;+6	 9
   2855  20b5
   2856  20b5							;-------------------------------------------------------------------------
   2857  20b5
   2858  20b5				   PrePositionAllObjects
   2859  20b5
   2860  20b5		       a2 04		      ldx	#4
   2861  20b7		       a5 82		      lda	ballx
   2862  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2863  20bc
   2864  20bc		       ca		      dex
   2865  20bd		       a5 81		      lda	missile1x
   2866  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2867  20c2
   2868  20c2		       ca		      dex
   2869  20c3		       a5 80		      lda	missile0x
   2870  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2871  20c8
   2872  20c8		       ca		      dex
   2873  20c9		       ca		      dex
   2874  20ca		       a5 84		      lda	player0x
   2875  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2876  20cf
   2877  20cf		       60		      rts
   2878  20d0
   2879  20d0
   2880  20d0							;-------------------------------------------------------------------------
   2881  20d0
   2882  20d0
   2883  20d0
   2884  20d0
   2885  20d0
   2886  20d0
   2887  20d0
   2888  20d0
   2889  20d0							;-------------------------------------------------------------------------
   2890  20d0
   2891  20d0
   2892  20d0				   KernelSetupSubroutine
   2893  20d0
   2894  20d0		       a2 04		      ldx	#4
   2895  20d2				   AdjustYValuesUpLoop
   2896  20d2		       b5 8e		      lda	NewSpriteY,X
   2897  20d4		       18		      clc
   2898  20d5		       69 02		      adc	#2
   2899  20d7		       95 8e		      sta	NewSpriteY,X
   2900  20d9		       ca		      dex
   2901  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   2902  20dc
   2903  20dc
   2904  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   2905  20de
   2906  20de		       b5 9d		      lda	SpriteGfxIndex,x
   2907  20e0		       a8		      tay
   2908  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   2909  20e4		       85 ce		      sta	RepoLine
   2910  20e6
   2911  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   2912  20e8		       a8		      tay
   2913  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   2914  20ec		       85 d0		      sta	temp6
   2915  20ee
   2916  20ee		       86 83		      stx	SpriteIndex
   2917  20f0
   2918  20f0
   2919  20f0
   2920  20f0		       a9 ff		      lda	#255
   2921  20f2		       85 a5		      sta	P1Bottom
   2922  20f4
   2923  20f4		       a5 8d		      lda	player0y
   2924  20f6				  -	      ifconst	screenheight
   2925  20f6				  -	      cmp	#screenheight+1
   2926  20f6					      else
   2927  20f6		       c9 59		      cmp	#$59
   2928  20f8					      endif
   2929  20f8		       90 04		      bcc	nottoohigh
   2930  20fa		       a5 a4		      lda	P0Bottom
   2931  20fc		       85 cf		      sta	P0Top
   2932  20fe
   2933  20fe
   2934  20fe
   2935  20fe				   nottoohigh
   2936  20fe		       60		      rts
   2937  20ff
   2938  20ff							;-------------------------------------------------------------------------
   2939  20ff
   2940  20ff
   2941  20ff
   2942  20ff
   2943  20ff
   2944  20ff							;*************************************************************************
   2945  20ff
   2946  20ff							;-------------------------------------------------------------------------
   2947  20ff							;-------------------------Data Below--------------------------------------
   2948  20ff							;-------------------------------------------------------------------------
   2949  20ff
   2950  20ff				   MaskTable
   2951  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   2952  2104
   2953  2104							; shove 6-digit score routine here
   2954  2104
   2955  2104				   sixdigscore
   2956  2104		       a9 00		      lda	#0
   2957  2106							;	sta COLUBK
   2958  2106		       85 0d		      sta	PF0
   2959  2108		       85 0e		      sta	PF1
   2960  210a		       85 0f		      sta	PF2
   2961  210c		       85 1f		      sta	ENABL
   2962  210e		       85 1d		      sta	ENAM0
   2963  2110		       85 1e		      sta	ENAM1
   2964  2112							;end of kernel here
   2965  2112
   2966  2112
   2967  2112							; 6 digit score routine
   2968  2112							; lda #0
   2969  2112							; sta PF1
   2970  2112							; sta PF2
   2971  2112							; tax
   2972  2112
   2973  2112		       85 02		      sta	WSYNC	;,x
   2974  2114
   2975  2114							;		  STA WSYNC ;first one, need one more
   2976  2114		       85 0b		      sta	REFP0
   2977  2116		       85 0c		      sta	REFP1
   2978  2118		       85 1b		      STA	GRP0
   2979  211a		       85 1c		      STA	GRP1
   2980  211c		       85 2b		      sta	HMCLR
   2981  211e
   2982  211e							; restore P0pointer
   2983  211e
   2984  211e		       a5 a2		      lda	player0pointer
   2985  2120		       18		      clc
   2986  2121		       65 8d		      adc	player0y
   2987  2123		       38		      sec
   2988  2124		       e5 b0		      sbc	player0height
   2989  2126		       85 a2		      sta	player0pointer
   2990  2128		       e6 8d		      inc	player0y
   2991  212a
   2992  212a				  -	      ifconst	vblank_time
   2993  212a				  -	      ifconst	screenheight
   2994  212a				  -	      if	screenheight == 84
   2995  212a				  -	      lda	#vblank_time+9+128+10
   2996  212a				  -	      else
   2997  212a				  -	      lda	#vblank_time+9+128+19
   2998  212a				  -	      endif
   2999  212a				  -	      else
   3000  212a				  -	      lda	#vblank_time+9+128
   3001  212a				  -	      endif
   3002  212a					      else
   3003  212a				  -	      ifconst	screenheight
   3004  212a				  -	      if	screenheight == 84
   3005  212a				  -	      lda	#52+128+10
   3006  212a				  -	      else
   3007  212a				  -	      lda	#52+128+19
   3008  212a				  -	      endif
   3009  212a					      else
   3010  212a		       a9 b4		      lda	#52+128
   3011  212c					      endif
   3012  212c					      endif
   3013  212c
   3014  212c		       8d 96 02 	      sta	TIM64T
   3015  212f					      ifconst	minikernel
   3016  212f		       20 b0 fb 	      jsr	minikernel
   3017  2132					      endif
   3018  2132				  -	      ifconst	noscore
   3019  2132				  -	      pla
   3020  2132				  -	      pla
   3021  2132				  -	      jmp	skipscore
   3022  2132					      endif
   3023  2132
   3024  2132							; score pointers contain:
   3025  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   3026  2132							; swap lo2->temp1
   3027  2132							; swap lo4->temp3
   3028  2132							; swap lo6->temp5
   3029  2132
   3030  2132		       a5 ca		      lda	scorepointers+5
   3031  2134		       85 cf		      sta	temp5
   3032  2136		       a5 c6		      lda	scorepointers+1
   3033  2138		       85 cb		      sta	temp1
   3034  213a		       a5 c8		      lda	scorepointers+3
   3035  213c		       85 cd		      sta	temp3
   3036  213e
   3037  213e		       a9 ff		      lda	#>scoretable
   3038  2140		       85 c6		      sta	scorepointers+1
   3039  2142		       85 c8		      sta	scorepointers+3
   3040  2144		       85 ca		      sta	scorepointers+5
   3041  2146		       85 cc		      sta	temp2
   3042  2148		       85 ce		      sta	temp4
   3043  214a		       85 d0		      sta	temp6
   3044  214c
   3045  214c		       60		      rts
   3046  214d
   3047  214d
   3048  214d
   3049  214d							;-------------------------------------------------------------------------
   3050  214d							;----------------------Kernel Routine-------------------------------------
   3051  214d							;-------------------------------------------------------------------------
   3052  214d
   3053  214d
   3054  214d							;-------------------------------------------------------------------------
   3055  214d							; repeat $f147-*
   3056  214d							; brk
   3057  214d							; repend
   3058  214d							;	org $F240
   3059  214d
   3060  214d				   SwitchDrawP0K1		;	72
   3061  214d		       a5 a4		      lda	P0Bottom
   3062  214f		       85 cf		      sta	P0Top	;+6	 2
   3063  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   3064  2154
   3065  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   3067  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   3068  2159
   3069  2159				   SkipDrawP1K1 		;	11
   3070  2159		       a9 00		      lda	#0
   3071  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   3072  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   3073  2160
   3074  2160							;-------------------------------------------------------------------------
   3075  2160
   3076  2160				   KernelRoutine
   3077  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   3079  2166							; jsr wastetime ; waste 12 cycles
   3080  2166				  -	      else
   3081  2166				  -	      sleep	6
   3082  2166					      endif
   3083  2166		       ba		      tsx
   3084  2167		       86 f6		      stx	stack1
   3085  2169		       a2 1f		      ldx	#ENABL
   3086  216b		       9a		      txs		;+9	 9
   3087  216c
   3088  216c		       a2 00		      ldx	#0
   3089  216e		       a5 c4		      lda	pfheight
   3090  2170		       10 01		      bpl	asdhj
   3091  2172		       24		      .byte.b	$24
   3092  2173				   asdhj
   3093  2173		       aa		      tax
   3094  2174
   3095  2174							; ldx pfheight
   3096  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   3097  2177
   3098  2177				  -	      ifconst	screenheight
   3099  2177				  -	      sec
   3100  2177				  -	      if	screenheight == 84
   3101  2177				  -	      sbc	pfsub+1,x
   3102  2177				  -	      else
   3103  2177				  -	      sbc	pfsub,x
   3104  2177				  -	      endif
   3105  2177					      endif
   3106  2177
   3107  2177		       85 ba		      sta	pfpixelheight
   3108  2179
   3109  2179				  -	      ifconst	screenheight
   3110  2179				  -	      ldy	#screenheight
   3111  2179					      else
   3112  2179		       a0 58		      ldy	#88
   3113  217b					      endif
   3114  217b
   3115  217b							;	lda #$02
   3116  217b							;	sta COLUBK		;+5	18
   3117  217b
   3118  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   3120  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   3122  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   3124  2181		       c4 cf		      cpy	P0Top	;+3	69
   3125  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   3126  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   3127  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   3128  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   3129  218b				   BackFromSwitchDrawP0K1
   3130  218b
   3131  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   3132  218d							;		to a value greater than maximum Y value initially
   3133  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   3134  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   3135  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   3136  2194				   BackFromSkipDrawP1
   3137  2194
   3138  2194							;fuck	
   3139  2194		       84 cb		      sty	temp1
   3140  2196		       a4 ba		      ldy	pfpixelheight
   3141  2198		       b3 bb		      lax	(PF1pointer),y
   3142  219a		       86 0e		      stx	PF1	;+7	26
   3143  219c		       b1 bd		      lda	(PF2pointer),y
   3144  219e		       85 0f		      sta	PF2	;+7	33
   3145  21a0							;sleep 6
   3146  21a0		       86 b7		      stx	PF1temp2
   3147  21a2		       85 b9		      sta	PF2temp2
   3148  21a4		       88		      dey
   3149  21a5		       30 35		      bmi	pagewraphandler
   3150  21a7		       b1 bb		      lda	(PF1pointer),y
   3151  21a9				   cyclebalance
   3152  21a9		       85 b6		      sta	PF1temp1
   3153  21ab		       b1 bd		      lda	(PF2pointer),y
   3154  21ad		       85 b8		      sta	PF2temp1
   3155  21af		       a4 cb		      ldy	temp1
   3156  21b1
   3157  21b1		       a2 1f		      ldx	#ENABL
   3158  21b3		       9a		      txs
   3159  21b4		       c4 8c		      cpy	bally
   3160  21b6		       08		      php		;+6	39	VDEL ball
   3161  21b7
   3162  21b7
   3163  21b7		       c4 8b		      cpy	missile1y
   3164  21b9		       08		      php		;+6	71
   3165  21ba
   3166  21ba		       c4 8a		      cpy	missile0y
   3167  21bc		       08		      php		;+6	 1
   3168  21bd
   3169  21bd
   3170  21bd		       88		      dey		;+2	15
   3171  21be
   3172  21be		       c4 ce		      cpy	RepoLine	;+3	18
   3173  21c0		       f0 62		      beq	RepoKernel	;+2	20
   3174  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   3176  21c5
   3177  21c5				   newrepo		; since we have time here, store next repoline
   3178  21c5		       a6 83		      ldx	SpriteIndex
   3179  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   3180  21c9		       aa		      tax
   3181  21ca		       b5 8e		      lda	NewSpriteY,x
   3182  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   3184  21d0
   3185  21d0				   BackFromRepoKernel
   3186  21d0		       98		      tya		;+2	45
   3187  21d1		       25 c4		      and	pfheight	;+2	47
   3188  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   3189  21d5		       c6 ba		      dec	pfpixelheight
   3190  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   3191  21d9							;	bmi donewkernel		;+3	54
   3192  21d9							;	bne KernelLoopb+1		;+3	54
   3193  21d9
   3194  21d9				   donewkernel
   3195  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   3196  21dc
   3197  21dc				   pagewraphandler
   3198  21dc		       4c a9 f1 	      jmp	cyclebalance
   3199  21df
   3200  21df							;-------------------------------------------------------------------------
   3201  21df
   3202  21df							; room here for score?
   3203  21df
   3204  21df				   setscorepointers
   3205  21df		       a7 d4		      lax	score+2
   3206  21e1		       20 fb f1 	      jsr	scorepointerset
   3207  21e4		       84 ca		      sty	scorepointers+5
   3208  21e6		       86 c7		      stx	scorepointers+2
   3209  21e8		       a7 d3		      lax	score+1
   3210  21ea		       20 fb f1 	      jsr	scorepointerset
   3211  21ed		       84 c9		      sty	scorepointers+4
   3212  21ef		       86 c6		      stx	scorepointers+1
   3213  21f1		       a7 d2		      lax	score
   3214  21f3		       20 fb f1 	      jsr	scorepointerset
   3215  21f6		       84 c8		      sty	scorepointers+3
   3216  21f8		       86 c5		      stx	scorepointers
   3217  21fa				   wastetime
   3218  21fa		       60		      rts
   3219  21fb
   3220  21fb				   scorepointerset
   3221  21fb		       29 0f		      and	#$0F
   3222  21fd		       0a		      asl
   3223  21fe		       0a		      asl
   3224  21ff		       0a		      asl
   3225  2200		       69 74		      adc	#<scoretable
   3226  2202		       a8		      tay
   3227  2203		       8a		      txa
   3228  2204		       29 f0		      and	#$F0
   3229  2206		       4a		      lsr
   3230  2207		       69 74		      adc	#<scoretable
   3231  2209		       aa		      tax
   3232  220a		       60		      rts
   3233  220b							;	align 256
   3234  220b
   3235  220b				   SwitchDrawP0KR		;	45
   3236  220b		       a5 a4		      lda	P0Bottom
   3237  220d		       85 cf		      sta	P0Top	;+6	51
   3238  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3239  2212
   3240  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   3242  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3243  2217
   3244  2217							;-----------------------------------------------------------
   3245  2217
   3246  2217				   noUpdateXKR
   3247  2217		       a2 01		      ldx	#1
   3248  2219		       cc cf 00 	      cpy.w	P0Top
   3249  221c		       4c 2e f2 	      JMP	retXKR
   3250  221f
   3251  221f				   skipthis
   3252  221f		       a2 01		      ldx	#1
   3253  2221		       4c 70 f2 	      jmp	goback
   3254  2224
   3255  2224				   RepoKernel		;	22	crosses page boundary
   3256  2224		       98		      tya
   3257  2225		       25 c4		      and	pfheight	;+2	26
   3258  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   3259  2229		       aa		      tax
   3260  222a							;	dex			;+2	30
   3261  222a		       c6 ba		      dec	pfpixelheight
   3262  222c							;	stx Temp		;+3	35
   3263  222c							;	SLEEP 3
   3264  222c
   3265  222c		       c4 cf		      cpy	P0Top	;+3	42
   3266  222e				   retXKR
   3267  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   3268  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   3269  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   3270  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   3271  2236				   BackFromSwitchDrawP0KR
   3272  2236		       38		      sec		;+2	56
   3273  2237
   3274  2237
   3275  2237
   3276  2237		       b5 b8		      lda	PF2temp1,X
   3277  2239		       b4 b6		      ldy	PF1temp1,X
   3278  223b
   3279  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   3280  223d
   3281  223d		       85 0f		      sta	PF2	;+7	63
   3282  223f
   3283  223f		       b5 9d		      lda	SpriteGfxIndex,x
   3284  2241		       84 0e		      sty	PF1	;+7	70	too early?
   3285  2243		       aa		      tax
   3286  2244		       a9 00		      lda	#0
   3287  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   3288  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   3289  224a
   3290  224a				   DivideBy15LoopK		;	 6	(carry set above)
   3291  224a		       e9 0f		      sbc	#15
   3292  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   3293  224e
   3294  224e		       aa		      tax		;+2	12/17/...62
   3295  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   3296  2252
   3297  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   3298  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   3299  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3300  2258							;sta HMOVE			;+3	 3
   3301  2258
   3302  2258		       a2 1f		      ldx	#ENABL
   3303  225a		       9a		      txs		;+4	25
   3304  225b		       a4 ce		      ldy	RepoLine	; restore y
   3305  225d		       c4 8c		      cpy	bally
   3306  225f		       08		      php		;+6	 9	VDEL ball
   3307  2260
   3308  2260		       c4 8b		      cpy	missile1y
   3309  2262		       08		      php		;+6	15
   3310  2263
   3311  2263		       c4 8a		      cpy	missile0y
   3312  2265		       08		      php		;+6	21
   3313  2266
   3314  2266
   3315  2266
   3316  2266
   3317  2266
   3318  2266							;15 cycles
   3319  2266		       98		      tya
   3320  2267		       25 c4		      and	pfheight
   3321  2269							;eor #1
   3322  2269		       29 fe		      and	#$FE
   3323  226b		       d0 b2		      bne	skipthis
   3324  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   3326  2270							;	sleep 2
   3327  2270				   goback
   3328  2270
   3329  2270		       88		      dey
   3330  2271		       c4 cf		      cpy	P0Top	;+3	52
   3331  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   3332  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   3333  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   3334  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   3335  227b				   BackFromSwitchDrawP0KV
   3336  227b
   3337  227b							; sleep 3
   3338  227b
   3339  227b		       b5 b8		      lda	PF2temp1,X
   3340  227d		       85 0f		      sta	PF2	;+7	 5
   3341  227f		       b5 b6		      lda	PF1temp1,X
   3342  2281		       85 0e		      sta	PF1	;+7	74 
   3343  2283		       85 2a		      sta	HMOVE
   3344  2285
   3345  2285		       a9 00		      lda	#0
   3346  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   3347  2289
   3348  2289		       a2 1f		      ldx	#ENABL
   3349  228b		       9a		      txs		;+4	 8
   3350  228c
   3351  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   3352  228e							;--now, set all new variables and return to main kernel loop
   3353  228e
   3354  228e
   3355  228e							;
   3356  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   3357  2290		       aa		      tax		;+2	33
   3358  2291							;
   3359  2291
   3360  2291
   3361  2291
   3362  2291		       b5 93		      lda	NewNUSIZ,X
   3363  2293		       85 05		      sta	NUSIZ1	;+7	20
   3364  2295		       85 0c		      sta	REFP1
   3365  2297		       b5 98		      lda	NewCOLUP1,X
   3366  2299		       85 07		      sta	COLUP1	;+7	27
   3367  229b
   3368  229b							;	lda SpriteGfxIndex,X	;+4	31
   3369  229b							;	tax				;+2	33
   3370  229b							;fuck2
   3371  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   3372  229d		       38		      sec		;+2	38
   3373  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   3374  22a0		       85 a5		      sta	P1Bottom	;+3	45
   3375  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   3377  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   3378  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   3379  22a9		       85 cc		      sta	P1display	;+3	55
   3380  22ab		       b5 ab		      lda	player1pointerhi,X
   3381  22ad		       85 cd		      sta	P1display+1	;+7	62
   3382  22af
   3383  22af
   3384  22af		       c4 8c		      cpy	bally
   3385  22b1		       08		      php		;+6	68	VDELed
   3386  22b2
   3387  22b2		       c4 8b		      cpy	missile1y
   3388  22b4		       08		      php		;+6	74
   3389  22b5
   3390  22b5		       c4 8a		      cpy	missile0y
   3391  22b7		       08		      php		;+6	 4
   3392  22b8
   3393  22b8
   3394  22b8
   3395  22b8							; lda SpriteGfxIndex-1,x
   3396  22b8							; sleep 3
   3397  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   3398  22ba							; tax
   3399  22ba							; lda NewSpriteY,x
   3400  22ba							; sta RepoLine
   3401  22ba
   3402  22ba							; 10 cycles below...
   3403  22ba		       10 05		      bpl	SetNextLine
   3404  22bc		       a9 ff		      lda	#255
   3405  22be		       4c c4 f2 	      jmp	SetLastLine
   3406  22c1				   SetNextLine
   3407  22c1							;	lda NewSpriteY-1,x
   3408  22c1		       ad d0 00 	      lda.w	temp6
   3409  22c4				   SetLastLine
   3410  22c4		       85 ce		      sta	RepoLine
   3411  22c6
   3412  22c6		       98		      tya
   3413  22c7		       25 c4		      and	pfheight
   3414  22c9		       d0 06		      bne	nodec
   3415  22cb		       c6 ba		      dec	pfpixelheight
   3416  22cd		       88		      dey		;+2	30
   3417  22ce
   3418  22ce							; 10 cycles 
   3419  22ce
   3420  22ce
   3421  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   3422  22d1
   3423  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   3425  22d3		       88		      dey
   3426  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   3427  22d7
   3428  22d7							;-------------------------------------------------------------------------
   3429  22d7
   3430  22d7
   3431  22d7				   SwitchDrawP0KV		;	69
   3432  22d7		       a5 a4		      lda	P0Bottom
   3433  22d9		       85 cf		      sta	P0Top	;+6	75
   3434  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3435  22de
   3436  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   3438  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3439  22e3
   3440  22e3							;-------------------------------------------------------------------------
   3441  22e3
   3442  22e3				   DoneWithKernel
   3443  22e3
   3444  22e3				   BottomOfKernelLoop
   3445  22e3
   3446  22e3		       85 02		      sta	WSYNC
   3447  22e5		       a6 f6		      ldx	stack1
   3448  22e7		       9a		      txs
   3449  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   3450  22eb
   3451  22eb
   3452  22eb		       85 02		      sta	WSYNC
   3453  22ed		       a2 00		      ldx	#0
   3454  22ef		       85 2b		      sta	HMCLR
   3455  22f1		       86 1b		      STx	GRP0
   3456  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   3457  22f5
   3458  22f5		       a0 07		      LDY	#7
   3459  22f7		       84 25		      STy	VDELP0
   3460  22f9		       84 26		      STy	VDELP1
   3461  22fb		       a9 10		      LDA	#$10
   3462  22fd		       85 21		      STA	HMP1
   3463  22ff		       a5 d5		      LDA	scorecolor
   3464  2301		       85 06		      STA	COLUP0
   3465  2303		       85 07		      STA	COLUP1
   3466  2305
   3467  2305		       a9 03		      LDA	#$03
   3468  2307		       85 04		      STA	NUSIZ0
   3469  2309		       85 05		      STA	NUSIZ1
   3470  230b
   3471  230b		       85 10		      STA	RESP0
   3472  230d		       85 11		      STA	RESP1
   3473  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   3475  2314		       b1 c5		      lda	(scorepointers),y
   3476  2316		       85 1b		      sta	GRP0
   3477  2318				  -	      ifconst	pfscore
   3478  2318				  -	      lda	pfscorecolor
   3479  2318				  -	      sta	COLUPF
   3480  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   3482  231b					      endif
   3483  231b
   3484  231b		       85 2a		      STA	HMOVE
   3485  231d		       b1 cd		      lda	(scorepointers+8),y
   3486  231f							; sta WSYNC
   3487  231f							;sleep 2
   3488  231f		       4c 2c f3 	      jmp	beginscore
   3489  2322
   3490  2322
   3491  2322				   loop2
   3492  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   3493  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   3494  2326				  -	      ifconst	pfscore
   3495  2326				  -	      lda.w	pfscore1
   3496  2326				  -	      sta	PF1
   3497  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   3499  232a					      endif
   3500  232a							; cycle 0
   3501  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   3502  232c				   beginscore
   3503  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   3504  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   3505  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   3506  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   3507  2334		       9a		      txs
   3508  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   3510  2339				  -	      ifconst	pfscore
   3511  2339				  -	      lda	pfscore2
   3512  2339				  -	      sta	PF1
   3513  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   3515  233c					      endif
   3516  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   3517  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   3518  2340		       ba		      tsx
   3519  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   3520  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   3521  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   3522  2347		       88		      dey
   3523  2348		       10 d8		      bpl	loop2	;+2  60  180
   3524  234a		       a6 f6		      ldx	stack1
   3525  234c		       9a		      txs
   3526  234d
   3527  234d
   3528  234d							; lda scorepointers+1
   3529  234d		       a4 cb		      ldy	temp1
   3530  234f							; sta temp1
   3531  234f		       84 c6		      sty	scorepointers+1
   3532  2351
   3533  2351		       a9 00		      LDA	#0
   3534  2353		       85 1b		      STA	GRP0
   3535  2355		       85 1c		      STA	GRP1
   3536  2357		       85 0e		      sta	PF1
   3537  2359		       85 25		      STA	VDELP0
   3538  235b		       85 26		      STA	VDELP1	;do we need these
   3539  235d		       85 04		      STA	NUSIZ0
   3540  235f		       85 05		      STA	NUSIZ1
   3541  2361
   3542  2361							; lda scorepointers+3
   3543  2361		       a4 cd		      ldy	temp3
   3544  2363							; sta temp3
   3545  2363		       84 c8		      sty	scorepointers+3
   3546  2365
   3547  2365							; lda scorepointers+5
   3548  2365		       a4 cf		      ldy	temp5
   3549  2367							; sta temp5
   3550  2367		       84 ca		      sty	scorepointers+5
   3551  2369
   3552  2369
   3553  2369							;-------------------------------------------------------------------------
   3554  2369							;------------------------Overscan Routine---------------------------------
   3555  2369							;-------------------------------------------------------------------------
   3556  2369
   3557  2369				   OverscanRoutine
   3558  2369
   3559  2369
   3560  2369
   3561  2369				   skipscore
   3562  2369				  -	      ifconst	qtcontroller
   3563  2369				  -	      lda	qtcontroller
   3564  2369				  -	      lsr		; bit 0 in carry
   3565  2369				  -	      lda	#4
   3566  2369				  -	      ror		; carry into top of A
   3567  2369					      else
   3568  2369		       a9 02		      lda	#2
   3569  236b					      endif		; qtcontroller
   3570  236b		       85 02		      sta	WSYNC
   3571  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   3572  236f
   3573  236f
   3574  236f
   3575  236f
   3576  236f
   3577  236f							;-------------------------------------------------------------------------
   3578  236f							;----------------------------End Main Routines----------------------------
   3579  236f							;-------------------------------------------------------------------------
   3580  236f
   3581  236f
   3582  236f							;*************************************************************************
   3583  236f
   3584  236f							;-------------------------------------------------------------------------
   3585  236f							;----------------------Begin Subroutines----------------------------------
   3586  236f							;-------------------------------------------------------------------------
   3587  236f
   3588  236f
   3589  236f
   3590  236f
   3591  236f				   KernelCleanupSubroutine
   3592  236f
   3593  236f		       a2 04		      ldx	#4
   3594  2371				   AdjustYValuesDownLoop
   3595  2371		       b5 8e		      lda	NewSpriteY,X
   3596  2373		       38		      sec
   3597  2374		       e9 02		      sbc	#2
   3598  2376		       95 8e		      sta	NewSpriteY,X
   3599  2378		       ca		      dex
   3600  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   3601  237b
   3602  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   3604  237e							;rts
   3605  237e
   3606  237e				   SetupP1Subroutine
   3607  237e							; flickersort algorithm
   3608  237e							; count 4-0
   3609  237e							; table2=table1 (?)
   3610  237e							; detect overlap of sprites in table 2
   3611  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   3612  237e							; if no overlap, do regular sort in table 2 and table 1
   3613  237e				   fsstart
   3614  237e		       a2 ff		      ldx	#255
   3615  2380				   copytable
   3616  2380		       e8		      inx
   3617  2381		       b5 f1		      lda	spritesort,x
   3618  2383		       95 9d		      sta	SpriteGfxIndex,x
   3619  2385		       e0 04		      cpx	#4
   3620  2387		       d0 f7		      bne	copytable
   3621  2389
   3622  2389		       86 cd		      stx	temp3	; highest displayed sprite
   3623  238b		       ca		      dex
   3624  238c		       86 cc		      stx	temp2
   3625  238e				   sortloop
   3626  238e		       a6 cc		      ldx	temp2
   3627  2390		       b5 f1		      lda	spritesort,x
   3628  2392		       aa		      tax
   3629  2393		       b5 8e		      lda	NewSpriteY,x
   3630  2395		       85 cb		      sta	temp1
   3631  2397
   3632  2397		       a6 cc		      ldx	temp2
   3633  2399		       b5 f2		      lda	spritesort+1,x
   3634  239b		       aa		      tax
   3635  239c		       b5 8e		      lda	NewSpriteY,x
   3636  239e		       38		      sec
   3637  239f		       18		      clc
   3638  23a0		       e5 cb		      sbc	temp1
   3639  23a2		       90 0e		      bcc	largerXislower
   3640  23a4
   3641  23a4							; larger x is higher (A>=temp1)
   3642  23a4		       d5 b1		      cmp	spriteheight,x
   3643  23a6		       b0 2f		      bcs	countdown
   3644  23a8							; overlap with x+1>x
   3645  23a8							; 
   3646  23a8							; stick x at end of gfxtable, dec counter
   3647  23a8				   overlapping
   3648  23a8		       c6 cd		      dec	temp3
   3649  23aa		       a6 cc		      ldx	temp2
   3650  23ac							; inx
   3651  23ac		       20 eb f3 	      jsr	shiftnumbers
   3652  23af		       4c cd f3 	      jmp	skipswapGfxtable
   3653  23b2
   3654  23b2				   largerXislower		; (temp1>A)
   3655  23b2		       a8		      tay
   3656  23b3		       a6 cc		      ldx	temp2
   3657  23b5		       b5 f1		      lda	spritesort,x
   3658  23b7		       aa		      tax
   3659  23b8		       98		      tya
   3660  23b9		       49 ff		      eor	#$FF
   3661  23bb		       e9 01		      sbc	#1
   3662  23bd		       90 e9		      bcc	overlapping
   3663  23bf		       d5 b1		      cmp	spriteheight,x
   3664  23c1		       b0 0a		      bcs	notoverlapping
   3665  23c3
   3666  23c3		       c6 cd		      dec	temp3
   3667  23c5		       a6 cc		      ldx	temp2
   3668  23c7							; inx
   3669  23c7		       20 eb f3 	      jsr	shiftnumbers
   3670  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   3671  23cd				   notoverlapping
   3672  23cd							; ldx temp2 ; swap display table
   3673  23cd							; ldy SpriteGfxIndex+1,x
   3674  23cd							; lda SpriteGfxIndex,x
   3675  23cd							; sty SpriteGfxIndex,x
   3676  23cd							; sta SpriteGfxIndex+1,x 
   3677  23cd
   3678  23cd				   skipswapGfxtable
   3679  23cd		       a6 cc		      ldx	temp2	; swap sort table
   3680  23cf		       b4 f2		      ldy	spritesort+1,x
   3681  23d1		       b5 f1		      lda	spritesort,x
   3682  23d3		       94 f1		      sty	spritesort,x
   3683  23d5		       95 f2		      sta	spritesort+1,x
   3684  23d7
   3685  23d7				   countdown
   3686  23d7		       c6 cc		      dec	temp2
   3687  23d9		       10 b3		      bpl	sortloop
   3688  23db
   3689  23db				   checktoohigh
   3690  23db		       a6 cd		      ldx	temp3
   3691  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   3692  23df		       aa		      tax
   3693  23e0		       b5 8e		      lda	NewSpriteY,x
   3694  23e2				  -	      ifconst	screenheight
   3695  23e2				  -	      cmp	#screenheight-3
   3696  23e2					      else
   3697  23e2		       c9 55		      cmp	#$55
   3698  23e4					      endif
   3699  23e4		       90 04		      bcc	nonetoohigh
   3700  23e6		       c6 cd		      dec	temp3
   3701  23e8		       d0 f1		      bne	checktoohigh
   3702  23ea
   3703  23ea				   nonetoohigh
   3704  23ea		       60		      rts
   3705  23eb
   3706  23eb
   3707  23eb				   shiftnumbers
   3708  23eb							; stick current x at end, shift others down
   3709  23eb							; if x=4: don't do anything
   3710  23eb							; if x=3: swap 3 and 4
   3711  23eb							; if x=2: 2=3, 3=4, 4=2
   3712  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   3713  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   3714  23eb							; ldy SpriteGfxIndex,x
   3715  23eb				   swaploop
   3716  23eb		       e0 04		      cpx	#4
   3717  23ed		       f0 08		      beq	shiftdone
   3718  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   3719  23f1		       95 9d		      sta	SpriteGfxIndex,x
   3720  23f3		       e8		      inx
   3721  23f4		       4c eb f3 	      jmp	swaploop
   3722  23f7				   shiftdone
   3723  23f7							; sty SpriteGfxIndex,x
   3724  23f7		       60		      rts
   3725  23f8
   3726  23f8				  -	      ifconst	debugscore
   3727  23f8				  -debugcycles
   3728  23f8				  -	      ldx	#14
   3729  23f8				  -	      lda	INTIM	; display # cycles left in the score
   3730  23f8				  -
   3731  23f8				  -	      ifconst	mincycles
   3732  23f8				  -	      lda	mincycles
   3733  23f8				  -	      cmp	INTIM
   3734  23f8				  -	      lda	mincycles
   3735  23f8				  -	      bcc	nochange
   3736  23f8				  -	      lda	INTIM
   3737  23f8				  -	      sta	mincycles
   3738  23f8				  -nochange
   3739  23f8				  -	      endif
   3740  23f8				  -
   3741  23f8				  -			;   cmp #$2B
   3742  23f8				  -			;   bcs no_cycles_left
   3743  23f8				  -	      bmi	cycles_left
   3744  23f8				  -	      ldx	#64
   3745  23f8				  -	      eor	#$ff	;make negative
   3746  23f8				  -cycles_left
   3747  23f8				  -	      stx	scorecolor
   3748  23f8				  -	      and	#$7f	; clear sign bit
   3749  23f8				  -	      tax
   3750  23f8				  -	      lda	scorebcd,x
   3751  23f8				  -	      sta	score+2
   3752  23f8				  -	      lda	scorebcd1,x
   3753  23f8				  -	      sta	score+1
   3754  23f8				  -	      rts
   3755  23f8				  -scorebcd
   3756  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   3757  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   3758  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   3759  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   3760  23f8				  -scorebcd1
   3761  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   3762  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   3763  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   3764  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   3765  23f8					      endif
   3766  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3767  23f8
   3768  23f8				   start
   3769  23f8		       78		      sei
   3770  23f9		       d8		      cld
   3771  23fa		       a0 00		      ldy	#0
   3772  23fc		       a5 d0		      lda	$D0
   3773  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   3774  2400		       d0 07		      bne	MachineIs2600
   3775  2402		       a5 d1		      lda	$D1
   3776  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   3777  2406		       d0 01		      bne	MachineIs2600
   3778  2408		       88		      dey
   3779  2409				   MachineIs2600
   3780  2409		       a2 00		      ldx	#0
   3781  240b		       8a		      txa
   3782  240c				   clearmem
   3783  240c		       e8		      inx
   3784  240d		       9a		      txs
   3785  240e		       48		      pha
   3786  240f		       d0 fb		      bne	clearmem
   3787  2411		       84 cb		      sty	temp1
   3788  2413				  -	      ifnconst	multisprite
   3789  2413				  -	      ifconst	pfrowheight
   3790  2413				  -	      lda	#pfrowheight
   3791  2413				  -	      else
   3792  2413				  -	      ifconst	pfres
   3793  2413				  -	      lda	#(96/pfres)
   3794  2413				  -	      else
   3795  2413				  -	      lda	#8
   3796  2413				  -	      endif
   3797  2413				  -	      endif
   3798  2413				  -	      sta	playfieldpos
   3799  2413					      endif
   3800  2413		       a2 05		      ldx	#5
   3801  2415				   initscore
   3802  2415		       a9 74		      lda	#<scoretable
   3803  2417		       95 c5		      sta	scorepointers,x
   3804  2419		       ca		      dex
   3805  241a		       10 f9		      bpl	initscore
   3806  241c		       a9 01		      lda	#1
   3807  241e		       85 0a		      sta	CTRLPF
   3808  2420		       0d 84 02 	      ora	INTIM
   3809  2423		       85 d6		      sta	rand
   3810  2425
   3811  2425					      ifconst	multisprite
   3812  2425		       20 1f f0 	      jsr	multisprite_setup
   3813  2428					      endif
   3814  2428
   3815  2428				  -	      ifnconst	bankswitch
   3816  2428				  -	      jmp	game
   3817  2428					      else
   3818  2428		       a9 d0		      lda	#>(game-1)
   3819  242a		       48		      pha
   3820  242b		       a9 ff		      lda	#<(game-1)
   3821  242d		       48		      pha
   3822  242e		       48		      pha
   3823  242f		       48		      pha
   3824  2430		       a2 01		      ldx	#1
   3825  2432		       4c eb ff 	      jmp	BS_jsr
   3826  2435					      endif
   3827  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3828  2435
   3829  2435							;standard routines needed for pretty much all games
   3830  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   3831  2435							; repositioning code and score pointer setup moved to overscan
   3832  2435							; read switches, joysticks now compiler generated (more efficient)
   3833  2435
   3834  2435				   randomize
   3835  2435		       a5 d6		      lda	rand
   3836  2437		       4a		      lsr
   3837  2438				  -	      ifconst	rand16
   3838  2438				  -	      rol	rand16
   3839  2438					      endif
   3840  2438		       90 02		      bcc	noeor
   3841  243a		       49 b4		      eor	#$B4
   3842  243c				   noeor
   3843  243c		       85 d6		      sta	rand
   3844  243e				  -	      ifconst	rand16
   3845  243e				  -	      eor	rand16
   3846  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   3848  2441							;bB.asm
   3849  2441							; bB.asm file is split here
   3850  2441				   .L0255		;  asm
   3851  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_48x1_1
     10  2441					      draw_48x1_2
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_48x1_1
      1  2482		       00 01	   mk_48x1_on =	1
      2  2482		       00 01	   mk_48x1_1_on =	1
      3  2482		       20 9e f5 	      jsr	draw_bmp_48x1_1
      0  2485					      draw_48x1_2
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x1_2_on =	1
      3  2485		       20 f8 f5 	      jsr	draw_bmp_48x1_2
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 52 f6 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 18 f7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x1_1
      3  259e
      4  259e		       a9 00		      lda	#0
      5  25a0		       85 1b		      sta	GRP0
      6  25a2		       85 1c		      sta	GRP1
      7  25a4
      8  25a4		       a0 2f		      ldy	#(bmp_48x1_1_window-1)
      9  25a6
     10  25a6							;setup score pointers to point at my bitmap slices instead
     11  25a6		       a9 2c		      lda	#<bmp_48x1_1_00
     12  25a8		       18		      clc
     13  25a9		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  25ab				  -	      ifconst	bmp_48x1_1_index
     15  25ab				  -	      sec
     16  25ab				  -	      sbc	bmp_48x1_1_index
     17  25ab					      endif
     18  25ab		       85 c5		      sta	scorepointers+0
     19  25ad		       a9 f7		      lda	#>bmp_48x1_1_00
     20  25af		       85 c6		      sta	scorepointers+1
     21  25b1
     22  25b1
     23  25b1		       a9 5c		      lda	#<bmp_48x1_1_01
     24  25b3		       18		      clc
     25  25b4		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  25b6				  -	      ifconst	bmp_48x1_1_index
     27  25b6				  -	      sec
     28  25b6				  -	      sbc	bmp_48x1_1_index
     29  25b6					      endif
     30  25b6		       85 c7		      sta	scorepointers+2
     31  25b8		       a9 f7		      lda	#>bmp_48x1_1_01
     32  25ba		       85 c8		      sta	scorepointers+3
     33  25bc
     34  25bc
     35  25bc		       a9 8c		      lda	#<bmp_48x1_1_02
     36  25be		       18		      clc
     37  25bf		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  25c1				  -	      ifconst	bmp_48x1_1_index
     39  25c1				  -	      sec
     40  25c1				  -	      sbc	bmp_48x1_1_index
     41  25c1					      endif
     42  25c1		       85 c9		      sta	scorepointers+4
     43  25c3		       a9 f7		      lda	#>bmp_48x1_1_02
     44  25c5		       85 ca		      sta	scorepointers+5
     45  25c7
     46  25c7
     47  25c7		       a9 bc		      lda	#<bmp_48x1_1_03
     48  25c9		       18		      clc
     49  25ca		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  25cc				  -	      ifconst	bmp_48x1_1_index
     51  25cc				  -	      sec
     52  25cc				  -	      sbc	bmp_48x1_1_index
     53  25cc					      endif
     54  25cc		       85 cb		      sta	scorepointers+6
     55  25ce		       a9 f7		      lda	#>bmp_48x1_1_03
     56  25d0		       85 cc		      sta	scorepointers+7
     57  25d2
     58  25d2
     59  25d2		       a9 00		      lda	#<bmp_48x1_1_04
     60  25d4		       18		      clc
     61  25d5		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  25d7				  -	      ifconst	bmp_48x1_1_index
     63  25d7				  -	      sec
     64  25d7				  -	      sbc	bmp_48x1_1_index
     65  25d7					      endif
     66  25d7		       85 cd		      sta	scorepointers+8
     67  25d9		       a9 f8		      lda	#>bmp_48x1_1_04
     68  25db		       85 ce		      sta	scorepointers+9
     69  25dd
     70  25dd
     71  25dd		       a9 30		      lda	#<bmp_48x1_1_05
     72  25df		       18		      clc
     73  25e0		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  25e2				  -	      ifconst	bmp_48x1_1_index
     75  25e2				  -	      sec
     76  25e2				  -	      sbc	bmp_48x1_1_index
     77  25e2					      endif
     78  25e2		       85 cf		      sta	scorepointers+10
     79  25e4		       a9 f8		      lda	#>bmp_48x1_1_05
     80  25e6		       85 d0		      sta	scorepointers+11
     81  25e8
     82  25e8		       a9 01		      lda	#1	;single line kernel
     83  25ea		       85 bf		      sta	aux3
     84  25ec
     85  25ec		       ad 28 f7 	      lda	bmp_48x1_1_color
     86  25ef		       85 06		      sta	COLUP0	;3
     87  25f1		       85 07		      sta	COLUP1	;3
     88  25f3		       85 2b		      sta	HMCLR	;3
     89  25f5
     90  25f5
     91  25f5		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  25f8
------- FILE titlescreen/asm/titlescreen.asm
     76  25f8					      endif		;mk_48x1_1_on
     77  25f8
     78  25f8					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 3
      0  25f8					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  25f8
      2  25f8				   draw_bmp_48x1_2
      3  25f8
      4  25f8		       a9 00		      lda	#0
      5  25fa		       85 1b		      sta	GRP0
      6  25fc		       85 1c		      sta	GRP1
      7  25fe
      8  25fe		       a0 5f		      ldy	#(bmp_48x1_2_window-1)
      9  2600
     10  2600							;setup score pointers to point at my bitmap slices instead
     11  2600		       a9 61		      lda	#<bmp_48x1_2_00
     12  2602		       18		      clc
     13  2603		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     14  2605				  -	      ifconst	bmp_48x1_2_index
     15  2605				  -	      sec
     16  2605				  -	      sbc	bmp_48x1_2_index
     17  2605					      endif
     18  2605		       85 c5		      sta	scorepointers+0
     19  2607		       a9 f8		      lda	#>bmp_48x1_2_00
     20  2609		       85 c6		      sta	scorepointers+1
     21  260b
     22  260b
     23  260b		       a9 00		      lda	#<bmp_48x1_2_01
     24  260d		       18		      clc
     25  260e		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     26  2610				  -	      ifconst	bmp_48x1_2_index
     27  2610				  -	      sec
     28  2610				  -	      sbc	bmp_48x1_2_index
     29  2610					      endif
     30  2610		       85 c7		      sta	scorepointers+2
     31  2612		       a9 f9		      lda	#>bmp_48x1_2_01
     32  2614		       85 c8		      sta	scorepointers+3
     33  2616
     34  2616
     35  2616		       a9 60		      lda	#<bmp_48x1_2_02
     36  2618		       18		      clc
     37  2619		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     38  261b				  -	      ifconst	bmp_48x1_2_index
     39  261b				  -	      sec
     40  261b				  -	      sbc	bmp_48x1_2_index
     41  261b					      endif
     42  261b		       85 c9		      sta	scorepointers+4
     43  261d		       a9 f9		      lda	#>bmp_48x1_2_02
     44  261f		       85 ca		      sta	scorepointers+5
     45  2621
     46  2621
     47  2621		       a9 00		      lda	#<bmp_48x1_2_03
     48  2623		       18		      clc
     49  2624		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     50  2626				  -	      ifconst	bmp_48x1_2_index
     51  2626				  -	      sec
     52  2626				  -	      sbc	bmp_48x1_2_index
     53  2626					      endif
     54  2626		       85 cb		      sta	scorepointers+6
     55  2628		       a9 fa		      lda	#>bmp_48x1_2_03
     56  262a		       85 cc		      sta	scorepointers+7
     57  262c
     58  262c
     59  262c		       a9 60		      lda	#<bmp_48x1_2_04
     60  262e		       18		      clc
     61  262f		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2631				  -	      ifconst	bmp_48x1_2_index
     63  2631				  -	      sec
     64  2631				  -	      sbc	bmp_48x1_2_index
     65  2631					      endif
     66  2631		       85 cd		      sta	scorepointers+8
     67  2633		       a9 fa		      lda	#>bmp_48x1_2_04
     68  2635		       85 ce		      sta	scorepointers+9
     69  2637
     70  2637
     71  2637		       a9 00		      lda	#<bmp_48x1_2_05
     72  2639		       18		      clc
     73  263a		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     74  263c				  -	      ifconst	bmp_48x1_2_index
     75  263c				  -	      sec
     76  263c				  -	      sbc	bmp_48x1_2_index
     77  263c					      endif
     78  263c		       85 cf		      sta	scorepointers+10
     79  263e		       a9 fb		      lda	#>bmp_48x1_2_05
     80  2640		       85 d0		      sta	scorepointers+11
     81  2642
     82  2642		       a9 01		      lda	#1	;single line kernel
     83  2644		       85 bf		      sta	aux3
     84  2646
     85  2646		       ad 60 f8 	      lda	bmp_48x1_2_color
     86  2649		       85 06		      sta	COLUP0	;3
     87  264b		       85 07		      sta	COLUP1	;3
     88  264d		       85 2b		      sta	HMCLR	;3
     89  264f
     90  264f
     91  264f		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  2652
------- FILE titlescreen/asm/titlescreen.asm
     80  2652					      endif		;mk_48x1_2_on
     81  2652
     82  2652				  -	      ifconst	mk_48x1_3_on
     83  2652				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2652					      endif		;mk_48x1_3_on
     85  2652
     86  2652				  -	      ifconst	mk_48x2_1_on
     87  2652				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  2652					      endif		;mk_48x2_1_on
     89  2652
     90  2652				  -	      ifconst	mk_48x2_2_on
     91  2652				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  2652					      endif		;mk_48x2_2_on
     93  2652
     94  2652				  -	      ifconst	mk_48x2_3_on
     95  2652				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  2652					      endif		;mk_48x2_3_on
     97  2652
     98  2652				  -	      ifconst	mk_96x2_1_on
     99  2652				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    100  2652					      endif		;mk_96x2_1_on
    101  2652
    102  2652				  -	      ifconst	mk_96x2_2_on
    103  2652				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2652					      endif		;mk_96x2_2_on
    105  2652
    106  2652				  -	      ifconst	mk_96x2_3_on
    107  2652				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2652					      endif		;mk_96x2_3_on
    109  2652
    110  2652					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2652					      include	"titlescreen/asm/score_kernel.asm"
      1  2652							; The batari Basic score kernel
      2  2652							; This minikernel is not under the same license as the rest of the 
      3  2652							; titlescreen code. Refer to the bB license before you use this in
      4  2652							; a non-bB program.
      5  2652
      6  2652				   draw_score_display
      7  2652
      8  2652		       a7 d4		      lax	score+2
      9  2654		       20 08 f7 	      jsr	miniscorepointerset
     10  2657		       84 ca		      sty	scorepointers+5
     11  2659		       86 c7		      stx	scorepointers+2
     12  265b		       a7 d3		      lax	score+1
     13  265d		       20 08 f7 	      jsr	miniscorepointerset
     14  2660		       84 c9		      sty	scorepointers+4
     15  2662		       86 c6		      stx	scorepointers+1
     16  2664		       a7 d2		      lax	score
     17  2666		       20 08 f7 	      jsr	miniscorepointerset
     18  2669		       84 c8		      sty	scorepointers+3
     19  266b		       86 c5		      stx	scorepointers
     20  266d
     21  266d		       a5 c6		      lda	scorepointers+1
     22  266f		       85 cb		      sta	temp1
     23  2671
     24  2671		       a5 c8		      lda	scorepointers+3
     25  2673		       85 cd		      sta	temp3
     26  2675
     27  2675
     28  2675		       85 2b		      sta	HMCLR
     29  2677		       ba		      tsx
     30  2678		       86 f6		      stx	stack1
     31  267a							;ldx #$10
     32  267a		       a2 20		      ldx	#$20
     33  267c		       86 20		      stx	HMP0
     34  267e
     35  267e		       a2 00		      ldx	#0
     36  2680		       85 02		      sta	WSYNC
     37  2682		       86 1b		      STx	GRP0
     38  2684		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  2686
     40  2686		       a5 ca		      lda	scorepointers+5
     41  2688		       95 cf		      sta	temp5,x
     42  268a		       a9 fb		      lda	#>miniscoretable
     43  268c		       85 c6		      sta	scorepointers+1
     44  268e		       85 c8		      sta	scorepointers+3
     45  2690		       95 ca		      sta	scorepointers+5,x
     46  2692		       95 cc		      sta	temp2,x
     47  2694		       95 ce		      sta	temp4,x
     48  2696		       95 d0		      sta	temp6,x
     49  2698
     50  2698
     51  2698		       a0 07		      LDY	#7
     52  269a		       85 10		      STA	RESP0
     53  269c		       85 11		      STA	RESP1
     54  269e
     55  269e
     56  269e		       a9 03		      LDA	#$03
     57  26a0		       85 04		      STA	NUSIZ0
     58  26a2		       95 05		      STA	NUSIZ1,x
     59  26a4		       85 25		      STA	VDELP0
     60  26a6		       85 26		      STA	VDELP1
     61  26a8							;LDA #$20
     62  26a8		       a9 30		      LDA	#$30
     63  26aa		       85 21		      STA	HMP1
     64  26ac		       a5 d5		      LDA	scorecolor
     65  26ae		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  26b0				  -	      ifconst	score_kernel_fade
     67  26b0				  -	      and	score_kernel_fade
     68  26b0					      endif
     69  26b0
     70  26b0		       85 06		      STA	COLUP0
     71  26b2		       85 07		      STA	COLUP1
     72  26b4				  -	      ifconst	scorefade
     73  26b4				  -	      STA	stack2	; scorefade
     74  26b4					      endif
     75  26b4		       b1 c5		      lda	(scorepointers),y
     76  26b6		       85 1b		      sta	GRP0
     77  26b8		       b1 cd		      lda	(scorepointers+8),y
     78  26ba		       85 02		      sta	WSYNC
      0  26bc					      sleep	2
      1  26bc				   .CYCLES    SET	2
      2  26bc
      3  26bc				  -	      IF	.CYCLES < 2
      4  26bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26bc				  -	      ERR
      6  26bc					      ENDIF
      7  26bc
      8  26bc				  -	      IF	.CYCLES & 1
      9  26bc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26bc				  -	      nop	0
     11  26bc				  -	      ELSE
     12  26bc				  -	      bit	VSYNC
     13  26bc				  -	      ENDIF
     14  26bc				  -.CYCLES    SET	.CYCLES - 3
     15  26bc					      ENDIF
     16  26bc
     17  26bc					      REPEAT	.CYCLES / 2
     18  26bc		       ea		      nop
     19  26bd					      REPEND
     80  26bd		       4c cb f6 	      jmp	beginscoreloop
     81  26c0
     82  26c0				  -	      if	((<*)>$d4)
     83  26c0				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  26c0					      endif
     85  26c0
     86  26c0				   scoreloop2
     87  26c0				  -	      ifconst	scorefade
     88  26c0				  -	      lda	stack2
     89  26c0				  -	      sta	COLUP0
     90  26c0				  -	      sta	COLUP1
     91  26c0					      else
      0  26c0					      sleep	9
      1  26c0				   .CYCLES    SET	9
      2  26c0
      3  26c0				  -	      IF	.CYCLES < 2
      4  26c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26c0				  -	      ERR
      6  26c0					      ENDIF
      7  26c0
      8  26c0					      IF	.CYCLES & 1
      9  26c0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26c0		       04 00		      nop	0
     11  26c2				  -	      ELSE
     12  26c2				  -	      bit	VSYNC
     13  26c2					      ENDIF
     14  26c2				   .CYCLES    SET	.CYCLES - 3
     15  26c2					      ENDIF
     16  26c2
     17  26c2					      REPEAT	.CYCLES / 2
     18  26c2		       ea		      nop
     17  26c2					      REPEND
     18  26c3		       ea		      nop
     17  26c3					      REPEND
     18  26c4		       ea		      nop
     19  26c5					      REPEND
     93  26c5					      endif
     94  26c5		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  26c7		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  26c9		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  26cb							; cycle 0
     98  26cb				   beginscoreloop
     99  26cb		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  26cd		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  26cf		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  26d1		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  26d3		       9a		      txs
    104  26d4		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  26d6
    106  26d6				  -	      ifconst	scorefade
    107  26d6				  -	      dec	stack2
    108  26d6					      else
      0  26d6					      sleep	5
      1  26d6				   .CYCLES    SET	5
      2  26d6
      3  26d6				  -	      IF	.CYCLES < 2
      4  26d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d6				  -	      ERR
      6  26d6					      ENDIF
      7  26d6
      8  26d6					      IF	.CYCLES & 1
      9  26d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d6		       04 00		      nop	0
     11  26d8				  -	      ELSE
     12  26d8				  -	      bit	VSYNC
     13  26d8					      ENDIF
     14  26d8				   .CYCLES    SET	.CYCLES - 3
     15  26d8					      ENDIF
     16  26d8
     17  26d8					      REPEAT	.CYCLES / 2
     18  26d8		       ea		      nop
     19  26d9					      REPEND
    110  26d9					      endif
      0  26d9					      sleep	2
      1  26d9				   .CYCLES    SET	2
      2  26d9
      3  26d9				  -	      IF	.CYCLES < 2
      4  26d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d9				  -	      ERR
      6  26d9					      ENDIF
      7  26d9
      8  26d9				  -	      IF	.CYCLES & 1
      9  26d9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d9				  -	      nop	0
     11  26d9				  -	      ELSE
     12  26d9				  -	      bit	VSYNC
     13  26d9				  -	      ENDIF
     14  26d9				  -.CYCLES    SET	.CYCLES - 3
     15  26d9					      ENDIF
     16  26d9
     17  26d9					      REPEAT	.CYCLES / 2
     18  26d9		       ea		      nop
     19  26da					      REPEND
    112  26da
    113  26da		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  26dc		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  26de		       ba		      tsx
    116  26df		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  26e1		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  26e3
    119  26e3		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  26e5		       88		      dey
    121  26e6		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  26e8
    123  26e8
    124  26e8		       a6 f6		      ldx	stack1
    125  26ea		       9a		      txs
    126  26eb		       a4 cb		      ldy	temp1
    127  26ed		       84 c6		      sty	scorepointers+1
    128  26ef
    129  26ef		       a9 00		      LDA	#0
    130  26f1		       85 0e		      sta	PF1
    131  26f3		       85 1b		      STA	GRP0
    132  26f5		       85 1c		      STA	GRP1
    133  26f7		       85 25		      STA	VDELP0
    134  26f9		       85 26		      STA	VDELP1
    135  26fb		       85 04		      STA	NUSIZ0
    136  26fd		       85 05		      STA	NUSIZ1
    137  26ff
    138  26ff		       a4 cd		      ldy	temp3
    139  2701		       84 c8		      sty	scorepointers+3
    140  2703
    141  2703		       a4 cf		      ldy	temp5
    142  2705		       84 ca		      sty	scorepointers+5
    143  2707		       60		      rts
    144  2708
    145  2708				   miniscorepointerset
    146  2708		       29 0f		      and	#$0F
    147  270a		       0a		      asl
    148  270b		       0a		      asl
    149  270c		       0a		      asl
    150  270d		       69 60		      adc	#<miniscoretable
    151  270f		       a8		      tay
    152  2710		       8a		      txa
    153  2711		       29 f0		      and	#$F0
    154  2713		       4a		      lsr
    155  2714		       69 60		      adc	#<miniscoretable
    156  2716		       aa		      tax
    157  2717		       60		      rts
    158  2718
------- FILE titlescreen/asm/titlescreen.asm
    112  2718					      endif		;mk_score_on
    113  2718
    114  2718				  -	      ifconst	mk_gameselect_on
    115  2718				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2718					      endif		;mk_gameselect_on
    117  2718
    118  2718				   PFWAIT
    119  2718		       ad 84 02 	      lda	INTIM
    120  271b		       d0 fb		      bne	PFWAIT
    121  271d
    122  271d				   OVERSCAN
    123  271d							;lda #35+128 
    124  271d
    125  271d					      ifnconst	overscan_time
    126  271d		       a9 a3		      lda	#35+128
    127  271f				  -	      else
    128  271f				  -	      lda	#overscan_time+128-3-1
    129  271f					      endif
    130  271f
    131  271f
    132  271f		       8d 96 02 	      sta	TIM64T
    133  2722		       a9 c2		      lda	#%11000010
    134  2724		       85 02		      sta	WSYNC
    135  2726		       85 01		      sta	VBLANK
      0  2728					      RETURN
      1  2728				  -	      ifnconst	bankswitch
      2  2728				  -	      rts
      3  2728					      else
      4  2728		       4c dd ff 	      jmp	BS_return
      5  272b					      endif
    137  272b
    138  272b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  272b					      include	"titlescreen/48x1_1_image.asm"
      1  272b
      2  272b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  272b							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  272b							; *** color.
      5  272b
      6  272b							;*** The height of the displayed data...
      7  272b		       00 30	   bmp_48x1_1_window =	48
      8  272b
      9  272b							;*** The height of the bitmap data. This can be larger than
     10  272b							;*** the displayed data height, if you are scrolling or animating
     11  272b							;*** the data...
     12  272b		       00 30	   bmp_48x1_1_height =	48
     13  272b
     14  272b				  -	      ifnconst	bmp_48x1_1_color
     15  272b				  -bmp_48x1_1_color
     16  272b					      endif
     17  272b							; *** this is the bitmap color. If you want to change it in a 
     18  272b							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  272b		       0c		      .byte.b	$0c
     20  272c
     21  272c
     22  272c				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  272c				  -	      align	256
     24  272c					      endif
     25  272c
     26  272c				   bmp_48x1_1_00
     27  272c
     28  272c		       00		      BYTE.b	%00000000
     29  272d		       00		      BYTE.b	%00000000
     30  272e		       7f		      BYTE.b	%01111111
     31  272f		       00		      BYTE.b	%00000000
     32  2730		       3c		      BYTE.b	%00111100
     33  2731		       3c		      BYTE.b	%00111100
     34  2732		       3c		      BYTE.b	%00111100
     35  2733		       4e		      BYTE.b	%01001110
     36  2734		       4e		      BYTE.b	%01001110
     37  2735		       0e		      BYTE.b	%00001110
     38  2736		       0e		      BYTE.b	%00001110
     39  2737		       0e		      BYTE.b	%00001110
     40  2738		       3c		      BYTE.b	%00111100
     41  2739		       3c		      BYTE.b	%00111100
     42  273a		       60		      BYTE.b	%01100000
     43  273b		       60		      BYTE.b	%01100000
     44  273c		       60		      BYTE.b	%01100000
     45  273d		       3c		      BYTE.b	%00111100
     46  273e		       3c		      BYTE.b	%00111100
     47  273f		       00		      BYTE.b	%00000000
     48  2740		       00		      BYTE.b	%00000000
     49  2741		       00		      BYTE.b	%00000000
     50  2742		       00		      BYTE.b	%00000000
     51  2743		       00		      BYTE.b	%00000000
     52  2744		       00		      BYTE.b	%00000000
     53  2745		       00		      BYTE.b	%00000000
     54  2746		       00		      BYTE.b	%00000000
     55  2747		       00		      BYTE.b	%00000000
     56  2748		       00		      BYTE.b	%00000000
     57  2749		       00		      BYTE.b	%00000000
     58  274a		       00		      BYTE.b	%00000000
     59  274b		       00		      BYTE.b	%00000000
     60  274c		       01		      BYTE.b	%00000001
     61  274d		       01		      BYTE.b	%00000001
     62  274e		       03		      BYTE.b	%00000011
     63  274f		       03		      BYTE.b	%00000011
     64  2750		       03		      BYTE.b	%00000011
     65  2751		       07		      BYTE.b	%00000111
     66  2752		       0f		      BYTE.b	%00001111
     67  2753		       0f		      BYTE.b	%00001111
     68  2754		       0f		      BYTE.b	%00001111
     69  2755		       1f		      BYTE.b	%00011111
     70  2756		       3f		      BYTE.b	%00111111
     71  2757		       3f		      BYTE.b	%00111111
     72  2758		       7f		      BYTE.b	%01111111
     73  2759		       7f		      BYTE.b	%01111111
     74  275a		       00		      BYTE.b	%00000000
     75  275b		       00		      BYTE.b	%00000000
     76  275c
     77  275c				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     78  275c				  -	      align	256
     79  275c					      endif
     80  275c
     81  275c				   bmp_48x1_1_01
     82  275c
     83  275c		       00		      BYTE.b	%00000000
     84  275d		       00		      BYTE.b	%00000000
     85  275e		       ff		      BYTE.b	%11111111
     86  275f		       00		      BYTE.b	%00000000
     87  2760		       4e		      BYTE.b	%01001110
     88  2761		       4e		      BYTE.b	%01001110
     89  2762		       4e		      BYTE.b	%01001110
     90  2763		       4e		      BYTE.b	%01001110
     91  2764		       4e		      BYTE.b	%01001110
     92  2765		       7e		      BYTE.b	%01111110
     93  2766		       7e		      BYTE.b	%01111110
     94  2767		       7e		      BYTE.b	%01111110
     95  2768		       4e		      BYTE.b	%01001110
     96  2769		       4e		      BYTE.b	%01001110
     97  276a		       4e		      BYTE.b	%01001110
     98  276b		       4e		      BYTE.b	%01001110
     99  276c		       4e		      BYTE.b	%01001110
    100  276d		       3c		      BYTE.b	%00111100
    101  276e		       3c		      BYTE.b	%00111100
    102  276f		       00		      BYTE.b	%00000000
    103  2770		       00		      BYTE.b	%00000000
    104  2771		       00		      BYTE.b	%00000000
    105  2772		       00		      BYTE.b	%00000000
    106  2773		       00		      BYTE.b	%00000000
    107  2774		       00		      BYTE.b	%00000000
    108  2775		       00		      BYTE.b	%00000000
    109  2776		       00		      BYTE.b	%00000000
    110  2777		       30		      BYTE.b	%00110000
    111  2778		       73		      BYTE.b	%01110011
    112  2779		       73		      BYTE.b	%01110011
    113  277a		       73		      BYTE.b	%01110011
    114  277b		       f4		      BYTE.b	%11110100
    115  277c		       f4		      BYTE.b	%11110100
    116  277d		       f0		      BYTE.b	%11110000
    117  277e		       f0		      BYTE.b	%11110000
    118  277f		       f0		      BYTE.b	%11110000
    119  2780		       f3		      BYTE.b	%11110011
    120  2781		       f3		      BYTE.b	%11110011
    121  2782		       f6		      BYTE.b	%11110110
    122  2783		       f6		      BYTE.b	%11110110
    123  2784		       f6		      BYTE.b	%11110110
    124  2785		       f3		      BYTE.b	%11110011
    125  2786		       f3		      BYTE.b	%11110011
    126  2787		       f0		      BYTE.b	%11110000
    127  2788		       f0		      BYTE.b	%11110000
    128  2789		       f0		      BYTE.b	%11110000
    129  278a		       00		      BYTE.b	%00000000
    130  278b		       00		      BYTE.b	%00000000
    131  278c
    132  278c				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    133  278c				  -	      align	256
    134  278c					      endif
    135  278c
    136  278c				   bmp_48x1_1_02
    137  278c
    138  278c		       00		      BYTE.b	%00000000
    139  278d		       00		      BYTE.b	%00000000
    140  278e		       ff		      BYTE.b	%11111111
    141  278f		       00		      BYTE.b	%00000000
    142  2790		       18		      BYTE.b	%00011000
    143  2791		       18		      BYTE.b	%00011000
    144  2792		       18		      BYTE.b	%00011000
    145  2793		       2c		      BYTE.b	%00101100
    146  2794		       2c		      BYTE.b	%00101100
    147  2795		       46		      BYTE.b	%01000110
    148  2796		       46		      BYTE.b	%01000110
    149  2797		       46		      BYTE.b	%01000110
    150  2798		       46		      BYTE.b	%01000110
    151  2799		       46		      BYTE.b	%01000110
    152  279a		       46		      BYTE.b	%01000110
    153  279b		       46		      BYTE.b	%01000110
    154  279c		       46		      BYTE.b	%01000110
    155  279d		       46		      BYTE.b	%01000110
    156  279e		       46		      BYTE.b	%01000110
    157  279f		       00		      BYTE.b	%00000000
    158  27a0		       00		      BYTE.b	%00000000
    159  27a1		       00		      BYTE.b	%00000000
    160  27a2		       00		      BYTE.b	%00000000
    161  27a3		       00		      BYTE.b	%00000000
    162  27a4		       00		      BYTE.b	%00000000
    163  27a5		       00		      BYTE.b	%00000000
    164  27a6		       00		      BYTE.b	%00000000
    165  27a7		       00		      BYTE.b	%00000000
    166  27a8		       c6		      BYTE.b	%11000110
    167  27a9		       c6		      BYTE.b	%11000110
    168  27aa		       c6		      BYTE.b	%11000110
    169  27ab		       e6		      BYTE.b	%11100110
    170  27ac		       e6		      BYTE.b	%11100110
    171  27ad		       e7		      BYTE.b	%11100111
    172  27ae		       e7		      BYTE.b	%11100111
    173  27af		       e7		      BYTE.b	%11100111
    174  27b0		       c7		      BYTE.b	%11000111
    175  27b1		       c7		      BYTE.b	%11000111
    176  27b2		       06		      BYTE.b	%00000110
    177  27b3		       06		      BYTE.b	%00000110
    178  27b4		       06		      BYTE.b	%00000110
    179  27b5		       c6		      BYTE.b	%11000110
    180  27b6		       c6		      BYTE.b	%11000110
    181  27b7		       00		      BYTE.b	%00000000
    182  27b8		       00		      BYTE.b	%00000000
    183  27b9		       00		      BYTE.b	%00000000
    184  27ba		       00		      BYTE.b	%00000000
    185  27bb		       00		      BYTE.b	%00000000
    186  27bc
    187  27bc				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    188  27bc				  -	      align	256
    189  27bc					      endif
    190  27bc
    191  27bc				   bmp_48x1_1_03
    192  27bc
    193  27bc		       00		      BYTE.b	%00000000
    194  27bd		       00		      BYTE.b	%00000000
    195  27be		       ff		      BYTE.b	%11111111
    196  27bf		       00		      BYTE.b	%00000000
    197  27c0		       3c		      BYTE.b	%00111100
    198  27c1		       3c		      BYTE.b	%00111100
    199  27c2		       3c		      BYTE.b	%00111100
    200  27c3		       18		      BYTE.b	%00011000
    201  27c4		       18		      BYTE.b	%00011000
    202  27c5		       18		      BYTE.b	%00011000
    203  27c6		       18		      BYTE.b	%00011000
    204  27c7		       18		      BYTE.b	%00011000
    205  27c8		       18		      BYTE.b	%00011000
    206  27c9		       18		      BYTE.b	%00011000
    207  27ca		       18		      BYTE.b	%00011000
    208  27cb		       18		      BYTE.b	%00011000
    209  27cc		       18		      BYTE.b	%00011000
    210  27cd		       3c		      BYTE.b	%00111100
    211  27ce		       3c		      BYTE.b	%00111100
    212  27cf		       00		      BYTE.b	%00000000
    213  27d0		       00		      BYTE.b	%00000000
    214  27d1		       00		      BYTE.b	%00000000
    215  27d2		       00		      BYTE.b	%00000000
    216  27d3		       00		      BYTE.b	%00000000
    217  27d4		       00		      BYTE.b	%00000000
    218  27d5		       00		      BYTE.b	%00000000
    219  27d6		       00		      BYTE.b	%00000000
    220  27d7		       00		      BYTE.b	%00000000
    221  27d8		       61		      BYTE.b	%01100001
    222  27d9		       61		      BYTE.b	%01100001
    223  27da		       61		      BYTE.b	%01100001
    224  27db		       c1		      BYTE.b	%11000001
    225  27dc		       c1		      BYTE.b	%11000001
    226  27dd		       81		      BYTE.b	%10000001
    227  27de		       81		      BYTE.b	%10000001
    228  27df		       81		      BYTE.b	%10000001
    229  27e0		       83		      BYTE.b	%10000011
    230  27e1		       83		      BYTE.b	%10000011
    231  27e2		       c6		      BYTE.b	%11000110
    232  27e3		       c6		      BYTE.b	%11000110
    233  27e4		       c6		      BYTE.b	%11000110
    234  27e5		       66		      BYTE.b	%01100110
    235  27e6		       66		      BYTE.b	%01100110
    236  27e7		       00		      BYTE.b	%00000000
    237  27e8		       00		      BYTE.b	%00000000
    238  27e9		       00		      BYTE.b	%00000000
    239  27ea		       00		      BYTE.b	%00000000
    240  27eb		       00		      BYTE.b	%00000000
    241  27ec
    242  27ec					      if	>. != >[.+(bmp_48x1_1_height)]
    243  2800		       00 00 00 00*	      align	256
    244  2800					      endif
    245  2800
    246  2800				   bmp_48x1_1_04
    247  2800
    248  2800		       00		      BYTE.b	%00000000
    249  2801		       00		      BYTE.b	%00000000
    250  2802		       ff		      BYTE.b	%11111111
    251  2803		       00		      BYTE.b	%00000000
    252  2804		       3c		      BYTE.b	%00111100
    253  2805		       3c		      BYTE.b	%00111100
    254  2806		       3c		      BYTE.b	%00111100
    255  2807		       66		      BYTE.b	%01100110
    256  2808		       66		      BYTE.b	%01100110
    257  2809		       66		      BYTE.b	%01100110
    258  280a		       66		      BYTE.b	%01100110
    259  280b		       66		      BYTE.b	%01100110
    260  280c		       66		      BYTE.b	%01100110
    261  280d		       66		      BYTE.b	%01100110
    262  280e		       66		      BYTE.b	%01100110
    263  280f		       66		      BYTE.b	%01100110
    264  2810		       66		      BYTE.b	%01100110
    265  2811		       3c		      BYTE.b	%00111100
    266  2812		       3c		      BYTE.b	%00111100
    267  2813		       00		      BYTE.b	%00000000
    268  2814		       00		      BYTE.b	%00000000
    269  2815		       00		      BYTE.b	%00000000
    270  2816		       00		      BYTE.b	%00000000
    271  2817		       00		      BYTE.b	%00000000
    272  2818		       00		      BYTE.b	%00000000
    273  2819		       00		      BYTE.b	%00000000
    274  281a		       00		      BYTE.b	%00000000
    275  281b		       0c		      BYTE.b	%00001100
    276  281c		       8e		      BYTE.b	%10001110
    277  281d		       8e		      BYTE.b	%10001110
    278  281e		       8e		      BYTE.b	%10001110
    279  281f		       8f		      BYTE.b	%10001111
    280  2820		       8f		      BYTE.b	%10001111
    281  2821		       8f		      BYTE.b	%10001111
    282  2822		       8f		      BYTE.b	%10001111
    283  2823		       8f		      BYTE.b	%10001111
    284  2824		       cf		      BYTE.b	%11001111
    285  2825		       cf		      BYTE.b	%11001111
    286  2826		       6f		      BYTE.b	%01101111
    287  2827		       6f		      BYTE.b	%01101111
    288  2828		       6f		      BYTE.b	%01101111
    289  2829		       6f		      BYTE.b	%01101111
    290  282a		       6f		      BYTE.b	%01101111
    291  282b		       0f		      BYTE.b	%00001111
    292  282c		       0f		      BYTE.b	%00001111
    293  282d		       0f		      BYTE.b	%00001111
    294  282e		       00		      BYTE.b	%00000000
    295  282f		       00		      BYTE.b	%00000000
    296  2830
    297  2830				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    298  2830				  -	      align	256
    299  2830					      endif
    300  2830
    301  2830				   bmp_48x1_1_05
    302  2830
    303  2830		       00		      BYTE.b	%00000000
    304  2831		       00		      BYTE.b	%00000000
    305  2832		       fe		      BYTE.b	%11111110
    306  2833		       00		      BYTE.b	%00000000
    307  2834		       66		      BYTE.b	%01100110
    308  2835		       66		      BYTE.b	%01100110
    309  2836		       66		      BYTE.b	%01100110
    310  2837		       68		      BYTE.b	%01101000
    311  2838		       68		      BYTE.b	%01101000
    312  2839		       7c		      BYTE.b	%01111100
    313  283a		       7c		      BYTE.b	%01111100
    314  283b		       7c		      BYTE.b	%01111100
    315  283c		       66		      BYTE.b	%01100110
    316  283d		       66		      BYTE.b	%01100110
    317  283e		       66		      BYTE.b	%01100110
    318  283f		       66		      BYTE.b	%01100110
    319  2840		       66		      BYTE.b	%01100110
    320  2841		       7c		      BYTE.b	%01111100
    321  2842		       7c		      BYTE.b	%01111100
    322  2843		       00		      BYTE.b	%00000000
    323  2844		       00		      BYTE.b	%00000000
    324  2845		       00		      BYTE.b	%00000000
    325  2846		       00		      BYTE.b	%00000000
    326  2847		       00		      BYTE.b	%00000000
    327  2848		       00		      BYTE.b	%00000000
    328  2849		       00		      BYTE.b	%00000000
    329  284a		       00		      BYTE.b	%00000000
    330  284b		       00		      BYTE.b	%00000000
    331  284c		       00		      BYTE.b	%00000000
    332  284d		       00		      BYTE.b	%00000000
    333  284e		       00		      BYTE.b	%00000000
    334  284f		       00		      BYTE.b	%00000000
    335  2850		       00		      BYTE.b	%00000000
    336  2851		       80		      BYTE.b	%10000000
    337  2852		       c0		      BYTE.b	%11000000
    338  2853		       c0		      BYTE.b	%11000000
    339  2854		       e0		      BYTE.b	%11100000
    340  2855		       e0		      BYTE.b	%11100000
    341  2856		       f0		      BYTE.b	%11110000
    342  2857		       f0		      BYTE.b	%11110000
    343  2858		       f0		      BYTE.b	%11110000
    344  2859		       f8		      BYTE.b	%11111000
    345  285a		       fc		      BYTE.b	%11111100
    346  285b		       fc		      BYTE.b	%11111100
    347  285c		       fc		      BYTE.b	%11111100
    348  285d		       fc		      BYTE.b	%11111100
    349  285e		       00		      BYTE.b	%00000000
    350  285f		       00		      BYTE.b	%00000000
    351  2860
------- FILE titlescreen/asm/titlescreen.asm
    140  2860					      endif
    141  2860					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 3
      0  2860					      include	"titlescreen/48x1_2_image.asm"
      1  2860
      2  2860							; *** if you want to modify the bitmap color on the fly, just dim a
      3  2860							; *** variable in bB called 'bmp_48x1_2_color' , and use it to set the
      4  2860							; *** color.
      5  2860
      6  2860							;*** The height of the displayed data...
      7  2860		       00 60	   bmp_48x1_2_window =	96
      8  2860
      9  2860							;*** The height of the bitmap data. This can be larger than
     10  2860							;*** the displayed data height, if you are scrolling or animating
     11  2860							;*** the data...
     12  2860		       00 60	   bmp_48x1_2_height =	96
     13  2860
     14  2860				  -	      ifnconst	bmp_48x1_2_color
     15  2860				  -bmp_48x1_2_color
     16  2860					      endif
     17  2860							; *** this is the bitmap color. If you want to change it in a 
     18  2860							; *** variable instead, dim one in bB called bmp_48x1_2_color
     19  2860		       0c		      .byte.b	$0c
     20  2861
     21  2861
     22  2861				  -	      if	>. != >[.+bmp_48x1_2_height]
     23  2861				  -	      align	256
     24  2861					      endif
     25  2861
     26  2861				   bmp_48x1_2_00
     27  2861
     28  2861		       00		      BYTE.b	%00000000
     29  2862		       00		      BYTE.b	%00000000
     30  2863		       00		      BYTE.b	%00000000
     31  2864		       00		      BYTE.b	%00000000
     32  2865		       00		      BYTE.b	%00000000
     33  2866		       00		      BYTE.b	%00000000
     34  2867		       03		      BYTE.b	%00000011
     35  2868		       03		      BYTE.b	%00000011
     36  2869		       03		      BYTE.b	%00000011
     37  286a		       03		      BYTE.b	%00000011
     38  286b		       03		      BYTE.b	%00000011
     39  286c		       03		      BYTE.b	%00000011
     40  286d		       03		      BYTE.b	%00000011
     41  286e		       03		      BYTE.b	%00000011
     42  286f		       03		      BYTE.b	%00000011
     43  2870		       03		      BYTE.b	%00000011
     44  2871		       03		      BYTE.b	%00000011
     45  2872		       03		      BYTE.b	%00000011
     46  2873		       03		      BYTE.b	%00000011
     47  2874		       03		      BYTE.b	%00000011
     48  2875		       ff		      BYTE.b	%11111111
     49  2876		       ff		      BYTE.b	%11111111
     50  2877		       ff		      BYTE.b	%11111111
     51  2878		       ff		      BYTE.b	%11111111
     52  2879		       ff		      BYTE.b	%11111111
     53  287a		       ff		      BYTE.b	%11111111
     54  287b		       ff		      BYTE.b	%11111111
     55  287c		       ff		      BYTE.b	%11111111
     56  287d		       ff		      BYTE.b	%11111111
     57  287e		       ff		      BYTE.b	%11111111
     58  287f		       fc		      BYTE.b	%11111100
     59  2880		       fc		      BYTE.b	%11111100
     60  2881		       fc		      BYTE.b	%11111100
     61  2882		       fc		      BYTE.b	%11111100
     62  2883		       fc		      BYTE.b	%11111100
     63  2884		       fc		      BYTE.b	%11111100
     64  2885		       fc		      BYTE.b	%11111100
     65  2886		       fc		      BYTE.b	%11111100
     66  2887		       fc		      BYTE.b	%11111100
     67  2888		       fc		      BYTE.b	%11111100
     68  2889		       fc		      BYTE.b	%11111100
     69  288a		       fc		      BYTE.b	%11111100
     70  288b		       fc		      BYTE.b	%11111100
     71  288c		       fc		      BYTE.b	%11111100
     72  288d		       fc		      BYTE.b	%11111100
     73  288e		       fc		      BYTE.b	%11111100
     74  288f		       fc		      BYTE.b	%11111100
     75  2890		       fc		      BYTE.b	%11111100
     76  2891		       fc		      BYTE.b	%11111100
     77  2892		       fc		      BYTE.b	%11111100
     78  2893		       fc		      BYTE.b	%11111100
     79  2894		       fc		      BYTE.b	%11111100
     80  2895		       fc		      BYTE.b	%11111100
     81  2896		       fc		      BYTE.b	%11111100
     82  2897		       fc		      BYTE.b	%11111100
     83  2898		       fc		      BYTE.b	%11111100
     84  2899		       00		      BYTE.b	%00000000
     85  289a		       00		      BYTE.b	%00000000
     86  289b		       00		      BYTE.b	%00000000
     87  289c		       00		      BYTE.b	%00000000
     88  289d		       00		      BYTE.b	%00000000
     89  289e		       00		      BYTE.b	%00000000
     90  289f		       00		      BYTE.b	%00000000
     91  28a0		       00		      BYTE.b	%00000000
     92  28a1		       00		      BYTE.b	%00000000
     93  28a2		       00		      BYTE.b	%00000000
     94  28a3		       00		      BYTE.b	%00000000
     95  28a4		       00		      BYTE.b	%00000000
     96  28a5		       00		      BYTE.b	%00000000
     97  28a6		       00		      BYTE.b	%00000000
     98  28a7		       00		      BYTE.b	%00000000
     99  28a8		       00		      BYTE.b	%00000000
    100  28a9		       00		      BYTE.b	%00000000
    101  28aa		       00		      BYTE.b	%00000000
    102  28ab		       00		      BYTE.b	%00000000
    103  28ac		       00		      BYTE.b	%00000000
    104  28ad		       00		      BYTE.b	%00000000
    105  28ae		       00		      BYTE.b	%00000000
    106  28af		       00		      BYTE.b	%00000000
    107  28b0		       00		      BYTE.b	%00000000
    108  28b1		       00		      BYTE.b	%00000000
    109  28b2		       00		      BYTE.b	%00000000
    110  28b3		       00		      BYTE.b	%00000000
    111  28b4		       00		      BYTE.b	%00000000
    112  28b5		       00		      BYTE.b	%00000000
    113  28b6		       00		      BYTE.b	%00000000
    114  28b7		       00		      BYTE.b	%00000000
    115  28b8		       00		      BYTE.b	%00000000
    116  28b9		       00		      BYTE.b	%00000000
    117  28ba		       00		      BYTE.b	%00000000
    118  28bb		       00		      BYTE.b	%00000000
    119  28bc		       00		      BYTE.b	%00000000
    120  28bd		       00		      BYTE.b	%00000000
    121  28be		       00		      BYTE.b	%00000000
    122  28bf		       00		      BYTE.b	%00000000
    123  28c0		       00		      BYTE.b	%00000000
    124  28c1
    125  28c1					      if	>. != >[.+(bmp_48x1_2_height)]
    126  2900		       00 00 00 00*	      align	256
    127  2900					      endif
    128  2900
    129  2900				   bmp_48x1_2_01
    130  2900
    131  2900		       00		      BYTE.b	%00000000
    132  2901		       00		      BYTE.b	%00000000
    133  2902		       00		      BYTE.b	%00000000
    134  2903		       00		      BYTE.b	%00000000
    135  2904		       00		      BYTE.b	%00000000
    136  2905		       00		      BYTE.b	%00000000
    137  2906		       ff		      BYTE.b	%11111111
    138  2907		       ff		      BYTE.b	%11111111
    139  2908		       ff		      BYTE.b	%11111111
    140  2909		       ff		      BYTE.b	%11111111
    141  290a		       ff		      BYTE.b	%11111111
    142  290b		       ff		      BYTE.b	%11111111
    143  290c		       ff		      BYTE.b	%11111111
    144  290d		       ff		      BYTE.b	%11111111
    145  290e		       ff		      BYTE.b	%11111111
    146  290f		       ff		      BYTE.b	%11111111
    147  2910		       ff		      BYTE.b	%11111111
    148  2911		       ff		      BYTE.b	%11111111
    149  2912		       ff		      BYTE.b	%11111111
    150  2913		       ff		      BYTE.b	%11111111
    151  2914		       ff		      BYTE.b	%11111111
    152  2915		       ff		      BYTE.b	%11111111
    153  2916		       ff		      BYTE.b	%11111111
    154  2917		       ff		      BYTE.b	%11111111
    155  2918		       ff		      BYTE.b	%11111111
    156  2919		       ff		      BYTE.b	%11111111
    157  291a		       ff		      BYTE.b	%11111111
    158  291b		       ff		      BYTE.b	%11111111
    159  291c		       ff		      BYTE.b	%11111111
    160  291d		       ff		      BYTE.b	%11111111
    161  291e		       0f		      BYTE.b	%00001111
    162  291f		       0f		      BYTE.b	%00001111
    163  2920		       0f		      BYTE.b	%00001111
    164  2921		       0f		      BYTE.b	%00001111
    165  2922		       0f		      BYTE.b	%00001111
    166  2923		       0f		      BYTE.b	%00001111
    167  2924		       0f		      BYTE.b	%00001111
    168  2925		       0f		      BYTE.b	%00001111
    169  2926		       0f		      BYTE.b	%00001111
    170  2927		       0f		      BYTE.b	%00001111
    171  2928		       0f		      BYTE.b	%00001111
    172  2929		       0f		      BYTE.b	%00001111
    173  292a		       0f		      BYTE.b	%00001111
    174  292b		       0f		      BYTE.b	%00001111
    175  292c		       0f		      BYTE.b	%00001111
    176  292d		       0f		      BYTE.b	%00001111
    177  292e		       0f		      BYTE.b	%00001111
    178  292f		       0f		      BYTE.b	%00001111
    179  2930		       0f		      BYTE.b	%00001111
    180  2931		       0f		      BYTE.b	%00001111
    181  2932		       0f		      BYTE.b	%00001111
    182  2933		       0f		      BYTE.b	%00001111
    183  2934		       0f		      BYTE.b	%00001111
    184  2935		       0f		      BYTE.b	%00001111
    185  2936		       0f		      BYTE.b	%00001111
    186  2937		       0f		      BYTE.b	%00001111
    187  2938		       0f		      BYTE.b	%00001111
    188  2939		       0f		      BYTE.b	%00001111
    189  293a		       0f		      BYTE.b	%00001111
    190  293b		       0f		      BYTE.b	%00001111
    191  293c		       0f		      BYTE.b	%00001111
    192  293d		       0f		      BYTE.b	%00001111
    193  293e		       0f		      BYTE.b	%00001111
    194  293f		       0f		      BYTE.b	%00001111
    195  2940		       0f		      BYTE.b	%00001111
    196  2941		       0f		      BYTE.b	%00001111
    197  2942		       0f		      BYTE.b	%00001111
    198  2943		       0f		      BYTE.b	%00001111
    199  2944		       00		      BYTE.b	%00000000
    200  2945		       00		      BYTE.b	%00000000
    201  2946		       00		      BYTE.b	%00000000
    202  2947		       00		      BYTE.b	%00000000
    203  2948		       00		      BYTE.b	%00000000
    204  2949		       00		      BYTE.b	%00000000
    205  294a		       00		      BYTE.b	%00000000
    206  294b		       00		      BYTE.b	%00000000
    207  294c		       00		      BYTE.b	%00000000
    208  294d		       00		      BYTE.b	%00000000
    209  294e		       00		      BYTE.b	%00000000
    210  294f		       00		      BYTE.b	%00000000
    211  2950		       00		      BYTE.b	%00000000
    212  2951		       00		      BYTE.b	%00000000
    213  2952		       00		      BYTE.b	%00000000
    214  2953		       00		      BYTE.b	%00000000
    215  2954		       00		      BYTE.b	%00000000
    216  2955		       00		      BYTE.b	%00000000
    217  2956		       00		      BYTE.b	%00000000
    218  2957		       00		      BYTE.b	%00000000
    219  2958		       00		      BYTE.b	%00000000
    220  2959		       00		      BYTE.b	%00000000
    221  295a		       00		      BYTE.b	%00000000
    222  295b		       00		      BYTE.b	%00000000
    223  295c		       00		      BYTE.b	%00000000
    224  295d		       00		      BYTE.b	%00000000
    225  295e		       00		      BYTE.b	%00000000
    226  295f		       00		      BYTE.b	%00000000
    227  2960
    228  2960				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    229  2960				  -	      align	256
    230  2960					      endif
    231  2960
    232  2960				   bmp_48x1_2_02
    233  2960
    234  2960		       00		      BYTE.b	%00000000
    235  2961		       00		      BYTE.b	%00000000
    236  2962		       00		      BYTE.b	%00000000
    237  2963		       00		      BYTE.b	%00000000
    238  2964		       00		      BYTE.b	%00000000
    239  2965		       00		      BYTE.b	%00000000
    240  2966		       c0		      BYTE.b	%11000000
    241  2967		       c0		      BYTE.b	%11000000
    242  2968		       c0		      BYTE.b	%11000000
    243  2969		       c0		      BYTE.b	%11000000
    244  296a		       c0		      BYTE.b	%11000000
    245  296b		       c0		      BYTE.b	%11000000
    246  296c		       c0		      BYTE.b	%11000000
    247  296d		       c0		      BYTE.b	%11000000
    248  296e		       c0		      BYTE.b	%11000000
    249  296f		       c0		      BYTE.b	%11000000
    250  2970		       c0		      BYTE.b	%11000000
    251  2971		       c0		      BYTE.b	%11000000
    252  2972		       c0		      BYTE.b	%11000000
    253  2973		       c0		      BYTE.b	%11000000
    254  2974		       ff		      BYTE.b	%11111111
    255  2975		       ff		      BYTE.b	%11111111
    256  2976		       ff		      BYTE.b	%11111111
    257  2977		       ff		      BYTE.b	%11111111
    258  2978		       ff		      BYTE.b	%11111111
    259  2979		       ff		      BYTE.b	%11111111
    260  297a		       ff		      BYTE.b	%11111111
    261  297b		       ff		      BYTE.b	%11111111
    262  297c		       ff		      BYTE.b	%11111111
    263  297d		       ff		      BYTE.b	%11111111
    264  297e		       ff		      BYTE.b	%11111111
    265  297f		       ff		      BYTE.b	%11111111
    266  2980		       ff		      BYTE.b	%11111111
    267  2981		       ff		      BYTE.b	%11111111
    268  2982		       ff		      BYTE.b	%11111111
    269  2983		       ff		      BYTE.b	%11111111
    270  2984		       ff		      BYTE.b	%11111111
    271  2985		       ff		      BYTE.b	%11111111
    272  2986		       ff		      BYTE.b	%11111111
    273  2987		       ff		      BYTE.b	%11111111
    274  2988		       ff		      BYTE.b	%11111111
    275  2989		       ff		      BYTE.b	%11111111
    276  298a		       c0		      BYTE.b	%11000000
    277  298b		       c0		      BYTE.b	%11000000
    278  298c		       c0		      BYTE.b	%11000000
    279  298d		       c0		      BYTE.b	%11000000
    280  298e		       c0		      BYTE.b	%11000000
    281  298f		       c0		      BYTE.b	%11000000
    282  2990		       c0		      BYTE.b	%11000000
    283  2991		       c0		      BYTE.b	%11000000
    284  2992		       c0		      BYTE.b	%11000000
    285  2993		       c0		      BYTE.b	%11000000
    286  2994		       c0		      BYTE.b	%11000000
    287  2995		       c0		      BYTE.b	%11000000
    288  2996		       c0		      BYTE.b	%11000000
    289  2997		       c0		      BYTE.b	%11000000
    290  2998		       c0		      BYTE.b	%11000000
    291  2999		       c0		      BYTE.b	%11000000
    292  299a		       ff		      BYTE.b	%11111111
    293  299b		       ff		      BYTE.b	%11111111
    294  299c		       ff		      BYTE.b	%11111111
    295  299d		       ff		      BYTE.b	%11111111
    296  299e		       ff		      BYTE.b	%11111111
    297  299f		       ff		      BYTE.b	%11111111
    298  29a0		       ff		      BYTE.b	%11111111
    299  29a1		       ff		      BYTE.b	%11111111
    300  29a2		       ff		      BYTE.b	%11111111
    301  29a3		       ff		      BYTE.b	%11111111
    302  29a4		       3f		      BYTE.b	%00111111
    303  29a5		       3f		      BYTE.b	%00111111
    304  29a6		       3f		      BYTE.b	%00111111
    305  29a7		       3f		      BYTE.b	%00111111
    306  29a8		       3f		      BYTE.b	%00111111
    307  29a9		       3f		      BYTE.b	%00111111
    308  29aa		       3f		      BYTE.b	%00111111
    309  29ab		       3f		      BYTE.b	%00111111
    310  29ac		       3f		      BYTE.b	%00111111
    311  29ad		       3f		      BYTE.b	%00111111
    312  29ae		       3f		      BYTE.b	%00111111
    313  29af		       3f		      BYTE.b	%00111111
    314  29b0		       3f		      BYTE.b	%00111111
    315  29b1		       3f		      BYTE.b	%00111111
    316  29b2		       3f		      BYTE.b	%00111111
    317  29b3		       3f		      BYTE.b	%00111111
    318  29b4		       3f		      BYTE.b	%00111111
    319  29b5		       3f		      BYTE.b	%00111111
    320  29b6		       3f		      BYTE.b	%00111111
    321  29b7		       3f		      BYTE.b	%00111111
    322  29b8		       3f		      BYTE.b	%00111111
    323  29b9		       3f		      BYTE.b	%00111111
    324  29ba		       3f		      BYTE.b	%00111111
    325  29bb		       3f		      BYTE.b	%00111111
    326  29bc		       3f		      BYTE.b	%00111111
    327  29bd		       3f		      BYTE.b	%00111111
    328  29be		       00		      BYTE.b	%00000000
    329  29bf		       00		      BYTE.b	%00000000
    330  29c0
    331  29c0					      if	>. != >[.+(bmp_48x1_2_height)]
    332  2a00		       00 00 00 00*	      align	256
    333  2a00					      endif
    334  2a00
    335  2a00				   bmp_48x1_2_03
    336  2a00
    337  2a00		       00		      BYTE.b	%00000000
    338  2a01		       00		      BYTE.b	%00000000
    339  2a02		       00		      BYTE.b	%00000000
    340  2a03		       00		      BYTE.b	%00000000
    341  2a04		       00		      BYTE.b	%00000000
    342  2a05		       00		      BYTE.b	%00000000
    343  2a06		       03		      BYTE.b	%00000011
    344  2a07		       03		      BYTE.b	%00000011
    345  2a08		       03		      BYTE.b	%00000011
    346  2a09		       03		      BYTE.b	%00000011
    347  2a0a		       03		      BYTE.b	%00000011
    348  2a0b		       03		      BYTE.b	%00000011
    349  2a0c		       03		      BYTE.b	%00000011
    350  2a0d		       03		      BYTE.b	%00000011
    351  2a0e		       03		      BYTE.b	%00000011
    352  2a0f		       03		      BYTE.b	%00000011
    353  2a10		       03		      BYTE.b	%00000011
    354  2a11		       03		      BYTE.b	%00000011
    355  2a12		       03		      BYTE.b	%00000011
    356  2a13		       03		      BYTE.b	%00000011
    357  2a14		       ff		      BYTE.b	%11111111
    358  2a15		       ff		      BYTE.b	%11111111
    359  2a16		       ff		      BYTE.b	%11111111
    360  2a17		       ff		      BYTE.b	%11111111
    361  2a18		       ff		      BYTE.b	%11111111
    362  2a19		       ff		      BYTE.b	%11111111
    363  2a1a		       ff		      BYTE.b	%11111111
    364  2a1b		       ff		      BYTE.b	%11111111
    365  2a1c		       ff		      BYTE.b	%11111111
    366  2a1d		       ff		      BYTE.b	%11111111
    367  2a1e		       ff		      BYTE.b	%11111111
    368  2a1f		       ff		      BYTE.b	%11111111
    369  2a20		       ff		      BYTE.b	%11111111
    370  2a21		       ff		      BYTE.b	%11111111
    371  2a22		       ff		      BYTE.b	%11111111
    372  2a23		       ff		      BYTE.b	%11111111
    373  2a24		       ff		      BYTE.b	%11111111
    374  2a25		       ff		      BYTE.b	%11111111
    375  2a26		       ff		      BYTE.b	%11111111
    376  2a27		       ff		      BYTE.b	%11111111
    377  2a28		       ff		      BYTE.b	%11111111
    378  2a29		       ff		      BYTE.b	%11111111
    379  2a2a		       03		      BYTE.b	%00000011
    380  2a2b		       03		      BYTE.b	%00000011
    381  2a2c		       03		      BYTE.b	%00000011
    382  2a2d		       03		      BYTE.b	%00000011
    383  2a2e		       03		      BYTE.b	%00000011
    384  2a2f		       03		      BYTE.b	%00000011
    385  2a30		       03		      BYTE.b	%00000011
    386  2a31		       03		      BYTE.b	%00000011
    387  2a32		       03		      BYTE.b	%00000011
    388  2a33		       03		      BYTE.b	%00000011
    389  2a34		       03		      BYTE.b	%00000011
    390  2a35		       03		      BYTE.b	%00000011
    391  2a36		       03		      BYTE.b	%00000011
    392  2a37		       03		      BYTE.b	%00000011
    393  2a38		       03		      BYTE.b	%00000011
    394  2a39		       03		      BYTE.b	%00000011
    395  2a3a		       ff		      BYTE.b	%11111111
    396  2a3b		       ff		      BYTE.b	%11111111
    397  2a3c		       ff		      BYTE.b	%11111111
    398  2a3d		       ff		      BYTE.b	%11111111
    399  2a3e		       ff		      BYTE.b	%11111111
    400  2a3f		       ff		      BYTE.b	%11111111
    401  2a40		       ff		      BYTE.b	%11111111
    402  2a41		       ff		      BYTE.b	%11111111
    403  2a42		       ff		      BYTE.b	%11111111
    404  2a43		       ff		      BYTE.b	%11111111
    405  2a44		       fc		      BYTE.b	%11111100
    406  2a45		       fc		      BYTE.b	%11111100
    407  2a46		       fc		      BYTE.b	%11111100
    408  2a47		       fc		      BYTE.b	%11111100
    409  2a48		       fc		      BYTE.b	%11111100
    410  2a49		       fc		      BYTE.b	%11111100
    411  2a4a		       fc		      BYTE.b	%11111100
    412  2a4b		       fc		      BYTE.b	%11111100
    413  2a4c		       fc		      BYTE.b	%11111100
    414  2a4d		       fc		      BYTE.b	%11111100
    415  2a4e		       fc		      BYTE.b	%11111100
    416  2a4f		       fc		      BYTE.b	%11111100
    417  2a50		       fc		      BYTE.b	%11111100
    418  2a51		       fc		      BYTE.b	%11111100
    419  2a52		       fc		      BYTE.b	%11111100
    420  2a53		       fc		      BYTE.b	%11111100
    421  2a54		       fc		      BYTE.b	%11111100
    422  2a55		       fc		      BYTE.b	%11111100
    423  2a56		       fc		      BYTE.b	%11111100
    424  2a57		       fc		      BYTE.b	%11111100
    425  2a58		       fc		      BYTE.b	%11111100
    426  2a59		       fc		      BYTE.b	%11111100
    427  2a5a		       fc		      BYTE.b	%11111100
    428  2a5b		       fc		      BYTE.b	%11111100
    429  2a5c		       fc		      BYTE.b	%11111100
    430  2a5d		       fc		      BYTE.b	%11111100
    431  2a5e		       00		      BYTE.b	%00000000
    432  2a5f		       00		      BYTE.b	%00000000
    433  2a60
    434  2a60				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    435  2a60				  -	      align	256
    436  2a60					      endif
    437  2a60
    438  2a60				   bmp_48x1_2_04
    439  2a60
    440  2a60		       00		      BYTE.b	%00000000
    441  2a61		       00		      BYTE.b	%00000000
    442  2a62		       00		      BYTE.b	%00000000
    443  2a63		       00		      BYTE.b	%00000000
    444  2a64		       00		      BYTE.b	%00000000
    445  2a65		       00		      BYTE.b	%00000000
    446  2a66		       ff		      BYTE.b	%11111111
    447  2a67		       ff		      BYTE.b	%11111111
    448  2a68		       ff		      BYTE.b	%11111111
    449  2a69		       ff		      BYTE.b	%11111111
    450  2a6a		       ff		      BYTE.b	%11111111
    451  2a6b		       ff		      BYTE.b	%11111111
    452  2a6c		       ff		      BYTE.b	%11111111
    453  2a6d		       ff		      BYTE.b	%11111111
    454  2a6e		       ff		      BYTE.b	%11111111
    455  2a6f		       ff		      BYTE.b	%11111111
    456  2a70		       ff		      BYTE.b	%11111111
    457  2a71		       ff		      BYTE.b	%11111111
    458  2a72		       ff		      BYTE.b	%11111111
    459  2a73		       ff		      BYTE.b	%11111111
    460  2a74		       ff		      BYTE.b	%11111111
    461  2a75		       ff		      BYTE.b	%11111111
    462  2a76		       ff		      BYTE.b	%11111111
    463  2a77		       ff		      BYTE.b	%11111111
    464  2a78		       ff		      BYTE.b	%11111111
    465  2a79		       ff		      BYTE.b	%11111111
    466  2a7a		       ff		      BYTE.b	%11111111
    467  2a7b		       ff		      BYTE.b	%11111111
    468  2a7c		       ff		      BYTE.b	%11111111
    469  2a7d		       ff		      BYTE.b	%11111111
    470  2a7e		       f0		      BYTE.b	%11110000
    471  2a7f		       f0		      BYTE.b	%11110000
    472  2a80		       f0		      BYTE.b	%11110000
    473  2a81		       f0		      BYTE.b	%11110000
    474  2a82		       f0		      BYTE.b	%11110000
    475  2a83		       f0		      BYTE.b	%11110000
    476  2a84		       f0		      BYTE.b	%11110000
    477  2a85		       f0		      BYTE.b	%11110000
    478  2a86		       f0		      BYTE.b	%11110000
    479  2a87		       f0		      BYTE.b	%11110000
    480  2a88		       f0		      BYTE.b	%11110000
    481  2a89		       f0		      BYTE.b	%11110000
    482  2a8a		       f0		      BYTE.b	%11110000
    483  2a8b		       f0		      BYTE.b	%11110000
    484  2a8c		       f0		      BYTE.b	%11110000
    485  2a8d		       f0		      BYTE.b	%11110000
    486  2a8e		       f0		      BYTE.b	%11110000
    487  2a8f		       f0		      BYTE.b	%11110000
    488  2a90		       f0		      BYTE.b	%11110000
    489  2a91		       f0		      BYTE.b	%11110000
    490  2a92		       f0		      BYTE.b	%11110000
    491  2a93		       f0		      BYTE.b	%11110000
    492  2a94		       f0		      BYTE.b	%11110000
    493  2a95		       f0		      BYTE.b	%11110000
    494  2a96		       f0		      BYTE.b	%11110000
    495  2a97		       f0		      BYTE.b	%11110000
    496  2a98		       f0		      BYTE.b	%11110000
    497  2a99		       f0		      BYTE.b	%11110000
    498  2a9a		       f0		      BYTE.b	%11110000
    499  2a9b		       f0		      BYTE.b	%11110000
    500  2a9c		       f0		      BYTE.b	%11110000
    501  2a9d		       f0		      BYTE.b	%11110000
    502  2a9e		       f0		      BYTE.b	%11110000
    503  2a9f		       f0		      BYTE.b	%11110000
    504  2aa0		       f0		      BYTE.b	%11110000
    505  2aa1		       f0		      BYTE.b	%11110000
    506  2aa2		       f0		      BYTE.b	%11110000
    507  2aa3		       f0		      BYTE.b	%11110000
    508  2aa4		       00		      BYTE.b	%00000000
    509  2aa5		       00		      BYTE.b	%00000000
    510  2aa6		       00		      BYTE.b	%00000000
    511  2aa7		       00		      BYTE.b	%00000000
    512  2aa8		       00		      BYTE.b	%00000000
    513  2aa9		       00		      BYTE.b	%00000000
    514  2aaa		       00		      BYTE.b	%00000000
    515  2aab		       00		      BYTE.b	%00000000
    516  2aac		       00		      BYTE.b	%00000000
    517  2aad		       00		      BYTE.b	%00000000
    518  2aae		       00		      BYTE.b	%00000000
    519  2aaf		       00		      BYTE.b	%00000000
    520  2ab0		       00		      BYTE.b	%00000000
    521  2ab1		       00		      BYTE.b	%00000000
    522  2ab2		       00		      BYTE.b	%00000000
    523  2ab3		       00		      BYTE.b	%00000000
    524  2ab4		       00		      BYTE.b	%00000000
    525  2ab5		       00		      BYTE.b	%00000000
    526  2ab6		       00		      BYTE.b	%00000000
    527  2ab7		       00		      BYTE.b	%00000000
    528  2ab8		       00		      BYTE.b	%00000000
    529  2ab9		       00		      BYTE.b	%00000000
    530  2aba		       00		      BYTE.b	%00000000
    531  2abb		       00		      BYTE.b	%00000000
    532  2abc		       00		      BYTE.b	%00000000
    533  2abd		       00		      BYTE.b	%00000000
    534  2abe		       00		      BYTE.b	%00000000
    535  2abf		       00		      BYTE.b	%00000000
    536  2ac0
    537  2ac0					      if	>. != >[.+(bmp_48x1_2_height)]
    538  2b00		       00 00 00 00*	      align	256
    539  2b00					      endif
    540  2b00
    541  2b00				   bmp_48x1_2_05
    542  2b00
    543  2b00		       00		      BYTE.b	%00000000
    544  2b01		       00		      BYTE.b	%00000000
    545  2b02		       00		      BYTE.b	%00000000
    546  2b03		       00		      BYTE.b	%00000000
    547  2b04		       00		      BYTE.b	%00000000
    548  2b05		       00		      BYTE.b	%00000000
    549  2b06		       c0		      BYTE.b	%11000000
    550  2b07		       c0		      BYTE.b	%11000000
    551  2b08		       c0		      BYTE.b	%11000000
    552  2b09		       c0		      BYTE.b	%11000000
    553  2b0a		       c0		      BYTE.b	%11000000
    554  2b0b		       c0		      BYTE.b	%11000000
    555  2b0c		       c0		      BYTE.b	%11000000
    556  2b0d		       c0		      BYTE.b	%11000000
    557  2b0e		       c0		      BYTE.b	%11000000
    558  2b0f		       c0		      BYTE.b	%11000000
    559  2b10		       c0		      BYTE.b	%11000000
    560  2b11		       c0		      BYTE.b	%11000000
    561  2b12		       c0		      BYTE.b	%11000000
    562  2b13		       c0		      BYTE.b	%11000000
    563  2b14		       ff		      BYTE.b	%11111111
    564  2b15		       ff		      BYTE.b	%11111111
    565  2b16		       ff		      BYTE.b	%11111111
    566  2b17		       ff		      BYTE.b	%11111111
    567  2b18		       ff		      BYTE.b	%11111111
    568  2b19		       ff		      BYTE.b	%11111111
    569  2b1a		       ff		      BYTE.b	%11111111
    570  2b1b		       ff		      BYTE.b	%11111111
    571  2b1c		       ff		      BYTE.b	%11111111
    572  2b1d		       ff		      BYTE.b	%11111111
    573  2b1e		       3f		      BYTE.b	%00111111
    574  2b1f		       3f		      BYTE.b	%00111111
    575  2b20		       3f		      BYTE.b	%00111111
    576  2b21		       3f		      BYTE.b	%00111111
    577  2b22		       3f		      BYTE.b	%00111111
    578  2b23		       3f		      BYTE.b	%00111111
    579  2b24		       3f		      BYTE.b	%00111111
    580  2b25		       3f		      BYTE.b	%00111111
    581  2b26		       3f		      BYTE.b	%00111111
    582  2b27		       3f		      BYTE.b	%00111111
    583  2b28		       3f		      BYTE.b	%00111111
    584  2b29		       3f		      BYTE.b	%00111111
    585  2b2a		       3f		      BYTE.b	%00111111
    586  2b2b		       3f		      BYTE.b	%00111111
    587  2b2c		       3f		      BYTE.b	%00111111
    588  2b2d		       3f		      BYTE.b	%00111111
    589  2b2e		       3f		      BYTE.b	%00111111
    590  2b2f		       3f		      BYTE.b	%00111111
    591  2b30		       3f		      BYTE.b	%00111111
    592  2b31		       3f		      BYTE.b	%00111111
    593  2b32		       3f		      BYTE.b	%00111111
    594  2b33		       3f		      BYTE.b	%00111111
    595  2b34		       3f		      BYTE.b	%00111111
    596  2b35		       3f		      BYTE.b	%00111111
    597  2b36		       3f		      BYTE.b	%00111111
    598  2b37		       3f		      BYTE.b	%00111111
    599  2b38		       00		      BYTE.b	%00000000
    600  2b39		       00		      BYTE.b	%00000000
    601  2b3a		       00		      BYTE.b	%00000000
    602  2b3b		       00		      BYTE.b	%00000000
    603  2b3c		       00		      BYTE.b	%00000000
    604  2b3d		       00		      BYTE.b	%00000000
    605  2b3e		       00		      BYTE.b	%00000000
    606  2b3f		       00		      BYTE.b	%00000000
    607  2b40		       00		      BYTE.b	%00000000
    608  2b41		       00		      BYTE.b	%00000000
    609  2b42		       00		      BYTE.b	%00000000
    610  2b43		       00		      BYTE.b	%00000000
    611  2b44		       00		      BYTE.b	%00000000
    612  2b45		       00		      BYTE.b	%00000000
    613  2b46		       00		      BYTE.b	%00000000
    614  2b47		       00		      BYTE.b	%00000000
    615  2b48		       00		      BYTE.b	%00000000
    616  2b49		       00		      BYTE.b	%00000000
    617  2b4a		       00		      BYTE.b	%00000000
    618  2b4b		       00		      BYTE.b	%00000000
    619  2b4c		       00		      BYTE.b	%00000000
    620  2b4d		       00		      BYTE.b	%00000000
    621  2b4e		       00		      BYTE.b	%00000000
    622  2b4f		       00		      BYTE.b	%00000000
    623  2b50		       00		      BYTE.b	%00000000
    624  2b51		       00		      BYTE.b	%00000000
    625  2b52		       00		      BYTE.b	%00000000
    626  2b53		       00		      BYTE.b	%00000000
    627  2b54		       00		      BYTE.b	%00000000
    628  2b55		       00		      BYTE.b	%00000000
    629  2b56		       00		      BYTE.b	%00000000
    630  2b57		       00		      BYTE.b	%00000000
    631  2b58		       00		      BYTE.b	%00000000
    632  2b59		       00		      BYTE.b	%00000000
    633  2b5a		       00		      BYTE.b	%00000000
    634  2b5b		       00		      BYTE.b	%00000000
    635  2b5c		       00		      BYTE.b	%00000000
    636  2b5d		       00		      BYTE.b	%00000000
    637  2b5e		       00		      BYTE.b	%00000000
    638  2b5f		       00		      BYTE.b	%00000000
    639  2b60
------- FILE titlescreen/asm/titlescreen.asm
    143  2b60					      endif
    144  2b60				  -	      ifconst	mk_48x1_3_on
    145  2b60				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2b60					      endif
    147  2b60
    148  2b60				  -	      ifconst	mk_48x2_1_on
    149  2b60				  -	      include	"titlescreen/48x2_1_image.asm"
    150  2b60					      endif
    151  2b60				  -	      ifconst	mk_48x2_2_on
    152  2b60				  -	      include	"titlescreen/48x2_2_image.asm"
    153  2b60					      endif
    154  2b60				  -	      ifconst	mk_48x2_3_on
    155  2b60				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2b60					      endif
    157  2b60
    158  2b60				  -	      ifconst	mk_96x2_1_on
    159  2b60				  -	      include	"titlescreen/96x2_1_image.asm"
    160  2b60					      endif
    161  2b60				  -	      ifconst	mk_96x2_2_on
    162  2b60				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2b60					      endif
    164  2b60				  -	      ifconst	mk_96x2_3_on
    165  2b60				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2b60					      endif
    167  2b60
    168  2b60					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b60					      include	"titlescreen/score_image.asm"
      1  2b60							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b60							; if you're looking to want to modify any one font, pick on the 
      3  2b60
      4  2b60				  -	      ifnconst	NOFONT
      5  2b60				  -NOFONT     =	0
      6  2b60					      endif
      7  2b60				  -	      ifnconst	STOCK
      8  2b60				  -STOCK      =	1	;_FONTNAME
      9  2b60					      endif
     10  2b60				  -	      ifnconst	NEWCENTURY
     11  2b60				  -NEWCENTURY =	2	;_FONTNAME
     12  2b60					      endif
     13  2b60				  -	      ifnconst	WHIMSEY
     14  2b60				  -WHIMSEY    =	3	;_FONTNAME
     15  2b60					      endif
     16  2b60				  -	      ifnconst	ALARMCLOCK
     17  2b60				  -ALARMCLOCK =	4	;_FONTNAME
     18  2b60					      endif
     19  2b60				  -	      ifnconst	HANDWRITTEN
     20  2b60				  -HANDWRITTEN =	5	;_FONTNAME
     21  2b60					      endif
     22  2b60				  -	      ifnconst	INTERRUPTED
     23  2b60				  -INTERRUPTED =	6	;_FONTNAME
     24  2b60					      endif
     25  2b60				  -	      ifnconst	TINY
     26  2b60				  -TINY       =	7	;_FONTNAME
     27  2b60					      endif
     28  2b60				  -	      ifnconst	RETROPUTER
     29  2b60				  -RETROPUTER =	8	;_FONTNAME
     30  2b60					      endif
     31  2b60				  -	      ifnconst	CURVES
     32  2b60				  -CURVES     =	9	;_FONTNAME
     33  2b60					      endif
     34  2b60				  -	      ifnconst	HUSKY
     35  2b60				  -HUSKY      =	10	;_FONTNAME
     36  2b60					      endif
     37  2b60				  -	      ifnconst	SNAKE
     38  2b60				  -SNAKE      =	11	;_FONTNAME
     39  2b60					      endif
     40  2b60				  -	      ifnconst	PLOK
     41  2b60				  -PLOK       =	13	;_FONTNAME
     42  2b60					      endif
     43  2b60
     44  2b60				  -	      ifnconst	SYMBOLS
     45  2b60				  -SYMBOLS    =	0	;_FONTNAME 
     46  2b60					      endif
     47  2b60
     48  2b60							; ### setup some defaults
     49  2b60				  -	      ifnconst	fontstyle
     50  2b60				  -fontstyle  =	STOCK
     51  2b60					      endif
     52  2b60
     53  2b60							;fix up the table alignment, if necessary
     54  2b60				  -	      if	>. != >[.+128]
     55  2b60				  -	      align	256
     56  2b60					      endif
     57  2b60
     58  2b60				   miniscoretable
     59  2b60
     60  2b60					      if	fontstyle == STOCK
     61  2b60
     62  2b60							;byte %00000000 ; STOCK
     63  2b60
     64  2b60		       3c		      .byte.b	%00111100	; STOCK
     65  2b61		       66		      .byte.b	%01100110	; STOCK
     66  2b62		       66		      .byte.b	%01100110	; STOCK
     67  2b63		       66		      .byte.b	%01100110	; STOCK
     68  2b64		       66		      .byte.b	%01100110	; STOCK
     69  2b65		       66		      .byte.b	%01100110	; STOCK
     70  2b66		       66		      .byte.b	%01100110	; STOCK
     71  2b67		       3c		      .byte.b	%00111100	; STOCK
     72  2b68
     73  2b68							;byte %00000000 ; STOCK
     74  2b68
     75  2b68		       7e		      .byte.b	%01111110	; STOCK
     76  2b69		       18		      .byte.b	%00011000	; STOCK
     77  2b6a		       18		      .byte.b	%00011000	; STOCK
     78  2b6b		       18		      .byte.b	%00011000	; STOCK
     79  2b6c		       18		      .byte.b	%00011000	; STOCK
     80  2b6d		       38		      .byte.b	%00111000	; STOCK
     81  2b6e		       18		      .byte.b	%00011000	; STOCK
     82  2b6f		       08		      .byte.b	%00001000	; STOCK
     83  2b70
     84  2b70							;byte %00000000 ; STOCK
     85  2b70
     86  2b70		       7e		      .byte.b	%01111110	; STOCK
     87  2b71		       60		      .byte.b	%01100000	; STOCK
     88  2b72		       60		      .byte.b	%01100000	; STOCK
     89  2b73		       3c		      .byte.b	%00111100	; STOCK
     90  2b74		       06		      .byte.b	%00000110	; STOCK
     91  2b75		       06		      .byte.b	%00000110	; STOCK
     92  2b76		       46		      .byte.b	%01000110	; STOCK
     93  2b77		       3c		      .byte.b	%00111100	; STOCK
     94  2b78
     95  2b78							;byte %00000000 ; STOCK
     96  2b78
     97  2b78		       3c		      .byte.b	%00111100	; STOCK
     98  2b79		       46		      .byte.b	%01000110	; STOCK
     99  2b7a		       06		      .byte.b	%00000110	; STOCK
    100  2b7b		       06		      .byte.b	%00000110	; STOCK
    101  2b7c		       1c		      .byte.b	%00011100	; STOCK
    102  2b7d		       06		      .byte.b	%00000110	; STOCK
    103  2b7e		       46		      .byte.b	%01000110	; STOCK
    104  2b7f		       3c		      .byte.b	%00111100	; STOCK
    105  2b80
    106  2b80							;byte %00000000 ; STOCK
    107  2b80
    108  2b80		       0c		      .byte.b	%00001100	; STOCK
    109  2b81		       0c		      .byte.b	%00001100	; STOCK
    110  2b82		       7e		      .byte.b	%01111110	; STOCK
    111  2b83		       4c		      .byte.b	%01001100	; STOCK
    112  2b84		       4c		      .byte.b	%01001100	; STOCK
    113  2b85		       2c		      .byte.b	%00101100	; STOCK
    114  2b86		       1c		      .byte.b	%00011100	; STOCK
    115  2b87		       0c		      .byte.b	%00001100	; STOCK
    116  2b88
    117  2b88							;byte %00000000 ; STOCK
    118  2b88
    119  2b88		       3c		      .byte.b	%00111100	; STOCK
    120  2b89		       46		      .byte.b	%01000110	; STOCK
    121  2b8a		       06		      .byte.b	%00000110	; STOCK
    122  2b8b		       06		      .byte.b	%00000110	; STOCK
    123  2b8c		       3c		      .byte.b	%00111100	; STOCK
    124  2b8d		       60		      .byte.b	%01100000	; STOCK
    125  2b8e		       60		      .byte.b	%01100000	; STOCK
    126  2b8f		       7e		      .byte.b	%01111110	; STOCK
    127  2b90
    128  2b90							;byte %00000000 ; STOCK
    129  2b90
    130  2b90		       3c		      .byte.b	%00111100	; STOCK
    131  2b91		       66		      .byte.b	%01100110	; STOCK
    132  2b92		       66		      .byte.b	%01100110	; STOCK
    133  2b93		       66		      .byte.b	%01100110	; STOCK
    134  2b94		       7c		      .byte.b	%01111100	; STOCK
    135  2b95		       60		      .byte.b	%01100000	; STOCK
    136  2b96		       62		      .byte.b	%01100010	; STOCK
    137  2b97		       3c		      .byte.b	%00111100	; STOCK
    138  2b98
    139  2b98							;byte %00000000 ; STOCK
    140  2b98
    141  2b98		       30		      .byte.b	%00110000	; STOCK
    142  2b99		       30		      .byte.b	%00110000	; STOCK
    143  2b9a		       30		      .byte.b	%00110000	; STOCK
    144  2b9b		       18		      .byte.b	%00011000	; STOCK
    145  2b9c		       0c		      .byte.b	%00001100	; STOCK
    146  2b9d		       06		      .byte.b	%00000110	; STOCK
    147  2b9e		       42		      .byte.b	%01000010	; STOCK
    148  2b9f		       3e		      .byte.b	%00111110	; STOCK
    149  2ba0
    150  2ba0							;byte %00000000 ; STOCK
    151  2ba0
    152  2ba0		       3c		      .byte.b	%00111100	; STOCK
    153  2ba1		       66		      .byte.b	%01100110	; STOCK
    154  2ba2		       66		      .byte.b	%01100110	; STOCK
    155  2ba3		       66		      .byte.b	%01100110	; STOCK
    156  2ba4		       3c		      .byte.b	%00111100	; STOCK
    157  2ba5		       66		      .byte.b	%01100110	; STOCK
    158  2ba6		       66		      .byte.b	%01100110	; STOCK
    159  2ba7		       3c		      .byte.b	%00111100	; STOCK
    160  2ba8
    161  2ba8							;byte %00000000 ; STOCK
    162  2ba8
    163  2ba8		       3c		      .byte.b	%00111100	; STOCK
    164  2ba9		       46		      .byte.b	%01000110	; STOCK
    165  2baa		       06		      .byte.b	%00000110	; STOCK
    166  2bab		       3e		      .byte.b	%00111110	; STOCK
    167  2bac		       66		      .byte.b	%01100110	; STOCK
    168  2bad		       66		      .byte.b	%01100110	; STOCK
    169  2bae		       66		      .byte.b	%01100110	; STOCK
    170  2baf		       3c		      .byte.b	%00111100	; STOCK
    171  2bb0
    172  2bb0							;byte %00000000 ; STOCK
    173  2bb0
    174  2bb0				  -	      ifconst	fontcharsHEX
    175  2bb0				  -
    176  2bb0				  -	      .byte	%01100110	; STOCK
    177  2bb0				  -	      .byte	%01100110	; STOCK
    178  2bb0				  -	      .byte	%01100110	; STOCK
    179  2bb0				  -	      .byte	%01111110	; STOCK
    180  2bb0				  -	      .byte	%01100110	; STOCK
    181  2bb0				  -	      .byte	%01100110	; STOCK
    182  2bb0				  -	      .byte	%01100110	; STOCK
    183  2bb0				  -	      .byte	%00111100	; STOCK
    184  2bb0				  -
    185  2bb0				  -			;byte %00000000 ; STOCK
    186  2bb0				  -
    187  2bb0				  -	      .byte	%01111100	; STOCK
    188  2bb0				  -	      .byte	%01100110	; STOCK
    189  2bb0				  -	      .byte	%01100110	; STOCK
    190  2bb0				  -	      .byte	%01100110	; STOCK
    191  2bb0				  -	      .byte	%01111100	; STOCK
    192  2bb0				  -	      .byte	%01100110	; STOCK
    193  2bb0				  -	      .byte	%01100110	; STOCK
    194  2bb0				  -	      .byte	%01111100	; STOCK
    195  2bb0				  -
    196  2bb0				  -			;byte %00000000 ; STOCK
    197  2bb0				  -
    198  2bb0				  -	      .byte	%00111100	; STOCK
    199  2bb0				  -	      .byte	%01100110	; STOCK
    200  2bb0				  -	      .byte	%01100000	; STOCK
    201  2bb0				  -	      .byte	%01100000	; STOCK
    202  2bb0				  -	      .byte	%01100000	; STOCK
    203  2bb0				  -	      .byte	%01100000	; STOCK
    204  2bb0				  -	      .byte	%01100110	; STOCK
    205  2bb0				  -	      .byte	%00111100	; STOCK
    206  2bb0				  -
    207  2bb0				  -			;byte %00000000 ; STOCK
    208  2bb0				  -
    209  2bb0				  -	      .byte	%01111100	; STOCK
    210  2bb0				  -	      .byte	%01100110	; STOCK
    211  2bb0				  -	      .byte	%01100110	; STOCK
    212  2bb0				  -	      .byte	%01100110	; STOCK
    213  2bb0				  -	      .byte	%01100110	; STOCK
    214  2bb0				  -	      .byte	%01100110	; STOCK
    215  2bb0				  -	      .byte	%01100110	; STOCK
    216  2bb0				  -	      .byte	%01111100	; STOCK
    217  2bb0				  -
    218  2bb0				  -			;byte %00000000 ; STOCK
    219  2bb0				  -
    220  2bb0				  -	      .byte	%01111110	; STOCK
    221  2bb0				  -	      .byte	%01100000	; STOCK
    222  2bb0				  -	      .byte	%01100000	; STOCK
    223  2bb0				  -	      .byte	%01100000	; STOCK
    224  2bb0				  -	      .byte	%01111100	; STOCK
    225  2bb0				  -	      .byte	%01100000	; STOCK
    226  2bb0				  -	      .byte	%01100000	; STOCK
    227  2bb0				  -	      .byte	%01111110	; STOCK
    228  2bb0				  -
    229  2bb0				  -			;byte %00000000 ; STOCK
    230  2bb0				  -
    231  2bb0				  -	      .byte	%01100000	; STOCK
    232  2bb0				  -	      .byte	%01100000	; STOCK
    233  2bb0				  -	      .byte	%01100000	; STOCK
    234  2bb0				  -	      .byte	%01100000	; STOCK
    235  2bb0				  -	      .byte	%01111100	; STOCK
    236  2bb0				  -	      .byte	%01100000	; STOCK
    237  2bb0				  -	      .byte	%01100000	; STOCK
    238  2bb0				  -	      .byte	%01111110	; STOCK
    239  2bb0				  -
    240  2bb0				  -			;byte %00000000 ; STOCK
    241  2bb0				  -			;byte %00000000 ; STOCK
    242  2bb0				  -			;byte %00000000 ; STOCK
    243  2bb0				  -			;byte %00000000 ; STOCK
    244  2bb0					      endif		; fontcharsHEX 
    245  2bb0					      endif		; STOCK
    246  2bb0
    247  2bb0				  -	      if	fontstyle == NEWCENTURY
    248  2bb0				  -			;byte %00000000 ; NEWCENTURY
    249  2bb0				  -
    250  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    251  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    252  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    253  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    254  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    255  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    256  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    257  2bb0				  -	      .byte	%00011000	; NEWCENTURY
    258  2bb0				  -
    259  2bb0				  -			;byte %00000000 ; NEWCENTURY
    260  2bb0				  -
    261  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    262  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    263  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    264  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    265  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    266  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    267  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    268  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    269  2bb0				  -
    270  2bb0				  -			;byte %00000000 ; NEWCENTURY
    271  2bb0				  -
    272  2bb0				  -	      .byte	%01111110	; NEWCENTURY
    273  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    274  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    275  2bb0				  -	      .byte	%00100000	; NEWCENTURY
    276  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    277  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    278  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    279  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    280  2bb0				  -
    281  2bb0				  -			;byte %00000000 ; NEWCENTURY
    282  2bb0				  -
    283  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    284  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    285  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    286  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    287  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    288  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    289  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    290  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    291  2bb0				  -
    292  2bb0				  -			;byte %00000000 ; NEWCENTURY
    293  2bb0				  -
    294  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    295  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    296  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    297  2bb0				  -	      .byte	%00111110	; NEWCENTURY
    298  2bb0				  -	      .byte	%00100010	; NEWCENTURY
    299  2bb0				  -	      .byte	%00100010	; NEWCENTURY
    300  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    301  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    302  2bb0				  -
    303  2bb0				  -			;byte %00000000 ; NEWCENTURY
    304  2bb0				  -
    305  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    306  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    307  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    308  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    309  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    310  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    311  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    312  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    313  2bb0				  -
    314  2bb0				  -			;byte %00000000 ; NEWCENTURY
    315  2bb0				  -
    316  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    317  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    318  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    319  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    320  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    321  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    322  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    323  2bb0				  -	      .byte	%00110000	; NEWCENTURY
    324  2bb0				  -
    325  2bb0				  -			;byte %00000000 ; NEWCENTURY
    326  2bb0				  -
    327  2bb0				  -	      .byte	%00010000	; NEWCENTURY
    328  2bb0				  -	      .byte	%00010000	; NEWCENTURY
    329  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    330  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    331  2bb0				  -	      .byte	%00000100	; NEWCENTURY
    332  2bb0				  -	      .byte	%00000100	; NEWCENTURY
    333  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    334  2bb0				  -	      .byte	%00011110	; NEWCENTURY
    335  2bb0				  -
    336  2bb0				  -			;byte %00000000 ; NEWCENTURY
    337  2bb0				  -
    338  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    339  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    340  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    341  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    342  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    343  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    344  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    345  2bb0				  -	      .byte	%00011000	; NEWCENTURY
    346  2bb0				  -
    347  2bb0				  -			;byte %00000000 ; NEWCENTURY
    348  2bb0				  -
    349  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    350  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    351  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    352  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    353  2bb0				  -	      .byte	%00001110	; NEWCENTURY
    354  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    355  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    356  2bb0				  -	      .byte	%00001100	; NEWCENTURY
    357  2bb0				  -
    358  2bb0				  -	      ifconst	fontcharsHEX
    359  2bb0				  -
    360  2bb0				  -			;byte %00000000 ; NEWCENTURY
    361  2bb0				  -
    362  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    363  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    364  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    365  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    366  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    367  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    368  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    369  2bb0				  -	      .byte	%00111000	; NEWCENTURY
    370  2bb0				  -
    371  2bb0				  -			;byte %00000000 ; NEWCENTURY
    372  2bb0				  -
    373  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    374  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    375  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    376  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    377  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    378  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    379  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    380  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    381  2bb0				  -
    382  2bb0				  -			;byte %00000000 ; NEWCENTURY
    383  2bb0				  -
    384  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    385  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    386  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    387  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    388  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    389  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    390  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    391  2bb0				  -	      .byte	%00111000	; NEWCENTURY
    392  2bb0				  -
    393  2bb0				  -			;byte %00000000 ; NEWCENTURY
    394  2bb0				  -
    395  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    396  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    397  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    398  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    399  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    400  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    401  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    402  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    403  2bb0				  -
    404  2bb0				  -			;byte %00000000 ; NEWCENTURY
    405  2bb0				  -
    406  2bb0				  -	      .byte	%01111110	; NEWCENTURY
    407  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    408  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    409  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    410  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    411  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    412  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    413  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    414  2bb0				  -
    415  2bb0				  -			;byte %00000000 ; NEWCENTURY
    416  2bb0				  -
    417  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    418  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    419  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    420  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    421  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    422  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    423  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    424  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    425  2bb0				  -
    426  2bb0				  -			;byte %00000000 ; NEWCENTURY
    427  2bb0				  -			;byte %00000000 ; NEWCENTURY
    428  2bb0				  -			;byte %00000000 ; NEWCENTURY
    429  2bb0				  -			;byte %00000000 ; NEWCENTURY
    430  2bb0				  -
    431  2bb0				  -	      endif		; fontcharsHEX 
    432  2bb0					      endif		; NEWCENTURY
    433  2bb0
    434  2bb0				  -	      if	fontstyle == WHIMSEY
    435  2bb0				  -			;byte %00000000 ; WHIMSEY
    436  2bb0				  -
    437  2bb0				  -	      .byte	%00111100	; WHIMSEY
    438  2bb0				  -	      .byte	%01111110	; WHIMSEY
    439  2bb0				  -	      .byte	%01111110	; WHIMSEY
    440  2bb0				  -	      .byte	%01111110	; WHIMSEY
    441  2bb0				  -	      .byte	%01110110	; WHIMSEY
    442  2bb0				  -	      .byte	%01110110	; WHIMSEY
    443  2bb0				  -	      .byte	%01110110	; WHIMSEY
    444  2bb0				  -	      .byte	%00111100	; WHIMSEY
    445  2bb0				  -
    446  2bb0				  -			;byte %00000000 ; WHIMSEY
    447  2bb0				  -
    448  2bb0				  -	      .byte	%01111110	; WHIMSEY
    449  2bb0				  -	      .byte	%01111110	; WHIMSEY
    450  2bb0				  -	      .byte	%01111110	; WHIMSEY
    451  2bb0				  -	      .byte	%00011000	; WHIMSEY
    452  2bb0				  -	      .byte	%00011000	; WHIMSEY
    453  2bb0				  -	      .byte	%00011000	; WHIMSEY
    454  2bb0				  -	      .byte	%01111000	; WHIMSEY
    455  2bb0				  -	      .byte	%00011000	; WHIMSEY
    456  2bb0				  -
    457  2bb0				  -			;byte %00000000 ; WHIMSEY
    458  2bb0				  -
    459  2bb0				  -	      .byte	%01111110	; WHIMSEY
    460  2bb0				  -	      .byte	%01111110	; WHIMSEY
    461  2bb0				  -	      .byte	%01111110	; WHIMSEY
    462  2bb0				  -	      .byte	%01111000	; WHIMSEY
    463  2bb0				  -	      .byte	%00111100	; WHIMSEY
    464  2bb0				  -	      .byte	%00001110	; WHIMSEY
    465  2bb0				  -	      .byte	%01100110	; WHIMSEY
    466  2bb0				  -	      .byte	%00111100	; WHIMSEY
    467  2bb0				  -
    468  2bb0				  -			;byte %00000000 ; WHIMSEY
    469  2bb0				  -
    470  2bb0				  -	      .byte	%00111100	; WHIMSEY
    471  2bb0				  -	      .byte	%01111110	; WHIMSEY
    472  2bb0				  -	      .byte	%01111110	; WHIMSEY
    473  2bb0				  -	      .byte	%01101110	; WHIMSEY
    474  2bb0				  -	      .byte	%00001110	; WHIMSEY
    475  2bb0				  -	      .byte	%00111100	; WHIMSEY
    476  2bb0				  -	      .byte	%00011100	; WHIMSEY
    477  2bb0				  -	      .byte	%01111110	; WHIMSEY
    478  2bb0				  -
    479  2bb0				  -			;byte %00000000 ; WHIMSEY
    480  2bb0				  -
    481  2bb0				  -	      .byte	%00011100	; WHIMSEY
    482  2bb0				  -	      .byte	%00011100	; WHIMSEY
    483  2bb0				  -	      .byte	%01111110	; WHIMSEY
    484  2bb0				  -	      .byte	%01011100	; WHIMSEY
    485  2bb0				  -	      .byte	%01011100	; WHIMSEY
    486  2bb0				  -	      .byte	%00011100	; WHIMSEY
    487  2bb0				  -	      .byte	%00011100	; WHIMSEY
    488  2bb0				  -	      .byte	%00011100	; WHIMSEY
    489  2bb0				  -
    490  2bb0				  -			;byte %00000000 ; WHIMSEY
    491  2bb0				  -
    492  2bb0				  -	      .byte	%00111100	; WHIMSEY
    493  2bb0				  -	      .byte	%01111110	; WHIMSEY
    494  2bb0				  -	      .byte	%01111110	; WHIMSEY
    495  2bb0				  -	      .byte	%01101110	; WHIMSEY
    496  2bb0				  -	      .byte	%00001110	; WHIMSEY
    497  2bb0				  -	      .byte	%01111100	; WHIMSEY
    498  2bb0				  -	      .byte	%01110000	; WHIMSEY
    499  2bb0				  -	      .byte	%01111110	; WHIMSEY
    500  2bb0				  -
    501  2bb0				  -			;byte %00000000 ; WHIMSEY
    502  2bb0				  -
    503  2bb0				  -	      .byte	%00111100	; WHIMSEY
    504  2bb0				  -	      .byte	%01111110	; WHIMSEY
    505  2bb0				  -	      .byte	%01111110	; WHIMSEY
    506  2bb0				  -	      .byte	%01110110	; WHIMSEY
    507  2bb0				  -	      .byte	%01110110	; WHIMSEY
    508  2bb0				  -	      .byte	%01111100	; WHIMSEY
    509  2bb0				  -	      .byte	%01110000	; WHIMSEY
    510  2bb0				  -	      .byte	%00111110	; WHIMSEY
    511  2bb0				  -
    512  2bb0				  -			;byte %00000000 ; WHIMSEY
    513  2bb0				  -
    514  2bb0				  -	      .byte	%01111000	; WHIMSEY
    515  2bb0				  -	      .byte	%01111000	; WHIMSEY
    516  2bb0				  -	      .byte	%01111000	; WHIMSEY
    517  2bb0				  -	      .byte	%00111100	; WHIMSEY
    518  2bb0				  -	      .byte	%00011100	; WHIMSEY
    519  2bb0				  -	      .byte	%00001110	; WHIMSEY
    520  2bb0				  -	      .byte	%00001110	; WHIMSEY
    521  2bb0				  -	      .byte	%01111110	; WHIMSEY
    522  2bb0				  -
    523  2bb0				  -			;byte %00000000 ; WHIMSEY
    524  2bb0				  -
    525  2bb0				  -	      .byte	%00111100	; WHIMSEY
    526  2bb0				  -	      .byte	%01111110	; WHIMSEY
    527  2bb0				  -	      .byte	%01111110	; WHIMSEY
    528  2bb0				  -	      .byte	%01110110	; WHIMSEY
    529  2bb0				  -	      .byte	%01110110	; WHIMSEY
    530  2bb0				  -	      .byte	%00111100	; WHIMSEY
    531  2bb0				  -	      .byte	%01110110	; WHIMSEY
    532  2bb0				  -	      .byte	%00111100	; WHIMSEY
    533  2bb0				  -
    534  2bb0				  -			;byte %00000000 ; WHIMSEY
    535  2bb0				  -
    536  2bb0				  -	      .byte	%00111100	; WHIMSEY
    537  2bb0				  -	      .byte	%01111110	; WHIMSEY
    538  2bb0				  -	      .byte	%01111110	; WHIMSEY
    539  2bb0				  -	      .byte	%01110110	; WHIMSEY
    540  2bb0				  -	      .byte	%00000110	; WHIMSEY
    541  2bb0				  -	      .byte	%00111110	; WHIMSEY
    542  2bb0				  -	      .byte	%01110110	; WHIMSEY
    543  2bb0				  -	      .byte	%00111100	; WHIMSEY
    544  2bb0				  -
    545  2bb0				  -	      ifconst	fontcharsHEX
    546  2bb0				  -
    547  2bb0				  -			;byte %00000000 ; WHIMSEY
    548  2bb0				  -
    549  2bb0				  -	      .byte	%01110110	; WHIMSEY
    550  2bb0				  -	      .byte	%01110110	; WHIMSEY
    551  2bb0				  -	      .byte	%01111110	; WHIMSEY
    552  2bb0				  -	      .byte	%01111110	; WHIMSEY
    553  2bb0				  -	      .byte	%01111110	; WHIMSEY
    554  2bb0				  -	      .byte	%01110110	; WHIMSEY
    555  2bb0				  -	      .byte	%01110110	; WHIMSEY
    556  2bb0				  -	      .byte	%00111100	; WHIMSEY
    557  2bb0				  -
    558  2bb0				  -			;byte %00000000 ; WHIMSEY
    559  2bb0				  -
    560  2bb0				  -	      .byte	%01111100	; WHIMSEY
    561  2bb0				  -	      .byte	%01111110	; WHIMSEY
    562  2bb0				  -	      .byte	%01111110	; WHIMSEY
    563  2bb0				  -	      .byte	%01110110	; WHIMSEY
    564  2bb0				  -	      .byte	%01110110	; WHIMSEY
    565  2bb0				  -	      .byte	%01111100	; WHIMSEY
    566  2bb0				  -	      .byte	%01110110	; WHIMSEY
    567  2bb0				  -	      .byte	%01111100	; WHIMSEY
    568  2bb0				  -
    569  2bb0				  -			;byte %00000000 ; WHIMSEY
    570  2bb0				  -
    571  2bb0				  -	      .byte	%00111100	; WHIMSEY
    572  2bb0				  -	      .byte	%01111110	; WHIMSEY
    573  2bb0				  -	      .byte	%01111110	; WHIMSEY
    574  2bb0				  -	      .byte	%01110110	; WHIMSEY
    575  2bb0				  -	      .byte	%01110000	; WHIMSEY
    576  2bb0				  -	      .byte	%01110000	; WHIMSEY
    577  2bb0				  -	      .byte	%01110110	; WHIMSEY
    578  2bb0				  -	      .byte	%00111100	; WHIMSEY
    579  2bb0				  -
    580  2bb0				  -			;byte %00000000 ; WHIMSEY
    581  2bb0				  -
    582  2bb0				  -	      .byte	%01111100	; WHIMSEY
    583  2bb0				  -	      .byte	%01111110	; WHIMSEY
    584  2bb0				  -	      .byte	%01111110	; WHIMSEY
    585  2bb0				  -	      .byte	%01111110	; WHIMSEY
    586  2bb0				  -	      .byte	%01110110	; WHIMSEY
    587  2bb0				  -	      .byte	%01110110	; WHIMSEY
    588  2bb0				  -	      .byte	%01110110	; WHIMSEY
    589  2bb0				  -	      .byte	%01111100	; WHIMSEY
    590  2bb0				  -
    591  2bb0				  -			;byte %00000000 ; WHIMSEY
    592  2bb0				  -
    593  2bb0				  -	      .byte	%01111110	; WHIMSEY
    594  2bb0				  -	      .byte	%01111110	; WHIMSEY
    595  2bb0				  -	      .byte	%01111110	; WHIMSEY
    596  2bb0				  -	      .byte	%01110000	; WHIMSEY
    597  2bb0				  -	      .byte	%01110000	; WHIMSEY
    598  2bb0				  -	      .byte	%01111100	; WHIMSEY
    599  2bb0				  -	      .byte	%01110000	; WHIMSEY
    600  2bb0				  -	      .byte	%01111100	; WHIMSEY
    601  2bb0				  -
    602  2bb0				  -			;byte %00000000 ; WHIMSEY
    603  2bb0				  -
    604  2bb0				  -	      .byte	%01110000	; WHIMSEY
    605  2bb0				  -	      .byte	%01110000	; WHIMSEY
    606  2bb0				  -	      .byte	%01110000	; WHIMSEY
    607  2bb0				  -	      .byte	%01110000	; WHIMSEY
    608  2bb0				  -	      .byte	%01110000	; WHIMSEY
    609  2bb0				  -	      .byte	%01111100	; WHIMSEY
    610  2bb0				  -	      .byte	%01110000	; WHIMSEY
    611  2bb0				  -	      .byte	%01111100	; WHIMSEY
    612  2bb0				  -
    613  2bb0				  -			;byte %00000000 ; WHIMSEY
    614  2bb0				  -			;byte %00000000 ; WHIMSEY
    615  2bb0				  -			;byte %00000000 ; WHIMSEY
    616  2bb0				  -			;byte %00000000 ; WHIMSEY
    617  2bb0				  -
    618  2bb0				  -	      endif		; fontcharsHEX
    619  2bb0					      endif		; WHIMSEY
    620  2bb0
    621  2bb0				  -	      if	fontstyle == ALARMCLOCK
    622  2bb0				  -
    623  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    624  2bb0				  -
    625  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    626  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    627  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    628  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    629  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    630  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    631  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    632  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    633  2bb0				  -
    634  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    635  2bb0				  -
    636  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    637  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    638  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    639  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    640  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    641  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    642  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    643  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    644  2bb0				  -
    645  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    646  2bb0				  -
    647  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    648  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    649  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    650  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    651  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    652  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    653  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    654  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    655  2bb0				  -
    656  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    657  2bb0				  -
    658  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    659  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    660  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    661  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    662  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    663  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    664  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    665  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    666  2bb0				  -
    667  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    668  2bb0				  -
    669  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    670  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    671  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    672  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    673  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    674  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    675  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    676  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    677  2bb0				  -
    678  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    679  2bb0				  -
    680  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    681  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    682  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    683  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    684  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    685  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    686  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    687  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    688  2bb0				  -
    689  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    690  2bb0				  -
    691  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    692  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    693  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    694  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    695  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    696  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    697  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    698  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    699  2bb0				  -
    700  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    701  2bb0				  -
    702  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    703  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    704  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    705  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    706  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    707  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    708  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    709  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    710  2bb0				  -
    711  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    712  2bb0				  -
    713  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    714  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    715  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    716  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    717  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    718  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    719  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    720  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    721  2bb0				  -
    722  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    723  2bb0				  -
    724  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    725  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    726  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    727  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    728  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    729  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    730  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    731  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    732  2bb0				  -
    733  2bb0				  -
    734  2bb0				  -	      ifconst	fontcharsHEX
    735  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    736  2bb0				  -
    737  2bb0				  -
    738  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    739  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    740  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    741  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    742  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    743  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    744  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    745  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    746  2bb0				  -
    747  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    748  2bb0				  -
    749  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    750  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    751  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    752  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    753  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    754  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    755  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    756  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    757  2bb0				  -
    758  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    759  2bb0				  -
    760  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    761  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    762  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    763  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    764  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    765  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    766  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    767  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    768  2bb0				  -
    769  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    770  2bb0				  -
    771  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    772  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    773  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    774  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    775  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    776  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    777  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    778  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    779  2bb0				  -
    780  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    781  2bb0				  -
    782  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    783  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    784  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    785  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    786  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    787  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    788  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    789  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    790  2bb0				  -
    791  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    792  2bb0				  -
    793  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    794  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    795  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    796  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    797  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    798  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    799  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    800  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    801  2bb0				  -
    802  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    803  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    804  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    805  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    806  2bb0				  -
    807  2bb0				  -	      endif		; fontcharsHEX
    808  2bb0					      endif		; ALARMCLOCK
    809  2bb0
    810  2bb0				  -	      if	fontstyle == HANDWRITTEN
    811  2bb0				  -
    812  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    813  2bb0				  -
    814  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    815  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    816  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    817  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    818  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    819  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    820  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    821  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    822  2bb0				  -
    823  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    824  2bb0				  -
    825  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    826  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    827  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    828  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    829  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    830  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    831  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    832  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    833  2bb0				  -
    834  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    835  2bb0				  -
    836  2bb0				  -	      .byte	%01110000	; HANDWRITTEN
    837  2bb0				  -	      .byte	%01001100	; HANDWRITTEN
    838  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    839  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    840  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    841  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    842  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    843  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    844  2bb0				  -
    845  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    846  2bb0				  -
    847  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    848  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    849  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    850  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    851  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    852  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    853  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    854  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    855  2bb0				  -
    856  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    857  2bb0				  -
    858  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    859  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    860  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    861  2bb0				  -	      .byte	%01111000	; HANDWRITTEN
    862  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    863  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    864  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    865  2bb0				  -	      .byte	%00000010	; HANDWRITTEN
    866  2bb0				  -
    867  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    868  2bb0				  -
    869  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    870  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    871  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    872  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    873  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    874  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    875  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    876  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    877  2bb0				  -
    878  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    879  2bb0				  -
    880  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    881  2bb0				  -	      .byte	%00101000	; HANDWRITTEN
    882  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    883  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    884  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    885  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    886  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    887  2bb0				  -	      .byte	%00000110	; HANDWRITTEN
    888  2bb0				  -
    889  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    890  2bb0				  -
    891  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    892  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    893  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    894  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    895  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    896  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    897  2bb0				  -	      .byte	%00110010	; HANDWRITTEN
    898  2bb0				  -	      .byte	%00001110	; HANDWRITTEN
    899  2bb0				  -
    900  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    901  2bb0				  -
    902  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    903  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    904  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    905  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    906  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    907  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    908  2bb0				  -	      .byte	%00001010	; HANDWRITTEN
    909  2bb0				  -	      .byte	%00000110	; HANDWRITTEN
    910  2bb0				  -
    911  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    912  2bb0				  -
    913  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    914  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    915  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    916  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    917  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    918  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    919  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    920  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    921  2bb0				  -
    922  2bb0				  -	      ifconst	fontcharsHEX
    923  2bb0				  -
    924  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    925  2bb0				  -
    926  2bb0				  -	      .byte	%00110110	; HANDWRITTEN
    927  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    928  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    929  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    930  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    931  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    932  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    933  2bb0				  -	      .byte	%00001110	; HANDWRITTEN
    934  2bb0				  -
    935  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    936  2bb0				  -
    937  2bb0				  -	      .byte	%11110000	; HANDWRITTEN
    938  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    939  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    940  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    941  2bb0				  -	      .byte	%00111100	; HANDWRITTEN
    942  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    943  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    944  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    945  2bb0				  -
    946  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    947  2bb0				  -
    948  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    949  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    950  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    951  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    952  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    953  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    954  2bb0				  -	      .byte	%00010100	; HANDWRITTEN
    955  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    956  2bb0				  -
    957  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    958  2bb0				  -
    959  2bb0				  -	      .byte	%01111000	; HANDWRITTEN
    960  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    961  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    962  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    963  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    964  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    965  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    966  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    967  2bb0				  -
    968  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    969  2bb0				  -
    970  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    971  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    972  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    973  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    974  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    975  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    976  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    977  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    978  2bb0				  -
    979  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    980  2bb0				  -
    981  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    982  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    983  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    984  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    985  2bb0				  -	      .byte	%00111000	; HANDWRITTEN
    986  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    987  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    988  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    989  2bb0				  -
    990  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    991  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    992  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    993  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    994  2bb0				  -
    995  2bb0				  -	      endif		; fontcharsHEX
    996  2bb0					      endif		; HANDWRITTEN
    997  2bb0
    998  2bb0				  -	      if	fontstyle == INTERRUPTED
    999  2bb0				  -
   1000  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1001  2bb0				  -
   1002  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1003  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1004  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1005  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1006  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1007  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1008  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1009  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1010  2bb0				  -
   1011  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1012  2bb0				  -
   1013  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1014  2bb0				  -	      .byte	%00000000	; INTERRUPTED
   1015  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1016  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1017  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1018  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1019  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1020  2bb0				  -	      .byte	%00111000	; INTERRUPTED
   1021  2bb0				  -
   1022  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1023  2bb0				  -
   1024  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1025  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1026  2bb0				  -	      .byte	%00110000	; INTERRUPTED
   1027  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1028  2bb0				  -	      .byte	%00001100	; INTERRUPTED
   1029  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1030  2bb0				  -	      .byte	%01000110	; INTERRUPTED
   1031  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1032  2bb0				  -
   1033  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1034  2bb0				  -
   1035  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1036  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1037  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1038  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1039  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1040  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1041  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1042  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1043  2bb0				  -
   1044  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1045  2bb0				  -
   1046  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1047  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1048  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1049  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1050  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1051  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1052  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1053  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1054  2bb0				  -
   1055  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1056  2bb0				  -
   1057  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1058  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1059  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1060  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1061  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1062  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1063  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1064  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1065  2bb0				  -
   1066  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1067  2bb0				  -
   1068  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1069  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1070  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1071  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1072  2bb0				  -	      .byte	%01101100	; INTERRUPTED
   1073  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1074  2bb0				  -	      .byte	%00110000	; INTERRUPTED
   1075  2bb0				  -	      .byte	%00011100	; INTERRUPTED
   1076  2bb0				  -
   1077  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1078  2bb0				  -
   1079  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1080  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1081  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1082  2bb0				  -	      .byte	%00011100	; INTERRUPTED
   1083  2bb0				  -	      .byte	%00001110	; INTERRUPTED
   1084  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1085  2bb0				  -	      .byte	%00000000	; INTERRUPTED
   1086  2bb0				  -	      .byte	%01111110	; INTERRUPTED
   1087  2bb0				  -
   1088  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1089  2bb0				  -
   1090  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1091  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1092  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1093  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1094  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1095  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1096  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1097  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1098  2bb0				  -
   1099  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1100  2bb0				  -
   1101  2bb0				  -	      .byte	%00111000	; INTERRUPTED
   1102  2bb0				  -	      .byte	%00001100	; INTERRUPTED
   1103  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1104  2bb0				  -	      .byte	%00110110	; INTERRUPTED
   1105  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1106  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1107  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1108  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1109  2bb0				  -
   1110  2bb0				  -	      ifconst	fontcharsHEX
   1111  2bb0				  -
   1112  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1113  2bb0				  -
   1114  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1115  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1116  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1117  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1118  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1119  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1120  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1121  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1122  2bb0				  -
   1123  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1124  2bb0				  -
   1125  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1126  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1127  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1128  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1129  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1130  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1131  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1132  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1133  2bb0				  -
   1134  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1135  2bb0				  -
   1136  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1137  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1138  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1139  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1140  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1141  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1142  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1143  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1144  2bb0				  -
   1145  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1146  2bb0				  -
   1147  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1148  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1149  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1150  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1151  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1152  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1153  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1154  2bb0				  -	      .byte	%01101100	; INTERRUPTED
   1155  2bb0				  -
   1156  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1157  2bb0				  -
   1158  2bb0				  -	      .byte	%01111110	; INTERRUPTED
   1159  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1160  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1161  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1162  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1163  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1164  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1165  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1166  2bb0				  -
   1167  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1168  2bb0				  -
   1169  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1170  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1171  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1172  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1173  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1174  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1175  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1176  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1177  2bb0				  -
   1178  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1179  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1180  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1181  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1182  2bb0				  -
   1183  2bb0				  -	      endif		; fontcharsHEX
   1184  2bb0					      endif		; INTERRUPTED
   1185  2bb0
   1186  2bb0
   1187  2bb0				  -	      if	fontstyle == TINY
   1188  2bb0				  -
   1189  2bb0				  -			;byte %00000000 ; TINY
   1190  2bb0				  -
   1191  2bb0				  -	      .byte	%00000000	; TINY
   1192  2bb0				  -	      .byte	%00111000	; TINY
   1193  2bb0				  -	      .byte	%00101000	; TINY
   1194  2bb0				  -	      .byte	%00101000	; TINY
   1195  2bb0				  -	      .byte	%00101000	; TINY
   1196  2bb0				  -	      .byte	%00111000	; TINY
   1197  2bb0				  -	      .byte	%00000000	; TINY
   1198  2bb0				  -	      .byte	%00000000	; TINY
   1199  2bb0				  -
   1200  2bb0				  -			;byte %00000000 ; TINY
   1201  2bb0				  -
   1202  2bb0				  -	      .byte	%00000000	; TINY
   1203  2bb0				  -	      .byte	%00010000	; TINY
   1204  2bb0				  -	      .byte	%00010000	; TINY
   1205  2bb0				  -	      .byte	%00010000	; TINY
   1206  2bb0				  -	      .byte	%00010000	; TINY
   1207  2bb0				  -	      .byte	%00010000	; TINY
   1208  2bb0				  -	      .byte	%00000000	; TINY
   1209  2bb0				  -	      .byte	%00000000	; TINY
   1210  2bb0				  -
   1211  2bb0				  -			;byte %00000000 ; TINY
   1212  2bb0				  -
   1213  2bb0				  -	      .byte	%00000000	; TINY
   1214  2bb0				  -	      .byte	%00111000	; TINY
   1215  2bb0				  -	      .byte	%00100000	; TINY
   1216  2bb0				  -	      .byte	%00111000	; TINY
   1217  2bb0				  -	      .byte	%00001000	; TINY
   1218  2bb0				  -	      .byte	%00111000	; TINY
   1219  2bb0				  -	      .byte	%00000000	; TINY
   1220  2bb0				  -	      .byte	%00000000	; TINY
   1221  2bb0				  -
   1222  2bb0				  -			;byte %00000000 ; TINY
   1223  2bb0				  -
   1224  2bb0				  -	      .byte	%00000000	; TINY
   1225  2bb0				  -	      .byte	%00111000	; TINY
   1226  2bb0				  -	      .byte	%00001000	; TINY
   1227  2bb0				  -	      .byte	%00111000	; TINY
   1228  2bb0				  -	      .byte	%00001000	; TINY
   1229  2bb0				  -	      .byte	%00111000	; TINY
   1230  2bb0				  -	      .byte	%00000000	; TINY
   1231  2bb0				  -	      .byte	%00000000	; TINY
   1232  2bb0				  -
   1233  2bb0				  -			;byte %00000000 ; TINY
   1234  2bb0				  -
   1235  2bb0				  -	      .byte	%00000000	; TINY
   1236  2bb0				  -	      .byte	%00001000	; TINY
   1237  2bb0				  -	      .byte	%00001000	; TINY
   1238  2bb0				  -	      .byte	%00111000	; TINY
   1239  2bb0				  -	      .byte	%00101000	; TINY
   1240  2bb0				  -	      .byte	%00101000	; TINY
   1241  2bb0				  -	      .byte	%00000000	; TINY
   1242  2bb0				  -	      .byte	%00000000	; TINY
   1243  2bb0				  -
   1244  2bb0				  -			;byte %00000000 ; TINY
   1245  2bb0				  -
   1246  2bb0				  -	      .byte	%00000000	; TINY
   1247  2bb0				  -	      .byte	%00111000	; TINY
   1248  2bb0				  -	      .byte	%00001000	; TINY
   1249  2bb0				  -	      .byte	%00111000	; TINY
   1250  2bb0				  -	      .byte	%00100000	; TINY
   1251  2bb0				  -	      .byte	%00111000	; TINY
   1252  2bb0				  -	      .byte	%00000000	; TINY
   1253  2bb0				  -	      .byte	%00000000	; TINY
   1254  2bb0				  -
   1255  2bb0				  -			;byte %00000000 ; TINY
   1256  2bb0				  -
   1257  2bb0				  -	      .byte	%00000000	; TINY
   1258  2bb0				  -	      .byte	%00111000	; TINY
   1259  2bb0				  -	      .byte	%00101000	; TINY
   1260  2bb0				  -	      .byte	%00111000	; TINY
   1261  2bb0				  -	      .byte	%00100000	; TINY
   1262  2bb0				  -	      .byte	%00111000	; TINY
   1263  2bb0				  -	      .byte	%00000000	; TINY
   1264  2bb0				  -	      .byte	%00000000	; TINY
   1265  2bb0				  -
   1266  2bb0				  -			;byte %00000000 ; TINY
   1267  2bb0				  -
   1268  2bb0				  -	      .byte	%00000000	; TINY
   1269  2bb0				  -	      .byte	%00001000	; TINY
   1270  2bb0				  -	      .byte	%00001000	; TINY
   1271  2bb0				  -	      .byte	%00001000	; TINY
   1272  2bb0				  -	      .byte	%00001000	; TINY
   1273  2bb0				  -	      .byte	%00111000	; TINY
   1274  2bb0				  -	      .byte	%00000000	; TINY
   1275  2bb0				  -	      .byte	%00000000	; TINY
   1276  2bb0				  -
   1277  2bb0				  -			;byte %00000000 ; TINY
   1278  2bb0				  -
   1279  2bb0				  -	      .byte	%00000000	; TINY
   1280  2bb0				  -	      .byte	%00111000	; TINY
   1281  2bb0				  -	      .byte	%00101000	; TINY
   1282  2bb0				  -	      .byte	%00111000	; TINY
   1283  2bb0				  -	      .byte	%00101000	; TINY
   1284  2bb0				  -	      .byte	%00111000	; TINY
   1285  2bb0				  -	      .byte	%00000000	; TINY
   1286  2bb0				  -	      .byte	%00000000	; TINY
   1287  2bb0				  -
   1288  2bb0				  -			;byte %00000000 ; TINY
   1289  2bb0				  -
   1290  2bb0				  -	      .byte	%00000000	; TINY
   1291  2bb0				  -	      .byte	%00001000	; TINY
   1292  2bb0				  -	      .byte	%00001000	; TINY
   1293  2bb0				  -	      .byte	%00111000	; TINY
   1294  2bb0				  -	      .byte	%00101000	; TINY
   1295  2bb0				  -	      .byte	%00111000	; TINY
   1296  2bb0				  -	      .byte	%00000000	; TINY
   1297  2bb0				  -	      .byte	%00000000	; TINY
   1298  2bb0				  -
   1299  2bb0				  -	      ifconst	fontcharsHEX
   1300  2bb0				  -
   1301  2bb0				  -			;byte %00000000 ; TINY
   1302  2bb0				  -
   1303  2bb0				  -	      .byte	%00000000	; TINY
   1304  2bb0				  -	      .byte	%00101000	; TINY
   1305  2bb0				  -	      .byte	%00101000	; TINY
   1306  2bb0				  -	      .byte	%00111000	; TINY
   1307  2bb0				  -	      .byte	%00101000	; TINY
   1308  2bb0				  -	      .byte	%00111000	; TINY
   1309  2bb0				  -	      .byte	%00000000	; TINY
   1310  2bb0				  -	      .byte	%00000000	; TINY
   1311  2bb0				  -
   1312  2bb0				  -			;byte %00000000 ; TINY
   1313  2bb0				  -
   1314  2bb0				  -	      .byte	%00000000	; TINY
   1315  2bb0				  -	      .byte	%00110000	; TINY
   1316  2bb0				  -	      .byte	%00101000	; TINY
   1317  2bb0				  -	      .byte	%00110000	; TINY
   1318  2bb0				  -	      .byte	%00101000	; TINY
   1319  2bb0				  -	      .byte	%00110000	; TINY
   1320  2bb0				  -	      .byte	%00000000	; TINY
   1321  2bb0				  -	      .byte	%00000000	; TINY
   1322  2bb0				  -
   1323  2bb0				  -			;byte %00000000 ; TINY
   1324  2bb0				  -
   1325  2bb0				  -	      .byte	%00000000	; TINY
   1326  2bb0				  -	      .byte	%00111000	; TINY
   1327  2bb0				  -	      .byte	%00100000	; TINY
   1328  2bb0				  -	      .byte	%00100000	; TINY
   1329  2bb0				  -	      .byte	%00100000	; TINY
   1330  2bb0				  -	      .byte	%00111000	; TINY
   1331  2bb0				  -	      .byte	%00000000	; TINY
   1332  2bb0				  -	      .byte	%00000000	; TINY
   1333  2bb0				  -
   1334  2bb0				  -			;byte %00000000 ; TINY
   1335  2bb0				  -
   1336  2bb0				  -	      .byte	%00000000	; TINY
   1337  2bb0				  -	      .byte	%00110000	; TINY
   1338  2bb0				  -	      .byte	%00101000	; TINY
   1339  2bb0				  -	      .byte	%00101000	; TINY
   1340  2bb0				  -	      .byte	%00101000	; TINY
   1341  2bb0				  -	      .byte	%00110000	; TINY
   1342  2bb0				  -	      .byte	%00000000	; TINY
   1343  2bb0				  -	      .byte	%00000000	; TINY
   1344  2bb0				  -
   1345  2bb0				  -			;byte %00000000 ; TINY
   1346  2bb0				  -
   1347  2bb0				  -	      .byte	%00000000	; TINY
   1348  2bb0				  -	      .byte	%00111000	; TINY
   1349  2bb0				  -	      .byte	%00100000	; TINY
   1350  2bb0				  -	      .byte	%00111000	; TINY
   1351  2bb0				  -	      .byte	%00100000	; TINY
   1352  2bb0				  -	      .byte	%00111000	; TINY
   1353  2bb0				  -	      .byte	%00000000	; TINY
   1354  2bb0				  -	      .byte	%00000000	; TINY
   1355  2bb0				  -
   1356  2bb0				  -			;byte %00000000 ; TINY
   1357  2bb0				  -
   1358  2bb0				  -	      .byte	%00000000	; TINY
   1359  2bb0				  -	      .byte	%00100000	; TINY
   1360  2bb0				  -	      .byte	%00100000	; TINY
   1361  2bb0				  -	      .byte	%00111000	; TINY
   1362  2bb0				  -	      .byte	%00100000	; TINY
   1363  2bb0				  -	      .byte	%00111000	; TINY
   1364  2bb0				  -	      .byte	%00000000	; TINY
   1365  2bb0				  -	      .byte	%00000000	; TINY
   1366  2bb0				  -
   1367  2bb0				  -			;byte %00000000 ; TINY
   1368  2bb0				  -			;byte %00000000 ; TINY
   1369  2bb0				  -			;byte %00000000 ; TINY
   1370  2bb0				  -			;byte %00000000 ; TINY
   1371  2bb0				  -
   1372  2bb0				  -	      endif		; fontcharsHEX
   1373  2bb0					      endif		; TINY
   1374  2bb0
   1375  2bb0				  -	      if	fontstyle == RETROPUTER
   1376  2bb0				  -
   1377  2bb0				  -			;byte %00000000 ; RETROPUTER
   1378  2bb0				  -
   1379  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1380  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1381  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1382  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1383  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1384  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1385  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1386  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1387  2bb0				  -
   1388  2bb0				  -			;byte %00000000 ; RETROPUTER
   1389  2bb0				  -
   1390  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1391  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1392  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1393  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1394  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1395  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1396  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1397  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1398  2bb0				  -
   1399  2bb0				  -			;byte %00000000 ; RETROPUTER
   1400  2bb0				  -
   1401  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1402  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1403  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1404  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1405  2bb0				  -	      .byte	%00111110	; RETROPUTER
   1406  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1407  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1408  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1409  2bb0				  -
   1410  2bb0				  -			;byte %00000000 ; RETROPUTER
   1411  2bb0				  -
   1412  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1413  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1414  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1415  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1416  2bb0				  -	      .byte	%00111110	; RETROPUTER
   1417  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1418  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1419  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1420  2bb0				  -
   1421  2bb0				  -			;byte %00000000 ; RETROPUTER
   1422  2bb0				  -
   1423  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1424  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1425  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1426  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1427  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1428  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1429  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1430  2bb0				  -	      .byte	%00000100	; RETROPUTER
   1431  2bb0				  -
   1432  2bb0				  -			;byte %00000000 ; RETROPUTER
   1433  2bb0				  -
   1434  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1435  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1436  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1437  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1438  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1439  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1440  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1441  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1442  2bb0				  -
   1443  2bb0				  -			;byte %00000000 ; RETROPUTER
   1444  2bb0				  -
   1445  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1446  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1447  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1448  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1449  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1450  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1451  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1452  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1453  2bb0				  -
   1454  2bb0				  -			;byte %00000000 ; RETROPUTER
   1455  2bb0				  -
   1456  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1457  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1458  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1459  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1460  2bb0				  -	      .byte	%00000100	; RETROPUTER
   1461  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1462  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1463  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1464  2bb0				  -
   1465  2bb0				  -			;byte %00000000 ; RETROPUTER
   1466  2bb0				  -
   1467  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1468  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1469  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1470  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1471  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1472  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1473  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1474  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1475  2bb0				  -
   1476  2bb0				  -			;byte %00000000 ; RETROPUTER
   1477  2bb0				  -
   1478  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1479  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1480  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1481  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1482  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1483  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1484  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1485  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1486  2bb0				  -
   1487  2bb0				  -	      ifconst	fontcharsHEX
   1488  2bb0				  -
   1489  2bb0				  -			;byte %00000000  ; RETROPUTER
   1490  2bb0				  -
   1491  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1492  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1493  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1494  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1495  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1496  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1497  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1498  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1499  2bb0				  -
   1500  2bb0				  -			;byte %00000000 ; RETROPUTER
   1501  2bb0				  -
   1502  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1503  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1504  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1505  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1506  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1507  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1508  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1509  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1510  2bb0				  -
   1511  2bb0				  -			;byte %00000000 ; RETROPUTER
   1512  2bb0				  -
   1513  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1514  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1515  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1516  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1517  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1518  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1519  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1520  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1521  2bb0				  -
   1522  2bb0				  -			;byte %00000000 ; RETROPUTER
   1523  2bb0				  -
   1524  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1525  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1526  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1527  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1528  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1529  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1530  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1531  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1532  2bb0				  -
   1533  2bb0				  -			;byte %00000000 ; RETROPUTER
   1534  2bb0				  -
   1535  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1536  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1537  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1538  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1539  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1540  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1541  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1542  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1543  2bb0				  -
   1544  2bb0				  -			;byte %00000000 ; RETROPUTER
   1545  2bb0				  -
   1546  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1547  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1548  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1549  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1550  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1551  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1552  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1553  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1554  2bb0				  -
   1555  2bb0				  -			;byte %00000000 ; RETROPUTER
   1556  2bb0				  -			;byte %00000000 ; RETROPUTER
   1557  2bb0				  -			;byte %00000000 ; RETROPUTER
   1558  2bb0				  -			;byte %00000000 ; RETROPUTER
   1559  2bb0				  -
   1560  2bb0				  -	      endif		; fontcharsHEX
   1561  2bb0					      endif		; RETROPUTER
   1562  2bb0
   1563  2bb0				  -	      if	fontstyle == CURVES
   1564  2bb0				  -
   1565  2bb0				  -			;byte %00000000 ; CURVES
   1566  2bb0				  -
   1567  2bb0				  -	      .byte	%00111100	; CURVES
   1568  2bb0				  -	      .byte	%01111110	; CURVES
   1569  2bb0				  -	      .byte	%01100110	; CURVES
   1570  2bb0				  -	      .byte	%01100110	; CURVES
   1571  2bb0				  -	      .byte	%01100110	; CURVES
   1572  2bb0				  -	      .byte	%01100110	; CURVES
   1573  2bb0				  -	      .byte	%01111110	; CURVES
   1574  2bb0				  -	      .byte	%00111100	; CURVES
   1575  2bb0				  -
   1576  2bb0				  -			;byte %00000000 ; CURVES
   1577  2bb0				  -
   1578  2bb0				  -	      .byte	%00011000	; CURVES
   1579  2bb0				  -	      .byte	%00011000	; CURVES
   1580  2bb0				  -	      .byte	%00011000	; CURVES
   1581  2bb0				  -	      .byte	%00011000	; CURVES
   1582  2bb0				  -	      .byte	%00011000	; CURVES
   1583  2bb0				  -	      .byte	%00011000	; CURVES
   1584  2bb0				  -	      .byte	%01111000	; CURVES
   1585  2bb0				  -	      .byte	%01110000	; CURVES
   1586  2bb0				  -
   1587  2bb0				  -			;byte %00000000 ; CURVES
   1588  2bb0				  -
   1589  2bb0				  -	      .byte	%01111110	; CURVES
   1590  2bb0				  -	      .byte	%01111110	; CURVES
   1591  2bb0				  -	      .byte	%01100000	; CURVES
   1592  2bb0				  -	      .byte	%01111100	; CURVES
   1593  2bb0				  -	      .byte	%00111110	; CURVES
   1594  2bb0				  -	      .byte	%00000110	; CURVES
   1595  2bb0				  -	      .byte	%01111110	; CURVES
   1596  2bb0				  -	      .byte	%01111100	; CURVES
   1597  2bb0				  -
   1598  2bb0				  -			;byte %00000000 ; CURVES
   1599  2bb0				  -
   1600  2bb0				  -	      .byte	%01111100	; CURVES
   1601  2bb0				  -	      .byte	%01111110	; CURVES
   1602  2bb0				  -	      .byte	%00001110	; CURVES
   1603  2bb0				  -	      .byte	%00111100	; CURVES
   1604  2bb0				  -	      .byte	%00111100	; CURVES
   1605  2bb0				  -	      .byte	%00001110	; CURVES
   1606  2bb0				  -	      .byte	%01111110	; CURVES
   1607  2bb0				  -	      .byte	%01111100	; CURVES
   1608  2bb0				  -
   1609  2bb0				  -			;byte %00000000 ; CURVES
   1610  2bb0				  -
   1611  2bb0				  -	      .byte	%00000110	; CURVES
   1612  2bb0				  -	      .byte	%00000110	; CURVES
   1613  2bb0				  -	      .byte	%00111110	; CURVES
   1614  2bb0				  -	      .byte	%01111110	; CURVES
   1615  2bb0				  -	      .byte	%01100110	; CURVES
   1616  2bb0				  -	      .byte	%01100110	; CURVES
   1617  2bb0				  -	      .byte	%01100110	; CURVES
   1618  2bb0				  -	      .byte	%01100110	; CURVES
   1619  2bb0				  -
   1620  2bb0				  -			;byte %00000000 ; CURVES
   1621  2bb0				  -
   1622  2bb0				  -	      .byte	%01111100	; CURVES
   1623  2bb0				  -	      .byte	%01111110	; CURVES
   1624  2bb0				  -	      .byte	%00000110	; CURVES
   1625  2bb0				  -	      .byte	%01111110	; CURVES
   1626  2bb0				  -	      .byte	%01111100	; CURVES
   1627  2bb0				  -	      .byte	%01100000	; CURVES
   1628  2bb0				  -	      .byte	%01111110	; CURVES
   1629  2bb0				  -	      .byte	%01111110	; CURVES
   1630  2bb0				  -
   1631  2bb0				  -			;byte %00000000 ; CURVES
   1632  2bb0				  -
   1633  2bb0				  -	      .byte	%00111100	; CURVES
   1634  2bb0				  -	      .byte	%01111110	; CURVES
   1635  2bb0				  -	      .byte	%01100110	; CURVES
   1636  2bb0				  -	      .byte	%01111110	; CURVES
   1637  2bb0				  -	      .byte	%01111100	; CURVES
   1638  2bb0				  -	      .byte	%01100000	; CURVES
   1639  2bb0				  -	      .byte	%01111110	; CURVES
   1640  2bb0				  -	      .byte	%00111110	; CURVES
   1641  2bb0				  -
   1642  2bb0				  -			;byte %00000000 ; CURVES
   1643  2bb0				  -
   1644  2bb0				  -	      .byte	%00000110	; CURVES
   1645  2bb0				  -	      .byte	%00000110	; CURVES
   1646  2bb0				  -	      .byte	%00000110	; CURVES
   1647  2bb0				  -	      .byte	%00000110	; CURVES
   1648  2bb0				  -	      .byte	%00000110	; CURVES
   1649  2bb0				  -	      .byte	%01100110	; CURVES
   1650  2bb0				  -	      .byte	%01111110	; CURVES
   1651  2bb0				  -	      .byte	%00111100	; CURVES
   1652  2bb0				  -
   1653  2bb0				  -			;byte %00000000 ; CURVES
   1654  2bb0				  -
   1655  2bb0				  -	      .byte	%00111100	; CURVES
   1656  2bb0				  -	      .byte	%01111110	; CURVES
   1657  2bb0				  -	      .byte	%01100110	; CURVES
   1658  2bb0				  -	      .byte	%01111110	; CURVES
   1659  2bb0				  -	      .byte	%00111100	; CURVES
   1660  2bb0				  -	      .byte	%01100110	; CURVES
   1661  2bb0				  -	      .byte	%01111110	; CURVES
   1662  2bb0				  -	      .byte	%00111100	; CURVES
   1663  2bb0				  -
   1664  2bb0				  -			;byte %00000000 ; CURVES
   1665  2bb0				  -
   1666  2bb0				  -	      .byte	%01111100	; CURVES
   1667  2bb0				  -	      .byte	%01111110	; CURVES
   1668  2bb0				  -	      .byte	%00000110	; CURVES
   1669  2bb0				  -	      .byte	%00111110	; CURVES
   1670  2bb0				  -	      .byte	%01111110	; CURVES
   1671  2bb0				  -	      .byte	%01100110	; CURVES
   1672  2bb0				  -	      .byte	%01111110	; CURVES
   1673  2bb0				  -	      .byte	%00111100	; CURVES
   1674  2bb0				  -
   1675  2bb0				  -	      ifconst	fontcharsHEX
   1676  2bb0				  -
   1677  2bb0				  -			;byte %00000000 ; CURVES
   1678  2bb0				  -
   1679  2bb0				  -	      .byte	%01100110	; CURVES
   1680  2bb0				  -	      .byte	%01100110	; CURVES
   1681  2bb0				  -	      .byte	%01111110	; CURVES
   1682  2bb0				  -	      .byte	%01111110	; CURVES
   1683  2bb0				  -	      .byte	%01100110	; CURVES
   1684  2bb0				  -	      .byte	%01100110	; CURVES
   1685  2bb0				  -	      .byte	%01111110	; CURVES
   1686  2bb0				  -	      .byte	%00111100	; CURVES
   1687  2bb0				  -
   1688  2bb0				  -			;byte %00000000 ; CURVES
   1689  2bb0				  -
   1690  2bb0				  -	      .byte	%01111100	; CURVES
   1691  2bb0				  -	      .byte	%01111110	; CURVES
   1692  2bb0				  -	      .byte	%01100110	; CURVES
   1693  2bb0				  -	      .byte	%01111110	; CURVES
   1694  2bb0				  -	      .byte	%01111100	; CURVES
   1695  2bb0				  -	      .byte	%01100110	; CURVES
   1696  2bb0				  -	      .byte	%01111110	; CURVES
   1697  2bb0				  -	      .byte	%01111100	; CURVES
   1698  2bb0				  -
   1699  2bb0				  -			;byte %00000000 ; CURVES
   1700  2bb0				  -
   1701  2bb0				  -	      .byte	%00111110	; CURVES
   1702  2bb0				  -	      .byte	%01111110	; CURVES
   1703  2bb0				  -	      .byte	%01100000	; CURVES
   1704  2bb0				  -	      .byte	%01100000	; CURVES
   1705  2bb0				  -	      .byte	%01100000	; CURVES
   1706  2bb0				  -	      .byte	%01100000	; CURVES
   1707  2bb0				  -	      .byte	%01111110	; CURVES
   1708  2bb0				  -	      .byte	%00111110	; CURVES
   1709  2bb0				  -
   1710  2bb0				  -			;byte %00000000 ; CURVES
   1711  2bb0				  -
   1712  2bb0				  -	      .byte	%01111100	; CURVES
   1713  2bb0				  -	      .byte	%01111110	; CURVES
   1714  2bb0				  -	      .byte	%01100110	; CURVES
   1715  2bb0				  -	      .byte	%01100110	; CURVES
   1716  2bb0				  -	      .byte	%01100110	; CURVES
   1717  2bb0				  -	      .byte	%01100110	; CURVES
   1718  2bb0				  -	      .byte	%01111110	; CURVES
   1719  2bb0				  -	      .byte	%01111100	; CURVES
   1720  2bb0				  -
   1721  2bb0				  -			;byte %00000000 ; CURVES
   1722  2bb0				  -
   1723  2bb0				  -	      .byte	%00111110	; CURVES
   1724  2bb0				  -	      .byte	%01111110	; CURVES
   1725  2bb0				  -	      .byte	%01100000	; CURVES
   1726  2bb0				  -	      .byte	%01111100	; CURVES
   1727  2bb0				  -	      .byte	%01111100	; CURVES
   1728  2bb0				  -	      .byte	%01100000	; CURVES
   1729  2bb0				  -	      .byte	%01111110	; CURVES
   1730  2bb0				  -	      .byte	%00111110	; CURVES
   1731  2bb0				  -
   1732  2bb0				  -			;byte %00000000 ; CURVES
   1733  2bb0				  -
   1734  2bb0				  -	      .byte	%01100000	; CURVES
   1735  2bb0				  -	      .byte	%01100000	; CURVES
   1736  2bb0				  -	      .byte	%01100000	; CURVES
   1737  2bb0				  -	      .byte	%01111100	; CURVES
   1738  2bb0				  -	      .byte	%01111100	; CURVES
   1739  2bb0				  -	      .byte	%01100000	; CURVES
   1740  2bb0				  -	      .byte	%01111110	; CURVES
   1741  2bb0				  -	      .byte	%00111110	; CURVES
   1742  2bb0				  -
   1743  2bb0				  -			;byte %00000000 ; CURVES
   1744  2bb0				  -			;byte %00000000 ; CURVES
   1745  2bb0				  -			;byte %00000000 ; CURVES
   1746  2bb0				  -			;byte %00000000 ; CURVES
   1747  2bb0				  -
   1748  2bb0				  -	      endif		; fontcharsHEX 
   1749  2bb0					      endif		; CURVES
   1750  2bb0
   1751  2bb0
   1752  2bb0				  -	      if	fontstyle == HUSKY
   1753  2bb0				  -
   1754  2bb0				  -			;byte %00000000 ; HUSKY
   1755  2bb0				  -
   1756  2bb0				  -	      .byte	%01111100	; HUSKY
   1757  2bb0				  -	      .byte	%11111110	; HUSKY
   1758  2bb0				  -	      .byte	%11101110	; HUSKY
   1759  2bb0				  -	      .byte	%11101110	; HUSKY
   1760  2bb0				  -	      .byte	%11101110	; HUSKY
   1761  2bb0				  -	      .byte	%11101110	; HUSKY
   1762  2bb0				  -	      .byte	%11111110	; HUSKY
   1763  2bb0				  -	      .byte	%01111100	; HUSKY
   1764  2bb0				  -
   1765  2bb0				  -			;byte %00000000 ; HUSKY
   1766  2bb0				  -
   1767  2bb0				  -	      .byte	%00111000	; HUSKY
   1768  2bb0				  -	      .byte	%00111000	; HUSKY
   1769  2bb0				  -	      .byte	%00111000	; HUSKY
   1770  2bb0				  -	      .byte	%00111000	; HUSKY
   1771  2bb0				  -	      .byte	%00111000	; HUSKY
   1772  2bb0				  -	      .byte	%00111000	; HUSKY
   1773  2bb0				  -	      .byte	%00111000	; HUSKY
   1774  2bb0				  -	      .byte	%00111000	; HUSKY
   1775  2bb0				  -
   1776  2bb0				  -			;byte %00000000 ; HUSKY
   1777  2bb0				  -
   1778  2bb0				  -	      .byte	%11111110	; HUSKY
   1779  2bb0				  -	      .byte	%11111110	; HUSKY
   1780  2bb0				  -	      .byte	%11100000	; HUSKY
   1781  2bb0				  -	      .byte	%11111100	; HUSKY
   1782  2bb0				  -	      .byte	%01111110	; HUSKY
   1783  2bb0				  -	      .byte	%00001110	; HUSKY
   1784  2bb0				  -	      .byte	%11111110	; HUSKY
   1785  2bb0				  -	      .byte	%11111100	; HUSKY
   1786  2bb0				  -
   1787  2bb0				  -			;byte %00000000 ; HUSKY
   1788  2bb0				  -
   1789  2bb0				  -	      .byte	%11111100	; HUSKY
   1790  2bb0				  -	      .byte	%11111110	; HUSKY
   1791  2bb0				  -	      .byte	%00001110	; HUSKY
   1792  2bb0				  -	      .byte	%11111100	; HUSKY
   1793  2bb0				  -	      .byte	%11111100	; HUSKY
   1794  2bb0				  -	      .byte	%00001110	; HUSKY
   1795  2bb0				  -	      .byte	%11111110	; HUSKY
   1796  2bb0				  -	      .byte	%11111100	; HUSKY
   1797  2bb0				  -
   1798  2bb0				  -			;byte %00000000 ; HUSKY
   1799  2bb0				  -
   1800  2bb0				  -	      .byte	%00011100	; HUSKY
   1801  2bb0				  -	      .byte	%00011100	; HUSKY
   1802  2bb0				  -	      .byte	%11111110	; HUSKY
   1803  2bb0				  -	      .byte	%11111110	; HUSKY
   1804  2bb0				  -	      .byte	%11011100	; HUSKY
   1805  2bb0				  -	      .byte	%11011100	; HUSKY
   1806  2bb0				  -	      .byte	%00011100	; HUSKY
   1807  2bb0				  -	      .byte	%00011100	; HUSKY
   1808  2bb0				  -
   1809  2bb0				  -			;byte %00000000 ; HUSKY
   1810  2bb0				  -
   1811  2bb0				  -	      .byte	%11111100	; HUSKY
   1812  2bb0				  -	      .byte	%11111110	; HUSKY
   1813  2bb0				  -	      .byte	%00001110	; HUSKY
   1814  2bb0				  -	      .byte	%11111110	; HUSKY
   1815  2bb0				  -	      .byte	%11111100	; HUSKY
   1816  2bb0				  -	      .byte	%11100000	; HUSKY
   1817  2bb0				  -	      .byte	%11111110	; HUSKY
   1818  2bb0				  -	      .byte	%11111110	; HUSKY
   1819  2bb0				  -
   1820  2bb0				  -			;byte %00000000 ; HUSKY
   1821  2bb0				  -
   1822  2bb0				  -	      .byte	%01111100	; HUSKY
   1823  2bb0				  -	      .byte	%11111110	; HUSKY
   1824  2bb0				  -	      .byte	%11101110	; HUSKY
   1825  2bb0				  -	      .byte	%11111110	; HUSKY
   1826  2bb0				  -	      .byte	%11111100	; HUSKY
   1827  2bb0				  -	      .byte	%11100000	; HUSKY
   1828  2bb0				  -	      .byte	%11111110	; HUSKY
   1829  2bb0				  -	      .byte	%01111110	; HUSKY
   1830  2bb0				  -
   1831  2bb0				  -			;byte %00000000 ; HUSKY
   1832  2bb0				  -
   1833  2bb0				  -	      .byte	%00111000	; HUSKY
   1834  2bb0				  -	      .byte	%00111000	; HUSKY
   1835  2bb0				  -	      .byte	%00111000	; HUSKY
   1836  2bb0				  -	      .byte	%00111000	; HUSKY
   1837  2bb0				  -	      .byte	%00011100	; HUSKY
   1838  2bb0				  -	      .byte	%00001110	; HUSKY
   1839  2bb0				  -	      .byte	%11111110	; HUSKY
   1840  2bb0				  -	      .byte	%11111110	; HUSKY
   1841  2bb0				  -
   1842  2bb0				  -			;byte %00000000 ; HUSKY
   1843  2bb0				  -
   1844  2bb0				  -	      .byte	%01111100	; HUSKY
   1845  2bb0				  -	      .byte	%11111110	; HUSKY
   1846  2bb0				  -	      .byte	%11101110	; HUSKY
   1847  2bb0				  -	      .byte	%11111110	; HUSKY
   1848  2bb0				  -	      .byte	%01111100	; HUSKY
   1849  2bb0				  -	      .byte	%11101110	; HUSKY
   1850  2bb0				  -	      .byte	%11111110	; HUSKY
   1851  2bb0				  -	      .byte	%01111100	; HUSKY
   1852  2bb0				  -
   1853  2bb0				  -			;byte %00000000 ; HUSKY
   1854  2bb0				  -
   1855  2bb0				  -	      .byte	%11111100	; HUSKY
   1856  2bb0				  -	      .byte	%11111110	; HUSKY
   1857  2bb0				  -	      .byte	%00001110	; HUSKY
   1858  2bb0				  -	      .byte	%01111110	; HUSKY
   1859  2bb0				  -	      .byte	%11111110	; HUSKY
   1860  2bb0				  -	      .byte	%11101110	; HUSKY
   1861  2bb0				  -	      .byte	%11111110	; HUSKY
   1862  2bb0				  -	      .byte	%01111100	; HUSKY
   1863  2bb0				  -
   1864  2bb0				  -	      ifconst	fontcharsHEX
   1865  2bb0				  -
   1866  2bb0				  -			;byte %00000000 ; HUSKY
   1867  2bb0				  -
   1868  2bb0				  -	      .byte	%11101110	; HUSKY
   1869  2bb0				  -	      .byte	%11101110	; HUSKY
   1870  2bb0				  -	      .byte	%11111110	; HUSKY
   1871  2bb0				  -	      .byte	%11111110	; HUSKY
   1872  2bb0				  -	      .byte	%11101110	; HUSKY
   1873  2bb0				  -	      .byte	%11111110	; HUSKY
   1874  2bb0				  -	      .byte	%01111100	; HUSKY
   1875  2bb0				  -	      .byte	%00111000	; HUSKY
   1876  2bb0				  -
   1877  2bb0				  -			;byte %00000000 ; HUSKY
   1878  2bb0				  -
   1879  2bb0				  -	      .byte	%11111100	; HUSKY
   1880  2bb0				  -	      .byte	%11111110	; HUSKY
   1881  2bb0				  -	      .byte	%11101110	; HUSKY
   1882  2bb0				  -	      .byte	%11111110	; HUSKY
   1883  2bb0				  -	      .byte	%11111100	; HUSKY
   1884  2bb0				  -	      .byte	%11101110	; HUSKY
   1885  2bb0				  -	      .byte	%11111110	; HUSKY
   1886  2bb0				  -	      .byte	%11111100	; HUSKY
   1887  2bb0				  -
   1888  2bb0				  -			;byte %00000000 ; HUSKY
   1889  2bb0				  -
   1890  2bb0				  -	      .byte	%01111110	; HUSKY
   1891  2bb0				  -	      .byte	%11111110	; HUSKY
   1892  2bb0				  -	      .byte	%11110000	; HUSKY
   1893  2bb0				  -	      .byte	%11100000	; HUSKY
   1894  2bb0				  -	      .byte	%11100000	; HUSKY
   1895  2bb0				  -	      .byte	%11110000	; HUSKY
   1896  2bb0				  -	      .byte	%11111110	; HUSKY
   1897  2bb0				  -	      .byte	%01111110	; HUSKY
   1898  2bb0				  -
   1899  2bb0				  -			;byte %00000000 ; HUSKY
   1900  2bb0				  -
   1901  2bb0				  -	      .byte	%11111000	; HUSKY
   1902  2bb0				  -	      .byte	%11111100	; HUSKY
   1903  2bb0				  -	      .byte	%11111110	; HUSKY
   1904  2bb0				  -	      .byte	%11101110	; HUSKY
   1905  2bb0				  -	      .byte	%11101110	; HUSKY
   1906  2bb0				  -	      .byte	%11111110	; HUSKY
   1907  2bb0				  -	      .byte	%11111100	; HUSKY
   1908  2bb0				  -	      .byte	%11111000	; HUSKY
   1909  2bb0				  -
   1910  2bb0				  -			;byte %00000000 ; HUSKY
   1911  2bb0				  -
   1912  2bb0				  -	      .byte	%11111110	; HUSKY
   1913  2bb0				  -	      .byte	%11111110	; HUSKY
   1914  2bb0				  -	      .byte	%11100000	; HUSKY
   1915  2bb0				  -	      .byte	%11111110	; HUSKY
   1916  2bb0				  -	      .byte	%11111110	; HUSKY
   1917  2bb0				  -	      .byte	%11100000	; HUSKY
   1918  2bb0				  -	      .byte	%11111110	; HUSKY
   1919  2bb0				  -	      .byte	%11111110	; HUSKY
   1920  2bb0				  -
   1921  2bb0				  -			;byte %00000000 ; HUSKY
   1922  2bb0				  -
   1923  2bb0				  -	      .byte	%11100000	; HUSKY
   1924  2bb0				  -	      .byte	%11100000	; HUSKY
   1925  2bb0				  -	      .byte	%11100000	; HUSKY
   1926  2bb0				  -	      .byte	%11111110	; HUSKY
   1927  2bb0				  -	      .byte	%11111110	; HUSKY
   1928  2bb0				  -	      .byte	%11100000	; HUSKY
   1929  2bb0				  -	      .byte	%11111110	; HUSKY
   1930  2bb0				  -	      .byte	%11111110	; HUSKY
   1931  2bb0				  -
   1932  2bb0				  -			;byte %00000000 ; HUSKY
   1933  2bb0				  -			;byte %00000000 ; HUSKY
   1934  2bb0				  -			;byte %00000000 ; HUSKY
   1935  2bb0				  -			;byte %00000000 ; HUSKY
   1936  2bb0				  -
   1937  2bb0				  -	      endif		; fontcharsHEX 
   1938  2bb0					      endif		; HUSKY
   1939  2bb0
   1940  2bb0
   1941  2bb0				  -	      if	fontstyle == SNAKE
   1942  2bb0				  -
   1943  2bb0				  -			;byte %00000000 ; SNAKE
   1944  2bb0				  -
   1945  2bb0				  -	      .byte	%01111110	; SNAKE
   1946  2bb0				  -	      .byte	%01000010	; SNAKE
   1947  2bb0				  -	      .byte	%01000010	; SNAKE
   1948  2bb0				  -	      .byte	%01000010	; SNAKE
   1949  2bb0				  -	      .byte	%01000010	; SNAKE
   1950  2bb0				  -	      .byte	%01000010	; SNAKE
   1951  2bb0				  -	      .byte	%01000010	; SNAKE
   1952  2bb0				  -	      .byte	%01111110	; SNAKE
   1953  2bb0				  -
   1954  2bb0				  -			;byte %00000000 ; SNAKE
   1955  2bb0				  -
   1956  2bb0				  -	      .byte	%00111000	; SNAKE
   1957  2bb0				  -	      .byte	%00101000	; SNAKE
   1958  2bb0				  -	      .byte	%00001000	; SNAKE
   1959  2bb0				  -	      .byte	%00001000	; SNAKE
   1960  2bb0				  -	      .byte	%00001000	; SNAKE
   1961  2bb0				  -	      .byte	%00001000	; SNAKE
   1962  2bb0				  -	      .byte	%00001000	; SNAKE
   1963  2bb0				  -	      .byte	%00111000	; SNAKE
   1964  2bb0				  -
   1965  2bb0				  -			;byte %00000000 ; SNAKE
   1966  2bb0				  -
   1967  2bb0				  -	      .byte	%01111110	; SNAKE
   1968  2bb0				  -	      .byte	%01000010	; SNAKE
   1969  2bb0				  -	      .byte	%01000110	; SNAKE
   1970  2bb0				  -	      .byte	%01000000	; SNAKE
   1971  2bb0				  -	      .byte	%01111110	; SNAKE
   1972  2bb0				  -	      .byte	%00000010	; SNAKE
   1973  2bb0				  -	      .byte	%01000010	; SNAKE
   1974  2bb0				  -	      .byte	%01111110	; SNAKE
   1975  2bb0				  -
   1976  2bb0				  -			;byte %00000000 ; SNAKE
   1977  2bb0				  -
   1978  2bb0				  -	      .byte	%01111110	; SNAKE
   1979  2bb0				  -	      .byte	%01000010	; SNAKE
   1980  2bb0				  -	      .byte	%01100010	; SNAKE
   1981  2bb0				  -	      .byte	%00000010	; SNAKE
   1982  2bb0				  -	      .byte	%01111110	; SNAKE
   1983  2bb0				  -	      .byte	%00000010	; SNAKE
   1984  2bb0				  -	      .byte	%01000010	; SNAKE
   1985  2bb0				  -	      .byte	%01111110	; SNAKE
   1986  2bb0				  -
   1987  2bb0				  -			;byte %00000000 ; SNAKE
   1988  2bb0				  -
   1989  2bb0				  -	      .byte	%00001110	; SNAKE
   1990  2bb0				  -	      .byte	%00001010	; SNAKE
   1991  2bb0				  -	      .byte	%00000010	; SNAKE
   1992  2bb0				  -	      .byte	%01111110	; SNAKE
   1993  2bb0				  -	      .byte	%01000010	; SNAKE
   1994  2bb0				  -	      .byte	%01000010	; SNAKE
   1995  2bb0				  -	      .byte	%01000010	; SNAKE
   1996  2bb0				  -	      .byte	%01100110	; SNAKE
   1997  2bb0				  -
   1998  2bb0				  -			;byte %00000000 ; SNAKE
   1999  2bb0				  -
   2000  2bb0				  -	      .byte	%01111110	; SNAKE
   2001  2bb0				  -	      .byte	%01000010	; SNAKE
   2002  2bb0				  -	      .byte	%01100010	; SNAKE
   2003  2bb0				  -	      .byte	%00000010	; SNAKE
   2004  2bb0				  -	      .byte	%01111110	; SNAKE
   2005  2bb0				  -	      .byte	%01000000	; SNAKE
   2006  2bb0				  -	      .byte	%01000010	; SNAKE
   2007  2bb0				  -	      .byte	%01111110	; SNAKE
   2008  2bb0				  -
   2009  2bb0				  -			;byte %00000000 ; SNAKE
   2010  2bb0				  -
   2011  2bb0				  -	      .byte	%01111110	; SNAKE
   2012  2bb0				  -	      .byte	%01000010	; SNAKE
   2013  2bb0				  -	      .byte	%01000010	; SNAKE
   2014  2bb0				  -	      .byte	%01111110	; SNAKE
   2015  2bb0				  -	      .byte	%01000000	; SNAKE
   2016  2bb0				  -	      .byte	%01000110	; SNAKE
   2017  2bb0				  -	      .byte	%01000010	; SNAKE
   2018  2bb0				  -	      .byte	%01111110	; SNAKE
   2019  2bb0				  -
   2020  2bb0				  -			;byte %00000000 ; SNAKE
   2021  2bb0				  -
   2022  2bb0				  -	      .byte	%00000110	; SNAKE
   2023  2bb0				  -	      .byte	%00000010	; SNAKE
   2024  2bb0				  -	      .byte	%00000010	; SNAKE
   2025  2bb0				  -	      .byte	%00000010	; SNAKE
   2026  2bb0				  -	      .byte	%00000010	; SNAKE
   2027  2bb0				  -	      .byte	%01100010	; SNAKE
   2028  2bb0				  -	      .byte	%01000010	; SNAKE
   2029  2bb0				  -	      .byte	%01111110	; SNAKE
   2030  2bb0				  -
   2031  2bb0				  -			;byte %00000000 ; SNAKE
   2032  2bb0				  -
   2033  2bb0				  -	      .byte	%01111110	; SNAKE
   2034  2bb0				  -	      .byte	%01000010	; SNAKE
   2035  2bb0				  -	      .byte	%01000010	; SNAKE
   2036  2bb0				  -	      .byte	%01000010	; SNAKE
   2037  2bb0				  -	      .byte	%01111110	; SNAKE
   2038  2bb0				  -	      .byte	%01000010	; SNAKE
   2039  2bb0				  -	      .byte	%01000010	; SNAKE
   2040  2bb0				  -	      .byte	%01111110	; SNAKE
   2041  2bb0				  -
   2042  2bb0				  -			;byte %00000000 ; SNAKE
   2043  2bb0				  -
   2044  2bb0				  -	      .byte	%00001110	; SNAKE
   2045  2bb0				  -	      .byte	%00001010	; SNAKE
   2046  2bb0				  -	      .byte	%00000010	; SNAKE
   2047  2bb0				  -	      .byte	%00000010	; SNAKE
   2048  2bb0				  -	      .byte	%01111110	; SNAKE
   2049  2bb0				  -	      .byte	%01000010	; SNAKE
   2050  2bb0				  -	      .byte	%01000010	; SNAKE
   2051  2bb0				  -	      .byte	%01111110	; SNAKE
   2052  2bb0				  -
   2053  2bb0				  -
   2054  2bb0				  -	      ifconst	fontcharsHEX
   2055  2bb0				  -
   2056  2bb0				  -			;byte %00000000 ; SNAKE
   2057  2bb0				  -
   2058  2bb0				  -	      .byte	%01100110	; SNAKE
   2059  2bb0				  -	      .byte	%01000010	; SNAKE
   2060  2bb0				  -	      .byte	%01000010	; SNAKE
   2061  2bb0				  -	      .byte	%01000010	; SNAKE
   2062  2bb0				  -	      .byte	%01111110	; SNAKE
   2063  2bb0				  -	      .byte	%01000010	; SNAKE
   2064  2bb0				  -	      .byte	%01000010	; SNAKE
   2065  2bb0				  -	      .byte	%01111110	; SNAKE
   2066  2bb0				  -
   2067  2bb0				  -			;byte %00000000 ; SNAKE
   2068  2bb0				  -
   2069  2bb0				  -	      .byte	%01111110	; SNAKE
   2070  2bb0				  -	      .byte	%01000010	; SNAKE
   2071  2bb0				  -	      .byte	%01000010	; SNAKE
   2072  2bb0				  -	      .byte	%01000110	; SNAKE
   2073  2bb0				  -	      .byte	%01111100	; SNAKE
   2074  2bb0				  -	      .byte	%01000110	; SNAKE
   2075  2bb0				  -	      .byte	%01000010	; SNAKE
   2076  2bb0				  -	      .byte	%01111110	; SNAKE
   2077  2bb0				  -
   2078  2bb0				  -			;byte %00000000 ; SNAKE
   2079  2bb0				  -
   2080  2bb0				  -	      .byte	%01111110	; SNAKE
   2081  2bb0				  -	      .byte	%01000010	; SNAKE
   2082  2bb0				  -	      .byte	%01000110	; SNAKE
   2083  2bb0				  -	      .byte	%01000000	; SNAKE
   2084  2bb0				  -	      .byte	%01000000	; SNAKE
   2085  2bb0				  -	      .byte	%01000110	; SNAKE
   2086  2bb0				  -	      .byte	%01000010	; SNAKE
   2087  2bb0				  -	      .byte	%01111110	; SNAKE
   2088  2bb0				  -
   2089  2bb0				  -			;byte %00000000 ; SNAKE
   2090  2bb0				  -
   2091  2bb0				  -	      .byte	%01111100	; SNAKE
   2092  2bb0				  -	      .byte	%01000110	; SNAKE
   2093  2bb0				  -	      .byte	%01000010	; SNAKE
   2094  2bb0				  -	      .byte	%01000010	; SNAKE
   2095  2bb0				  -	      .byte	%01000010	; SNAKE
   2096  2bb0				  -	      .byte	%01000010	; SNAKE
   2097  2bb0				  -	      .byte	%01000110	; SNAKE
   2098  2bb0				  -	      .byte	%01111100	; SNAKE
   2099  2bb0				  -
   2100  2bb0				  -			;byte %00000000 ; SNAKE
   2101  2bb0				  -
   2102  2bb0				  -	      .byte	%01111110	; SNAKE
   2103  2bb0				  -	      .byte	%01000010	; SNAKE
   2104  2bb0				  -	      .byte	%01000110	; SNAKE
   2105  2bb0				  -	      .byte	%01000000	; SNAKE
   2106  2bb0				  -	      .byte	%01111000	; SNAKE
   2107  2bb0				  -	      .byte	%01000000	; SNAKE
   2108  2bb0				  -	      .byte	%01000010	; SNAKE
   2109  2bb0				  -	      .byte	%01111110	; SNAKE
   2110  2bb0				  -
   2111  2bb0				  -			;byte %00000000 ; SNAKE
   2112  2bb0				  -
   2113  2bb0				  -	      .byte	%01000000	; SNAKE
   2114  2bb0				  -	      .byte	%01000000	; SNAKE
   2115  2bb0				  -	      .byte	%01000000	; SNAKE
   2116  2bb0				  -	      .byte	%01000000	; SNAKE
   2117  2bb0				  -	      .byte	%01111000	; SNAKE
   2118  2bb0				  -	      .byte	%01000000	; SNAKE
   2119  2bb0				  -	      .byte	%01000010	; SNAKE
   2120  2bb0				  -	      .byte	%01111110	; SNAKE
   2121  2bb0				  -
   2122  2bb0				  -			;byte %00000000 ; SNAKE
   2123  2bb0				  -			;byte %00000000 ; SNAKE
   2124  2bb0				  -			;byte %00000000 ; SNAKE
   2125  2bb0				  -			;byte %00000000 ; SNAKE
   2126  2bb0				  -
   2127  2bb0				  -	      endif		; fontcharsHEX 
   2128  2bb0					      endif		; SNAKE
   2129  2bb0
   2130  2bb0				  -	      if	fontstyle == PLOK
   2131  2bb0				  -
   2132  2bb0				  -			;byte %00000000 ; PLOK
   2133  2bb0				  -
   2134  2bb0				  -	      .byte	%00000000	; PLOK
   2135  2bb0				  -	      .byte	%00111000	; PLOK
   2136  2bb0				  -	      .byte	%01100100	; PLOK
   2137  2bb0				  -	      .byte	%01100010	; PLOK
   2138  2bb0				  -	      .byte	%01100010	; PLOK
   2139  2bb0				  -	      .byte	%00110110	; PLOK
   2140  2bb0				  -	      .byte	%00011100	; PLOK
   2141  2bb0				  -	      .byte	%00000000	; PLOK
   2142  2bb0				  -
   2143  2bb0				  -			;byte %00000000 ; PLOK
   2144  2bb0				  -
   2145  2bb0				  -	      .byte	%00000000	; PLOK
   2146  2bb0				  -	      .byte	%00010000	; PLOK
   2147  2bb0				  -	      .byte	%00011100	; PLOK
   2148  2bb0				  -	      .byte	%00011100	; PLOK
   2149  2bb0				  -	      .byte	%00011000	; PLOK
   2150  2bb0				  -	      .byte	%00111000	; PLOK
   2151  2bb0				  -	      .byte	%00011000	; PLOK
   2152  2bb0				  -	      .byte	%00000000	; PLOK
   2153  2bb0				  -
   2154  2bb0				  -			;byte %00000000 ; PLOK
   2155  2bb0				  -
   2156  2bb0				  -	      .byte	%00000000	; PLOK
   2157  2bb0				  -	      .byte	%00001110	; PLOK
   2158  2bb0				  -	      .byte	%01111110	; PLOK
   2159  2bb0				  -	      .byte	%00011000	; PLOK
   2160  2bb0				  -	      .byte	%00001100	; PLOK
   2161  2bb0				  -	      .byte	%00000110	; PLOK
   2162  2bb0				  -	      .byte	%00111100	; PLOK
   2163  2bb0				  -	      .byte	%00000000	; PLOK
   2164  2bb0				  -
   2165  2bb0				  -			;byte %00000000 ; PLOK
   2166  2bb0				  -
   2167  2bb0				  -	      .byte	%00000000	; PLOK
   2168  2bb0				  -	      .byte	%00111100	; PLOK
   2169  2bb0				  -	      .byte	%01101110	; PLOK
   2170  2bb0				  -	      .byte	%00001110	; PLOK
   2171  2bb0				  -	      .byte	%00011100	; PLOK
   2172  2bb0				  -	      .byte	%00000110	; PLOK
   2173  2bb0				  -	      .byte	%01111100	; PLOK
   2174  2bb0				  -	      .byte	%00000000	; PLOK
   2175  2bb0				  -
   2176  2bb0				  -			;byte %00000000 ; PLOK
   2177  2bb0				  -
   2178  2bb0				  -	      .byte	%00000000	; PLOK
   2179  2bb0				  -	      .byte	%00011000	; PLOK
   2180  2bb0				  -	      .byte	%01111110	; PLOK
   2181  2bb0				  -	      .byte	%01101100	; PLOK
   2182  2bb0				  -	      .byte	%00100100	; PLOK
   2183  2bb0				  -	      .byte	%00110000	; PLOK
   2184  2bb0				  -	      .byte	%00110000	; PLOK
   2185  2bb0				  -	      .byte	%00000000	; PLOK
   2186  2bb0				  -
   2187  2bb0				  -			;byte %00000000 ; PLOK
   2188  2bb0				  -
   2189  2bb0				  -	      .byte	%00000000	; PLOK
   2190  2bb0				  -	      .byte	%00111100	; PLOK
   2191  2bb0				  -	      .byte	%01001110	; PLOK
   2192  2bb0				  -	      .byte	%00011100	; PLOK
   2193  2bb0				  -	      .byte	%01100000	; PLOK
   2194  2bb0				  -	      .byte	%01111100	; PLOK
   2195  2bb0				  -	      .byte	%00011100	; PLOK
   2196  2bb0				  -	      .byte	%00000000	; PLOK
   2197  2bb0				  -
   2198  2bb0				  -			;byte %00000000 ; PLOK
   2199  2bb0				  -
   2200  2bb0				  -	      .byte	%00000000	; PLOK
   2201  2bb0				  -	      .byte	%00111100	; PLOK
   2202  2bb0				  -	      .byte	%01000110	; PLOK
   2203  2bb0				  -	      .byte	%01101100	; PLOK
   2204  2bb0				  -	      .byte	%01110000	; PLOK
   2205  2bb0				  -	      .byte	%00111000	; PLOK
   2206  2bb0				  -	      .byte	%00010000	; PLOK
   2207  2bb0				  -	      .byte	%00000000	; PLOK
   2208  2bb0				  -
   2209  2bb0				  -			;byte %00000000 ; PLOK
   2210  2bb0				  -
   2211  2bb0				  -	      .byte	%00000000	; PLOK
   2212  2bb0				  -	      .byte	%00111100	; PLOK
   2213  2bb0				  -	      .byte	%00011100	; PLOK
   2214  2bb0				  -	      .byte	%00001100	; PLOK
   2215  2bb0				  -	      .byte	%00000110	; PLOK
   2216  2bb0				  -	      .byte	%01111110	; PLOK
   2217  2bb0				  -	      .byte	%00110000	; PLOK
   2218  2bb0				  -	      .byte	%00000000	; PLOK
   2219  2bb0				  -
   2220  2bb0				  -			;byte %00000000 ; PLOK
   2221  2bb0				  -
   2222  2bb0				  -	      .byte	%00000000	; PLOK
   2223  2bb0				  -	      .byte	%00111100	; PLOK
   2224  2bb0				  -	      .byte	%01001110	; PLOK
   2225  2bb0				  -	      .byte	%01101110	; PLOK
   2226  2bb0				  -	      .byte	%00111100	; PLOK
   2227  2bb0				  -	      .byte	%01100100	; PLOK
   2228  2bb0				  -	      .byte	%00111000	; PLOK
   2229  2bb0				  -	      .byte	%00000000	; PLOK
   2230  2bb0				  -
   2231  2bb0				  -			;byte %00000000 ; PLOK
   2232  2bb0				  -
   2233  2bb0				  -	      .byte	%00000000	; PLOK
   2234  2bb0				  -	      .byte	%00011000	; PLOK
   2235  2bb0				  -	      .byte	%00001100	; PLOK
   2236  2bb0				  -	      .byte	%00011100	; PLOK
   2237  2bb0				  -	      .byte	%00100110	; PLOK
   2238  2bb0				  -	      .byte	%01001110	; PLOK
   2239  2bb0				  -	      .byte	%00111100	; PLOK
   2240  2bb0				  -	      .byte	%00000000	; PLOK
   2241  2bb0				  -
   2242  2bb0				  -	      ifconst	fontcharsHEX
   2243  2bb0				  -
   2244  2bb0				  -			;byte %00000000 ; PLOK
   2245  2bb0				  -
   2246  2bb0				  -	      .byte	%00000000	; PLOK
   2247  2bb0				  -	      .byte	%01100010	; PLOK
   2248  2bb0				  -	      .byte	%01100110	; PLOK
   2249  2bb0				  -	      .byte	%01111110	; PLOK
   2250  2bb0				  -	      .byte	%00101100	; PLOK
   2251  2bb0				  -	      .byte	%00101000	; PLOK
   2252  2bb0				  -	      .byte	%00110000	; PLOK
   2253  2bb0				  -	      .byte	%00000000	; PLOK
   2254  2bb0				  -
   2255  2bb0				  -			;byte %00000000 ; PLOK
   2256  2bb0				  -
   2257  2bb0				  -	      .byte	%00000000	; PLOK
   2258  2bb0				  -	      .byte	%01111100	; PLOK
   2259  2bb0				  -	      .byte	%00110010	; PLOK
   2260  2bb0				  -	      .byte	%00110110	; PLOK
   2261  2bb0				  -	      .byte	%00111100	; PLOK
   2262  2bb0				  -	      .byte	%00110110	; PLOK
   2263  2bb0				  -	      .byte	%01111100	; PLOK
   2264  2bb0				  -	      .byte	%00000000	; PLOK
   2265  2bb0				  -
   2266  2bb0				  -			;byte %00000000 ; PLOK
   2267  2bb0				  -
   2268  2bb0				  -	      .byte	%00000000	; PLOK
   2269  2bb0				  -	      .byte	%00111100	; PLOK
   2270  2bb0				  -	      .byte	%01100110	; PLOK
   2271  2bb0				  -	      .byte	%01100000	; PLOK
   2272  2bb0				  -	      .byte	%01100100	; PLOK
   2273  2bb0				  -	      .byte	%00101110	; PLOK
   2274  2bb0				  -	      .byte	%00011100	; PLOK
   2275  2bb0				  -	      .byte	%00000000	; PLOK
   2276  2bb0				  -
   2277  2bb0				  -			;byte %00000000 ; PLOK
   2278  2bb0				  -
   2279  2bb0				  -	      .byte	%00000000	; PLOK
   2280  2bb0				  -	      .byte	%01111100	; PLOK
   2281  2bb0				  -	      .byte	%00110010	; PLOK
   2282  2bb0				  -	      .byte	%00110010	; PLOK
   2283  2bb0				  -	      .byte	%00110110	; PLOK
   2284  2bb0				  -	      .byte	%01111100	; PLOK
   2285  2bb0				  -	      .byte	%01111000	; PLOK
   2286  2bb0				  -	      .byte	%00000000	; PLOK
   2287  2bb0				  -
   2288  2bb0				  -			;byte %00000000 ; PLOK
   2289  2bb0				  -
   2290  2bb0				  -	      .byte	%00000000	; PLOK
   2291  2bb0				  -	      .byte	%01111110	; PLOK
   2292  2bb0				  -	      .byte	%00110000	; PLOK
   2293  2bb0				  -	      .byte	%00111000	; PLOK
   2294  2bb0				  -	      .byte	%00111100	; PLOK
   2295  2bb0				  -	      .byte	%00110000	; PLOK
   2296  2bb0				  -	      .byte	%01111110	; PLOK
   2297  2bb0				  -	      .byte	%00000000	; PLOK
   2298  2bb0				  -
   2299  2bb0				  -			;byte %00000000 ; PLOK
   2300  2bb0				  -
   2301  2bb0				  -	      .byte	%00000000	; PLOK
   2302  2bb0				  -	      .byte	%01100000	; PLOK
   2303  2bb0				  -	      .byte	%01100000	; PLOK
   2304  2bb0				  -	      .byte	%00111000	; PLOK
   2305  2bb0				  -	      .byte	%00100000	; PLOK
   2306  2bb0				  -	      .byte	%01111110	; PLOK
   2307  2bb0				  -	      .byte	%00011100	; PLOK
   2308  2bb0				  -	      .byte	%00000000	; PLOK
   2309  2bb0				  -
   2310  2bb0				  -			;byte %00000000 ; PLOK
   2311  2bb0				  -			;byte %00000000 ; PLOK
   2312  2bb0				  -			;byte %00000000 ; PLOK
   2313  2bb0				  -			;byte %00000000 ; PLOK
   2314  2bb0				  -
   2315  2bb0				  -
   2316  2bb0				  -	      endif		; fontcharsHEX
   2317  2bb0					      endif		; PLOK
   2318  2bb0
   2319  2bb0							; ### any characters that aren't font specific follow... 
   2320  2bb0
   2321  2bb0				  -	      ifconst	fontcharSPACE
   2322  2bb0				  -			;byte %00000000 ; SYMBOLS
   2323  2bb0				  -
   2324  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2325  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2326  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2327  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2328  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2329  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2330  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2331  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2332  2bb0				  -
   2333  2bb0				  -			;byte %00000000 ; SYMBOLS
   2334  2bb0					      endif		; fontcharSPACE
   2335  2bb0
   2336  2bb0				  -	      ifconst	fontcharDOLLAR
   2337  2bb0				  -			;byte %00000000 ; SYMBOLS
   2338  2bb0				  -
   2339  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2340  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2341  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2342  2bb0				  -	      .byte	%00010010	; SYMBOLS
   2343  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2344  2bb0				  -	      .byte	%10010000	; SYMBOLS
   2345  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2346  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2347  2bb0				  -
   2348  2bb0				  -			;byte %00000000 ; SYMBOLS
   2349  2bb0				  -
   2350  2bb0					      endif		; fontcharDOLLAR
   2351  2bb0
   2352  2bb0				  -	      ifconst	fontcharPOUND
   2353  2bb0				  -			;byte %00000000 ; SYMBOLS
   2354  2bb0				  -
   2355  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2356  2bb0				  -	      .byte	%01000000	; SYMBOLS
   2357  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2358  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2359  2bb0				  -	      .byte	%01111000	; SYMBOLS
   2360  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2361  2bb0				  -	      .byte	%00100010	; SYMBOLS
   2362  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2363  2bb0				  -
   2364  2bb0				  -			;byte %00000000 ; SYMBOLS
   2365  2bb0				  -
   2366  2bb0					      endif		; fontcharPOUND
   2367  2bb0
   2368  2bb0
   2369  2bb0				  -	      ifconst	fontcharMRHAPPY
   2370  2bb0				  -			;byte %00000000 ; SYMBOLS
   2371  2bb0				  -
   2372  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2373  2bb0				  -	      .byte	%01100110	; SYMBOLS
   2374  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2375  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2376  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2377  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2378  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2379  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2380  2bb0				  -
   2381  2bb0				  -			;byte %00000000 ; SYMBOLS
   2382  2bb0				  -
   2383  2bb0					      endif		; fontcharMRHAPPY
   2384  2bb0
   2385  2bb0				  -	      ifconst	fontcharMRSAD
   2386  2bb0				  -			;byte %00000000 ; SYMBOLS
   2387  2bb0				  -
   2388  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2389  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2390  2bb0				  -	      .byte	%01100110	; SYMBOLS
   2391  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2392  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2393  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2394  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2395  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2396  2bb0				  -
   2397  2bb0				  -			;byte %00000000 ; SYMBOLS
   2398  2bb0				  -
   2399  2bb0					      endif		; fontcharMRSAD
   2400  2bb0
   2401  2bb0
   2402  2bb0				  -	      ifconst	fontcharCOPYRIGHT
   2403  2bb0				  -			;byte %00000000 ; SYMBOLS
   2404  2bb0				  -
   2405  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2406  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2407  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2408  2bb0				  -	      .byte	%10111010	; SYMBOLS
   2409  2bb0				  -	      .byte	%10100010	; SYMBOLS
   2410  2bb0				  -	      .byte	%10111010	; SYMBOLS
   2411  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2412  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2413  2bb0				  -
   2414  2bb0				  -			;byte %00000000 ; SYMBOLS
   2415  2bb0				  -
   2416  2bb0					      endif		; fontcharCOPYRIGHT
   2417  2bb0
   2418  2bb0
   2419  2bb0				  -	      ifconst	fontcharFUJI
   2420  2bb0				  -
   2421  2bb0				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  2bb0				  -
   2423  2bb0				  -	      .byte	%01110000	; SYMBOLS
   2424  2bb0				  -	      .byte	%01111001	; SYMBOLS
   2425  2bb0				  -	      .byte	%00011101	; SYMBOLS
   2426  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2427  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2428  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2429  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2430  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2431  2bb0				  -
   2432  2bb0				  -			;byte %00000000 ; SYMBOLS
   2433  2bb0				  -
   2434  2bb0				  -	      .byte	%00001110	; SYMBOLS
   2435  2bb0				  -	      .byte	%10011110	; SYMBOLS
   2436  2bb0				  -	      .byte	%10111000	; SYMBOLS
   2437  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2438  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2439  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2440  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2441  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2442  2bb0				  -
   2443  2bb0				  -			;byte %00000000 ; SYMBOLS
   2444  2bb0				  -
   2445  2bb0					      endif		; fontcharFUJI
   2446  2bb0
   2447  2bb0
   2448  2bb0				  -	      ifconst	fontcharHEART
   2449  2bb0				  -			;byte %00000000 ; SYMBOLS
   2450  2bb0				  -
   2451  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2452  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2453  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2454  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2455  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2456  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2457  2bb0				  -	      .byte	%11101110	; SYMBOLS
   2458  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2459  2bb0				  -
   2460  2bb0				  -			;byte %00000000 ; SYMBOLS
   2461  2bb0				  -
   2462  2bb0					      endif		; fontcharHEART
   2463  2bb0
   2464  2bb0				  -	      ifconst	fontcharDIAMOND
   2465  2bb0				  -			;byte %00000000 ; SYMBOLS
   2466  2bb0				  -
   2467  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2468  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2469  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2470  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2471  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2472  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2473  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2474  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2475  2bb0				  -
   2476  2bb0				  -			;byte %00000000 ; SYMBOLS
   2477  2bb0				  -
   2478  2bb0					      endif		; fontcharDIAMOND
   2479  2bb0
   2480  2bb0				  -	      ifconst	fontcharSPADE
   2481  2bb0				  -			;byte %00000000 ; SYMBOLS
   2482  2bb0				  -
   2483  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2484  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2485  2bb0				  -	      .byte	%01010100	; SYMBOLS
   2486  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2487  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2488  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2489  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2490  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2491  2bb0				  -
   2492  2bb0				  -			;byte %00000000 ; SYMBOLS
   2493  2bb0				  -
   2494  2bb0					      endif		; fontcharSPADE
   2495  2bb0
   2496  2bb0				  -	      ifconst	fontcharCLUB
   2497  2bb0				  -			;byte %00000000 ; SYMBOLS
   2498  2bb0				  -
   2499  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2500  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2501  2bb0				  -	      .byte	%11010110	; SYMBOLS
   2502  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2503  2bb0				  -	      .byte	%11010110	; SYMBOLS
   2504  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2505  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2506  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2507  2bb0				  -
   2508  2bb0				  -			;byte %00000000 ; SYMBOLS
   2509  2bb0				  -
   2510  2bb0					      endif		; fontcharCLUB
   2511  2bb0
   2512  2bb0
   2513  2bb0				  -	      ifconst	fontcharCOLON
   2514  2bb0				  -			;byte %00000000 ; SYMBOLS
   2515  2bb0				  -
   2516  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2517  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2518  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2519  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2520  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2521  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2522  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2523  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2524  2bb0				  -
   2525  2bb0				  -			;byte %00000000 ; SYMBOLS
   2526  2bb0				  -
   2527  2bb0					      endif		; fontcharCOLON
   2528  2bb0
   2529  2bb0
   2530  2bb0				  -	      ifconst	fontcharBLOCK
   2531  2bb0				  -
   2532  2bb0				  -			;byte %00000000 ; SYMBOLS
   2533  2bb0				  -
   2534  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2535  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2536  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2537  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2538  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2539  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2540  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2541  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2542  2bb0				  -
   2543  2bb0				  -			;byte %00000000 ; SYMBOLS
   2544  2bb0				  -
   2545  2bb0					      endif		; fontcharBLOCK
   2546  2bb0
   2547  2bb0				  -	      ifconst	fontcharUNDERLINE
   2548  2bb0				  -
   2549  2bb0				  -			;byte %00000000 ; SYMBOLS
   2550  2bb0				  -
   2551  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2552  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2553  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2554  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2555  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2556  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2557  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2558  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2559  2bb0				  -
   2560  2bb0				  -			;byte %00000000 ; SYMBOLS
   2561  2bb0				  -
   2562  2bb0					      endif		; fontcharUNDERLINE
   2563  2bb0
   2564  2bb0				  -	      ifconst	fontcharARISIDE
   2565  2bb0				  -			;byte %00000000 ; SYMBOLS
   2566  2bb0				  -
   2567  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2568  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2569  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2570  2bb0				  -	      .byte	%00101100	; SYMBOLS
   2571  2bb0				  -	      .byte	%01111111	; SYMBOLS
   2572  2bb0				  -	      .byte	%00110111	; SYMBOLS
   2573  2bb0				  -	      .byte	%00000010	; SYMBOLS
   2574  2bb0				  -	      .byte	%00000001	; SYMBOLS
   2575  2bb0				  -
   2576  2bb0				  -			;byte %00000000 ; SYMBOLS
   2577  2bb0				  -
   2578  2bb0					      endif		; fontcharARISIDE
   2579  2bb0
   2580  2bb0				  -	      ifconst	fontcharARIFACE
   2581  2bb0				  -			;byte %00000000 ; SYMBOLS
   2582  2bb0				  -
   2583  2bb0				  -	      .byte	%00001000	; SYMBOLS
   2584  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2585  2bb0				  -	      .byte	%00111110	; SYMBOLS
   2586  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2587  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2588  2bb0				  -	      .byte	%01010100	; SYMBOLS
   2589  2bb0				  -	      .byte	%00100100	; SYMBOLS
   2590  2bb0				  -	      .byte	%00000010	; SYMBOLS
   2591  2bb0				  -
   2592  2bb0				  -			;byte %00000000 ; SYMBOLS
   2593  2bb0				  -
   2594  2bb0				  -
   2595  2bb0					      endif		; fontcharARIRACE
   2596  2bb0
------- FILE titlescreen/asm/titlescreen.asm
    170  2bb0					      endif
    171  2bb0
    172  2bb0				  -	      ifconst	mk_gameselect_on
    173  2bb0				  -	      include	"titlescreen/gameselect_image.asm"
    174  2bb0					      endif
    175  2bb0
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   3853  2bb0
   3854  2bb0				   .
   3855  2bb0							; 
   3856  2bb0
   3857  2bb0				   .
   3858  2bb0							; 
   3859  2bb0
   3860  2bb0				   .L0256		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  2bb0					      include	6lives_statusbar.asm
      1  2bb0							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  2bb0
      3  2bb0				   minikernel		; display up to 6 lives on screen
      4  2bb0		       85 02		      sta	WSYNC
      5  2bb2		       a2 20		      ldx	#$20
      6  2bb4		       86 21		      stx	HMP1
      7  2bb6		       86 25		      stx	VDELP0
      8  2bb8		       a5 c2		      lda	lives
      9  2bba		       4a		      lsr
     10  2bbb		       4a		      lsr
     11  2bbc		       4a		      lsr
     12  2bbd		       4a		      lsr
     13  2bbe		       4a		      lsr
     14  2bbf		       85 10		      sta	RESP0
     15  2bc1		       85 11		      sta	RESP1
     16  2bc3		       86 26		      stx	VDELP1
     17  2bc5		       aa		      tax
     18  2bc6		       bd 5c fc 	      lda	lifenusiz0table,x
     19  2bc9		       85 04		      sta	NUSIZ0
     20  2bcb		       bd 5b fc 	      lda	lifenusiz1table,x
     21  2bce		       85 05		      sta	NUSIZ1
     22  2bd0		       a5 c0		      lda	lifecolor
     23  2bd2		       85 06		      sta	COLUP0
     24  2bd4		       85 07		      sta	COLUP1
     25  2bd6		       a9 10		      lda	#$10
     26  2bd8		       85 20		      sta	HMP0
     27  2bda
     28  2bda		       a5 bf		      lda	statusbarlength
     29  2bdc		       4a		      lsr
     30  2bdd		       4a		      lsr
     31  2bde		       4a		      lsr		; 0-31
     32  2bdf							; 3 cases: 0-7, 8-15, 16-24
     33  2bdf							; if 0-7, temp1=val, temp2=0, temp3=0
     34  2bdf							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  2bdf							; if 16-23, temp1=255, temp2=255, temp3=val
     36  2bdf		       a8		      tay
     37  2be0
     38  2be0		       85 2a		      sta	HMOVE	;cycle 74?
     39  2be2
     40  2be2				  -	      ifconst	statusbarcolor
     41  2be2				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  2be2				  -	      lda	statusbarcolor
     43  2be2				  -	      sta	COLUPF
     44  2be2					      endif
     45  2be2
     46  2be2		       c0 08		      cpy	#8
     47  2be4		       90 17		      bcc	zero_7
     48  2be6		       c0 10		      cpy	#16
     49  2be8		       90 23		      bcc	eight_15
     50  2bea		       a9 ff		      lda	#255
     51  2bec		       85 cb		      sta	temp1
     52  2bee		       85 cc		      sta	temp2
     53  2bf0		       b9 54 fc 	      lda	statustable-16,y
     54  2bf3		       85 cd		      sta	temp3
     55  2bf5		       b9 64 fc 	      lda	statustable,y
     56  2bf8		       85 ce		      sta	temp4
     57  2bfa		       4c 1c fc 	      jmp	startlifedisplay
     58  2bfd
     59  2bfd				   zero_7
     60  2bfd		       a9 00		      lda	#0
     61  2bff		       85 ce		      sta	temp4
     62  2c01		       85 cd		      sta	temp3
     63  2c03		       85 cc		      sta	temp2
     64  2c05		       b9 64 fc 	      lda	statustable,y
     65  2c08		       85 cb		      sta	temp1
     66  2c0a		       4c 1c fc 	      jmp	startlifedisplay
     67  2c0d				   eight_15
     68  2c0d		       a9 ff		      lda	#255
     69  2c0f		       85 cb		      sta	temp1
     70  2c11		       a9 00		      lda	#0
     71  2c13		       85 ce		      sta	temp4
     72  2c15		       85 cd		      sta	temp3
     73  2c17		       b9 74 fc 	      lda	statustable+16,y
     74  2c1a		       85 cc		      sta	temp2
     75  2c1c				   startlifedisplay
     76  2c1c		       a0 07		      ldy	#7
     77  2c1e				   lifeloop
     78  2c1e		       85 02		      sta	WSYNC
     79  2c20		       86 0d		      stx	PF0
     80  2c22		       b1 c1		      lda	(lifepointer),y
     81  2c24		       e0 00		      cpx	#0
     82  2c26		       d0 01		      bne	onelife
     83  2c28		       0c		      .byte.b	$0C
     84  2c29				   onelife
     85  2c29		       85 1b		      sta	GRP0
     86  2c2b
     87  2c2b		       e0 02		      cpx	#2
     88  2c2d		       b0 01		      bcs	nolives
     89  2c2f		       0c		      .byte.b	$0C
     90  2c30				   nolives
     91  2c30		       85 1c		      sta	GRP1
     92  2c32		       a5 ce		      lda	temp4
     93  2c34		       85 0d		      sta	PF0
     94  2c36		       a5 cb		      lda	temp1
     95  2c38		       85 0f		      sta	PF2
     96  2c3a		       a5 cd		      lda	temp3
     97  2c3c		       85 0e		      sta	PF1
     98  2c3e		       a5 cc		      lda	temp2
     99  2c40		       85 0f		      sta	PF2	;cycle 48!
    100  2c42		       68		      pla		; waste 14 cycles in 4 bytes
    101  2c43		       48		      pha		;
    102  2c44		       68		      pla		;
    103  2c45		       48		      pha		; Shouldn't hurt anything!
    104  2c46		       a9 00		      lda	#0
    105  2c48		       88		      dey
    106  2c49		       85 0e		      sta	PF1
    107  2c4b		       10 d1		      bpl	lifeloop
    108  2c4d		       85 02		      sta	WSYNC
    109  2c4f		       c8		      iny
    110  2c50		       84 0d		      sty	PF0
    111  2c52		       84 0f		      sty	PF2
    112  2c54		       84 0e		      sty	PF1
    113  2c56		       84 1b		      sty	GRP0
    114  2c58		       84 1c		      sty	GRP1
    115  2c5a		       60		      rts
    116  2c5b
    117  2c5b				  -	      if	(<*) > $F5
    118  2c5b				  -	      align	256
    119  2c5b					      endif
    120  2c5b				   lifenusiz1table
    121  2c5b		       00		      .byte.b	0
    122  2c5c				   lifenusiz0table
    123  2c5c		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2c64
    125  2c64				   statustable		; warning: page-wrapping might cause issues
    126  2c64							;0-7 and 16+
    127  2c64		       00		      .byte.b	%00000000
    128  2c65		       01		      .byte.b	%00000001
    129  2c66		       03		      .byte.b	%00000011
    130  2c67		       07		      .byte.b	%00000111
    131  2c68		       0f		      .byte.b	%00001111
    132  2c69		       1f		      .byte.b	%00011111
    133  2c6a		       3f		      .byte.b	%00111111
    134  2c6b		       7f		      .byte.b	%01111111
    135  2c6c		       ff		      .byte.b	255
    136  2c6d		       ff		      .byte.b	255
    137  2c6e		       ff		      .byte.b	255
    138  2c6f		       ff		      .byte.b	255
    139  2c70		       ff		      .byte.b	255
    140  2c71		       ff		      .byte.b	255
    141  2c72		       ff		      .byte.b	255
    142  2c73		       ff		      .byte.b	255
    143  2c74							; 8-15
    144  2c74		       00		      .byte.b	0
    145  2c75		       00		      .byte.b	0
    146  2c76		       00		      .byte.b	0
    147  2c77		       00		      .byte.b	0
    148  2c78		       00		      .byte.b	0
    149  2c79		       00		      .byte.b	0
    150  2c7a		       00		      .byte.b	0
    151  2c7b		       00		      .byte.b	0
    152  2c7c		       00		      .byte.b	%00000000
    153  2c7d		       80		      .byte.b	%10000000
    154  2c7e		       c0		      .byte.b	%11000000
    155  2c7f		       e0		      .byte.b	%11100000
    156  2c80		       f0		      .byte.b	%11110000
    157  2c81		       f8		      .byte.b	%11111000
    158  2c82		       fc		      .byte.b	%11111100
    159  2c83		       fe		      .byte.b	%11111110
    160  2c84
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   3862  2c84				  -	      if	(<*) > (<(*+8))
   3863  2c84				  -	      repeat	($100-<*)
   3864  2c84				  -	      .byte	0
   3865  2c84				  -	      repend
   3866  2c84					      endif
   3867  2c84				   lives__L099
   3868  2c84		       3c		      .byte.b	%00111100
   3869  2c85		       18		      .byte.b	%00011000
   3870  2c86		       3c		      .byte.b	%00111100
   3871  2c87		       3c		      .byte.b	%00111100
   3872  2c88		       3c		      .byte.b	%00111100
   3873  2c89		       18		      .byte.b	%00011000
   3874  2c8a		       00		      .byte.b	%00000000
   3875  2c8b		       00		      .byte.b	%00000000
   3876  2c8c				  -	      if	(<*) > (<(*+8))
   3877  2c8c				  -	      repeat	($100-<*)
   3878  2c8c				  -	      .byte	0
   3879  2c8c				  -	      repend
   3880  2c8c					      endif
   3881  2c8c				  -	      if	(<*) < 90
   3882  2c8c				  -	      repeat	(90-<*)
   3883  2c8c				  -	      .byte	0
   3884  2c8c				  -	      repend
   3885  2c8c					      endif
   3886  2c8c				   player34then_0
   3887  2c8c		       00		      .byte.b	0
   3888  2c8d		       66		      .byte.b	%01100110
   3889  2c8e		       ff		      .byte.b	%11111111
   3890  2c8f		       bd		      .byte.b	%10111101
   3891  2c90		       a5		      .byte.b	%10100101
   3892  2c91		       3c		      .byte.b	%00111100
   3893  2c92		       18		      .byte.b	%00011000
   3894  2c93		       18		      .byte.b	%00011000
   3895  2c94		       00		      .byte.b	%00000000
   3896  2c95				  -	      if	(<*) > (<(*+8))
   3897  2c95				  -	      repeat	($100-<*)
   3898  2c95				  -	      .byte	0
   3899  2c95				  -	      repend
   3900  2c95					      endif
   3901  2c95				  -	      if	(<*) < 90
   3902  2c95				  -	      repeat	(90-<*)
   3903  2c95				  -	      .byte	0
   3904  2c95				  -	      repend
   3905  2c95					      endif
   3906  2c95				   player35then_0
   3907  2c95		       00		      .byte.b	0
   3908  2c96		       00		      .byte.b	%00000000
   3909  2c97		       ff		      .byte.b	%11111111
   3910  2c98		       bd		      .byte.b	%10111101
   3911  2c99		       a5		      .byte.b	%10100101
   3912  2c9a		       3c		      .byte.b	%00111100
   3913  2c9b		       18		      .byte.b	%00011000
   3914  2c9c		       18		      .byte.b	%00011000
   3915  2c9d		       00		      .byte.b	%00000000
   3916  2c9e				  -	      if	(<*) > (<(*+7))
   3917  2c9e				  -	      repeat	($100-<*)
   3918  2c9e				  -	      .byte	0
   3919  2c9e				  -	      repend
   3920  2c9e					      endif
   3921  2c9e				  -	      if	(<*) < 90
   3922  2c9e				  -	      repeat	(90-<*)
   3923  2c9e				  -	      .byte	0
   3924  2c9e				  -	      repend
   3925  2c9e					      endif
   3926  2c9e				   player36then_1
   3927  2c9e		       98		      .byte.b	%10011000
   3928  2c9f		       66		      .byte.b	%01100110
   3929  2ca0		       18		      .byte.b	%00011000
   3930  2ca1		       7c		      .byte.b	%01111100
   3931  2ca2		       18		      .byte.b	%00011000
   3932  2ca3		       3c		      .byte.b	%00111100
   3933  2ca4		       5a		      .byte.b	%01011010
   3934  2ca5		       3c		      .byte.b	%00111100
   3935  2ca6				  -	      if	(<*) > (<(*+7))
   3936  2ca6				  -	      repeat	($100-<*)
   3937  2ca6				  -	      .byte	0
   3938  2ca6				  -	      repend
   3939  2ca6					      endif
   3940  2ca6				  -	      if	(<*) < 90
   3941  2ca6				  -	      repeat	(90-<*)
   3942  2ca6				  -	      .byte	0
   3943  2ca6				  -	      repend
   3944  2ca6					      endif
   3945  2ca6				   player37then_1
   3946  2ca6		       19		      .byte.b	%00011001
   3947  2ca7		       66		      .byte.b	%01100110
   3948  2ca8		       18		      .byte.b	%00011000
   3949  2ca9		       3e		      .byte.b	%00111110
   3950  2caa		       18		      .byte.b	%00011000
   3951  2cab		       3c		      .byte.b	%00111100
   3952  2cac		       5a		      .byte.b	%01011010
   3953  2cad		       3c		      .byte.b	%00111100
   3954  2cae				  -	      if	(<*) > (<(*+7))
   3955  2cae				  -	      repeat	($100-<*)
   3956  2cae				  -	      .byte	0
   3957  2cae				  -	      repend
   3958  2cae					      endif
   3959  2cae				  -	      if	(<*) < 90
   3960  2cae				  -	      repeat	(90-<*)
   3961  2cae				  -	      .byte	0
   3962  2cae				  -	      repend
   3963  2cae					      endif
   3964  2cae				   player38then_2
   3965  2cae		       01		      .byte.b	%00000001
   3966  2caf		       99		      .byte.b	%10011001
   3967  2cb0		       ff		      .byte.b	%11111111
   3968  2cb1		       3c		      .byte.b	%00111100
   3969  2cb2		       ff		      .byte.b	%11111111
   3970  2cb3		       3c		      .byte.b	%00111100
   3971  2cb4		       e7		      .byte.b	%11100111
   3972  2cb5		       98		      .byte.b	%10011000
   3973  2cb6				  -	      if	(<*) > (<(*+7))
   3974  2cb6				  -	      repeat	($100-<*)
   3975  2cb6				  -	      .byte	0
   3976  2cb6				  -	      repend
   3977  2cb6					      endif
   3978  2cb6				  -	      if	(<*) < 90
   3979  2cb6				  -	      repeat	(90-<*)
   3980  2cb6				  -	      .byte	0
   3981  2cb6				  -	      repend
   3982  2cb6					      endif
   3983  2cb6				   player39then_2
   3984  2cb6		       80		      .byte.b	%10000000
   3985  2cb7		       99		      .byte.b	%10011001
   3986  2cb8		       ff		      .byte.b	%11111111
   3987  2cb9		       3c		      .byte.b	%00111100
   3988  2cba		       ff		      .byte.b	%11111111
   3989  2cbb		       3c		      .byte.b	%00111100
   3990  2cbc		       e7		      .byte.b	%11100111
   3991  2cbd		       19		      .byte.b	%00011001
   3992  2cbe				  -	      if	(<*) > (<(*+7))
   3993  2cbe				  -	      repeat	($100-<*)
   3994  2cbe				  -	      .byte	0
   3995  2cbe				  -	      repend
   3996  2cbe					      endif
   3997  2cbe				  -	      if	(<*) < 90
   3998  2cbe				  -	      repeat	(90-<*)
   3999  2cbe				  -	      .byte	0
   4000  2cbe				  -	      repend
   4001  2cbe					      endif
   4002  2cbe				   player40then_3
   4003  2cbe		       81		      .byte.b	%10000001
   4004  2cbf		       ff		      .byte.b	%11111111
   4005  2cc0		       24		      .byte.b	%00100100
   4006  2cc1		       c3		      .byte.b	%11000011
   4007  2cc2		       5a		      .byte.b	%01011010
   4008  2cc3		       42		      .byte.b	%01000010
   4009  2cc4		       3c		      .byte.b	%00111100
   4010  2cc5		       e7		      .byte.b	%11100111
   4011  2cc6				  -	      if	(<*) > (<(*+7))
   4012  2cc6				  -	      repeat	($100-<*)
   4013  2cc6				  -	      .byte	0
   4014  2cc6				  -	      repend
   4015  2cc6					      endif
   4016  2cc6				  -	      if	(<*) < 90
   4017  2cc6				  -	      repeat	(90-<*)
   4018  2cc6				  -	      .byte	0
   4019  2cc6				  -	      repend
   4020  2cc6					      endif
   4021  2cc6				   player42then_3
   4022  2cc6		       00		      .byte.b	%00000000
   4023  2cc7		       ff		      .byte.b	%11111111
   4024  2cc8		       24		      .byte.b	%00100100
   4025  2cc9		       42		      .byte.b	%01000010
   4026  2cca		       db		      .byte.b	%11011011
   4027  2ccb		       42		      .byte.b	%01000010
   4028  2ccc		       3c		      .byte.b	%00111100
   4029  2ccd		       e7		      .byte.b	%11100111
   4030  2cce				  -	      if	(<*) > (<(*+7))
   4031  2cce				  -	      repeat	($100-<*)
   4032  2cce				  -	      .byte	0
   4033  2cce				  -	      repend
   4034  2cce					      endif
   4035  2cce				  -	      if	(<*) < 90
   4036  2cce				  -	      repeat	(90-<*)
   4037  2cce				  -	      .byte	0
   4038  2cce				  -	      repend
   4039  2cce					      endif
   4040  2cce				   player43then_3
   4041  2cce		       00		      .byte.b	%00000000
   4042  2ccf		       7e		      .byte.b	%01111110
   4043  2cd0		       a5		      .byte.b	%10100101
   4044  2cd1		       42		      .byte.b	%01000010
   4045  2cd2		       5a		      .byte.b	%01011010
   4046  2cd3		       c3		      .byte.b	%11000011
   4047  2cd4		       3c		      .byte.b	%00111100
   4048  2cd5		       e7		      .byte.b	%11100111
   4049  2cd6				  -	      if	(<*) > (<(*+7))
   4050  2cd6				  -	      repeat	($100-<*)
   4051  2cd6				  -	      .byte	0
   4052  2cd6				  -	      repend
   4053  2cd6					      endif
   4054  2cd6				  -	      if	(<*) < 90
   4055  2cd6				  -	      repeat	(90-<*)
   4056  2cd6				  -	      .byte	0
   4057  2cd6				  -	      repend
   4058  2cd6					      endif
   4059  2cd6				   player45then_2
   4060  2cd6		       3c		      .byte.b	%00111100
   4061  2cd7		       db		      .byte.b	%11011011
   4062  2cd8		       5a		      .byte.b	%01011010
   4063  2cd9		       ff		      .byte.b	%11111111
   4064  2cda		       99		      .byte.b	%10011001
   4065  2cdb		       a5		      .byte.b	%10100101
   4066  2cdc		       c3		      .byte.b	%11000011
   4067  2cdd		       7e		      .byte.b	%01111110
   4068  2cde				  -	      if	(<*) > (<(*+7))
   4069  2cde				  -	      repeat	($100-<*)
   4070  2cde				  -	      .byte	0
   4071  2cde				  -	      repend
   4072  2cde					      endif
   4073  2cde				  -	      if	(<*) < 90
   4074  2cde				  -	      repeat	(90-<*)
   4075  2cde				  -	      .byte	0
   4076  2cde				  -	      repend
   4077  2cde					      endif
   4078  2cde				   player47then_2
   4079  2cde		       5a		      .byte.b	%01011010
   4080  2cdf		       5a		      .byte.b	%01011010
   4081  2ce0		       5a		      .byte.b	%01011010
   4082  2ce1		       ff		      .byte.b	%11111111
   4083  2ce2		       81		      .byte.b	%10000001
   4084  2ce3		       a5		      .byte.b	%10100101
   4085  2ce4		       c3		      .byte.b	%11000011
   4086  2ce5		       7e		      .byte.b	%01111110
   4087  2ce6				  -	      if	(<*) > (<(*+7))
   4088  2ce6				  -	      repeat	($100-<*)
   4089  2ce6				  -	      .byte	0
   4090  2ce6				  -	      repend
   4091  2ce6					      endif
   4092  2ce6				  -	      if	(<*) < 90
   4093  2ce6				  -	      repeat	(90-<*)
   4094  2ce6				  -	      .byte	0
   4095  2ce6				  -	      repend
   4096  2ce6					      endif
   4097  2ce6				   player48then_4
   4098  2ce6		       24		      .byte.b	%00100100
   4099  2ce7		       a5		      .byte.b	%10100101
   4100  2ce8		       5a		      .byte.b	%01011010
   4101  2ce9		       3c		      .byte.b	%00111100
   4102  2cea		       7e		      .byte.b	%01111110
   4103  2ceb		       99		      .byte.b	%10011001
   4104  2cec		       24		      .byte.b	%00100100
   4105  2ced		       42		      .byte.b	%01000010
   4106  2cee				  -	      if	(<*) > (<(*+7))
   4107  2cee				  -	      repeat	($100-<*)
   4108  2cee				  -	      .byte	0
   4109  2cee				  -	      repend
   4110  2cee					      endif
   4111  2cee				  -	      if	(<*) < 90
   4112  2cee				  -	      repeat	(90-<*)
   4113  2cee				  -	      .byte	0
   4114  2cee				  -	      repend
   4115  2cee					      endif
   4116  2cee				   player49then_4
   4117  2cee		       24		      .byte.b	%00100100
   4118  2cef		       24		      .byte.b	%00100100
   4119  2cf0		       db		      .byte.b	%11011011
   4120  2cf1		       3c		      .byte.b	%00111100
   4121  2cf2		       ff		      .byte.b	%11111111
   4122  2cf3		       18		      .byte.b	%00011000
   4123  2cf4		       24		      .byte.b	%00100100
   4124  2cf5		       24		      .byte.b	%00100100
   4125  2cf6				  -	      if	(<*) > (<(*+7))
   4126  2cf6				  -	      repeat	($100-<*)
   4127  2cf6				  -	      .byte	0
   4128  2cf6				  -	      repend
   4129  2cf6					      endif
   4130  2cf6				  -	      if	(<*) < 90
   4131  2cf6				  -	      repeat	(90-<*)
   4132  2cf6				  -	      .byte	0
   4133  2cf6				  -	      repend
   4134  2cf6					      endif
   4135  2cf6				   player50then_5
   4136  2cf6		       91		      .byte.b	%10010001
   4137  2cf7		       5a		      .byte.b	%01011010
   4138  2cf8		       24		      .byte.b	%00100100
   4139  2cf9		       db		      .byte.b	%11011011
   4140  2cfa		       5a		      .byte.b	%01011010
   4141  2cfb		       24		      .byte.b	%00100100
   4142  2cfc		       5a		      .byte.b	%01011010
   4143  2cfd		       89		      .byte.b	%10001001
   4144  2cfe					      if	(<*) > (<(*+7))
   4145  2cfe					      repeat	($100-<*)
   4146  2cfe		       00		      .byte.b	0
   4145  2cfe					      repend
   4146  2cff		       00		      .byte.b	0
   4147  2d00					      repend
   4148  2d00					      endif
   4149  2d00					      if	(<*) < 90
   4150  2d00					      repeat	(90-<*)
   4151  2d00		       00		      .byte.b	0
   4150  2d00					      repend
   4151  2d01		       00		      .byte.b	0
   4150  2d01					      repend
   4151  2d02		       00		      .byte.b	0
   4150  2d02					      repend
   4151  2d03		       00		      .byte.b	0
   4150  2d03					      repend
   4151  2d04		       00		      .byte.b	0
   4150  2d04					      repend
   4151  2d05		       00		      .byte.b	0
   4150  2d05					      repend
   4151  2d06		       00		      .byte.b	0
   4150  2d06					      repend
   4151  2d07		       00		      .byte.b	0
   4150  2d07					      repend
   4151  2d08		       00		      .byte.b	0
   4150  2d08					      repend
   4151  2d09		       00		      .byte.b	0
   4150  2d09					      repend
   4151  2d0a		       00		      .byte.b	0
   4150  2d0a					      repend
   4151  2d0b		       00		      .byte.b	0
   4150  2d0b					      repend
   4151  2d0c		       00		      .byte.b	0
   4150  2d0c					      repend
   4151  2d0d		       00		      .byte.b	0
   4150  2d0d					      repend
   4151  2d0e		       00		      .byte.b	0
   4150  2d0e					      repend
   4151  2d0f		       00		      .byte.b	0
   4150  2d0f					      repend
   4151  2d10		       00		      .byte.b	0
   4150  2d10					      repend
   4151  2d11		       00		      .byte.b	0
   4150  2d11					      repend
   4151  2d12		       00		      .byte.b	0
   4150  2d12					      repend
   4151  2d13		       00		      .byte.b	0
   4150  2d13					      repend
   4151  2d14		       00		      .byte.b	0
   4150  2d14					      repend
   4151  2d15		       00		      .byte.b	0
   4150  2d15					      repend
   4151  2d16		       00		      .byte.b	0
   4150  2d16					      repend
   4151  2d17		       00		      .byte.b	0
   4150  2d17					      repend
   4151  2d18		       00		      .byte.b	0
   4150  2d18					      repend
   4151  2d19		       00		      .byte.b	0
   4150  2d19					      repend
   4151  2d1a		       00		      .byte.b	0
   4150  2d1a					      repend
   4151  2d1b		       00		      .byte.b	0
   4150  2d1b					      repend
   4151  2d1c		       00		      .byte.b	0
   4150  2d1c					      repend
   4151  2d1d		       00		      .byte.b	0
   4150  2d1d					      repend
   4151  2d1e		       00		      .byte.b	0
   4150  2d1e					      repend
   4151  2d1f		       00		      .byte.b	0
   4150  2d1f					      repend
   4151  2d20		       00		      .byte.b	0
   4150  2d20					      repend
   4151  2d21		       00		      .byte.b	0
   4150  2d21					      repend
   4151  2d22		       00		      .byte.b	0
   4150  2d22					      repend
   4151  2d23		       00		      .byte.b	0
   4150  2d23					      repend
   4151  2d24		       00		      .byte.b	0
   4150  2d24					      repend
   4151  2d25		       00		      .byte.b	0
   4150  2d25					      repend
   4151  2d26		       00		      .byte.b	0
   4150  2d26					      repend
   4151  2d27		       00		      .byte.b	0
   4150  2d27					      repend
   4151  2d28		       00		      .byte.b	0
   4150  2d28					      repend
   4151  2d29		       00		      .byte.b	0
   4150  2d29					      repend
   4151  2d2a		       00		      .byte.b	0
   4150  2d2a					      repend
   4151  2d2b		       00		      .byte.b	0
   4150  2d2b					      repend
   4151  2d2c		       00		      .byte.b	0
   4150  2d2c					      repend
   4151  2d2d		       00		      .byte.b	0
   4150  2d2d					      repend
   4151  2d2e		       00		      .byte.b	0
   4150  2d2e					      repend
   4151  2d2f		       00		      .byte.b	0
   4150  2d2f					      repend
   4151  2d30		       00		      .byte.b	0
   4150  2d30					      repend
   4151  2d31		       00		      .byte.b	0
   4150  2d31					      repend
   4151  2d32		       00		      .byte.b	0
   4150  2d32					      repend
   4151  2d33		       00		      .byte.b	0
   4150  2d33					      repend
   4151  2d34		       00		      .byte.b	0
   4150  2d34					      repend
   4151  2d35		       00		      .byte.b	0
   4150  2d35					      repend
   4151  2d36		       00		      .byte.b	0
   4150  2d36					      repend
   4151  2d37		       00		      .byte.b	0
   4150  2d37					      repend
   4151  2d38		       00		      .byte.b	0
   4150  2d38					      repend
   4151  2d39		       00		      .byte.b	0
   4150  2d39					      repend
   4151  2d3a		       00		      .byte.b	0
   4150  2d3a					      repend
   4151  2d3b		       00		      .byte.b	0
   4150  2d3b					      repend
   4151  2d3c		       00		      .byte.b	0
   4150  2d3c					      repend
   4151  2d3d		       00		      .byte.b	0
   4150  2d3d					      repend
   4151  2d3e		       00		      .byte.b	0
   4150  2d3e					      repend
   4151  2d3f		       00		      .byte.b	0
   4150  2d3f					      repend
   4151  2d40		       00		      .byte.b	0
   4150  2d40					      repend
   4151  2d41		       00		      .byte.b	0
   4150  2d41					      repend
   4151  2d42		       00		      .byte.b	0
   4150  2d42					      repend
   4151  2d43		       00		      .byte.b	0
   4150  2d43					      repend
   4151  2d44		       00		      .byte.b	0
   4150  2d44					      repend
   4151  2d45		       00		      .byte.b	0
   4150  2d45					      repend
   4151  2d46		       00		      .byte.b	0
   4150  2d46					      repend
   4151  2d47		       00		      .byte.b	0
   4150  2d47					      repend
   4151  2d48		       00		      .byte.b	0
   4150  2d48					      repend
   4151  2d49		       00		      .byte.b	0
   4150  2d49					      repend
   4151  2d4a		       00		      .byte.b	0
   4150  2d4a					      repend
   4151  2d4b		       00		      .byte.b	0
   4150  2d4b					      repend
   4151  2d4c		       00		      .byte.b	0
   4150  2d4c					      repend
   4151  2d4d		       00		      .byte.b	0
   4150  2d4d					      repend
   4151  2d4e		       00		      .byte.b	0
   4150  2d4e					      repend
   4151  2d4f		       00		      .byte.b	0
   4150  2d4f					      repend
   4151  2d50		       00		      .byte.b	0
   4150  2d50					      repend
   4151  2d51		       00		      .byte.b	0
   4150  2d51					      repend
   4151  2d52		       00		      .byte.b	0
   4150  2d52					      repend
   4151  2d53		       00		      .byte.b	0
   4150  2d53					      repend
   4151  2d54		       00		      .byte.b	0
   4150  2d54					      repend
   4151  2d55		       00		      .byte.b	0
   4150  2d55					      repend
   4151  2d56		       00		      .byte.b	0
   4150  2d56					      repend
   4151  2d57		       00		      .byte.b	0
   4150  2d57					      repend
   4151  2d58		       00		      .byte.b	0
   4150  2d58					      repend
   4151  2d59		       00		      .byte.b	0
   4152  2d5a					      repend
   4153  2d5a					      endif
   4154  2d5a				   player51then_5
   4155  2d5a		       91		      .byte.b	%10010001
   4156  2d5b		       5a		      .byte.b	%01011010
   4157  2d5c		       24		      .byte.b	%00100100
   4158  2d5d		       42		      .byte.b	%01000010
   4159  2d5e		       43		      .byte.b	%01000011
   4160  2d5f		       24		      .byte.b	%00100100
   4161  2d60		       5a		      .byte.b	%01011010
   4162  2d61		       89		      .byte.b	%10001001
   4163  2d62				  -	      if	(<*) > (<(*+7))
   4164  2d62				  -	      repeat	($100-<*)
   4165  2d62				  -	      .byte	0
   4166  2d62				  -	      repend
   4167  2d62					      endif
   4168  2d62				  -	      if	(<*) < 90
   4169  2d62				  -	      repeat	(90-<*)
   4170  2d62				  -	      .byte	0
   4171  2d62				  -	      repend
   4172  2d62					      endif
   4173  2d62				   player52then_5
   4174  2d62		       91		      .byte.b	%10010001
   4175  2d63		       5a		      .byte.b	%01011010
   4176  2d64		       24		      .byte.b	%00100100
   4177  2d65		       db		      .byte.b	%11011011
   4178  2d66		       5a		      .byte.b	%01011010
   4179  2d67		       24		      .byte.b	%00100100
   4180  2d68		       5a		      .byte.b	%01011010
   4181  2d69		       89		      .byte.b	%10001001
   4182  2d6a				  -	      if	((>(*+11)) > (>*))
   4183  2d6a				  -	      ALIGN	256
   4184  2d6a					      endif
   4185  2d6a				   PF1_data0
   4186  2d6a		       7f		      .byte.b	%01111111
   4187  2d6b		       7f		      .byte.b	%01111111
   4188  2d6c		       6b		      .byte.b	%01101011
   4189  2d6d		       3e		      .byte.b	%00111110
   4190  2d6e		       00		      .byte.b	%00000000
   4191  2d6f		       00		      .byte.b	%00000000
   4192  2d70		       00		      .byte.b	%00000000
   4193  2d71		       00		      .byte.b	%00000000
   4194  2d72		       00		      .byte.b	%00000000
   4195  2d73		       00		      .byte.b	%00000000
   4196  2d74		       00		      .byte.b	%00000000
   4197  2d75				  -	      if	((>(*+11)) > (>*))
   4198  2d75				  -	      ALIGN	256
   4199  2d75					      endif
   4200  2d75				   PF2_data0
   4201  2d75		       6c		      .byte.b	%01101100
   4202  2d76		       7c		      .byte.b	%01111100
   4203  2d77		       54		      .byte.b	%01010100
   4204  2d78		       7c		      .byte.b	%01111100
   4205  2d79		       00		      .byte.b	%00000000
   4206  2d7a		       00		      .byte.b	%00000000
   4207  2d7b		       00		      .byte.b	%00000000
   4208  2d7c		       00		      .byte.b	%00000000
   4209  2d7d		       00		      .byte.b	%00000000
   4210  2d7e		       00		      .byte.b	%00000000
   4211  2d7f		       00		      .byte.b	%00000000
   4212  2d80					      if	ECHOFIRST
      500 bytes of ROM space left in bank 2
   4213  2d80					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   4214  2d80					      endif
   4215  2d80		       00 01	   ECHOFIRST  =	1
   4216  2d80
   4217  2d80
   4218  2d80							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4219  2d80
   4220  2d80							; feel free to modify the score graphics - just keep each digit 8 high
   4221  2d80							; and keep the conditional compilation stuff intact
   4222  2d80				  -	      ifconst	ROM2k
   4223  2d80				  -	      ORG	$F7AC-8
   4224  2d80					      else
   4225  2d80					      ifconst	bankswitch
   4226  2d80					      if	bankswitch == 8
   4227  2f74					      ORG	$2F94-bscode_length
   4228  2f74					      RORG	$FF94-bscode_length
   4229  2f74					      endif
   4230  2f74				  -	      if	bankswitch == 16
   4231  2f74				  -	      ORG	$4F94-bscode_length
   4232  2f74				  -	      RORG	$FF94-bscode_length
   4233  2f74					      endif
   4234  2f74				  -	      if	bankswitch == 32
   4235  2f74				  -	      ORG	$8F94-bscode_length
   4236  2f74				  -	      RORG	$FF94-bscode_length
   4237  2f74					      endif
   4238  2f74				  -	      if	bankswitch == 64
   4239  2f74				  -	      ORG	$10F80-bscode_length
   4240  2f74				  -	      RORG	$1FF80-bscode_length
   4241  2f74					      endif
   4242  2f74				  -	      else
   4243  2f74				  -	      ORG	$FF9C
   4244  2f74					      endif
   4245  2f74					      endif
   4246  2f74
   4247  2f74							; font equates
   4248  2f74		       00 01	   .21stcentury =	1
   4249  2f74		       00 02	   alarmclock =	2
   4250  2f74		       00 03	   handwritten =	3
   4251  2f74		       00 04	   interrupted =	4
   4252  2f74		       00 05	   retroputer =	5
   4253  2f74		       00 06	   whimsey    =	6
   4254  2f74		       00 07	   tiny       =	7
   4255  2f74		       00 08	   hex	      =	8
   4256  2f74
   4257  2f74				  -	      ifconst	font
   4258  2f74				  -	      if	font == hex
   4259  2f74				  -	      ORG	. - 48
   4260  2f74				  -	      endif
   4261  2f74					      endif
   4262  2f74
   4263  2f74				   scoretable
   4264  2f74
   4265  2f74				  -	      ifconst	font
   4266  2f74				  -	      if	font == .21stcentury
   4267  2f74				  -	      include	"score_graphics.asm.21stcentury"
   4268  2f74				  -	      endif
   4269  2f74				  -	      if	font == alarmclock
   4270  2f74				  -	      include	"score_graphics.asm.alarmclock"
   4271  2f74				  -	      endif
   4272  2f74				  -	      if	font == handwritten
   4273  2f74				  -	      include	"score_graphics.asm.handwritten"
   4274  2f74				  -	      endif
   4275  2f74				  -	      if	font == interrupted
   4276  2f74				  -	      include	"score_graphics.asm.interrupted"
   4277  2f74				  -	      endif
   4278  2f74				  -	      if	font == retroputer
   4279  2f74				  -	      include	"score_graphics.asm.retroputer"
   4280  2f74				  -	      endif
   4281  2f74				  -	      if	font == whimsey
   4282  2f74				  -	      include	"score_graphics.asm.whimsey"
   4283  2f74				  -	      endif
   4284  2f74				  -	      if	font == tiny
   4285  2f74				  -	      include	"score_graphics.asm.tiny"
   4286  2f74				  -	      endif
   4287  2f74				  -	      if	font == hex
   4288  2f74				  -	      include	"score_graphics.asm.hex"
   4289  2f74				  -	      endif
   4290  2f74					      else		; default font
   4291  2f74
   4292  2f74		       3c		      .byte.b	%00111100
   4293  2f75		       66		      .byte.b	%01100110
   4294  2f76		       66		      .byte.b	%01100110
   4295  2f77		       66		      .byte.b	%01100110
   4296  2f78		       66		      .byte.b	%01100110
   4297  2f79		       66		      .byte.b	%01100110
   4298  2f7a		       66		      .byte.b	%01100110
   4299  2f7b		       3c		      .byte.b	%00111100
   4300  2f7c
   4301  2f7c		       7e		      .byte.b	%01111110
   4302  2f7d		       18		      .byte.b	%00011000
   4303  2f7e		       18		      .byte.b	%00011000
   4304  2f7f		       18		      .byte.b	%00011000
   4305  2f80		       18		      .byte.b	%00011000
   4306  2f81		       38		      .byte.b	%00111000
   4307  2f82		       18		      .byte.b	%00011000
   4308  2f83		       08		      .byte.b	%00001000
   4309  2f84
   4310  2f84		       7e		      .byte.b	%01111110
   4311  2f85		       60		      .byte.b	%01100000
   4312  2f86		       60		      .byte.b	%01100000
   4313  2f87		       3c		      .byte.b	%00111100
   4314  2f88		       06		      .byte.b	%00000110
   4315  2f89		       06		      .byte.b	%00000110
   4316  2f8a		       46		      .byte.b	%01000110
   4317  2f8b		       3c		      .byte.b	%00111100
   4318  2f8c
   4319  2f8c		       3c		      .byte.b	%00111100
   4320  2f8d		       46		      .byte.b	%01000110
   4321  2f8e		       06		      .byte.b	%00000110
   4322  2f8f		       06		      .byte.b	%00000110
   4323  2f90		       1c		      .byte.b	%00011100
   4324  2f91		       06		      .byte.b	%00000110
   4325  2f92		       46		      .byte.b	%01000110
   4326  2f93		       3c		      .byte.b	%00111100
   4327  2f94
   4328  2f94		       0c		      .byte.b	%00001100
   4329  2f95		       0c		      .byte.b	%00001100
   4330  2f96		       7e		      .byte.b	%01111110
   4331  2f97		       4c		      .byte.b	%01001100
   4332  2f98		       4c		      .byte.b	%01001100
   4333  2f99		       2c		      .byte.b	%00101100
   4334  2f9a		       1c		      .byte.b	%00011100
   4335  2f9b		       0c		      .byte.b	%00001100
   4336  2f9c
   4337  2f9c		       3c		      .byte.b	%00111100
   4338  2f9d		       46		      .byte.b	%01000110
   4339  2f9e		       06		      .byte.b	%00000110
   4340  2f9f		       06		      .byte.b	%00000110
   4341  2fa0		       3c		      .byte.b	%00111100
   4342  2fa1		       60		      .byte.b	%01100000
   4343  2fa2		       60		      .byte.b	%01100000
   4344  2fa3		       7e		      .byte.b	%01111110
   4345  2fa4
   4346  2fa4		       3c		      .byte.b	%00111100
   4347  2fa5		       66		      .byte.b	%01100110
   4348  2fa6		       66		      .byte.b	%01100110
   4349  2fa7		       66		      .byte.b	%01100110
   4350  2fa8		       7c		      .byte.b	%01111100
   4351  2fa9		       60		      .byte.b	%01100000
   4352  2faa		       62		      .byte.b	%01100010
   4353  2fab		       3c		      .byte.b	%00111100
   4354  2fac
   4355  2fac		       30		      .byte.b	%00110000
   4356  2fad		       30		      .byte.b	%00110000
   4357  2fae		       30		      .byte.b	%00110000
   4358  2faf		       18		      .byte.b	%00011000
   4359  2fb0		       0c		      .byte.b	%00001100
   4360  2fb1		       06		      .byte.b	%00000110
   4361  2fb2		       42		      .byte.b	%01000010
   4362  2fb3		       3e		      .byte.b	%00111110
   4363  2fb4
   4364  2fb4		       3c		      .byte.b	%00111100
   4365  2fb5		       66		      .byte.b	%01100110
   4366  2fb6		       66		      .byte.b	%01100110
   4367  2fb7		       66		      .byte.b	%01100110
   4368  2fb8		       3c		      .byte.b	%00111100
   4369  2fb9		       66		      .byte.b	%01100110
   4370  2fba		       66		      .byte.b	%01100110
   4371  2fbb		       3c		      .byte.b	%00111100
   4372  2fbc
   4373  2fbc		       3c		      .byte.b	%00111100
   4374  2fbd		       46		      .byte.b	%01000110
   4375  2fbe		       06		      .byte.b	%00000110
   4376  2fbf		       3e		      .byte.b	%00111110
   4377  2fc0		       66		      .byte.b	%01100110
   4378  2fc1		       66		      .byte.b	%01100110
   4379  2fc2		       66		      .byte.b	%01100110
   4380  2fc3		       3c		      .byte.b	%00111100
   4381  2fc4
   4382  2fc4					      ifnconst	DPC_kernel_options
   4383  2fc4
   4384  2fc4		       00		      .byte.b	%00000000
   4385  2fc5		       00		      .byte.b	%00000000
   4386  2fc6		       00		      .byte.b	%00000000
   4387  2fc7		       00		      .byte.b	%00000000
   4388  2fc8		       00		      .byte.b	%00000000
   4389  2fc9		       00		      .byte.b	%00000000
   4390  2fca		       00		      .byte.b	%00000000
   4391  2fcb		       00		      .byte.b	%00000000
   4392  2fcc
   4393  2fcc					      endif
   4394  2fcc
   4395  2fcc					      endif
   4396  2fcc
   4397  2fcc				  -	      ifconst	ROM2k
   4398  2fcc				  -	      ORG	$F7FC
   4399  2fcc					      else
   4400  2fcc					      ifconst	bankswitch
   4401  2fcc					      if	bankswitch == 8
   4402  2fd4					      ORG	$2FF4-bscode_length
   4403  2fd4					      RORG	$FFF4-bscode_length
   4404  2fd4					      endif
   4405  2fd4				  -	      if	bankswitch == 16
   4406  2fd4				  -	      ORG	$4FF4-bscode_length
   4407  2fd4				  -	      RORG	$FFF4-bscode_length
   4408  2fd4					      endif
   4409  2fd4				  -	      if	bankswitch == 32
   4410  2fd4				  -	      ORG	$8FF4-bscode_length
   4411  2fd4				  -	      RORG	$FFF4-bscode_length
   4412  2fd4					      endif
   4413  2fd4				  -	      if	bankswitch == 64
   4414  2fd4				  -	      ORG	$10FE0-bscode_length
   4415  2fd4				  -	      RORG	$1FFE0-bscode_length
   4416  2fd4					      endif
   4417  2fd4				  -	      else
   4418  2fd4				  -	      ORG	$FFFC
   4419  2fd4					      endif
   4420  2fd4					      endif
   4421  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4422  2fd4
   4423  2fd4							; every bank has this stuff at the same place
   4424  2fd4							; this code can switch to/from any bank at any entry point
   4425  2fd4							; and can preserve register values
   4426  2fd4							; note: lines not starting with a space are not placed in all banks
   4427  2fd4							;
   4428  2fd4							; line below tells the compiler how long this is - do not remove
   4429  2fd4							;size=32
   4430  2fd4
   4431  2fd4				   begin_bscode
   4432  2fd4		       a2 ff		      ldx	#$ff
   4433  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   4434  2fd6				  -	      stx	FASTFETCH
   4435  2fd6					      endif
   4436  2fd6		       9a		      txs
   4437  2fd7				  -	      if	bankswitch == 64
   4438  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4439  2fd7					      else
   4440  2fd7		       a9 f3		      lda	#>(start-1)
   4441  2fd9					      endif
   4442  2fd9		       48		      pha
   4443  2fda		       a9 f7		      lda	#<(start-1)
   4444  2fdc		       48		      pha
   4445  2fdd
   4446  2fdd				   BS_return
   4447  2fdd		       48		      pha
   4448  2fde		       8a		      txa
   4449  2fdf		       48		      pha
   4450  2fe0		       ba		      tsx
   4451  2fe1
   4452  2fe1					      if	bankswitch != 64
   4453  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   4454  2fe3
   4455  2fe3		       2a		      rol
   4456  2fe4		       2a		      rol
   4457  2fe5		       2a		      rol
   4458  2fe6		       2a		      rol
   4459  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4460  2fe9		       aa		      tax
   4461  2fea		       e8		      inx
   4462  2feb				  -	      else
   4463  2feb				  -	      lda	4,x	; get high byte of return address
   4464  2feb				  -	      tay
   4465  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4466  2feb				  -	      sta	4,x
   4467  2feb				  -	      tya
   4468  2feb				  -	      lsr
   4469  2feb				  -	      lsr
   4470  2feb				  -	      lsr
   4471  2feb				  -	      lsr
   4472  2feb				  -	      tax
   4473  2feb				  -	      inx
   4474  2feb					      endif
   4475  2feb
   4476  2feb				   BS_jsr
   4477  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4478  2fee		       68		      pla
   4479  2fef		       aa		      tax
   4480  2ff0		       68		      pla
   4481  2ff1		       60		      rts
   4482  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4483  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4484  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4485  2ff2					      endif
   4486  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4487  2ff2
   4488  2ff2					      ifconst	bankswitch
   4489  2ff2					      if	bankswitch == 8
   4490  2ffc					      ORG	$2FFC
   4491  2ffc					      RORG	$FFFC
   4492  2ffc					      endif
   4493  2ffc				  -	      if	bankswitch == 16
   4494  2ffc				  -	      ORG	$4FFC
   4495  2ffc				  -	      RORG	$FFFC
   4496  2ffc					      endif
   4497  2ffc				  -	      if	bankswitch == 32
   4498  2ffc				  -	      ORG	$8FFC
   4499  2ffc				  -	      RORG	$FFFC
   4500  2ffc					      endif
   4501  2ffc				  -	      if	bankswitch == 64
   4502  2ffc				  -	      ORG	$10FF0
   4503  2ffc				  -	      RORG	$1FFF0
   4504  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4505  2ffc				  -	      ORG	$10FF8
   4506  2ffc				  -	      RORG	$1FFF8
   4507  2ffc				  -	      ifconst	superchip
   4508  2ffc				  -	      .byte	"E","F","S","C"
   4509  2ffc				  -	      else
   4510  2ffc				  -	      .byte	"E","F","E","F"
   4511  2ffc				  -	      endif
   4512  2ffc				  -	      ORG	$10FFC
   4513  2ffc				  -	      RORG	$1FFFC
   4514  2ffc					      endif
   4515  2ffc				  -	      else
   4516  2ffc				  -	      ifconst	ROM2k
   4517  2ffc				  -	      ORG	$F7FC
   4518  2ffc				  -	      else
   4519  2ffc				  -	      ORG	$FFFC
   4520  2ffc				  -	      endif
   4521  2ffc					      endif
   4522  2ffc		       f8 f3		      .word.w	(start & $ffff)
   4523  2ffe		       f8 f3		      .word.w	(start & $ffff)
