------- FILE c:\Projects\SkySaviour2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 d4	   _sc3       =	score + 2
      7  3000 ????
      8  3000 ????	       00 d3	   _sc2       =	score + 1
      9  3000 ????
     10  3000 ????	       00 d2	   _sc1       =	score
     11  3000 ????
     12  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     13  3000 ????
     14  3000 ????	       00 f0	   gameReady  =	z
     15  3000 ????
     16  3000 ????	       00 ee	   _resetTicker =	x
     17  3000 ????
     18  3000 ????	       00 eb	   _High_Score2 =	u
     19  3000 ????
     20  3000 ????	       00 ea	   _High_Score1 =	t
     21  3000 ????
     22  3000 ????	       00 e9	   _High_Score3 =	s
     23  3000 ????
     24  3000 ????	       00 e8	   firstFrame =	r
     25  3000 ????
     26  3000 ????	       00 e6	   altSprite  =	p
     27  3000 ????
     28  3000 ????	       00 e5	   powerUpInPlay =	o
     29  3000 ????
     30  3000 ????	       00 e4	   ticker     =	n
     31  3000 ????
     32  3000 ????	       00 e3	   killCount  =	m
     33  3000 ????
     34  3000 ????	       00 e2	   bulletMultiplier =	l
     35  3000 ????
     36  3000 ????	       00 88	   asteroid4x =	player4x
     37  3000 ????	       00 87	   asteroid3x =	player3x
     38  3000 ????	       00 86	   asteroid2x =	player2x
     39  3000 ????	       00 85	   asteroidx  =	player1x
     40  3000 ????	       00 dc	   explosionTicker =	f
     41  3000 ????
     42  3000 ????	       00 91	   asteroid4Y =	player4y
     43  3000 ????	       00 90	   asteroid3Y =	player3y
     44  3000 ????	       00 8f	   asteroid2Y =	player2y
     45  3000 ????	       00 8e	   asteroidY  =	player1y
     46  3000 ????	       00 d7	   _P0_Luminosity =	a
     47  3000 ????	       00 01	   bs_mask    =	1
     48  3000 ????	       00 08	   bankswitch =	8
     49  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     50  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .
     50  1100							; 
     51  1100
     52  1100				   .L08 		;  includesfile multisprite_superchip.inc
     53  1100
     54  1100				   .L09 		;  set kernel multisprite
     55  1100
     56  1100				   .L010		;  set romsize 8k
     57  1100
     58  1100				   .
     59  1100							; 
     60  1100
     61  1100				   .L011		;  pfheight = 7
     62  1100
     63  1100		       a9 07		      LDA	#7
     64  1102		       85 c4		      STA	pfheight
     65  1104				   .
     66  1104							; 
     67  1104
     68  1104				   .L012		;  playfield:
     69  1104
     70  1104		       a9 62		      LDA	#<PF1_data0
     71  1106		       85 bb		      STA	PF1pointer
     72  1108		       a9 fb		      LDA	#>PF1_data0
     73  110a		       85 bc		      STA	PF1pointer+1
     74  110c		       a9 6d		      LDA	#<PF2_data0
     75  110e		       85 bd		      STA	PF2pointer
     76  1110		       a9 fb		      LDA	#>PF2_data0
     77  1112		       85 be		      STA	PF2pointer+1
     78  1114				   .
     79  1114							; 
     80  1114
     81  1114				   .L013		;  _COLUP1  =	$3A
     82  1114
     83  1114		       a9 3a		      LDA	#$3A
     84  1116		       85 98		      STA	_COLUP1
     85  1118				   .L014		;  COLUP2  =  $A4
     86  1118
     87  1118		       a9 a4		      LDA	#$A4
     88  111a		       85 99		      STA	COLUP2
     89  111c				   .L015		;  COLUP3  =  $A4
     90  111c
     91  111c		       a9 a4		      LDA	#$A4
     92  111e		       85 9a		      STA	COLUP3
     93  1120				   .L016		;  COLUP4  =  $76
     94  1120
     95  1120		       a9 76		      LDA	#$76
     96  1122		       85 9b		      STA	COLUP4
     97  1124				   .L017		;  COLUP5  =  $2E
     98  1124
     99  1124		       a9 2e		      LDA	#$2E
    100  1126		       85 9c		      STA	COLUP5
    101  1128				   .
    102  1128							; 
    103  1128
    104  1128				   .
    105  1128							; 
    106  1128
    107  1128				   .L018		;  lifecolor  =  $aa
    108  1128
    109  1128		       a9 aa		      LDA	#$aa
    110  112a		       85 c0		      STA	lifecolor
    111  112c				   .
    112  112c							; 
    113  112c
    114  112c				   .
    115  112c							; 
    116  112c
    117  112c				   .
    118  112c							; 
    119  112c
    120  112c				   .L019		;  player0x = 76
    121  112c
    122  112c		       a9 4c		      LDA	#76
    123  112e		       85 84		      STA	player0x
    124  1130				   .L020		;  player0y = 30
    125  1130
    126  1130		       a9 1e		      LDA	#30
    127  1132		       85 8d		      STA	player0y
    128  1134				   .
    129  1134							; 
    130  1134
    131  1134				   .L021		;  player1x = 76
    132  1134
    133  1134		       a9 4c		      LDA	#76
    134  1136		       85 85		      STA	player1x
    135  1138				   .L022		;  player1y = 99
    136  1138
    137  1138		       a9 63		      LDA	#99
    138  113a		       85 8e		      STA	player1y
    139  113c				   .
    140  113c							; 
    141  113c
    142  113c				   .L023		;  player2x = 86
    143  113c
    144  113c		       a9 56		      LDA	#86
    145  113e		       85 86		      STA	player2x
    146  1140				   .L024		;  player2y = 100
    147  1140
    148  1140		       a9 64		      LDA	#100
    149  1142		       85 8f		      STA	player2y
    150  1144				   .
    151  1144							; 
    152  1144
    153  1144				   .L025		;  player3x = 96
    154  1144
    155  1144		       a9 60		      LDA	#96
    156  1146		       85 87		      STA	player3x
    157  1148				   .L026		;  player3y = 100
    158  1148
    159  1148		       a9 64		      LDA	#100
    160  114a		       85 90		      STA	player3y
    161  114c				   .
    162  114c							; 
    163  114c
    164  114c				   .L027		;  player4x = 116
    165  114c
    166  114c		       a9 74		      LDA	#116
    167  114e		       85 88		      STA	player4x
    168  1150				   .L028		;  player4y = 100
    169  1150
    170  1150		       a9 64		      LDA	#100
    171  1152		       85 91		      STA	player4y
    172  1154				   .
    173  1154							; 
    174  1154
    175  1154				   .L029		;  player5x = 100
    176  1154
    177  1154		       a9 64		      LDA	#100
    178  1156		       85 89		      STA	player5x
    179  1158				   .L030		;  player5y =	200
    180  1158
    181  1158		       a9 c8		      LDA	#200
    182  115a		       85 92		      STA	player5y
    183  115c				   .L031		;  missile0y = 100
    184  115c
    185  115c		       a9 64		      LDA	#100
    186  115e		       85 8a		      STA	missile0y
    187  1160				   .
    188  1160							; 
    189  1160
    190  1160				   .
    191  1160							; 
    192  1160
    193  1160				   .L032		;  missile1y = 200
    194  1160
    195  1160		       a9 c8		      LDA	#200
    196  1162		       85 8b		      STA	missile1y
    197  1164				   .L033		;  missile1x = 50
    198  1164
    199  1164		       a9 32		      LDA	#50
    200  1166		       85 81		      STA	missile1x
    201  1168				   .
    202  1168							; 
    203  1168
    204  1168				   .
    205  1168							; 
    206  1168
    207  1168				   .
    208  1168							; 
    209  1168
    210  1168				   .
    211  1168							; 
    212  1168
    213  1168				   .L034		;  dim _P0_Luminosity	=  a.b
    214  1168
    215  1168				   .L035		;  dim asteroidY  =  player1y.b
    216  1168
    217  1168				   .L036		;  dim asteroid2Y  =  player2y.c
    218  1168
    219  1168				   .L037		;  dim asteroid3Y  =  player3y.d
    220  1168
    221  1168				   .L038		;  dim asteroid4Y  =  player4y.e
    222  1168
    223  1168				   .L039		;  dim explosionTicker  =  f
    224  1168
    225  1168				   .
    226  1168							; 
    227  1168
    228  1168				   .L040		;  dim asteroidx  =  player1x.h
    229  1168
    230  1168				   .L041		;  dim asteroid2x  =  player2x.i
    231  1168
    232  1168				   .L042		;  dim asteroid3x  =  player3x.j
    233  1168
    234  1168				   .L043		;  dim asteroid4x  =  player4x.k
    235  1168
    236  1168				   .L044		;  dim bulletMultiplier  =  l
    237  1168
    238  1168				   .L045		;  dim killCount  =  m
    239  1168
    240  1168				   .L046		;  dim ticker	=  n
    241  1168
    242  1168				   .L047		;  dim powerUpInPlay  =  o
    243  1168
    244  1168				   .L048		;  dim altSprite  =  p
    245  1168
    246  1168				   .L049		;  dim firstFrame  =  r
    247  1168
    248  1168				   .L050		;  dim _High_Score3  =  s
    249  1168
    250  1168				   .L051		;  dim _High_Score1  =  t
    251  1168
    252  1168				   .L052		;  dim _High_Score2  =  u
    253  1168
    254  1168				   .L053		;  dim _resetTicker  =  x
    255  1168
    256  1168				   .L054		;  dim gameReady  =  z
    257  1168
    258  1168				   .
    259  1168							; 
    260  1168
    261  1168				   .L055		;  dim _Bit6_Sequence_Switch  =  y
    262  1168
    263  1168				   .
    264  1168							; 
    265  1168
    266  1168				   .L056		;  dim _sc1  =  score
    267  1168
    268  1168				   .L057		;  dim _sc2  =  score + 1
    269  1168
    270  1168				   .L058		;  dim _sc3  =  score + 2
    271  1168
    272  1168				   .L059		;  dim titlescreencolor  =  $F0
    273  1168
    274  1168				   .
    275  1168							; 
    276  1168
    277  1168				   .
    278  1168							; 
    279  1168
    280  1168				   .
    281  1168							; 
    282  1168
    283  1168				   .
    284  1168							; 
    285  1168
    286  1168				   .
    287  1168							; 
    288  1168
    289  1168				   .L060		;  bulletMultiplier  =  0
    290  1168
    291  1168		       a9 00		      LDA	#0
    292  116a		       85 e2		      STA	bulletMultiplier
    293  116c				   .L061		;  _High_Score1  =  _sc1
    294  116c
    295  116c		       a5 d2		      LDA	_sc1
    296  116e		       85 ea		      STA	_High_Score1
    297  1170				   .L062		;  _High_Score2  =  _sc2
    298  1170
    299  1170		       a5 d3		      LDA	_sc2
    300  1172		       85 eb		      STA	_High_Score2
    301  1174				   .L063		;  _High_Score3  =  _sc3
    302  1174
    303  1174		       a5 d4		      LDA	_sc3
    304  1176		       85 e9		      STA	_High_Score3
    305  1178				   .L064		;  lives  =  192
    306  1178
    307  1178		       a9 c0		      LDA	#192
    308  117a		       85 c2		      STA	lives
    309  117c				   .L065		;  ticker  =  0
    310  117c
    311  117c		       a9 00		      LDA	#0
    312  117e		       85 e4		      STA	ticker
    313  1180				   .L066		;  _resetTicker  =  0
    314  1180
    315  1180		       a9 00		      LDA	#0
    316  1182		       85 ee		      STA	_resetTicker
    317  1184				   .L067		;  altSprite  =  0
    318  1184
    319  1184		       a9 00		      LDA	#0
    320  1186		       85 e6		      STA	altSprite
    321  1188				   .L068		;  explosionTicker  =	0
    322  1188
    323  1188		       a9 00		      LDA	#0
    324  118a		       85 dc		      STA	explosionTicker
    325  118c				   .L069		;  scorecolor	=  $1b
    326  118c
    327  118c		       a9 1b		      LDA	#$1b
    328  118e		       85 d5		      STA	scorecolor
    329  1190				   .L070		;  firstFrame	=  0
    330  1190
    331  1190		       a9 00		      LDA	#0
    332  1192		       85 e8		      STA	firstFrame
    333  1194				   .
    334  1194							; 
    335  1194
    336  1194				   .L071		;  killCount  =  0
    337  1194
    338  1194		       a9 00		      LDA	#0
    339  1196		       85 e3		      STA	killCount
    340  1198				   .L072		;  powerUpInPlay  =  0
    341  1198
    342  1198		       a9 00		      LDA	#0
    343  119a		       85 e5		      STA	powerUpInPlay
    344  119c				   .sprites
    345  119c							; sprites
    346  119c
    347  119c				   .L073		;  ticker  =  ticker  +  1
    348  119c
    349  119c		       e6 e4		      INC	ticker
    350  119e				   .L074		;  if ticker  >  10 then COLUBK  =  $0  :  ticker  =  0  :  AUDV0  =  0  :  AUDC0  =  0  :  AUDF0  =  0
    351  119e
    352  119e		       a9 0a		      LDA	#10
    353  11a0		       c5 e4		      CMP	ticker
    354  11a2		       b0 0e		      BCS	.skipL074
    355  11a4				   .condpart0
    356  11a4		       a9 00		      LDA	#$0
    357  11a6		       85 09		      STA	COLUBK
    358  11a8		       a9 00		      LDA	#0
    359  11aa		       85 e4		      STA	ticker
    360  11ac		       85 19		      STA	AUDV0
    361  11ae		       85 15		      STA	AUDC0
    362  11b0		       85 17		      STA	AUDF0
    363  11b2				   .skipL074
    364  11b2				   .
    365  11b2							; 
    366  11b2
    367  11b2				   .
    368  11b2							; 
    369  11b2
    370  11b2				   .
    371  11b2							; 
    372  11b2
    373  11b2				   .
    374  11b2							; 
    375  11b2
    376  11b2				   .
    377  11b2							; 
    378  11b2
    379  11b2				   .L075		;  if player1y  =  100  ||  player1y  =  0 then goto setPlayer1Color
    380  11b2
    381  11b2		       a5 8e		      LDA	player1y
    382  11b4		       c9 64		      CMP	#100
    383  11b6		       d0 03		      BNE	.skipL075
    384  11b8				   .condpart1
    385  11b8		       4c c1 d1 	      jmp	.condpart2
    386  11bb				   .skipL075
    387  11bb		       a5 8e		      LDA	player1y
    388  11bd		       c9 00		      CMP	#0
    389  11bf		       d0 03		      BNE	.skip0OR
    390  11c1				   .condpart2
    391  11c1		       4c e7 dc 	      jmp	.setPlayer1Color
    392  11c4
    393  11c4				   .skip0OR
    394  11c4				   .L076		;  if player2y  =  100  ||  player2y  =  0 then goto setPlayer2Color
    395  11c4
    396  11c4		       a5 8f		      LDA	player2y
    397  11c6		       c9 64		      CMP	#100
    398  11c8		       d0 03		      BNE	.skipL076
    399  11ca				   .condpart3
    400  11ca		       4c d3 d1 	      jmp	.condpart4
    401  11cd				   .skipL076
    402  11cd		       a5 8f		      LDA	player2y
    403  11cf		       c9 00		      CMP	#0
    404  11d1		       d0 03		      BNE	.skip1OR
    405  11d3				   .condpart4
    406  11d3		       4c 45 dd 	      jmp	.setPlayer2Color
    407  11d6
    408  11d6				   .skip1OR
    409  11d6				   .L077		;  if player3y  =  100  ||  player4y  =  0 then goto setPlayer3Color
    410  11d6
    411  11d6		       a5 90		      LDA	player3y
    412  11d8		       c9 64		      CMP	#100
    413  11da		       d0 03		      BNE	.skipL077
    414  11dc				   .condpart5
    415  11dc		       4c e5 d1 	      jmp	.condpart6
    416  11df				   .skipL077
    417  11df		       a5 91		      LDA	player4y
    418  11e1		       c9 00		      CMP	#0
    419  11e3		       d0 03		      BNE	.skip2OR
    420  11e5				   .condpart6
    421  11e5		       4c d0 dd 	      jmp	.setPlayer3Color
    422  11e8
    423  11e8				   .skip2OR
    424  11e8				   .L078		;  if player4y  =  100  ||  player5y  =  0 then goto setPlayer4Color
    425  11e8
    426  11e8		       a5 91		      LDA	player4y
    427  11ea		       c9 64		      CMP	#100
    428  11ec		       d0 03		      BNE	.skipL078
    429  11ee				   .condpart7
    430  11ee		       4c f7 d1 	      jmp	.condpart8
    431  11f1				   .skipL078
    432  11f1		       a5 92		      LDA	player5y
    433  11f3		       c9 00		      CMP	#0
    434  11f5		       d0 03		      BNE	.skip3OR
    435  11f7				   .condpart8
    436  11f7		       4c 41 de 	      jmp	.setPlayer4Color
    437  11fa
    438  11fa				   .skip3OR
    439  11fa				   .
    440  11fa							; 
    441  11fa
    442  11fa				   .colorSetComplete
    443  11fa							; colorSetComplete
    444  11fa
    445  11fa				   .L079		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    446  11fa
    447  11fa		       a5 92		      LDA	player5y
    448  11fc		       c9 c8		      CMP	#200
    449  11fe		       b0 02		      BCS	.skipL079
    450  1200				   .condpart9
    451  1200		       e6 dc		      INC	explosionTicker
    452  1202				   .skipL079
    453  1202				   .L080		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    454  1202
    455  1202		       a9 01		      LDA	#1
    456  1204		       c5 dc		      CMP	explosionTicker
    457  1206		       b0 0e		      BCS	.skipL080
    458  1208				   .condpart10
    459  1208		       a9 c8		      LDA	#200
    460  120a		       85 92		      STA	player5y
    461  120c		       a9 00		      LDA	#0
    462  120e		       85 dc		      STA	explosionTicker
    463  1210		       85 19		      STA	AUDV0
    464  1212		       85 15		      STA	AUDC0
    465  1214		       85 17		      STA	AUDF0
    466  1216				   .skipL080
    467  1216				   .
    468  1216							; 
    469  1216
    470  1216				   .L081		;  if player4y  <  85	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    471  1216
    472  1216		       a5 91		      LDA	player4y
    473  1218		       c9 55		      CMP	#85
    474  121a		       b0 11		      BCS	.skipL081
    475  121c				   .condpart11
    476  121c		       a9 96		      LDA	#150
    477  121e		       c5 8b		      CMP	missile1y
    478  1220		       b0 0b		      BCS	.skip11then
    479  1222				   .condpart12
    480  1222		       a5 91		      LDA	player4y
    481  1224		       85 8b		      STA	missile1y
    482  1226		       a5 88		      LDA	player4x
    483  1228		       38		      SEC
    484  1229		       e9 03		      SBC	#3
    485  122b		       85 81		      STA	missile1x
    486  122d				   .skip11then
    487  122d				   .skipL081
    488  122d				   .L082		;  if player3y  <  85	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    489  122d
    490  122d		       a5 90		      LDA	player3y
    491  122f		       c9 55		      CMP	#85
    492  1231		       b0 11		      BCS	.skipL082
    493  1233				   .condpart13
    494  1233		       a9 96		      LDA	#150
    495  1235		       c5 8b		      CMP	missile1y
    496  1237		       b0 0b		      BCS	.skip13then
    497  1239				   .condpart14
    498  1239		       a5 90		      LDA	player3y
    499  123b		       85 8b		      STA	missile1y
    500  123d		       a5 87		      LDA	player3x
    501  123f		       38		      SEC
    502  1240		       e9 03		      SBC	#3
    503  1242		       85 81		      STA	missile1x
    504  1244				   .skip13then
    505  1244				   .skipL082
    506  1244				   .
    507  1244							; 
    508  1244
    509  1244				   .L083		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    510  1244
    511  1244		       a9 1e		      LDA	#30
    512  1246		       c5 8a		      CMP	missile0y
    513  1248		       b0 15		      BCS	.skipL083
    514  124a				   .condpart15
    515  124a		       a5 8a		      LDA	missile0y
    516  124c		       c9 3c		      CMP	#60
    517  124e		       b0 0f		      BCS	.skip15then
    518  1250				   .condpart16
    519  1250		       a9 02		      LDA	#2
    520  1252		       85 1a		      STA	AUDV1
    521  1254		       a9 0c		      LDA	#12
    522  1256		       85 16		      STA	AUDC1
    523  1258		       a9 07		      LDA	#7
    524  125a		       85 18		      STA	AUDF1
    525  125c		       4c 67 d2 	      jmp	.skipelse0
    526  125f				   .skip15then
    527  125f				   .skipL083
    528  125f		       a9 00		      LDA	#0
    529  1261		       85 1a		      STA	AUDV1
    530  1263		       85 16		      STA	AUDC1
    531  1265		       85 17		      STA	AUDF0
    532  1267				   .skipelse0
    533  1267				   .
    534  1267							; 
    535  1267
    536  1267				   .L084		;  if player0x  >   ( player1x  -  20 )   &&  player0x  <   ( player1x  +  1 )   &&  player0y	>   ( player1y	-  10 )   &&  player0y	<   ( player1y	+  15 )   &&  powerUpInPlay  =	1 then goto handlePowerUp
    537  1267
    538  1267							; complex condition detected
    539  1267							; complex statement detected
    540  1267		       a5 85		      LDA	player1x
    541  1269		       38		      SEC
    542  126a		       e9 14		      SBC	#20
    543  126c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    544  126c		       c5 84		      CMP	player0x
    545  126e		       b0 2e		      BCS	.skipL084
    546  1270				   .condpart17
    547  1270							; complex condition detected
    548  1270							; complex statement detected
    549  1270		       a5 85		      LDA	player1x
    550  1272		       18		      CLC
    551  1273		       69 01		      ADC	#1
    552  1275		       48		      PHA
    553  1276		       ba		      TSX
    554  1277		       68		      PLA
    555  1278		       a5 84		      LDA	player0x
    556  127a		       d5 01		      CMP	1,x
    557  127c		       b0 20		      BCS	.skip17then
    558  127e				   .condpart18
    559  127e							; complex condition detected
    560  127e							; complex statement detected
    561  127e		       a5 8e		      LDA	player1y
    562  1280		       38		      SEC
    563  1281		       e9 0a		      SBC	#10
    564  1283							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    565  1283		       c5 8d		      CMP	player0y
    566  1285		       b0 17		      BCS	.skip18then
    567  1287				   .condpart19
    568  1287							; complex condition detected
    569  1287							; complex statement detected
    570  1287		       a5 8e		      LDA	player1y
    571  1289		       18		      CLC
    572  128a		       69 0f		      ADC	#15
    573  128c		       48		      PHA
    574  128d		       ba		      TSX
    575  128e		       68		      PLA
    576  128f		       a5 8d		      LDA	player0y
    577  1291		       d5 01		      CMP	1,x
    578  1293		       b0 09		      BCS	.skip19then
    579  1295				   .condpart20
    580  1295		       a5 e5		      LDA	powerUpInPlay
    581  1297		       c9 01		      CMP	#1
    582  1299		       d0 03		      BNE	.skip20then
    583  129b				   .condpart21
    584  129b		       4c c6 d2 	      jmp	.handlePowerUp
    585  129e
    586  129e				   .skip20then
    587  129e				   .skip19then
    588  129e				   .skip18then
    589  129e				   .skip17then
    590  129e				   .skipL084
    591  129e				   .
    592  129e							; 
    593  129e
    594  129e				   .L085		;  if collision(missile1,player0) then goto killPlayer
    595  129e
    596  129e		       24 01		      bit	CXM1P
    597  12a0		       10 03		      BPL	.skipL085
    598  12a2				   .condpart22
    599  12a2		       4c ee de 	      jmp	.killPlayer
    600  12a5
    601  12a5				   .skipL085
    602  12a5				   .L086		;  if collision(player0,player1) then goto killPlayer
    603  12a5
    604  12a5		       24 07		      bit	CXPPMM
    605  12a7		       10 03		      BPL	.skipL086
    606  12a9				   .condpart23
    607  12a9		       4c ee de 	      jmp	.killPlayer
    608  12ac
    609  12ac				   .skipL086
    610  12ac				   .L087		;  if _resetTicker  >	0 then goto killPlayer
    611  12ac
    612  12ac		       a9 00		      LDA	#0
    613  12ae		       c5 ee		      CMP	_resetTicker
    614  12b0		       b0 03		      BCS	.skipL087
    615  12b2				   .condpart24
    616  12b2		       4c ee de 	      jmp	.killPlayer
    617  12b5
    618  12b5				   .skipL087
    619  12b5				   .L088		;  if missile1y  <  150  &&  _resetTicker  =  0 then missile1y  =  missile1y  - 1
    620  12b5
    621  12b5		       a5 8b		      LDA	missile1y
    622  12b7		       c9 96		      CMP	#150
    623  12b9		       b0 08		      BCS	.skipL088
    624  12bb				   .condpart25
    625  12bb		       a5 ee		      LDA	_resetTicker
    626  12bd		       c9 00		      CMP	#0
    627  12bf		       d0 02		      BNE	.skip25then
    628  12c1				   .condpart26
    629  12c1		       c6 8b		      DEC	missile1y
    630  12c3				   .skip25then
    631  12c3				   .skipL088
    632  12c3				   .L089		;  goto titlepage
    633  12c3
    634  12c3		       4c 47 d3 	      jmp	.titlepage
    635  12c6
    636  12c6				   .
    637  12c6							; 
    638  12c6
    639  12c6				   .handlePowerUp
    640  12c6							; handlePowerUp
    641  12c6
    642  12c6				   .L090		;  player1y  =  100
    643  12c6
    644  12c6		       a9 64		      LDA	#100
    645  12c8		       85 8e		      STA	player1y
    646  12ca				   .L091		;  player2y  =  100
    647  12ca
    648  12ca		       a9 64		      LDA	#100
    649  12cc		       85 8f		      STA	player2y
    650  12ce				   .L092		;  player3y  =  100
    651  12ce
    652  12ce		       a9 64		      LDA	#100
    653  12d0		       85 90		      STA	player3y
    654  12d2				   .L093		;  player4y  =  100
    655  12d2
    656  12d2		       a9 64		      LDA	#100
    657  12d4		       85 91		      STA	player4y
    658  12d6				   .L094		;  player1x  =  player1x  +   ( ticker  *  12 ) 
    659  12d6
    660  12d6							; complex statement detected
    661  12d6		       a5 85		      LDA	player1x
    662  12d8		       48		      PHA
    663  12d9		       a5 e4		      LDA	ticker
    664  12db		       0a		      asl
    665  12dc		       18		      clc
    666  12dd		       65 e4		      adc	ticker
    667  12df		       0a		      asl
    668  12e0		       0a		      asl
    669  12e1		       ba		      TSX
    670  12e2		       e8		      INX
    671  12e3		       9a		      TXS
    672  12e4		       18		      CLC
    673  12e5		       75 00		      ADC	$00,x
    674  12e7		       85 85		      STA	player1x
    675  12e9				   .L095		;  player2x  =  player2x  +   ( ticker  *  12 ) 
    676  12e9
    677  12e9							; complex statement detected
    678  12e9		       a5 86		      LDA	player2x
    679  12eb		       48		      PHA
    680  12ec		       a5 e4		      LDA	ticker
    681  12ee		       0a		      asl
    682  12ef		       18		      clc
    683  12f0		       65 e4		      adc	ticker
    684  12f2		       0a		      asl
    685  12f3		       0a		      asl
    686  12f4		       ba		      TSX
    687  12f5		       e8		      INX
    688  12f6		       9a		      TXS
    689  12f7		       18		      CLC
    690  12f8		       75 00		      ADC	$00,x
    691  12fa		       85 86		      STA	player2x
    692  12fc				   .L096		;  player3x  =  player3x  +   ( ticker  *  12 ) 
    693  12fc
    694  12fc							; complex statement detected
    695  12fc		       a5 87		      LDA	player3x
    696  12fe		       48		      PHA
    697  12ff		       a5 e4		      LDA	ticker
    698  1301		       0a		      asl
    699  1302		       18		      clc
    700  1303		       65 e4		      adc	ticker
    701  1305		       0a		      asl
    702  1306		       0a		      asl
    703  1307		       ba		      TSX
    704  1308		       e8		      INX
    705  1309		       9a		      TXS
    706  130a		       18		      CLC
    707  130b		       75 00		      ADC	$00,x
    708  130d		       85 87		      STA	player3x
    709  130f				   .L097		;  asteroid4x	=  116
    710  130f
    711  130f		       a9 00		      LDA	#0
    712  1311		       85 e1		      STA	k
    713  1313		       a9 74		      LDA	#116
    714  1315		       85 88		      STA	asteroid4x
    715  1317				   .L098		;  score  =  score  +	50
    716  1317
    717  1317		       f8		      SED
    718  1318		       18		      CLC
    719  1319		       a5 d4		      LDA	score+2
    720  131b		       69 50		      ADC	#$50
    721  131d		       85 d4		      STA	score+2
    722  131f		       a5 d3		      LDA	score+1
    723  1321		       69 00		      ADC	#$00
    724  1323		       85 d3		      STA	score+1
    725  1325		       a5 d2		      LDA	score
    726  1327		       69 00		      ADC	#$00
    727  1329		       85 d2		      STA	score
    728  132b		       d8		      CLD
    729  132c				   .L099		;  COLUBK  =  $1f
    730  132c
    731  132c		       a9 1f		      LDA	#$1f
    732  132e		       85 09		      STA	COLUBK
    733  1330				   .L0100		;  ticker  =  5
    734  1330
    735  1330		       a9 05		      LDA	#5
    736  1332		       85 e4		      STA	ticker
    737  1334				   .L0101		;  lives  =  192
    738  1334
    739  1334		       a9 c0		      LDA	#192
    740  1336		       85 c2		      STA	lives
    741  1338				   .L0102		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
    742  1338
    743  1338		       a9 0c		      LDA	#12
    744  133a		       85 19		      STA	AUDV0
    745  133c		       a9 08		      LDA	#8
    746  133e		       85 15		      STA	AUDC0
    747  1340		       a9 1c		      LDA	#28
    748  1342		       85 17		      STA	AUDF0
    749  1344				   .L0103		;  goto frameReset
    750  1344
    751  1344		       4c 52 d7 	      jmp	.frameReset
    752  1347
    753  1347				   .
    754  1347							; 
    755  1347
    756  1347				   .titlepage
    757  1347							; titlepage
    758  1347
    759  1347				   .L0104		;  if joy0fire  ||  switchreset then gameReady  =  1
    760  1347
    761  1347		       24 0c		      bit	INPT4
    762  1349		       30 03		      BMI	.skipL0104
    763  134b				   .condpart27
    764  134b		       4c 55 d3 	      jmp	.condpart28
    765  134e				   .skipL0104
    766  134e		       a9 01		      lda	#1
    767  1350		       2c 82 02 	      bit	SWCHB
    768  1353		       d0 04		      BNE	.skip12OR
    769  1355				   .condpart28
    770  1355		       a9 01		      LDA	#1
    771  1357		       85 f0		      STA	gameReady
    772  1359				   .skip12OR
    773  1359				   .L0105		;  if gameReady  =  1 then goto gamestart
    774  1359
    775  1359		       a5 f0		      LDA	gameReady
    776  135b		       c9 01		      CMP	#1
    777  135d		       d0 03		      BNE	.skipL0105
    778  135f				   .condpart29
    779  135f		       4c 95 d3 	      jmp	.gamestart
    780  1362
    781  1362				   .skipL0105
    782  1362				   .L0106		;  gosub titledrawscreen bank2
    783  1362
    784  1362		       85 d1		      sta	temp7
    785  1364		       a9 d3		      lda	#>(ret_point1-1)
    786  1366		       48		      pha
    787  1367		       a9 79		      lda	#<(ret_point1-1)
    788  1369		       48		      pha
    789  136a		       a9 f4		      lda	#>(.titledrawscreen-1)
    790  136c		       48		      pha
    791  136d		       a9 40		      lda	#<(.titledrawscreen-1)
    792  136f		       48		      pha
    793  1370		       a5 d1		      lda	temp7
    794  1372		       48		      pha
    795  1373		       8a		      txa
    796  1374		       48		      pha
    797  1375		       a2 02		      ldx	#2
    798  1377		       4c eb ff 	      jmp	BS_jsr
    799  137a				   ret_point1
    800  137a				   .L0107		;  _sc1  =  0
    801  137a
    802  137a		       a9 00		      LDA	#0
    803  137c		       85 d2		      STA	_sc1
    804  137e				   .L0108		;  _sc2  =  0
    805  137e
    806  137e		       a9 00		      LDA	#0
    807  1380		       85 d3		      STA	_sc2
    808  1382				   .L0109		;  _sc3  =  0
    809  1382
    810  1382		       a9 00		      LDA	#0
    811  1384		       85 d4		      STA	_sc3
    812  1386				   .L0110		;  _sc1  =  _High_Score1
    813  1386
    814  1386		       a5 ea		      LDA	_High_Score1
    815  1388		       85 d2		      STA	_sc1
    816  138a				   .L0111		;  _sc2  =  _High_Score2
    817  138a
    818  138a		       a5 eb		      LDA	_High_Score2
    819  138c		       85 d3		      STA	_sc2
    820  138e				   .L0112		;  _sc3  =  _High_Score3
    821  138e
    822  138e		       a5 e9		      LDA	_High_Score3
    823  1390		       85 d4		      STA	_sc3
    824  1392				   .
    825  1392							; 
    826  1392
    827  1392				   .L0113		;  goto titlepage
    828  1392
    829  1392		       4c 47 d3 	      jmp	.titlepage
    830  1395
    831  1395				   .
    832  1395							; 
    833  1395
    834  1395				   .gamestart
    835  1395							; gamestart
    836  1395
    837  1395				   .L0114		;  CTRLPF  =  1
    838  1395
    839  1395		       a9 01		      LDA	#1
    840  1397		       85 0a		      STA	CTRLPF
    841  1399				   .
    842  1399							; 
    843  1399
    844  1399				   .L0115		;  if firstFrame  =  0 then missile0x	=  200	:  missile0y  =  200 :	_sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1 :  lives  =	192 :  bulletMultiplier  =  0 :  killCount  =  0
    845  1399
    846  1399		       a5 e8		      LDA	firstFrame
    847  139b		       c9 00		      CMP	#0
    848  139d		       d0 1c		      BNE	.skipL0115
    849  139f				   .condpart30
    850  139f		       a9 c8		      LDA	#200
    851  13a1		       85 80		      STA	missile0x
    852  13a3		       85 8a		      STA	missile0y
    853  13a5		       a9 00		      LDA	#0
    854  13a7		       85 d2		      STA	_sc1
    855  13a9		       85 d3		      STA	_sc2
    856  13ab		       85 d4		      STA	_sc3
    857  13ad		       a9 01		      LDA	#1
    858  13af		       85 e8		      STA	firstFrame
    859  13b1		       a9 c0		      LDA	#192
    860  13b3		       85 c2		      STA	lives
    861  13b5		       a9 00		      LDA	#0
    862  13b7		       85 e2		      STA	bulletMultiplier
    863  13b9		       85 e3		      STA	killCount
    864  13bb				   .skipL0115
    865  13bb				   .
    866  13bb							; 
    867  13bb
    868  13bb				   .L0116		;  lives:
    869  13bb
    870  13bb		       a9 84		      LDA	#<lives__L0116
    871  13bd		       85 c1		      STA	lifepointer
    872  13bf		       a5 c2		      LDA	lifepointer+1
    873  13c1		       29 e0		      AND	#$E0
    874  13c3		       09 1a		      ORA	#(>lives__L0116)&($1F)
    875  13c5		       85 c2		      STA	lifepointer+1
    876  13c7				   .
    877  13c7							; 
    878  13c7
    879  13c7				   .L0117		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    880  13c7
    881  13c7		       a5 ea		      LDA	_High_Score1
    882  13c9		       c5 d2		      CMP	_sc1
    883  13cb		       b0 03		      BCS	.skipL0117
    884  13cd				   .condpart31
    885  13cd		       4c 00 d4 	      jmp	.__New_High_Score
    886  13d0
    887  13d0				   .skipL0117
    888  13d0				   .L0118		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    889  13d0
    890  13d0		       a5 d2		      LDA	_sc1
    891  13d2		       c5 ea		      CMP	_High_Score1
    892  13d4		       b0 03		      BCS	.skipL0118
    893  13d6				   .condpart32
    894  13d6		       4c 0c d4 	      jmp	.__Skip_High_Score
    895  13d9
    896  13d9				   .skipL0118
    897  13d9				   .L0119		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    898  13d9
    899  13d9		       a5 eb		      LDA	_High_Score2
    900  13db		       c5 d3		      CMP	_sc2
    901  13dd		       b0 03		      BCS	.skipL0119
    902  13df				   .condpart33
    903  13df		       4c 00 d4 	      jmp	.__New_High_Score
    904  13e2
    905  13e2				   .skipL0119
    906  13e2				   .L0120		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    907  13e2
    908  13e2		       a5 d3		      LDA	_sc2
    909  13e4		       c5 eb		      CMP	_High_Score2
    910  13e6		       b0 03		      BCS	.skipL0120
    911  13e8				   .condpart34
    912  13e8		       4c 0c d4 	      jmp	.__Skip_High_Score
    913  13eb
    914  13eb				   .skipL0120
    915  13eb				   .
    916  13eb							; 
    917  13eb
    918  13eb				   .L0121		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    919  13eb
    920  13eb		       a5 e9		      LDA	_High_Score3
    921  13ed		       c5 d4		      CMP	_sc3
    922  13ef		       b0 03		      BCS	.skipL0121
    923  13f1				   .condpart35
    924  13f1		       4c 00 d4 	      jmp	.__New_High_Score
    925  13f4
    926  13f4				   .skipL0121
    927  13f4				   .L0122		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    928  13f4
    929  13f4		       a5 d4		      LDA	_sc3
    930  13f6		       c5 e9		      CMP	_High_Score3
    931  13f8		       b0 03		      BCS	.skipL0122
    932  13fa				   .condpart36
    933  13fa		       4c 0c d4 	      jmp	.__Skip_High_Score
    934  13fd
    935  13fd				   .skipL0122
    936  13fd				   .
    937  13fd							; 
    938  13fd
    939  13fd				   .L0123		;  goto __Skip_High_Score
    940  13fd
    941  13fd		       4c 0c d4 	      jmp	.__Skip_High_Score
    942  1400
    943  1400				   .
    944  1400							; 
    945  1400
    946  1400				   .
    947  1400							; 
    948  1400
    949  1400				   .__New_High_Score
    950  1400							; __New_High_Score
    951  1400
    952  1400				   .
    953  1400							; 
    954  1400
    955  1400				   .L0124		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    956  1400
    957  1400		       a5 d2		      LDA	_sc1
    958  1402		       85 ea		      STA	_High_Score1
    959  1404		       a5 d3		      LDA	_sc2
    960  1406		       85 eb		      STA	_High_Score2
    961  1408		       a5 d4		      LDA	_sc3
    962  140a		       85 e9		      STA	_High_Score3
    963  140c				   .__Skip_High_Score
    964  140c							; __Skip_High_Score
    965  140c
    966  140c				   .
    967  140c							; 
    968  140c
    969  140c				   .L0125		;  if ticker  <  5 then player0: 
    970  140c
    971  140c		       a5 e4		      LDA	ticker
    972  140e		       c9 05		      CMP	#5
    973  1410		       b0 0c		      BCS	.skipL0125
    974  1412				   .condpart37
    975  1412		       a2 8c		      LDX	#<player37then_0
    976  1414		       86 a2		      STX	player0pointerlo
    977  1416		       a9 fa		      LDA	#>player37then_0
    978  1418		       85 a3		      STA	player0pointerhi
    979  141a		       a9 09		      LDA	#9
    980  141c		       85 b0		      STA	player0height
    981  141e				   .skipL0125
    982  141e				   .
    983  141e							; 
    984  141e
    985  141e				   .L0126		;  if ticker  >=  5 then player0: 
    986  141e
    987  141e		       a5 e4		      LDA	ticker
    988  1420		       c9 05		      CMP	#5
    989  1422		       90 0c		      BCC	.skipL0126
    990  1424				   .condpart38
    991  1424		       a2 95		      LDX	#<player38then_0
    992  1426		       86 a2		      STX	player0pointerlo
    993  1428		       a9 fa		      LDA	#>player38then_0
    994  142a		       85 a3		      STA	player0pointerhi
    995  142c		       a9 09		      LDA	#9
    996  142e		       85 b0		      STA	player0height
    997  1430				   .skipL0126
    998  1430				   .
    999  1430							; 
   1000  1430
   1001  1430				   .L0127		;  if powerUpInPlay  =  1 then player1:
   1002  1430
   1003  1430		       a5 e5		      LDA	powerUpInPlay
   1004  1432		       c9 01		      CMP	#1
   1005  1434		       d0 0c		      BNE	.skipL0127
   1006  1436				   .condpart39
   1007  1436		       a2 9e		      LDX	#<player39then_1
   1008  1438		       86 a6		      STX	player1pointerlo
   1009  143a		       a9 fa		      LDA	#>player39then_1
   1010  143c		       85 ab		      STA	player1pointerhi
   1011  143e		       a9 09		      LDA	#9
   1012  1440		       85 b1		      STA	player1height
   1013  1442				   .skipL0127
   1014  1442				   .
   1015  1442							; 
   1016  1442
   1017  1442				   .L0128		;  if powerUpInPlay  =  0  &&	ticker	<  5 then player1:
   1018  1442
   1019  1442		       a5 e5		      LDA	powerUpInPlay
   1020  1444		       c9 00		      CMP	#0
   1021  1446		       d0 12		      BNE	.skipL0128
   1022  1448				   .condpart40
   1023  1448		       a5 e4		      LDA	ticker
   1024  144a		       c9 05		      CMP	#5
   1025  144c		       b0 0c		      BCS	.skip40then
   1026  144e				   .condpart41
   1027  144e		       a2 a6		      LDX	#<player41then_1
   1028  1450		       86 a6		      STX	player1pointerlo
   1029  1452		       a9 fa		      LDA	#>player41then_1
   1030  1454		       85 ab		      STA	player1pointerhi
   1031  1456		       a9 09		      LDA	#9
   1032  1458		       85 b1		      STA	player1height
   1033  145a				   .skip40then
   1034  145a				   .skipL0128
   1035  145a				   .
   1036  145a							; 
   1037  145a
   1038  145a				   .L0129		;  if powerUpInPlay  =  0  &&	ticker	>=  5 then player1:
   1039  145a
   1040  145a		       a5 e5		      LDA	powerUpInPlay
   1041  145c		       c9 00		      CMP	#0
   1042  145e		       d0 12		      BNE	.skipL0129
   1043  1460				   .condpart42
   1044  1460		       a5 e4		      LDA	ticker
   1045  1462		       c9 05		      CMP	#5
   1046  1464		       90 0c		      BCC	.skip42then
   1047  1466				   .condpart43
   1048  1466		       a2 ae		      LDX	#<player43then_1
   1049  1468		       86 a6		      STX	player1pointerlo
   1050  146a		       a9 fa		      LDA	#>player43then_1
   1051  146c		       85 ab		      STA	player1pointerhi
   1052  146e		       a9 09		      LDA	#9
   1053  1470		       85 b1		      STA	player1height
   1054  1472				   .skip42then
   1055  1472				   .skipL0129
   1056  1472				   .
   1057  1472							; 
   1058  1472
   1059  1472				   .L0130		;  if ticker  <  5 then player2:
   1060  1472
   1061  1472		       a5 e4		      LDA	ticker
   1062  1474		       c9 05		      CMP	#5
   1063  1476		       b0 0c		      BCS	.skipL0130
   1064  1478				   .condpart44
   1065  1478		       a2 b6		      LDX	#<player44then_2
   1066  147a		       86 a7		      STX	player2pointerlo
   1067  147c		       a9 fa		      LDA	#>player44then_2
   1068  147e		       85 ac		      STA	player2pointerhi
   1069  1480		       a9 09		      LDA	#9
   1070  1482		       85 b2		      STA	player2height
   1071  1484				   .skipL0130
   1072  1484				   .
   1073  1484							; 
   1074  1484
   1075  1484				   .L0131		;  if ticker  >=  5 then player2:
   1076  1484
   1077  1484		       a5 e4		      LDA	ticker
   1078  1486		       c9 05		      CMP	#5
   1079  1488		       90 0c		      BCC	.skipL0131
   1080  148a				   .condpart45
   1081  148a		       a2 be		      LDX	#<player45then_2
   1082  148c		       86 a7		      STX	player2pointerlo
   1083  148e		       a9 fa		      LDA	#>player45then_2
   1084  1490		       85 ac		      STA	player2pointerhi
   1085  1492		       a9 09		      LDA	#9
   1086  1494		       85 b2		      STA	player2height
   1087  1496				   .skipL0131
   1088  1496				   .
   1089  1496							; 
   1090  1496
   1091  1496				   .L0132		;  if ticker  <  3 then player3: 
   1092  1496
   1093  1496		       a5 e4		      LDA	ticker
   1094  1498		       c9 03		      CMP	#3
   1095  149a		       b0 0c		      BCS	.skipL0132
   1096  149c				   .condpart46
   1097  149c		       a2 c6		      LDX	#<player46then_3
   1098  149e		       86 a8		      STX	player3pointerlo
   1099  14a0		       a9 fa		      LDA	#>player46then_3
   1100  14a2		       85 ad		      STA	player3pointerhi
   1101  14a4		       a9 09		      LDA	#9
   1102  14a6		       85 b3		      STA	player3height
   1103  14a8				   .skipL0132
   1104  14a8				   .
   1105  14a8							; 
   1106  14a8
   1107  14a8				   .L0133		;  if ticker  >= 3  &&  ticker  <  6 then player3: 
   1108  14a8
   1109  14a8		       a5 e4		      LDA	ticker
   1110  14aa		       c9 03		      CMP	#3
   1111  14ac		       90 12		      BCC	.skipL0133
   1112  14ae				   .condpart47
   1113  14ae		       a5 e4		      LDA	ticker
   1114  14b0		       c9 06		      CMP	#6
   1115  14b2		       b0 0c		      BCS	.skip47then
   1116  14b4				   .condpart48
   1117  14b4		       a2 ce		      LDX	#<player48then_3
   1118  14b6		       86 a8		      STX	player3pointerlo
   1119  14b8		       a9 fa		      LDA	#>player48then_3
   1120  14ba		       85 ad		      STA	player3pointerhi
   1121  14bc		       a9 09		      LDA	#9
   1122  14be		       85 b3		      STA	player3height
   1123  14c0				   .skip47then
   1124  14c0				   .skipL0133
   1125  14c0				   .
   1126  14c0							; 
   1127  14c0
   1128  14c0				   .L0134		;  if ticker  >=  6 then player3: 
   1129  14c0
   1130  14c0		       a5 e4		      LDA	ticker
   1131  14c2		       c9 06		      CMP	#6
   1132  14c4		       90 0c		      BCC	.skipL0134
   1133  14c6				   .condpart49
   1134  14c6		       a2 d6		      LDX	#<player49then_3
   1135  14c8		       86 a8		      STX	player3pointerlo
   1136  14ca		       a9 fa		      LDA	#>player49then_3
   1137  14cc		       85 ad		      STA	player3pointerhi
   1138  14ce		       a9 09		      LDA	#9
   1139  14d0		       85 b3		      STA	player3height
   1140  14d2				   .skipL0134
   1141  14d2				   .
   1142  14d2							; 
   1143  14d2
   1144  14d2				   .
   1145  14d2							; 
   1146  14d2
   1147  14d2				   .L0135		;  if altSprite  >  0	&&  ticker  <  5 then player2:
   1148  14d2
   1149  14d2		       a9 00		      LDA	#0
   1150  14d4		       c5 e6		      CMP	altSprite
   1151  14d6		       b0 12		      BCS	.skipL0135
   1152  14d8				   .condpart50
   1153  14d8		       a5 e4		      LDA	ticker
   1154  14da		       c9 05		      CMP	#5
   1155  14dc		       b0 0c		      BCS	.skip50then
   1156  14de				   .condpart51
   1157  14de		       a2 de		      LDX	#<player51then_2
   1158  14e0		       86 a7		      STX	player2pointerlo
   1159  14e2		       a9 fa		      LDA	#>player51then_2
   1160  14e4		       85 ac		      STA	player2pointerhi
   1161  14e6		       a9 09		      LDA	#9
   1162  14e8		       85 b2		      STA	player2height
   1163  14ea				   .skip50then
   1164  14ea				   .skipL0135
   1165  14ea				   .
   1166  14ea							; 
   1167  14ea
   1168  14ea				   .L0136		;  if altSprite  >  0	&&  ticker  >=	5 then player2:
   1169  14ea
   1170  14ea		       a9 00		      LDA	#0
   1171  14ec		       c5 e6		      CMP	altSprite
   1172  14ee		       b0 12		      BCS	.skipL0136
   1173  14f0				   .condpart52
   1174  14f0		       a5 e4		      LDA	ticker
   1175  14f2		       c9 05		      CMP	#5
   1176  14f4		       90 0c		      BCC	.skip52then
   1177  14f6				   .condpart53
   1178  14f6		       a2 e6		      LDX	#<player53then_2
   1179  14f8		       86 a7		      STX	player2pointerlo
   1180  14fa		       a9 fa		      LDA	#>player53then_2
   1181  14fc		       85 ac		      STA	player2pointerhi
   1182  14fe		       a9 09		      LDA	#9
   1183  1500		       85 b2		      STA	player2height
   1184  1502				   .skip52then
   1185  1502				   .skipL0136
   1186  1502				   .
   1187  1502							; 
   1188  1502
   1189  1502				   .
   1190  1502							; 
   1191  1502
   1192  1502				   .L0137		;  if ticker  <  5 then player4:
   1193  1502
   1194  1502		       a5 e4		      LDA	ticker
   1195  1504		       c9 05		      CMP	#5
   1196  1506		       b0 0c		      BCS	.skipL0137
   1197  1508				   .condpart54
   1198  1508		       a2 ee		      LDX	#<player54then_4
   1199  150a		       86 a9		      STX	player4pointerlo
   1200  150c		       a9 fa		      LDA	#>player54then_4
   1201  150e		       85 ae		      STA	player4pointerhi
   1202  1510		       a9 09		      LDA	#9
   1203  1512		       85 b4		      STA	player4height
   1204  1514				   .skipL0137
   1205  1514				   .
   1206  1514							; 
   1207  1514
   1208  1514				   .L0138		;  if ticker  >=  5 then player4:
   1209  1514
   1210  1514		       a5 e4		      LDA	ticker
   1211  1516		       c9 05		      CMP	#5
   1212  1518		       90 0c		      BCC	.skipL0138
   1213  151a				   .condpart55
   1214  151a		       a2 f6		      LDX	#<player55then_4
   1215  151c		       86 a9		      STX	player4pointerlo
   1216  151e		       a9 fa		      LDA	#>player55then_4
   1217  1520		       85 ae		      STA	player4pointerhi
   1218  1522		       a9 09		      LDA	#9
   1219  1524		       85 b4		      STA	player4height
   1220  1526				   .skipL0138
   1221  1526				   .
   1222  1526							; 
   1223  1526
   1224  1526				   .L0139		;  player5:
   1225  1526
   1226  1526		       a2 5a		      LDX	#<playerL0139_5
   1227  1528		       86 aa		      STX	player5pointerlo
   1228  152a		       a9 fb		      LDA	#>playerL0139_5
   1229  152c		       85 af		      STA	player5pointerhi
   1230  152e		       a9 09		      LDA	#9
   1231  1530		       85 b5		      STA	player5height
   1232  1532				   .
   1233  1532							; 
   1234  1532
   1235  1532				   .
   1236  1532							; 
   1237  1532
   1238  1532				   .
   1239  1532							; 
   1240  1532
   1241  1532				   .
   1242  1532							; 
   1243  1532
   1244  1532				   .L0140		;  if _resetTicker  >	0 then goto frameReset
   1245  1532
   1246  1532		       a9 00		      LDA	#0
   1247  1534		       c5 ee		      CMP	_resetTicker
   1248  1536		       b0 03		      BCS	.skipL0140
   1249  1538				   .condpart56
   1250  1538		       4c 52 d7 	      jmp	.frameReset
   1251  153b
   1252  153b				   .skipL0140
   1253  153b				   .
   1254  153b							; 
   1255  153b
   1256  153b				   .L0141		;  if player1y  <  41	&&  powerUpInPlay  =  0 then goto killPlayer
   1257  153b
   1258  153b		       a5 8e		      LDA	player1y
   1259  153d		       c9 29		      CMP	#41
   1260  153f		       b0 09		      BCS	.skipL0141
   1261  1541				   .condpart57
   1262  1541		       a5 e5		      LDA	powerUpInPlay
   1263  1543		       c9 00		      CMP	#0
   1264  1545		       d0 03		      BNE	.skip57then
   1265  1547				   .condpart58
   1266  1547		       4c ee de 	      jmp	.killPlayer
   1267  154a
   1268  154a				   .skip57then
   1269  154a				   .skipL0141
   1270  154a				   .L0142		;  if player1y  <  10	&&  powerUpInPlay  =  1 then player1y  =  100
   1271  154a
   1272  154a		       a5 8e		      LDA	player1y
   1273  154c		       c9 0a		      CMP	#10
   1274  154e		       b0 0a		      BCS	.skipL0142
   1275  1550				   .condpart59
   1276  1550		       a5 e5		      LDA	powerUpInPlay
   1277  1552		       c9 01		      CMP	#1
   1278  1554		       d0 04		      BNE	.skip59then
   1279  1556				   .condpart60
   1280  1556		       a9 64		      LDA	#100
   1281  1558		       85 8e		      STA	player1y
   1282  155a				   .skip59then
   1283  155a				   .skipL0142
   1284  155a				   .
   1285  155a							; 
   1286  155a
   1287  155a				   .L0143		;  if player2y  <  41 then goto killPlayer
   1288  155a
   1289  155a		       a5 8f		      LDA	player2y
   1290  155c		       c9 29		      CMP	#41
   1291  155e		       b0 03		      BCS	.skipL0143
   1292  1560				   .condpart61
   1293  1560		       4c ee de 	      jmp	.killPlayer
   1294  1563
   1295  1563				   .skipL0143
   1296  1563				   .L0144		;  if player3y  <  41 then goto killPlayer
   1297  1563
   1298  1563		       a5 90		      LDA	player3y
   1299  1565		       c9 29		      CMP	#41
   1300  1567		       b0 03		      BCS	.skipL0144
   1301  1569				   .condpart62
   1302  1569		       4c ee de 	      jmp	.killPlayer
   1303  156c
   1304  156c				   .skipL0144
   1305  156c				   .L0145		;  if player4y  <  41 then goto killPlayer
   1306  156c
   1307  156c		       a5 91		      LDA	player4y
   1308  156e		       c9 29		      CMP	#41
   1309  1570		       b0 03		      BCS	.skipL0145
   1310  1572				   .condpart63
   1311  1572		       4c ee de 	      jmp	.killPlayer
   1312  1575
   1313  1575				   .skipL0145
   1314  1575				   .
   1315  1575							; 
   1316  1575
   1317  1575				   .L0146		;  if missile1y  <  10 then missile1y	=  200
   1318  1575
   1319  1575		       a5 8b		      LDA	missile1y
   1320  1577		       c9 0a		      CMP	#10
   1321  1579		       b0 04		      BCS	.skipL0146
   1322  157b				   .condpart64
   1323  157b		       a9 c8		      LDA	#200
   1324  157d		       85 8b		      STA	missile1y
   1325  157f				   .skipL0146
   1326  157f				   .
   1327  157f							; 
   1328  157f
   1329  157f				   .
   1330  157f							; 
   1331  157f
   1332  157f				   .L0147		;  if missile0y  >  100 then goto skip
   1333  157f
   1334  157f		       a9 64		      LDA	#100
   1335  1581		       c5 8a		      CMP	missile0y
   1336  1583		       b0 03		      BCS	.skipL0147
   1337  1585				   .condpart65
   1338  1585		       4c 92 d5 	      jmp	.skip
   1339  1588
   1340  1588				   .skipL0147
   1341  1588				   .
   1342  1588							; 
   1343  1588
   1344  1588				   .
   1345  1588							; 
   1346  1588
   1347  1588				   .L0148		;  missile0y  =  missile0y + 2 : goto draw_loop
   1348  1588
   1349  1588		       a5 8a		      LDA	missile0y
   1350  158a		       18		      CLC
   1351  158b		       69 02		      ADC	#2
   1352  158d		       85 8a		      STA	missile0y
   1353  158f		       4c ef d5 	      jmp	.draw_loop
   1354  1592
   1355  1592				   .
   1356  1592							; 
   1357  1592
   1358  1592				   .skip
   1359  1592							; skip
   1360  1592
   1361  1592				   .L0149		;  if player0y  <  35	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  AUDV1  =  2	:  AUDC1  =  6	:  AUDF1  =  5 :  bulletMultiplier  =  bulletMultiplier  -  1 :  goto draw_loop
   1362  1592
   1363  1592		       a5 8d		      LDA	player0y
   1364  1594		       c9 23		      CMP	#35
   1365  1596		       b0 24		      BCS	.skipL0149
   1366  1598				   .condpart66
   1367  1598		       a5 c2		      LDA	lives
   1368  159a		       c9 c4		      CMP	#196
   1369  159c		       b0 1e		      BCS	.skip66then
   1370  159e				   .condpart67
   1371  159e		       a5 e4		      LDA	ticker
   1372  15a0		       c9 00		      CMP	#0
   1373  15a2		       d0 18		      BNE	.skip67then
   1374  15a4				   .condpart68
   1375  15a4		       a5 c2		      LDA	lives
   1376  15a6		       18		      CLC
   1377  15a7		       69 20		      ADC	#32
   1378  15a9		       85 c2		      STA	lives
   1379  15ab		       a9 02		      LDA	#2
   1380  15ad		       85 1a		      STA	AUDV1
   1381  15af		       a9 06		      LDA	#6
   1382  15b1		       85 16		      STA	AUDC1
   1383  15b3		       a9 05		      LDA	#5
   1384  15b5		       85 18		      STA	AUDF1
   1385  15b7		       c6 e2		      DEC	bulletMultiplier
   1386  15b9		       4c ef d5 	      jmp	.draw_loop
   1387  15bc
   1388  15bc				   .skip67then
   1389  15bc				   .skip66then
   1390  15bc				   .skipL0149
   1391  15bc				   .L0150		;  if player0y  <  35 then goto draw_loop
   1392  15bc
   1393  15bc		       a5 8d		      LDA	player0y
   1394  15be		       c9 23		      CMP	#35
   1395  15c0		       b0 03		      BCS	.skipL0150
   1396  15c2				   .condpart69
   1397  15c2		       4c ef d5 	      jmp	.draw_loop
   1398  15c5
   1399  15c5				   .skipL0150
   1400  15c5				   .L0151		;  if lives  <  32 then goto draw_loop
   1401  15c5
   1402  15c5		       a5 c2		      LDA	lives
   1403  15c7		       c9 20		      CMP	#32
   1404  15c9		       b0 03		      BCS	.skipL0151
   1405  15cb				   .condpart70
   1406  15cb		       4c ef d5 	      jmp	.draw_loop
   1407  15ce
   1408  15ce				   .skipL0151
   1409  15ce				   .L0152		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : bulletMultiplier  =  bulletMultiplier  +  1 :  lives	=  lives  -  32  : missile0x  =  player0x  +  5
   1410  15ce
   1411  15ce		       24 0c		      bit	INPT4
   1412  15d0		       30 1d		      BMI	.skipL0152
   1413  15d2				   .condpart71
   1414  15d2		       a9 96		      LDA	#150
   1415  15d4		       c5 92		      CMP	player5y
   1416  15d6		       b0 17		      BCS	.skip71then
   1417  15d8				   .condpart72
   1418  15d8		       a5 8d		      LDA	player0y
   1419  15da		       38		      SEC
   1420  15db		       e9 04		      SBC	#4
   1421  15dd		       85 8a		      STA	missile0y
   1422  15df		       e6 e2		      INC	bulletMultiplier
   1423  15e1		       a5 c2		      LDA	lives
   1424  15e3		       38		      SEC
   1425  15e4		       e9 20		      SBC	#32
   1426  15e6		       85 c2		      STA	lives
   1427  15e8		       a5 84		      LDA	player0x
   1428  15ea		       18		      CLC
   1429  15eb		       69 05		      ADC	#5
   1430  15ed		       85 80		      STA	missile0x
   1431  15ef				   .skip71then
   1432  15ef				   .skipL0152
   1433  15ef				   .draw_loop
   1434  15ef							; draw_loop
   1435  15ef
   1436  15ef				   .L0153		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x  +  1
   1437  15ef
   1438  15ef		       2c 80 02 	      bit	SWCHA
   1439  15f2		       30 08		      BMI	.skipL0153
   1440  15f4				   .condpart73
   1441  15f4		       a5 84		      LDA	player0x
   1442  15f6		       c9 86		      CMP	#134
   1443  15f8		       b0 02		      BCS	.skip73then
   1444  15fa				   .condpart74
   1445  15fa		       e6 84		      INC	player0x
   1446  15fc				   .skip73then
   1447  15fc				   .skipL0153
   1448  15fc				   .L0154		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x  -  1
   1449  15fc
   1450  15fc		       2c 80 02 	      bit	SWCHA
   1451  15ff		       70 08		      BVS	.skipL0154
   1452  1601				   .condpart75
   1453  1601		       a9 13		      LDA	#19
   1454  1603		       c5 84		      CMP	player0x
   1455  1605		       b0 02		      BCS	.skip75then
   1456  1607				   .condpart76
   1457  1607		       c6 84		      DEC	player0x
   1458  1609				   .skip75then
   1459  1609				   .skipL0154
   1460  1609				   .L0155		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y  -  1
   1461  1609
   1462  1609		       a9 20		      lda	#$20
   1463  160b		       2c 80 02 	      bit	SWCHA
   1464  160e		       d0 08		      BNE	.skipL0155
   1465  1610				   .condpart77
   1466  1610		       a9 0a		      LDA	#10
   1467  1612		       c5 8d		      CMP	player0y
   1468  1614		       b0 02		      BCS	.skip77then
   1469  1616				   .condpart78
   1470  1616		       c6 8d		      DEC	player0y
   1471  1618				   .skip77then
   1472  1618				   .skipL0155
   1473  1618				   .L0156		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y  +  1
   1474  1618
   1475  1618		       a9 10		      lda	#$10
   1476  161a		       2c 80 02 	      bit	SWCHA
   1477  161d		       d0 08		      BNE	.skipL0156
   1478  161f				   .condpart79
   1479  161f		       a5 8d		      LDA	player0y
   1480  1621		       c9 5a		      CMP	#90
   1481  1623		       b0 02		      BCS	.skip79then
   1482  1625				   .condpart80
   1483  1625		       e6 8d		      INC	player0y
   1484  1627				   .skip79then
   1485  1627				   .skipL0156
   1486  1627				   .
   1487  1627							; 
   1488  1627
   1489  1627				   .L0157		;  if player0y  <  35	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1490  1627
   1491  1627		       a5 8d		      LDA	player0y
   1492  1629		       c9 23		      CMP	#35
   1493  162b		       b0 13		      BCS	.skipL0157
   1494  162d				   .condpart81
   1495  162d		       a5 c2		      LDA	lives
   1496  162f		       c9 c4		      CMP	#196
   1497  1631		       b0 0d		      BCS	.skip81then
   1498  1633				   .condpart82
   1499  1633		       a5 e4		      LDA	ticker
   1500  1635		       c9 05		      CMP	#5
   1501  1637		       b0 07		      BCS	.skip82then
   1502  1639				   .condpart83
   1503  1639		       a9 f0		      LDA	#$F0
   1504  163b		       85 06		      STA	COLUP0
   1505  163d		       4c 6a d6 	      jmp	.exitColourSwitch
   1506  1640
   1507  1640				   .skip82then
   1508  1640				   .skip81then
   1509  1640				   .skipL0157
   1510  1640				   .L0158		;  if player0y  <  35	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1511  1640
   1512  1640		       a5 8d		      LDA	player0y
   1513  1642		       c9 23		      CMP	#35
   1514  1644		       b0 13		      BCS	.skipL0158
   1515  1646				   .condpart84
   1516  1646		       a5 c2		      LDA	lives
   1517  1648		       c9 c4		      CMP	#196
   1518  164a		       b0 0d		      BCS	.skip84then
   1519  164c				   .condpart85
   1520  164c		       a9 05		      LDA	#5
   1521  164e		       c5 e4		      CMP	ticker
   1522  1650		       b0 07		      BCS	.skip85then
   1523  1652				   .condpart86
   1524  1652		       a9 02		      LDA	#$02
   1525  1654		       85 06		      STA	COLUP0
   1526  1656		       4c 6a d6 	      jmp	.exitColourSwitch
   1527  1659
   1528  1659				   .skip85then
   1529  1659				   .skip84then
   1530  1659				   .skipL0158
   1531  1659				   .L0159		;  if lives  <  32 then COLUP0  =  $40 else COLUP0  =	$C6
   1532  1659
   1533  1659		       a5 c2		      LDA	lives
   1534  165b		       c9 20		      CMP	#32
   1535  165d		       b0 07		      BCS	.skipL0159
   1536  165f				   .condpart87
   1537  165f		       a9 40		      LDA	#$40
   1538  1661		       85 06		      STA	COLUP0
   1539  1663		       4c 6a d6 	      jmp	.skipelse1
   1540  1666				   .skipL0159
   1541  1666		       a9 c6		      LDA	#$C6
   1542  1668		       85 06		      STA	COLUP0
   1543  166a				   .skipelse1
   1544  166a				   .
   1545  166a							; 
   1546  166a
   1547  166a				   .exitColourSwitch
   1548  166a							; exitColourSwitch
   1549  166a
   1550  166a				   .L0160		;  if missile0y  >  80 then goto frameReset
   1551  166a
   1552  166a		       a9 50		      LDA	#80
   1553  166c		       c5 8a		      CMP	missile0y
   1554  166e		       b0 03		      BCS	.skipL0160
   1555  1670				   .condpart88
   1556  1670		       4c 52 d7 	      jmp	.frameReset
   1557  1673
   1558  1673				   .skipL0160
   1559  1673				   .L0161		;  if missile0x  >   ( player1x  -  12 )   &&	missile0x  <   ( player1x  +  3 )   &&	missile0y  >  player1y	-  10  &&  powerUpInPlay  =  0 then player1x  =  player1x  +   ( ticker  *  12 )  :  player1y  =  100 :  goto collisions
   1560  1673
   1561  1673							; complex condition detected
   1562  1673							; complex statement detected
   1563  1673		       a5 85		      LDA	player1x
   1564  1675		       38		      SEC
   1565  1676		       e9 0c		      SBC	#12
   1566  1678							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1567  1678		       c5 80		      CMP	missile0x
   1568  167a		       b0 37		      BCS	.skipL0161
   1569  167c				   .condpart89
   1570  167c							; complex condition detected
   1571  167c							; complex statement detected
   1572  167c		       a5 85		      LDA	player1x
   1573  167e		       18		      CLC
   1574  167f		       69 03		      ADC	#3
   1575  1681		       48		      PHA
   1576  1682		       ba		      TSX
   1577  1683		       68		      PLA
   1578  1684		       a5 80		      LDA	missile0x
   1579  1686		       d5 01		      CMP	1,x
   1580  1688		       b0 29		      BCS	.skip89then
   1581  168a				   .condpart90
   1582  168a							; complex condition detected
   1583  168a		       a5 8e		      LDA	player1y
   1584  168c		       38		      SEC
   1585  168d		       e9 0a		      SBC	#10
   1586  168f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1587  168f		       c5 8a		      CMP	missile0y
   1588  1691		       b0 20		      BCS	.skip90then
   1589  1693				   .condpart91
   1590  1693		       a5 e5		      LDA	powerUpInPlay
   1591  1695		       c9 00		      CMP	#0
   1592  1697		       d0 1a		      BNE	.skip91then
   1593  1699				   .condpart92
   1594  1699							; complex statement detected
   1595  1699		       a5 85		      LDA	player1x
   1596  169b		       48		      PHA
   1597  169c		       a5 e4		      LDA	ticker
   1598  169e		       0a		      asl
   1599  169f		       18		      clc
   1600  16a0		       65 e4		      adc	ticker
   1601  16a2		       0a		      asl
   1602  16a3		       0a		      asl
   1603  16a4		       ba		      TSX
   1604  16a5		       e8		      INX
   1605  16a6		       9a		      TXS
   1606  16a7		       18		      CLC
   1607  16a8		       75 00		      ADC	$00,x
   1608  16aa		       85 85		      STA	player1x
   1609  16ac		       a9 64		      LDA	#100
   1610  16ae		       85 8e		      STA	player1y
   1611  16b0		       4c b2 de 	      jmp	.collisions
   1612  16b3
   1613  16b3				   .skip91then
   1614  16b3				   .skip90then
   1615  16b3				   .skip89then
   1616  16b3				   .skipL0161
   1617  16b3				   .L0162		;  if missile0x  >   ( player2x  -  12 )   &&	missile0x  <   ( player2x  +  3 )   &&	missile0y  >  player2y	-  10 then player2x  =	player2x  +   ( ticker	*  12 )  :  player2y  =  100 :	goto collisions
   1618  16b3
   1619  16b3							; complex condition detected
   1620  16b3							; complex statement detected
   1621  16b3		       a5 86		      LDA	player2x
   1622  16b5		       38		      SEC
   1623  16b6		       e9 0c		      SBC	#12
   1624  16b8							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1625  16b8		       c5 80		      CMP	missile0x
   1626  16ba		       b0 31		      BCS	.skipL0162
   1627  16bc				   .condpart93
   1628  16bc							; complex condition detected
   1629  16bc							; complex statement detected
   1630  16bc		       a5 86		      LDA	player2x
   1631  16be		       18		      CLC
   1632  16bf		       69 03		      ADC	#3
   1633  16c1		       48		      PHA
   1634  16c2		       ba		      TSX
   1635  16c3		       68		      PLA
   1636  16c4		       a5 80		      LDA	missile0x
   1637  16c6		       d5 01		      CMP	1,x
   1638  16c8		       b0 23		      BCS	.skip93then
   1639  16ca				   .condpart94
   1640  16ca							; complex condition detected
   1641  16ca		       a5 8f		      LDA	player2y
   1642  16cc		       38		      SEC
   1643  16cd		       e9 0a		      SBC	#10
   1644  16cf		       c5 8a		      CMP	missile0y
   1645  16d1		       b0 1a		      BCS	.skip94then
   1646  16d3				   .condpart95
   1647  16d3							; complex statement detected
   1648  16d3		       a5 86		      LDA	player2x
   1649  16d5		       48		      PHA
   1650  16d6		       a5 e4		      LDA	ticker
   1651  16d8		       0a		      asl
   1652  16d9		       18		      clc
   1653  16da		       65 e4		      adc	ticker
   1654  16dc		       0a		      asl
   1655  16dd		       0a		      asl
   1656  16de		       ba		      TSX
   1657  16df		       e8		      INX
   1658  16e0		       9a		      TXS
   1659  16e1		       18		      CLC
   1660  16e2		       75 00		      ADC	$00,x
   1661  16e4		       85 86		      STA	player2x
   1662  16e6		       a9 64		      LDA	#100
   1663  16e8		       85 8f		      STA	player2y
   1664  16ea		       4c b2 de 	      jmp	.collisions
   1665  16ed
   1666  16ed				   .skip94then
   1667  16ed				   .skip93then
   1668  16ed				   .skipL0162
   1669  16ed				   .L0163		;  if missile0x  >   ( player3x  -  12 )   &&	missile0x  <   ( player3x  +  3 )   &&	missile0y  >  player3y	-  10 then player3x  =	player3x  +   ( ticker	*  12 )  :  player3y  =  100 :	goto collisions
   1670  16ed
   1671  16ed							; complex condition detected
   1672  16ed							; complex statement detected
   1673  16ed		       a5 87		      LDA	player3x
   1674  16ef		       38		      SEC
   1675  16f0		       e9 0c		      SBC	#12
   1676  16f2							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1677  16f2		       c5 80		      CMP	missile0x
   1678  16f4		       b0 31		      BCS	.skipL0163
   1679  16f6				   .condpart96
   1680  16f6							; complex condition detected
   1681  16f6							; complex statement detected
   1682  16f6		       a5 87		      LDA	player3x
   1683  16f8		       18		      CLC
   1684  16f9		       69 03		      ADC	#3
   1685  16fb		       48		      PHA
   1686  16fc		       ba		      TSX
   1687  16fd		       68		      PLA
   1688  16fe		       a5 80		      LDA	missile0x
   1689  1700		       d5 01		      CMP	1,x
   1690  1702		       b0 23		      BCS	.skip96then
   1691  1704				   .condpart97
   1692  1704							; complex condition detected
   1693  1704		       a5 90		      LDA	player3y
   1694  1706		       38		      SEC
   1695  1707		       e9 0a		      SBC	#10
   1696  1709		       c5 8a		      CMP	missile0y
   1697  170b		       b0 1a		      BCS	.skip97then
   1698  170d				   .condpart98
   1699  170d							; complex statement detected
   1700  170d		       a5 87		      LDA	player3x
   1701  170f		       48		      PHA
   1702  1710		       a5 e4		      LDA	ticker
   1703  1712		       0a		      asl
   1704  1713		       18		      clc
   1705  1714		       65 e4		      adc	ticker
   1706  1716		       0a		      asl
   1707  1717		       0a		      asl
   1708  1718		       ba		      TSX
   1709  1719		       e8		      INX
   1710  171a		       9a		      TXS
   1711  171b		       18		      CLC
   1712  171c		       75 00		      ADC	$00,x
   1713  171e		       85 87		      STA	player3x
   1714  1720		       a9 64		      LDA	#100
   1715  1722		       85 90		      STA	player3y
   1716  1724		       4c b2 de 	      jmp	.collisions
   1717  1727
   1718  1727				   .skip97then
   1719  1727				   .skip96then
   1720  1727				   .skipL0163
   1721  1727				   .L0164		;  if missile0x  >   ( player4x  -  12 )   &&	missile0x  <   ( player4x  +  3 )   &&	missile0y  >  player4y	-  10 then player4y  =	100 :  player4x  =  116 :  goto collisions
   1722  1727
   1723  1727							; complex condition detected
   1724  1727							; complex statement detected
   1725  1727		       a5 88		      LDA	player4x
   1726  1729		       38		      SEC
   1727  172a		       e9 0c		      SBC	#12
   1728  172c							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1729  172c		       c5 80		      CMP	missile0x
   1730  172e		       b0 22		      BCS	.skipL0164
   1731  1730				   .condpart99
   1732  1730							; complex condition detected
   1733  1730							; complex statement detected
   1734  1730		       a5 88		      LDA	player4x
   1735  1732		       18		      CLC
   1736  1733		       69 03		      ADC	#3
   1737  1735		       48		      PHA
   1738  1736		       ba		      TSX
   1739  1737		       68		      PLA
   1740  1738		       a5 80		      LDA	missile0x
   1741  173a		       d5 01		      CMP	1,x
   1742  173c		       b0 14		      BCS	.skip99then
   1743  173e				   .condpart100
   1744  173e							; complex condition detected
   1745  173e		       a5 91		      LDA	player4y
   1746  1740		       38		      SEC
   1747  1741		       e9 0a		      SBC	#10
   1748  1743		       c5 8a		      CMP	missile0y
   1749  1745		       b0 0b		      BCS	.skip100then
   1750  1747				   .condpart101
   1751  1747		       a9 64		      LDA	#100
   1752  1749		       85 91		      STA	player4y
   1753  174b		       a9 74		      LDA	#116
   1754  174d		       85 88		      STA	player4x
   1755  174f		       4c b2 de 	      jmp	.collisions
   1756  1752
   1757  1752				   .skip100then
   1758  1752				   .skip99then
   1759  1752				   .skipL0164
   1760  1752				   .
   1761  1752							; 
   1762  1752
   1763  1752				   .frameReset
   1764  1752							; frameReset
   1765  1752
   1766  1752				   .
   1767  1752							; 
   1768  1752
   1769  1752				   .checkPlayer1Position
   1770  1752							; checkPlayer1Position
   1771  1752
   1772  1752				   .L0165		;  if player1y  <  99 then goto checkPlayer2Position
   1773  1752
   1774  1752		       a5 8e		      LDA	player1y
   1775  1754		       c9 63		      CMP	#99
   1776  1756		       b0 03		      BCS	.skipL0165
   1777  1758				   .condpart102
   1778  1758		       4c 74 d7 	      jmp	.checkPlayer2Position
   1779  175b
   1780  175b				   .skipL0165
   1781  175b				   .L0166		;  if player1x  <  30	||  player1x  >  120 then player1x  =  player1x  +  50	:  goto checkPlayer1Position
   1782  175b
   1783  175b		       a5 85		      LDA	player1x
   1784  175d		       c9 1e		      CMP	#30
   1785  175f		       b0 03		      BCS	.skipL0166
   1786  1761				   .condpart103
   1787  1761		       4c 6a d7 	      jmp	.condpart104
   1788  1764				   .skipL0166
   1789  1764		       a9 78		      LDA	#120
   1790  1766		       c5 85		      CMP	player1x
   1791  1768		       b0 0a		      BCS	.skip40OR
   1792  176a				   .condpart104
   1793  176a		       a5 85		      LDA	player1x
   1794  176c		       18		      CLC
   1795  176d		       69 32		      ADC	#50
   1796  176f		       85 85		      STA	player1x
   1797  1771		       4c 52 d7 	      jmp	.checkPlayer1Position
   1798  1774
   1799  1774				   .skip40OR
   1800  1774				   .
   1801  1774							; 
   1802  1774
   1803  1774				   .checkPlayer2Position
   1804  1774							; checkPlayer2Position
   1805  1774
   1806  1774				   .L0167		;  if player2y  <  99 then goto checkPlayer3Position
   1807  1774
   1808  1774		       a5 8f		      LDA	player2y
   1809  1776		       c9 63		      CMP	#99
   1810  1778		       b0 03		      BCS	.skipL0167
   1811  177a				   .condpart105
   1812  177a		       4c 96 d7 	      jmp	.checkPlayer3Position
   1813  177d
   1814  177d				   .skipL0167
   1815  177d				   .L0168		;  if player2x  <  30	||  player2x  >  120 then player2x  =  player2x  +  50	:  goto checkPlayer2Position
   1816  177d
   1817  177d		       a5 86		      LDA	player2x
   1818  177f		       c9 1e		      CMP	#30
   1819  1781		       b0 03		      BCS	.skipL0168
   1820  1783				   .condpart106
   1821  1783		       4c 8c d7 	      jmp	.condpart107
   1822  1786				   .skipL0168
   1823  1786		       a9 78		      LDA	#120
   1824  1788		       c5 86		      CMP	player2x
   1825  178a		       b0 0a		      BCS	.skip41OR
   1826  178c				   .condpart107
   1827  178c		       a5 86		      LDA	player2x
   1828  178e		       18		      CLC
   1829  178f		       69 32		      ADC	#50
   1830  1791		       85 86		      STA	player2x
   1831  1793		       4c 74 d7 	      jmp	.checkPlayer2Position
   1832  1796
   1833  1796				   .skip41OR
   1834  1796				   .
   1835  1796							; 
   1836  1796
   1837  1796				   .checkPlayer3Position
   1838  1796							; checkPlayer3Position
   1839  1796
   1840  1796				   .L0169		;  if player3y  <  99 then goto exitPositionCheck
   1841  1796
   1842  1796		       a5 90		      LDA	player3y
   1843  1798		       c9 63		      CMP	#99
   1844  179a		       b0 03		      BCS	.skipL0169
   1845  179c				   .condpart108
   1846  179c		       4c b8 d7 	      jmp	.exitPositionCheck
   1847  179f
   1848  179f				   .skipL0169
   1849  179f				   .L0170		;  if player3x  <  30	||  player3x  >  120 then player3x  =  player3x  +  50	:  goto checkPlayer3Position
   1850  179f
   1851  179f		       a5 87		      LDA	player3x
   1852  17a1		       c9 1e		      CMP	#30
   1853  17a3		       b0 03		      BCS	.skipL0170
   1854  17a5				   .condpart109
   1855  17a5		       4c ae d7 	      jmp	.condpart110
   1856  17a8				   .skipL0170
   1857  17a8		       a9 78		      LDA	#120
   1858  17aa		       c5 87		      CMP	player3x
   1859  17ac		       b0 0a		      BCS	.skip42OR
   1860  17ae				   .condpart110
   1861  17ae		       a5 87		      LDA	player3x
   1862  17b0		       18		      CLC
   1863  17b1		       69 32		      ADC	#50
   1864  17b3		       85 87		      STA	player3x
   1865  17b5		       4c 96 d7 	      jmp	.checkPlayer3Position
   1866  17b8
   1867  17b8				   .skip42OR
   1868  17b8				   .
   1869  17b8							; 
   1870  17b8
   1871  17b8				   .exitPositionCheck
   1872  17b8							; exitPositionCheck
   1873  17b8
   1874  17b8				   .
   1875  17b8							; 
   1876  17b8
   1877  17b8				   .
   1878  17b8							; 
   1879  17b8
   1880  17b8				   .
   1881  17b8							; 
   1882  17b8
   1883  17b8				   .L0171		;  if _resetTicker  >	0 then goto resetScreen
   1884  17b8
   1885  17b8		       a9 00		      LDA	#0
   1886  17ba		       c5 ee		      CMP	_resetTicker
   1887  17bc		       b0 03		      BCS	.skipL0171
   1888  17be				   .condpart111
   1889  17be		       4c b0 db 	      jmp	.resetScreen
   1890  17c1
   1891  17c1				   .skipL0171
   1892  17c1				   .L0172		;  if killCount  <  5 then goto level1
   1893  17c1
   1894  17c1		       a5 e3		      LDA	killCount
   1895  17c3		       c9 05		      CMP	#5
   1896  17c5		       b0 03		      BCS	.skipL0172
   1897  17c7				   .condpart112
   1898  17c7		       4c 9f db 	      jmp	.level1
   1899  17ca
   1900  17ca				   .skipL0172
   1901  17ca				   .L0173		;  if killCount  <  11 then goto level2
   1902  17ca
   1903  17ca		       a5 e3		      LDA	killCount
   1904  17cc		       c9 0b		      CMP	#11
   1905  17ce		       b0 03		      BCS	.skipL0173
   1906  17d0				   .condpart113
   1907  17d0		       4c 82 db 	      jmp	.level2
   1908  17d3
   1909  17d3				   .skipL0173
   1910  17d3				   .L0174		;  if killCount  <  18 then goto level3
   1911  17d3
   1912  17d3		       a5 e3		      LDA	killCount
   1913  17d5		       c9 12		      CMP	#18
   1914  17d7		       b0 03		      BCS	.skipL0174
   1915  17d9				   .condpart114
   1916  17d9		       4c 52 db 	      jmp	.level3
   1917  17dc
   1918  17dc				   .skipL0174
   1919  17dc				   .L0175		;  if killCount  <  26 then goto level4
   1920  17dc
   1921  17dc		       a5 e3		      LDA	killCount
   1922  17de		       c9 1a		      CMP	#26
   1923  17e0		       b0 03		      BCS	.skipL0175
   1924  17e2				   .condpart115
   1925  17e2		       4c 24 db 	      jmp	.level4
   1926  17e5
   1927  17e5				   .skipL0175
   1928  17e5				   .L0176		;  if killCount  <  35 then goto level5
   1929  17e5
   1930  17e5		       a5 e3		      LDA	killCount
   1931  17e7		       c9 23		      CMP	#35
   1932  17e9		       b0 03		      BCS	.skipL0176
   1933  17eb				   .condpart116
   1934  17eb		       4c fa da 	      jmp	.level5
   1935  17ee
   1936  17ee				   .skipL0176
   1937  17ee				   .L0177		;  if killCount  <  45 then goto level6
   1938  17ee
   1939  17ee		       a5 e3		      LDA	killCount
   1940  17f0		       c9 2d		      CMP	#45
   1941  17f2		       b0 03		      BCS	.skipL0177
   1942  17f4				   .condpart117
   1943  17f4		       4c bd da 	      jmp	.level6
   1944  17f7
   1945  17f7				   .skipL0177
   1946  17f7				   .L0178		;  if killCount  <  56 then goto level7
   1947  17f7
   1948  17f7		       a5 e3		      LDA	killCount
   1949  17f9		       c9 38		      CMP	#56
   1950  17fb		       b0 03		      BCS	.skipL0178
   1951  17fd				   .condpart118
   1952  17fd		       4c 80 da 	      jmp	.level7
   1953  1800
   1954  1800				   .skipL0178
   1955  1800				   .L0179		;  if killCount  <  68 then goto level8
   1956  1800
   1957  1800		       a5 e3		      LDA	killCount
   1958  1802		       c9 44		      CMP	#68
   1959  1804		       b0 03		      BCS	.skipL0179
   1960  1806				   .condpart119
   1961  1806		       4c 45 da 	      jmp	.level8
   1962  1809
   1963  1809				   .skipL0179
   1964  1809				   .L0180		;  if killCount  <  81 then goto level9
   1965  1809
   1966  1809		       a5 e3		      LDA	killCount
   1967  180b		       c9 51		      CMP	#81
   1968  180d		       b0 03		      BCS	.skipL0180
   1969  180f				   .condpart120
   1970  180f		       4c 0e da 	      jmp	.level9
   1971  1812
   1972  1812				   .skipL0180
   1973  1812				   .L0181		;  if killCount  <  95 then goto level10
   1974  1812
   1975  1812		       a5 e3		      LDA	killCount
   1976  1814		       c9 5f		      CMP	#95
   1977  1816		       b0 03		      BCS	.skipL0181
   1978  1818				   .condpart121
   1979  1818		       4c d7 d9 	      jmp	.level10
   1980  181b
   1981  181b				   .skipL0181
   1982  181b				   .L0182		;  if killCount  <  110 then goto level11
   1983  181b
   1984  181b		       a5 e3		      LDA	killCount
   1985  181d		       c9 6e		      CMP	#110
   1986  181f		       b0 03		      BCS	.skipL0182
   1987  1821				   .condpart122
   1988  1821		       4c a0 d9 	      jmp	.level11
   1989  1824
   1990  1824				   .skipL0182
   1991  1824				   .L0183		;  if killCount  <  126 then goto level12
   1992  1824
   1993  1824		       a5 e3		      LDA	killCount
   1994  1826		       c9 7e		      CMP	#126
   1995  1828		       b0 03		      BCS	.skipL0183
   1996  182a				   .condpart123
   1997  182a		       4c 65 d9 	      jmp	.level12
   1998  182d
   1999  182d				   .skipL0183
   2000  182d				   .L0184		;  if killCount  <  143 then goto level13
   2001  182d
   2002  182d		       a5 e3		      LDA	killCount
   2003  182f		       c9 8f		      CMP	#143
   2004  1831		       b0 03		      BCS	.skipL0184
   2005  1833				   .condpart124
   2006  1833		       4c 2e d9 	      jmp	.level13
   2007  1836
   2008  1836				   .skipL0184
   2009  1836				   .L0185		;  if killCount  <  161 then goto level14
   2010  1836
   2011  1836		       a5 e3		      LDA	killCount
   2012  1838		       c9 a1		      CMP	#161
   2013  183a		       b0 03		      BCS	.skipL0185
   2014  183c				   .condpart125
   2015  183c		       4c f7 d8 	      jmp	.level14
   2016  183f
   2017  183f				   .skipL0185
   2018  183f				   .L0186		;  if killCount  <  180 then goto level15
   2019  183f
   2020  183f		       a5 e3		      LDA	killCount
   2021  1841		       c9 b4		      CMP	#180
   2022  1843		       b0 03		      BCS	.skipL0186
   2023  1845				   .condpart126
   2024  1845		       4c c0 d8 	      jmp	.level15
   2025  1848
   2026  1848				   .skipL0186
   2027  1848				   .L0187		;  if killCount  <  200 then goto level16
   2028  1848
   2029  1848		       a5 e3		      LDA	killCount
   2030  184a		       c9 c8		      CMP	#200
   2031  184c		       b0 03		      BCS	.skipL0187
   2032  184e				   .condpart127
   2033  184e		       4c 85 d8 	      jmp	.level16
   2034  1851
   2035  1851				   .skipL0187
   2036  1851				   .
   2037  1851							; 
   2038  1851
   2039  1851				   .L0188		;  asteroidY  =  asteroidY  -	0.37
   2040  1851
   2041  1851		       a5 d8		      LDA	b
   2042  1853		       38		      SEC
   2043  1854		       e9 5e		      SBC	#94
   2044  1856		       85 d8		      STA	b
   2045  1858		       a5 8e		      LDA	asteroidY
   2046  185a		       e9 00		      SBC	#0
   2047  185c		       85 8e		      STA	asteroidY
   2048  185e				   .L0189		;  asteroid2Y	=  asteroid2Y  -  0.42
   2049  185e
   2050  185e		       a5 d9		      LDA	c
   2051  1860		       38		      SEC
   2052  1861		       e9 6b		      SBC	#107
   2053  1863		       85 d9		      STA	c
   2054  1865		       a5 8f		      LDA	asteroid2Y
   2055  1867		       e9 00		      SBC	#0
   2056  1869		       85 8f		      STA	asteroid2Y
   2057  186b				   .L0190		;  asteroid3Y	=  asteroid3Y  -  0.33
   2058  186b
   2059  186b		       a5 da		      LDA	d
   2060  186d		       38		      SEC
   2061  186e		       e9 54		      SBC	#84
   2062  1870		       85 da		      STA	d
   2063  1872		       a5 90		      LDA	asteroid3Y
   2064  1874		       e9 00		      SBC	#0
   2065  1876		       85 90		      STA	asteroid3Y
   2066  1878				   .L0191		;  asteroid4Y	=  asteroid4Y  -  0.08
   2067  1878
   2068  1878		       a5 db		      LDA	e
   2069  187a		       38		      SEC
   2070  187b		       e9 14		      SBC	#20
   2071  187d		       85 db		      STA	e
   2072  187f		       a5 91		      LDA	asteroid4Y
   2073  1881		       e9 00		      SBC	#0
   2074  1883		       85 91		      STA	asteroid4Y
   2075  1885				   .
   2076  1885							; 
   2077  1885
   2078  1885				   .level16
   2079  1885							; level16
   2080  1885
   2081  1885				   .L0192		;  asteroidY  =  asteroidY  -	0.35
   2082  1885
   2083  1885		       a5 d8		      LDA	b
   2084  1887		       38		      SEC
   2085  1888		       e9 59		      SBC	#89
   2086  188a		       85 d8		      STA	b
   2087  188c		       a5 8e		      LDA	asteroidY
   2088  188e		       e9 00		      SBC	#0
   2089  1890		       85 8e		      STA	asteroidY
   2090  1892				   .L0193		;  asteroid2Y	=  asteroid2Y  -  0.40
   2091  1892
   2092  1892		       a5 d9		      LDA	c
   2093  1894		       38		      SEC
   2094  1895		       e9 66		      SBC	#102
   2095  1897		       85 d9		      STA	c
   2096  1899		       a5 8f		      LDA	asteroid2Y
   2097  189b		       e9 00		      SBC	#0
   2098  189d		       85 8f		      STA	asteroid2Y
   2099  189f				   .L0194		;  asteroid3Y	=  asteroid3Y  -  0.31
   2100  189f
   2101  189f		       a5 da		      LDA	d
   2102  18a1		       38		      SEC
   2103  18a2		       e9 4f		      SBC	#79
   2104  18a4		       85 da		      STA	d
   2105  18a6		       a5 90		      LDA	asteroid3Y
   2106  18a8		       e9 00		      SBC	#0
   2107  18aa		       85 90		      STA	asteroid3Y
   2108  18ac				   .L0195		;  asteroid4Y	=  asteroid4Y  -  0.08
   2109  18ac
   2110  18ac		       a5 db		      LDA	e
   2111  18ae		       38		      SEC
   2112  18af		       e9 14		      SBC	#20
   2113  18b1		       85 db		      STA	e
   2114  18b3		       a5 91		      LDA	asteroid4Y
   2115  18b5		       e9 00		      SBC	#0
   2116  18b7		       85 91		      STA	asteroid4Y
   2117  18b9				   .L0196		;  goto resetScreen
   2118  18b9
   2119  18b9		       4c b0 db 	      jmp	.resetScreen
   2120  18bc
   2121  18bc				   .L0197		;  COLUPF  =  $60
   2122  18bc
   2123  18bc		       a9 60		      LDA	#$60
   2124  18be		       85 08		      STA	COLUPF
   2125  18c0				   .
   2126  18c0							; 
   2127  18c0
   2128  18c0				   .level15
   2129  18c0							; level15
   2130  18c0
   2131  18c0				   .L0198		;  asteroidY  =  asteroidY  -	0.33
   2132  18c0
   2133  18c0		       a5 d8		      LDA	b
   2134  18c2		       38		      SEC
   2135  18c3		       e9 54		      SBC	#84
   2136  18c5		       85 d8		      STA	b
   2137  18c7		       a5 8e		      LDA	asteroidY
   2138  18c9		       e9 00		      SBC	#0
   2139  18cb		       85 8e		      STA	asteroidY
   2140  18cd				   .L0199		;  asteroid2Y	=  asteroid2Y  -  0.38
   2141  18cd
   2142  18cd		       a5 d9		      LDA	c
   2143  18cf		       38		      SEC
   2144  18d0		       e9 61		      SBC	#97
   2145  18d2		       85 d9		      STA	c
   2146  18d4		       a5 8f		      LDA	asteroid2Y
   2147  18d6		       e9 00		      SBC	#0
   2148  18d8		       85 8f		      STA	asteroid2Y
   2149  18da				   .L0200		;  asteroid3Y	=  asteroid3Y  -  0.29
   2150  18da
   2151  18da		       a5 da		      LDA	d
   2152  18dc		       38		      SEC
   2153  18dd		       e9 4a		      SBC	#74
   2154  18df		       85 da		      STA	d
   2155  18e1		       a5 90		      LDA	asteroid3Y
   2156  18e3		       e9 00		      SBC	#0
   2157  18e5		       85 90		      STA	asteroid3Y
   2158  18e7				   .L0201		;  asteroid4Y	=  asteroid4Y  -  0.08
   2159  18e7
   2160  18e7		       a5 db		      LDA	e
   2161  18e9		       38		      SEC
   2162  18ea		       e9 14		      SBC	#20
   2163  18ec		       85 db		      STA	e
   2164  18ee		       a5 91		      LDA	asteroid4Y
   2165  18f0		       e9 00		      SBC	#0
   2166  18f2		       85 91		      STA	asteroid4Y
   2167  18f4				   .L0202		;  goto resetScreen
   2168  18f4
   2169  18f4		       4c b0 db 	      jmp	.resetScreen
   2170  18f7
   2171  18f7				   .
   2172  18f7							; 
   2173  18f7
   2174  18f7				   .level14
   2175  18f7							; level14
   2176  18f7
   2177  18f7				   .L0203		;  asteroidY  =  asteroidY  -	0.31
   2178  18f7
   2179  18f7		       a5 d8		      LDA	b
   2180  18f9		       38		      SEC
   2181  18fa		       e9 4f		      SBC	#79
   2182  18fc		       85 d8		      STA	b
   2183  18fe		       a5 8e		      LDA	asteroidY
   2184  1900		       e9 00		      SBC	#0
   2185  1902		       85 8e		      STA	asteroidY
   2186  1904				   .L0204		;  asteroid2Y	=  asteroid2Y  -  0.35
   2187  1904
   2188  1904		       a5 d9		      LDA	c
   2189  1906		       38		      SEC
   2190  1907		       e9 59		      SBC	#89
   2191  1909		       85 d9		      STA	c
   2192  190b		       a5 8f		      LDA	asteroid2Y
   2193  190d		       e9 00		      SBC	#0
   2194  190f		       85 8f		      STA	asteroid2Y
   2195  1911				   .L0205		;  asteroid3Y	=  asteroid3Y  -  0.27
   2196  1911
   2197  1911		       a5 da		      LDA	d
   2198  1913		       38		      SEC
   2199  1914		       e9 45		      SBC	#69
   2200  1916		       85 da		      STA	d
   2201  1918		       a5 90		      LDA	asteroid3Y
   2202  191a		       e9 00		      SBC	#0
   2203  191c		       85 90		      STA	asteroid3Y
   2204  191e				   .L0206		;  asteroid4Y	=  asteroid4Y  -  0.08
   2205  191e
   2206  191e		       a5 db		      LDA	e
   2207  1920		       38		      SEC
   2208  1921		       e9 14		      SBC	#20
   2209  1923		       85 db		      STA	e
   2210  1925		       a5 91		      LDA	asteroid4Y
   2211  1927		       e9 00		      SBC	#0
   2212  1929		       85 91		      STA	asteroid4Y
   2213  192b				   .L0207		;  goto resetScreen
   2214  192b
   2215  192b		       4c b0 db 	      jmp	.resetScreen
   2216  192e
   2217  192e				   .
   2218  192e							; 
   2219  192e
   2220  192e				   .level13
   2221  192e							; level13
   2222  192e
   2223  192e				   .L0208		;  asteroidY  =  asteroidY  -	0.29
   2224  192e
   2225  192e		       a5 d8		      LDA	b
   2226  1930		       38		      SEC
   2227  1931		       e9 4a		      SBC	#74
   2228  1933		       85 d8		      STA	b
   2229  1935		       a5 8e		      LDA	asteroidY
   2230  1937		       e9 00		      SBC	#0
   2231  1939		       85 8e		      STA	asteroidY
   2232  193b				   .L0209		;  asteroid2Y	=  asteroid2Y  -  0.33
   2233  193b
   2234  193b		       a5 d9		      LDA	c
   2235  193d		       38		      SEC
   2236  193e		       e9 54		      SBC	#84
   2237  1940		       85 d9		      STA	c
   2238  1942		       a5 8f		      LDA	asteroid2Y
   2239  1944		       e9 00		      SBC	#0
   2240  1946		       85 8f		      STA	asteroid2Y
   2241  1948				   .L0210		;  asteroid3Y	=  asteroid3Y  -  0.25
   2242  1948
   2243  1948		       a5 da		      LDA	d
   2244  194a		       38		      SEC
   2245  194b		       e9 40		      SBC	#64
   2246  194d		       85 da		      STA	d
   2247  194f		       a5 90		      LDA	asteroid3Y
   2248  1951		       e9 00		      SBC	#0
   2249  1953		       85 90		      STA	asteroid3Y
   2250  1955				   .L0211		;  asteroid4Y	=  asteroid4Y  -  0.08
   2251  1955
   2252  1955		       a5 db		      LDA	e
   2253  1957		       38		      SEC
   2254  1958		       e9 14		      SBC	#20
   2255  195a		       85 db		      STA	e
   2256  195c		       a5 91		      LDA	asteroid4Y
   2257  195e		       e9 00		      SBC	#0
   2258  1960		       85 91		      STA	asteroid4Y
   2259  1962				   .L0212		;  goto resetScreen
   2260  1962
   2261  1962		       4c b0 db 	      jmp	.resetScreen
   2262  1965
   2263  1965				   .
   2264  1965							; 
   2265  1965
   2266  1965				   .level12
   2267  1965							; level12
   2268  1965
   2269  1965				   .L0213		;  asteroidY  =  asteroidY  -	0.27
   2270  1965
   2271  1965		       a5 d8		      LDA	b
   2272  1967		       38		      SEC
   2273  1968		       e9 45		      SBC	#69
   2274  196a		       85 d8		      STA	b
   2275  196c		       a5 8e		      LDA	asteroidY
   2276  196e		       e9 00		      SBC	#0
   2277  1970		       85 8e		      STA	asteroidY
   2278  1972				   .L0214		;  asteroid2Y	=  asteroid2Y  -  0.31
   2279  1972
   2280  1972		       a5 d9		      LDA	c
   2281  1974		       38		      SEC
   2282  1975		       e9 4f		      SBC	#79
   2283  1977		       85 d9		      STA	c
   2284  1979		       a5 8f		      LDA	asteroid2Y
   2285  197b		       e9 00		      SBC	#0
   2286  197d		       85 8f		      STA	asteroid2Y
   2287  197f				   .L0215		;  asteroid3Y	=  asteroid3Y  -  0.23
   2288  197f
   2289  197f		       a5 da		      LDA	d
   2290  1981		       38		      SEC
   2291  1982		       e9 3a		      SBC	#58
   2292  1984		       85 da		      STA	d
   2293  1986		       a5 90		      LDA	asteroid3Y
   2294  1988		       e9 00		      SBC	#0
   2295  198a		       85 90		      STA	asteroid3Y
   2296  198c				   .L0216		;  asteroid4Y	=  asteroid4Y  -  0.08
   2297  198c
   2298  198c		       a5 db		      LDA	e
   2299  198e		       38		      SEC
   2300  198f		       e9 14		      SBC	#20
   2301  1991		       85 db		      STA	e
   2302  1993		       a5 91		      LDA	asteroid4Y
   2303  1995		       e9 00		      SBC	#0
   2304  1997		       85 91		      STA	asteroid4Y
   2305  1999				   .L0217		;  COLUPF  =  $02
   2306  1999
   2307  1999		       a9 02		      LDA	#$02
   2308  199b		       85 08		      STA	COLUPF
   2309  199d				   .L0218		;  goto resetScreen
   2310  199d
   2311  199d		       4c b0 db 	      jmp	.resetScreen
   2312  19a0
   2313  19a0				   .
   2314  19a0							; 
   2315  19a0
   2316  19a0				   .level11
   2317  19a0							; level11
   2318  19a0
   2319  19a0				   .L0219		;  asteroidY  =  asteroidY  -	0.24
   2320  19a0
   2321  19a0		       a5 d8		      LDA	b
   2322  19a2		       38		      SEC
   2323  19a3		       e9 3d		      SBC	#61
   2324  19a5		       85 d8		      STA	b
   2325  19a7		       a5 8e		      LDA	asteroidY
   2326  19a9		       e9 00		      SBC	#0
   2327  19ab		       85 8e		      STA	asteroidY
   2328  19ad				   .L0220		;  asteroid2Y	=  asteroid2Y  -  0.29
   2329  19ad
   2330  19ad		       a5 d9		      LDA	c
   2331  19af		       38		      SEC
   2332  19b0		       e9 4a		      SBC	#74
   2333  19b2		       85 d9		      STA	c
   2334  19b4		       a5 8f		      LDA	asteroid2Y
   2335  19b6		       e9 00		      SBC	#0
   2336  19b8		       85 8f		      STA	asteroid2Y
   2337  19ba				   .L0221		;  asteroid3Y	=  asteroid3Y  -  0.21
   2338  19ba
   2339  19ba		       a5 da		      LDA	d
   2340  19bc		       38		      SEC
   2341  19bd		       e9 35		      SBC	#53
   2342  19bf		       85 da		      STA	d
   2343  19c1		       a5 90		      LDA	asteroid3Y
   2344  19c3		       e9 00		      SBC	#0
   2345  19c5		       85 90		      STA	asteroid3Y
   2346  19c7				   .L0222		;  asteroid4Y	=  asteroid4Y  -  0.08
   2347  19c7
   2348  19c7		       a5 db		      LDA	e
   2349  19c9		       38		      SEC
   2350  19ca		       e9 14		      SBC	#20
   2351  19cc		       85 db		      STA	e
   2352  19ce		       a5 91		      LDA	asteroid4Y
   2353  19d0		       e9 00		      SBC	#0
   2354  19d2		       85 91		      STA	asteroid4Y
   2355  19d4				   .L0223		;  goto resetScreen
   2356  19d4
   2357  19d4		       4c b0 db 	      jmp	.resetScreen
   2358  19d7
   2359  19d7				   .
   2360  19d7							; 
   2361  19d7
   2362  19d7				   .level10
   2363  19d7							; level10
   2364  19d7
   2365  19d7				   .L0224		;  asteroidY  =  asteroidY  -	0.22
   2366  19d7
   2367  19d7		       a5 d8		      LDA	b
   2368  19d9		       38		      SEC
   2369  19da		       e9 38		      SBC	#56
   2370  19dc		       85 d8		      STA	b
   2371  19de		       a5 8e		      LDA	asteroidY
   2372  19e0		       e9 00		      SBC	#0
   2373  19e2		       85 8e		      STA	asteroidY
   2374  19e4				   .L0225		;  asteroid2Y	=  asteroid2Y  -  0.27
   2375  19e4
   2376  19e4		       a5 d9		      LDA	c
   2377  19e6		       38		      SEC
   2378  19e7		       e9 45		      SBC	#69
   2379  19e9		       85 d9		      STA	c
   2380  19eb		       a5 8f		      LDA	asteroid2Y
   2381  19ed		       e9 00		      SBC	#0
   2382  19ef		       85 8f		      STA	asteroid2Y
   2383  19f1				   .L0226		;  asteroid3Y	=  asteroid3Y  -  0.19
   2384  19f1
   2385  19f1		       a5 da		      LDA	d
   2386  19f3		       38		      SEC
   2387  19f4		       e9 30		      SBC	#48
   2388  19f6		       85 da		      STA	d
   2389  19f8		       a5 90		      LDA	asteroid3Y
   2390  19fa		       e9 00		      SBC	#0
   2391  19fc		       85 90		      STA	asteroid3Y
   2392  19fe				   .L0227		;  asteroid4Y	=  asteroid4Y  -  0.08
   2393  19fe
   2394  19fe		       a5 db		      LDA	e
   2395  1a00		       38		      SEC
   2396  1a01		       e9 14		      SBC	#20
   2397  1a03		       85 db		      STA	e
   2398  1a05		       a5 91		      LDA	asteroid4Y
   2399  1a07		       e9 00		      SBC	#0
   2400  1a09		       85 91		      STA	asteroid4Y
   2401  1a0b				   .L0228		;  goto resetScreen
   2402  1a0b
   2403  1a0b		       4c b0 db 	      jmp	.resetScreen
   2404  1a0e
   2405  1a0e				   .
   2406  1a0e							; 
   2407  1a0e
   2408  1a0e				   .level9
   2409  1a0e							; level9
   2410  1a0e
   2411  1a0e				   .L0229		;  asteroidY  =  asteroidY  -	0.20
   2412  1a0e
   2413  1a0e		       a5 d8		      LDA	b
   2414  1a10		       38		      SEC
   2415  1a11		       e9 33		      SBC	#51
   2416  1a13		       85 d8		      STA	b
   2417  1a15		       a5 8e		      LDA	asteroidY
   2418  1a17		       e9 00		      SBC	#0
   2419  1a19		       85 8e		      STA	asteroidY
   2420  1a1b				   .L0230		;  asteroid2Y	=  asteroid2Y  -  0.25
   2421  1a1b
   2422  1a1b		       a5 d9		      LDA	c
   2423  1a1d		       38		      SEC
   2424  1a1e		       e9 40		      SBC	#64
   2425  1a20		       85 d9		      STA	c
   2426  1a22		       a5 8f		      LDA	asteroid2Y
   2427  1a24		       e9 00		      SBC	#0
   2428  1a26		       85 8f		      STA	asteroid2Y
   2429  1a28				   .L0231		;  asteroid3Y	=  asteroid3Y  -  0.17
   2430  1a28
   2431  1a28		       a5 da		      LDA	d
   2432  1a2a		       38		      SEC
   2433  1a2b		       e9 2b		      SBC	#43
   2434  1a2d		       85 da		      STA	d
   2435  1a2f		       a5 90		      LDA	asteroid3Y
   2436  1a31		       e9 00		      SBC	#0
   2437  1a33		       85 90		      STA	asteroid3Y
   2438  1a35				   .L0232		;  asteroid4Y	=  asteroid4Y  -  0.08
   2439  1a35
   2440  1a35		       a5 db		      LDA	e
   2441  1a37		       38		      SEC
   2442  1a38		       e9 14		      SBC	#20
   2443  1a3a		       85 db		      STA	e
   2444  1a3c		       a5 91		      LDA	asteroid4Y
   2445  1a3e		       e9 00		      SBC	#0
   2446  1a40		       85 91		      STA	asteroid4Y
   2447  1a42				   .L0233		;  goto resetScreen
   2448  1a42
   2449  1a42		       4c b0 db 	      jmp	.resetScreen
   2450  1a45
   2451  1a45				   .
   2452  1a45							; 
   2453  1a45
   2454  1a45				   .level8
   2455  1a45							; level8
   2456  1a45
   2457  1a45				   .L0234		;  asteroidY  =  asteroidY  -	0.18
   2458  1a45
   2459  1a45		       a5 d8		      LDA	b
   2460  1a47		       38		      SEC
   2461  1a48		       e9 2e		      SBC	#46
   2462  1a4a		       85 d8		      STA	b
   2463  1a4c		       a5 8e		      LDA	asteroidY
   2464  1a4e		       e9 00		      SBC	#0
   2465  1a50		       85 8e		      STA	asteroidY
   2466  1a52				   .L0235		;  asteroid2Y	=  asteroid2Y  -  0.23
   2467  1a52
   2468  1a52		       a5 d9		      LDA	c
   2469  1a54		       38		      SEC
   2470  1a55		       e9 3a		      SBC	#58
   2471  1a57		       85 d9		      STA	c
   2472  1a59		       a5 8f		      LDA	asteroid2Y
   2473  1a5b		       e9 00		      SBC	#0
   2474  1a5d		       85 8f		      STA	asteroid2Y
   2475  1a5f				   .L0236		;  asteroid3Y	=  asteroid3Y  -  0.15
   2476  1a5f
   2477  1a5f		       a5 da		      LDA	d
   2478  1a61		       38		      SEC
   2479  1a62		       e9 26		      SBC	#38
   2480  1a64		       85 da		      STA	d
   2481  1a66		       a5 90		      LDA	asteroid3Y
   2482  1a68		       e9 00		      SBC	#0
   2483  1a6a		       85 90		      STA	asteroid3Y
   2484  1a6c				   .L0237		;  asteroid4Y	=  asteroid4Y  -  0.08
   2485  1a6c
   2486  1a6c		       a5 db		      LDA	e
   2487  1a6e		       38		      SEC
   2488  1a6f		       e9 14		      SBC	#20
   2489  1a71		       85 db		      STA	e
   2490  1a73		       a5 91		      LDA	asteroid4Y
   2491  1a75		       e9 00		      SBC	#0
   2492  1a77		       85 91		      STA	asteroid4Y
   2493  1a79				   .L0238		;  COLUPF  =  $50
   2494  1a79
   2495  1a79		       a9 50		      LDA	#$50
   2496  1a7b		       85 08		      STA	COLUPF
   2497  1a7d				   .L0239		;  goto resetScreen
   2498  1a7d
   2499  1a7d		       4c b0 db 	      jmp	.resetScreen
   2500  1a80
   2501  1a80				   .
   2502  1a80							; 
   2503  1a80
   2504  1a80				   .level7
   2505  1a80							; level7
   2506  1a80
   2507  1a80				   .L0240		;  asteroidY  =  asteroidY  -	0.18
   2508  1a80
   2509  1a80		       a5 d8		      LDA	b
   2510  1a82		       38		      SEC
   2511  1a83		       e9 2e		      SBC	#46
   2512  1a85		       85 d8		      STA	b
   2513  1a87		       a5 8e		      LDA	asteroidY
   2514  1a89		       e9 00		      SBC	#0
   2515  1a8b		       85 8e		      STA	asteroidY
   2516  1a8d				   .L0241		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.23
   2517  1a8d
   2518  1a8d		       a5 8f		      LDA	asteroid2Y
   2519  1a8f		       c9 64		      CMP	#100
   2520  1a91		       b0 0d		      BCS	.skipL0241
   2521  1a93				   .condpart128
   2522  1a93		       a5 d9		      LDA	c
   2523  1a95		       38		      SEC
   2524  1a96		       e9 3a		      SBC	#58
   2525  1a98		       85 d9		      STA	c
   2526  1a9a		       a5 8f		      LDA	asteroid2Y
   2527  1a9c		       e9 00		      SBC	#0
   2528  1a9e		       85 8f		      STA	asteroid2Y
   2529  1aa0				   .skipL0241
   2530  1aa0				   .L0242		;  asteroid3Y	=  asteroid3Y  -  0.15
   2531  1aa0
   2532  1aa0		       a5 da		      LDA	d
   2533  1aa2		       38		      SEC
   2534  1aa3		       e9 26		      SBC	#38
   2535  1aa5		       85 da		      STA	d
   2536  1aa7		       a5 90		      LDA	asteroid3Y
   2537  1aa9		       e9 00		      SBC	#0
   2538  1aab		       85 90		      STA	asteroid3Y
   2539  1aad				   .L0243		;  asteroid4Y	=  asteroid4Y  -  0.08
   2540  1aad
   2541  1aad		       a5 db		      LDA	e
   2542  1aaf		       38		      SEC
   2543  1ab0		       e9 14		      SBC	#20
   2544  1ab2		       85 db		      STA	e
   2545  1ab4		       a5 91		      LDA	asteroid4Y
   2546  1ab6		       e9 00		      SBC	#0
   2547  1ab8		       85 91		      STA	asteroid4Y
   2548  1aba				   .L0244		;  goto resetScreen
   2549  1aba
   2550  1aba		       4c b0 db 	      jmp	.resetScreen
   2551  1abd
   2552  1abd				   .
   2553  1abd							; 
   2554  1abd
   2555  1abd				   .level6
   2556  1abd							; level6
   2557  1abd
   2558  1abd				   .L0245		;  asteroidY  =  asteroidY  -	0.16
   2559  1abd
   2560  1abd		       a5 d8		      LDA	b
   2561  1abf		       38		      SEC
   2562  1ac0		       e9 28		      SBC	#40
   2563  1ac2		       85 d8		      STA	b
   2564  1ac4		       a5 8e		      LDA	asteroidY
   2565  1ac6		       e9 00		      SBC	#0
   2566  1ac8		       85 8e		      STA	asteroidY
   2567  1aca				   .L0246		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.21
   2568  1aca
   2569  1aca		       a5 8f		      LDA	asteroid2Y
   2570  1acc		       c9 64		      CMP	#100
   2571  1ace		       b0 0d		      BCS	.skipL0246
   2572  1ad0				   .condpart129
   2573  1ad0		       a5 d9		      LDA	c
   2574  1ad2		       38		      SEC
   2575  1ad3		       e9 35		      SBC	#53
   2576  1ad5		       85 d9		      STA	c
   2577  1ad7		       a5 8f		      LDA	asteroid2Y
   2578  1ad9		       e9 00		      SBC	#0
   2579  1adb		       85 8f		      STA	asteroid2Y
   2580  1add				   .skipL0246
   2581  1add				   .L0247		;  asteroid3Y	=  asteroid3Y  -  0.13
   2582  1add
   2583  1add		       a5 da		      LDA	d
   2584  1adf		       38		      SEC
   2585  1ae0		       e9 21		      SBC	#33
   2586  1ae2		       85 da		      STA	d
   2587  1ae4		       a5 90		      LDA	asteroid3Y
   2588  1ae6		       e9 00		      SBC	#0
   2589  1ae8		       85 90		      STA	asteroid3Y
   2590  1aea				   .L0248		;  asteroid4Y	=  asteroid4Y  -  0.08
   2591  1aea
   2592  1aea		       a5 db		      LDA	e
   2593  1aec		       38		      SEC
   2594  1aed		       e9 14		      SBC	#20
   2595  1aef		       85 db		      STA	e
   2596  1af1		       a5 91		      LDA	asteroid4Y
   2597  1af3		       e9 00		      SBC	#0
   2598  1af5		       85 91		      STA	asteroid4Y
   2599  1af7				   .L0249		;  goto resetScreen
   2600  1af7
   2601  1af7		       4c b0 db 	      jmp	.resetScreen
   2602  1afa
   2603  1afa				   .
   2604  1afa							; 
   2605  1afa
   2606  1afa				   .level5
   2607  1afa							; level5
   2608  1afa
   2609  1afa				   .L0250		;  asteroid2Y	=  asteroid2Y  -  0.22
   2610  1afa
   2611  1afa		       a5 d9		      LDA	c
   2612  1afc		       38		      SEC
   2613  1afd		       e9 38		      SBC	#56
   2614  1aff		       85 d9		      STA	c
   2615  1b01		       a5 8f		      LDA	asteroid2Y
   2616  1b03		       e9 00		      SBC	#0
   2617  1b05		       85 8f		      STA	asteroid2Y
   2618  1b07				   .L0251		;  asteroid4Y	=  asteroid4Y  -  0.08
   2619  1b07
   2620  1b07		       a5 db		      LDA	e
   2621  1b09		       38		      SEC
   2622  1b0a		       e9 14		      SBC	#20
   2623  1b0c		       85 db		      STA	e
   2624  1b0e		       a5 91		      LDA	asteroid4Y
   2625  1b10		       e9 00		      SBC	#0
   2626  1b12		       85 91		      STA	asteroid4Y
   2627  1b14				   .L0252		;  asteroidY  =  asteroidY  -	0.18
   2628  1b14
   2629  1b14		       a5 d8		      LDA	b
   2630  1b16		       38		      SEC
   2631  1b17		       e9 2e		      SBC	#46
   2632  1b19		       85 d8		      STA	b
   2633  1b1b		       a5 8e		      LDA	asteroidY
   2634  1b1d		       e9 00		      SBC	#0
   2635  1b1f		       85 8e		      STA	asteroidY
   2636  1b21				   .L0253		;  goto resetScreen
   2637  1b21
   2638  1b21		       4c b0 db 	      jmp	.resetScreen
   2639  1b24
   2640  1b24				   .
   2641  1b24							; 
   2642  1b24
   2643  1b24				   .level4
   2644  1b24							; level4
   2645  1b24
   2646  1b24				   .L0254		;  asteroid2Y	=  asteroid2Y  -  0.21
   2647  1b24
   2648  1b24		       a5 d9		      LDA	c
   2649  1b26		       38		      SEC
   2650  1b27		       e9 35		      SBC	#53
   2651  1b29		       85 d9		      STA	c
   2652  1b2b		       a5 8f		      LDA	asteroid2Y
   2653  1b2d		       e9 00		      SBC	#0
   2654  1b2f		       85 8f		      STA	asteroid2Y
   2655  1b31				   .L0255		;  asteroid4Y	=  asteroid4Y  -  0.08
   2656  1b31
   2657  1b31		       a5 db		      LDA	e
   2658  1b33		       38		      SEC
   2659  1b34		       e9 14		      SBC	#20
   2660  1b36		       85 db		      STA	e
   2661  1b38		       a5 91		      LDA	asteroid4Y
   2662  1b3a		       e9 00		      SBC	#0
   2663  1b3c		       85 91		      STA	asteroid4Y
   2664  1b3e				   .L0256		;  asteroidY  =  asteroidY  -	0.15
   2665  1b3e
   2666  1b3e		       a5 d8		      LDA	b
   2667  1b40		       38		      SEC
   2668  1b41		       e9 26		      SBC	#38
   2669  1b43		       85 d8		      STA	b
   2670  1b45		       a5 8e		      LDA	asteroidY
   2671  1b47		       e9 00		      SBC	#0
   2672  1b49		       85 8e		      STA	asteroidY
   2673  1b4b				   .L0257		;  COLUPF  =  $40
   2674  1b4b
   2675  1b4b		       a9 40		      LDA	#$40
   2676  1b4d		       85 08		      STA	COLUPF
   2677  1b4f				   .L0258		;  goto resetScreen
   2678  1b4f
   2679  1b4f		       4c b0 db 	      jmp	.resetScreen
   2680  1b52
   2681  1b52				   .
   2682  1b52							; 
   2683  1b52
   2684  1b52				   .level3
   2685  1b52							; level3
   2686  1b52
   2687  1b52				   .L0259		;  if asteroidY  <  100 then asteroidY  =  asteroidY  -  0.15
   2688  1b52
   2689  1b52		       a5 8e		      LDA	asteroidY
   2690  1b54		       c9 64		      CMP	#100
   2691  1b56		       b0 0d		      BCS	.skipL0259
   2692  1b58				   .condpart130
   2693  1b58		       a5 d8		      LDA	b
   2694  1b5a		       38		      SEC
   2695  1b5b		       e9 26		      SBC	#38
   2696  1b5d		       85 d8		      STA	b
   2697  1b5f		       a5 8e		      LDA	asteroidY
   2698  1b61		       e9 00		      SBC	#0
   2699  1b63		       85 8e		      STA	asteroidY
   2700  1b65				   .skipL0259
   2701  1b65				   .L0260		;  asteroid2Y	=  asteroid2Y  -  0.21
   2702  1b65
   2703  1b65		       a5 d9		      LDA	c
   2704  1b67		       38		      SEC
   2705  1b68		       e9 35		      SBC	#53
   2706  1b6a		       85 d9		      STA	c
   2707  1b6c		       a5 8f		      LDA	asteroid2Y
   2708  1b6e		       e9 00		      SBC	#0
   2709  1b70		       85 8f		      STA	asteroid2Y
   2710  1b72				   .L0261		;  asteroid4Y	=  asteroid4Y  -  0.08
   2711  1b72
   2712  1b72		       a5 db		      LDA	e
   2713  1b74		       38		      SEC
   2714  1b75		       e9 14		      SBC	#20
   2715  1b77		       85 db		      STA	e
   2716  1b79		       a5 91		      LDA	asteroid4Y
   2717  1b7b		       e9 00		      SBC	#0
   2718  1b7d		       85 91		      STA	asteroid4Y
   2719  1b7f				   .L0262		;  goto resetScreen
   2720  1b7f
   2721  1b7f		       4c b0 db 	      jmp	.resetScreen
   2722  1b82
   2723  1b82				   .
   2724  1b82							; 
   2725  1b82
   2726  1b82				   .level2
   2727  1b82							; level2
   2728  1b82
   2729  1b82				   .L0263		;  asteroid2Y	=  asteroid2Y  -  0.21
   2730  1b82
   2731  1b82		       a5 d9		      LDA	c
   2732  1b84		       38		      SEC
   2733  1b85		       e9 35		      SBC	#53
   2734  1b87		       85 d9		      STA	c
   2735  1b89		       a5 8f		      LDA	asteroid2Y
   2736  1b8b		       e9 00		      SBC	#0
   2737  1b8d		       85 8f		      STA	asteroid2Y
   2738  1b8f				   .L0264		;  asteroidY  =  asteroidY  -	0.15
   2739  1b8f
   2740  1b8f		       a5 d8		      LDA	b
   2741  1b91		       38		      SEC
   2742  1b92		       e9 26		      SBC	#38
   2743  1b94		       85 d8		      STA	b
   2744  1b96		       a5 8e		      LDA	asteroidY
   2745  1b98		       e9 00		      SBC	#0
   2746  1b9a		       85 8e		      STA	asteroidY
   2747  1b9c				   .L0265		;  goto resetScreen
   2748  1b9c
   2749  1b9c		       4c b0 db 	      jmp	.resetScreen
   2750  1b9f
   2751  1b9f				   .
   2752  1b9f							; 
   2753  1b9f
   2754  1b9f				   .level1
   2755  1b9f							; level1
   2756  1b9f
   2757  1b9f				   .L0266		;  asteroid2Y	=  asteroid2Y  -  0.21
   2758  1b9f
   2759  1b9f		       a5 d9		      LDA	c
   2760  1ba1		       38		      SEC
   2761  1ba2		       e9 35		      SBC	#53
   2762  1ba4		       85 d9		      STA	c
   2763  1ba6		       a5 8f		      LDA	asteroid2Y
   2764  1ba8		       e9 00		      SBC	#0
   2765  1baa		       85 8f		      STA	asteroid2Y
   2766  1bac				   .L0267		;  COLUPF  =  $70
   2767  1bac
   2768  1bac		       a9 70		      LDA	#$70
   2769  1bae		       85 08		      STA	COLUPF
   2770  1bb0				   .
   2771  1bb0							; 
   2772  1bb0
   2773  1bb0				   .
   2774  1bb0							; 
   2775  1bb0
   2776  1bb0				   .resetScreen
   2777  1bb0							; resetScreen
   2778  1bb0
   2779  1bb0				   .L0268		;  drawscreen
   2780  1bb0
   2781  1bb0		       85 d1		      sta	temp7
   2782  1bb2		       a9 db		      lda	#>(ret_point2-1)
   2783  1bb4		       48		      pha
   2784  1bb5		       a9 c7		      lda	#<(ret_point2-1)
   2785  1bb7		       48		      pha
   2786  1bb8		       a9 f0		      lda	#>(drawscreen-1)
   2787  1bba		       48		      pha
   2788  1bbb		       a9 39		      lda	#<(drawscreen-1)
   2789  1bbd		       48		      pha
   2790  1bbe		       a5 d1		      lda	temp7
   2791  1bc0		       48		      pha
   2792  1bc1		       8a		      txa
   2793  1bc2		       48		      pha
   2794  1bc3		       a2 02		      ldx	#2
   2795  1bc5		       4c eb ff 	      jmp	BS_jsr
   2796  1bc8				   ret_point2
   2797  1bc8				   .
   2798  1bc8							; 
   2799  1bc8
   2800  1bc8				   .
   2801  1bc8							; 
   2802  1bc8
   2803  1bc8				   .L0269		;  if powerUpInPlay  =  1 then goto skipPlayer1
   2804  1bc8
   2805  1bc8		       a5 e5		      LDA	powerUpInPlay
   2806  1bca		       c9 01		      CMP	#1
   2807  1bcc		       d0 03		      BNE	.skipL0269
   2808  1bce				   .condpart131
   2809  1bce		       4c 16 dc 	      jmp	.skipPlayer1
   2810  1bd1
   2811  1bd1				   .skipL0269
   2812  1bd1				   .L0270		;  if asteroidY  >  70 then asteroidx	=  asteroidx  +  0.15
   2813  1bd1
   2814  1bd1		       a9 46		      LDA	#70
   2815  1bd3		       c5 8e		      CMP	asteroidY
   2816  1bd5		       b0 0d		      BCS	.skipL0270
   2817  1bd7				   .condpart132
   2818  1bd7		       a5 de		      LDA	h
   2819  1bd9		       18		      CLC
   2820  1bda		       69 26		      ADC	#38
   2821  1bdc		       85 de		      STA	h
   2822  1bde		       a5 85		      LDA	asteroidx
   2823  1be0		       69 00		      ADC	#0
   2824  1be2		       85 85		      STA	asteroidx
   2825  1be4				   .skipL0270
   2826  1be4				   .L0271		;  if asteroidY  <  70  &&  asteroidY	>  50 then asteroidx  =  asteroidx  -  0.15
   2827  1be4
   2828  1be4		       a5 8e		      LDA	asteroidY
   2829  1be6		       c9 46		      CMP	#70
   2830  1be8		       b0 13		      BCS	.skipL0271
   2831  1bea				   .condpart133
   2832  1bea		       a9 32		      LDA	#50
   2833  1bec		       c5 8e		      CMP	asteroidY
   2834  1bee		       b0 0d		      BCS	.skip133then
   2835  1bf0				   .condpart134
   2836  1bf0		       a5 de		      LDA	h
   2837  1bf2		       38		      SEC
   2838  1bf3		       e9 26		      SBC	#38
   2839  1bf5		       85 de		      STA	h
   2840  1bf7		       a5 85		      LDA	asteroidx
   2841  1bf9		       e9 00		      SBC	#0
   2842  1bfb		       85 85		      STA	asteroidx
   2843  1bfd				   .skip133then
   2844  1bfd				   .skipL0271
   2845  1bfd				   .L0272		;  if asteroidY  <  50  &&  asteroidY	>  42 then asteroidx  =  asteroidx  +  0.15
   2846  1bfd
   2847  1bfd		       a5 8e		      LDA	asteroidY
   2848  1bff		       c9 32		      CMP	#50
   2849  1c01		       b0 13		      BCS	.skipL0272
   2850  1c03				   .condpart135
   2851  1c03		       a9 2a		      LDA	#42
   2852  1c05		       c5 8e		      CMP	asteroidY
   2853  1c07		       b0 0d		      BCS	.skip135then
   2854  1c09				   .condpart136
   2855  1c09		       a5 de		      LDA	h
   2856  1c0b		       18		      CLC
   2857  1c0c		       69 26		      ADC	#38
   2858  1c0e		       85 de		      STA	h
   2859  1c10		       a5 85		      LDA	asteroidx
   2860  1c12		       69 00		      ADC	#0
   2861  1c14		       85 85		      STA	asteroidx
   2862  1c16				   .skip135then
   2863  1c16				   .skipL0272
   2864  1c16				   .
   2865  1c16							; 
   2866  1c16
   2867  1c16				   .skipPlayer1
   2868  1c16							; skipPlayer1
   2869  1c16
   2870  1c16				   .L0273		;  if asteroid4Y  >  100 then asteroid4x  =  116
   2871  1c16
   2872  1c16		       a9 64		      LDA	#100
   2873  1c18		       c5 91		      CMP	asteroid4Y
   2874  1c1a		       b0 08		      BCS	.skipL0273
   2875  1c1c				   .condpart137
   2876  1c1c		       a9 00		      LDA	#0
   2877  1c1e		       85 e1		      STA	k
   2878  1c20		       a9 74		      LDA	#116
   2879  1c22		       85 88		      STA	asteroid4x
   2880  1c24				   .skipL0273
   2881  1c24				   .L0274		;  if asteroid4Y  <  90  &&  asteroid4Y  >  82 then asteroid4x  =  asteroid4x	-  0.75
   2882  1c24
   2883  1c24		       a5 91		      LDA	asteroid4Y
   2884  1c26		       c9 5a		      CMP	#90
   2885  1c28		       b0 13		      BCS	.skipL0274
   2886  1c2a				   .condpart138
   2887  1c2a		       a9 52		      LDA	#82
   2888  1c2c		       c5 91		      CMP	asteroid4Y
   2889  1c2e		       b0 0d		      BCS	.skip138then
   2890  1c30				   .condpart139
   2891  1c30		       a5 e1		      LDA	k
   2892  1c32		       38		      SEC
   2893  1c33		       e9 c0		      SBC	#192
   2894  1c35		       85 e1		      STA	k
   2895  1c37		       a5 88		      LDA	asteroid4x
   2896  1c39		       e9 00		      SBC	#0
   2897  1c3b		       85 88		      STA	asteroid4x
   2898  1c3d				   .skip138then
   2899  1c3d				   .skipL0274
   2900  1c3d				   .L0275		;  if asteroid4Y  <  80  &&  asteroid4Y  >  72 then asteroid4x  =  asteroid4x	+  0.75
   2901  1c3d
   2902  1c3d		       a5 91		      LDA	asteroid4Y
   2903  1c3f		       c9 50		      CMP	#80
   2904  1c41		       b0 13		      BCS	.skipL0275
   2905  1c43				   .condpart140
   2906  1c43		       a9 48		      LDA	#72
   2907  1c45		       c5 91		      CMP	asteroid4Y
   2908  1c47		       b0 0d		      BCS	.skip140then
   2909  1c49				   .condpart141
   2910  1c49		       a5 e1		      LDA	k
   2911  1c4b		       18		      CLC
   2912  1c4c		       69 c0		      ADC	#192
   2913  1c4e		       85 e1		      STA	k
   2914  1c50		       a5 88		      LDA	asteroid4x
   2915  1c52		       69 00		      ADC	#0
   2916  1c54		       85 88		      STA	asteroid4x
   2917  1c56				   .skip140then
   2918  1c56				   .skipL0275
   2919  1c56				   .L0276		;  if asteroid4Y  <  70  &&  asteroid4Y  >  62 then asteroid4x  =  asteroid4x	-  0.75
   2920  1c56
   2921  1c56		       a5 91		      LDA	asteroid4Y
   2922  1c58		       c9 46		      CMP	#70
   2923  1c5a		       b0 13		      BCS	.skipL0276
   2924  1c5c				   .condpart142
   2925  1c5c		       a9 3e		      LDA	#62
   2926  1c5e		       c5 91		      CMP	asteroid4Y
   2927  1c60		       b0 0d		      BCS	.skip142then
   2928  1c62				   .condpart143
   2929  1c62		       a5 e1		      LDA	k
   2930  1c64		       38		      SEC
   2931  1c65		       e9 c0		      SBC	#192
   2932  1c67		       85 e1		      STA	k
   2933  1c69		       a5 88		      LDA	asteroid4x
   2934  1c6b		       e9 00		      SBC	#0
   2935  1c6d		       85 88		      STA	asteroid4x
   2936  1c6f				   .skip142then
   2937  1c6f				   .skipL0276
   2938  1c6f				   .L0277		;  if asteroid4Y  <  60  &&  asteroid4Y  >  52 then asteroid4x  =  asteroid4x	+  0.75
   2939  1c6f
   2940  1c6f		       a5 91		      LDA	asteroid4Y
   2941  1c71		       c9 3c		      CMP	#60
   2942  1c73		       b0 13		      BCS	.skipL0277
   2943  1c75				   .condpart144
   2944  1c75		       a9 34		      LDA	#52
   2945  1c77		       c5 91		      CMP	asteroid4Y
   2946  1c79		       b0 0d		      BCS	.skip144then
   2947  1c7b				   .condpart145
   2948  1c7b		       a5 e1		      LDA	k
   2949  1c7d		       18		      CLC
   2950  1c7e		       69 c0		      ADC	#192
   2951  1c80		       85 e1		      STA	k
   2952  1c82		       a5 88		      LDA	asteroid4x
   2953  1c84		       69 00		      ADC	#0
   2954  1c86		       85 88		      STA	asteroid4x
   2955  1c88				   .skip144then
   2956  1c88				   .skipL0277
   2957  1c88				   .L0278		;  if asteroid4Y  <  50  &&  asteroid4Y  >  42 then asteroid4x  =  asteroid4x	-  0.75
   2958  1c88
   2959  1c88		       a5 91		      LDA	asteroid4Y
   2960  1c8a		       c9 32		      CMP	#50
   2961  1c8c		       b0 13		      BCS	.skipL0278
   2962  1c8e				   .condpart146
   2963  1c8e		       a9 2a		      LDA	#42
   2964  1c90		       c5 91		      CMP	asteroid4Y
   2965  1c92		       b0 0d		      BCS	.skip146then
   2966  1c94				   .condpart147
   2967  1c94		       a5 e1		      LDA	k
   2968  1c96		       38		      SEC
   2969  1c97		       e9 c0		      SBC	#192
   2970  1c99		       85 e1		      STA	k
   2971  1c9b		       a5 88		      LDA	asteroid4x
   2972  1c9d		       e9 00		      SBC	#0
   2973  1c9f		       85 88		      STA	asteroid4x
   2974  1ca1				   .skip146then
   2975  1ca1				   .skipL0278
   2976  1ca1				   .
   2977  1ca1							; 
   2978  1ca1
   2979  1ca1				   .L0279		;  if altSprite  =  0	||  player2y  >  90 then goto sprites
   2980  1ca1
   2981  1ca1		       a5 e6		      LDA	altSprite
   2982  1ca3		       c9 00		      CMP	#0
   2983  1ca5		       d0 03		      BNE	.skipL0279
   2984  1ca7				   .condpart148
   2985  1ca7		       4c b0 dc 	      jmp	.condpart149
   2986  1caa				   .skipL0279
   2987  1caa		       a9 5a		      LDA	#90
   2988  1cac		       c5 8f		      CMP	player2y
   2989  1cae		       b0 03		      BCS	.skip50OR
   2990  1cb0				   .condpart149
   2991  1cb0		       4c 9c d1 	      jmp	.sprites
   2992  1cb3
   2993  1cb3				   .skip50OR
   2994  1cb3				   .L0280		;  if player2x  -  7  >  player0x then asteroid2x  =  asteroid2x  -  0.5
   2995  1cb3
   2996  1cb3							; complex condition detected
   2997  1cb3		       a5 86		      LDA	player2x
   2998  1cb5		       38		      SEC
   2999  1cb6		       e9 07		      SBC	#7
   3000  1cb8		       48		      PHA
   3001  1cb9		       ba		      TSX
   3002  1cba		       68		      PLA
   3003  1cbb		       a5 84		      LDA	player0x
   3004  1cbd		       d5 01		      CMP	1,x
   3005  1cbf		       b0 0d		      BCS	.skipL0280
   3006  1cc1				   .condpart150
   3007  1cc1		       a5 df		      LDA	i
   3008  1cc3		       38		      SEC
   3009  1cc4		       e9 80		      SBC	#128
   3010  1cc6		       85 df		      STA	i
   3011  1cc8		       a5 86		      LDA	asteroid2x
   3012  1cca		       e9 00		      SBC	#0
   3013  1ccc		       85 86		      STA	asteroid2x
   3014  1cce				   .skipL0280
   3015  1cce				   .L0281		;  if player2x  -  7  <  player0x then asteroid2x  =  asteroid2x  +  0.5
   3016  1cce
   3017  1cce							; complex condition detected
   3018  1cce		       a5 86		      LDA	player2x
   3019  1cd0		       38		      SEC
   3020  1cd1		       e9 07		      SBC	#7
   3021  1cd3		       c5 84		      CMP	player0x
   3022  1cd5		       b0 0d		      BCS	.skipL0281
   3023  1cd7				   .condpart151
   3024  1cd7		       a5 df		      LDA	i
   3025  1cd9		       18		      CLC
   3026  1cda		       69 80		      ADC	#128
   3027  1cdc		       85 df		      STA	i
   3028  1cde		       a5 86		      LDA	asteroid2x
   3029  1ce0		       69 00		      ADC	#0
   3030  1ce2		       85 86		      STA	asteroid2x
   3031  1ce4				   .skipL0281
   3032  1ce4				   .
   3033  1ce4							; 
   3034  1ce4
   3035  1ce4				   .L0282		;  goto sprites
   3036  1ce4
   3037  1ce4		       4c 9c d1 	      jmp	.sprites
   3038  1ce7
   3039  1ce7				   .
   3040  1ce7							; 
   3041  1ce7
   3042  1ce7				   .setPlayer1Color
   3043  1ce7							; setPlayer1Color
   3044  1ce7
   3045  1ce7				   .L0283		;  if ticker  =  0 then _COLUP1  =  $22
   3046  1ce7
   3047  1ce7		       a5 e4		      LDA	ticker
   3048  1ce9		       c9 00		      CMP	#0
   3049  1ceb		       d0 04		      BNE	.skipL0283
   3050  1ced				   .condpart152
   3051  1ced		       a9 22		      LDA	#$22
   3052  1cef		       85 98		      STA	_COLUP1
   3053  1cf1				   .skipL0283
   3054  1cf1				   .L0284		;  if ticker  =  1 then _COLUP1  =  $38
   3055  1cf1
   3056  1cf1		       a5 e4		      LDA	ticker
   3057  1cf3		       c9 01		      CMP	#1
   3058  1cf5		       d0 04		      BNE	.skipL0284
   3059  1cf7				   .condpart153
   3060  1cf7		       a9 38		      LDA	#$38
   3061  1cf9		       85 98		      STA	_COLUP1
   3062  1cfb				   .skipL0284
   3063  1cfb				   .L0285		;  if ticker  =  2 then _COLUP1  =  $66
   3064  1cfb
   3065  1cfb		       a5 e4		      LDA	ticker
   3066  1cfd		       c9 02		      CMP	#2
   3067  1cff		       d0 04		      BNE	.skipL0285
   3068  1d01				   .condpart154
   3069  1d01		       a9 66		      LDA	#$66
   3070  1d03		       85 98		      STA	_COLUP1
   3071  1d05				   .skipL0285
   3072  1d05				   .L0286		;  if ticker  =  3 then _COLUP1  =  $78
   3073  1d05
   3074  1d05		       a5 e4		      LDA	ticker
   3075  1d07		       c9 03		      CMP	#3
   3076  1d09		       d0 04		      BNE	.skipL0286
   3077  1d0b				   .condpart155
   3078  1d0b		       a9 78		      LDA	#$78
   3079  1d0d		       85 98		      STA	_COLUP1
   3080  1d0f				   .skipL0286
   3081  1d0f				   .L0287		;  if ticker  =  4 then _COLUP1  =  $CA
   3082  1d0f
   3083  1d0f		       a5 e4		      LDA	ticker
   3084  1d11		       c9 04		      CMP	#4
   3085  1d13		       d0 04		      BNE	.skipL0287
   3086  1d15				   .condpart156
   3087  1d15		       a9 ca		      LDA	#$CA
   3088  1d17		       85 98		      STA	_COLUP1
   3089  1d19				   .skipL0287
   3090  1d19				   .L0288		;  if ticker  =  5 then _COLUP1  =  $D6
   3091  1d19
   3092  1d19		       a5 e4		      LDA	ticker
   3093  1d1b		       c9 05		      CMP	#5
   3094  1d1d		       d0 04		      BNE	.skipL0288
   3095  1d1f				   .condpart157
   3096  1d1f		       a9 d6		      LDA	#$D6
   3097  1d21		       85 98		      STA	_COLUP1
   3098  1d23				   .skipL0288
   3099  1d23				   .L0289		;  if ticker  =  6 then _COLUP1  =  $E8
   3100  1d23
   3101  1d23		       a5 e4		      LDA	ticker
   3102  1d25		       c9 06		      CMP	#6
   3103  1d27		       d0 04		      BNE	.skipL0289
   3104  1d29				   .condpart158
   3105  1d29		       a9 e8		      LDA	#$E8
   3106  1d2b		       85 98		      STA	_COLUP1
   3107  1d2d				   .skipL0289
   3108  1d2d				   .L0290		;  if ticker  =  7 then powerUpInPlay	=  1 :	_COLUP1  =  $1f else powerUpInPlay  =  0
   3109  1d2d
   3110  1d2d		       a5 e4		      LDA	ticker
   3111  1d2f		       c9 07		      CMP	#7
   3112  1d31		       d0 0b		      BNE	.skipL0290
   3113  1d33				   .condpart159
   3114  1d33		       a9 01		      LDA	#1
   3115  1d35		       85 e5		      STA	powerUpInPlay
   3116  1d37		       a9 1f		      LDA	#$1f
   3117  1d39		       85 98		      STA	_COLUP1
   3118  1d3b		       4c 42 dd 	      jmp	.skipelse2
   3119  1d3e				   .skipL0290
   3120  1d3e		       a9 00		      LDA	#0
   3121  1d40		       85 e5		      STA	powerUpInPlay
   3122  1d42				   .skipelse2
   3123  1d42				   .L0291		;  goto colorSetComplete
   3124  1d42
   3125  1d42		       4c fa d1 	      jmp	.colorSetComplete
   3126  1d45
   3127  1d45				   .
   3128  1d45							; 
   3129  1d45
   3130  1d45				   .setPlayer2Color
   3131  1d45							; setPlayer2Color
   3132  1d45
   3133  1d45				   .L0292		;  if ticker  =  0 then COLUP2  =  $22
   3134  1d45
   3135  1d45		       a5 e4		      LDA	ticker
   3136  1d47		       c9 00		      CMP	#0
   3137  1d49		       d0 04		      BNE	.skipL0292
   3138  1d4b				   .condpart160
   3139  1d4b		       a9 22		      LDA	#$22
   3140  1d4d		       85 99		      STA	COLUP2
   3141  1d4f				   .skipL0292
   3142  1d4f				   .L0293		;  if ticker  =  1 then COLUP2  =  $38
   3143  1d4f
   3144  1d4f		       a5 e4		      LDA	ticker
   3145  1d51		       c9 01		      CMP	#1
   3146  1d53		       d0 04		      BNE	.skipL0293
   3147  1d55				   .condpart161
   3148  1d55		       a9 38		      LDA	#$38
   3149  1d57		       85 99		      STA	COLUP2
   3150  1d59				   .skipL0293
   3151  1d59				   .L0294		;  if ticker  =  2 then COLUP2  =  $66
   3152  1d59
   3153  1d59		       a5 e4		      LDA	ticker
   3154  1d5b		       c9 02		      CMP	#2
   3155  1d5d		       d0 04		      BNE	.skipL0294
   3156  1d5f				   .condpart162
   3157  1d5f		       a9 66		      LDA	#$66
   3158  1d61		       85 99		      STA	COLUP2
   3159  1d63				   .skipL0294
   3160  1d63				   .L0295		;  if ticker  =  3 then COLUP2  =  $78
   3161  1d63
   3162  1d63		       a5 e4		      LDA	ticker
   3163  1d65		       c9 03		      CMP	#3
   3164  1d67		       d0 04		      BNE	.skipL0295
   3165  1d69				   .condpart163
   3166  1d69		       a9 78		      LDA	#$78
   3167  1d6b		       85 99		      STA	COLUP2
   3168  1d6d				   .skipL0295
   3169  1d6d				   .L0296		;  if ticker  =  4 then COLUP2  =  $CA
   3170  1d6d
   3171  1d6d		       a5 e4		      LDA	ticker
   3172  1d6f		       c9 04		      CMP	#4
   3173  1d71		       d0 04		      BNE	.skipL0296
   3174  1d73				   .condpart164
   3175  1d73		       a9 ca		      LDA	#$CA
   3176  1d75		       85 99		      STA	COLUP2
   3177  1d77				   .skipL0296
   3178  1d77				   .L0297		;  if ticker  =  5 then COLUP2  =  $D6
   3179  1d77
   3180  1d77		       a5 e4		      LDA	ticker
   3181  1d79		       c9 05		      CMP	#5
   3182  1d7b		       d0 04		      BNE	.skipL0297
   3183  1d7d				   .condpart165
   3184  1d7d		       a9 d6		      LDA	#$D6
   3185  1d7f		       85 99		      STA	COLUP2
   3186  1d81				   .skipL0297
   3187  1d81				   .L0298		;  if ticker  =  6 then COLUP2  =  $E8
   3188  1d81
   3189  1d81		       a5 e4		      LDA	ticker
   3190  1d83		       c9 06		      CMP	#6
   3191  1d85		       d0 04		      BNE	.skipL0298
   3192  1d87				   .condpart166
   3193  1d87		       a9 e8		      LDA	#$E8
   3194  1d89		       85 99		      STA	COLUP2
   3195  1d8b				   .skipL0298
   3196  1d8b				   .L0299		;  if ticker  =  7 then COLUP2  =  $3E
   3197  1d8b
   3198  1d8b		       a5 e4		      LDA	ticker
   3199  1d8d		       c9 07		      CMP	#7
   3200  1d8f		       d0 04		      BNE	.skipL0299
   3201  1d91				   .condpart167
   3202  1d91		       a9 3e		      LDA	#$3E
   3203  1d93		       85 99		      STA	COLUP2
   3204  1d95				   .skipL0299
   3205  1d95				   .L0300		;  if ticker  =  8 then COLUP2  =  $DC
   3206  1d95
   3207  1d95		       a5 e4		      LDA	ticker
   3208  1d97		       c9 08		      CMP	#8
   3209  1d99		       d0 04		      BNE	.skipL0300
   3210  1d9b				   .condpart168
   3211  1d9b		       a9 dc		      LDA	#$DC
   3212  1d9d		       85 99		      STA	COLUP2
   3213  1d9f				   .skipL0300
   3214  1d9f				   .L0301		;  if ticker  =  9 then COLUP2  =  $48
   3215  1d9f
   3216  1d9f		       a5 e4		      LDA	ticker
   3217  1da1		       c9 09		      CMP	#9
   3218  1da3		       d0 04		      BNE	.skipL0301
   3219  1da5				   .condpart169
   3220  1da5		       a9 48		      LDA	#$48
   3221  1da7		       85 99		      STA	COLUP2
   3222  1da9				   .skipL0301
   3223  1da9				   .L0302		;  if ticker  =  10 then COLUP2  =  $68
   3224  1da9
   3225  1da9		       a5 e4		      LDA	ticker
   3226  1dab		       c9 0a		      CMP	#10
   3227  1dad		       d0 04		      BNE	.skipL0302
   3228  1daf				   .condpart170
   3229  1daf		       a9 68		      LDA	#$68
   3230  1db1		       85 99		      STA	COLUP2
   3231  1db3				   .skipL0302
   3232  1db3				   .L0303		;  if ticker  <  4 then altSprite  =  0
   3233  1db3
   3234  1db3		       a5 e4		      LDA	ticker
   3235  1db5		       c9 04		      CMP	#4
   3236  1db7		       b0 04		      BCS	.skipL0303
   3237  1db9				   .condpart171
   3238  1db9		       a9 00		      LDA	#0
   3239  1dbb		       85 e6		      STA	altSprite
   3240  1dbd				   .skipL0303
   3241  1dbd				   .L0304		;  if ticker  >=  4  &&  killCount  >	26 then altSprite  =  1
   3242  1dbd
   3243  1dbd		       a5 e4		      LDA	ticker
   3244  1dbf		       c9 04		      CMP	#4
   3245  1dc1		       90 0a		      BCC	.skipL0304
   3246  1dc3				   .condpart172
   3247  1dc3		       a9 1a		      LDA	#26
   3248  1dc5		       c5 e3		      CMP	killCount
   3249  1dc7		       b0 04		      BCS	.skip172then
   3250  1dc9				   .condpart173
   3251  1dc9		       a9 01		      LDA	#1
   3252  1dcb		       85 e6		      STA	altSprite
   3253  1dcd				   .skip172then
   3254  1dcd				   .skipL0304
   3255  1dcd				   .
   3256  1dcd							; 
   3257  1dcd
   3258  1dcd				   .L0305		;  goto colorSetComplete
   3259  1dcd
   3260  1dcd		       4c fa d1 	      jmp	.colorSetComplete
   3261  1dd0
   3262  1dd0				   .
   3263  1dd0							; 
   3264  1dd0
   3265  1dd0				   .setPlayer3Color
   3266  1dd0							; setPlayer3Color
   3267  1dd0
   3268  1dd0				   .L0306		;  if ticker  =  0 then COLUP3  =  $22
   3269  1dd0
   3270  1dd0		       a5 e4		      LDA	ticker
   3271  1dd2		       c9 00		      CMP	#0
   3272  1dd4		       d0 04		      BNE	.skipL0306
   3273  1dd6				   .condpart174
   3274  1dd6		       a9 22		      LDA	#$22
   3275  1dd8		       85 9a		      STA	COLUP3
   3276  1dda				   .skipL0306
   3277  1dda				   .L0307		;  if ticker  =  1 then COLUP3  =  $38
   3278  1dda
   3279  1dda		       a5 e4		      LDA	ticker
   3280  1ddc		       c9 01		      CMP	#1
   3281  1dde		       d0 04		      BNE	.skipL0307
   3282  1de0				   .condpart175
   3283  1de0		       a9 38		      LDA	#$38
   3284  1de2		       85 9a		      STA	COLUP3
   3285  1de4				   .skipL0307
   3286  1de4				   .L0308		;  if ticker  =  2 then COLUP3  =  $66
   3287  1de4
   3288  1de4		       a5 e4		      LDA	ticker
   3289  1de6		       c9 02		      CMP	#2
   3290  1de8		       d0 04		      BNE	.skipL0308
   3291  1dea				   .condpart176
   3292  1dea		       a9 66		      LDA	#$66
   3293  1dec		       85 9a		      STA	COLUP3
   3294  1dee				   .skipL0308
   3295  1dee				   .L0309		;  if ticker  =  3 then COLUP3  =  $78
   3296  1dee
   3297  1dee		       a5 e4		      LDA	ticker
   3298  1df0		       c9 03		      CMP	#3
   3299  1df2		       d0 04		      BNE	.skipL0309
   3300  1df4				   .condpart177
   3301  1df4		       a9 78		      LDA	#$78
   3302  1df6		       85 9a		      STA	COLUP3
   3303  1df8				   .skipL0309
   3304  1df8				   .L0310		;  if ticker  =  4 then COLUP3  =  $CA
   3305  1df8
   3306  1df8		       a5 e4		      LDA	ticker
   3307  1dfa		       c9 04		      CMP	#4
   3308  1dfc		       d0 04		      BNE	.skipL0310
   3309  1dfe				   .condpart178
   3310  1dfe		       a9 ca		      LDA	#$CA
   3311  1e00		       85 9a		      STA	COLUP3
   3312  1e02				   .skipL0310
   3313  1e02				   .L0311		;  if ticker  =  5 then COLUP3  =  $D6
   3314  1e02
   3315  1e02		       a5 e4		      LDA	ticker
   3316  1e04		       c9 05		      CMP	#5
   3317  1e06		       d0 04		      BNE	.skipL0311
   3318  1e08				   .condpart179
   3319  1e08		       a9 d6		      LDA	#$D6
   3320  1e0a		       85 9a		      STA	COLUP3
   3321  1e0c				   .skipL0311
   3322  1e0c				   .L0312		;  if ticker  =  6 then COLUP3  =  $E8
   3323  1e0c
   3324  1e0c		       a5 e4		      LDA	ticker
   3325  1e0e		       c9 06		      CMP	#6
   3326  1e10		       d0 04		      BNE	.skipL0312
   3327  1e12				   .condpart180
   3328  1e12		       a9 e8		      LDA	#$E8
   3329  1e14		       85 9a		      STA	COLUP3
   3330  1e16				   .skipL0312
   3331  1e16				   .L0313		;  if ticker  =  7 then COLUP3  =  $3E
   3332  1e16
   3333  1e16		       a5 e4		      LDA	ticker
   3334  1e18		       c9 07		      CMP	#7
   3335  1e1a		       d0 04		      BNE	.skipL0313
   3336  1e1c				   .condpart181
   3337  1e1c		       a9 3e		      LDA	#$3E
   3338  1e1e		       85 9a		      STA	COLUP3
   3339  1e20				   .skipL0313
   3340  1e20				   .L0314		;  if ticker  =  8 then COLUP3  =  $DC
   3341  1e20
   3342  1e20		       a5 e4		      LDA	ticker
   3343  1e22		       c9 08		      CMP	#8
   3344  1e24		       d0 04		      BNE	.skipL0314
   3345  1e26				   .condpart182
   3346  1e26		       a9 dc		      LDA	#$DC
   3347  1e28		       85 9a		      STA	COLUP3
   3348  1e2a				   .skipL0314
   3349  1e2a				   .L0315		;  if ticker  =  9 then COLUP3  =  $48
   3350  1e2a
   3351  1e2a		       a5 e4		      LDA	ticker
   3352  1e2c		       c9 09		      CMP	#9
   3353  1e2e		       d0 04		      BNE	.skipL0315
   3354  1e30				   .condpart183
   3355  1e30		       a9 48		      LDA	#$48
   3356  1e32		       85 9a		      STA	COLUP3
   3357  1e34				   .skipL0315
   3358  1e34				   .L0316		;  if ticker  =  10 then COLUP3  =  $68
   3359  1e34
   3360  1e34		       a5 e4		      LDA	ticker
   3361  1e36		       c9 0a		      CMP	#10
   3362  1e38		       d0 04		      BNE	.skipL0316
   3363  1e3a				   .condpart184
   3364  1e3a		       a9 68		      LDA	#$68
   3365  1e3c		       85 9a		      STA	COLUP3
   3366  1e3e				   .skipL0316
   3367  1e3e				   .L0317		;  goto colorSetComplete
   3368  1e3e
   3369  1e3e		       4c fa d1 	      jmp	.colorSetComplete
   3370  1e41
   3371  1e41				   .
   3372  1e41							; 
   3373  1e41
   3374  1e41				   .setPlayer4Color
   3375  1e41							; setPlayer4Color
   3376  1e41
   3377  1e41				   .L0318		;  if ticker  =  0 then COLUP4  =  $22
   3378  1e41
   3379  1e41		       a5 e4		      LDA	ticker
   3380  1e43		       c9 00		      CMP	#0
   3381  1e45		       d0 04		      BNE	.skipL0318
   3382  1e47				   .condpart185
   3383  1e47		       a9 22		      LDA	#$22
   3384  1e49		       85 9b		      STA	COLUP4
   3385  1e4b				   .skipL0318
   3386  1e4b				   .L0319		;  if ticker  =  1 then COLUP4  =  $38
   3387  1e4b
   3388  1e4b		       a5 e4		      LDA	ticker
   3389  1e4d		       c9 01		      CMP	#1
   3390  1e4f		       d0 04		      BNE	.skipL0319
   3391  1e51				   .condpart186
   3392  1e51		       a9 38		      LDA	#$38
   3393  1e53		       85 9b		      STA	COLUP4
   3394  1e55				   .skipL0319
   3395  1e55				   .L0320		;  if ticker  =  2 then COLUP4  =  $66
   3396  1e55
   3397  1e55		       a5 e4		      LDA	ticker
   3398  1e57		       c9 02		      CMP	#2
   3399  1e59		       d0 04		      BNE	.skipL0320
   3400  1e5b				   .condpart187
   3401  1e5b		       a9 66		      LDA	#$66
   3402  1e5d		       85 9b		      STA	COLUP4
   3403  1e5f				   .skipL0320
   3404  1e5f				   .L0321		;  if ticker  =  3 then COLUP4  =  $78
   3405  1e5f
   3406  1e5f		       a5 e4		      LDA	ticker
   3407  1e61		       c9 03		      CMP	#3
   3408  1e63		       d0 04		      BNE	.skipL0321
   3409  1e65				   .condpart188
   3410  1e65		       a9 78		      LDA	#$78
   3411  1e67		       85 9b		      STA	COLUP4
   3412  1e69				   .skipL0321
   3413  1e69				   .L0322		;  if ticker  =  4 then COLUP4  =  $CA
   3414  1e69
   3415  1e69		       a5 e4		      LDA	ticker
   3416  1e6b		       c9 04		      CMP	#4
   3417  1e6d		       d0 04		      BNE	.skipL0322
   3418  1e6f				   .condpart189
   3419  1e6f		       a9 ca		      LDA	#$CA
   3420  1e71		       85 9b		      STA	COLUP4
   3421  1e73				   .skipL0322
   3422  1e73				   .L0323		;  if ticker  =  5 then COLUP4  =  $D6
   3423  1e73
   3424  1e73		       a5 e4		      LDA	ticker
   3425  1e75		       c9 05		      CMP	#5
   3426  1e77		       d0 04		      BNE	.skipL0323
   3427  1e79				   .condpart190
   3428  1e79		       a9 d6		      LDA	#$D6
   3429  1e7b		       85 9b		      STA	COLUP4
   3430  1e7d				   .skipL0323
   3431  1e7d				   .L0324		;  if ticker  =  6 then COLUP4  =  $E8
   3432  1e7d
   3433  1e7d		       a5 e4		      LDA	ticker
   3434  1e7f		       c9 06		      CMP	#6
   3435  1e81		       d0 04		      BNE	.skipL0324
   3436  1e83				   .condpart191
   3437  1e83		       a9 e8		      LDA	#$E8
   3438  1e85		       85 9b		      STA	COLUP4
   3439  1e87				   .skipL0324
   3440  1e87				   .L0325		;  if ticker  =  7 then COLUP4  =  $3E
   3441  1e87
   3442  1e87		       a5 e4		      LDA	ticker
   3443  1e89		       c9 07		      CMP	#7
   3444  1e8b		       d0 04		      BNE	.skipL0325
   3445  1e8d				   .condpart192
   3446  1e8d		       a9 3e		      LDA	#$3E
   3447  1e8f		       85 9b		      STA	COLUP4
   3448  1e91				   .skipL0325
   3449  1e91				   .L0326		;  if ticker  =  8 then COLUP4  =  $DC
   3450  1e91
   3451  1e91		       a5 e4		      LDA	ticker
   3452  1e93		       c9 08		      CMP	#8
   3453  1e95		       d0 04		      BNE	.skipL0326
   3454  1e97				   .condpart193
   3455  1e97		       a9 dc		      LDA	#$DC
   3456  1e99		       85 9b		      STA	COLUP4
   3457  1e9b				   .skipL0326
   3458  1e9b				   .L0327		;  if ticker  =  9 then COLUP4  =  $48
   3459  1e9b
   3460  1e9b		       a5 e4		      LDA	ticker
   3461  1e9d		       c9 09		      CMP	#9
   3462  1e9f		       d0 04		      BNE	.skipL0327
   3463  1ea1				   .condpart194
   3464  1ea1		       a9 48		      LDA	#$48
   3465  1ea3		       85 9b		      STA	COLUP4
   3466  1ea5				   .skipL0327
   3467  1ea5				   .L0328		;  if ticker  =  10 then COLUP4  =  $68
   3468  1ea5
   3469  1ea5		       a5 e4		      LDA	ticker
   3470  1ea7		       c9 0a		      CMP	#10
   3471  1ea9		       d0 04		      BNE	.skipL0328
   3472  1eab				   .condpart195
   3473  1eab		       a9 68		      LDA	#$68
   3474  1ead		       85 9b		      STA	COLUP4
   3475  1eaf				   .skipL0328
   3476  1eaf				   .
   3477  1eaf							; 
   3478  1eaf
   3479  1eaf				   .L0329		;  goto colorSetComplete
   3480  1eaf
   3481  1eaf		       4c fa d1 	      jmp	.colorSetComplete
   3482  1eb2
   3483  1eb2				   .
   3484  1eb2							; 
   3485  1eb2
   3486  1eb2				   .
   3487  1eb2							; 
   3488  1eb2
   3489  1eb2				   .
   3490  1eb2							; 
   3491  1eb2
   3492  1eb2				   .
   3493  1eb2							; 
   3494  1eb2
   3495  1eb2				   .
   3496  1eb2							; 
   3497  1eb2
   3498  1eb2				   .collisions
   3499  1eb2							; collisions
   3500  1eb2
   3501  1eb2				   .L0330		;  player5x  =  missile0x  +  4
   3502  1eb2
   3503  1eb2		       a5 80		      LDA	missile0x
   3504  1eb4		       18		      CLC
   3505  1eb5		       69 04		      ADC	#4
   3506  1eb7		       85 89		      STA	player5x
   3507  1eb9				   .L0331		;  player5y  =  missile0y  +  9
   3508  1eb9
   3509  1eb9		       a5 8a		      LDA	missile0y
   3510  1ebb		       18		      CLC
   3511  1ebc		       69 09		      ADC	#9
   3512  1ebe		       85 92		      STA	player5y
   3513  1ec0				   .L0332		;  missile0y  =  200
   3514  1ec0
   3515  1ec0		       a9 c8		      LDA	#200
   3516  1ec2		       85 8a		      STA	missile0y
   3517  1ec4				   .L0333		;  missile0x  =  200
   3518  1ec4
   3519  1ec4		       a9 c8		      LDA	#200
   3520  1ec6		       85 80		      STA	missile0x
   3521  1ec8				   .L0334		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   3522  1ec8
   3523  1ec8		       a9 0c		      LDA	#12
   3524  1eca		       85 19		      STA	AUDV0
   3525  1ecc		       a9 08		      LDA	#8
   3526  1ece		       85 15		      STA	AUDC0
   3527  1ed0		       a9 1c		      LDA	#28
   3528  1ed2		       85 17		      STA	AUDF0
   3529  1ed4				   .L0335		;  score  =  score  +	bulletMultiplier
   3530  1ed4
   3531  1ed4		       f8		      SED
   3532  1ed5		       18		      CLC
   3533  1ed6		       a5 d4		      LDA	score+2
   3534  1ed8		       65 e2		      ADC	bulletMultiplier
   3535  1eda
   3536  1eda		       85 d4		      STA	score+2
   3537  1edc		       a5 d3		      LDA	score+1
   3538  1ede		       69 00		      ADC	#0
   3539  1ee0		       85 d3		      STA	score+1
   3540  1ee2		       a5 d2		      LDA	score
   3541  1ee4		       69 00		      ADC	#0
   3542  1ee6		       85 d2		      STA	score
   3543  1ee8		       d8		      CLD
   3544  1ee9				   .L0336		;  killCount  =  killCount  +	1
   3545  1ee9
   3546  1ee9		       e6 e3		      INC	killCount
   3547  1eeb				   .L0337		;  goto frameReset
   3548  1eeb
   3549  1eeb		       4c 52 d7 	      jmp	.frameReset
   3550  1eee
   3551  1eee				   .
   3552  1eee							; 
   3553  1eee
   3554  1eee				   .killPlayer
   3555  1eee							; killPlayer
   3556  1eee
   3557  1eee				   .L0338		;  if _resetTicker  <	1 then _resetTicker  =	1
   3558  1eee
   3559  1eee		       a5 ee		      LDA	_resetTicker
   3560  1ef0		       c9 01		      CMP	#1
   3561  1ef2		       b0 04		      BCS	.skipL0338
   3562  1ef4				   .condpart196
   3563  1ef4		       a9 01		      LDA	#1
   3564  1ef6		       85 ee		      STA	_resetTicker
   3565  1ef8				   .skipL0338
   3566  1ef8				   .L0339		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   3567  1ef8
   3568  1ef8		       24 ef		      BIT	_Bit6_Sequence_Switch
   3569  1efa		       70 10		      BVS	.skipL0339
   3570  1efc				   .condpart197
   3571  1efc		       e6 d7		      INC	_P0_Luminosity
   3572  1efe		       a5 d7		      LDA	_P0_Luminosity
   3573  1f00		       c9 20		      CMP	#$20
   3574  1f02		       90 08		      BCC	.skip197then
   3575  1f04				   .condpart198
   3576  1f04		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3577  1f06		       09 40		      ORA	#64
   3578  1f08		       85 ef		      STA	_Bit6_Sequence_Switch
   3579  1f0a		       e6 ee		      INC	_resetTicker
   3580  1f0c				   .skip197then
   3581  1f0c				   .skipL0339
   3582  1f0c				   .L0340		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   3583  1f0c
   3584  1f0c		       24 ef		      BIT	_Bit6_Sequence_Switch
   3585  1f0e		       50 16		      BVC	.skipL0340
   3586  1f10				   .condpart199
   3587  1f10		       c6 d7		      DEC	_P0_Luminosity
   3588  1f12		       a9 12		      LDA	#$12
   3589  1f14		       c5 d7		      CMP	_P0_Luminosity
   3590  1f16		       90 0e		      BCC	.skip199then
   3591  1f18				   .condpart200
   3592  1f18		       a9 00		      LDA	#0
   3593  1f1a		       85 d8		      STA	b
   3594  1f1c		       a9 10		      LDA	#$10
   3595  1f1e		       85 d7		      STA	_P0_Luminosity
   3596  1f20		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3597  1f22		       29 bf		      AND	#191
   3598  1f24		       85 ef		      STA	_Bit6_Sequence_Switch
   3599  1f26				   .skip199then
   3600  1f26				   .skipL0340
   3601  1f26				   .L0341		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   3602  1f26
   3603  1f26		       a9 0a		      LDA	#10
   3604  1f28		       85 1a		      STA	AUDV1
   3605  1f2a		       a9 08		      LDA	#8
   3606  1f2c		       85 16		      STA	AUDC1
   3607  1f2e		       a9 19		      LDA	#25
   3608  1f30		       85 18		      STA	AUDF1
   3609  1f32				   .L0342		;  COLUBK  =  _P0_Luminosity
   3610  1f32
   3611  1f32		       a5 d7		      LDA	_P0_Luminosity
   3612  1f34		       85 09		      STA	COLUBK
   3613  1f36				   .
   3614  1f36							; 
   3615  1f36
   3616  1f36				   .L0343		;  if _resetTicker  >	3 then goto resetGame
   3617  1f36
   3618  1f36		       a9 03		      LDA	#3
   3619  1f38		       c5 ee		      CMP	_resetTicker
   3620  1f3a		       b0 03		      BCS	.skipL0343
   3621  1f3c				   .condpart201
   3622  1f3c		       4c 42 df 	      jmp	.resetGame
   3623  1f3f
   3624  1f3f				   .skipL0343
   3625  1f3f				   .
   3626  1f3f							; 
   3627  1f3f
   3628  1f3f				   .L0344		;  goto resetScreen
   3629  1f3f
   3630  1f3f		       4c b0 db 	      jmp	.resetScreen
   3631  1f42
   3632  1f42				   .
   3633  1f42							; 
   3634  1f42
   3635  1f42				   .resetGame
   3636  1f42							; resetGame
   3637  1f42
   3638  1f42				   .
   3639  1f42							; 
   3640  1f42
   3641  1f42				   .L0345		;  player0x = 75
   3642  1f42
   3643  1f42		       a9 4b		      LDA	#75
   3644  1f44		       85 84		      STA	player0x
   3645  1f46				   .L0346		;  player0y = 30
   3646  1f46
   3647  1f46		       a9 1e		      LDA	#30
   3648  1f48		       85 8d		      STA	player0y
   3649  1f4a				   .
   3650  1f4a							; 
   3651  1f4a
   3652  1f4a				   .L0347		;  player1x = 76
   3653  1f4a
   3654  1f4a		       a9 4c		      LDA	#76
   3655  1f4c		       85 85		      STA	player1x
   3656  1f4e				   .L0348		;  player1y = 100
   3657  1f4e
   3658  1f4e		       a9 64		      LDA	#100
   3659  1f50		       85 8e		      STA	player1y
   3660  1f52				   .
   3661  1f52							; 
   3662  1f52
   3663  1f52				   .L0349		;  player2x = 86
   3664  1f52
   3665  1f52		       a9 56		      LDA	#86
   3666  1f54		       85 86		      STA	player2x
   3667  1f56				   .L0350		;  player2y = 110
   3668  1f56
   3669  1f56		       a9 6e		      LDA	#110
   3670  1f58		       85 8f		      STA	player2y
   3671  1f5a				   .
   3672  1f5a							; 
   3673  1f5a
   3674  1f5a				   .L0351		;  player3x = 96
   3675  1f5a
   3676  1f5a		       a9 60		      LDA	#96
   3677  1f5c		       85 87		      STA	player3x
   3678  1f5e				   .L0352		;  player3y = 120
   3679  1f5e
   3680  1f5e		       a9 78		      LDA	#120
   3681  1f60		       85 90		      STA	player3y
   3682  1f62				   .
   3683  1f62							; 
   3684  1f62
   3685  1f62				   .L0353		;  player4x  =  116
   3686  1f62
   3687  1f62		       a9 74		      LDA	#116
   3688  1f64		       85 88		      STA	player4x
   3689  1f66				   .L0354		;  player4y  =  100
   3690  1f66
   3691  1f66		       a9 64		      LDA	#100
   3692  1f68		       85 91		      STA	player4y
   3693  1f6a				   .
   3694  1f6a							; 
   3695  1f6a
   3696  1f6a				   .L0355		;  missile0y = 100
   3697  1f6a
   3698  1f6a		       a9 64		      LDA	#100
   3699  1f6c		       85 8a		      STA	missile0y
   3700  1f6e				   .
   3701  1f6e							; 
   3702  1f6e
   3703  1f6e				   .L0356		;  _resetTicker  =  0
   3704  1f6e
   3705  1f6e		       a9 00		      LDA	#0
   3706  1f70		       85 ee		      STA	_resetTicker
   3707  1f72				   .L0357		;  missile1y =  200
   3708  1f72
   3709  1f72		       a9 c8		      LDA	#200
   3710  1f74		       85 8b		      STA	missile1y
   3711  1f76				   .L0358		;  COLUBK  =  $0
   3712  1f76
   3713  1f76		       a9 00		      LDA	#$0
   3714  1f78		       85 09		      STA	COLUBK
   3715  1f7a				   .L0359		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   3716  1f7a
   3717  1f7a		       a9 00		      LDA	#0
   3718  1f7c		       85 1a		      STA	AUDV1
   3719  1f7e		       85 16		      STA	AUDC1
   3720  1f80		       85 18		      STA	AUDF1
   3721  1f82				   .
   3722  1f82							; 
   3723  1f82
   3724  1f82				   .
   3725  1f82							; 
   3726  1f82
   3727  1f82				   .L0360		;  gameReady  =  0
   3728  1f82
   3729  1f82		       a9 00		      LDA	#0
   3730  1f84		       85 f0		      STA	gameReady
   3731  1f86				   .L0361		;  firstFrame	=  0
   3732  1f86
   3733  1f86		       a9 00		      LDA	#0
   3734  1f88		       85 e8		      STA	firstFrame
   3735  1f8a				   .L0362		;  goto resetScreen
   3736  1f8a
   3737  1f8a		       4c b0 db 	      jmp	.resetScreen
   3738  1f8d
   3739  1f8d				   .
   3740  1f8d							; 
   3741  1f8d
   3742  1f8d				   .
   3743  1f8d							; 
   3744  1f8d
   3745  1f8d				   .L0363		;  bank 2
   3746  1f8d
   3747  1f8d					      if	ECHO1
      71 bytes of ROM space left in bank 1
   3748  1f8d					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3749  1f8d					      endif
   3750  1f8d		       00 01	   ECHO1      =	1
   3751  1fd4					      ORG	$1FF4-bscode_length
   3752  1fd4					      RORG	$DFF4-bscode_length
   3753  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3754  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3755  1fd6				  -	      stx	FASTFETCH
   3756  1fd6					      endif
   3757  1fd6		       9a		      txs
   3758  1fd7				  -	      if	bankswitch == 64
   3759  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3760  1fd7					      else
   3761  1fd7		       a9 f3		      lda	#>(start-1)
   3762  1fd9					      endif
   3763  1fd9		       48		      pha
   3764  1fda		       a9 f7		      lda	#<(start-1)
   3765  1fdc		       48		      pha
   3766  1fdd		       48		      pha
   3767  1fde		       8a		      txa
   3768  1fdf		       48		      pha
   3769  1fe0		       ba		      tsx
   3770  1fe1					      if	bankswitch != 64
   3771  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3772  1fe3		       2a		      rol
   3773  1fe4		       2a		      rol
   3774  1fe5		       2a		      rol
   3775  1fe6		       2a		      rol
   3776  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3777  1fe9		       aa		      tax
   3778  1fea		       e8		      inx
   3779  1feb				  -	      else
   3780  1feb				  -	      lda	4,x	; get high byte of return address
   3781  1feb				  -	      tay
   3782  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3783  1feb				  -	      sta	4,x
   3784  1feb				  -	      tya
   3785  1feb				  -	      lsr
   3786  1feb				  -	      lsr
   3787  1feb				  -	      lsr
   3788  1feb				  -	      lsr
   3789  1feb				  -	      tax
   3790  1feb				  -	      inx
   3791  1feb					      endif
   3792  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3793  1fee		       68		      pla
   3794  1fef		       aa		      tax
   3795  1ff0		       68		      pla
   3796  1ff1		       60		      rts
   3797  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3798  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3799  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3800  1ff2					      endif
   3801  1ffc					      ORG	$1FFC
   3802  1ffc					      RORG	$DFFC
   3803  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   3804  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   3805  2000					      ORG	$2000
   3806  2000					      RORG	$F000
   3807  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3808  2000
   3809  2000				   FineAdjustTableBegin
   3810  2000		       60		      .byte.b	%01100000	;left 6
   3811  2001		       50		      .byte.b	%01010000
   3812  2002		       40		      .byte.b	%01000000
   3813  2003		       30		      .byte.b	%00110000
   3814  2004		       20		      .byte.b	%00100000
   3815  2005		       10		      .byte.b	%00010000
   3816  2006		       00		      .byte.b	%00000000	;left 0
   3817  2007		       f0		      .byte.b	%11110000
   3818  2008		       e0		      .byte.b	%11100000
   3819  2009		       d0		      .byte.b	%11010000
   3820  200a		       c0		      .byte.b	%11000000
   3821  200b		       b0		      .byte.b	%10110000
   3822  200c		       a0		      .byte.b	%10100000
   3823  200d		       90		      .byte.b	%10010000
   3824  200e		       80		      .byte.b	%10000000	;right 8
   3825  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   3826  200f
   3827  200f				   PFStart
   3828  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   3829  2017				   blank_pf
   3830  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   3831  201f							; .byte 43,21,0,10,0,0,0,5
   3832  201f				  -	      ifconst	screenheight
   3833  201f				  -pfsub
   3834  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   3835  201f					      endif
   3836  201f							;--set initial P1 positions
   3837  201f				   multisprite_setup
   3838  201f		       a9 0f		      lda	#15
   3839  2021		       85 c4		      sta	pfheight
   3840  2023
   3841  2023		       a2 04		      ldx	#4
   3842  2025							; stx temp3
   3843  2025				   SetCopyHeight
   3844  2025							;	lda #76
   3845  2025							;	sta NewSpriteX,X
   3846  2025							;	lda CopyColorData,X
   3847  2025							;	sta NewCOLUP1,X
   3848  2025							;lda SpriteHeightTable,X
   3849  2025							; sta spriteheight,x
   3850  2025		       8a		      txa
   3851  2026		       95 9d		      sta	SpriteGfxIndex,X
   3852  2028		       95 f1		      sta	spritesort,X
   3853  202a		       ca		      dex
   3854  202b		       10 f8		      bpl	SetCopyHeight
   3855  202d
   3856  202d
   3857  202d
   3858  202d							; since we can't turn off pf, point PF to zeros here
   3859  202d		       a9 f0		      lda	#>blank_pf
   3860  202f		       85 be		      sta	PF2pointer+1
   3861  2031		       85 bc		      sta	PF1pointer+1
   3862  2033		       a9 17		      lda	#<blank_pf
   3863  2035		       85 bd		      sta	PF2pointer
   3864  2037		       85 bb		      sta	PF1pointer
   3865  2039		       60		      rts
   3866  203a
   3867  203a				   drawscreen
   3868  203a				  -	      ifconst	debugscore
   3869  203a				  -	      jsr	debugcycles
   3870  203a					      endif
   3871  203a
   3872  203a				   WaitForOverscanEnd
   3873  203a		       ad 84 02 	      lda	INTIM
   3874  203d		       30 fb		      bmi	WaitForOverscanEnd
   3875  203f
   3876  203f		       a9 02		      lda	#2
   3877  2041		       85 02		      sta	WSYNC
   3878  2043		       85 00		      sta	VSYNC
   3879  2045		       85 02		      sta	WSYNC
   3880  2047		       85 02		      sta	WSYNC
   3881  2049		       4a		      lsr
   3882  204a		       85 27		      sta	VDELBL
   3883  204c		       85 25		      sta	VDELP0
   3884  204e		       85 02		      sta	WSYNC
   3885  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   3886  2052				  -	      ifconst	overscan_time
   3887  2052				  -	      lda	#overscan_time+5+128
   3888  2052					      else
   3889  2052		       a9 aa		      lda	#42+128
   3890  2054					      endif
   3891  2054		       8d 96 02 	      sta	TIM64T
   3892  2057
   3893  2057							; run possible vblank bB code
   3894  2057				  -	      ifconst	vblank_bB_code
   3895  2057				  -	      jsr	vblank_bB_code
   3896  2057					      endif
   3897  2057
   3898  2057		       20 df f1 	      jsr	setscorepointers
   3899  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   3900  205d
   3901  205d							;-------------
   3902  205d
   3903  205d
   3904  205d
   3905  205d
   3906  205d
   3907  205d							;--position P0, M0, M1, BL
   3908  205d
   3909  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   3910  2060
   3911  2060							;--set up player 0 pointer
   3912  2060
   3913  2060		       c6 8d		      dec	player0y
   3914  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   3915  2064		       38		      sec
   3916  2065		       e5 8d		      sbc	player0y
   3917  2067		       18		      clc
   3918  2068		       65 b0		      adc	player0height
   3919  206a		       85 a2		      sta	player0pointer
   3920  206c
   3921  206c		       a5 8d		      lda	player0y
   3922  206e		       85 cf		      sta	P0Top
   3923  2070		       38		      sec
   3924  2071		       e5 b0		      sbc	player0height
   3925  2073		       18		      clc
   3926  2074		       69 80		      adc	#$80
   3927  2076		       85 a4		      sta	P0Bottom
   3928  2078
   3929  2078
   3930  2078							;--some final setup
   3931  2078
   3932  2078		       a2 04		      ldx	#4
   3933  207a		       a9 80		      lda	#$80
   3934  207c				   cycle74_HMCLR
   3935  207c		       95 20		      sta	HMP0,X
   3936  207e		       ca		      dex
   3937  207f		       10 fb		      bpl	cycle74_HMCLR
   3938  2081							;	sta HMCLR
   3939  2081
   3940  2081
   3941  2081		       a9 00		      lda	#0
   3942  2083		       85 0e		      sta	PF1
   3943  2085		       85 0f		      sta	PF2
   3944  2087		       85 1b		      sta	GRP0
   3945  2089		       85 1c		      sta	GRP1
   3946  208b
   3947  208b
   3948  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   3949  208e
   3950  208e				   WaitForVblankEnd
   3951  208e		       ad 84 02 	      lda	INTIM
   3952  2091		       30 fb		      bmi	WaitForVblankEnd
   3953  2093		       a9 00		      lda	#0
   3954  2095		       85 02		      sta	WSYNC
   3955  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   3956  2099		       85 2c		      sta	CXCLR
   3957  209b
   3958  209b
   3959  209b		       4c 60 f1 	      jmp	KernelRoutine
   3960  209e
   3961  209e
   3962  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   3963  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   3964  209e							;if you do not wish to write to P1 during this function, make
   3965  209e							;sure Y==0 before you call it.  This function will change Y, and A
   3966  209e							;will be the value put into HMxx when returned.
   3967  209e							;Call this function with at least 11 cycles left in the scanline 
   3968  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   3969  209e							;into the second scanline
   3970  209e		       38		      sec
   3971  209f		       85 02		      sta	WSYNC	;begin line 1
   3972  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   3973  20a4				   DivideBy15Loop
   3974  20a4		       e9 0f		      sbc	#15
   3975  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   3976  20a8
   3977  20a8		       a8		      tay		;+2	10/15/...60
   3978  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   3979  20ac
   3980  20ac							;	15
   3981  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   3982  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   3983  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3984  20b2		       85 2a		      sta	HMOVE	;+3
   3985  20b4		       60		      rts		;+6	 9
   3986  20b5
   3987  20b5							;-------------------------------------------------------------------------
   3988  20b5
   3989  20b5				   PrePositionAllObjects
   3990  20b5
   3991  20b5		       a2 04		      ldx	#4
   3992  20b7		       a5 82		      lda	ballx
   3993  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3994  20bc
   3995  20bc		       ca		      dex
   3996  20bd		       a5 81		      lda	missile1x
   3997  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3998  20c2
   3999  20c2		       ca		      dex
   4000  20c3		       a5 80		      lda	missile0x
   4001  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   4002  20c8
   4003  20c8		       ca		      dex
   4004  20c9		       ca		      dex
   4005  20ca		       a5 84		      lda	player0x
   4006  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   4007  20cf
   4008  20cf		       60		      rts
   4009  20d0
   4010  20d0
   4011  20d0							;-------------------------------------------------------------------------
   4012  20d0
   4013  20d0
   4014  20d0
   4015  20d0
   4016  20d0
   4017  20d0
   4018  20d0
   4019  20d0
   4020  20d0							;-------------------------------------------------------------------------
   4021  20d0
   4022  20d0
   4023  20d0				   KernelSetupSubroutine
   4024  20d0
   4025  20d0		       a2 04		      ldx	#4
   4026  20d2				   AdjustYValuesUpLoop
   4027  20d2		       b5 8e		      lda	NewSpriteY,X
   4028  20d4		       18		      clc
   4029  20d5		       69 02		      adc	#2
   4030  20d7		       95 8e		      sta	NewSpriteY,X
   4031  20d9		       ca		      dex
   4032  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   4033  20dc
   4034  20dc
   4035  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   4036  20de
   4037  20de		       b5 9d		      lda	SpriteGfxIndex,x
   4038  20e0		       a8		      tay
   4039  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   4040  20e4		       85 ce		      sta	RepoLine
   4041  20e6
   4042  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   4043  20e8		       a8		      tay
   4044  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   4045  20ec		       85 d0		      sta	temp6
   4046  20ee
   4047  20ee		       86 83		      stx	SpriteIndex
   4048  20f0
   4049  20f0
   4050  20f0
   4051  20f0		       a9 ff		      lda	#255
   4052  20f2		       85 a5		      sta	P1Bottom
   4053  20f4
   4054  20f4		       a5 8d		      lda	player0y
   4055  20f6				  -	      ifconst	screenheight
   4056  20f6				  -	      cmp	#screenheight+1
   4057  20f6					      else
   4058  20f6		       c9 59		      cmp	#$59
   4059  20f8					      endif
   4060  20f8		       90 04		      bcc	nottoohigh
   4061  20fa		       a5 a4		      lda	P0Bottom
   4062  20fc		       85 cf		      sta	P0Top
   4063  20fe
   4064  20fe
   4065  20fe
   4066  20fe				   nottoohigh
   4067  20fe		       60		      rts
   4068  20ff
   4069  20ff							;-------------------------------------------------------------------------
   4070  20ff
   4071  20ff
   4072  20ff
   4073  20ff
   4074  20ff
   4075  20ff							;*************************************************************************
   4076  20ff
   4077  20ff							;-------------------------------------------------------------------------
   4078  20ff							;-------------------------Data Below--------------------------------------
   4079  20ff							;-------------------------------------------------------------------------
   4080  20ff
   4081  20ff				   MaskTable
   4082  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   4083  2104
   4084  2104							; shove 6-digit score routine here
   4085  2104
   4086  2104				   sixdigscore
   4087  2104		       a9 00		      lda	#0
   4088  2106							;	sta COLUBK
   4089  2106		       85 0d		      sta	PF0
   4090  2108		       85 0e		      sta	PF1
   4091  210a		       85 0f		      sta	PF2
   4092  210c		       85 1f		      sta	ENABL
   4093  210e		       85 1d		      sta	ENAM0
   4094  2110		       85 1e		      sta	ENAM1
   4095  2112							;end of kernel here
   4096  2112
   4097  2112
   4098  2112							; 6 digit score routine
   4099  2112							; lda #0
   4100  2112							; sta PF1
   4101  2112							; sta PF2
   4102  2112							; tax
   4103  2112
   4104  2112		       85 02		      sta	WSYNC	;,x
   4105  2114
   4106  2114							;		  STA WSYNC ;first one, need one more
   4107  2114		       85 0b		      sta	REFP0
   4108  2116		       85 0c		      sta	REFP1
   4109  2118		       85 1b		      STA	GRP0
   4110  211a		       85 1c		      STA	GRP1
   4111  211c		       85 2b		      sta	HMCLR
   4112  211e
   4113  211e							; restore P0pointer
   4114  211e
   4115  211e		       a5 a2		      lda	player0pointer
   4116  2120		       18		      clc
   4117  2121		       65 8d		      adc	player0y
   4118  2123		       38		      sec
   4119  2124		       e5 b0		      sbc	player0height
   4120  2126		       85 a2		      sta	player0pointer
   4121  2128		       e6 8d		      inc	player0y
   4122  212a
   4123  212a				  -	      ifconst	vblank_time
   4124  212a				  -	      ifconst	screenheight
   4125  212a				  -	      if	screenheight == 84
   4126  212a				  -	      lda	#vblank_time+9+128+10
   4127  212a				  -	      else
   4128  212a				  -	      lda	#vblank_time+9+128+19
   4129  212a				  -	      endif
   4130  212a				  -	      else
   4131  212a				  -	      lda	#vblank_time+9+128
   4132  212a				  -	      endif
   4133  212a					      else
   4134  212a				  -	      ifconst	screenheight
   4135  212a				  -	      if	screenheight == 84
   4136  212a				  -	      lda	#52+128+10
   4137  212a				  -	      else
   4138  212a				  -	      lda	#52+128+19
   4139  212a				  -	      endif
   4140  212a					      else
   4141  212a		       a9 b4		      lda	#52+128
   4142  212c					      endif
   4143  212c					      endif
   4144  212c
   4145  212c		       8d 96 02 	      sta	TIM64T
   4146  212f					      ifconst	minikernel
   4147  212f		       20 b0 f9 	      jsr	minikernel
   4148  2132					      endif
   4149  2132				  -	      ifconst	noscore
   4150  2132				  -	      pla
   4151  2132				  -	      pla
   4152  2132				  -	      jmp	skipscore
   4153  2132					      endif
   4154  2132
   4155  2132							; score pointers contain:
   4156  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4157  2132							; swap lo2->temp1
   4158  2132							; swap lo4->temp3
   4159  2132							; swap lo6->temp5
   4160  2132
   4161  2132		       a5 ca		      lda	scorepointers+5
   4162  2134		       85 cf		      sta	temp5
   4163  2136		       a5 c6		      lda	scorepointers+1
   4164  2138		       85 cb		      sta	temp1
   4165  213a		       a5 c8		      lda	scorepointers+3
   4166  213c		       85 cd		      sta	temp3
   4167  213e
   4168  213e		       a9 ff		      lda	#>scoretable
   4169  2140		       85 c6		      sta	scorepointers+1
   4170  2142		       85 c8		      sta	scorepointers+3
   4171  2144		       85 ca		      sta	scorepointers+5
   4172  2146		       85 cc		      sta	temp2
   4173  2148		       85 ce		      sta	temp4
   4174  214a		       85 d0		      sta	temp6
   4175  214c
   4176  214c		       60		      rts
   4177  214d
   4178  214d
   4179  214d
   4180  214d							;-------------------------------------------------------------------------
   4181  214d							;----------------------Kernel Routine-------------------------------------
   4182  214d							;-------------------------------------------------------------------------
   4183  214d
   4184  214d
   4185  214d							;-------------------------------------------------------------------------
   4186  214d							; repeat $f147-*
   4187  214d							; brk
   4188  214d							; repend
   4189  214d							;	org $F240
   4190  214d
   4191  214d				   SwitchDrawP0K1		;	72
   4192  214d		       a5 a4		      lda	P0Bottom
   4193  214f		       85 cf		      sta	P0Top	;+6	 2
   4194  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4195  2154
   4196  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   4198  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4199  2159
   4200  2159				   SkipDrawP1K1 		;	11
   4201  2159		       a9 00		      lda	#0
   4202  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   4203  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   4204  2160
   4205  2160							;-------------------------------------------------------------------------
   4206  2160
   4207  2160				   KernelRoutine
   4208  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   4210  2166							; jsr wastetime ; waste 12 cycles
   4211  2166				  -	      else
   4212  2166				  -	      sleep	6
   4213  2166					      endif
   4214  2166		       ba		      tsx
   4215  2167		       86 f6		      stx	stack1
   4216  2169		       a2 1f		      ldx	#ENABL
   4217  216b		       9a		      txs		;+9	 9
   4218  216c
   4219  216c		       a2 00		      ldx	#0
   4220  216e		       a5 c4		      lda	pfheight
   4221  2170		       10 01		      bpl	asdhj
   4222  2172		       24		      .byte.b	$24
   4223  2173				   asdhj
   4224  2173		       aa		      tax
   4225  2174
   4226  2174							; ldx pfheight
   4227  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   4228  2177
   4229  2177				  -	      ifconst	screenheight
   4230  2177				  -	      sec
   4231  2177				  -	      if	screenheight == 84
   4232  2177				  -	      sbc	pfsub+1,x
   4233  2177				  -	      else
   4234  2177				  -	      sbc	pfsub,x
   4235  2177				  -	      endif
   4236  2177					      endif
   4237  2177
   4238  2177		       85 ba		      sta	pfpixelheight
   4239  2179
   4240  2179				  -	      ifconst	screenheight
   4241  2179				  -	      ldy	#screenheight
   4242  2179					      else
   4243  2179		       a0 58		      ldy	#88
   4244  217b					      endif
   4245  217b
   4246  217b							;	lda #$02
   4247  217b							;	sta COLUBK		;+5	18
   4248  217b
   4249  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   4251  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   4253  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   4255  2181		       c4 cf		      cpy	P0Top	;+3	69
   4256  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   4257  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   4258  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   4259  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   4260  218b				   BackFromSwitchDrawP0K1
   4261  218b
   4262  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   4263  218d							;		to a value greater than maximum Y value initially
   4264  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   4265  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   4266  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   4267  2194				   BackFromSkipDrawP1
   4268  2194
   4269  2194							;fuck	
   4270  2194		       84 cb		      sty	temp1
   4271  2196		       a4 ba		      ldy	pfpixelheight
   4272  2198		       b3 bb		      lax	(PF1pointer),y
   4273  219a		       86 0e		      stx	PF1	;+7	26
   4274  219c		       b1 bd		      lda	(PF2pointer),y
   4275  219e		       85 0f		      sta	PF2	;+7	33
   4276  21a0							;sleep 6
   4277  21a0		       86 b7		      stx	PF1temp2
   4278  21a2		       85 b9		      sta	PF2temp2
   4279  21a4		       88		      dey
   4280  21a5		       30 35		      bmi	pagewraphandler
   4281  21a7		       b1 bb		      lda	(PF1pointer),y
   4282  21a9				   cyclebalance
   4283  21a9		       85 b6		      sta	PF1temp1
   4284  21ab		       b1 bd		      lda	(PF2pointer),y
   4285  21ad		       85 b8		      sta	PF2temp1
   4286  21af		       a4 cb		      ldy	temp1
   4287  21b1
   4288  21b1		       a2 1f		      ldx	#ENABL
   4289  21b3		       9a		      txs
   4290  21b4		       c4 8c		      cpy	bally
   4291  21b6		       08		      php		;+6	39	VDEL ball
   4292  21b7
   4293  21b7
   4294  21b7		       c4 8b		      cpy	missile1y
   4295  21b9		       08		      php		;+6	71
   4296  21ba
   4297  21ba		       c4 8a		      cpy	missile0y
   4298  21bc		       08		      php		;+6	 1
   4299  21bd
   4300  21bd
   4301  21bd		       88		      dey		;+2	15
   4302  21be
   4303  21be		       c4 ce		      cpy	RepoLine	;+3	18
   4304  21c0		       f0 62		      beq	RepoKernel	;+2	20
   4305  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   4307  21c5
   4308  21c5				   newrepo		; since we have time here, store next repoline
   4309  21c5		       a6 83		      ldx	SpriteIndex
   4310  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   4311  21c9		       aa		      tax
   4312  21ca		       b5 8e		      lda	NewSpriteY,x
   4313  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   4315  21d0
   4316  21d0				   BackFromRepoKernel
   4317  21d0		       98		      tya		;+2	45
   4318  21d1		       25 c4		      and	pfheight	;+2	47
   4319  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   4320  21d5		       c6 ba		      dec	pfpixelheight
   4321  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   4322  21d9							;	bmi donewkernel		;+3	54
   4323  21d9							;	bne KernelLoopb+1		;+3	54
   4324  21d9
   4325  21d9				   donewkernel
   4326  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   4327  21dc
   4328  21dc				   pagewraphandler
   4329  21dc		       4c a9 f1 	      jmp	cyclebalance
   4330  21df
   4331  21df							;-------------------------------------------------------------------------
   4332  21df
   4333  21df							; room here for score?
   4334  21df
   4335  21df				   setscorepointers
   4336  21df		       a7 d4		      lax	score+2
   4337  21e1		       20 fb f1 	      jsr	scorepointerset
   4338  21e4		       84 ca		      sty	scorepointers+5
   4339  21e6		       86 c7		      stx	scorepointers+2
   4340  21e8		       a7 d3		      lax	score+1
   4341  21ea		       20 fb f1 	      jsr	scorepointerset
   4342  21ed		       84 c9		      sty	scorepointers+4
   4343  21ef		       86 c6		      stx	scorepointers+1
   4344  21f1		       a7 d2		      lax	score
   4345  21f3		       20 fb f1 	      jsr	scorepointerset
   4346  21f6		       84 c8		      sty	scorepointers+3
   4347  21f8		       86 c5		      stx	scorepointers
   4348  21fa				   wastetime
   4349  21fa		       60		      rts
   4350  21fb
   4351  21fb				   scorepointerset
   4352  21fb		       29 0f		      and	#$0F
   4353  21fd		       0a		      asl
   4354  21fe		       0a		      asl
   4355  21ff		       0a		      asl
   4356  2200		       69 74		      adc	#<scoretable
   4357  2202		       a8		      tay
   4358  2203		       8a		      txa
   4359  2204		       29 f0		      and	#$F0
   4360  2206		       4a		      lsr
   4361  2207		       69 74		      adc	#<scoretable
   4362  2209		       aa		      tax
   4363  220a		       60		      rts
   4364  220b							;	align 256
   4365  220b
   4366  220b				   SwitchDrawP0KR		;	45
   4367  220b		       a5 a4		      lda	P0Bottom
   4368  220d		       85 cf		      sta	P0Top	;+6	51
   4369  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4370  2212
   4371  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   4373  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4374  2217
   4375  2217							;-----------------------------------------------------------
   4376  2217
   4377  2217				   noUpdateXKR
   4378  2217		       a2 01		      ldx	#1
   4379  2219		       cc cf 00 	      cpy.w	P0Top
   4380  221c		       4c 2e f2 	      JMP	retXKR
   4381  221f
   4382  221f				   skipthis
   4383  221f		       a2 01		      ldx	#1
   4384  2221		       4c 70 f2 	      jmp	goback
   4385  2224
   4386  2224				   RepoKernel		;	22	crosses page boundary
   4387  2224		       98		      tya
   4388  2225		       25 c4		      and	pfheight	;+2	26
   4389  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   4390  2229		       aa		      tax
   4391  222a							;	dex			;+2	30
   4392  222a		       c6 ba		      dec	pfpixelheight
   4393  222c							;	stx Temp		;+3	35
   4394  222c							;	SLEEP 3
   4395  222c
   4396  222c		       c4 cf		      cpy	P0Top	;+3	42
   4397  222e				   retXKR
   4398  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   4399  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   4400  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   4401  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   4402  2236				   BackFromSwitchDrawP0KR
   4403  2236		       38		      sec		;+2	56
   4404  2237
   4405  2237
   4406  2237
   4407  2237		       b5 b8		      lda	PF2temp1,X
   4408  2239		       b4 b6		      ldy	PF1temp1,X
   4409  223b
   4410  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   4411  223d
   4412  223d		       85 0f		      sta	PF2	;+7	63
   4413  223f
   4414  223f		       b5 9d		      lda	SpriteGfxIndex,x
   4415  2241		       84 0e		      sty	PF1	;+7	70	too early?
   4416  2243		       aa		      tax
   4417  2244		       a9 00		      lda	#0
   4418  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   4419  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   4420  224a
   4421  224a				   DivideBy15LoopK		;	 6	(carry set above)
   4422  224a		       e9 0f		      sbc	#15
   4423  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   4424  224e
   4425  224e		       aa		      tax		;+2	12/17/...62
   4426  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   4427  2252
   4428  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   4429  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   4430  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   4431  2258							;sta HMOVE			;+3	 3
   4432  2258
   4433  2258		       a2 1f		      ldx	#ENABL
   4434  225a		       9a		      txs		;+4	25
   4435  225b		       a4 ce		      ldy	RepoLine	; restore y
   4436  225d		       c4 8c		      cpy	bally
   4437  225f		       08		      php		;+6	 9	VDEL ball
   4438  2260
   4439  2260		       c4 8b		      cpy	missile1y
   4440  2262		       08		      php		;+6	15
   4441  2263
   4442  2263		       c4 8a		      cpy	missile0y
   4443  2265		       08		      php		;+6	21
   4444  2266
   4445  2266
   4446  2266
   4447  2266
   4448  2266
   4449  2266							;15 cycles
   4450  2266		       98		      tya
   4451  2267		       25 c4		      and	pfheight
   4452  2269							;eor #1
   4453  2269		       29 fe		      and	#$FE
   4454  226b		       d0 b2		      bne	skipthis
   4455  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   4457  2270							;	sleep 2
   4458  2270				   goback
   4459  2270
   4460  2270		       88		      dey
   4461  2271		       c4 cf		      cpy	P0Top	;+3	52
   4462  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   4463  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   4464  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   4465  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   4466  227b				   BackFromSwitchDrawP0KV
   4467  227b
   4468  227b							; sleep 3
   4469  227b
   4470  227b		       b5 b8		      lda	PF2temp1,X
   4471  227d		       85 0f		      sta	PF2	;+7	 5
   4472  227f		       b5 b6		      lda	PF1temp1,X
   4473  2281		       85 0e		      sta	PF1	;+7	74 
   4474  2283		       85 2a		      sta	HMOVE
   4475  2285
   4476  2285		       a9 00		      lda	#0
   4477  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   4478  2289
   4479  2289		       a2 1f		      ldx	#ENABL
   4480  228b		       9a		      txs		;+4	 8
   4481  228c
   4482  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   4483  228e							;--now, set all new variables and return to main kernel loop
   4484  228e
   4485  228e
   4486  228e							;
   4487  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   4488  2290		       aa		      tax		;+2	33
   4489  2291							;
   4490  2291
   4491  2291
   4492  2291
   4493  2291		       b5 93		      lda	NewNUSIZ,X
   4494  2293		       85 05		      sta	NUSIZ1	;+7	20
   4495  2295		       85 0c		      sta	REFP1
   4496  2297		       b5 98		      lda	NewCOLUP1,X
   4497  2299		       85 07		      sta	COLUP1	;+7	27
   4498  229b
   4499  229b							;	lda SpriteGfxIndex,X	;+4	31
   4500  229b							;	tax				;+2	33
   4501  229b							;fuck2
   4502  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   4503  229d		       38		      sec		;+2	38
   4504  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   4505  22a0		       85 a5		      sta	P1Bottom	;+3	45
   4506  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   4508  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   4509  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   4510  22a9		       85 cc		      sta	P1display	;+3	55
   4511  22ab		       b5 ab		      lda	player1pointerhi,X
   4512  22ad		       85 cd		      sta	P1display+1	;+7	62
   4513  22af
   4514  22af
   4515  22af		       c4 8c		      cpy	bally
   4516  22b1		       08		      php		;+6	68	VDELed
   4517  22b2
   4518  22b2		       c4 8b		      cpy	missile1y
   4519  22b4		       08		      php		;+6	74
   4520  22b5
   4521  22b5		       c4 8a		      cpy	missile0y
   4522  22b7		       08		      php		;+6	 4
   4523  22b8
   4524  22b8
   4525  22b8
   4526  22b8							; lda SpriteGfxIndex-1,x
   4527  22b8							; sleep 3
   4528  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   4529  22ba							; tax
   4530  22ba							; lda NewSpriteY,x
   4531  22ba							; sta RepoLine
   4532  22ba
   4533  22ba							; 10 cycles below...
   4534  22ba		       10 05		      bpl	SetNextLine
   4535  22bc		       a9 ff		      lda	#255
   4536  22be		       4c c4 f2 	      jmp	SetLastLine
   4537  22c1				   SetNextLine
   4538  22c1							;	lda NewSpriteY-1,x
   4539  22c1		       ad d0 00 	      lda.w	temp6
   4540  22c4				   SetLastLine
   4541  22c4		       85 ce		      sta	RepoLine
   4542  22c6
   4543  22c6		       98		      tya
   4544  22c7		       25 c4		      and	pfheight
   4545  22c9		       d0 06		      bne	nodec
   4546  22cb		       c6 ba		      dec	pfpixelheight
   4547  22cd		       88		      dey		;+2	30
   4548  22ce
   4549  22ce							; 10 cycles 
   4550  22ce
   4551  22ce
   4552  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   4553  22d1
   4554  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   4556  22d3		       88		      dey
   4557  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   4558  22d7
   4559  22d7							;-------------------------------------------------------------------------
   4560  22d7
   4561  22d7
   4562  22d7				   SwitchDrawP0KV		;	69
   4563  22d7		       a5 a4		      lda	P0Bottom
   4564  22d9		       85 cf		      sta	P0Top	;+6	75
   4565  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4566  22de
   4567  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   4569  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4570  22e3
   4571  22e3							;-------------------------------------------------------------------------
   4572  22e3
   4573  22e3				   DoneWithKernel
   4574  22e3
   4575  22e3				   BottomOfKernelLoop
   4576  22e3
   4577  22e3		       85 02		      sta	WSYNC
   4578  22e5		       a6 f6		      ldx	stack1
   4579  22e7		       9a		      txs
   4580  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   4581  22eb
   4582  22eb
   4583  22eb		       85 02		      sta	WSYNC
   4584  22ed		       a2 00		      ldx	#0
   4585  22ef		       85 2b		      sta	HMCLR
   4586  22f1		       86 1b		      STx	GRP0
   4587  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4588  22f5
   4589  22f5		       a0 07		      LDY	#7
   4590  22f7		       84 25		      STy	VDELP0
   4591  22f9		       84 26		      STy	VDELP1
   4592  22fb		       a9 10		      LDA	#$10
   4593  22fd		       85 21		      STA	HMP1
   4594  22ff		       a5 d5		      LDA	scorecolor
   4595  2301		       85 06		      STA	COLUP0
   4596  2303		       85 07		      STA	COLUP1
   4597  2305
   4598  2305		       a9 03		      LDA	#$03
   4599  2307		       85 04		      STA	NUSIZ0
   4600  2309		       85 05		      STA	NUSIZ1
   4601  230b
   4602  230b		       85 10		      STA	RESP0
   4603  230d		       85 11		      STA	RESP1
   4604  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   4606  2314		       b1 c5		      lda	(scorepointers),y
   4607  2316		       85 1b		      sta	GRP0
   4608  2318				  -	      ifconst	pfscore
   4609  2318				  -	      lda	pfscorecolor
   4610  2318				  -	      sta	COLUPF
   4611  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   4613  231b					      endif
   4614  231b
   4615  231b		       85 2a		      STA	HMOVE
   4616  231d		       b1 cd		      lda	(scorepointers+8),y
   4617  231f							; sta WSYNC
   4618  231f							;sleep 2
   4619  231f		       4c 2c f3 	      jmp	beginscore
   4620  2322
   4621  2322
   4622  2322				   loop2
   4623  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   4624  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   4625  2326				  -	      ifconst	pfscore
   4626  2326				  -	      lda.w	pfscore1
   4627  2326				  -	      sta	PF1
   4628  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   4630  232a					      endif
   4631  232a							; cycle 0
   4632  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   4633  232c				   beginscore
   4634  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   4635  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   4636  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   4637  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   4638  2334		       9a		      txs
   4639  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   4641  2339				  -	      ifconst	pfscore
   4642  2339				  -	      lda	pfscore2
   4643  2339				  -	      sta	PF1
   4644  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   4646  233c					      endif
   4647  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   4648  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   4649  2340		       ba		      tsx
   4650  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   4651  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   4652  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   4653  2347		       88		      dey
   4654  2348		       10 d8		      bpl	loop2	;+2  60  180
   4655  234a		       a6 f6		      ldx	stack1
   4656  234c		       9a		      txs
   4657  234d
   4658  234d
   4659  234d							; lda scorepointers+1
   4660  234d		       a4 cb		      ldy	temp1
   4661  234f							; sta temp1
   4662  234f		       84 c6		      sty	scorepointers+1
   4663  2351
   4664  2351		       a9 00		      LDA	#0
   4665  2353		       85 1b		      STA	GRP0
   4666  2355		       85 1c		      STA	GRP1
   4667  2357		       85 0e		      sta	PF1
   4668  2359		       85 25		      STA	VDELP0
   4669  235b		       85 26		      STA	VDELP1	;do we need these
   4670  235d		       85 04		      STA	NUSIZ0
   4671  235f		       85 05		      STA	NUSIZ1
   4672  2361
   4673  2361							; lda scorepointers+3
   4674  2361		       a4 cd		      ldy	temp3
   4675  2363							; sta temp3
   4676  2363		       84 c8		      sty	scorepointers+3
   4677  2365
   4678  2365							; lda scorepointers+5
   4679  2365		       a4 cf		      ldy	temp5
   4680  2367							; sta temp5
   4681  2367		       84 ca		      sty	scorepointers+5
   4682  2369
   4683  2369
   4684  2369							;-------------------------------------------------------------------------
   4685  2369							;------------------------Overscan Routine---------------------------------
   4686  2369							;-------------------------------------------------------------------------
   4687  2369
   4688  2369				   OverscanRoutine
   4689  2369
   4690  2369
   4691  2369
   4692  2369				   skipscore
   4693  2369				  -	      ifconst	qtcontroller
   4694  2369				  -	      lda	qtcontroller
   4695  2369				  -	      lsr		; bit 0 in carry
   4696  2369				  -	      lda	#4
   4697  2369				  -	      ror		; carry into top of A
   4698  2369					      else
   4699  2369		       a9 02		      lda	#2
   4700  236b					      endif		; qtcontroller
   4701  236b		       85 02		      sta	WSYNC
   4702  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   4703  236f
   4704  236f
   4705  236f
   4706  236f
   4707  236f
   4708  236f							;-------------------------------------------------------------------------
   4709  236f							;----------------------------End Main Routines----------------------------
   4710  236f							;-------------------------------------------------------------------------
   4711  236f
   4712  236f
   4713  236f							;*************************************************************************
   4714  236f
   4715  236f							;-------------------------------------------------------------------------
   4716  236f							;----------------------Begin Subroutines----------------------------------
   4717  236f							;-------------------------------------------------------------------------
   4718  236f
   4719  236f
   4720  236f
   4721  236f
   4722  236f				   KernelCleanupSubroutine
   4723  236f
   4724  236f		       a2 04		      ldx	#4
   4725  2371				   AdjustYValuesDownLoop
   4726  2371		       b5 8e		      lda	NewSpriteY,X
   4727  2373		       38		      sec
   4728  2374		       e9 02		      sbc	#2
   4729  2376		       95 8e		      sta	NewSpriteY,X
   4730  2378		       ca		      dex
   4731  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   4732  237b
   4733  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   4735  237e							;rts
   4736  237e
   4737  237e				   SetupP1Subroutine
   4738  237e							; flickersort algorithm
   4739  237e							; count 4-0
   4740  237e							; table2=table1 (?)
   4741  237e							; detect overlap of sprites in table 2
   4742  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   4743  237e							; if no overlap, do regular sort in table 2 and table 1
   4744  237e				   fsstart
   4745  237e		       a2 ff		      ldx	#255
   4746  2380				   copytable
   4747  2380		       e8		      inx
   4748  2381		       b5 f1		      lda	spritesort,x
   4749  2383		       95 9d		      sta	SpriteGfxIndex,x
   4750  2385		       e0 04		      cpx	#4
   4751  2387		       d0 f7		      bne	copytable
   4752  2389
   4753  2389		       86 cd		      stx	temp3	; highest displayed sprite
   4754  238b		       ca		      dex
   4755  238c		       86 cc		      stx	temp2
   4756  238e				   sortloop
   4757  238e		       a6 cc		      ldx	temp2
   4758  2390		       b5 f1		      lda	spritesort,x
   4759  2392		       aa		      tax
   4760  2393		       b5 8e		      lda	NewSpriteY,x
   4761  2395		       85 cb		      sta	temp1
   4762  2397
   4763  2397		       a6 cc		      ldx	temp2
   4764  2399		       b5 f2		      lda	spritesort+1,x
   4765  239b		       aa		      tax
   4766  239c		       b5 8e		      lda	NewSpriteY,x
   4767  239e		       38		      sec
   4768  239f		       18		      clc
   4769  23a0		       e5 cb		      sbc	temp1
   4770  23a2		       90 0e		      bcc	largerXislower
   4771  23a4
   4772  23a4							; larger x is higher (A>=temp1)
   4773  23a4		       d5 b1		      cmp	spriteheight,x
   4774  23a6		       b0 2f		      bcs	countdown
   4775  23a8							; overlap with x+1>x
   4776  23a8							; 
   4777  23a8							; stick x at end of gfxtable, dec counter
   4778  23a8				   overlapping
   4779  23a8		       c6 cd		      dec	temp3
   4780  23aa		       a6 cc		      ldx	temp2
   4781  23ac							; inx
   4782  23ac		       20 eb f3 	      jsr	shiftnumbers
   4783  23af		       4c cd f3 	      jmp	skipswapGfxtable
   4784  23b2
   4785  23b2				   largerXislower		; (temp1>A)
   4786  23b2		       a8		      tay
   4787  23b3		       a6 cc		      ldx	temp2
   4788  23b5		       b5 f1		      lda	spritesort,x
   4789  23b7		       aa		      tax
   4790  23b8		       98		      tya
   4791  23b9		       49 ff		      eor	#$FF
   4792  23bb		       e9 01		      sbc	#1
   4793  23bd		       90 e9		      bcc	overlapping
   4794  23bf		       d5 b1		      cmp	spriteheight,x
   4795  23c1		       b0 0a		      bcs	notoverlapping
   4796  23c3
   4797  23c3		       c6 cd		      dec	temp3
   4798  23c5		       a6 cc		      ldx	temp2
   4799  23c7							; inx
   4800  23c7		       20 eb f3 	      jsr	shiftnumbers
   4801  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   4802  23cd				   notoverlapping
   4803  23cd							; ldx temp2 ; swap display table
   4804  23cd							; ldy SpriteGfxIndex+1,x
   4805  23cd							; lda SpriteGfxIndex,x
   4806  23cd							; sty SpriteGfxIndex,x
   4807  23cd							; sta SpriteGfxIndex+1,x 
   4808  23cd
   4809  23cd				   skipswapGfxtable
   4810  23cd		       a6 cc		      ldx	temp2	; swap sort table
   4811  23cf		       b4 f2		      ldy	spritesort+1,x
   4812  23d1		       b5 f1		      lda	spritesort,x
   4813  23d3		       94 f1		      sty	spritesort,x
   4814  23d5		       95 f2		      sta	spritesort+1,x
   4815  23d7
   4816  23d7				   countdown
   4817  23d7		       c6 cc		      dec	temp2
   4818  23d9		       10 b3		      bpl	sortloop
   4819  23db
   4820  23db				   checktoohigh
   4821  23db		       a6 cd		      ldx	temp3
   4822  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   4823  23df		       aa		      tax
   4824  23e0		       b5 8e		      lda	NewSpriteY,x
   4825  23e2				  -	      ifconst	screenheight
   4826  23e2				  -	      cmp	#screenheight-3
   4827  23e2					      else
   4828  23e2		       c9 55		      cmp	#$55
   4829  23e4					      endif
   4830  23e4		       90 04		      bcc	nonetoohigh
   4831  23e6		       c6 cd		      dec	temp3
   4832  23e8		       d0 f1		      bne	checktoohigh
   4833  23ea
   4834  23ea				   nonetoohigh
   4835  23ea		       60		      rts
   4836  23eb
   4837  23eb
   4838  23eb				   shiftnumbers
   4839  23eb							; stick current x at end, shift others down
   4840  23eb							; if x=4: don't do anything
   4841  23eb							; if x=3: swap 3 and 4
   4842  23eb							; if x=2: 2=3, 3=4, 4=2
   4843  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   4844  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   4845  23eb							; ldy SpriteGfxIndex,x
   4846  23eb				   swaploop
   4847  23eb		       e0 04		      cpx	#4
   4848  23ed		       f0 08		      beq	shiftdone
   4849  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   4850  23f1		       95 9d		      sta	SpriteGfxIndex,x
   4851  23f3		       e8		      inx
   4852  23f4		       4c eb f3 	      jmp	swaploop
   4853  23f7				   shiftdone
   4854  23f7							; sty SpriteGfxIndex,x
   4855  23f7		       60		      rts
   4856  23f8
   4857  23f8				  -	      ifconst	debugscore
   4858  23f8				  -debugcycles
   4859  23f8				  -	      ldx	#14
   4860  23f8				  -	      lda	INTIM	; display # cycles left in the score
   4861  23f8				  -
   4862  23f8				  -	      ifconst	mincycles
   4863  23f8				  -	      lda	mincycles
   4864  23f8				  -	      cmp	INTIM
   4865  23f8				  -	      lda	mincycles
   4866  23f8				  -	      bcc	nochange
   4867  23f8				  -	      lda	INTIM
   4868  23f8				  -	      sta	mincycles
   4869  23f8				  -nochange
   4870  23f8				  -	      endif
   4871  23f8				  -
   4872  23f8				  -			;   cmp #$2B
   4873  23f8				  -			;   bcs no_cycles_left
   4874  23f8				  -	      bmi	cycles_left
   4875  23f8				  -	      ldx	#64
   4876  23f8				  -	      eor	#$ff	;make negative
   4877  23f8				  -cycles_left
   4878  23f8				  -	      stx	scorecolor
   4879  23f8				  -	      and	#$7f	; clear sign bit
   4880  23f8				  -	      tax
   4881  23f8				  -	      lda	scorebcd,x
   4882  23f8				  -	      sta	score+2
   4883  23f8				  -	      lda	scorebcd1,x
   4884  23f8				  -	      sta	score+1
   4885  23f8				  -	      rts
   4886  23f8				  -scorebcd
   4887  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4888  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4889  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4890  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4891  23f8				  -scorebcd1
   4892  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4893  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4894  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4895  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4896  23f8					      endif
   4897  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4898  23f8
   4899  23f8				   start
   4900  23f8		       78		      sei
   4901  23f9		       d8		      cld
   4902  23fa		       a0 00		      ldy	#0
   4903  23fc		       a5 d0		      lda	$D0
   4904  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   4905  2400		       d0 07		      bne	MachineIs2600
   4906  2402		       a5 d1		      lda	$D1
   4907  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   4908  2406		       d0 01		      bne	MachineIs2600
   4909  2408		       88		      dey
   4910  2409				   MachineIs2600
   4911  2409		       a2 00		      ldx	#0
   4912  240b		       8a		      txa
   4913  240c				   clearmem
   4914  240c		       e8		      inx
   4915  240d		       9a		      txs
   4916  240e		       48		      pha
   4917  240f		       d0 fb		      bne	clearmem
   4918  2411		       84 cb		      sty	temp1
   4919  2413				  -	      ifnconst	multisprite
   4920  2413				  -	      ifconst	pfrowheight
   4921  2413				  -	      lda	#pfrowheight
   4922  2413				  -	      else
   4923  2413				  -	      ifconst	pfres
   4924  2413				  -	      lda	#(96/pfres)
   4925  2413				  -	      else
   4926  2413				  -	      lda	#8
   4927  2413				  -	      endif
   4928  2413				  -	      endif
   4929  2413				  -	      sta	playfieldpos
   4930  2413					      endif
   4931  2413		       a2 05		      ldx	#5
   4932  2415				   initscore
   4933  2415		       a9 74		      lda	#<scoretable
   4934  2417		       95 c5		      sta	scorepointers,x
   4935  2419		       ca		      dex
   4936  241a		       10 f9		      bpl	initscore
   4937  241c		       a9 01		      lda	#1
   4938  241e		       85 0a		      sta	CTRLPF
   4939  2420		       0d 84 02 	      ora	INTIM
   4940  2423		       85 d6		      sta	rand
   4941  2425
   4942  2425					      ifconst	multisprite
   4943  2425		       20 1f f0 	      jsr	multisprite_setup
   4944  2428					      endif
   4945  2428
   4946  2428				  -	      ifnconst	bankswitch
   4947  2428				  -	      jmp	game
   4948  2428					      else
   4949  2428		       a9 d0		      lda	#>(game-1)
   4950  242a		       48		      pha
   4951  242b		       a9 ff		      lda	#<(game-1)
   4952  242d		       48		      pha
   4953  242e		       48		      pha
   4954  242f		       48		      pha
   4955  2430		       a2 01		      ldx	#1
   4956  2432		       4c eb ff 	      jmp	BS_jsr
   4957  2435					      endif
   4958  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4959  2435
   4960  2435							;standard routines needed for pretty much all games
   4961  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   4962  2435							; repositioning code and score pointer setup moved to overscan
   4963  2435							; read switches, joysticks now compiler generated (more efficient)
   4964  2435
   4965  2435				   randomize
   4966  2435		       a5 d6		      lda	rand
   4967  2437		       4a		      lsr
   4968  2438				  -	      ifconst	rand16
   4969  2438				  -	      rol	rand16
   4970  2438					      endif
   4971  2438		       90 02		      bcc	noeor
   4972  243a		       49 b4		      eor	#$B4
   4973  243c				   noeor
   4974  243c		       85 d6		      sta	rand
   4975  243e				  -	      ifconst	rand16
   4976  243e				  -	      eor	rand16
   4977  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   4979  2441							;bB.asm
   4980  2441							; bB.asm file is split here
   4981  2441				   .L0364		;  asm
   4982  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_48x2_1
     10  2441					      draw_48x2_2
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_48x2_1
      1  2482		       00 01	   mk_48x1_on =	1
      2  2482		       00 01	   mk_48x2_1_on =	1
      3  2482		       20 9e f5 	      jsr	draw_bmp_48x2_1
      0  2485					      draw_48x2_2
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x2_2_on =	1
      3  2485		       20 fe f5 	      jsr	draw_bmp_48x2_2
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 5e f6 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 24 f7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e				  -	      ifconst	mk_48x1_1_on
     75  259e				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  259e					      endif		;mk_48x1_1_on
     77  259e
     78  259e				  -	      ifconst	mk_48x1_2_on
     79  259e				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  259e					      endif		;mk_48x1_2_on
     81  259e
     82  259e				  -	      ifconst	mk_48x1_3_on
     83  259e				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  259e					      endif		;mk_48x1_3_on
     85  259e
     86  259e					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x2_1
      3  259e
      4  259e		       a0 17		      ldy	#(bmp_48x2_1_window-1)
      5  25a0
      6  25a0		       a9 37		      lda	#<(bmp_48x2_1_colors-1)
      7  25a2		       18		      clc
      8  25a3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
      9  25a5				  -	      ifconst	bmp_48x2_1_index
     10  25a5				  -	      sec
     11  25a5				  -	      sbc	bmp_48x2_1_index
     12  25a5					      endif
     13  25a5		       85 c1		      sta	aux5+0
     14  25a7		       a9 f7		      lda	#>(bmp_48x2_1_colors-1)
     15  25a9		       85 c2		      sta	aux5+1
     16  25ab
     17  25ab		       c8		      iny
     18  25ac		       b1 c1		      lda	(aux5),y
     19  25ae		       88		      dey
     20  25af		       85 06		      sta	COLUP0	;3
     21  25b1		       85 07		      sta	COLUP1	;3
     22  25b3		       85 2b		      sta	HMCLR	;3
     23  25b5
     24  25b5							;setup score pointers to point at my bitmap slices instead
     25  25b5		       a9 50		      lda	#<bmp_48x2_1_00
     26  25b7		       18		      clc
     27  25b8		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     28  25ba				  -	      ifconst	bmp_48x2_1_index
     29  25ba				  -	      sec
     30  25ba				  -	      sbc	bmp_48x2_1_index
     31  25ba					      endif
     32  25ba		       85 c5		      sta	scorepointers+0
     33  25bc		       a9 f7		      lda	#>bmp_48x2_1_00
     34  25be		       85 c6		      sta	scorepointers+1
     35  25c0
     36  25c0
     37  25c0		       a9 68		      lda	#<bmp_48x2_1_01
     38  25c2		       18		      clc
     39  25c3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     40  25c5				  -	      ifconst	bmp_48x2_1_index
     41  25c5				  -	      sec
     42  25c5				  -	      sbc	bmp_48x2_1_index
     43  25c5					      endif
     44  25c5		       85 c7		      sta	scorepointers+2
     45  25c7		       a9 f7		      lda	#>bmp_48x2_1_01
     46  25c9		       85 c8		      sta	scorepointers+3
     47  25cb
     48  25cb
     49  25cb		       a9 80		      lda	#<bmp_48x2_1_02
     50  25cd		       18		      clc
     51  25ce		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     52  25d0				  -	      ifconst	bmp_48x2_1_index
     53  25d0				  -	      sec
     54  25d0				  -	      sbc	bmp_48x2_1_index
     55  25d0					      endif
     56  25d0		       85 c9		      sta	scorepointers+4
     57  25d2		       a9 f7		      lda	#>bmp_48x2_1_02
     58  25d4		       85 ca		      sta	scorepointers+5
     59  25d6
     60  25d6
     61  25d6		       a9 98		      lda	#<bmp_48x2_1_03
     62  25d8		       18		      clc
     63  25d9		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     64  25db				  -	      ifconst	bmp_48x2_1_index
     65  25db				  -	      sec
     66  25db				  -	      sbc	bmp_48x2_1_index
     67  25db					      endif
     68  25db		       85 cb		      sta	scorepointers+6
     69  25dd		       a9 f7		      lda	#>bmp_48x2_1_03
     70  25df		       85 cc		      sta	scorepointers+7
     71  25e1
     72  25e1
     73  25e1		       a9 b0		      lda	#<bmp_48x2_1_04
     74  25e3		       18		      clc
     75  25e4		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     76  25e6				  -	      ifconst	bmp_48x2_1_index
     77  25e6				  -	      sec
     78  25e6				  -	      sbc	bmp_48x2_1_index
     79  25e6					      endif
     80  25e6		       85 cd		      sta	scorepointers+8
     81  25e8		       a9 f7		      lda	#>bmp_48x2_1_04
     82  25ea		       85 ce		      sta	scorepointers+9
     83  25ec
     84  25ec
     85  25ec		       a9 c8		      lda	#<bmp_48x2_1_05
     86  25ee		       18		      clc
     87  25ef		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     88  25f1				  -	      ifconst	bmp_48x2_1_index
     89  25f1				  -	      sec
     90  25f1				  -	      sbc	bmp_48x2_1_index
     91  25f1					      endif
     92  25f1		       85 cf		      sta	scorepointers+10
     93  25f3		       a9 f7		      lda	#>bmp_48x2_1_05
     94  25f5		       85 d0		      sta	scorepointers+11
     95  25f7
     96  25f7		       a9 00		      lda	#0	;two line kernel
     97  25f9		       85 bf		      sta	aux3
     98  25fb
     99  25fb		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  25fe
------- FILE titlescreen/asm/titlescreen.asm
     88  25fe					      endif		;mk_48x2_1_on
     89  25fe
     90  25fe					      ifconst	mk_48x2_2_on
------- FILE titlescreen/asm/48x2_2_kernel.asm LEVEL 3 PASS 3
      0  25fe					      include	"titlescreen/asm/48x2_2_kernel.asm"
      1  25fe
      2  25fe				   draw_bmp_48x2_2
      3  25fe
      4  25fe		       a0 2f		      ldy	#(bmp_48x2_2_window-1)
      5  2600
      6  2600		       a9 00		      lda	#<(bmp_48x2_2_colors-1)
      7  2602		       18		      clc
      8  2603		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
      9  2605				  -	      ifconst	bmp_48x2_2_index
     10  2605				  -	      sec
     11  2605				  -	      sbc	bmp_48x2_2_index
     12  2605					      endif
     13  2605		       85 c1		      sta	aux5+0
     14  2607		       a9 f8		      lda	#>(bmp_48x2_2_colors-1)
     15  2609		       85 c2		      sta	aux5+1
     16  260b
     17  260b		       c8		      iny
     18  260c		       b1 c1		      lda	(aux5),y
     19  260e		       88		      dey
     20  260f		       85 06		      sta	COLUP0	;3
     21  2611		       85 07		      sta	COLUP1	;3
     22  2613		       85 2b		      sta	HMCLR	;3
     23  2615
     24  2615							;setup score pointers to point at my bitmap slices instead
     25  2615		       a9 31		      lda	#<bmp_48x2_2_00
     26  2617		       18		      clc
     27  2618		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     28  261a				  -	      ifconst	bmp_48x2_2_index
     29  261a				  -	      sec
     30  261a				  -	      sbc	bmp_48x2_2_index
     31  261a					      endif
     32  261a		       85 c5		      sta	scorepointers+0
     33  261c		       a9 f8		      lda	#>bmp_48x2_2_00
     34  261e		       85 c6		      sta	scorepointers+1
     35  2620
     36  2620
     37  2620		       a9 61		      lda	#<bmp_48x2_2_01
     38  2622		       18		      clc
     39  2623		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     40  2625				  -	      ifconst	bmp_48x2_2_index
     41  2625				  -	      sec
     42  2625				  -	      sbc	bmp_48x2_2_index
     43  2625					      endif
     44  2625		       85 c7		      sta	scorepointers+2
     45  2627		       a9 f8		      lda	#>bmp_48x2_2_01
     46  2629		       85 c8		      sta	scorepointers+3
     47  262b
     48  262b
     49  262b		       a9 91		      lda	#<bmp_48x2_2_02
     50  262d		       18		      clc
     51  262e		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     52  2630				  -	      ifconst	bmp_48x2_2_index
     53  2630				  -	      sec
     54  2630				  -	      sbc	bmp_48x2_2_index
     55  2630					      endif
     56  2630		       85 c9		      sta	scorepointers+4
     57  2632		       a9 f8		      lda	#>bmp_48x2_2_02
     58  2634		       85 ca		      sta	scorepointers+5
     59  2636
     60  2636
     61  2636		       a9 c1		      lda	#<bmp_48x2_2_03
     62  2638		       18		      clc
     63  2639		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     64  263b				  -	      ifconst	bmp_48x2_2_index
     65  263b				  -	      sec
     66  263b				  -	      sbc	bmp_48x2_2_index
     67  263b					      endif
     68  263b		       85 cb		      sta	scorepointers+6
     69  263d		       a9 f8		      lda	#>bmp_48x2_2_03
     70  263f		       85 cc		      sta	scorepointers+7
     71  2641
     72  2641
     73  2641		       a9 00		      lda	#<bmp_48x2_2_04
     74  2643		       18		      clc
     75  2644		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     76  2646				  -	      ifconst	bmp_48x2_2_index
     77  2646				  -	      sec
     78  2646				  -	      sbc	bmp_48x2_2_index
     79  2646					      endif
     80  2646		       85 cd		      sta	scorepointers+8
     81  2648		       a9 f9		      lda	#>bmp_48x2_2_04
     82  264a		       85 ce		      sta	scorepointers+9
     83  264c
     84  264c
     85  264c		       a9 30		      lda	#<bmp_48x2_2_05
     86  264e		       18		      clc
     87  264f		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     88  2651				  -	      ifconst	bmp_48x2_2_index
     89  2651				  -	      sec
     90  2651				  -	      sbc	bmp_48x2_2_index
     91  2651					      endif
     92  2651		       85 cf		      sta	scorepointers+10
     93  2653		       a9 f9		      lda	#>bmp_48x2_2_05
     94  2655		       85 d0		      sta	scorepointers+11
     95  2657
     96  2657		       a9 00		      lda	#0	;two line kernel
     97  2659		       85 bf		      sta	aux3
     98  265b
     99  265b		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  265e
------- FILE titlescreen/asm/titlescreen.asm
     92  265e					      endif		;mk_48x2_2_on
     93  265e
     94  265e				  -	      ifconst	mk_48x2_3_on
     95  265e				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  265e					      endif		;mk_48x2_3_on
     97  265e
     98  265e				  -	      ifconst	mk_96x2_1_on
     99  265e				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    100  265e					      endif		;mk_96x2_1_on
    101  265e
    102  265e				  -	      ifconst	mk_96x2_2_on
    103  265e				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  265e					      endif		;mk_96x2_2_on
    105  265e
    106  265e				  -	      ifconst	mk_96x2_3_on
    107  265e				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  265e					      endif		;mk_96x2_3_on
    109  265e
    110  265e					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  265e					      include	"titlescreen/asm/score_kernel.asm"
      1  265e							; The batari Basic score kernel
      2  265e							; This minikernel is not under the same license as the rest of the 
      3  265e							; titlescreen code. Refer to the bB license before you use this in
      4  265e							; a non-bB program.
      5  265e
      6  265e				   draw_score_display
      7  265e
      8  265e		       a7 d4		      lax	score+2
      9  2660		       20 14 f7 	      jsr	miniscorepointerset
     10  2663		       84 ca		      sty	scorepointers+5
     11  2665		       86 c7		      stx	scorepointers+2
     12  2667		       a7 d3		      lax	score+1
     13  2669		       20 14 f7 	      jsr	miniscorepointerset
     14  266c		       84 c9		      sty	scorepointers+4
     15  266e		       86 c6		      stx	scorepointers+1
     16  2670		       a7 d2		      lax	score
     17  2672		       20 14 f7 	      jsr	miniscorepointerset
     18  2675		       84 c8		      sty	scorepointers+3
     19  2677		       86 c5		      stx	scorepointers
     20  2679
     21  2679		       a5 c6		      lda	scorepointers+1
     22  267b		       85 cb		      sta	temp1
     23  267d
     24  267d		       a5 c8		      lda	scorepointers+3
     25  267f		       85 cd		      sta	temp3
     26  2681
     27  2681
     28  2681		       85 2b		      sta	HMCLR
     29  2683		       ba		      tsx
     30  2684		       86 f6		      stx	stack1
     31  2686							;ldx #$10
     32  2686		       a2 20		      ldx	#$20
     33  2688		       86 20		      stx	HMP0
     34  268a
     35  268a		       a2 00		      ldx	#0
     36  268c		       85 02		      sta	WSYNC
     37  268e		       86 1b		      STx	GRP0
     38  2690		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  2692
     40  2692		       a5 ca		      lda	scorepointers+5
     41  2694		       95 cf		      sta	temp5,x
     42  2696		       a9 f9		      lda	#>miniscoretable
     43  2698		       85 c6		      sta	scorepointers+1
     44  269a		       85 c8		      sta	scorepointers+3
     45  269c		       95 ca		      sta	scorepointers+5,x
     46  269e		       95 cc		      sta	temp2,x
     47  26a0		       95 ce		      sta	temp4,x
     48  26a2		       95 d0		      sta	temp6,x
     49  26a4
     50  26a4
     51  26a4		       a0 07		      LDY	#7
     52  26a6		       85 10		      STA	RESP0
     53  26a8		       85 11		      STA	RESP1
     54  26aa
     55  26aa
     56  26aa		       a9 03		      LDA	#$03
     57  26ac		       85 04		      STA	NUSIZ0
     58  26ae		       95 05		      STA	NUSIZ1,x
     59  26b0		       85 25		      STA	VDELP0
     60  26b2		       85 26		      STA	VDELP1
     61  26b4							;LDA #$20
     62  26b4		       a9 30		      LDA	#$30
     63  26b6		       85 21		      STA	HMP1
     64  26b8		       a5 d5		      LDA	scorecolor
     65  26ba		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  26bc				  -	      ifconst	score_kernel_fade
     67  26bc				  -	      and	score_kernel_fade
     68  26bc					      endif
     69  26bc
     70  26bc		       85 06		      STA	COLUP0
     71  26be		       85 07		      STA	COLUP1
     72  26c0				  -	      ifconst	scorefade
     73  26c0				  -	      STA	stack2	; scorefade
     74  26c0					      endif
     75  26c0		       b1 c5		      lda	(scorepointers),y
     76  26c2		       85 1b		      sta	GRP0
     77  26c4		       b1 cd		      lda	(scorepointers+8),y
     78  26c6		       85 02		      sta	WSYNC
      0  26c8					      sleep	2
      1  26c8				   .CYCLES    SET	2
      2  26c8
      3  26c8				  -	      IF	.CYCLES < 2
      4  26c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26c8				  -	      ERR
      6  26c8					      ENDIF
      7  26c8
      8  26c8				  -	      IF	.CYCLES & 1
      9  26c8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26c8				  -	      nop	0
     11  26c8				  -	      ELSE
     12  26c8				  -	      bit	VSYNC
     13  26c8				  -	      ENDIF
     14  26c8				  -.CYCLES    SET	.CYCLES - 3
     15  26c8					      ENDIF
     16  26c8
     17  26c8					      REPEAT	.CYCLES / 2
     18  26c8		       ea		      nop
     19  26c9					      REPEND
     80  26c9		       4c d7 f6 	      jmp	beginscoreloop
     81  26cc
     82  26cc				  -	      if	((<*)>$d4)
     83  26cc				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  26cc					      endif
     85  26cc
     86  26cc				   scoreloop2
     87  26cc				  -	      ifconst	scorefade
     88  26cc				  -	      lda	stack2
     89  26cc				  -	      sta	COLUP0
     90  26cc				  -	      sta	COLUP1
     91  26cc					      else
      0  26cc					      sleep	9
      1  26cc				   .CYCLES    SET	9
      2  26cc
      3  26cc				  -	      IF	.CYCLES < 2
      4  26cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26cc				  -	      ERR
      6  26cc					      ENDIF
      7  26cc
      8  26cc					      IF	.CYCLES & 1
      9  26cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26cc		       04 00		      nop	0
     11  26ce				  -	      ELSE
     12  26ce				  -	      bit	VSYNC
     13  26ce					      ENDIF
     14  26ce				   .CYCLES    SET	.CYCLES - 3
     15  26ce					      ENDIF
     16  26ce
     17  26ce					      REPEAT	.CYCLES / 2
     18  26ce		       ea		      nop
     17  26ce					      REPEND
     18  26cf		       ea		      nop
     17  26cf					      REPEND
     18  26d0		       ea		      nop
     19  26d1					      REPEND
     93  26d1					      endif
     94  26d1		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  26d3		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  26d5		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  26d7							; cycle 0
     98  26d7				   beginscoreloop
     99  26d7		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  26d9		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  26db		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  26dd		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  26df		       9a		      txs
    104  26e0		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  26e2
    106  26e2				  -	      ifconst	scorefade
    107  26e2				  -	      dec	stack2
    108  26e2					      else
      0  26e2					      sleep	5
      1  26e2				   .CYCLES    SET	5
      2  26e2
      3  26e2				  -	      IF	.CYCLES < 2
      4  26e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e2				  -	      ERR
      6  26e2					      ENDIF
      7  26e2
      8  26e2					      IF	.CYCLES & 1
      9  26e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e2		       04 00		      nop	0
     11  26e4				  -	      ELSE
     12  26e4				  -	      bit	VSYNC
     13  26e4					      ENDIF
     14  26e4				   .CYCLES    SET	.CYCLES - 3
     15  26e4					      ENDIF
     16  26e4
     17  26e4					      REPEAT	.CYCLES / 2
     18  26e4		       ea		      nop
     19  26e5					      REPEND
    110  26e5					      endif
      0  26e5					      sleep	2
      1  26e5				   .CYCLES    SET	2
      2  26e5
      3  26e5				  -	      IF	.CYCLES < 2
      4  26e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e5				  -	      ERR
      6  26e5					      ENDIF
      7  26e5
      8  26e5				  -	      IF	.CYCLES & 1
      9  26e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e5				  -	      nop	0
     11  26e5				  -	      ELSE
     12  26e5				  -	      bit	VSYNC
     13  26e5				  -	      ENDIF
     14  26e5				  -.CYCLES    SET	.CYCLES - 3
     15  26e5					      ENDIF
     16  26e5
     17  26e5					      REPEAT	.CYCLES / 2
     18  26e5		       ea		      nop
     19  26e6					      REPEND
    112  26e6
    113  26e6		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  26e8		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  26ea		       ba		      tsx
    116  26eb		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  26ed		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  26ef
    119  26ef		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  26f1		       88		      dey
    121  26f2		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  26f4
    123  26f4
    124  26f4		       a6 f6		      ldx	stack1
    125  26f6		       9a		      txs
    126  26f7		       a4 cb		      ldy	temp1
    127  26f9		       84 c6		      sty	scorepointers+1
    128  26fb
    129  26fb		       a9 00		      LDA	#0
    130  26fd		       85 0e		      sta	PF1
    131  26ff		       85 1b		      STA	GRP0
    132  2701		       85 1c		      STA	GRP1
    133  2703		       85 25		      STA	VDELP0
    134  2705		       85 26		      STA	VDELP1
    135  2707		       85 04		      STA	NUSIZ0
    136  2709		       85 05		      STA	NUSIZ1
    137  270b
    138  270b		       a4 cd		      ldy	temp3
    139  270d		       84 c8		      sty	scorepointers+3
    140  270f
    141  270f		       a4 cf		      ldy	temp5
    142  2711		       84 ca		      sty	scorepointers+5
    143  2713		       60		      rts
    144  2714
    145  2714				   miniscorepointerset
    146  2714		       29 0f		      and	#$0F
    147  2716		       0a		      asl
    148  2717		       0a		      asl
    149  2718		       0a		      asl
    150  2719		       69 60		      adc	#<miniscoretable
    151  271b		       a8		      tay
    152  271c		       8a		      txa
    153  271d		       29 f0		      and	#$F0
    154  271f		       4a		      lsr
    155  2720		       69 60		      adc	#<miniscoretable
    156  2722		       aa		      tax
    157  2723		       60		      rts
    158  2724
------- FILE titlescreen/asm/titlescreen.asm
    112  2724					      endif		;mk_score_on
    113  2724
    114  2724				  -	      ifconst	mk_gameselect_on
    115  2724				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2724					      endif		;mk_gameselect_on
    117  2724
    118  2724				   PFWAIT
    119  2724		       ad 84 02 	      lda	INTIM
    120  2727		       d0 fb		      bne	PFWAIT
    121  2729
    122  2729				   OVERSCAN
    123  2729							;lda #35+128 
    124  2729
    125  2729					      ifnconst	overscan_time
    126  2729		       a9 a3		      lda	#35+128
    127  272b				  -	      else
    128  272b				  -	      lda	#overscan_time+128-3-1
    129  272b					      endif
    130  272b
    131  272b
    132  272b		       8d 96 02 	      sta	TIM64T
    133  272e		       a9 c2		      lda	#%11000010
    134  2730		       85 02		      sta	WSYNC
    135  2732		       85 01		      sta	VBLANK
      0  2734					      RETURN
      1  2734				  -	      ifnconst	bankswitch
      2  2734				  -	      rts
      3  2734					      else
      4  2734		       4c dd ff 	      jmp	BS_return
      5  2737					      endif
    137  2737
    138  2737				  -	      ifconst	mk_48x1_1_on
    139  2737				  -	      include	"titlescreen/48x1_1_image.asm"
    140  2737					      endif
    141  2737				  -	      ifconst	mk_48x1_2_on
    142  2737				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2737					      endif
    144  2737				  -	      ifconst	mk_48x1_3_on
    145  2737				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2737					      endif
    147  2737
    148  2737					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2737					      include	"titlescreen/48x2_1_image.asm"
      1  2737
      2  2737							;*** The height of the displayed data...
      3  2737		       00 18	   bmp_48x2_1_window =	24
      4  2737
      5  2737							;*** The height of the bitmap data. This can be larger than
      6  2737							;*** the displayed data height, if you are scrolling or animating
      7  2737							;*** the data...
      8  2737		       00 18	   bmp_48x2_1_height =	24
      9  2737
     10  2737				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2737				  -	      align	256
     12  2737					      endif
     13  2737		       00		      BYTE.b	$00	; leave this here!
     14  2738
     15  2738
     16  2738							;*** this is the color of each line in the bitmap data
     17  2738				   bmp_48x2_1_colors
     18  2738		       40		      BYTE.b	$40
     19  2739		       40		      BYTE.b	$40
     20  273a		       40		      BYTE.b	$40
     21  273b		       40		      BYTE.b	$40
     22  273c		       1f		      BYTE.b	$1f
     23  273d		       1f		      BYTE.b	$1f
     24  273e		       1f		      BYTE.b	$1f
     25  273f		       1f		      BYTE.b	$1f
     26  2740		       1f		      BYTE.b	$1f
     27  2741		       1f		      BYTE.b	$1f
     28  2742		       1f		      BYTE.b	$1f
     29  2743		       1f		      BYTE.b	$1f
     30  2744		       1f		      BYTE.b	$1f
     31  2745		       1f		      BYTE.b	$1f
     32  2746		       1f		      BYTE.b	$1f
     33  2747		       1f		      BYTE.b	$1f
     34  2748		       1f		      BYTE.b	$1f
     35  2749		       1f		      BYTE.b	$1f
     36  274a		       1f		      BYTE.b	$1f
     37  274b		       1f		      BYTE.b	$1f
     38  274c		       1f		      BYTE.b	$1f
     39  274d		       1f		      BYTE.b	$1f
     40  274e		       1f		      BYTE.b	$1f
     41  274f		       1f		      BYTE.b	$1f
     42  2750
     43  2750				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     44  2750				  -	      align	256
     45  2750					      endif
     46  2750
     47  2750				   bmp_48x2_1_00
     48  2750
     49  2750		       00		      BYTE.b	%00000000
     50  2751		       00		      BYTE.b	%00000000
     51  2752		       00		      BYTE.b	%00000000
     52  2753		       7f		      BYTE.b	%01111111
     53  2754		       00		      BYTE.b	%00000000
     54  2755		       79		      BYTE.b	%01111001
     55  2756		       1d		      BYTE.b	%00011101
     56  2757		       1d		      BYTE.b	%00011101
     57  2758		       79		      BYTE.b	%01111001
     58  2759		       41		      BYTE.b	%01000001
     59  275a		       78		      BYTE.b	%01111000
     60  275b		       00		      BYTE.b	%00000000
     61  275c		       00		      BYTE.b	%00000000
     62  275d		       00		      BYTE.b	%00000000
     63  275e		       00		      BYTE.b	%00000000
     64  275f		       00		      BYTE.b	%00000000
     65  2760		       00		      BYTE.b	%00000000
     66  2761		       00		      BYTE.b	%00000000
     67  2762		       01		      BYTE.b	%00000001
     68  2763		       03		      BYTE.b	%00000011
     69  2764		       07		      BYTE.b	%00000111
     70  2765		       00		      BYTE.b	%00000000
     71  2766		       00		      BYTE.b	%00000000
     72  2767		       00		      BYTE.b	%00000000
     73  2768
     74  2768				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2768				  -	      align	256
     76  2768					      endif
     77  2768
     78  2768				   bmp_48x2_1_01
     79  2768
     80  2768		       00		      BYTE.b	%00000000
     81  2769		       00		      BYTE.b	%00000000
     82  276a		       00		      BYTE.b	%00000000
     83  276b		       ff		      BYTE.b	%11111111
     84  276c		       00		      BYTE.b	%00000000
     85  276d		       30		      BYTE.b	%00110000
     86  276e		       31		      BYTE.b	%00110001
     87  276f		       f2		      BYTE.b	%11110010
     88  2770		       32		      BYTE.b	%00110010
     89  2771		       32		      BYTE.b	%00110010
     90  2772		       e2		      BYTE.b	%11100010
     91  2773		       00		      BYTE.b	%00000000
     92  2774		       00		      BYTE.b	%00000000
     93  2775		       00		      BYTE.b	%00000000
     94  2776		       11		      BYTE.b	%00010001
     95  2777		       32		      BYTE.b	%00110010
     96  2778		       70		      BYTE.b	%01110000
     97  2779		       f1		      BYTE.b	%11110001
     98  277a		       f3		      BYTE.b	%11110011
     99  277b		       f3		      BYTE.b	%11110011
    100  277c		       f1		      BYTE.b	%11110001
    101  277d		       00		      BYTE.b	%00000000
    102  277e		       00		      BYTE.b	%00000000
    103  277f		       00		      BYTE.b	%00000000
    104  2780
    105  2780				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    106  2780				  -	      align	256
    107  2780					      endif
    108  2780
    109  2780				   bmp_48x2_1_02
    110  2780
    111  2780		       00		      BYTE.b	%00000000
    112  2781		       00		      BYTE.b	%00000000
    113  2782		       00		      BYTE.b	%00000000
    114  2783		       ff		      BYTE.b	%11111111
    115  2784		       00		      BYTE.b	%00000000
    116  2785		       87		      BYTE.b	%10000111
    117  2786		       c3		      BYTE.b	%11000011
    118  2787		       63		      BYTE.b	%01100011
    119  2788		       63		      BYTE.b	%01100011
    120  2789		       63		      BYTE.b	%01100011
    121  278a		       67		      BYTE.b	%01100111
    122  278b		       00		      BYTE.b	%00000000
    123  278c		       00		      BYTE.b	%00000000
    124  278d		       00		      BYTE.b	%00000000
    125  278e		       c4		      BYTE.b	%11000100
    126  278f		       e5		      BYTE.b	%11100101
    127  2790		       e7		      BYTE.b	%11100111
    128  2791		       c7		      BYTE.b	%11000111
    129  2792		       05		      BYTE.b	%00000101
    130  2793		       05		      BYTE.b	%00000101
    131  2794		       c4		      BYTE.b	%11000100
    132  2795		       00		      BYTE.b	%00000000
    133  2796		       00		      BYTE.b	%00000000
    134  2797		       00		      BYTE.b	%00000000
    135  2798
    136  2798				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    137  2798				  -	      align	256
    138  2798					      endif
    139  2798
    140  2798				   bmp_48x2_1_03
    141  2798
    142  2798		       00		      BYTE.b	%00000000
    143  2799		       00		      BYTE.b	%00000000
    144  279a		       00		      BYTE.b	%00000000
    145  279b		       ff		      BYTE.b	%11111111
    146  279c		       00		      BYTE.b	%00000000
    147  279d		       8f		      BYTE.b	%10001111
    148  279e		       19		      BYTE.b	%00011001
    149  279f		       19		      BYTE.b	%00011001
    150  27a0		       19		      BYTE.b	%00011001
    151  27a1		       19		      BYTE.b	%00011001
    152  27a2		       8f		      BYTE.b	%10001111
    153  27a3		       00		      BYTE.b	%00000000
    154  27a4		       00		      BYTE.b	%00000000
    155  27a5		       00		      BYTE.b	%00000000
    156  27a6		       c6		      BYTE.b	%11000110
    157  27a7		       86		      BYTE.b	%10000110
    158  27a8		       06		      BYTE.b	%00000110
    159  27a9		       0f		      BYTE.b	%00001111
    160  27aa		       99		      BYTE.b	%10011001
    161  27ab		       99		      BYTE.b	%10011001
    162  27ac		       d9		      BYTE.b	%11011001
    163  27ad		       00		      BYTE.b	%00000000
    164  27ae		       00		      BYTE.b	%00000000
    165  27af		       00		      BYTE.b	%00000000
    166  27b0
    167  27b0				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  27b0				  -	      align	256
    169  27b0					      endif
    170  27b0
    171  27b0				   bmp_48x2_1_04
    172  27b0
    173  27b0		       00		      BYTE.b	%00000000
    174  27b1		       00		      BYTE.b	%00000000
    175  27b2		       00		      BYTE.b	%00000000
    176  27b3		       ff		      BYTE.b	%11111111
    177  27b4		       00		      BYTE.b	%00000000
    178  27b5		       1c		      BYTE.b	%00011100
    179  27b6		       26		      BYTE.b	%00100110
    180  27b7		       26		      BYTE.b	%00100110
    181  27b8		       26		      BYTE.b	%00100110
    182  27b9		       26		      BYTE.b	%00100110
    183  27ba		       26		      BYTE.b	%00100110
    184  27bb		       00		      BYTE.b	%00000000
    185  27bc		       00		      BYTE.b	%00000000
    186  27bd		       00		      BYTE.b	%00000000
    187  27be		       20		      BYTE.b	%00100000
    188  27bf		       30		      BYTE.b	%00110000
    189  27c0		       38		      BYTE.b	%00111000
    190  27c1		       3c		      BYTE.b	%00111100
    191  27c2		       3e		      BYTE.b	%00111110
    192  27c3		       3f		      BYTE.b	%00111111
    193  27c4		       3f		      BYTE.b	%00111111
    194  27c5		       00		      BYTE.b	%00000000
    195  27c6		       00		      BYTE.b	%00000000
    196  27c7		       00		      BYTE.b	%00000000
    197  27c8
    198  27c8				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    199  27c8				  -	      align	256
    200  27c8					      endif
    201  27c8
    202  27c8				   bmp_48x2_1_05
    203  27c8
    204  27c8		       00		      BYTE.b	%00000000
    205  27c9		       00		      BYTE.b	%00000000
    206  27ca		       00		      BYTE.b	%00000000
    207  27cb		       fc		      BYTE.b	%11111100
    208  27cc		       00		      BYTE.b	%00000000
    209  27cd		       4c		      BYTE.b	%01001100
    210  27ce		       50		      BYTE.b	%01010000
    211  27cf		       78		      BYTE.b	%01111000
    212  27d0		       4c		      BYTE.b	%01001100
    213  27d1		       4c		      BYTE.b	%01001100
    214  27d2		       78		      BYTE.b	%01111000
    215  27d3		       00		      BYTE.b	%00000000
    216  27d4		       00		      BYTE.b	%00000000
    217  27d5		       00		      BYTE.b	%00000000
    218  27d6		       00		      BYTE.b	%00000000
    219  27d7		       00		      BYTE.b	%00000000
    220  27d8		       00		      BYTE.b	%00000000
    221  27d9		       00		      BYTE.b	%00000000
    222  27da		       00		      BYTE.b	%00000000
    223  27db		       00		      BYTE.b	%00000000
    224  27dc		       80		      BYTE.b	%10000000
    225  27dd		       00		      BYTE.b	%00000000
    226  27de		       00		      BYTE.b	%00000000
    227  27df		       00		      BYTE.b	%00000000
    228  27e0
------- FILE titlescreen/asm/titlescreen.asm
    150  27e0					      endif
    151  27e0					      ifconst	mk_48x2_2_on
------- FILE titlescreen/48x2_2_image.asm LEVEL 3 PASS 3
      0  27e0					      include	"titlescreen/48x2_2_image.asm"
      1  27e0
      2  27e0							;*** The height of the displayed data...
      3  27e0		       00 30	   bmp_48x2_2_window =	48
      4  27e0
      5  27e0							;*** The height of the bitmap data. This can be larger than
      6  27e0							;*** the displayed data height, if you are scrolling or animating
      7  27e0							;*** the data...
      8  27e0		       00 30	   bmp_48x2_2_height =	48
      9  27e0
     10  27e0					      if	>. != >[.+(bmp_48x2_2_height)]
     11  2800		       00 00 00 00*	      align	256
     12  2800					      endif
     13  2800		       00		      BYTE.b	$00	; leave this here!
     14  2801
     15  2801
     16  2801							;*** this is the color of each line in the bitmap data
     17  2801				   bmp_48x2_2_colors
     18  2801		       10		      BYTE.b	$10
     19  2802		       10		      BYTE.b	$10
     20  2803		       10		      BYTE.b	$10
     21  2804		       10		      BYTE.b	$10
     22  2805		       10		      BYTE.b	$10
     23  2806		       10		      BYTE.b	$10
     24  2807		       10		      BYTE.b	$10
     25  2808		       10		      BYTE.b	$10
     26  2809		       10		      BYTE.b	$10
     27  280a		       10		      BYTE.b	$10
     28  280b		       10		      BYTE.b	$10
     29  280c		       10		      BYTE.b	$10
     30  280d		       10		      BYTE.b	$10
     31  280e		       10		      BYTE.b	$10
     32  280f		       10		      BYTE.b	$10
     33  2810		       10		      BYTE.b	$10
     34  2811		       10		      BYTE.b	$10
     35  2812		       10		      BYTE.b	$10
     36  2813		       10		      BYTE.b	$10
     37  2814		       0c		      BYTE.b	$0c
     38  2815		       0c		      BYTE.b	$0c
     39  2816		       0c		      BYTE.b	$0c
     40  2817		       0c		      BYTE.b	$0c
     41  2818		       0c		      BYTE.b	$0c
     42  2819		       0c		      BYTE.b	$0c
     43  281a		       0c		      BYTE.b	$0c
     44  281b		       0c		      BYTE.b	$0c
     45  281c		       0c		      BYTE.b	$0c
     46  281d		       0c		      BYTE.b	$0c
     47  281e		       0c		      BYTE.b	$0c
     48  281f		       0c		      BYTE.b	$0c
     49  2820		       0c		      BYTE.b	$0c
     50  2821		       0c		      BYTE.b	$0c
     51  2822		       0c		      BYTE.b	$0c
     52  2823		       0c		      BYTE.b	$0c
     53  2824		       0c		      BYTE.b	$0c
     54  2825		       0c		      BYTE.b	$0c
     55  2826		       0c		      BYTE.b	$0c
     56  2827		       0c		      BYTE.b	$0c
     57  2828		       0c		      BYTE.b	$0c
     58  2829		       0c		      BYTE.b	$0c
     59  282a		       0c		      BYTE.b	$0c
     60  282b		       0c		      BYTE.b	$0c
     61  282c		       0c		      BYTE.b	$0c
     62  282d		       0c		      BYTE.b	$0c
     63  282e		       0c		      BYTE.b	$0c
     64  282f		       0c		      BYTE.b	$0c
     65  2830		       0c		      BYTE.b	$0c
     66  2831
     67  2831				  -	      if	>. != >[.+(bmp_48x2_2_height)]
     68  2831				  -	      align	256
     69  2831					      endif
     70  2831
     71  2831				   bmp_48x2_2_00
     72  2831
     73  2831		       80		      BYTE.b	%10000000
     74  2832		       ee		      BYTE.b	%11101110
     75  2833		       ee		      BYTE.b	%11101110
     76  2834		       80		      BYTE.b	%10000000
     77  2835		       ee		      BYTE.b	%11101110
     78  2836		       ee		      BYTE.b	%11101110
     79  2837		       80		      BYTE.b	%10000000
     80  2838		       ee		      BYTE.b	%11101110
     81  2839		       ee		      BYTE.b	%11101110
     82  283a		       80		      BYTE.b	%10000000
     83  283b		       80		      BYTE.b	%10000000
     84  283c		       ee		      BYTE.b	%11101110
     85  283d		       ee		      BYTE.b	%11101110
     86  283e		       80		      BYTE.b	%10000000
     87  283f		       ee		      BYTE.b	%11101110
     88  2840		       ee		      BYTE.b	%11101110
     89  2841		       ff		      BYTE.b	%11111111
     90  2842		       00		      BYTE.b	%00000000
     91  2843		       00		      BYTE.b	%00000000
     92  2844		       00		      BYTE.b	%00000000
     93  2845		       00		      BYTE.b	%00000000
     94  2846		       00		      BYTE.b	%00000000
     95  2847		       00		      BYTE.b	%00000000
     96  2848		       00		      BYTE.b	%00000000
     97  2849		       00		      BYTE.b	%00000000
     98  284a		       04		      BYTE.b	%00000100
     99  284b		       00		      BYTE.b	%00000000
    100  284c		       00		      BYTE.b	%00000000
    101  284d		       00		      BYTE.b	%00000000
    102  284e		       00		      BYTE.b	%00000000
    103  284f		       00		      BYTE.b	%00000000
    104  2850		       00		      BYTE.b	%00000000
    105  2851		       00		      BYTE.b	%00000000
    106  2852		       00		      BYTE.b	%00000000
    107  2853		       00		      BYTE.b	%00000000
    108  2854		       00		      BYTE.b	%00000000
    109  2855		       00		      BYTE.b	%00000000
    110  2856		       00		      BYTE.b	%00000000
    111  2857		       00		      BYTE.b	%00000000
    112  2858		       00		      BYTE.b	%00000000
    113  2859		       00		      BYTE.b	%00000000
    114  285a		       00		      BYTE.b	%00000000
    115  285b		       00		      BYTE.b	%00000000
    116  285c		       10		      BYTE.b	%00010000
    117  285d		       00		      BYTE.b	%00000000
    118  285e		       00		      BYTE.b	%00000000
    119  285f		       00		      BYTE.b	%00000000
    120  2860		       00		      BYTE.b	%00000000
    121  2861
    122  2861				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    123  2861				  -	      align	256
    124  2861					      endif
    125  2861
    126  2861				   bmp_48x2_2_01
    127  2861
    128  2861		       3a		      BYTE.b	%00111010
    129  2862		       e0		      BYTE.b	%11100000
    130  2863		       e0		      BYTE.b	%11100000
    131  2864		       3a		      BYTE.b	%00111010
    132  2865		       ff		      BYTE.b	%11111111
    133  2866		       e0		      BYTE.b	%11100000
    134  2867		       20		      BYTE.b	%00100000
    135  2868		       e0		      BYTE.b	%11100000
    136  2869		       e0		      BYTE.b	%11100000
    137  286a		       20		      BYTE.b	%00100000
    138  286b		       20		      BYTE.b	%00100000
    139  286c		       e0		      BYTE.b	%11100000
    140  286d		       e0		      BYTE.b	%11100000
    141  286e		       20		      BYTE.b	%00100000
    142  286f		       e0		      BYTE.b	%11100000
    143  2870		       e0		      BYTE.b	%11100000
    144  2871		       e0		      BYTE.b	%11100000
    145  2872		       00		      BYTE.b	%00000000
    146  2873		       00		      BYTE.b	%00000000
    147  2874		       00		      BYTE.b	%00000000
    148  2875		       00		      BYTE.b	%00000000
    149  2876		       00		      BYTE.b	%00000000
    150  2877		       00		      BYTE.b	%00000000
    151  2878		       00		      BYTE.b	%00000000
    152  2879		       00		      BYTE.b	%00000000
    153  287a		       00		      BYTE.b	%00000000
    154  287b		       00		      BYTE.b	%00000000
    155  287c		       00		      BYTE.b	%00000000
    156  287d		       00		      BYTE.b	%00000000
    157  287e		       00		      BYTE.b	%00000000
    158  287f		       00		      BYTE.b	%00000000
    159  2880		       00		      BYTE.b	%00000000
    160  2881		       00		      BYTE.b	%00000000
    161  2882		       00		      BYTE.b	%00000000
    162  2883		       00		      BYTE.b	%00000000
    163  2884		       00		      BYTE.b	%00000000
    164  2885		       00		      BYTE.b	%00000000
    165  2886		       00		      BYTE.b	%00000000
    166  2887		       00		      BYTE.b	%00000000
    167  2888		       08		      BYTE.b	%00001000
    168  2889		       00		      BYTE.b	%00000000
    169  288a		       00		      BYTE.b	%00000000
    170  288b		       00		      BYTE.b	%00000000
    171  288c		       00		      BYTE.b	%00000000
    172  288d		       00		      BYTE.b	%00000000
    173  288e		       00		      BYTE.b	%00000000
    174  288f		       00		      BYTE.b	%00000000
    175  2890		       00		      BYTE.b	%00000000
    176  2891
    177  2891				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    178  2891				  -	      align	256
    179  2891					      endif
    180  2891
    181  2891				   bmp_48x2_2_02
    182  2891
    183  2891		       fb		      BYTE.b	%11111011
    184  2892		       3b		      BYTE.b	%00111011
    185  2893		       3b		      BYTE.b	%00111011
    186  2894		       fb		      BYTE.b	%11111011
    187  2895		       f1		      BYTE.b	%11110001
    188  2896		       11		      BYTE.b	%00010001
    189  2897		       11		      BYTE.b	%00010001
    190  2898		       1b		      BYTE.b	%00011011
    191  2899		       1b		      BYTE.b	%00011011
    192  289a		       1b		      BYTE.b	%00011011
    193  289b		       1b		      BYTE.b	%00011011
    194  289c		       11		      BYTE.b	%00010001
    195  289d		       11		      BYTE.b	%00010001
    196  289e		       11		      BYTE.b	%00010001
    197  289f		       11		      BYTE.b	%00010001
    198  28a0		       1b		      BYTE.b	%00011011
    199  28a1		       1b		      BYTE.b	%00011011
    200  28a2		       1b		      BYTE.b	%00011011
    201  28a3		       1f		      BYTE.b	%00011111
    202  28a4		       00		      BYTE.b	%00000000
    203  28a5		       00		      BYTE.b	%00000000
    204  28a6		       00		      BYTE.b	%00000000
    205  28a7		       00		      BYTE.b	%00000000
    206  28a8		       00		      BYTE.b	%00000000
    207  28a9		       00		      BYTE.b	%00000000
    208  28aa		       00		      BYTE.b	%00000000
    209  28ab		       00		      BYTE.b	%00000000
    210  28ac		       00		      BYTE.b	%00000000
    211  28ad		       80		      BYTE.b	%10000000
    212  28ae		       00		      BYTE.b	%00000000
    213  28af		       00		      BYTE.b	%00000000
    214  28b0		       00		      BYTE.b	%00000000
    215  28b1		       00		      BYTE.b	%00000000
    216  28b2		       01		      BYTE.b	%00000001
    217  28b3		       00		      BYTE.b	%00000000
    218  28b4		       00		      BYTE.b	%00000000
    219  28b5		       00		      BYTE.b	%00000000
    220  28b6		       00		      BYTE.b	%00000000
    221  28b7		       00		      BYTE.b	%00000000
    222  28b8		       00		      BYTE.b	%00000000
    223  28b9		       00		      BYTE.b	%00000000
    224  28ba		       00		      BYTE.b	%00000000
    225  28bb		       00		      BYTE.b	%00000000
    226  28bc		       04		      BYTE.b	%00000100
    227  28bd		       00		      BYTE.b	%00000000
    228  28be		       00		      BYTE.b	%00000000
    229  28bf		       00		      BYTE.b	%00000000
    230  28c0		       00		      BYTE.b	%00000000
    231  28c1
    232  28c1				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    233  28c1				  -	      align	256
    234  28c1					      endif
    235  28c1
    236  28c1				   bmp_48x2_2_03
    237  28c1
    238  28c1		       6d		      BYTE.b	%01101101
    239  28c2		       45		      BYTE.b	%01000101
    240  28c3		       6d		      BYTE.b	%01101101
    241  28c4		       45		      BYTE.b	%01000101
    242  28c5		       6d		      BYTE.b	%01101101
    243  28c6		       45		      BYTE.b	%01000101
    244  28c7		       6d		      BYTE.b	%01101101
    245  28c8		       45		      BYTE.b	%01000101
    246  28c9		       6d		      BYTE.b	%01101101
    247  28ca		       45		      BYTE.b	%01000101
    248  28cb		       6d		      BYTE.b	%01101101
    249  28cc		       45		      BYTE.b	%01000101
    250  28cd		       6d		      BYTE.b	%01101101
    251  28ce		       45		      BYTE.b	%01000101
    252  28cf		       7c		      BYTE.b	%01111100
    253  28d0		       00		      BYTE.b	%00000000
    254  28d1		       00		      BYTE.b	%00000000
    255  28d2		       00		      BYTE.b	%00000000
    256  28d3		       00		      BYTE.b	%00000000
    257  28d4		       00		      BYTE.b	%00000000
    258  28d5		       00		      BYTE.b	%00000000
    259  28d6		       00		      BYTE.b	%00000000
    260  28d7		       00		      BYTE.b	%00000000
    261  28d8		       20		      BYTE.b	%00100000
    262  28d9		       00		      BYTE.b	%00000000
    263  28da		       00		      BYTE.b	%00000000
    264  28db		       00		      BYTE.b	%00000000
    265  28dc		       00		      BYTE.b	%00000000
    266  28dd		       00		      BYTE.b	%00000000
    267  28de		       00		      BYTE.b	%00000000
    268  28df		       00		      BYTE.b	%00000000
    269  28e0		       00		      BYTE.b	%00000000
    270  28e1		       00		      BYTE.b	%00000000
    271  28e2		       00		      BYTE.b	%00000000
    272  28e3		       01		      BYTE.b	%00000001
    273  28e4		       01		      BYTE.b	%00000001
    274  28e5		       01		      BYTE.b	%00000001
    275  28e6		       01		      BYTE.b	%00000001
    276  28e7		       01		      BYTE.b	%00000001
    277  28e8		       01		      BYTE.b	%00000001
    278  28e9		       00		      BYTE.b	%00000000
    279  28ea		       00		      BYTE.b	%00000000
    280  28eb		       00		      BYTE.b	%00000000
    281  28ec		       00		      BYTE.b	%00000000
    282  28ed		       00		      BYTE.b	%00000000
    283  28ee		       00		      BYTE.b	%00000000
    284  28ef		       00		      BYTE.b	%00000000
    285  28f0		       00		      BYTE.b	%00000000
    286  28f1
    287  28f1					      if	>. != >[.+(bmp_48x2_2_height)]
    288  2900		       00 00 00 00*	      align	256
    289  2900					      endif
    290  2900
    291  2900				   bmp_48x2_2_04
    292  2900
    293  2900		       dd		      BYTE.b	%11011101
    294  2901		       05		      BYTE.b	%00000101
    295  2902		       dd		      BYTE.b	%11011101
    296  2903		       05		      BYTE.b	%00000101
    297  2904		       dd		      BYTE.b	%11011101
    298  2905		       05		      BYTE.b	%00000101
    299  2906		       dd		      BYTE.b	%11011101
    300  2907		       05		      BYTE.b	%00000101
    301  2908		       dd		      BYTE.b	%11011101
    302  2909		       05		      BYTE.b	%00000101
    303  290a		       dd		      BYTE.b	%11011101
    304  290b		       05		      BYTE.b	%00000101
    305  290c		       dd		      BYTE.b	%11011101
    306  290d		       fd		      BYTE.b	%11111101
    307  290e		       00		      BYTE.b	%00000000
    308  290f		       00		      BYTE.b	%00000000
    309  2910		       00		      BYTE.b	%00000000
    310  2911		       00		      BYTE.b	%00000000
    311  2912		       00		      BYTE.b	%00000000
    312  2913		       00		      BYTE.b	%00000000
    313  2914		       00		      BYTE.b	%00000000
    314  2915		       00		      BYTE.b	%00000000
    315  2916		       00		      BYTE.b	%00000000
    316  2917		       00		      BYTE.b	%00000000
    317  2918		       01		      BYTE.b	%00000001
    318  2919		       00		      BYTE.b	%00000000
    319  291a		       00		      BYTE.b	%00000000
    320  291b		       00		      BYTE.b	%00000000
    321  291c		       00		      BYTE.b	%00000000
    322  291d		       00		      BYTE.b	%00000000
    323  291e		       00		      BYTE.b	%00000000
    324  291f		       3f		      BYTE.b	%00111111
    325  2920		       ff		      BYTE.b	%11111111
    326  2921		       ff		      BYTE.b	%11111111
    327  2922		       cc		      BYTE.b	%11001100
    328  2923		       80		      BYTE.b	%10000000
    329  2924		       a1		      BYTE.b	%10100001
    330  2925		       ad		      BYTE.b	%10101101
    331  2926		       e1		      BYTE.b	%11100001
    332  2927		       f3		      BYTE.b	%11110011
    333  2928		       f3		      BYTE.b	%11110011
    334  2929		       ff		      BYTE.b	%11111111
    335  292a		       3f		      BYTE.b	%00111111
    336  292b		       00		      BYTE.b	%00000000
    337  292c		       00		      BYTE.b	%00000000
    338  292d		       00		      BYTE.b	%00000000
    339  292e		       00		      BYTE.b	%00000000
    340  292f		       00		      BYTE.b	%00000000
    341  2930
    342  2930				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    343  2930				  -	      align	256
    344  2930					      endif
    345  2930
    346  2930				   bmp_48x2_2_05
    347  2930
    348  2930		       fb		      BYTE.b	%11111011
    349  2931		       4a		      BYTE.b	%01001010
    350  2932		       fb		      BYTE.b	%11111011
    351  2933		       4a		      BYTE.b	%01001010
    352  2934		       fb		      BYTE.b	%11111011
    353  2935		       4a		      BYTE.b	%01001010
    354  2936		       fb		      BYTE.b	%11111011
    355  2937		       78		      BYTE.b	%01111000
    356  2938		       c0		      BYTE.b	%11000000
    357  2939		       40		      BYTE.b	%01000000
    358  293a		       c0		      BYTE.b	%11000000
    359  293b		       40		      BYTE.b	%01000000
    360  293c		       c0		      BYTE.b	%11000000
    361  293d		       c0		      BYTE.b	%11000000
    362  293e		       00		      BYTE.b	%00000000
    363  293f		       00		      BYTE.b	%00000000
    364  2940		       00		      BYTE.b	%00000000
    365  2941		       00		      BYTE.b	%00000000
    366  2942		       00		      BYTE.b	%00000000
    367  2943		       04		      BYTE.b	%00000100
    368  2944		       00		      BYTE.b	%00000000
    369  2945		       00		      BYTE.b	%00000000
    370  2946		       00		      BYTE.b	%00000000
    371  2947		       00		      BYTE.b	%00000000
    372  2948		       00		      BYTE.b	%00000000
    373  2949		       00		      BYTE.b	%00000000
    374  294a		       00		      BYTE.b	%00000000
    375  294b		       00		      BYTE.b	%00000000
    376  294c		       00		      BYTE.b	%00000000
    377  294d		       00		      BYTE.b	%00000000
    378  294e		       00		      BYTE.b	%00000000
    379  294f		       00		      BYTE.b	%00000000
    380  2950		       c0		      BYTE.b	%11000000
    381  2951		       e0		      BYTE.b	%11100000
    382  2952		       e0		      BYTE.b	%11100000
    383  2953		       60		      BYTE.b	%01100000
    384  2954		       60		      BYTE.b	%01100000
    385  2955		       60		      BYTE.b	%01100000
    386  2956		       e0		      BYTE.b	%11100000
    387  2957		       e0		      BYTE.b	%11100000
    388  2958		       e0		      BYTE.b	%11100000
    389  2959		       c0		      BYTE.b	%11000000
    390  295a		       00		      BYTE.b	%00000000
    391  295b		       00		      BYTE.b	%00000000
    392  295c		       00		      BYTE.b	%00000000
    393  295d		       00		      BYTE.b	%00000000
    394  295e		       00		      BYTE.b	%00000000
    395  295f		       00		      BYTE.b	%00000000
    396  2960
------- FILE titlescreen/asm/titlescreen.asm
    153  2960					      endif
    154  2960				  -	      ifconst	mk_48x2_3_on
    155  2960				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2960					      endif
    157  2960
    158  2960				  -	      ifconst	mk_96x2_1_on
    159  2960				  -	      include	"titlescreen/96x2_1_image.asm"
    160  2960					      endif
    161  2960				  -	      ifconst	mk_96x2_2_on
    162  2960				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2960					      endif
    164  2960				  -	      ifconst	mk_96x2_3_on
    165  2960				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2960					      endif
    167  2960
    168  2960					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2960					      include	"titlescreen/score_image.asm"
      1  2960							; feel free to modify the score graphics - just keep each digit 8 high
      2  2960							; if you're looking to want to modify any one font, pick on the 
      3  2960
      4  2960				  -	      ifnconst	NOFONT
      5  2960				  -NOFONT     =	0
      6  2960					      endif
      7  2960				  -	      ifnconst	STOCK
      8  2960				  -STOCK      =	1	;_FONTNAME
      9  2960					      endif
     10  2960				  -	      ifnconst	NEWCENTURY
     11  2960				  -NEWCENTURY =	2	;_FONTNAME
     12  2960					      endif
     13  2960				  -	      ifnconst	WHIMSEY
     14  2960				  -WHIMSEY    =	3	;_FONTNAME
     15  2960					      endif
     16  2960				  -	      ifnconst	ALARMCLOCK
     17  2960				  -ALARMCLOCK =	4	;_FONTNAME
     18  2960					      endif
     19  2960				  -	      ifnconst	HANDWRITTEN
     20  2960				  -HANDWRITTEN =	5	;_FONTNAME
     21  2960					      endif
     22  2960				  -	      ifnconst	INTERRUPTED
     23  2960				  -INTERRUPTED =	6	;_FONTNAME
     24  2960					      endif
     25  2960				  -	      ifnconst	TINY
     26  2960				  -TINY       =	7	;_FONTNAME
     27  2960					      endif
     28  2960				  -	      ifnconst	RETROPUTER
     29  2960				  -RETROPUTER =	8	;_FONTNAME
     30  2960					      endif
     31  2960				  -	      ifnconst	CURVES
     32  2960				  -CURVES     =	9	;_FONTNAME
     33  2960					      endif
     34  2960				  -	      ifnconst	HUSKY
     35  2960				  -HUSKY      =	10	;_FONTNAME
     36  2960					      endif
     37  2960				  -	      ifnconst	SNAKE
     38  2960				  -SNAKE      =	11	;_FONTNAME
     39  2960					      endif
     40  2960				  -	      ifnconst	PLOK
     41  2960				  -PLOK       =	13	;_FONTNAME
     42  2960					      endif
     43  2960
     44  2960				  -	      ifnconst	SYMBOLS
     45  2960				  -SYMBOLS    =	0	;_FONTNAME 
     46  2960					      endif
     47  2960
     48  2960							; ### setup some defaults
     49  2960				  -	      ifnconst	fontstyle
     50  2960				  -fontstyle  =	STOCK
     51  2960					      endif
     52  2960
     53  2960							;fix up the table alignment, if necessary
     54  2960				  -	      if	>. != >[.+128]
     55  2960				  -	      align	256
     56  2960					      endif
     57  2960
     58  2960				   miniscoretable
     59  2960
     60  2960					      if	fontstyle == STOCK
     61  2960
     62  2960							;byte %00000000 ; STOCK
     63  2960
     64  2960		       3c		      .byte.b	%00111100	; STOCK
     65  2961		       66		      .byte.b	%01100110	; STOCK
     66  2962		       66		      .byte.b	%01100110	; STOCK
     67  2963		       66		      .byte.b	%01100110	; STOCK
     68  2964		       66		      .byte.b	%01100110	; STOCK
     69  2965		       66		      .byte.b	%01100110	; STOCK
     70  2966		       66		      .byte.b	%01100110	; STOCK
     71  2967		       3c		      .byte.b	%00111100	; STOCK
     72  2968
     73  2968							;byte %00000000 ; STOCK
     74  2968
     75  2968		       7e		      .byte.b	%01111110	; STOCK
     76  2969		       18		      .byte.b	%00011000	; STOCK
     77  296a		       18		      .byte.b	%00011000	; STOCK
     78  296b		       18		      .byte.b	%00011000	; STOCK
     79  296c		       18		      .byte.b	%00011000	; STOCK
     80  296d		       38		      .byte.b	%00111000	; STOCK
     81  296e		       18		      .byte.b	%00011000	; STOCK
     82  296f		       08		      .byte.b	%00001000	; STOCK
     83  2970
     84  2970							;byte %00000000 ; STOCK
     85  2970
     86  2970		       7e		      .byte.b	%01111110	; STOCK
     87  2971		       60		      .byte.b	%01100000	; STOCK
     88  2972		       60		      .byte.b	%01100000	; STOCK
     89  2973		       3c		      .byte.b	%00111100	; STOCK
     90  2974		       06		      .byte.b	%00000110	; STOCK
     91  2975		       06		      .byte.b	%00000110	; STOCK
     92  2976		       46		      .byte.b	%01000110	; STOCK
     93  2977		       3c		      .byte.b	%00111100	; STOCK
     94  2978
     95  2978							;byte %00000000 ; STOCK
     96  2978
     97  2978		       3c		      .byte.b	%00111100	; STOCK
     98  2979		       46		      .byte.b	%01000110	; STOCK
     99  297a		       06		      .byte.b	%00000110	; STOCK
    100  297b		       06		      .byte.b	%00000110	; STOCK
    101  297c		       1c		      .byte.b	%00011100	; STOCK
    102  297d		       06		      .byte.b	%00000110	; STOCK
    103  297e		       46		      .byte.b	%01000110	; STOCK
    104  297f		       3c		      .byte.b	%00111100	; STOCK
    105  2980
    106  2980							;byte %00000000 ; STOCK
    107  2980
    108  2980		       0c		      .byte.b	%00001100	; STOCK
    109  2981		       0c		      .byte.b	%00001100	; STOCK
    110  2982		       7e		      .byte.b	%01111110	; STOCK
    111  2983		       4c		      .byte.b	%01001100	; STOCK
    112  2984		       4c		      .byte.b	%01001100	; STOCK
    113  2985		       2c		      .byte.b	%00101100	; STOCK
    114  2986		       1c		      .byte.b	%00011100	; STOCK
    115  2987		       0c		      .byte.b	%00001100	; STOCK
    116  2988
    117  2988							;byte %00000000 ; STOCK
    118  2988
    119  2988		       3c		      .byte.b	%00111100	; STOCK
    120  2989		       46		      .byte.b	%01000110	; STOCK
    121  298a		       06		      .byte.b	%00000110	; STOCK
    122  298b		       06		      .byte.b	%00000110	; STOCK
    123  298c		       3c		      .byte.b	%00111100	; STOCK
    124  298d		       60		      .byte.b	%01100000	; STOCK
    125  298e		       60		      .byte.b	%01100000	; STOCK
    126  298f		       7e		      .byte.b	%01111110	; STOCK
    127  2990
    128  2990							;byte %00000000 ; STOCK
    129  2990
    130  2990		       3c		      .byte.b	%00111100	; STOCK
    131  2991		       66		      .byte.b	%01100110	; STOCK
    132  2992		       66		      .byte.b	%01100110	; STOCK
    133  2993		       66		      .byte.b	%01100110	; STOCK
    134  2994		       7c		      .byte.b	%01111100	; STOCK
    135  2995		       60		      .byte.b	%01100000	; STOCK
    136  2996		       62		      .byte.b	%01100010	; STOCK
    137  2997		       3c		      .byte.b	%00111100	; STOCK
    138  2998
    139  2998							;byte %00000000 ; STOCK
    140  2998
    141  2998		       30		      .byte.b	%00110000	; STOCK
    142  2999		       30		      .byte.b	%00110000	; STOCK
    143  299a		       30		      .byte.b	%00110000	; STOCK
    144  299b		       18		      .byte.b	%00011000	; STOCK
    145  299c		       0c		      .byte.b	%00001100	; STOCK
    146  299d		       06		      .byte.b	%00000110	; STOCK
    147  299e		       42		      .byte.b	%01000010	; STOCK
    148  299f		       3e		      .byte.b	%00111110	; STOCK
    149  29a0
    150  29a0							;byte %00000000 ; STOCK
    151  29a0
    152  29a0		       3c		      .byte.b	%00111100	; STOCK
    153  29a1		       66		      .byte.b	%01100110	; STOCK
    154  29a2		       66		      .byte.b	%01100110	; STOCK
    155  29a3		       66		      .byte.b	%01100110	; STOCK
    156  29a4		       3c		      .byte.b	%00111100	; STOCK
    157  29a5		       66		      .byte.b	%01100110	; STOCK
    158  29a6		       66		      .byte.b	%01100110	; STOCK
    159  29a7		       3c		      .byte.b	%00111100	; STOCK
    160  29a8
    161  29a8							;byte %00000000 ; STOCK
    162  29a8
    163  29a8		       3c		      .byte.b	%00111100	; STOCK
    164  29a9		       46		      .byte.b	%01000110	; STOCK
    165  29aa		       06		      .byte.b	%00000110	; STOCK
    166  29ab		       3e		      .byte.b	%00111110	; STOCK
    167  29ac		       66		      .byte.b	%01100110	; STOCK
    168  29ad		       66		      .byte.b	%01100110	; STOCK
    169  29ae		       66		      .byte.b	%01100110	; STOCK
    170  29af		       3c		      .byte.b	%00111100	; STOCK
    171  29b0
    172  29b0							;byte %00000000 ; STOCK
    173  29b0
    174  29b0				  -	      ifconst	fontcharsHEX
    175  29b0				  -
    176  29b0				  -	      .byte	%01100110	; STOCK
    177  29b0				  -	      .byte	%01100110	; STOCK
    178  29b0				  -	      .byte	%01100110	; STOCK
    179  29b0				  -	      .byte	%01111110	; STOCK
    180  29b0				  -	      .byte	%01100110	; STOCK
    181  29b0				  -	      .byte	%01100110	; STOCK
    182  29b0				  -	      .byte	%01100110	; STOCK
    183  29b0				  -	      .byte	%00111100	; STOCK
    184  29b0				  -
    185  29b0				  -			;byte %00000000 ; STOCK
    186  29b0				  -
    187  29b0				  -	      .byte	%01111100	; STOCK
    188  29b0				  -	      .byte	%01100110	; STOCK
    189  29b0				  -	      .byte	%01100110	; STOCK
    190  29b0				  -	      .byte	%01100110	; STOCK
    191  29b0				  -	      .byte	%01111100	; STOCK
    192  29b0				  -	      .byte	%01100110	; STOCK
    193  29b0				  -	      .byte	%01100110	; STOCK
    194  29b0				  -	      .byte	%01111100	; STOCK
    195  29b0				  -
    196  29b0				  -			;byte %00000000 ; STOCK
    197  29b0				  -
    198  29b0				  -	      .byte	%00111100	; STOCK
    199  29b0				  -	      .byte	%01100110	; STOCK
    200  29b0				  -	      .byte	%01100000	; STOCK
    201  29b0				  -	      .byte	%01100000	; STOCK
    202  29b0				  -	      .byte	%01100000	; STOCK
    203  29b0				  -	      .byte	%01100000	; STOCK
    204  29b0				  -	      .byte	%01100110	; STOCK
    205  29b0				  -	      .byte	%00111100	; STOCK
    206  29b0				  -
    207  29b0				  -			;byte %00000000 ; STOCK
    208  29b0				  -
    209  29b0				  -	      .byte	%01111100	; STOCK
    210  29b0				  -	      .byte	%01100110	; STOCK
    211  29b0				  -	      .byte	%01100110	; STOCK
    212  29b0				  -	      .byte	%01100110	; STOCK
    213  29b0				  -	      .byte	%01100110	; STOCK
    214  29b0				  -	      .byte	%01100110	; STOCK
    215  29b0				  -	      .byte	%01100110	; STOCK
    216  29b0				  -	      .byte	%01111100	; STOCK
    217  29b0				  -
    218  29b0				  -			;byte %00000000 ; STOCK
    219  29b0				  -
    220  29b0				  -	      .byte	%01111110	; STOCK
    221  29b0				  -	      .byte	%01100000	; STOCK
    222  29b0				  -	      .byte	%01100000	; STOCK
    223  29b0				  -	      .byte	%01100000	; STOCK
    224  29b0				  -	      .byte	%01111100	; STOCK
    225  29b0				  -	      .byte	%01100000	; STOCK
    226  29b0				  -	      .byte	%01100000	; STOCK
    227  29b0				  -	      .byte	%01111110	; STOCK
    228  29b0				  -
    229  29b0				  -			;byte %00000000 ; STOCK
    230  29b0				  -
    231  29b0				  -	      .byte	%01100000	; STOCK
    232  29b0				  -	      .byte	%01100000	; STOCK
    233  29b0				  -	      .byte	%01100000	; STOCK
    234  29b0				  -	      .byte	%01100000	; STOCK
    235  29b0				  -	      .byte	%01111100	; STOCK
    236  29b0				  -	      .byte	%01100000	; STOCK
    237  29b0				  -	      .byte	%01100000	; STOCK
    238  29b0				  -	      .byte	%01111110	; STOCK
    239  29b0				  -
    240  29b0				  -			;byte %00000000 ; STOCK
    241  29b0				  -			;byte %00000000 ; STOCK
    242  29b0				  -			;byte %00000000 ; STOCK
    243  29b0				  -			;byte %00000000 ; STOCK
    244  29b0					      endif		; fontcharsHEX 
    245  29b0					      endif		; STOCK
    246  29b0
    247  29b0				  -	      if	fontstyle == NEWCENTURY
    248  29b0				  -			;byte %00000000 ; NEWCENTURY
    249  29b0				  -
    250  29b0				  -	      .byte	%00111100	; NEWCENTURY
    251  29b0				  -	      .byte	%01000010	; NEWCENTURY
    252  29b0				  -	      .byte	%01000010	; NEWCENTURY
    253  29b0				  -	      .byte	%01000010	; NEWCENTURY
    254  29b0				  -	      .byte	%00100100	; NEWCENTURY
    255  29b0				  -	      .byte	%00100100	; NEWCENTURY
    256  29b0				  -	      .byte	%00100100	; NEWCENTURY
    257  29b0				  -	      .byte	%00011000	; NEWCENTURY
    258  29b0				  -
    259  29b0				  -			;byte %00000000 ; NEWCENTURY
    260  29b0				  -
    261  29b0				  -	      .byte	%00001000	; NEWCENTURY
    262  29b0				  -	      .byte	%00001000	; NEWCENTURY
    263  29b0				  -	      .byte	%00001000	; NEWCENTURY
    264  29b0				  -	      .byte	%00001000	; NEWCENTURY
    265  29b0				  -	      .byte	%00001000	; NEWCENTURY
    266  29b0				  -	      .byte	%00001000	; NEWCENTURY
    267  29b0				  -	      .byte	%00001000	; NEWCENTURY
    268  29b0				  -	      .byte	%00001000	; NEWCENTURY
    269  29b0				  -
    270  29b0				  -			;byte %00000000 ; NEWCENTURY
    271  29b0				  -
    272  29b0				  -	      .byte	%01111110	; NEWCENTURY
    273  29b0				  -	      .byte	%01000000	; NEWCENTURY
    274  29b0				  -	      .byte	%01000000	; NEWCENTURY
    275  29b0				  -	      .byte	%00100000	; NEWCENTURY
    276  29b0				  -	      .byte	%00011100	; NEWCENTURY
    277  29b0				  -	      .byte	%00000010	; NEWCENTURY
    278  29b0				  -	      .byte	%00000010	; NEWCENTURY
    279  29b0				  -	      .byte	%00011100	; NEWCENTURY
    280  29b0				  -
    281  29b0				  -			;byte %00000000 ; NEWCENTURY
    282  29b0				  -
    283  29b0				  -	      .byte	%01111100	; NEWCENTURY
    284  29b0				  -	      .byte	%00000010	; NEWCENTURY
    285  29b0				  -	      .byte	%00000010	; NEWCENTURY
    286  29b0				  -	      .byte	%00000010	; NEWCENTURY
    287  29b0				  -	      .byte	%00111100	; NEWCENTURY
    288  29b0				  -	      .byte	%00000010	; NEWCENTURY
    289  29b0				  -	      .byte	%00000010	; NEWCENTURY
    290  29b0				  -	      .byte	%00011100	; NEWCENTURY
    291  29b0				  -
    292  29b0				  -			;byte %00000000 ; NEWCENTURY
    293  29b0				  -
    294  29b0				  -	      .byte	%00000010	; NEWCENTURY
    295  29b0				  -	      .byte	%00000010	; NEWCENTURY
    296  29b0				  -	      .byte	%00000010	; NEWCENTURY
    297  29b0				  -	      .byte	%00111110	; NEWCENTURY
    298  29b0				  -	      .byte	%00100010	; NEWCENTURY
    299  29b0				  -	      .byte	%00100010	; NEWCENTURY
    300  29b0				  -	      .byte	%00010010	; NEWCENTURY
    301  29b0				  -	      .byte	%00010010	; NEWCENTURY
    302  29b0				  -
    303  29b0				  -			;byte %00000000 ; NEWCENTURY
    304  29b0				  -
    305  29b0				  -	      .byte	%01111100	; NEWCENTURY
    306  29b0				  -	      .byte	%00000010	; NEWCENTURY
    307  29b0				  -	      .byte	%00000010	; NEWCENTURY
    308  29b0				  -	      .byte	%00000010	; NEWCENTURY
    309  29b0				  -	      .byte	%01111100	; NEWCENTURY
    310  29b0				  -	      .byte	%01000000	; NEWCENTURY
    311  29b0				  -	      .byte	%01000000	; NEWCENTURY
    312  29b0				  -	      .byte	%01111000	; NEWCENTURY
    313  29b0				  -
    314  29b0				  -			;byte %00000000 ; NEWCENTURY
    315  29b0				  -
    316  29b0				  -	      .byte	%00111100	; NEWCENTURY
    317  29b0				  -	      .byte	%01000010	; NEWCENTURY
    318  29b0				  -	      .byte	%01000010	; NEWCENTURY
    319  29b0				  -	      .byte	%01000010	; NEWCENTURY
    320  29b0				  -	      .byte	%01111100	; NEWCENTURY
    321  29b0				  -	      .byte	%01000000	; NEWCENTURY
    322  29b0				  -	      .byte	%01000000	; NEWCENTURY
    323  29b0				  -	      .byte	%00110000	; NEWCENTURY
    324  29b0				  -
    325  29b0				  -			;byte %00000000 ; NEWCENTURY
    326  29b0				  -
    327  29b0				  -	      .byte	%00010000	; NEWCENTURY
    328  29b0				  -	      .byte	%00010000	; NEWCENTURY
    329  29b0				  -	      .byte	%00001000	; NEWCENTURY
    330  29b0				  -	      .byte	%00001000	; NEWCENTURY
    331  29b0				  -	      .byte	%00000100	; NEWCENTURY
    332  29b0				  -	      .byte	%00000100	; NEWCENTURY
    333  29b0				  -	      .byte	%00000010	; NEWCENTURY
    334  29b0				  -	      .byte	%00011110	; NEWCENTURY
    335  29b0				  -
    336  29b0				  -			;byte %00000000 ; NEWCENTURY
    337  29b0				  -
    338  29b0				  -	      .byte	%00111100	; NEWCENTURY
    339  29b0				  -	      .byte	%01000010	; NEWCENTURY
    340  29b0				  -	      .byte	%01000010	; NEWCENTURY
    341  29b0				  -	      .byte	%01000010	; NEWCENTURY
    342  29b0				  -	      .byte	%00111100	; NEWCENTURY
    343  29b0				  -	      .byte	%00100100	; NEWCENTURY
    344  29b0				  -	      .byte	%00100100	; NEWCENTURY
    345  29b0				  -	      .byte	%00011000	; NEWCENTURY
    346  29b0				  -
    347  29b0				  -			;byte %00000000 ; NEWCENTURY
    348  29b0				  -
    349  29b0				  -	      .byte	%00111100	; NEWCENTURY
    350  29b0				  -	      .byte	%00000010	; NEWCENTURY
    351  29b0				  -	      .byte	%00000010	; NEWCENTURY
    352  29b0				  -	      .byte	%00000010	; NEWCENTURY
    353  29b0				  -	      .byte	%00001110	; NEWCENTURY
    354  29b0				  -	      .byte	%00010010	; NEWCENTURY
    355  29b0				  -	      .byte	%00010010	; NEWCENTURY
    356  29b0				  -	      .byte	%00001100	; NEWCENTURY
    357  29b0				  -
    358  29b0				  -	      ifconst	fontcharsHEX
    359  29b0				  -
    360  29b0				  -			;byte %00000000 ; NEWCENTURY
    361  29b0				  -
    362  29b0				  -	      .byte	%01000010	; NEWCENTURY
    363  29b0				  -	      .byte	%01000010	; NEWCENTURY
    364  29b0				  -	      .byte	%01000010	; NEWCENTURY
    365  29b0				  -	      .byte	%01000010	; NEWCENTURY
    366  29b0				  -	      .byte	%01111100	; NEWCENTURY
    367  29b0				  -	      .byte	%01000100	; NEWCENTURY
    368  29b0				  -	      .byte	%01000100	; NEWCENTURY
    369  29b0				  -	      .byte	%00111000	; NEWCENTURY
    370  29b0				  -
    371  29b0				  -			;byte %00000000 ; NEWCENTURY
    372  29b0				  -
    373  29b0				  -	      .byte	%01111100	; NEWCENTURY
    374  29b0				  -	      .byte	%01000010	; NEWCENTURY
    375  29b0				  -	      .byte	%01000010	; NEWCENTURY
    376  29b0				  -	      .byte	%01000010	; NEWCENTURY
    377  29b0				  -	      .byte	%01111100	; NEWCENTURY
    378  29b0				  -	      .byte	%01000100	; NEWCENTURY
    379  29b0				  -	      .byte	%01000100	; NEWCENTURY
    380  29b0				  -	      .byte	%01111000	; NEWCENTURY
    381  29b0				  -
    382  29b0				  -			;byte %00000000 ; NEWCENTURY
    383  29b0				  -
    384  29b0				  -	      .byte	%00111100	; NEWCENTURY
    385  29b0				  -	      .byte	%01000010	; NEWCENTURY
    386  29b0				  -	      .byte	%01000000	; NEWCENTURY
    387  29b0				  -	      .byte	%01000000	; NEWCENTURY
    388  29b0				  -	      .byte	%01000000	; NEWCENTURY
    389  29b0				  -	      .byte	%01000000	; NEWCENTURY
    390  29b0				  -	      .byte	%01000000	; NEWCENTURY
    391  29b0				  -	      .byte	%00111000	; NEWCENTURY
    392  29b0				  -
    393  29b0				  -			;byte %00000000 ; NEWCENTURY
    394  29b0				  -
    395  29b0				  -	      .byte	%01111100	; NEWCENTURY
    396  29b0				  -	      .byte	%01000010	; NEWCENTURY
    397  29b0				  -	      .byte	%01000010	; NEWCENTURY
    398  29b0				  -	      .byte	%01000010	; NEWCENTURY
    399  29b0				  -	      .byte	%01000010	; NEWCENTURY
    400  29b0				  -	      .byte	%01000100	; NEWCENTURY
    401  29b0				  -	      .byte	%01000100	; NEWCENTURY
    402  29b0				  -	      .byte	%01111000	; NEWCENTURY
    403  29b0				  -
    404  29b0				  -			;byte %00000000 ; NEWCENTURY
    405  29b0				  -
    406  29b0				  -	      .byte	%01111110	; NEWCENTURY
    407  29b0				  -	      .byte	%01000000	; NEWCENTURY
    408  29b0				  -	      .byte	%01000000	; NEWCENTURY
    409  29b0				  -	      .byte	%01000000	; NEWCENTURY
    410  29b0				  -	      .byte	%01111100	; NEWCENTURY
    411  29b0				  -	      .byte	%01000000	; NEWCENTURY
    412  29b0				  -	      .byte	%01000000	; NEWCENTURY
    413  29b0				  -	      .byte	%01111000	; NEWCENTURY
    414  29b0				  -
    415  29b0				  -			;byte %00000000 ; NEWCENTURY
    416  29b0				  -
    417  29b0				  -	      .byte	%01000000	; NEWCENTURY
    418  29b0				  -	      .byte	%01000000	; NEWCENTURY
    419  29b0				  -	      .byte	%01000000	; NEWCENTURY
    420  29b0				  -	      .byte	%01000000	; NEWCENTURY
    421  29b0				  -	      .byte	%01111100	; NEWCENTURY
    422  29b0				  -	      .byte	%01000000	; NEWCENTURY
    423  29b0				  -	      .byte	%01000000	; NEWCENTURY
    424  29b0				  -	      .byte	%01111000	; NEWCENTURY
    425  29b0				  -
    426  29b0				  -			;byte %00000000 ; NEWCENTURY
    427  29b0				  -			;byte %00000000 ; NEWCENTURY
    428  29b0				  -			;byte %00000000 ; NEWCENTURY
    429  29b0				  -			;byte %00000000 ; NEWCENTURY
    430  29b0				  -
    431  29b0				  -	      endif		; fontcharsHEX 
    432  29b0					      endif		; NEWCENTURY
    433  29b0
    434  29b0				  -	      if	fontstyle == WHIMSEY
    435  29b0				  -			;byte %00000000 ; WHIMSEY
    436  29b0				  -
    437  29b0				  -	      .byte	%00111100	; WHIMSEY
    438  29b0				  -	      .byte	%01111110	; WHIMSEY
    439  29b0				  -	      .byte	%01111110	; WHIMSEY
    440  29b0				  -	      .byte	%01111110	; WHIMSEY
    441  29b0				  -	      .byte	%01110110	; WHIMSEY
    442  29b0				  -	      .byte	%01110110	; WHIMSEY
    443  29b0				  -	      .byte	%01110110	; WHIMSEY
    444  29b0				  -	      .byte	%00111100	; WHIMSEY
    445  29b0				  -
    446  29b0				  -			;byte %00000000 ; WHIMSEY
    447  29b0				  -
    448  29b0				  -	      .byte	%01111110	; WHIMSEY
    449  29b0				  -	      .byte	%01111110	; WHIMSEY
    450  29b0				  -	      .byte	%01111110	; WHIMSEY
    451  29b0				  -	      .byte	%00011000	; WHIMSEY
    452  29b0				  -	      .byte	%00011000	; WHIMSEY
    453  29b0				  -	      .byte	%00011000	; WHIMSEY
    454  29b0				  -	      .byte	%01111000	; WHIMSEY
    455  29b0				  -	      .byte	%00011000	; WHIMSEY
    456  29b0				  -
    457  29b0				  -			;byte %00000000 ; WHIMSEY
    458  29b0				  -
    459  29b0				  -	      .byte	%01111110	; WHIMSEY
    460  29b0				  -	      .byte	%01111110	; WHIMSEY
    461  29b0				  -	      .byte	%01111110	; WHIMSEY
    462  29b0				  -	      .byte	%01111000	; WHIMSEY
    463  29b0				  -	      .byte	%00111100	; WHIMSEY
    464  29b0				  -	      .byte	%00001110	; WHIMSEY
    465  29b0				  -	      .byte	%01100110	; WHIMSEY
    466  29b0				  -	      .byte	%00111100	; WHIMSEY
    467  29b0				  -
    468  29b0				  -			;byte %00000000 ; WHIMSEY
    469  29b0				  -
    470  29b0				  -	      .byte	%00111100	; WHIMSEY
    471  29b0				  -	      .byte	%01111110	; WHIMSEY
    472  29b0				  -	      .byte	%01111110	; WHIMSEY
    473  29b0				  -	      .byte	%01101110	; WHIMSEY
    474  29b0				  -	      .byte	%00001110	; WHIMSEY
    475  29b0				  -	      .byte	%00111100	; WHIMSEY
    476  29b0				  -	      .byte	%00011100	; WHIMSEY
    477  29b0				  -	      .byte	%01111110	; WHIMSEY
    478  29b0				  -
    479  29b0				  -			;byte %00000000 ; WHIMSEY
    480  29b0				  -
    481  29b0				  -	      .byte	%00011100	; WHIMSEY
    482  29b0				  -	      .byte	%00011100	; WHIMSEY
    483  29b0				  -	      .byte	%01111110	; WHIMSEY
    484  29b0				  -	      .byte	%01011100	; WHIMSEY
    485  29b0				  -	      .byte	%01011100	; WHIMSEY
    486  29b0				  -	      .byte	%00011100	; WHIMSEY
    487  29b0				  -	      .byte	%00011100	; WHIMSEY
    488  29b0				  -	      .byte	%00011100	; WHIMSEY
    489  29b0				  -
    490  29b0				  -			;byte %00000000 ; WHIMSEY
    491  29b0				  -
    492  29b0				  -	      .byte	%00111100	; WHIMSEY
    493  29b0				  -	      .byte	%01111110	; WHIMSEY
    494  29b0				  -	      .byte	%01111110	; WHIMSEY
    495  29b0				  -	      .byte	%01101110	; WHIMSEY
    496  29b0				  -	      .byte	%00001110	; WHIMSEY
    497  29b0				  -	      .byte	%01111100	; WHIMSEY
    498  29b0				  -	      .byte	%01110000	; WHIMSEY
    499  29b0				  -	      .byte	%01111110	; WHIMSEY
    500  29b0				  -
    501  29b0				  -			;byte %00000000 ; WHIMSEY
    502  29b0				  -
    503  29b0				  -	      .byte	%00111100	; WHIMSEY
    504  29b0				  -	      .byte	%01111110	; WHIMSEY
    505  29b0				  -	      .byte	%01111110	; WHIMSEY
    506  29b0				  -	      .byte	%01110110	; WHIMSEY
    507  29b0				  -	      .byte	%01110110	; WHIMSEY
    508  29b0				  -	      .byte	%01111100	; WHIMSEY
    509  29b0				  -	      .byte	%01110000	; WHIMSEY
    510  29b0				  -	      .byte	%00111110	; WHIMSEY
    511  29b0				  -
    512  29b0				  -			;byte %00000000 ; WHIMSEY
    513  29b0				  -
    514  29b0				  -	      .byte	%01111000	; WHIMSEY
    515  29b0				  -	      .byte	%01111000	; WHIMSEY
    516  29b0				  -	      .byte	%01111000	; WHIMSEY
    517  29b0				  -	      .byte	%00111100	; WHIMSEY
    518  29b0				  -	      .byte	%00011100	; WHIMSEY
    519  29b0				  -	      .byte	%00001110	; WHIMSEY
    520  29b0				  -	      .byte	%00001110	; WHIMSEY
    521  29b0				  -	      .byte	%01111110	; WHIMSEY
    522  29b0				  -
    523  29b0				  -			;byte %00000000 ; WHIMSEY
    524  29b0				  -
    525  29b0				  -	      .byte	%00111100	; WHIMSEY
    526  29b0				  -	      .byte	%01111110	; WHIMSEY
    527  29b0				  -	      .byte	%01111110	; WHIMSEY
    528  29b0				  -	      .byte	%01110110	; WHIMSEY
    529  29b0				  -	      .byte	%01110110	; WHIMSEY
    530  29b0				  -	      .byte	%00111100	; WHIMSEY
    531  29b0				  -	      .byte	%01110110	; WHIMSEY
    532  29b0				  -	      .byte	%00111100	; WHIMSEY
    533  29b0				  -
    534  29b0				  -			;byte %00000000 ; WHIMSEY
    535  29b0				  -
    536  29b0				  -	      .byte	%00111100	; WHIMSEY
    537  29b0				  -	      .byte	%01111110	; WHIMSEY
    538  29b0				  -	      .byte	%01111110	; WHIMSEY
    539  29b0				  -	      .byte	%01110110	; WHIMSEY
    540  29b0				  -	      .byte	%00000110	; WHIMSEY
    541  29b0				  -	      .byte	%00111110	; WHIMSEY
    542  29b0				  -	      .byte	%01110110	; WHIMSEY
    543  29b0				  -	      .byte	%00111100	; WHIMSEY
    544  29b0				  -
    545  29b0				  -	      ifconst	fontcharsHEX
    546  29b0				  -
    547  29b0				  -			;byte %00000000 ; WHIMSEY
    548  29b0				  -
    549  29b0				  -	      .byte	%01110110	; WHIMSEY
    550  29b0				  -	      .byte	%01110110	; WHIMSEY
    551  29b0				  -	      .byte	%01111110	; WHIMSEY
    552  29b0				  -	      .byte	%01111110	; WHIMSEY
    553  29b0				  -	      .byte	%01111110	; WHIMSEY
    554  29b0				  -	      .byte	%01110110	; WHIMSEY
    555  29b0				  -	      .byte	%01110110	; WHIMSEY
    556  29b0				  -	      .byte	%00111100	; WHIMSEY
    557  29b0				  -
    558  29b0				  -			;byte %00000000 ; WHIMSEY
    559  29b0				  -
    560  29b0				  -	      .byte	%01111100	; WHIMSEY
    561  29b0				  -	      .byte	%01111110	; WHIMSEY
    562  29b0				  -	      .byte	%01111110	; WHIMSEY
    563  29b0				  -	      .byte	%01110110	; WHIMSEY
    564  29b0				  -	      .byte	%01110110	; WHIMSEY
    565  29b0				  -	      .byte	%01111100	; WHIMSEY
    566  29b0				  -	      .byte	%01110110	; WHIMSEY
    567  29b0				  -	      .byte	%01111100	; WHIMSEY
    568  29b0				  -
    569  29b0				  -			;byte %00000000 ; WHIMSEY
    570  29b0				  -
    571  29b0				  -	      .byte	%00111100	; WHIMSEY
    572  29b0				  -	      .byte	%01111110	; WHIMSEY
    573  29b0				  -	      .byte	%01111110	; WHIMSEY
    574  29b0				  -	      .byte	%01110110	; WHIMSEY
    575  29b0				  -	      .byte	%01110000	; WHIMSEY
    576  29b0				  -	      .byte	%01110000	; WHIMSEY
    577  29b0				  -	      .byte	%01110110	; WHIMSEY
    578  29b0				  -	      .byte	%00111100	; WHIMSEY
    579  29b0				  -
    580  29b0				  -			;byte %00000000 ; WHIMSEY
    581  29b0				  -
    582  29b0				  -	      .byte	%01111100	; WHIMSEY
    583  29b0				  -	      .byte	%01111110	; WHIMSEY
    584  29b0				  -	      .byte	%01111110	; WHIMSEY
    585  29b0				  -	      .byte	%01111110	; WHIMSEY
    586  29b0				  -	      .byte	%01110110	; WHIMSEY
    587  29b0				  -	      .byte	%01110110	; WHIMSEY
    588  29b0				  -	      .byte	%01110110	; WHIMSEY
    589  29b0				  -	      .byte	%01111100	; WHIMSEY
    590  29b0				  -
    591  29b0				  -			;byte %00000000 ; WHIMSEY
    592  29b0				  -
    593  29b0				  -	      .byte	%01111110	; WHIMSEY
    594  29b0				  -	      .byte	%01111110	; WHIMSEY
    595  29b0				  -	      .byte	%01111110	; WHIMSEY
    596  29b0				  -	      .byte	%01110000	; WHIMSEY
    597  29b0				  -	      .byte	%01110000	; WHIMSEY
    598  29b0				  -	      .byte	%01111100	; WHIMSEY
    599  29b0				  -	      .byte	%01110000	; WHIMSEY
    600  29b0				  -	      .byte	%01111100	; WHIMSEY
    601  29b0				  -
    602  29b0				  -			;byte %00000000 ; WHIMSEY
    603  29b0				  -
    604  29b0				  -	      .byte	%01110000	; WHIMSEY
    605  29b0				  -	      .byte	%01110000	; WHIMSEY
    606  29b0				  -	      .byte	%01110000	; WHIMSEY
    607  29b0				  -	      .byte	%01110000	; WHIMSEY
    608  29b0				  -	      .byte	%01110000	; WHIMSEY
    609  29b0				  -	      .byte	%01111100	; WHIMSEY
    610  29b0				  -	      .byte	%01110000	; WHIMSEY
    611  29b0				  -	      .byte	%01111100	; WHIMSEY
    612  29b0				  -
    613  29b0				  -			;byte %00000000 ; WHIMSEY
    614  29b0				  -			;byte %00000000 ; WHIMSEY
    615  29b0				  -			;byte %00000000 ; WHIMSEY
    616  29b0				  -			;byte %00000000 ; WHIMSEY
    617  29b0				  -
    618  29b0				  -	      endif		; fontcharsHEX
    619  29b0					      endif		; WHIMSEY
    620  29b0
    621  29b0				  -	      if	fontstyle == ALARMCLOCK
    622  29b0				  -
    623  29b0				  -			;byte %00000000 ; ALARMCLOCK
    624  29b0				  -
    625  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    626  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    627  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    628  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    629  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    630  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    631  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    632  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    633  29b0				  -
    634  29b0				  -			;byte %00000000 ; ALARMCLOCK
    635  29b0				  -
    636  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    637  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    638  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    639  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    640  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    641  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    642  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    643  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    644  29b0				  -
    645  29b0				  -			;byte %00000000 ; ALARMCLOCK
    646  29b0				  -
    647  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    648  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    649  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    650  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    651  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    652  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    653  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    654  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    655  29b0				  -
    656  29b0				  -			;byte %00000000 ; ALARMCLOCK
    657  29b0				  -
    658  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    659  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    660  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    661  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    662  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    663  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    664  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    665  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    666  29b0				  -
    667  29b0				  -			;byte %00000000 ; ALARMCLOCK
    668  29b0				  -
    669  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    670  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    671  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    672  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    673  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    674  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    675  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    676  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    677  29b0				  -
    678  29b0				  -			;byte %00000000 ; ALARMCLOCK
    679  29b0				  -
    680  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    681  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    682  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    683  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    684  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    685  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    686  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    687  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    688  29b0				  -
    689  29b0				  -			;byte %00000000 ; ALARMCLOCK
    690  29b0				  -
    691  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    692  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    693  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    694  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    695  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    696  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    697  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    698  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    699  29b0				  -
    700  29b0				  -			;byte %00000000 ; ALARMCLOCK
    701  29b0				  -
    702  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    703  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    704  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    705  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    706  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    707  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    708  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    709  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    710  29b0				  -
    711  29b0				  -			;byte %00000000 ; ALARMCLOCK
    712  29b0				  -
    713  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    714  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    715  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    716  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    717  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    718  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    719  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    720  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    721  29b0				  -
    722  29b0				  -			;byte %00000000 ; ALARMCLOCK
    723  29b0				  -
    724  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    725  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    726  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    727  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    728  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    729  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    730  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    731  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    732  29b0				  -
    733  29b0				  -
    734  29b0				  -	      ifconst	fontcharsHEX
    735  29b0				  -			;byte %00000000 ; ALARMCLOCK
    736  29b0				  -
    737  29b0				  -
    738  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    739  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    740  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    741  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    742  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    743  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    744  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    745  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    746  29b0				  -
    747  29b0				  -			;byte %00000000 ; ALARMCLOCK
    748  29b0				  -
    749  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    750  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    751  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    752  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    753  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    754  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    755  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    756  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    757  29b0				  -
    758  29b0				  -			;byte %00000000 ; ALARMCLOCK
    759  29b0				  -
    760  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    761  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    762  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    763  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    764  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    765  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    766  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    767  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    768  29b0				  -
    769  29b0				  -			;byte %00000000 ; ALARMCLOCK
    770  29b0				  -
    771  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    772  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    773  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    774  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    775  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    776  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    777  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    778  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    779  29b0				  -
    780  29b0				  -			;byte %00000000 ; ALARMCLOCK
    781  29b0				  -
    782  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    783  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    784  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    785  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    786  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    787  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    788  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    789  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    790  29b0				  -
    791  29b0				  -			;byte %00000000 ; ALARMCLOCK
    792  29b0				  -
    793  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    794  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    795  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    796  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    797  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    798  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    799  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    800  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    801  29b0				  -
    802  29b0				  -			;byte %00000000 ; ALARMCLOCK
    803  29b0				  -			;byte %00000000 ; ALARMCLOCK
    804  29b0				  -			;byte %00000000 ; ALARMCLOCK
    805  29b0				  -			;byte %00000000 ; ALARMCLOCK
    806  29b0				  -
    807  29b0				  -	      endif		; fontcharsHEX
    808  29b0					      endif		; ALARMCLOCK
    809  29b0
    810  29b0				  -	      if	fontstyle == HANDWRITTEN
    811  29b0				  -
    812  29b0				  -			;byte %00000000 ; HANDWRITTEN
    813  29b0				  -
    814  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    815  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    816  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    817  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    818  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    819  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    820  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    821  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    822  29b0				  -
    823  29b0				  -			;byte %00000000 ; HANDWRITTEN
    824  29b0				  -
    825  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    826  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    827  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    828  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    829  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    830  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    831  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    832  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    833  29b0				  -
    834  29b0				  -			;byte %00000000 ; HANDWRITTEN
    835  29b0				  -
    836  29b0				  -	      .byte	%01110000	; HANDWRITTEN
    837  29b0				  -	      .byte	%01001100	; HANDWRITTEN
    838  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    839  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    840  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    841  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    842  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    843  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    844  29b0				  -
    845  29b0				  -			;byte %00000000 ; HANDWRITTEN
    846  29b0				  -
    847  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    848  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    849  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    850  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    851  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    852  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    853  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    854  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    855  29b0				  -
    856  29b0				  -			;byte %00000000 ; HANDWRITTEN
    857  29b0				  -
    858  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    859  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    860  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    861  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    862  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    863  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    864  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    865  29b0				  -	      .byte	%00000010	; HANDWRITTEN
    866  29b0				  -
    867  29b0				  -			;byte %00000000 ; HANDWRITTEN
    868  29b0				  -
    869  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    870  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    871  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    872  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    873  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    874  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    875  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    876  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    877  29b0				  -
    878  29b0				  -			;byte %00000000 ; HANDWRITTEN
    879  29b0				  -
    880  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    881  29b0				  -	      .byte	%00101000	; HANDWRITTEN
    882  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    883  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    884  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    885  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    886  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    887  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    888  29b0				  -
    889  29b0				  -			;byte %00000000 ; HANDWRITTEN
    890  29b0				  -
    891  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    892  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    893  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    894  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    895  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    896  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    897  29b0				  -	      .byte	%00110010	; HANDWRITTEN
    898  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    899  29b0				  -
    900  29b0				  -			;byte %00000000 ; HANDWRITTEN
    901  29b0				  -
    902  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    903  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    904  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    905  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    906  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    907  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    908  29b0				  -	      .byte	%00001010	; HANDWRITTEN
    909  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    910  29b0				  -
    911  29b0				  -			;byte %00000000 ; HANDWRITTEN
    912  29b0				  -
    913  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    914  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    915  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    916  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    917  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    918  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    919  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    920  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    921  29b0				  -
    922  29b0				  -	      ifconst	fontcharsHEX
    923  29b0				  -
    924  29b0				  -			;byte %00000000 ; HANDWRITTEN
    925  29b0				  -
    926  29b0				  -	      .byte	%00110110	; HANDWRITTEN
    927  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    928  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    929  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    930  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    931  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    932  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    933  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    934  29b0				  -
    935  29b0				  -			;byte %00000000 ; HANDWRITTEN
    936  29b0				  -
    937  29b0				  -	      .byte	%11110000	; HANDWRITTEN
    938  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    939  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    940  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    941  29b0				  -	      .byte	%00111100	; HANDWRITTEN
    942  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    943  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    944  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    945  29b0				  -
    946  29b0				  -			;byte %00000000 ; HANDWRITTEN
    947  29b0				  -
    948  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    949  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    950  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    951  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    952  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    953  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    954  29b0				  -	      .byte	%00010100	; HANDWRITTEN
    955  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    956  29b0				  -
    957  29b0				  -			;byte %00000000 ; HANDWRITTEN
    958  29b0				  -
    959  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    960  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    961  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    962  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    963  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    964  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    965  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    966  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    967  29b0				  -
    968  29b0				  -			;byte %00000000 ; HANDWRITTEN
    969  29b0				  -
    970  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    971  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    972  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    973  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    974  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    975  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    976  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    977  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    978  29b0				  -
    979  29b0				  -			;byte %00000000 ; HANDWRITTEN
    980  29b0				  -
    981  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    982  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    983  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    984  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    985  29b0				  -	      .byte	%00111000	; HANDWRITTEN
    986  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    987  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    988  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    989  29b0				  -
    990  29b0				  -			;byte %00000000 ; HANDWRITTEN
    991  29b0				  -			;byte %00000000 ; HANDWRITTEN
    992  29b0				  -			;byte %00000000 ; HANDWRITTEN
    993  29b0				  -			;byte %00000000 ; HANDWRITTEN
    994  29b0				  -
    995  29b0				  -	      endif		; fontcharsHEX
    996  29b0					      endif		; HANDWRITTEN
    997  29b0
    998  29b0				  -	      if	fontstyle == INTERRUPTED
    999  29b0				  -
   1000  29b0				  -			;byte %00000000 ; INTERRUPTED
   1001  29b0				  -
   1002  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1003  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1004  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1005  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1006  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1007  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1008  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1009  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1010  29b0				  -
   1011  29b0				  -			;byte %00000000 ; INTERRUPTED
   1012  29b0				  -
   1013  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1014  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1015  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1016  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1017  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1018  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1019  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1020  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1021  29b0				  -
   1022  29b0				  -			;byte %00000000 ; INTERRUPTED
   1023  29b0				  -
   1024  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1025  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1026  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1027  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1028  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1029  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1030  29b0				  -	      .byte	%01000110	; INTERRUPTED
   1031  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1032  29b0				  -
   1033  29b0				  -			;byte %00000000 ; INTERRUPTED
   1034  29b0				  -
   1035  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1036  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1037  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1038  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1039  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1040  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1041  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1042  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1043  29b0				  -
   1044  29b0				  -			;byte %00000000 ; INTERRUPTED
   1045  29b0				  -
   1046  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1047  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1048  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1049  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1050  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1051  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1052  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1053  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1054  29b0				  -
   1055  29b0				  -			;byte %00000000 ; INTERRUPTED
   1056  29b0				  -
   1057  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1058  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1059  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1060  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1061  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1062  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1063  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1064  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1065  29b0				  -
   1066  29b0				  -			;byte %00000000 ; INTERRUPTED
   1067  29b0				  -
   1068  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1069  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1070  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1071  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1072  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1073  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1074  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1075  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1076  29b0				  -
   1077  29b0				  -			;byte %00000000 ; INTERRUPTED
   1078  29b0				  -
   1079  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1080  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1081  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1082  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1083  29b0				  -	      .byte	%00001110	; INTERRUPTED
   1084  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1085  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1086  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1087  29b0				  -
   1088  29b0				  -			;byte %00000000 ; INTERRUPTED
   1089  29b0				  -
   1090  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1091  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1092  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1093  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1094  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1095  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1096  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1097  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1098  29b0				  -
   1099  29b0				  -			;byte %00000000 ; INTERRUPTED
   1100  29b0				  -
   1101  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1102  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1103  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1104  29b0				  -	      .byte	%00110110	; INTERRUPTED
   1105  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1106  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1107  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1108  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1109  29b0				  -
   1110  29b0				  -	      ifconst	fontcharsHEX
   1111  29b0				  -
   1112  29b0				  -			;byte %00000000 ; INTERRUPTED
   1113  29b0				  -
   1114  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1115  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1116  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1117  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1118  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1119  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1120  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1121  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1122  29b0				  -
   1123  29b0				  -			;byte %00000000 ; INTERRUPTED
   1124  29b0				  -
   1125  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1126  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1127  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1128  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1129  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1130  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1131  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1132  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1133  29b0				  -
   1134  29b0				  -			;byte %00000000 ; INTERRUPTED
   1135  29b0				  -
   1136  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1137  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1138  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1139  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1140  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1141  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1142  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1143  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1144  29b0				  -
   1145  29b0				  -			;byte %00000000 ; INTERRUPTED
   1146  29b0				  -
   1147  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1148  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1149  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1150  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1151  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1152  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1153  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1154  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1155  29b0				  -
   1156  29b0				  -			;byte %00000000 ; INTERRUPTED
   1157  29b0				  -
   1158  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1159  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1160  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1161  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1162  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1163  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1164  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1165  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1166  29b0				  -
   1167  29b0				  -			;byte %00000000 ; INTERRUPTED
   1168  29b0				  -
   1169  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1170  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1171  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1172  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1173  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1174  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1175  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1176  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1177  29b0				  -
   1178  29b0				  -			;byte %00000000 ; INTERRUPTED
   1179  29b0				  -			;byte %00000000 ; INTERRUPTED
   1180  29b0				  -			;byte %00000000 ; INTERRUPTED
   1181  29b0				  -			;byte %00000000 ; INTERRUPTED
   1182  29b0				  -
   1183  29b0				  -	      endif		; fontcharsHEX
   1184  29b0					      endif		; INTERRUPTED
   1185  29b0
   1186  29b0
   1187  29b0				  -	      if	fontstyle == TINY
   1188  29b0				  -
   1189  29b0				  -			;byte %00000000 ; TINY
   1190  29b0				  -
   1191  29b0				  -	      .byte	%00000000	; TINY
   1192  29b0				  -	      .byte	%00111000	; TINY
   1193  29b0				  -	      .byte	%00101000	; TINY
   1194  29b0				  -	      .byte	%00101000	; TINY
   1195  29b0				  -	      .byte	%00101000	; TINY
   1196  29b0				  -	      .byte	%00111000	; TINY
   1197  29b0				  -	      .byte	%00000000	; TINY
   1198  29b0				  -	      .byte	%00000000	; TINY
   1199  29b0				  -
   1200  29b0				  -			;byte %00000000 ; TINY
   1201  29b0				  -
   1202  29b0				  -	      .byte	%00000000	; TINY
   1203  29b0				  -	      .byte	%00010000	; TINY
   1204  29b0				  -	      .byte	%00010000	; TINY
   1205  29b0				  -	      .byte	%00010000	; TINY
   1206  29b0				  -	      .byte	%00010000	; TINY
   1207  29b0				  -	      .byte	%00010000	; TINY
   1208  29b0				  -	      .byte	%00000000	; TINY
   1209  29b0				  -	      .byte	%00000000	; TINY
   1210  29b0				  -
   1211  29b0				  -			;byte %00000000 ; TINY
   1212  29b0				  -
   1213  29b0				  -	      .byte	%00000000	; TINY
   1214  29b0				  -	      .byte	%00111000	; TINY
   1215  29b0				  -	      .byte	%00100000	; TINY
   1216  29b0				  -	      .byte	%00111000	; TINY
   1217  29b0				  -	      .byte	%00001000	; TINY
   1218  29b0				  -	      .byte	%00111000	; TINY
   1219  29b0				  -	      .byte	%00000000	; TINY
   1220  29b0				  -	      .byte	%00000000	; TINY
   1221  29b0				  -
   1222  29b0				  -			;byte %00000000 ; TINY
   1223  29b0				  -
   1224  29b0				  -	      .byte	%00000000	; TINY
   1225  29b0				  -	      .byte	%00111000	; TINY
   1226  29b0				  -	      .byte	%00001000	; TINY
   1227  29b0				  -	      .byte	%00111000	; TINY
   1228  29b0				  -	      .byte	%00001000	; TINY
   1229  29b0				  -	      .byte	%00111000	; TINY
   1230  29b0				  -	      .byte	%00000000	; TINY
   1231  29b0				  -	      .byte	%00000000	; TINY
   1232  29b0				  -
   1233  29b0				  -			;byte %00000000 ; TINY
   1234  29b0				  -
   1235  29b0				  -	      .byte	%00000000	; TINY
   1236  29b0				  -	      .byte	%00001000	; TINY
   1237  29b0				  -	      .byte	%00001000	; TINY
   1238  29b0				  -	      .byte	%00111000	; TINY
   1239  29b0				  -	      .byte	%00101000	; TINY
   1240  29b0				  -	      .byte	%00101000	; TINY
   1241  29b0				  -	      .byte	%00000000	; TINY
   1242  29b0				  -	      .byte	%00000000	; TINY
   1243  29b0				  -
   1244  29b0				  -			;byte %00000000 ; TINY
   1245  29b0				  -
   1246  29b0				  -	      .byte	%00000000	; TINY
   1247  29b0				  -	      .byte	%00111000	; TINY
   1248  29b0				  -	      .byte	%00001000	; TINY
   1249  29b0				  -	      .byte	%00111000	; TINY
   1250  29b0				  -	      .byte	%00100000	; TINY
   1251  29b0				  -	      .byte	%00111000	; TINY
   1252  29b0				  -	      .byte	%00000000	; TINY
   1253  29b0				  -	      .byte	%00000000	; TINY
   1254  29b0				  -
   1255  29b0				  -			;byte %00000000 ; TINY
   1256  29b0				  -
   1257  29b0				  -	      .byte	%00000000	; TINY
   1258  29b0				  -	      .byte	%00111000	; TINY
   1259  29b0				  -	      .byte	%00101000	; TINY
   1260  29b0				  -	      .byte	%00111000	; TINY
   1261  29b0				  -	      .byte	%00100000	; TINY
   1262  29b0				  -	      .byte	%00111000	; TINY
   1263  29b0				  -	      .byte	%00000000	; TINY
   1264  29b0				  -	      .byte	%00000000	; TINY
   1265  29b0				  -
   1266  29b0				  -			;byte %00000000 ; TINY
   1267  29b0				  -
   1268  29b0				  -	      .byte	%00000000	; TINY
   1269  29b0				  -	      .byte	%00001000	; TINY
   1270  29b0				  -	      .byte	%00001000	; TINY
   1271  29b0				  -	      .byte	%00001000	; TINY
   1272  29b0				  -	      .byte	%00001000	; TINY
   1273  29b0				  -	      .byte	%00111000	; TINY
   1274  29b0				  -	      .byte	%00000000	; TINY
   1275  29b0				  -	      .byte	%00000000	; TINY
   1276  29b0				  -
   1277  29b0				  -			;byte %00000000 ; TINY
   1278  29b0				  -
   1279  29b0				  -	      .byte	%00000000	; TINY
   1280  29b0				  -	      .byte	%00111000	; TINY
   1281  29b0				  -	      .byte	%00101000	; TINY
   1282  29b0				  -	      .byte	%00111000	; TINY
   1283  29b0				  -	      .byte	%00101000	; TINY
   1284  29b0				  -	      .byte	%00111000	; TINY
   1285  29b0				  -	      .byte	%00000000	; TINY
   1286  29b0				  -	      .byte	%00000000	; TINY
   1287  29b0				  -
   1288  29b0				  -			;byte %00000000 ; TINY
   1289  29b0				  -
   1290  29b0				  -	      .byte	%00000000	; TINY
   1291  29b0				  -	      .byte	%00001000	; TINY
   1292  29b0				  -	      .byte	%00001000	; TINY
   1293  29b0				  -	      .byte	%00111000	; TINY
   1294  29b0				  -	      .byte	%00101000	; TINY
   1295  29b0				  -	      .byte	%00111000	; TINY
   1296  29b0				  -	      .byte	%00000000	; TINY
   1297  29b0				  -	      .byte	%00000000	; TINY
   1298  29b0				  -
   1299  29b0				  -	      ifconst	fontcharsHEX
   1300  29b0				  -
   1301  29b0				  -			;byte %00000000 ; TINY
   1302  29b0				  -
   1303  29b0				  -	      .byte	%00000000	; TINY
   1304  29b0				  -	      .byte	%00101000	; TINY
   1305  29b0				  -	      .byte	%00101000	; TINY
   1306  29b0				  -	      .byte	%00111000	; TINY
   1307  29b0				  -	      .byte	%00101000	; TINY
   1308  29b0				  -	      .byte	%00111000	; TINY
   1309  29b0				  -	      .byte	%00000000	; TINY
   1310  29b0				  -	      .byte	%00000000	; TINY
   1311  29b0				  -
   1312  29b0				  -			;byte %00000000 ; TINY
   1313  29b0				  -
   1314  29b0				  -	      .byte	%00000000	; TINY
   1315  29b0				  -	      .byte	%00110000	; TINY
   1316  29b0				  -	      .byte	%00101000	; TINY
   1317  29b0				  -	      .byte	%00110000	; TINY
   1318  29b0				  -	      .byte	%00101000	; TINY
   1319  29b0				  -	      .byte	%00110000	; TINY
   1320  29b0				  -	      .byte	%00000000	; TINY
   1321  29b0				  -	      .byte	%00000000	; TINY
   1322  29b0				  -
   1323  29b0				  -			;byte %00000000 ; TINY
   1324  29b0				  -
   1325  29b0				  -	      .byte	%00000000	; TINY
   1326  29b0				  -	      .byte	%00111000	; TINY
   1327  29b0				  -	      .byte	%00100000	; TINY
   1328  29b0				  -	      .byte	%00100000	; TINY
   1329  29b0				  -	      .byte	%00100000	; TINY
   1330  29b0				  -	      .byte	%00111000	; TINY
   1331  29b0				  -	      .byte	%00000000	; TINY
   1332  29b0				  -	      .byte	%00000000	; TINY
   1333  29b0				  -
   1334  29b0				  -			;byte %00000000 ; TINY
   1335  29b0				  -
   1336  29b0				  -	      .byte	%00000000	; TINY
   1337  29b0				  -	      .byte	%00110000	; TINY
   1338  29b0				  -	      .byte	%00101000	; TINY
   1339  29b0				  -	      .byte	%00101000	; TINY
   1340  29b0				  -	      .byte	%00101000	; TINY
   1341  29b0				  -	      .byte	%00110000	; TINY
   1342  29b0				  -	      .byte	%00000000	; TINY
   1343  29b0				  -	      .byte	%00000000	; TINY
   1344  29b0				  -
   1345  29b0				  -			;byte %00000000 ; TINY
   1346  29b0				  -
   1347  29b0				  -	      .byte	%00000000	; TINY
   1348  29b0				  -	      .byte	%00111000	; TINY
   1349  29b0				  -	      .byte	%00100000	; TINY
   1350  29b0				  -	      .byte	%00111000	; TINY
   1351  29b0				  -	      .byte	%00100000	; TINY
   1352  29b0				  -	      .byte	%00111000	; TINY
   1353  29b0				  -	      .byte	%00000000	; TINY
   1354  29b0				  -	      .byte	%00000000	; TINY
   1355  29b0				  -
   1356  29b0				  -			;byte %00000000 ; TINY
   1357  29b0				  -
   1358  29b0				  -	      .byte	%00000000	; TINY
   1359  29b0				  -	      .byte	%00100000	; TINY
   1360  29b0				  -	      .byte	%00100000	; TINY
   1361  29b0				  -	      .byte	%00111000	; TINY
   1362  29b0				  -	      .byte	%00100000	; TINY
   1363  29b0				  -	      .byte	%00111000	; TINY
   1364  29b0				  -	      .byte	%00000000	; TINY
   1365  29b0				  -	      .byte	%00000000	; TINY
   1366  29b0				  -
   1367  29b0				  -			;byte %00000000 ; TINY
   1368  29b0				  -			;byte %00000000 ; TINY
   1369  29b0				  -			;byte %00000000 ; TINY
   1370  29b0				  -			;byte %00000000 ; TINY
   1371  29b0				  -
   1372  29b0				  -	      endif		; fontcharsHEX
   1373  29b0					      endif		; TINY
   1374  29b0
   1375  29b0				  -	      if	fontstyle == RETROPUTER
   1376  29b0				  -
   1377  29b0				  -			;byte %00000000 ; RETROPUTER
   1378  29b0				  -
   1379  29b0				  -	      .byte	%01111110	; RETROPUTER
   1380  29b0				  -	      .byte	%01000110	; RETROPUTER
   1381  29b0				  -	      .byte	%01000110	; RETROPUTER
   1382  29b0				  -	      .byte	%01000110	; RETROPUTER
   1383  29b0				  -	      .byte	%01100010	; RETROPUTER
   1384  29b0				  -	      .byte	%01100010	; RETROPUTER
   1385  29b0				  -	      .byte	%01100010	; RETROPUTER
   1386  29b0				  -	      .byte	%01111110	; RETROPUTER
   1387  29b0				  -
   1388  29b0				  -			;byte %00000000 ; RETROPUTER
   1389  29b0				  -
   1390  29b0				  -	      .byte	%00111000	; RETROPUTER
   1391  29b0				  -	      .byte	%00111000	; RETROPUTER
   1392  29b0				  -	      .byte	%00111000	; RETROPUTER
   1393  29b0				  -	      .byte	%00111000	; RETROPUTER
   1394  29b0				  -	      .byte	%00011000	; RETROPUTER
   1395  29b0				  -	      .byte	%00011000	; RETROPUTER
   1396  29b0				  -	      .byte	%00011000	; RETROPUTER
   1397  29b0				  -	      .byte	%00011000	; RETROPUTER
   1398  29b0				  -
   1399  29b0				  -			;byte %00000000 ; RETROPUTER
   1400  29b0				  -
   1401  29b0				  -	      .byte	%01111110	; RETROPUTER
   1402  29b0				  -	      .byte	%01100000	; RETROPUTER
   1403  29b0				  -	      .byte	%01100000	; RETROPUTER
   1404  29b0				  -	      .byte	%01100000	; RETROPUTER
   1405  29b0				  -	      .byte	%00111110	; RETROPUTER
   1406  29b0				  -	      .byte	%00000010	; RETROPUTER
   1407  29b0				  -	      .byte	%01000010	; RETROPUTER
   1408  29b0				  -	      .byte	%01111110	; RETROPUTER
   1409  29b0				  -
   1410  29b0				  -			;byte %00000000 ; RETROPUTER
   1411  29b0				  -
   1412  29b0				  -	      .byte	%01111110	; RETROPUTER
   1413  29b0				  -	      .byte	%01000110	; RETROPUTER
   1414  29b0				  -	      .byte	%00000110	; RETROPUTER
   1415  29b0				  -	      .byte	%00000110	; RETROPUTER
   1416  29b0				  -	      .byte	%00111110	; RETROPUTER
   1417  29b0				  -	      .byte	%00000010	; RETROPUTER
   1418  29b0				  -	      .byte	%01000010	; RETROPUTER
   1419  29b0				  -	      .byte	%01111110	; RETROPUTER
   1420  29b0				  -
   1421  29b0				  -			;byte %00000000 ; RETROPUTER
   1422  29b0				  -
   1423  29b0				  -	      .byte	%00001100	; RETROPUTER
   1424  29b0				  -	      .byte	%00001100	; RETROPUTER
   1425  29b0				  -	      .byte	%00001100	; RETROPUTER
   1426  29b0				  -	      .byte	%01111110	; RETROPUTER
   1427  29b0				  -	      .byte	%01000100	; RETROPUTER
   1428  29b0				  -	      .byte	%01000100	; RETROPUTER
   1429  29b0				  -	      .byte	%01000100	; RETROPUTER
   1430  29b0				  -	      .byte	%00000100	; RETROPUTER
   1431  29b0				  -
   1432  29b0				  -			;byte %00000000 ; RETROPUTER
   1433  29b0				  -
   1434  29b0				  -	      .byte	%01111110	; RETROPUTER
   1435  29b0				  -	      .byte	%01000110	; RETROPUTER
   1436  29b0				  -	      .byte	%00000110	; RETROPUTER
   1437  29b0				  -	      .byte	%00000110	; RETROPUTER
   1438  29b0				  -	      .byte	%01111100	; RETROPUTER
   1439  29b0				  -	      .byte	%01000000	; RETROPUTER
   1440  29b0				  -	      .byte	%01000000	; RETROPUTER
   1441  29b0				  -	      .byte	%01111110	; RETROPUTER
   1442  29b0				  -
   1443  29b0				  -			;byte %00000000 ; RETROPUTER
   1444  29b0				  -
   1445  29b0				  -	      .byte	%01111110	; RETROPUTER
   1446  29b0				  -	      .byte	%01000110	; RETROPUTER
   1447  29b0				  -	      .byte	%01000110	; RETROPUTER
   1448  29b0				  -	      .byte	%01000110	; RETROPUTER
   1449  29b0				  -	      .byte	%01111100	; RETROPUTER
   1450  29b0				  -	      .byte	%01000000	; RETROPUTER
   1451  29b0				  -	      .byte	%01000010	; RETROPUTER
   1452  29b0				  -	      .byte	%01111110	; RETROPUTER
   1453  29b0				  -
   1454  29b0				  -			;byte %00000000 ; RETROPUTER
   1455  29b0				  -
   1456  29b0				  -	      .byte	%00001100	; RETROPUTER
   1457  29b0				  -	      .byte	%00001100	; RETROPUTER
   1458  29b0				  -	      .byte	%00001100	; RETROPUTER
   1459  29b0				  -	      .byte	%00001100	; RETROPUTER
   1460  29b0				  -	      .byte	%00000100	; RETROPUTER
   1461  29b0				  -	      .byte	%00000010	; RETROPUTER
   1462  29b0				  -	      .byte	%01000010	; RETROPUTER
   1463  29b0				  -	      .byte	%01111110	; RETROPUTER
   1464  29b0				  -
   1465  29b0				  -			;byte %00000000 ; RETROPUTER
   1466  29b0				  -
   1467  29b0				  -	      .byte	%01111110	; RETROPUTER
   1468  29b0				  -	      .byte	%01000110	; RETROPUTER
   1469  29b0				  -	      .byte	%01000110	; RETROPUTER
   1470  29b0				  -	      .byte	%01000110	; RETROPUTER
   1471  29b0				  -	      .byte	%01111110	; RETROPUTER
   1472  29b0				  -	      .byte	%01000010	; RETROPUTER
   1473  29b0				  -	      .byte	%01000010	; RETROPUTER
   1474  29b0				  -	      .byte	%01111110	; RETROPUTER
   1475  29b0				  -
   1476  29b0				  -			;byte %00000000 ; RETROPUTER
   1477  29b0				  -
   1478  29b0				  -	      .byte	%00000110	; RETROPUTER
   1479  29b0				  -	      .byte	%00000110	; RETROPUTER
   1480  29b0				  -	      .byte	%00000110	; RETROPUTER
   1481  29b0				  -	      .byte	%00000010	; RETROPUTER
   1482  29b0				  -	      .byte	%01111110	; RETROPUTER
   1483  29b0				  -	      .byte	%01000010	; RETROPUTER
   1484  29b0				  -	      .byte	%01000010	; RETROPUTER
   1485  29b0				  -	      .byte	%01111110	; RETROPUTER
   1486  29b0				  -
   1487  29b0				  -	      ifconst	fontcharsHEX
   1488  29b0				  -
   1489  29b0				  -			;byte %00000000  ; RETROPUTER
   1490  29b0				  -
   1491  29b0				  -	      .byte	%01100010	; RETROPUTER
   1492  29b0				  -	      .byte	%01100010	; RETROPUTER
   1493  29b0				  -	      .byte	%01100010	; RETROPUTER
   1494  29b0				  -	      .byte	%01000010	; RETROPUTER
   1495  29b0				  -	      .byte	%01111110	; RETROPUTER
   1496  29b0				  -	      .byte	%01000010	; RETROPUTER
   1497  29b0				  -	      .byte	%01000010	; RETROPUTER
   1498  29b0				  -	      .byte	%01111110	; RETROPUTER
   1499  29b0				  -
   1500  29b0				  -			;byte %00000000 ; RETROPUTER
   1501  29b0				  -
   1502  29b0				  -	      .byte	%01111110	; RETROPUTER
   1503  29b0				  -	      .byte	%01100010	; RETROPUTER
   1504  29b0				  -	      .byte	%01100010	; RETROPUTER
   1505  29b0				  -	      .byte	%01000010	; RETROPUTER
   1506  29b0				  -	      .byte	%01111100	; RETROPUTER
   1507  29b0				  -	      .byte	%01000010	; RETROPUTER
   1508  29b0				  -	      .byte	%01000010	; RETROPUTER
   1509  29b0				  -	      .byte	%01111110	; RETROPUTER
   1510  29b0				  -
   1511  29b0				  -			;byte %00000000 ; RETROPUTER
   1512  29b0				  -
   1513  29b0				  -	      .byte	%01111110	; RETROPUTER
   1514  29b0				  -	      .byte	%01100010	; RETROPUTER
   1515  29b0				  -	      .byte	%01100010	; RETROPUTER
   1516  29b0				  -	      .byte	%01100000	; RETROPUTER
   1517  29b0				  -	      .byte	%01000000	; RETROPUTER
   1518  29b0				  -	      .byte	%01000000	; RETROPUTER
   1519  29b0				  -	      .byte	%01000010	; RETROPUTER
   1520  29b0				  -	      .byte	%01111110	; RETROPUTER
   1521  29b0				  -
   1522  29b0				  -			;byte %00000000 ; RETROPUTER
   1523  29b0				  -
   1524  29b0				  -	      .byte	%01111100	; RETROPUTER
   1525  29b0				  -	      .byte	%01100010	; RETROPUTER
   1526  29b0				  -	      .byte	%01100010	; RETROPUTER
   1527  29b0				  -	      .byte	%01100010	; RETROPUTER
   1528  29b0				  -	      .byte	%01000010	; RETROPUTER
   1529  29b0				  -	      .byte	%01000010	; RETROPUTER
   1530  29b0				  -	      .byte	%01000010	; RETROPUTER
   1531  29b0				  -	      .byte	%01111100	; RETROPUTER
   1532  29b0				  -
   1533  29b0				  -			;byte %00000000 ; RETROPUTER
   1534  29b0				  -
   1535  29b0				  -	      .byte	%01111110	; RETROPUTER
   1536  29b0				  -	      .byte	%01100010	; RETROPUTER
   1537  29b0				  -	      .byte	%01100000	; RETROPUTER
   1538  29b0				  -	      .byte	%01000000	; RETROPUTER
   1539  29b0				  -	      .byte	%01111100	; RETROPUTER
   1540  29b0				  -	      .byte	%01000000	; RETROPUTER
   1541  29b0				  -	      .byte	%01000010	; RETROPUTER
   1542  29b0				  -	      .byte	%01111110	; RETROPUTER
   1543  29b0				  -
   1544  29b0				  -			;byte %00000000 ; RETROPUTER
   1545  29b0				  -
   1546  29b0				  -	      .byte	%01100000	; RETROPUTER
   1547  29b0				  -	      .byte	%01100000	; RETROPUTER
   1548  29b0				  -	      .byte	%01100000	; RETROPUTER
   1549  29b0				  -	      .byte	%01000000	; RETROPUTER
   1550  29b0				  -	      .byte	%01111100	; RETROPUTER
   1551  29b0				  -	      .byte	%01000000	; RETROPUTER
   1552  29b0				  -	      .byte	%01000010	; RETROPUTER
   1553  29b0				  -	      .byte	%01111110	; RETROPUTER
   1554  29b0				  -
   1555  29b0				  -			;byte %00000000 ; RETROPUTER
   1556  29b0				  -			;byte %00000000 ; RETROPUTER
   1557  29b0				  -			;byte %00000000 ; RETROPUTER
   1558  29b0				  -			;byte %00000000 ; RETROPUTER
   1559  29b0				  -
   1560  29b0				  -	      endif		; fontcharsHEX
   1561  29b0					      endif		; RETROPUTER
   1562  29b0
   1563  29b0				  -	      if	fontstyle == CURVES
   1564  29b0				  -
   1565  29b0				  -			;byte %00000000 ; CURVES
   1566  29b0				  -
   1567  29b0				  -	      .byte	%00111100	; CURVES
   1568  29b0				  -	      .byte	%01111110	; CURVES
   1569  29b0				  -	      .byte	%01100110	; CURVES
   1570  29b0				  -	      .byte	%01100110	; CURVES
   1571  29b0				  -	      .byte	%01100110	; CURVES
   1572  29b0				  -	      .byte	%01100110	; CURVES
   1573  29b0				  -	      .byte	%01111110	; CURVES
   1574  29b0				  -	      .byte	%00111100	; CURVES
   1575  29b0				  -
   1576  29b0				  -			;byte %00000000 ; CURVES
   1577  29b0				  -
   1578  29b0				  -	      .byte	%00011000	; CURVES
   1579  29b0				  -	      .byte	%00011000	; CURVES
   1580  29b0				  -	      .byte	%00011000	; CURVES
   1581  29b0				  -	      .byte	%00011000	; CURVES
   1582  29b0				  -	      .byte	%00011000	; CURVES
   1583  29b0				  -	      .byte	%00011000	; CURVES
   1584  29b0				  -	      .byte	%01111000	; CURVES
   1585  29b0				  -	      .byte	%01110000	; CURVES
   1586  29b0				  -
   1587  29b0				  -			;byte %00000000 ; CURVES
   1588  29b0				  -
   1589  29b0				  -	      .byte	%01111110	; CURVES
   1590  29b0				  -	      .byte	%01111110	; CURVES
   1591  29b0				  -	      .byte	%01100000	; CURVES
   1592  29b0				  -	      .byte	%01111100	; CURVES
   1593  29b0				  -	      .byte	%00111110	; CURVES
   1594  29b0				  -	      .byte	%00000110	; CURVES
   1595  29b0				  -	      .byte	%01111110	; CURVES
   1596  29b0				  -	      .byte	%01111100	; CURVES
   1597  29b0				  -
   1598  29b0				  -			;byte %00000000 ; CURVES
   1599  29b0				  -
   1600  29b0				  -	      .byte	%01111100	; CURVES
   1601  29b0				  -	      .byte	%01111110	; CURVES
   1602  29b0				  -	      .byte	%00001110	; CURVES
   1603  29b0				  -	      .byte	%00111100	; CURVES
   1604  29b0				  -	      .byte	%00111100	; CURVES
   1605  29b0				  -	      .byte	%00001110	; CURVES
   1606  29b0				  -	      .byte	%01111110	; CURVES
   1607  29b0				  -	      .byte	%01111100	; CURVES
   1608  29b0				  -
   1609  29b0				  -			;byte %00000000 ; CURVES
   1610  29b0				  -
   1611  29b0				  -	      .byte	%00000110	; CURVES
   1612  29b0				  -	      .byte	%00000110	; CURVES
   1613  29b0				  -	      .byte	%00111110	; CURVES
   1614  29b0				  -	      .byte	%01111110	; CURVES
   1615  29b0				  -	      .byte	%01100110	; CURVES
   1616  29b0				  -	      .byte	%01100110	; CURVES
   1617  29b0				  -	      .byte	%01100110	; CURVES
   1618  29b0				  -	      .byte	%01100110	; CURVES
   1619  29b0				  -
   1620  29b0				  -			;byte %00000000 ; CURVES
   1621  29b0				  -
   1622  29b0				  -	      .byte	%01111100	; CURVES
   1623  29b0				  -	      .byte	%01111110	; CURVES
   1624  29b0				  -	      .byte	%00000110	; CURVES
   1625  29b0				  -	      .byte	%01111110	; CURVES
   1626  29b0				  -	      .byte	%01111100	; CURVES
   1627  29b0				  -	      .byte	%01100000	; CURVES
   1628  29b0				  -	      .byte	%01111110	; CURVES
   1629  29b0				  -	      .byte	%01111110	; CURVES
   1630  29b0				  -
   1631  29b0				  -			;byte %00000000 ; CURVES
   1632  29b0				  -
   1633  29b0				  -	      .byte	%00111100	; CURVES
   1634  29b0				  -	      .byte	%01111110	; CURVES
   1635  29b0				  -	      .byte	%01100110	; CURVES
   1636  29b0				  -	      .byte	%01111110	; CURVES
   1637  29b0				  -	      .byte	%01111100	; CURVES
   1638  29b0				  -	      .byte	%01100000	; CURVES
   1639  29b0				  -	      .byte	%01111110	; CURVES
   1640  29b0				  -	      .byte	%00111110	; CURVES
   1641  29b0				  -
   1642  29b0				  -			;byte %00000000 ; CURVES
   1643  29b0				  -
   1644  29b0				  -	      .byte	%00000110	; CURVES
   1645  29b0				  -	      .byte	%00000110	; CURVES
   1646  29b0				  -	      .byte	%00000110	; CURVES
   1647  29b0				  -	      .byte	%00000110	; CURVES
   1648  29b0				  -	      .byte	%00000110	; CURVES
   1649  29b0				  -	      .byte	%01100110	; CURVES
   1650  29b0				  -	      .byte	%01111110	; CURVES
   1651  29b0				  -	      .byte	%00111100	; CURVES
   1652  29b0				  -
   1653  29b0				  -			;byte %00000000 ; CURVES
   1654  29b0				  -
   1655  29b0				  -	      .byte	%00111100	; CURVES
   1656  29b0				  -	      .byte	%01111110	; CURVES
   1657  29b0				  -	      .byte	%01100110	; CURVES
   1658  29b0				  -	      .byte	%01111110	; CURVES
   1659  29b0				  -	      .byte	%00111100	; CURVES
   1660  29b0				  -	      .byte	%01100110	; CURVES
   1661  29b0				  -	      .byte	%01111110	; CURVES
   1662  29b0				  -	      .byte	%00111100	; CURVES
   1663  29b0				  -
   1664  29b0				  -			;byte %00000000 ; CURVES
   1665  29b0				  -
   1666  29b0				  -	      .byte	%01111100	; CURVES
   1667  29b0				  -	      .byte	%01111110	; CURVES
   1668  29b0				  -	      .byte	%00000110	; CURVES
   1669  29b0				  -	      .byte	%00111110	; CURVES
   1670  29b0				  -	      .byte	%01111110	; CURVES
   1671  29b0				  -	      .byte	%01100110	; CURVES
   1672  29b0				  -	      .byte	%01111110	; CURVES
   1673  29b0				  -	      .byte	%00111100	; CURVES
   1674  29b0				  -
   1675  29b0				  -	      ifconst	fontcharsHEX
   1676  29b0				  -
   1677  29b0				  -			;byte %00000000 ; CURVES
   1678  29b0				  -
   1679  29b0				  -	      .byte	%01100110	; CURVES
   1680  29b0				  -	      .byte	%01100110	; CURVES
   1681  29b0				  -	      .byte	%01111110	; CURVES
   1682  29b0				  -	      .byte	%01111110	; CURVES
   1683  29b0				  -	      .byte	%01100110	; CURVES
   1684  29b0				  -	      .byte	%01100110	; CURVES
   1685  29b0				  -	      .byte	%01111110	; CURVES
   1686  29b0				  -	      .byte	%00111100	; CURVES
   1687  29b0				  -
   1688  29b0				  -			;byte %00000000 ; CURVES
   1689  29b0				  -
   1690  29b0				  -	      .byte	%01111100	; CURVES
   1691  29b0				  -	      .byte	%01111110	; CURVES
   1692  29b0				  -	      .byte	%01100110	; CURVES
   1693  29b0				  -	      .byte	%01111110	; CURVES
   1694  29b0				  -	      .byte	%01111100	; CURVES
   1695  29b0				  -	      .byte	%01100110	; CURVES
   1696  29b0				  -	      .byte	%01111110	; CURVES
   1697  29b0				  -	      .byte	%01111100	; CURVES
   1698  29b0				  -
   1699  29b0				  -			;byte %00000000 ; CURVES
   1700  29b0				  -
   1701  29b0				  -	      .byte	%00111110	; CURVES
   1702  29b0				  -	      .byte	%01111110	; CURVES
   1703  29b0				  -	      .byte	%01100000	; CURVES
   1704  29b0				  -	      .byte	%01100000	; CURVES
   1705  29b0				  -	      .byte	%01100000	; CURVES
   1706  29b0				  -	      .byte	%01100000	; CURVES
   1707  29b0				  -	      .byte	%01111110	; CURVES
   1708  29b0				  -	      .byte	%00111110	; CURVES
   1709  29b0				  -
   1710  29b0				  -			;byte %00000000 ; CURVES
   1711  29b0				  -
   1712  29b0				  -	      .byte	%01111100	; CURVES
   1713  29b0				  -	      .byte	%01111110	; CURVES
   1714  29b0				  -	      .byte	%01100110	; CURVES
   1715  29b0				  -	      .byte	%01100110	; CURVES
   1716  29b0				  -	      .byte	%01100110	; CURVES
   1717  29b0				  -	      .byte	%01100110	; CURVES
   1718  29b0				  -	      .byte	%01111110	; CURVES
   1719  29b0				  -	      .byte	%01111100	; CURVES
   1720  29b0				  -
   1721  29b0				  -			;byte %00000000 ; CURVES
   1722  29b0				  -
   1723  29b0				  -	      .byte	%00111110	; CURVES
   1724  29b0				  -	      .byte	%01111110	; CURVES
   1725  29b0				  -	      .byte	%01100000	; CURVES
   1726  29b0				  -	      .byte	%01111100	; CURVES
   1727  29b0				  -	      .byte	%01111100	; CURVES
   1728  29b0				  -	      .byte	%01100000	; CURVES
   1729  29b0				  -	      .byte	%01111110	; CURVES
   1730  29b0				  -	      .byte	%00111110	; CURVES
   1731  29b0				  -
   1732  29b0				  -			;byte %00000000 ; CURVES
   1733  29b0				  -
   1734  29b0				  -	      .byte	%01100000	; CURVES
   1735  29b0				  -	      .byte	%01100000	; CURVES
   1736  29b0				  -	      .byte	%01100000	; CURVES
   1737  29b0				  -	      .byte	%01111100	; CURVES
   1738  29b0				  -	      .byte	%01111100	; CURVES
   1739  29b0				  -	      .byte	%01100000	; CURVES
   1740  29b0				  -	      .byte	%01111110	; CURVES
   1741  29b0				  -	      .byte	%00111110	; CURVES
   1742  29b0				  -
   1743  29b0				  -			;byte %00000000 ; CURVES
   1744  29b0				  -			;byte %00000000 ; CURVES
   1745  29b0				  -			;byte %00000000 ; CURVES
   1746  29b0				  -			;byte %00000000 ; CURVES
   1747  29b0				  -
   1748  29b0				  -	      endif		; fontcharsHEX 
   1749  29b0					      endif		; CURVES
   1750  29b0
   1751  29b0
   1752  29b0				  -	      if	fontstyle == HUSKY
   1753  29b0				  -
   1754  29b0				  -			;byte %00000000 ; HUSKY
   1755  29b0				  -
   1756  29b0				  -	      .byte	%01111100	; HUSKY
   1757  29b0				  -	      .byte	%11111110	; HUSKY
   1758  29b0				  -	      .byte	%11101110	; HUSKY
   1759  29b0				  -	      .byte	%11101110	; HUSKY
   1760  29b0				  -	      .byte	%11101110	; HUSKY
   1761  29b0				  -	      .byte	%11101110	; HUSKY
   1762  29b0				  -	      .byte	%11111110	; HUSKY
   1763  29b0				  -	      .byte	%01111100	; HUSKY
   1764  29b0				  -
   1765  29b0				  -			;byte %00000000 ; HUSKY
   1766  29b0				  -
   1767  29b0				  -	      .byte	%00111000	; HUSKY
   1768  29b0				  -	      .byte	%00111000	; HUSKY
   1769  29b0				  -	      .byte	%00111000	; HUSKY
   1770  29b0				  -	      .byte	%00111000	; HUSKY
   1771  29b0				  -	      .byte	%00111000	; HUSKY
   1772  29b0				  -	      .byte	%00111000	; HUSKY
   1773  29b0				  -	      .byte	%00111000	; HUSKY
   1774  29b0				  -	      .byte	%00111000	; HUSKY
   1775  29b0				  -
   1776  29b0				  -			;byte %00000000 ; HUSKY
   1777  29b0				  -
   1778  29b0				  -	      .byte	%11111110	; HUSKY
   1779  29b0				  -	      .byte	%11111110	; HUSKY
   1780  29b0				  -	      .byte	%11100000	; HUSKY
   1781  29b0				  -	      .byte	%11111100	; HUSKY
   1782  29b0				  -	      .byte	%01111110	; HUSKY
   1783  29b0				  -	      .byte	%00001110	; HUSKY
   1784  29b0				  -	      .byte	%11111110	; HUSKY
   1785  29b0				  -	      .byte	%11111100	; HUSKY
   1786  29b0				  -
   1787  29b0				  -			;byte %00000000 ; HUSKY
   1788  29b0				  -
   1789  29b0				  -	      .byte	%11111100	; HUSKY
   1790  29b0				  -	      .byte	%11111110	; HUSKY
   1791  29b0				  -	      .byte	%00001110	; HUSKY
   1792  29b0				  -	      .byte	%11111100	; HUSKY
   1793  29b0				  -	      .byte	%11111100	; HUSKY
   1794  29b0				  -	      .byte	%00001110	; HUSKY
   1795  29b0				  -	      .byte	%11111110	; HUSKY
   1796  29b0				  -	      .byte	%11111100	; HUSKY
   1797  29b0				  -
   1798  29b0				  -			;byte %00000000 ; HUSKY
   1799  29b0				  -
   1800  29b0				  -	      .byte	%00011100	; HUSKY
   1801  29b0				  -	      .byte	%00011100	; HUSKY
   1802  29b0				  -	      .byte	%11111110	; HUSKY
   1803  29b0				  -	      .byte	%11111110	; HUSKY
   1804  29b0				  -	      .byte	%11011100	; HUSKY
   1805  29b0				  -	      .byte	%11011100	; HUSKY
   1806  29b0				  -	      .byte	%00011100	; HUSKY
   1807  29b0				  -	      .byte	%00011100	; HUSKY
   1808  29b0				  -
   1809  29b0				  -			;byte %00000000 ; HUSKY
   1810  29b0				  -
   1811  29b0				  -	      .byte	%11111100	; HUSKY
   1812  29b0				  -	      .byte	%11111110	; HUSKY
   1813  29b0				  -	      .byte	%00001110	; HUSKY
   1814  29b0				  -	      .byte	%11111110	; HUSKY
   1815  29b0				  -	      .byte	%11111100	; HUSKY
   1816  29b0				  -	      .byte	%11100000	; HUSKY
   1817  29b0				  -	      .byte	%11111110	; HUSKY
   1818  29b0				  -	      .byte	%11111110	; HUSKY
   1819  29b0				  -
   1820  29b0				  -			;byte %00000000 ; HUSKY
   1821  29b0				  -
   1822  29b0				  -	      .byte	%01111100	; HUSKY
   1823  29b0				  -	      .byte	%11111110	; HUSKY
   1824  29b0				  -	      .byte	%11101110	; HUSKY
   1825  29b0				  -	      .byte	%11111110	; HUSKY
   1826  29b0				  -	      .byte	%11111100	; HUSKY
   1827  29b0				  -	      .byte	%11100000	; HUSKY
   1828  29b0				  -	      .byte	%11111110	; HUSKY
   1829  29b0				  -	      .byte	%01111110	; HUSKY
   1830  29b0				  -
   1831  29b0				  -			;byte %00000000 ; HUSKY
   1832  29b0				  -
   1833  29b0				  -	      .byte	%00111000	; HUSKY
   1834  29b0				  -	      .byte	%00111000	; HUSKY
   1835  29b0				  -	      .byte	%00111000	; HUSKY
   1836  29b0				  -	      .byte	%00111000	; HUSKY
   1837  29b0				  -	      .byte	%00011100	; HUSKY
   1838  29b0				  -	      .byte	%00001110	; HUSKY
   1839  29b0				  -	      .byte	%11111110	; HUSKY
   1840  29b0				  -	      .byte	%11111110	; HUSKY
   1841  29b0				  -
   1842  29b0				  -			;byte %00000000 ; HUSKY
   1843  29b0				  -
   1844  29b0				  -	      .byte	%01111100	; HUSKY
   1845  29b0				  -	      .byte	%11111110	; HUSKY
   1846  29b0				  -	      .byte	%11101110	; HUSKY
   1847  29b0				  -	      .byte	%11111110	; HUSKY
   1848  29b0				  -	      .byte	%01111100	; HUSKY
   1849  29b0				  -	      .byte	%11101110	; HUSKY
   1850  29b0				  -	      .byte	%11111110	; HUSKY
   1851  29b0				  -	      .byte	%01111100	; HUSKY
   1852  29b0				  -
   1853  29b0				  -			;byte %00000000 ; HUSKY
   1854  29b0				  -
   1855  29b0				  -	      .byte	%11111100	; HUSKY
   1856  29b0				  -	      .byte	%11111110	; HUSKY
   1857  29b0				  -	      .byte	%00001110	; HUSKY
   1858  29b0				  -	      .byte	%01111110	; HUSKY
   1859  29b0				  -	      .byte	%11111110	; HUSKY
   1860  29b0				  -	      .byte	%11101110	; HUSKY
   1861  29b0				  -	      .byte	%11111110	; HUSKY
   1862  29b0				  -	      .byte	%01111100	; HUSKY
   1863  29b0				  -
   1864  29b0				  -	      ifconst	fontcharsHEX
   1865  29b0				  -
   1866  29b0				  -			;byte %00000000 ; HUSKY
   1867  29b0				  -
   1868  29b0				  -	      .byte	%11101110	; HUSKY
   1869  29b0				  -	      .byte	%11101110	; HUSKY
   1870  29b0				  -	      .byte	%11111110	; HUSKY
   1871  29b0				  -	      .byte	%11111110	; HUSKY
   1872  29b0				  -	      .byte	%11101110	; HUSKY
   1873  29b0				  -	      .byte	%11111110	; HUSKY
   1874  29b0				  -	      .byte	%01111100	; HUSKY
   1875  29b0				  -	      .byte	%00111000	; HUSKY
   1876  29b0				  -
   1877  29b0				  -			;byte %00000000 ; HUSKY
   1878  29b0				  -
   1879  29b0				  -	      .byte	%11111100	; HUSKY
   1880  29b0				  -	      .byte	%11111110	; HUSKY
   1881  29b0				  -	      .byte	%11101110	; HUSKY
   1882  29b0				  -	      .byte	%11111110	; HUSKY
   1883  29b0				  -	      .byte	%11111100	; HUSKY
   1884  29b0				  -	      .byte	%11101110	; HUSKY
   1885  29b0				  -	      .byte	%11111110	; HUSKY
   1886  29b0				  -	      .byte	%11111100	; HUSKY
   1887  29b0				  -
   1888  29b0				  -			;byte %00000000 ; HUSKY
   1889  29b0				  -
   1890  29b0				  -	      .byte	%01111110	; HUSKY
   1891  29b0				  -	      .byte	%11111110	; HUSKY
   1892  29b0				  -	      .byte	%11110000	; HUSKY
   1893  29b0				  -	      .byte	%11100000	; HUSKY
   1894  29b0				  -	      .byte	%11100000	; HUSKY
   1895  29b0				  -	      .byte	%11110000	; HUSKY
   1896  29b0				  -	      .byte	%11111110	; HUSKY
   1897  29b0				  -	      .byte	%01111110	; HUSKY
   1898  29b0				  -
   1899  29b0				  -			;byte %00000000 ; HUSKY
   1900  29b0				  -
   1901  29b0				  -	      .byte	%11111000	; HUSKY
   1902  29b0				  -	      .byte	%11111100	; HUSKY
   1903  29b0				  -	      .byte	%11111110	; HUSKY
   1904  29b0				  -	      .byte	%11101110	; HUSKY
   1905  29b0				  -	      .byte	%11101110	; HUSKY
   1906  29b0				  -	      .byte	%11111110	; HUSKY
   1907  29b0				  -	      .byte	%11111100	; HUSKY
   1908  29b0				  -	      .byte	%11111000	; HUSKY
   1909  29b0				  -
   1910  29b0				  -			;byte %00000000 ; HUSKY
   1911  29b0				  -
   1912  29b0				  -	      .byte	%11111110	; HUSKY
   1913  29b0				  -	      .byte	%11111110	; HUSKY
   1914  29b0				  -	      .byte	%11100000	; HUSKY
   1915  29b0				  -	      .byte	%11111110	; HUSKY
   1916  29b0				  -	      .byte	%11111110	; HUSKY
   1917  29b0				  -	      .byte	%11100000	; HUSKY
   1918  29b0				  -	      .byte	%11111110	; HUSKY
   1919  29b0				  -	      .byte	%11111110	; HUSKY
   1920  29b0				  -
   1921  29b0				  -			;byte %00000000 ; HUSKY
   1922  29b0				  -
   1923  29b0				  -	      .byte	%11100000	; HUSKY
   1924  29b0				  -	      .byte	%11100000	; HUSKY
   1925  29b0				  -	      .byte	%11100000	; HUSKY
   1926  29b0				  -	      .byte	%11111110	; HUSKY
   1927  29b0				  -	      .byte	%11111110	; HUSKY
   1928  29b0				  -	      .byte	%11100000	; HUSKY
   1929  29b0				  -	      .byte	%11111110	; HUSKY
   1930  29b0				  -	      .byte	%11111110	; HUSKY
   1931  29b0				  -
   1932  29b0				  -			;byte %00000000 ; HUSKY
   1933  29b0				  -			;byte %00000000 ; HUSKY
   1934  29b0				  -			;byte %00000000 ; HUSKY
   1935  29b0				  -			;byte %00000000 ; HUSKY
   1936  29b0				  -
   1937  29b0				  -	      endif		; fontcharsHEX 
   1938  29b0					      endif		; HUSKY
   1939  29b0
   1940  29b0
   1941  29b0				  -	      if	fontstyle == SNAKE
   1942  29b0				  -
   1943  29b0				  -			;byte %00000000 ; SNAKE
   1944  29b0				  -
   1945  29b0				  -	      .byte	%01111110	; SNAKE
   1946  29b0				  -	      .byte	%01000010	; SNAKE
   1947  29b0				  -	      .byte	%01000010	; SNAKE
   1948  29b0				  -	      .byte	%01000010	; SNAKE
   1949  29b0				  -	      .byte	%01000010	; SNAKE
   1950  29b0				  -	      .byte	%01000010	; SNAKE
   1951  29b0				  -	      .byte	%01000010	; SNAKE
   1952  29b0				  -	      .byte	%01111110	; SNAKE
   1953  29b0				  -
   1954  29b0				  -			;byte %00000000 ; SNAKE
   1955  29b0				  -
   1956  29b0				  -	      .byte	%00111000	; SNAKE
   1957  29b0				  -	      .byte	%00101000	; SNAKE
   1958  29b0				  -	      .byte	%00001000	; SNAKE
   1959  29b0				  -	      .byte	%00001000	; SNAKE
   1960  29b0				  -	      .byte	%00001000	; SNAKE
   1961  29b0				  -	      .byte	%00001000	; SNAKE
   1962  29b0				  -	      .byte	%00001000	; SNAKE
   1963  29b0				  -	      .byte	%00111000	; SNAKE
   1964  29b0				  -
   1965  29b0				  -			;byte %00000000 ; SNAKE
   1966  29b0				  -
   1967  29b0				  -	      .byte	%01111110	; SNAKE
   1968  29b0				  -	      .byte	%01000010	; SNAKE
   1969  29b0				  -	      .byte	%01000110	; SNAKE
   1970  29b0				  -	      .byte	%01000000	; SNAKE
   1971  29b0				  -	      .byte	%01111110	; SNAKE
   1972  29b0				  -	      .byte	%00000010	; SNAKE
   1973  29b0				  -	      .byte	%01000010	; SNAKE
   1974  29b0				  -	      .byte	%01111110	; SNAKE
   1975  29b0				  -
   1976  29b0				  -			;byte %00000000 ; SNAKE
   1977  29b0				  -
   1978  29b0				  -	      .byte	%01111110	; SNAKE
   1979  29b0				  -	      .byte	%01000010	; SNAKE
   1980  29b0				  -	      .byte	%01100010	; SNAKE
   1981  29b0				  -	      .byte	%00000010	; SNAKE
   1982  29b0				  -	      .byte	%01111110	; SNAKE
   1983  29b0				  -	      .byte	%00000010	; SNAKE
   1984  29b0				  -	      .byte	%01000010	; SNAKE
   1985  29b0				  -	      .byte	%01111110	; SNAKE
   1986  29b0				  -
   1987  29b0				  -			;byte %00000000 ; SNAKE
   1988  29b0				  -
   1989  29b0				  -	      .byte	%00001110	; SNAKE
   1990  29b0				  -	      .byte	%00001010	; SNAKE
   1991  29b0				  -	      .byte	%00000010	; SNAKE
   1992  29b0				  -	      .byte	%01111110	; SNAKE
   1993  29b0				  -	      .byte	%01000010	; SNAKE
   1994  29b0				  -	      .byte	%01000010	; SNAKE
   1995  29b0				  -	      .byte	%01000010	; SNAKE
   1996  29b0				  -	      .byte	%01100110	; SNAKE
   1997  29b0				  -
   1998  29b0				  -			;byte %00000000 ; SNAKE
   1999  29b0				  -
   2000  29b0				  -	      .byte	%01111110	; SNAKE
   2001  29b0				  -	      .byte	%01000010	; SNAKE
   2002  29b0				  -	      .byte	%01100010	; SNAKE
   2003  29b0				  -	      .byte	%00000010	; SNAKE
   2004  29b0				  -	      .byte	%01111110	; SNAKE
   2005  29b0				  -	      .byte	%01000000	; SNAKE
   2006  29b0				  -	      .byte	%01000010	; SNAKE
   2007  29b0				  -	      .byte	%01111110	; SNAKE
   2008  29b0				  -
   2009  29b0				  -			;byte %00000000 ; SNAKE
   2010  29b0				  -
   2011  29b0				  -	      .byte	%01111110	; SNAKE
   2012  29b0				  -	      .byte	%01000010	; SNAKE
   2013  29b0				  -	      .byte	%01000010	; SNAKE
   2014  29b0				  -	      .byte	%01111110	; SNAKE
   2015  29b0				  -	      .byte	%01000000	; SNAKE
   2016  29b0				  -	      .byte	%01000110	; SNAKE
   2017  29b0				  -	      .byte	%01000010	; SNAKE
   2018  29b0				  -	      .byte	%01111110	; SNAKE
   2019  29b0				  -
   2020  29b0				  -			;byte %00000000 ; SNAKE
   2021  29b0				  -
   2022  29b0				  -	      .byte	%00000110	; SNAKE
   2023  29b0				  -	      .byte	%00000010	; SNAKE
   2024  29b0				  -	      .byte	%00000010	; SNAKE
   2025  29b0				  -	      .byte	%00000010	; SNAKE
   2026  29b0				  -	      .byte	%00000010	; SNAKE
   2027  29b0				  -	      .byte	%01100010	; SNAKE
   2028  29b0				  -	      .byte	%01000010	; SNAKE
   2029  29b0				  -	      .byte	%01111110	; SNAKE
   2030  29b0				  -
   2031  29b0				  -			;byte %00000000 ; SNAKE
   2032  29b0				  -
   2033  29b0				  -	      .byte	%01111110	; SNAKE
   2034  29b0				  -	      .byte	%01000010	; SNAKE
   2035  29b0				  -	      .byte	%01000010	; SNAKE
   2036  29b0				  -	      .byte	%01000010	; SNAKE
   2037  29b0				  -	      .byte	%01111110	; SNAKE
   2038  29b0				  -	      .byte	%01000010	; SNAKE
   2039  29b0				  -	      .byte	%01000010	; SNAKE
   2040  29b0				  -	      .byte	%01111110	; SNAKE
   2041  29b0				  -
   2042  29b0				  -			;byte %00000000 ; SNAKE
   2043  29b0				  -
   2044  29b0				  -	      .byte	%00001110	; SNAKE
   2045  29b0				  -	      .byte	%00001010	; SNAKE
   2046  29b0				  -	      .byte	%00000010	; SNAKE
   2047  29b0				  -	      .byte	%00000010	; SNAKE
   2048  29b0				  -	      .byte	%01111110	; SNAKE
   2049  29b0				  -	      .byte	%01000010	; SNAKE
   2050  29b0				  -	      .byte	%01000010	; SNAKE
   2051  29b0				  -	      .byte	%01111110	; SNAKE
   2052  29b0				  -
   2053  29b0				  -
   2054  29b0				  -	      ifconst	fontcharsHEX
   2055  29b0				  -
   2056  29b0				  -			;byte %00000000 ; SNAKE
   2057  29b0				  -
   2058  29b0				  -	      .byte	%01100110	; SNAKE
   2059  29b0				  -	      .byte	%01000010	; SNAKE
   2060  29b0				  -	      .byte	%01000010	; SNAKE
   2061  29b0				  -	      .byte	%01000010	; SNAKE
   2062  29b0				  -	      .byte	%01111110	; SNAKE
   2063  29b0				  -	      .byte	%01000010	; SNAKE
   2064  29b0				  -	      .byte	%01000010	; SNAKE
   2065  29b0				  -	      .byte	%01111110	; SNAKE
   2066  29b0				  -
   2067  29b0				  -			;byte %00000000 ; SNAKE
   2068  29b0				  -
   2069  29b0				  -	      .byte	%01111110	; SNAKE
   2070  29b0				  -	      .byte	%01000010	; SNAKE
   2071  29b0				  -	      .byte	%01000010	; SNAKE
   2072  29b0				  -	      .byte	%01000110	; SNAKE
   2073  29b0				  -	      .byte	%01111100	; SNAKE
   2074  29b0				  -	      .byte	%01000110	; SNAKE
   2075  29b0				  -	      .byte	%01000010	; SNAKE
   2076  29b0				  -	      .byte	%01111110	; SNAKE
   2077  29b0				  -
   2078  29b0				  -			;byte %00000000 ; SNAKE
   2079  29b0				  -
   2080  29b0				  -	      .byte	%01111110	; SNAKE
   2081  29b0				  -	      .byte	%01000010	; SNAKE
   2082  29b0				  -	      .byte	%01000110	; SNAKE
   2083  29b0				  -	      .byte	%01000000	; SNAKE
   2084  29b0				  -	      .byte	%01000000	; SNAKE
   2085  29b0				  -	      .byte	%01000110	; SNAKE
   2086  29b0				  -	      .byte	%01000010	; SNAKE
   2087  29b0				  -	      .byte	%01111110	; SNAKE
   2088  29b0				  -
   2089  29b0				  -			;byte %00000000 ; SNAKE
   2090  29b0				  -
   2091  29b0				  -	      .byte	%01111100	; SNAKE
   2092  29b0				  -	      .byte	%01000110	; SNAKE
   2093  29b0				  -	      .byte	%01000010	; SNAKE
   2094  29b0				  -	      .byte	%01000010	; SNAKE
   2095  29b0				  -	      .byte	%01000010	; SNAKE
   2096  29b0				  -	      .byte	%01000010	; SNAKE
   2097  29b0				  -	      .byte	%01000110	; SNAKE
   2098  29b0				  -	      .byte	%01111100	; SNAKE
   2099  29b0				  -
   2100  29b0				  -			;byte %00000000 ; SNAKE
   2101  29b0				  -
   2102  29b0				  -	      .byte	%01111110	; SNAKE
   2103  29b0				  -	      .byte	%01000010	; SNAKE
   2104  29b0				  -	      .byte	%01000110	; SNAKE
   2105  29b0				  -	      .byte	%01000000	; SNAKE
   2106  29b0				  -	      .byte	%01111000	; SNAKE
   2107  29b0				  -	      .byte	%01000000	; SNAKE
   2108  29b0				  -	      .byte	%01000010	; SNAKE
   2109  29b0				  -	      .byte	%01111110	; SNAKE
   2110  29b0				  -
   2111  29b0				  -			;byte %00000000 ; SNAKE
   2112  29b0				  -
   2113  29b0				  -	      .byte	%01000000	; SNAKE
   2114  29b0				  -	      .byte	%01000000	; SNAKE
   2115  29b0				  -	      .byte	%01000000	; SNAKE
   2116  29b0				  -	      .byte	%01000000	; SNAKE
   2117  29b0				  -	      .byte	%01111000	; SNAKE
   2118  29b0				  -	      .byte	%01000000	; SNAKE
   2119  29b0				  -	      .byte	%01000010	; SNAKE
   2120  29b0				  -	      .byte	%01111110	; SNAKE
   2121  29b0				  -
   2122  29b0				  -			;byte %00000000 ; SNAKE
   2123  29b0				  -			;byte %00000000 ; SNAKE
   2124  29b0				  -			;byte %00000000 ; SNAKE
   2125  29b0				  -			;byte %00000000 ; SNAKE
   2126  29b0				  -
   2127  29b0				  -	      endif		; fontcharsHEX 
   2128  29b0					      endif		; SNAKE
   2129  29b0
   2130  29b0				  -	      if	fontstyle == PLOK
   2131  29b0				  -
   2132  29b0				  -			;byte %00000000 ; PLOK
   2133  29b0				  -
   2134  29b0				  -	      .byte	%00000000	; PLOK
   2135  29b0				  -	      .byte	%00111000	; PLOK
   2136  29b0				  -	      .byte	%01100100	; PLOK
   2137  29b0				  -	      .byte	%01100010	; PLOK
   2138  29b0				  -	      .byte	%01100010	; PLOK
   2139  29b0				  -	      .byte	%00110110	; PLOK
   2140  29b0				  -	      .byte	%00011100	; PLOK
   2141  29b0				  -	      .byte	%00000000	; PLOK
   2142  29b0				  -
   2143  29b0				  -			;byte %00000000 ; PLOK
   2144  29b0				  -
   2145  29b0				  -	      .byte	%00000000	; PLOK
   2146  29b0				  -	      .byte	%00010000	; PLOK
   2147  29b0				  -	      .byte	%00011100	; PLOK
   2148  29b0				  -	      .byte	%00011100	; PLOK
   2149  29b0				  -	      .byte	%00011000	; PLOK
   2150  29b0				  -	      .byte	%00111000	; PLOK
   2151  29b0				  -	      .byte	%00011000	; PLOK
   2152  29b0				  -	      .byte	%00000000	; PLOK
   2153  29b0				  -
   2154  29b0				  -			;byte %00000000 ; PLOK
   2155  29b0				  -
   2156  29b0				  -	      .byte	%00000000	; PLOK
   2157  29b0				  -	      .byte	%00001110	; PLOK
   2158  29b0				  -	      .byte	%01111110	; PLOK
   2159  29b0				  -	      .byte	%00011000	; PLOK
   2160  29b0				  -	      .byte	%00001100	; PLOK
   2161  29b0				  -	      .byte	%00000110	; PLOK
   2162  29b0				  -	      .byte	%00111100	; PLOK
   2163  29b0				  -	      .byte	%00000000	; PLOK
   2164  29b0				  -
   2165  29b0				  -			;byte %00000000 ; PLOK
   2166  29b0				  -
   2167  29b0				  -	      .byte	%00000000	; PLOK
   2168  29b0				  -	      .byte	%00111100	; PLOK
   2169  29b0				  -	      .byte	%01101110	; PLOK
   2170  29b0				  -	      .byte	%00001110	; PLOK
   2171  29b0				  -	      .byte	%00011100	; PLOK
   2172  29b0				  -	      .byte	%00000110	; PLOK
   2173  29b0				  -	      .byte	%01111100	; PLOK
   2174  29b0				  -	      .byte	%00000000	; PLOK
   2175  29b0				  -
   2176  29b0				  -			;byte %00000000 ; PLOK
   2177  29b0				  -
   2178  29b0				  -	      .byte	%00000000	; PLOK
   2179  29b0				  -	      .byte	%00011000	; PLOK
   2180  29b0				  -	      .byte	%01111110	; PLOK
   2181  29b0				  -	      .byte	%01101100	; PLOK
   2182  29b0				  -	      .byte	%00100100	; PLOK
   2183  29b0				  -	      .byte	%00110000	; PLOK
   2184  29b0				  -	      .byte	%00110000	; PLOK
   2185  29b0				  -	      .byte	%00000000	; PLOK
   2186  29b0				  -
   2187  29b0				  -			;byte %00000000 ; PLOK
   2188  29b0				  -
   2189  29b0				  -	      .byte	%00000000	; PLOK
   2190  29b0				  -	      .byte	%00111100	; PLOK
   2191  29b0				  -	      .byte	%01001110	; PLOK
   2192  29b0				  -	      .byte	%00011100	; PLOK
   2193  29b0				  -	      .byte	%01100000	; PLOK
   2194  29b0				  -	      .byte	%01111100	; PLOK
   2195  29b0				  -	      .byte	%00011100	; PLOK
   2196  29b0				  -	      .byte	%00000000	; PLOK
   2197  29b0				  -
   2198  29b0				  -			;byte %00000000 ; PLOK
   2199  29b0				  -
   2200  29b0				  -	      .byte	%00000000	; PLOK
   2201  29b0				  -	      .byte	%00111100	; PLOK
   2202  29b0				  -	      .byte	%01000110	; PLOK
   2203  29b0				  -	      .byte	%01101100	; PLOK
   2204  29b0				  -	      .byte	%01110000	; PLOK
   2205  29b0				  -	      .byte	%00111000	; PLOK
   2206  29b0				  -	      .byte	%00010000	; PLOK
   2207  29b0				  -	      .byte	%00000000	; PLOK
   2208  29b0				  -
   2209  29b0				  -			;byte %00000000 ; PLOK
   2210  29b0				  -
   2211  29b0				  -	      .byte	%00000000	; PLOK
   2212  29b0				  -	      .byte	%00111100	; PLOK
   2213  29b0				  -	      .byte	%00011100	; PLOK
   2214  29b0				  -	      .byte	%00001100	; PLOK
   2215  29b0				  -	      .byte	%00000110	; PLOK
   2216  29b0				  -	      .byte	%01111110	; PLOK
   2217  29b0				  -	      .byte	%00110000	; PLOK
   2218  29b0				  -	      .byte	%00000000	; PLOK
   2219  29b0				  -
   2220  29b0				  -			;byte %00000000 ; PLOK
   2221  29b0				  -
   2222  29b0				  -	      .byte	%00000000	; PLOK
   2223  29b0				  -	      .byte	%00111100	; PLOK
   2224  29b0				  -	      .byte	%01001110	; PLOK
   2225  29b0				  -	      .byte	%01101110	; PLOK
   2226  29b0				  -	      .byte	%00111100	; PLOK
   2227  29b0				  -	      .byte	%01100100	; PLOK
   2228  29b0				  -	      .byte	%00111000	; PLOK
   2229  29b0				  -	      .byte	%00000000	; PLOK
   2230  29b0				  -
   2231  29b0				  -			;byte %00000000 ; PLOK
   2232  29b0				  -
   2233  29b0				  -	      .byte	%00000000	; PLOK
   2234  29b0				  -	      .byte	%00011000	; PLOK
   2235  29b0				  -	      .byte	%00001100	; PLOK
   2236  29b0				  -	      .byte	%00011100	; PLOK
   2237  29b0				  -	      .byte	%00100110	; PLOK
   2238  29b0				  -	      .byte	%01001110	; PLOK
   2239  29b0				  -	      .byte	%00111100	; PLOK
   2240  29b0				  -	      .byte	%00000000	; PLOK
   2241  29b0				  -
   2242  29b0				  -	      ifconst	fontcharsHEX
   2243  29b0				  -
   2244  29b0				  -			;byte %00000000 ; PLOK
   2245  29b0				  -
   2246  29b0				  -	      .byte	%00000000	; PLOK
   2247  29b0				  -	      .byte	%01100010	; PLOK
   2248  29b0				  -	      .byte	%01100110	; PLOK
   2249  29b0				  -	      .byte	%01111110	; PLOK
   2250  29b0				  -	      .byte	%00101100	; PLOK
   2251  29b0				  -	      .byte	%00101000	; PLOK
   2252  29b0				  -	      .byte	%00110000	; PLOK
   2253  29b0				  -	      .byte	%00000000	; PLOK
   2254  29b0				  -
   2255  29b0				  -			;byte %00000000 ; PLOK
   2256  29b0				  -
   2257  29b0				  -	      .byte	%00000000	; PLOK
   2258  29b0				  -	      .byte	%01111100	; PLOK
   2259  29b0				  -	      .byte	%00110010	; PLOK
   2260  29b0				  -	      .byte	%00110110	; PLOK
   2261  29b0				  -	      .byte	%00111100	; PLOK
   2262  29b0				  -	      .byte	%00110110	; PLOK
   2263  29b0				  -	      .byte	%01111100	; PLOK
   2264  29b0				  -	      .byte	%00000000	; PLOK
   2265  29b0				  -
   2266  29b0				  -			;byte %00000000 ; PLOK
   2267  29b0				  -
   2268  29b0				  -	      .byte	%00000000	; PLOK
   2269  29b0				  -	      .byte	%00111100	; PLOK
   2270  29b0				  -	      .byte	%01100110	; PLOK
   2271  29b0				  -	      .byte	%01100000	; PLOK
   2272  29b0				  -	      .byte	%01100100	; PLOK
   2273  29b0				  -	      .byte	%00101110	; PLOK
   2274  29b0				  -	      .byte	%00011100	; PLOK
   2275  29b0				  -	      .byte	%00000000	; PLOK
   2276  29b0				  -
   2277  29b0				  -			;byte %00000000 ; PLOK
   2278  29b0				  -
   2279  29b0				  -	      .byte	%00000000	; PLOK
   2280  29b0				  -	      .byte	%01111100	; PLOK
   2281  29b0				  -	      .byte	%00110010	; PLOK
   2282  29b0				  -	      .byte	%00110010	; PLOK
   2283  29b0				  -	      .byte	%00110110	; PLOK
   2284  29b0				  -	      .byte	%01111100	; PLOK
   2285  29b0				  -	      .byte	%01111000	; PLOK
   2286  29b0				  -	      .byte	%00000000	; PLOK
   2287  29b0				  -
   2288  29b0				  -			;byte %00000000 ; PLOK
   2289  29b0				  -
   2290  29b0				  -	      .byte	%00000000	; PLOK
   2291  29b0				  -	      .byte	%01111110	; PLOK
   2292  29b0				  -	      .byte	%00110000	; PLOK
   2293  29b0				  -	      .byte	%00111000	; PLOK
   2294  29b0				  -	      .byte	%00111100	; PLOK
   2295  29b0				  -	      .byte	%00110000	; PLOK
   2296  29b0				  -	      .byte	%01111110	; PLOK
   2297  29b0				  -	      .byte	%00000000	; PLOK
   2298  29b0				  -
   2299  29b0				  -			;byte %00000000 ; PLOK
   2300  29b0				  -
   2301  29b0				  -	      .byte	%00000000	; PLOK
   2302  29b0				  -	      .byte	%01100000	; PLOK
   2303  29b0				  -	      .byte	%01100000	; PLOK
   2304  29b0				  -	      .byte	%00111000	; PLOK
   2305  29b0				  -	      .byte	%00100000	; PLOK
   2306  29b0				  -	      .byte	%01111110	; PLOK
   2307  29b0				  -	      .byte	%00011100	; PLOK
   2308  29b0				  -	      .byte	%00000000	; PLOK
   2309  29b0				  -
   2310  29b0				  -			;byte %00000000 ; PLOK
   2311  29b0				  -			;byte %00000000 ; PLOK
   2312  29b0				  -			;byte %00000000 ; PLOK
   2313  29b0				  -			;byte %00000000 ; PLOK
   2314  29b0				  -
   2315  29b0				  -
   2316  29b0				  -	      endif		; fontcharsHEX
   2317  29b0					      endif		; PLOK
   2318  29b0
   2319  29b0							; ### any characters that aren't font specific follow... 
   2320  29b0
   2321  29b0				  -	      ifconst	fontcharSPACE
   2322  29b0				  -			;byte %00000000 ; SYMBOLS
   2323  29b0				  -
   2324  29b0				  -	      .byte	%00000000	; SYMBOLS
   2325  29b0				  -	      .byte	%00000000	; SYMBOLS
   2326  29b0				  -	      .byte	%00000000	; SYMBOLS
   2327  29b0				  -	      .byte	%00000000	; SYMBOLS
   2328  29b0				  -	      .byte	%00000000	; SYMBOLS
   2329  29b0				  -	      .byte	%00000000	; SYMBOLS
   2330  29b0				  -	      .byte	%00000000	; SYMBOLS
   2331  29b0				  -	      .byte	%00000000	; SYMBOLS
   2332  29b0				  -
   2333  29b0				  -			;byte %00000000 ; SYMBOLS
   2334  29b0					      endif		; fontcharSPACE
   2335  29b0
   2336  29b0				  -	      ifconst	fontcharDOLLAR
   2337  29b0				  -			;byte %00000000 ; SYMBOLS
   2338  29b0				  -
   2339  29b0				  -	      .byte	%00000000	; SYMBOLS
   2340  29b0				  -	      .byte	%00010000	; SYMBOLS
   2341  29b0				  -	      .byte	%01111100	; SYMBOLS
   2342  29b0				  -	      .byte	%00010010	; SYMBOLS
   2343  29b0				  -	      .byte	%01111100	; SYMBOLS
   2344  29b0				  -	      .byte	%10010000	; SYMBOLS
   2345  29b0				  -	      .byte	%01111100	; SYMBOLS
   2346  29b0				  -	      .byte	%00010000	; SYMBOLS
   2347  29b0				  -
   2348  29b0				  -			;byte %00000000 ; SYMBOLS
   2349  29b0				  -
   2350  29b0					      endif		; fontcharDOLLAR
   2351  29b0
   2352  29b0				  -	      ifconst	fontcharPOUND
   2353  29b0				  -			;byte %00000000 ; SYMBOLS
   2354  29b0				  -
   2355  29b0				  -	      .byte	%01111110	; SYMBOLS
   2356  29b0				  -	      .byte	%01000000	; SYMBOLS
   2357  29b0				  -	      .byte	%00100000	; SYMBOLS
   2358  29b0				  -	      .byte	%00100000	; SYMBOLS
   2359  29b0				  -	      .byte	%01111000	; SYMBOLS
   2360  29b0				  -	      .byte	%00100000	; SYMBOLS
   2361  29b0				  -	      .byte	%00100010	; SYMBOLS
   2362  29b0				  -	      .byte	%00011100	; SYMBOLS
   2363  29b0				  -
   2364  29b0				  -			;byte %00000000 ; SYMBOLS
   2365  29b0				  -
   2366  29b0					      endif		; fontcharPOUND
   2367  29b0
   2368  29b0
   2369  29b0				  -	      ifconst	fontcharMRHAPPY
   2370  29b0				  -			;byte %00000000 ; SYMBOLS
   2371  29b0				  -
   2372  29b0				  -	      .byte	%00111100	; SYMBOLS
   2373  29b0				  -	      .byte	%01100110	; SYMBOLS
   2374  29b0				  -	      .byte	%01011010	; SYMBOLS
   2375  29b0				  -	      .byte	%01111110	; SYMBOLS
   2376  29b0				  -	      .byte	%01111110	; SYMBOLS
   2377  29b0				  -	      .byte	%01011010	; SYMBOLS
   2378  29b0				  -	      .byte	%01111110	; SYMBOLS
   2379  29b0				  -	      .byte	%00111100	; SYMBOLS
   2380  29b0				  -
   2381  29b0				  -			;byte %00000000 ; SYMBOLS
   2382  29b0				  -
   2383  29b0					      endif		; fontcharMRHAPPY
   2384  29b0
   2385  29b0				  -	      ifconst	fontcharMRSAD
   2386  29b0				  -			;byte %00000000 ; SYMBOLS
   2387  29b0				  -
   2388  29b0				  -	      .byte	%00111100	; SYMBOLS
   2389  29b0				  -	      .byte	%01011010	; SYMBOLS
   2390  29b0				  -	      .byte	%01100110	; SYMBOLS
   2391  29b0				  -	      .byte	%01111110	; SYMBOLS
   2392  29b0				  -	      .byte	%01111110	; SYMBOLS
   2393  29b0				  -	      .byte	%01011010	; SYMBOLS
   2394  29b0				  -	      .byte	%01111110	; SYMBOLS
   2395  29b0				  -	      .byte	%00111100	; SYMBOLS
   2396  29b0				  -
   2397  29b0				  -			;byte %00000000 ; SYMBOLS
   2398  29b0				  -
   2399  29b0					      endif		; fontcharMRSAD
   2400  29b0
   2401  29b0
   2402  29b0				  -	      ifconst	fontcharCOPYRIGHT
   2403  29b0				  -			;byte %00000000 ; SYMBOLS
   2404  29b0				  -
   2405  29b0				  -	      .byte	%00000000	; SYMBOLS
   2406  29b0				  -	      .byte	%00111000	; SYMBOLS
   2407  29b0				  -	      .byte	%01000100	; SYMBOLS
   2408  29b0				  -	      .byte	%10111010	; SYMBOLS
   2409  29b0				  -	      .byte	%10100010	; SYMBOLS
   2410  29b0				  -	      .byte	%10111010	; SYMBOLS
   2411  29b0				  -	      .byte	%01000100	; SYMBOLS
   2412  29b0				  -	      .byte	%00111000	; SYMBOLS
   2413  29b0				  -
   2414  29b0				  -			;byte %00000000 ; SYMBOLS
   2415  29b0				  -
   2416  29b0					      endif		; fontcharCOPYRIGHT
   2417  29b0
   2418  29b0
   2419  29b0				  -	      ifconst	fontcharFUJI
   2420  29b0				  -
   2421  29b0				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  29b0				  -
   2423  29b0				  -	      .byte	%01110000	; SYMBOLS
   2424  29b0				  -	      .byte	%01111001	; SYMBOLS
   2425  29b0				  -	      .byte	%00011101	; SYMBOLS
   2426  29b0				  -	      .byte	%00001101	; SYMBOLS
   2427  29b0				  -	      .byte	%00001101	; SYMBOLS
   2428  29b0				  -	      .byte	%00001101	; SYMBOLS
   2429  29b0				  -	      .byte	%00001101	; SYMBOLS
   2430  29b0				  -	      .byte	%00000000	; SYMBOLS
   2431  29b0				  -
   2432  29b0				  -			;byte %00000000 ; SYMBOLS
   2433  29b0				  -
   2434  29b0				  -	      .byte	%00001110	; SYMBOLS
   2435  29b0				  -	      .byte	%10011110	; SYMBOLS
   2436  29b0				  -	      .byte	%10111000	; SYMBOLS
   2437  29b0				  -	      .byte	%10110000	; SYMBOLS
   2438  29b0				  -	      .byte	%10110000	; SYMBOLS
   2439  29b0				  -	      .byte	%10110000	; SYMBOLS
   2440  29b0				  -	      .byte	%10110000	; SYMBOLS
   2441  29b0				  -	      .byte	%00000000	; SYMBOLS
   2442  29b0				  -
   2443  29b0				  -			;byte %00000000 ; SYMBOLS
   2444  29b0				  -
   2445  29b0					      endif		; fontcharFUJI
   2446  29b0
   2447  29b0
   2448  29b0				  -	      ifconst	fontcharHEART
   2449  29b0				  -			;byte %00000000 ; SYMBOLS
   2450  29b0				  -
   2451  29b0				  -	      .byte	%00010000	; SYMBOLS
   2452  29b0				  -	      .byte	%00111000	; SYMBOLS
   2453  29b0				  -	      .byte	%01111100	; SYMBOLS
   2454  29b0				  -	      .byte	%01111100	; SYMBOLS
   2455  29b0				  -	      .byte	%11111110	; SYMBOLS
   2456  29b0				  -	      .byte	%11111110	; SYMBOLS
   2457  29b0				  -	      .byte	%11101110	; SYMBOLS
   2458  29b0				  -	      .byte	%01000100	; SYMBOLS
   2459  29b0				  -
   2460  29b0				  -			;byte %00000000 ; SYMBOLS
   2461  29b0				  -
   2462  29b0					      endif		; fontcharHEART
   2463  29b0
   2464  29b0				  -	      ifconst	fontcharDIAMOND
   2465  29b0				  -			;byte %00000000 ; SYMBOLS
   2466  29b0				  -
   2467  29b0				  -	      .byte	%00010000	; SYMBOLS
   2468  29b0				  -	      .byte	%00111000	; SYMBOLS
   2469  29b0				  -	      .byte	%01111100	; SYMBOLS
   2470  29b0				  -	      .byte	%11111110	; SYMBOLS
   2471  29b0				  -	      .byte	%11111110	; SYMBOLS
   2472  29b0				  -	      .byte	%01111100	; SYMBOLS
   2473  29b0				  -	      .byte	%00111000	; SYMBOLS
   2474  29b0				  -	      .byte	%00010000	; SYMBOLS
   2475  29b0				  -
   2476  29b0				  -			;byte %00000000 ; SYMBOLS
   2477  29b0				  -
   2478  29b0					      endif		; fontcharDIAMOND
   2479  29b0
   2480  29b0				  -	      ifconst	fontcharSPADE
   2481  29b0				  -			;byte %00000000 ; SYMBOLS
   2482  29b0				  -
   2483  29b0				  -	      .byte	%00111000	; SYMBOLS
   2484  29b0				  -	      .byte	%00010000	; SYMBOLS
   2485  29b0				  -	      .byte	%01010100	; SYMBOLS
   2486  29b0				  -	      .byte	%11111110	; SYMBOLS
   2487  29b0				  -	      .byte	%11111110	; SYMBOLS
   2488  29b0				  -	      .byte	%01111100	; SYMBOLS
   2489  29b0				  -	      .byte	%00111000	; SYMBOLS
   2490  29b0				  -	      .byte	%00010000	; SYMBOLS
   2491  29b0				  -
   2492  29b0				  -			;byte %00000000 ; SYMBOLS
   2493  29b0				  -
   2494  29b0					      endif		; fontcharSPADE
   2495  29b0
   2496  29b0				  -	      ifconst	fontcharCLUB
   2497  29b0				  -			;byte %00000000 ; SYMBOLS
   2498  29b0				  -
   2499  29b0				  -	      .byte	%00111000	; SYMBOLS
   2500  29b0				  -	      .byte	%00010000	; SYMBOLS
   2501  29b0				  -	      .byte	%11010110	; SYMBOLS
   2502  29b0				  -	      .byte	%11111110	; SYMBOLS
   2503  29b0				  -	      .byte	%11010110	; SYMBOLS
   2504  29b0				  -	      .byte	%00111000	; SYMBOLS
   2505  29b0				  -	      .byte	%00111000	; SYMBOLS
   2506  29b0				  -	      .byte	%00000000	; SYMBOLS
   2507  29b0				  -
   2508  29b0				  -			;byte %00000000 ; SYMBOLS
   2509  29b0				  -
   2510  29b0					      endif		; fontcharCLUB
   2511  29b0
   2512  29b0
   2513  29b0				  -	      ifconst	fontcharCOLON
   2514  29b0				  -			;byte %00000000 ; SYMBOLS
   2515  29b0				  -
   2516  29b0				  -	      .byte	%00000000	; SYMBOLS
   2517  29b0				  -	      .byte	%00011000	; SYMBOLS
   2518  29b0				  -	      .byte	%00011000	; SYMBOLS
   2519  29b0				  -	      .byte	%00000000	; SYMBOLS
   2520  29b0				  -	      .byte	%00000000	; SYMBOLS
   2521  29b0				  -	      .byte	%00011000	; SYMBOLS
   2522  29b0				  -	      .byte	%00011000	; SYMBOLS
   2523  29b0				  -	      .byte	%00000000	; SYMBOLS
   2524  29b0				  -
   2525  29b0				  -			;byte %00000000 ; SYMBOLS
   2526  29b0				  -
   2527  29b0					      endif		; fontcharCOLON
   2528  29b0
   2529  29b0
   2530  29b0				  -	      ifconst	fontcharBLOCK
   2531  29b0				  -
   2532  29b0				  -			;byte %00000000 ; SYMBOLS
   2533  29b0				  -
   2534  29b0				  -	      .byte	%11111111	; SYMBOLS
   2535  29b0				  -	      .byte	%11111111	; SYMBOLS
   2536  29b0				  -	      .byte	%11111111	; SYMBOLS
   2537  29b0				  -	      .byte	%11111111	; SYMBOLS
   2538  29b0				  -	      .byte	%11111111	; SYMBOLS
   2539  29b0				  -	      .byte	%11111111	; SYMBOLS
   2540  29b0				  -	      .byte	%11111111	; SYMBOLS
   2541  29b0				  -	      .byte	%11111111	; SYMBOLS
   2542  29b0				  -
   2543  29b0				  -			;byte %00000000 ; SYMBOLS
   2544  29b0				  -
   2545  29b0					      endif		; fontcharBLOCK
   2546  29b0
   2547  29b0				  -	      ifconst	fontcharUNDERLINE
   2548  29b0				  -
   2549  29b0				  -			;byte %00000000 ; SYMBOLS
   2550  29b0				  -
   2551  29b0				  -	      .byte	%11111111	; SYMBOLS
   2552  29b0				  -	      .byte	%00000000	; SYMBOLS
   2553  29b0				  -	      .byte	%00000000	; SYMBOLS
   2554  29b0				  -	      .byte	%00000000	; SYMBOLS
   2555  29b0				  -	      .byte	%00000000	; SYMBOLS
   2556  29b0				  -	      .byte	%00000000	; SYMBOLS
   2557  29b0				  -	      .byte	%00000000	; SYMBOLS
   2558  29b0				  -	      .byte	%00000000	; SYMBOLS
   2559  29b0				  -
   2560  29b0				  -			;byte %00000000 ; SYMBOLS
   2561  29b0				  -
   2562  29b0					      endif		; fontcharUNDERLINE
   2563  29b0
   2564  29b0				  -	      ifconst	fontcharARISIDE
   2565  29b0				  -			;byte %00000000 ; SYMBOLS
   2566  29b0				  -
   2567  29b0				  -	      .byte	%00000000	; SYMBOLS
   2568  29b0				  -	      .byte	%00101010	; SYMBOLS
   2569  29b0				  -	      .byte	%00101010	; SYMBOLS
   2570  29b0				  -	      .byte	%00101100	; SYMBOLS
   2571  29b0				  -	      .byte	%01111111	; SYMBOLS
   2572  29b0				  -	      .byte	%00110111	; SYMBOLS
   2573  29b0				  -	      .byte	%00000010	; SYMBOLS
   2574  29b0				  -	      .byte	%00000001	; SYMBOLS
   2575  29b0				  -
   2576  29b0				  -			;byte %00000000 ; SYMBOLS
   2577  29b0				  -
   2578  29b0					      endif		; fontcharARISIDE
   2579  29b0
   2580  29b0				  -	      ifconst	fontcharARIFACE
   2581  29b0				  -			;byte %00000000 ; SYMBOLS
   2582  29b0				  -
   2583  29b0				  -	      .byte	%00001000	; SYMBOLS
   2584  29b0				  -	      .byte	%00011100	; SYMBOLS
   2585  29b0				  -	      .byte	%00111110	; SYMBOLS
   2586  29b0				  -	      .byte	%00101010	; SYMBOLS
   2587  29b0				  -	      .byte	%00011100	; SYMBOLS
   2588  29b0				  -	      .byte	%01010100	; SYMBOLS
   2589  29b0				  -	      .byte	%00100100	; SYMBOLS
   2590  29b0				  -	      .byte	%00000010	; SYMBOLS
   2591  29b0				  -
   2592  29b0				  -			;byte %00000000 ; SYMBOLS
   2593  29b0				  -
   2594  29b0				  -
   2595  29b0					      endif		; fontcharARIRACE
   2596  29b0
------- FILE titlescreen/asm/titlescreen.asm
    170  29b0					      endif
    171  29b0
    172  29b0				  -	      ifconst	mk_gameselect_on
    173  29b0				  -	      include	"titlescreen/gameselect_image.asm"
    174  29b0					      endif
    175  29b0
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
   4984  29b0
   4985  29b0				   .
   4986  29b0							; 
   4987  29b0
   4988  29b0				   .
   4989  29b0							; 
   4990  29b0
   4991  29b0				   .L0365		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  29b0					      include	6lives_statusbar.asm
      1  29b0							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  29b0
      3  29b0				   minikernel		; display up to 6 lives on screen
      4  29b0		       85 02		      sta	WSYNC
      5  29b2		       a2 20		      ldx	#$20
      6  29b4		       86 21		      stx	HMP1
      7  29b6		       86 25		      stx	VDELP0
      8  29b8		       a5 c2		      lda	lives
      9  29ba		       4a		      lsr
     10  29bb		       4a		      lsr
     11  29bc		       4a		      lsr
     12  29bd		       4a		      lsr
     13  29be		       4a		      lsr
     14  29bf		       85 10		      sta	RESP0
     15  29c1		       85 11		      sta	RESP1
     16  29c3		       86 26		      stx	VDELP1
     17  29c5		       aa		      tax
     18  29c6		       bd 5c fa 	      lda	lifenusiz0table,x
     19  29c9		       85 04		      sta	NUSIZ0
     20  29cb		       bd 5b fa 	      lda	lifenusiz1table,x
     21  29ce		       85 05		      sta	NUSIZ1
     22  29d0		       a5 c0		      lda	lifecolor
     23  29d2		       85 06		      sta	COLUP0
     24  29d4		       85 07		      sta	COLUP1
     25  29d6		       a9 10		      lda	#$10
     26  29d8		       85 20		      sta	HMP0
     27  29da
     28  29da		       a5 bf		      lda	statusbarlength
     29  29dc		       4a		      lsr
     30  29dd		       4a		      lsr
     31  29de		       4a		      lsr		; 0-31
     32  29df							; 3 cases: 0-7, 8-15, 16-24
     33  29df							; if 0-7, temp1=val, temp2=0, temp3=0
     34  29df							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  29df							; if 16-23, temp1=255, temp2=255, temp3=val
     36  29df		       a8		      tay
     37  29e0
     38  29e0		       85 2a		      sta	HMOVE	;cycle 74?
     39  29e2
     40  29e2				  -	      ifconst	statusbarcolor
     41  29e2				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  29e2				  -	      lda	statusbarcolor
     43  29e2				  -	      sta	COLUPF
     44  29e2					      endif
     45  29e2
     46  29e2		       c0 08		      cpy	#8
     47  29e4		       90 17		      bcc	zero_7
     48  29e6		       c0 10		      cpy	#16
     49  29e8		       90 23		      bcc	eight_15
     50  29ea		       a9 ff		      lda	#255
     51  29ec		       85 cb		      sta	temp1
     52  29ee		       85 cc		      sta	temp2
     53  29f0		       b9 54 fa 	      lda	statustable-16,y
     54  29f3		       85 cd		      sta	temp3
     55  29f5		       b9 64 fa 	      lda	statustable,y
     56  29f8		       85 ce		      sta	temp4
     57  29fa		       4c 1c fa 	      jmp	startlifedisplay
     58  29fd
     59  29fd				   zero_7
     60  29fd		       a9 00		      lda	#0
     61  29ff		       85 ce		      sta	temp4
     62  2a01		       85 cd		      sta	temp3
     63  2a03		       85 cc		      sta	temp2
     64  2a05		       b9 64 fa 	      lda	statustable,y
     65  2a08		       85 cb		      sta	temp1
     66  2a0a		       4c 1c fa 	      jmp	startlifedisplay
     67  2a0d				   eight_15
     68  2a0d		       a9 ff		      lda	#255
     69  2a0f		       85 cb		      sta	temp1
     70  2a11		       a9 00		      lda	#0
     71  2a13		       85 ce		      sta	temp4
     72  2a15		       85 cd		      sta	temp3
     73  2a17		       b9 74 fa 	      lda	statustable+16,y
     74  2a1a		       85 cc		      sta	temp2
     75  2a1c				   startlifedisplay
     76  2a1c		       a0 07		      ldy	#7
     77  2a1e				   lifeloop
     78  2a1e		       85 02		      sta	WSYNC
     79  2a20		       86 0d		      stx	PF0
     80  2a22		       b1 c1		      lda	(lifepointer),y
     81  2a24		       e0 00		      cpx	#0
     82  2a26		       d0 01		      bne	onelife
     83  2a28		       0c		      .byte.b	$0C
     84  2a29				   onelife
     85  2a29		       85 1b		      sta	GRP0
     86  2a2b
     87  2a2b		       e0 02		      cpx	#2
     88  2a2d		       b0 01		      bcs	nolives
     89  2a2f		       0c		      .byte.b	$0C
     90  2a30				   nolives
     91  2a30		       85 1c		      sta	GRP1
     92  2a32		       a5 ce		      lda	temp4
     93  2a34		       85 0d		      sta	PF0
     94  2a36		       a5 cb		      lda	temp1
     95  2a38		       85 0f		      sta	PF2
     96  2a3a		       a5 cd		      lda	temp3
     97  2a3c		       85 0e		      sta	PF1
     98  2a3e		       a5 cc		      lda	temp2
     99  2a40		       85 0f		      sta	PF2	;cycle 48!
    100  2a42		       68		      pla		; waste 14 cycles in 4 bytes
    101  2a43		       48		      pha		;
    102  2a44		       68		      pla		;
    103  2a45		       48		      pha		; Shouldn't hurt anything!
    104  2a46		       a9 00		      lda	#0
    105  2a48		       88		      dey
    106  2a49		       85 0e		      sta	PF1
    107  2a4b		       10 d1		      bpl	lifeloop
    108  2a4d		       85 02		      sta	WSYNC
    109  2a4f		       c8		      iny
    110  2a50		       84 0d		      sty	PF0
    111  2a52		       84 0f		      sty	PF2
    112  2a54		       84 0e		      sty	PF1
    113  2a56		       84 1b		      sty	GRP0
    114  2a58		       84 1c		      sty	GRP1
    115  2a5a		       60		      rts
    116  2a5b
    117  2a5b				  -	      if	(<*) > $F5
    118  2a5b				  -	      align	256
    119  2a5b					      endif
    120  2a5b				   lifenusiz1table
    121  2a5b		       00		      .byte.b	0
    122  2a5c				   lifenusiz0table
    123  2a5c		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2a64
    125  2a64				   statustable		; warning: page-wrapping might cause issues
    126  2a64							;0-7 and 16+
    127  2a64		       00		      .byte.b	%00000000
    128  2a65		       01		      .byte.b	%00000001
    129  2a66		       03		      .byte.b	%00000011
    130  2a67		       07		      .byte.b	%00000111
    131  2a68		       0f		      .byte.b	%00001111
    132  2a69		       1f		      .byte.b	%00011111
    133  2a6a		       3f		      .byte.b	%00111111
    134  2a6b		       7f		      .byte.b	%01111111
    135  2a6c		       ff		      .byte.b	255
    136  2a6d		       ff		      .byte.b	255
    137  2a6e		       ff		      .byte.b	255
    138  2a6f		       ff		      .byte.b	255
    139  2a70		       ff		      .byte.b	255
    140  2a71		       ff		      .byte.b	255
    141  2a72		       ff		      .byte.b	255
    142  2a73		       ff		      .byte.b	255
    143  2a74							; 8-15
    144  2a74		       00		      .byte.b	0
    145  2a75		       00		      .byte.b	0
    146  2a76		       00		      .byte.b	0
    147  2a77		       00		      .byte.b	0
    148  2a78		       00		      .byte.b	0
    149  2a79		       00		      .byte.b	0
    150  2a7a		       00		      .byte.b	0
    151  2a7b		       00		      .byte.b	0
    152  2a7c		       00		      .byte.b	%00000000
    153  2a7d		       80		      .byte.b	%10000000
    154  2a7e		       c0		      .byte.b	%11000000
    155  2a7f		       e0		      .byte.b	%11100000
    156  2a80		       f0		      .byte.b	%11110000
    157  2a81		       f8		      .byte.b	%11111000
    158  2a82		       fc		      .byte.b	%11111100
    159  2a83		       fe		      .byte.b	%11111110
    160  2a84
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
   4993  2a84				  -	      if	(<*) > (<(*+8))
   4994  2a84				  -	      repeat	($100-<*)
   4995  2a84				  -	      .byte	0
   4996  2a84				  -	      repend
   4997  2a84					      endif
   4998  2a84				   lives__L0116
   4999  2a84		       3c		      .byte.b	%00111100
   5000  2a85		       18		      .byte.b	%00011000
   5001  2a86		       3c		      .byte.b	%00111100
   5002  2a87		       3c		      .byte.b	%00111100
   5003  2a88		       3c		      .byte.b	%00111100
   5004  2a89		       18		      .byte.b	%00011000
   5005  2a8a		       00		      .byte.b	%00000000
   5006  2a8b		       00		      .byte.b	%00000000
   5007  2a8c				  -	      if	(<*) > (<(*+8))
   5008  2a8c				  -	      repeat	($100-<*)
   5009  2a8c				  -	      .byte	0
   5010  2a8c				  -	      repend
   5011  2a8c					      endif
   5012  2a8c				  -	      if	(<*) < 90
   5013  2a8c				  -	      repeat	(90-<*)
   5014  2a8c				  -	      .byte	0
   5015  2a8c				  -	      repend
   5016  2a8c					      endif
   5017  2a8c				   player37then_0
   5018  2a8c		       00		      .byte.b	0
   5019  2a8d		       66		      .byte.b	%01100110
   5020  2a8e		       ff		      .byte.b	%11111111
   5021  2a8f		       bd		      .byte.b	%10111101
   5022  2a90		       a5		      .byte.b	%10100101
   5023  2a91		       3c		      .byte.b	%00111100
   5024  2a92		       18		      .byte.b	%00011000
   5025  2a93		       18		      .byte.b	%00011000
   5026  2a94		       00		      .byte.b	%00000000
   5027  2a95				  -	      if	(<*) > (<(*+8))
   5028  2a95				  -	      repeat	($100-<*)
   5029  2a95				  -	      .byte	0
   5030  2a95				  -	      repend
   5031  2a95					      endif
   5032  2a95				  -	      if	(<*) < 90
   5033  2a95				  -	      repeat	(90-<*)
   5034  2a95				  -	      .byte	0
   5035  2a95				  -	      repend
   5036  2a95					      endif
   5037  2a95				   player38then_0
   5038  2a95		       00		      .byte.b	0
   5039  2a96		       00		      .byte.b	%00000000
   5040  2a97		       ff		      .byte.b	%11111111
   5041  2a98		       bd		      .byte.b	%10111101
   5042  2a99		       a5		      .byte.b	%10100101
   5043  2a9a		       3c		      .byte.b	%00111100
   5044  2a9b		       18		      .byte.b	%00011000
   5045  2a9c		       18		      .byte.b	%00011000
   5046  2a9d		       00		      .byte.b	%00000000
   5047  2a9e				  -	      if	(<*) > (<(*+7))
   5048  2a9e				  -	      repeat	($100-<*)
   5049  2a9e				  -	      .byte	0
   5050  2a9e				  -	      repend
   5051  2a9e					      endif
   5052  2a9e				  -	      if	(<*) < 90
   5053  2a9e				  -	      repeat	(90-<*)
   5054  2a9e				  -	      .byte	0
   5055  2a9e				  -	      repend
   5056  2a9e					      endif
   5057  2a9e				   player39then_1
   5058  2a9e		       3e		      .byte.b	%00111110
   5059  2a9f		       63		      .byte.b	%01100011
   5060  2aa0		       51		      .byte.b	%01010001
   5061  2aa1		       5d		      .byte.b	%01011101
   5062  2aa2		       55		      .byte.b	%01010101
   5063  2aa3		       5d		      .byte.b	%01011101
   5064  2aa4		       63		      .byte.b	%01100011
   5065  2aa5		       3e		      .byte.b	%00111110
   5066  2aa6				  -	      if	(<*) > (<(*+7))
   5067  2aa6				  -	      repeat	($100-<*)
   5068  2aa6				  -	      .byte	0
   5069  2aa6				  -	      repend
   5070  2aa6					      endif
   5071  2aa6				  -	      if	(<*) < 90
   5072  2aa6				  -	      repeat	(90-<*)
   5073  2aa6				  -	      .byte	0
   5074  2aa6				  -	      repend
   5075  2aa6					      endif
   5076  2aa6				   player41then_1
   5077  2aa6		       98		      .byte.b	%10011000
   5078  2aa7		       66		      .byte.b	%01100110
   5079  2aa8		       18		      .byte.b	%00011000
   5080  2aa9		       7c		      .byte.b	%01111100
   5081  2aaa		       18		      .byte.b	%00011000
   5082  2aab		       3c		      .byte.b	%00111100
   5083  2aac		       5a		      .byte.b	%01011010
   5084  2aad		       3c		      .byte.b	%00111100
   5085  2aae				  -	      if	(<*) > (<(*+7))
   5086  2aae				  -	      repeat	($100-<*)
   5087  2aae				  -	      .byte	0
   5088  2aae				  -	      repend
   5089  2aae					      endif
   5090  2aae				  -	      if	(<*) < 90
   5091  2aae				  -	      repeat	(90-<*)
   5092  2aae				  -	      .byte	0
   5093  2aae				  -	      repend
   5094  2aae					      endif
   5095  2aae				   player43then_1
   5096  2aae		       19		      .byte.b	%00011001
   5097  2aaf		       66		      .byte.b	%01100110
   5098  2ab0		       18		      .byte.b	%00011000
   5099  2ab1		       3e		      .byte.b	%00111110
   5100  2ab2		       18		      .byte.b	%00011000
   5101  2ab3		       3c		      .byte.b	%00111100
   5102  2ab4		       5a		      .byte.b	%01011010
   5103  2ab5		       3c		      .byte.b	%00111100
   5104  2ab6				  -	      if	(<*) > (<(*+7))
   5105  2ab6				  -	      repeat	($100-<*)
   5106  2ab6				  -	      .byte	0
   5107  2ab6				  -	      repend
   5108  2ab6					      endif
   5109  2ab6				  -	      if	(<*) < 90
   5110  2ab6				  -	      repeat	(90-<*)
   5111  2ab6				  -	      .byte	0
   5112  2ab6				  -	      repend
   5113  2ab6					      endif
   5114  2ab6				   player44then_2
   5115  2ab6		       01		      .byte.b	%00000001
   5116  2ab7		       99		      .byte.b	%10011001
   5117  2ab8		       ff		      .byte.b	%11111111
   5118  2ab9		       3c		      .byte.b	%00111100
   5119  2aba		       ff		      .byte.b	%11111111
   5120  2abb		       3c		      .byte.b	%00111100
   5121  2abc		       e7		      .byte.b	%11100111
   5122  2abd		       98		      .byte.b	%10011000
   5123  2abe				  -	      if	(<*) > (<(*+7))
   5124  2abe				  -	      repeat	($100-<*)
   5125  2abe				  -	      .byte	0
   5126  2abe				  -	      repend
   5127  2abe					      endif
   5128  2abe				  -	      if	(<*) < 90
   5129  2abe				  -	      repeat	(90-<*)
   5130  2abe				  -	      .byte	0
   5131  2abe				  -	      repend
   5132  2abe					      endif
   5133  2abe				   player45then_2
   5134  2abe		       80		      .byte.b	%10000000
   5135  2abf		       99		      .byte.b	%10011001
   5136  2ac0		       ff		      .byte.b	%11111111
   5137  2ac1		       3c		      .byte.b	%00111100
   5138  2ac2		       ff		      .byte.b	%11111111
   5139  2ac3		       3c		      .byte.b	%00111100
   5140  2ac4		       e7		      .byte.b	%11100111
   5141  2ac5		       19		      .byte.b	%00011001
   5142  2ac6				  -	      if	(<*) > (<(*+7))
   5143  2ac6				  -	      repeat	($100-<*)
   5144  2ac6				  -	      .byte	0
   5145  2ac6				  -	      repend
   5146  2ac6					      endif
   5147  2ac6				  -	      if	(<*) < 90
   5148  2ac6				  -	      repeat	(90-<*)
   5149  2ac6				  -	      .byte	0
   5150  2ac6				  -	      repend
   5151  2ac6					      endif
   5152  2ac6				   player46then_3
   5153  2ac6		       81		      .byte.b	%10000001
   5154  2ac7		       ff		      .byte.b	%11111111
   5155  2ac8		       24		      .byte.b	%00100100
   5156  2ac9		       c3		      .byte.b	%11000011
   5157  2aca		       5a		      .byte.b	%01011010
   5158  2acb		       42		      .byte.b	%01000010
   5159  2acc		       3c		      .byte.b	%00111100
   5160  2acd		       e7		      .byte.b	%11100111
   5161  2ace				  -	      if	(<*) > (<(*+7))
   5162  2ace				  -	      repeat	($100-<*)
   5163  2ace				  -	      .byte	0
   5164  2ace				  -	      repend
   5165  2ace					      endif
   5166  2ace				  -	      if	(<*) < 90
   5167  2ace				  -	      repeat	(90-<*)
   5168  2ace				  -	      .byte	0
   5169  2ace				  -	      repend
   5170  2ace					      endif
   5171  2ace				   player48then_3
   5172  2ace		       00		      .byte.b	%00000000
   5173  2acf		       ff		      .byte.b	%11111111
   5174  2ad0		       24		      .byte.b	%00100100
   5175  2ad1		       42		      .byte.b	%01000010
   5176  2ad2		       db		      .byte.b	%11011011
   5177  2ad3		       42		      .byte.b	%01000010
   5178  2ad4		       3c		      .byte.b	%00111100
   5179  2ad5		       e7		      .byte.b	%11100111
   5180  2ad6				  -	      if	(<*) > (<(*+7))
   5181  2ad6				  -	      repeat	($100-<*)
   5182  2ad6				  -	      .byte	0
   5183  2ad6				  -	      repend
   5184  2ad6					      endif
   5185  2ad6				  -	      if	(<*) < 90
   5186  2ad6				  -	      repeat	(90-<*)
   5187  2ad6				  -	      .byte	0
   5188  2ad6				  -	      repend
   5189  2ad6					      endif
   5190  2ad6				   player49then_3
   5191  2ad6		       00		      .byte.b	%00000000
   5192  2ad7		       7e		      .byte.b	%01111110
   5193  2ad8		       a5		      .byte.b	%10100101
   5194  2ad9		       42		      .byte.b	%01000010
   5195  2ada		       5a		      .byte.b	%01011010
   5196  2adb		       c3		      .byte.b	%11000011
   5197  2adc		       3c		      .byte.b	%00111100
   5198  2add		       e7		      .byte.b	%11100111
   5199  2ade				  -	      if	(<*) > (<(*+7))
   5200  2ade				  -	      repeat	($100-<*)
   5201  2ade				  -	      .byte	0
   5202  2ade				  -	      repend
   5203  2ade					      endif
   5204  2ade				  -	      if	(<*) < 90
   5205  2ade				  -	      repeat	(90-<*)
   5206  2ade				  -	      .byte	0
   5207  2ade				  -	      repend
   5208  2ade					      endif
   5209  2ade				   player51then_2
   5210  2ade		       3c		      .byte.b	%00111100
   5211  2adf		       db		      .byte.b	%11011011
   5212  2ae0		       5a		      .byte.b	%01011010
   5213  2ae1		       ff		      .byte.b	%11111111
   5214  2ae2		       99		      .byte.b	%10011001
   5215  2ae3		       a5		      .byte.b	%10100101
   5216  2ae4		       c3		      .byte.b	%11000011
   5217  2ae5		       7e		      .byte.b	%01111110
   5218  2ae6				  -	      if	(<*) > (<(*+7))
   5219  2ae6				  -	      repeat	($100-<*)
   5220  2ae6				  -	      .byte	0
   5221  2ae6				  -	      repend
   5222  2ae6					      endif
   5223  2ae6				  -	      if	(<*) < 90
   5224  2ae6				  -	      repeat	(90-<*)
   5225  2ae6				  -	      .byte	0
   5226  2ae6				  -	      repend
   5227  2ae6					      endif
   5228  2ae6				   player53then_2
   5229  2ae6		       5a		      .byte.b	%01011010
   5230  2ae7		       5a		      .byte.b	%01011010
   5231  2ae8		       5a		      .byte.b	%01011010
   5232  2ae9		       ff		      .byte.b	%11111111
   5233  2aea		       81		      .byte.b	%10000001
   5234  2aeb		       a5		      .byte.b	%10100101
   5235  2aec		       c3		      .byte.b	%11000011
   5236  2aed		       7e		      .byte.b	%01111110
   5237  2aee				  -	      if	(<*) > (<(*+7))
   5238  2aee				  -	      repeat	($100-<*)
   5239  2aee				  -	      .byte	0
   5240  2aee				  -	      repend
   5241  2aee					      endif
   5242  2aee				  -	      if	(<*) < 90
   5243  2aee				  -	      repeat	(90-<*)
   5244  2aee				  -	      .byte	0
   5245  2aee				  -	      repend
   5246  2aee					      endif
   5247  2aee				   player54then_4
   5248  2aee		       24		      .byte.b	%00100100
   5249  2aef		       a5		      .byte.b	%10100101
   5250  2af0		       5a		      .byte.b	%01011010
   5251  2af1		       3c		      .byte.b	%00111100
   5252  2af2		       7e		      .byte.b	%01111110
   5253  2af3		       99		      .byte.b	%10011001
   5254  2af4		       24		      .byte.b	%00100100
   5255  2af5		       42		      .byte.b	%01000010
   5256  2af6				  -	      if	(<*) > (<(*+7))
   5257  2af6				  -	      repeat	($100-<*)
   5258  2af6				  -	      .byte	0
   5259  2af6				  -	      repend
   5260  2af6					      endif
   5261  2af6				  -	      if	(<*) < 90
   5262  2af6				  -	      repeat	(90-<*)
   5263  2af6				  -	      .byte	0
   5264  2af6				  -	      repend
   5265  2af6					      endif
   5266  2af6				   player55then_4
   5267  2af6		       24		      .byte.b	%00100100
   5268  2af7		       24		      .byte.b	%00100100
   5269  2af8		       db		      .byte.b	%11011011
   5270  2af9		       3c		      .byte.b	%00111100
   5271  2afa		       ff		      .byte.b	%11111111
   5272  2afb		       18		      .byte.b	%00011000
   5273  2afc		       24		      .byte.b	%00100100
   5274  2afd		       24		      .byte.b	%00100100
   5275  2afe					      if	(<*) > (<(*+7))
   5276  2afe					      repeat	($100-<*)
   5277  2afe		       00		      .byte.b	0
   5276  2afe					      repend
   5277  2aff		       00		      .byte.b	0
   5278  2b00					      repend
   5279  2b00					      endif
   5280  2b00					      if	(<*) < 90
   5281  2b00					      repeat	(90-<*)
   5282  2b00		       00		      .byte.b	0
   5281  2b00					      repend
   5282  2b01		       00		      .byte.b	0
   5281  2b01					      repend
   5282  2b02		       00		      .byte.b	0
   5281  2b02					      repend
   5282  2b03		       00		      .byte.b	0
   5281  2b03					      repend
   5282  2b04		       00		      .byte.b	0
   5281  2b04					      repend
   5282  2b05		       00		      .byte.b	0
   5281  2b05					      repend
   5282  2b06		       00		      .byte.b	0
   5281  2b06					      repend
   5282  2b07		       00		      .byte.b	0
   5281  2b07					      repend
   5282  2b08		       00		      .byte.b	0
   5281  2b08					      repend
   5282  2b09		       00		      .byte.b	0
   5281  2b09					      repend
   5282  2b0a		       00		      .byte.b	0
   5281  2b0a					      repend
   5282  2b0b		       00		      .byte.b	0
   5281  2b0b					      repend
   5282  2b0c		       00		      .byte.b	0
   5281  2b0c					      repend
   5282  2b0d		       00		      .byte.b	0
   5281  2b0d					      repend
   5282  2b0e		       00		      .byte.b	0
   5281  2b0e					      repend
   5282  2b0f		       00		      .byte.b	0
   5281  2b0f					      repend
   5282  2b10		       00		      .byte.b	0
   5281  2b10					      repend
   5282  2b11		       00		      .byte.b	0
   5281  2b11					      repend
   5282  2b12		       00		      .byte.b	0
   5281  2b12					      repend
   5282  2b13		       00		      .byte.b	0
   5281  2b13					      repend
   5282  2b14		       00		      .byte.b	0
   5281  2b14					      repend
   5282  2b15		       00		      .byte.b	0
   5281  2b15					      repend
   5282  2b16		       00		      .byte.b	0
   5281  2b16					      repend
   5282  2b17		       00		      .byte.b	0
   5281  2b17					      repend
   5282  2b18		       00		      .byte.b	0
   5281  2b18					      repend
   5282  2b19		       00		      .byte.b	0
   5281  2b19					      repend
   5282  2b1a		       00		      .byte.b	0
   5281  2b1a					      repend
   5282  2b1b		       00		      .byte.b	0
   5281  2b1b					      repend
   5282  2b1c		       00		      .byte.b	0
   5281  2b1c					      repend
   5282  2b1d		       00		      .byte.b	0
   5281  2b1d					      repend
   5282  2b1e		       00		      .byte.b	0
   5281  2b1e					      repend
   5282  2b1f		       00		      .byte.b	0
   5281  2b1f					      repend
   5282  2b20		       00		      .byte.b	0
   5281  2b20					      repend
   5282  2b21		       00		      .byte.b	0
   5281  2b21					      repend
   5282  2b22		       00		      .byte.b	0
   5281  2b22					      repend
   5282  2b23		       00		      .byte.b	0
   5281  2b23					      repend
   5282  2b24		       00		      .byte.b	0
   5281  2b24					      repend
   5282  2b25		       00		      .byte.b	0
   5281  2b25					      repend
   5282  2b26		       00		      .byte.b	0
   5281  2b26					      repend
   5282  2b27		       00		      .byte.b	0
   5281  2b27					      repend
   5282  2b28		       00		      .byte.b	0
   5281  2b28					      repend
   5282  2b29		       00		      .byte.b	0
   5281  2b29					      repend
   5282  2b2a		       00		      .byte.b	0
   5281  2b2a					      repend
   5282  2b2b		       00		      .byte.b	0
   5281  2b2b					      repend
   5282  2b2c		       00		      .byte.b	0
   5281  2b2c					      repend
   5282  2b2d		       00		      .byte.b	0
   5281  2b2d					      repend
   5282  2b2e		       00		      .byte.b	0
   5281  2b2e					      repend
   5282  2b2f		       00		      .byte.b	0
   5281  2b2f					      repend
   5282  2b30		       00		      .byte.b	0
   5281  2b30					      repend
   5282  2b31		       00		      .byte.b	0
   5281  2b31					      repend
   5282  2b32		       00		      .byte.b	0
   5281  2b32					      repend
   5282  2b33		       00		      .byte.b	0
   5281  2b33					      repend
   5282  2b34		       00		      .byte.b	0
   5281  2b34					      repend
   5282  2b35		       00		      .byte.b	0
   5281  2b35					      repend
   5282  2b36		       00		      .byte.b	0
   5281  2b36					      repend
   5282  2b37		       00		      .byte.b	0
   5281  2b37					      repend
   5282  2b38		       00		      .byte.b	0
   5281  2b38					      repend
   5282  2b39		       00		      .byte.b	0
   5281  2b39					      repend
   5282  2b3a		       00		      .byte.b	0
   5281  2b3a					      repend
   5282  2b3b		       00		      .byte.b	0
   5281  2b3b					      repend
   5282  2b3c		       00		      .byte.b	0
   5281  2b3c					      repend
   5282  2b3d		       00		      .byte.b	0
   5281  2b3d					      repend
   5282  2b3e		       00		      .byte.b	0
   5281  2b3e					      repend
   5282  2b3f		       00		      .byte.b	0
   5281  2b3f					      repend
   5282  2b40		       00		      .byte.b	0
   5281  2b40					      repend
   5282  2b41		       00		      .byte.b	0
   5281  2b41					      repend
   5282  2b42		       00		      .byte.b	0
   5281  2b42					      repend
   5282  2b43		       00		      .byte.b	0
   5281  2b43					      repend
   5282  2b44		       00		      .byte.b	0
   5281  2b44					      repend
   5282  2b45		       00		      .byte.b	0
   5281  2b45					      repend
   5282  2b46		       00		      .byte.b	0
   5281  2b46					      repend
   5282  2b47		       00		      .byte.b	0
   5281  2b47					      repend
   5282  2b48		       00		      .byte.b	0
   5281  2b48					      repend
   5282  2b49		       00		      .byte.b	0
   5281  2b49					      repend
   5282  2b4a		       00		      .byte.b	0
   5281  2b4a					      repend
   5282  2b4b		       00		      .byte.b	0
   5281  2b4b					      repend
   5282  2b4c		       00		      .byte.b	0
   5281  2b4c					      repend
   5282  2b4d		       00		      .byte.b	0
   5281  2b4d					      repend
   5282  2b4e		       00		      .byte.b	0
   5281  2b4e					      repend
   5282  2b4f		       00		      .byte.b	0
   5281  2b4f					      repend
   5282  2b50		       00		      .byte.b	0
   5281  2b50					      repend
   5282  2b51		       00		      .byte.b	0
   5281  2b51					      repend
   5282  2b52		       00		      .byte.b	0
   5281  2b52					      repend
   5282  2b53		       00		      .byte.b	0
   5281  2b53					      repend
   5282  2b54		       00		      .byte.b	0
   5281  2b54					      repend
   5282  2b55		       00		      .byte.b	0
   5281  2b55					      repend
   5282  2b56		       00		      .byte.b	0
   5281  2b56					      repend
   5282  2b57		       00		      .byte.b	0
   5281  2b57					      repend
   5282  2b58		       00		      .byte.b	0
   5281  2b58					      repend
   5282  2b59		       00		      .byte.b	0
   5283  2b5a					      repend
   5284  2b5a					      endif
   5285  2b5a				   playerL0139_5
   5286  2b5a		       91		      .byte.b	%10010001
   5287  2b5b		       5a		      .byte.b	%01011010
   5288  2b5c		       24		      .byte.b	%00100100
   5289  2b5d		       db		      .byte.b	%11011011
   5290  2b5e		       5a		      .byte.b	%01011010
   5291  2b5f		       24		      .byte.b	%00100100
   5292  2b60		       5a		      .byte.b	%01011010
   5293  2b61		       89		      .byte.b	%10001001
   5294  2b62				  -	      if	((>(*+11)) > (>*))
   5295  2b62				  -	      ALIGN	256
   5296  2b62					      endif
   5297  2b62				   PF1_data0
   5298  2b62		       7f		      .byte.b	%01111111
   5299  2b63		       7f		      .byte.b	%01111111
   5300  2b64		       6b		      .byte.b	%01101011
   5301  2b65		       3e		      .byte.b	%00111110
   5302  2b66		       00		      .byte.b	%00000000
   5303  2b67		       00		      .byte.b	%00000000
   5304  2b68		       00		      .byte.b	%00000000
   5305  2b69		       00		      .byte.b	%00000000
   5306  2b6a		       00		      .byte.b	%00000000
   5307  2b6b		       00		      .byte.b	%00000000
   5308  2b6c		       00		      .byte.b	%00000000
   5309  2b6d				  -	      if	((>(*+11)) > (>*))
   5310  2b6d				  -	      ALIGN	256
   5311  2b6d					      endif
   5312  2b6d				   PF2_data0
   5313  2b6d		       6c		      .byte.b	%01101100
   5314  2b6e		       7c		      .byte.b	%01111100
   5315  2b6f		       54		      .byte.b	%01010100
   5316  2b70		       7c		      .byte.b	%01111100
   5317  2b71		       00		      .byte.b	%00000000
   5318  2b72		       00		      .byte.b	%00000000
   5319  2b73		       00		      .byte.b	%00000000
   5320  2b74		       00		      .byte.b	%00000000
   5321  2b75		       00		      .byte.b	%00000000
   5322  2b76		       00		      .byte.b	%00000000
   5323  2b77		       00		      .byte.b	%00000000
   5324  2b78					      if	ECHOFIRST
      1020 bytes of ROM space left in bank 2
   5325  2b78					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5326  2b78					      endif
   5327  2b78		       00 01	   ECHOFIRST  =	1
   5328  2b78
   5329  2b78
   5330  2b78							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5331  2b78
   5332  2b78							; feel free to modify the score graphics - just keep each digit 8 high
   5333  2b78							; and keep the conditional compilation stuff intact
   5334  2b78				  -	      ifconst	ROM2k
   5335  2b78				  -	      ORG	$F7AC-8
   5336  2b78					      else
   5337  2b78					      ifconst	bankswitch
   5338  2b78					      if	bankswitch == 8
   5339  2f74					      ORG	$2F94-bscode_length
   5340  2f74					      RORG	$FF94-bscode_length
   5341  2f74					      endif
   5342  2f74				  -	      if	bankswitch == 16
   5343  2f74				  -	      ORG	$4F94-bscode_length
   5344  2f74				  -	      RORG	$FF94-bscode_length
   5345  2f74					      endif
   5346  2f74				  -	      if	bankswitch == 32
   5347  2f74				  -	      ORG	$8F94-bscode_length
   5348  2f74				  -	      RORG	$FF94-bscode_length
   5349  2f74					      endif
   5350  2f74				  -	      if	bankswitch == 64
   5351  2f74				  -	      ORG	$10F80-bscode_length
   5352  2f74				  -	      RORG	$1FF80-bscode_length
   5353  2f74					      endif
   5354  2f74				  -	      else
   5355  2f74				  -	      ORG	$FF9C
   5356  2f74					      endif
   5357  2f74					      endif
   5358  2f74
   5359  2f74							; font equates
   5360  2f74		       00 01	   .21stcentury =	1
   5361  2f74		       00 02	   alarmclock =	2
   5362  2f74		       00 03	   handwritten =	3
   5363  2f74		       00 04	   interrupted =	4
   5364  2f74		       00 05	   retroputer =	5
   5365  2f74		       00 06	   whimsey    =	6
   5366  2f74		       00 07	   tiny       =	7
   5367  2f74		       00 08	   hex	      =	8
   5368  2f74
   5369  2f74				  -	      ifconst	font
   5370  2f74				  -	      if	font == hex
   5371  2f74				  -	      ORG	. - 48
   5372  2f74				  -	      endif
   5373  2f74					      endif
   5374  2f74
   5375  2f74				   scoretable
   5376  2f74
   5377  2f74				  -	      ifconst	font
   5378  2f74				  -	      if	font == .21stcentury
   5379  2f74				  -	      include	"score_graphics.asm.21stcentury"
   5380  2f74				  -	      endif
   5381  2f74				  -	      if	font == alarmclock
   5382  2f74				  -	      include	"score_graphics.asm.alarmclock"
   5383  2f74				  -	      endif
   5384  2f74				  -	      if	font == handwritten
   5385  2f74				  -	      include	"score_graphics.asm.handwritten"
   5386  2f74				  -	      endif
   5387  2f74				  -	      if	font == interrupted
   5388  2f74				  -	      include	"score_graphics.asm.interrupted"
   5389  2f74				  -	      endif
   5390  2f74				  -	      if	font == retroputer
   5391  2f74				  -	      include	"score_graphics.asm.retroputer"
   5392  2f74				  -	      endif
   5393  2f74				  -	      if	font == whimsey
   5394  2f74				  -	      include	"score_graphics.asm.whimsey"
   5395  2f74				  -	      endif
   5396  2f74				  -	      if	font == tiny
   5397  2f74				  -	      include	"score_graphics.asm.tiny"
   5398  2f74				  -	      endif
   5399  2f74				  -	      if	font == hex
   5400  2f74				  -	      include	"score_graphics.asm.hex"
   5401  2f74				  -	      endif
   5402  2f74					      else		; default font
   5403  2f74
   5404  2f74		       3c		      .byte.b	%00111100
   5405  2f75		       66		      .byte.b	%01100110
   5406  2f76		       66		      .byte.b	%01100110
   5407  2f77		       66		      .byte.b	%01100110
   5408  2f78		       66		      .byte.b	%01100110
   5409  2f79		       66		      .byte.b	%01100110
   5410  2f7a		       66		      .byte.b	%01100110
   5411  2f7b		       3c		      .byte.b	%00111100
   5412  2f7c
   5413  2f7c		       7e		      .byte.b	%01111110
   5414  2f7d		       18		      .byte.b	%00011000
   5415  2f7e		       18		      .byte.b	%00011000
   5416  2f7f		       18		      .byte.b	%00011000
   5417  2f80		       18		      .byte.b	%00011000
   5418  2f81		       38		      .byte.b	%00111000
   5419  2f82		       18		      .byte.b	%00011000
   5420  2f83		       08		      .byte.b	%00001000
   5421  2f84
   5422  2f84		       7e		      .byte.b	%01111110
   5423  2f85		       60		      .byte.b	%01100000
   5424  2f86		       60		      .byte.b	%01100000
   5425  2f87		       3c		      .byte.b	%00111100
   5426  2f88		       06		      .byte.b	%00000110
   5427  2f89		       06		      .byte.b	%00000110
   5428  2f8a		       46		      .byte.b	%01000110
   5429  2f8b		       3c		      .byte.b	%00111100
   5430  2f8c
   5431  2f8c		       3c		      .byte.b	%00111100
   5432  2f8d		       46		      .byte.b	%01000110
   5433  2f8e		       06		      .byte.b	%00000110
   5434  2f8f		       06		      .byte.b	%00000110
   5435  2f90		       1c		      .byte.b	%00011100
   5436  2f91		       06		      .byte.b	%00000110
   5437  2f92		       46		      .byte.b	%01000110
   5438  2f93		       3c		      .byte.b	%00111100
   5439  2f94
   5440  2f94		       0c		      .byte.b	%00001100
   5441  2f95		       0c		      .byte.b	%00001100
   5442  2f96		       7e		      .byte.b	%01111110
   5443  2f97		       4c		      .byte.b	%01001100
   5444  2f98		       4c		      .byte.b	%01001100
   5445  2f99		       2c		      .byte.b	%00101100
   5446  2f9a		       1c		      .byte.b	%00011100
   5447  2f9b		       0c		      .byte.b	%00001100
   5448  2f9c
   5449  2f9c		       3c		      .byte.b	%00111100
   5450  2f9d		       46		      .byte.b	%01000110
   5451  2f9e		       06		      .byte.b	%00000110
   5452  2f9f		       06		      .byte.b	%00000110
   5453  2fa0		       3c		      .byte.b	%00111100
   5454  2fa1		       60		      .byte.b	%01100000
   5455  2fa2		       60		      .byte.b	%01100000
   5456  2fa3		       7e		      .byte.b	%01111110
   5457  2fa4
   5458  2fa4		       3c		      .byte.b	%00111100
   5459  2fa5		       66		      .byte.b	%01100110
   5460  2fa6		       66		      .byte.b	%01100110
   5461  2fa7		       66		      .byte.b	%01100110
   5462  2fa8		       7c		      .byte.b	%01111100
   5463  2fa9		       60		      .byte.b	%01100000
   5464  2faa		       62		      .byte.b	%01100010
   5465  2fab		       3c		      .byte.b	%00111100
   5466  2fac
   5467  2fac		       30		      .byte.b	%00110000
   5468  2fad		       30		      .byte.b	%00110000
   5469  2fae		       30		      .byte.b	%00110000
   5470  2faf		       18		      .byte.b	%00011000
   5471  2fb0		       0c		      .byte.b	%00001100
   5472  2fb1		       06		      .byte.b	%00000110
   5473  2fb2		       42		      .byte.b	%01000010
   5474  2fb3		       3e		      .byte.b	%00111110
   5475  2fb4
   5476  2fb4		       3c		      .byte.b	%00111100
   5477  2fb5		       66		      .byte.b	%01100110
   5478  2fb6		       66		      .byte.b	%01100110
   5479  2fb7		       66		      .byte.b	%01100110
   5480  2fb8		       3c		      .byte.b	%00111100
   5481  2fb9		       66		      .byte.b	%01100110
   5482  2fba		       66		      .byte.b	%01100110
   5483  2fbb		       3c		      .byte.b	%00111100
   5484  2fbc
   5485  2fbc		       3c		      .byte.b	%00111100
   5486  2fbd		       46		      .byte.b	%01000110
   5487  2fbe		       06		      .byte.b	%00000110
   5488  2fbf		       3e		      .byte.b	%00111110
   5489  2fc0		       66		      .byte.b	%01100110
   5490  2fc1		       66		      .byte.b	%01100110
   5491  2fc2		       66		      .byte.b	%01100110
   5492  2fc3		       3c		      .byte.b	%00111100
   5493  2fc4
   5494  2fc4					      ifnconst	DPC_kernel_options
   5495  2fc4
   5496  2fc4		       00		      .byte.b	%00000000
   5497  2fc5		       00		      .byte.b	%00000000
   5498  2fc6		       00		      .byte.b	%00000000
   5499  2fc7		       00		      .byte.b	%00000000
   5500  2fc8		       00		      .byte.b	%00000000
   5501  2fc9		       00		      .byte.b	%00000000
   5502  2fca		       00		      .byte.b	%00000000
   5503  2fcb		       00		      .byte.b	%00000000
   5504  2fcc
   5505  2fcc					      endif
   5506  2fcc
   5507  2fcc					      endif
   5508  2fcc
   5509  2fcc				  -	      ifconst	ROM2k
   5510  2fcc				  -	      ORG	$F7FC
   5511  2fcc					      else
   5512  2fcc					      ifconst	bankswitch
   5513  2fcc					      if	bankswitch == 8
   5514  2fd4					      ORG	$2FF4-bscode_length
   5515  2fd4					      RORG	$FFF4-bscode_length
   5516  2fd4					      endif
   5517  2fd4				  -	      if	bankswitch == 16
   5518  2fd4				  -	      ORG	$4FF4-bscode_length
   5519  2fd4				  -	      RORG	$FFF4-bscode_length
   5520  2fd4					      endif
   5521  2fd4				  -	      if	bankswitch == 32
   5522  2fd4				  -	      ORG	$8FF4-bscode_length
   5523  2fd4				  -	      RORG	$FFF4-bscode_length
   5524  2fd4					      endif
   5525  2fd4				  -	      if	bankswitch == 64
   5526  2fd4				  -	      ORG	$10FE0-bscode_length
   5527  2fd4				  -	      RORG	$1FFE0-bscode_length
   5528  2fd4					      endif
   5529  2fd4				  -	      else
   5530  2fd4				  -	      ORG	$FFFC
   5531  2fd4					      endif
   5532  2fd4					      endif
   5533  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5534  2fd4
   5535  2fd4							; every bank has this stuff at the same place
   5536  2fd4							; this code can switch to/from any bank at any entry point
   5537  2fd4							; and can preserve register values
   5538  2fd4							; note: lines not starting with a space are not placed in all banks
   5539  2fd4							;
   5540  2fd4							; line below tells the compiler how long this is - do not remove
   5541  2fd4							;size=32
   5542  2fd4
   5543  2fd4				   begin_bscode
   5544  2fd4		       a2 ff		      ldx	#$ff
   5545  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   5546  2fd6				  -	      stx	FASTFETCH
   5547  2fd6					      endif
   5548  2fd6		       9a		      txs
   5549  2fd7				  -	      if	bankswitch == 64
   5550  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5551  2fd7					      else
   5552  2fd7		       a9 f3		      lda	#>(start-1)
   5553  2fd9					      endif
   5554  2fd9		       48		      pha
   5555  2fda		       a9 f7		      lda	#<(start-1)
   5556  2fdc		       48		      pha
   5557  2fdd
   5558  2fdd				   BS_return
   5559  2fdd		       48		      pha
   5560  2fde		       8a		      txa
   5561  2fdf		       48		      pha
   5562  2fe0		       ba		      tsx
   5563  2fe1
   5564  2fe1					      if	bankswitch != 64
   5565  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   5566  2fe3
   5567  2fe3		       2a		      rol
   5568  2fe4		       2a		      rol
   5569  2fe5		       2a		      rol
   5570  2fe6		       2a		      rol
   5571  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5572  2fe9		       aa		      tax
   5573  2fea		       e8		      inx
   5574  2feb				  -	      else
   5575  2feb				  -	      lda	4,x	; get high byte of return address
   5576  2feb				  -	      tay
   5577  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5578  2feb				  -	      sta	4,x
   5579  2feb				  -	      tya
   5580  2feb				  -	      lsr
   5581  2feb				  -	      lsr
   5582  2feb				  -	      lsr
   5583  2feb				  -	      lsr
   5584  2feb				  -	      tax
   5585  2feb				  -	      inx
   5586  2feb					      endif
   5587  2feb
   5588  2feb				   BS_jsr
   5589  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5590  2fee		       68		      pla
   5591  2fef		       aa		      tax
   5592  2ff0		       68		      pla
   5593  2ff1		       60		      rts
   5594  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5595  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5596  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5597  2ff2					      endif
   5598  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5599  2ff2
   5600  2ff2					      ifconst	bankswitch
   5601  2ff2					      if	bankswitch == 8
   5602  2ffc					      ORG	$2FFC
   5603  2ffc					      RORG	$FFFC
   5604  2ffc					      endif
   5605  2ffc				  -	      if	bankswitch == 16
   5606  2ffc				  -	      ORG	$4FFC
   5607  2ffc				  -	      RORG	$FFFC
   5608  2ffc					      endif
   5609  2ffc				  -	      if	bankswitch == 32
   5610  2ffc				  -	      ORG	$8FFC
   5611  2ffc				  -	      RORG	$FFFC
   5612  2ffc					      endif
   5613  2ffc				  -	      if	bankswitch == 64
   5614  2ffc				  -	      ORG	$10FF0
   5615  2ffc				  -	      RORG	$1FFF0
   5616  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5617  2ffc				  -	      ORG	$10FF8
   5618  2ffc				  -	      RORG	$1FFF8
   5619  2ffc				  -	      ifconst	superchip
   5620  2ffc				  -	      .byte	"E","F","S","C"
   5621  2ffc				  -	      else
   5622  2ffc				  -	      .byte	"E","F","E","F"
   5623  2ffc				  -	      endif
   5624  2ffc				  -	      ORG	$10FFC
   5625  2ffc				  -	      RORG	$1FFFC
   5626  2ffc					      endif
   5627  2ffc				  -	      else
   5628  2ffc				  -	      ifconst	ROM2k
   5629  2ffc				  -	      ORG	$F7FC
   5630  2ffc				  -	      else
   5631  2ffc				  -	      ORG	$FFFC
   5632  2ffc				  -	      endif
   5633  2ffc					      endif
   5634  2ffc		       f8 f3		      .word.w	(start & $ffff)
   5635  2ffe		       f8 f3		      .word.w	(start & $ffff)
