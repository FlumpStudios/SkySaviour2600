------- FILE c:\Projects\SkySaviour2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 d4	   _sc3       =	score + 2
      7  3000 ????
      8  3000 ????	       00 d3	   _sc2       =	score + 1
      9  3000 ????
     10  3000 ????	       00 d2	   _sc1       =	score
     11  3000 ????
     12  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     13  3000 ????
     14  3000 ????	       00 f0	   gameReady  =	z
     15  3000 ????
     16  3000 ????	       00 ee	   _resetTicker =	x
     17  3000 ????
     18  3000 ????	       00 eb	   _High_Score2 =	u
     19  3000 ????
     20  3000 ????	       00 ea	   _High_Score1 =	t
     21  3000 ????
     22  3000 ????	       00 e9	   _High_Score3 =	s
     23  3000 ????
     24  3000 ????	       00 e8	   firstFrame =	r
     25  3000 ????
     26  3000 ????	       00 e6	   altSprite  =	p
     27  3000 ????
     28  3000 ????	       00 e5	   powerUpInPlay =	o
     29  3000 ????
     30  3000 ????	       00 e4	   ticker     =	n
     31  3000 ????
     32  3000 ????	       00 e3	   killCount  =	m
     33  3000 ????
     34  3000 ????	       00 e2	   bulletMultiplier =	l
     35  3000 ????
     36  3000 ????	       00 88	   asteroid4x =	player4x
     37  3000 ????	       00 87	   asteroid3x =	player3x
     38  3000 ????	       00 86	   asteroid2x =	player2x
     39  3000 ????	       00 85	   asteroidx  =	player1x
     40  3000 ????	       00 dd	   player3MoveLeft =	g
     41  3000 ????
     42  3000 ????	       00 dc	   explosionTicker =	f
     43  3000 ????
     44  3000 ????	       00 91	   asteroid4Y =	player4y
     45  3000 ????	       00 90	   asteroid3Y =	player3y
     46  3000 ????	       00 8f	   asteroid2Y =	player2y
     47  3000 ????	       00 8e	   asteroidY  =	player1y
     48  3000 ????	       00 d7	   _P0_Luminosity =	a
     49  3000 ????	       00 01	   bs_mask    =	1
     50  3000 ????	       00 08	   bankswitch =	8
     51  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     52  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .
     50  1100							; 
     51  1100
     52  1100				   .L08 		;  includesfile multisprite_superchip.inc
     53  1100
     54  1100				   .L09 		;  set kernel multisprite
     55  1100
     56  1100				   .L010		;  set romsize 8k
     57  1100
     58  1100				   .
     59  1100							; 
     60  1100
     61  1100				   .L011		;  pfheight = 7
     62  1100
     63  1100		       a9 07		      LDA	#7
     64  1102		       85 c4		      STA	pfheight
     65  1104				   .
     66  1104							; 
     67  1104
     68  1104				   .L012		;  playfield:
     69  1104
     70  1104		       a9 62		      LDA	#<PF1_data0
     71  1106		       85 bb		      STA	PF1pointer
     72  1108		       a9 fb		      LDA	#>PF1_data0
     73  110a		       85 bc		      STA	PF1pointer+1
     74  110c		       a9 6d		      LDA	#<PF2_data0
     75  110e		       85 bd		      STA	PF2pointer
     76  1110		       a9 fb		      LDA	#>PF2_data0
     77  1112		       85 be		      STA	PF2pointer+1
     78  1114				   .
     79  1114							; 
     80  1114
     81  1114				   .L013		;  _COLUP1  =	$3A
     82  1114
     83  1114		       a9 3a		      LDA	#$3A
     84  1116		       85 98		      STA	_COLUP1
     85  1118				   .L014		;  COLUP2  =  $A4
     86  1118
     87  1118		       a9 a4		      LDA	#$A4
     88  111a		       85 99		      STA	COLUP2
     89  111c				   .L015		;  COLUP3  =  $A4
     90  111c
     91  111c		       a9 a4		      LDA	#$A4
     92  111e		       85 9a		      STA	COLUP3
     93  1120				   .L016		;  COLUP4  =  $76
     94  1120
     95  1120		       a9 76		      LDA	#$76
     96  1122		       85 9b		      STA	COLUP4
     97  1124				   .L017		;  COLUP5  =  $2E
     98  1124
     99  1124		       a9 2e		      LDA	#$2E
    100  1126		       85 9c		      STA	COLUP5
    101  1128				   .
    102  1128							; 
    103  1128
    104  1128				   .
    105  1128							; 
    106  1128
    107  1128				   .L018		;  lifecolor  =  $aa
    108  1128
    109  1128		       a9 aa		      LDA	#$aa
    110  112a		       85 c0		      STA	lifecolor
    111  112c				   .
    112  112c							; 
    113  112c
    114  112c				   .
    115  112c							; 
    116  112c
    117  112c				   .
    118  112c							; 
    119  112c
    120  112c				   .L019		;  player0x = 76
    121  112c
    122  112c		       a9 4c		      LDA	#76
    123  112e		       85 84		      STA	player0x
    124  1130				   .L020		;  player0y = 30
    125  1130
    126  1130		       a9 1e		      LDA	#30
    127  1132		       85 8d		      STA	player0y
    128  1134				   .
    129  1134							; 
    130  1134
    131  1134				   .L021		;  player1x = 76
    132  1134
    133  1134		       a9 4c		      LDA	#76
    134  1136		       85 85		      STA	player1x
    135  1138				   .L022		;  player1y = 99
    136  1138
    137  1138		       a9 63		      LDA	#99
    138  113a		       85 8e		      STA	player1y
    139  113c				   .
    140  113c							; 
    141  113c
    142  113c				   .L023		;  player2x = 86
    143  113c
    144  113c		       a9 56		      LDA	#86
    145  113e		       85 86		      STA	player2x
    146  1140				   .L024		;  player2y = 100
    147  1140
    148  1140		       a9 64		      LDA	#100
    149  1142		       85 8f		      STA	player2y
    150  1144				   .
    151  1144							; 
    152  1144
    153  1144				   .L025		;  player3x = 96
    154  1144
    155  1144		       a9 60		      LDA	#96
    156  1146		       85 87		      STA	player3x
    157  1148				   .L026		;  player3y = 100
    158  1148
    159  1148		       a9 64		      LDA	#100
    160  114a		       85 90		      STA	player3y
    161  114c				   .
    162  114c							; 
    163  114c
    164  114c				   .L027		;  player4x = 116
    165  114c
    166  114c		       a9 74		      LDA	#116
    167  114e		       85 88		      STA	player4x
    168  1150				   .L028		;  player4y = 100
    169  1150
    170  1150		       a9 64		      LDA	#100
    171  1152		       85 91		      STA	player4y
    172  1154				   .
    173  1154							; 
    174  1154
    175  1154				   .L029		;  player5x = 100
    176  1154
    177  1154		       a9 64		      LDA	#100
    178  1156		       85 89		      STA	player5x
    179  1158				   .L030		;  player5y =	200
    180  1158
    181  1158		       a9 c8		      LDA	#200
    182  115a		       85 92		      STA	player5y
    183  115c				   .L031		;  missile0y = 100
    184  115c
    185  115c		       a9 64		      LDA	#100
    186  115e		       85 8a		      STA	missile0y
    187  1160				   .
    188  1160							; 
    189  1160
    190  1160				   .
    191  1160							; 
    192  1160
    193  1160				   .L032		;  missile1y = 200
    194  1160
    195  1160		       a9 c8		      LDA	#200
    196  1162		       85 8b		      STA	missile1y
    197  1164				   .L033		;  missile1x = 50
    198  1164
    199  1164		       a9 32		      LDA	#50
    200  1166		       85 81		      STA	missile1x
    201  1168				   .
    202  1168							; 
    203  1168
    204  1168				   .
    205  1168							; 
    206  1168
    207  1168				   .
    208  1168							; 
    209  1168
    210  1168				   .
    211  1168							; 
    212  1168
    213  1168				   .L034		;  dim _P0_Luminosity	=  a.b
    214  1168
    215  1168				   .L035		;  dim asteroidY  =  player1y.b
    216  1168
    217  1168				   .L036		;  dim asteroid2Y  =  player2y.c
    218  1168
    219  1168				   .L037		;  dim asteroid3Y  =  player3y.d
    220  1168
    221  1168				   .L038		;  dim asteroid4Y  =  player4y.e
    222  1168
    223  1168				   .L039		;  dim explosionTicker  =  f
    224  1168
    225  1168				   .L040		;  dim player3MoveLeft  =  g
    226  1168
    227  1168				   .L041		;  dim asteroidx  =  player1x.h
    228  1168
    229  1168				   .L042		;  dim asteroid2x  =  player2x.i
    230  1168
    231  1168				   .L043		;  dim asteroid3x  =  player3x.j
    232  1168
    233  1168				   .L044		;  dim asteroid4x  =  player4x.k
    234  1168
    235  1168				   .L045		;  dim bulletMultiplier  =  l
    236  1168
    237  1168				   .L046		;  dim killCount  =  m
    238  1168
    239  1168				   .L047		;  dim ticker	=  n
    240  1168
    241  1168				   .L048		;  dim powerUpInPlay  =  o
    242  1168
    243  1168				   .L049		;  dim altSprite  =  p
    244  1168
    245  1168				   .L050		;  dim firstFrame  =  r
    246  1168
    247  1168				   .L051		;  dim _High_Score3  =  s
    248  1168
    249  1168				   .L052		;  dim _High_Score1  =  t
    250  1168
    251  1168				   .L053		;  dim _High_Score2  =  u
    252  1168
    253  1168				   .L054		;  dim _resetTicker  =  x
    254  1168
    255  1168				   .L055		;  dim gameReady  =  z
    256  1168
    257  1168				   .
    258  1168							; 
    259  1168
    260  1168				   .L056		;  dim _Bit6_Sequence_Switch  =  y
    261  1168
    262  1168				   .
    263  1168							; 
    264  1168
    265  1168				   .L057		;  dim _sc1  =  score
    266  1168
    267  1168				   .L058		;  dim _sc2  =  score + 1
    268  1168
    269  1168				   .L059		;  dim _sc3  =  score + 2
    270  1168
    271  1168				   .L060		;  dim titlescreencolor  =  $F0
    272  1168
    273  1168				   .
    274  1168							; 
    275  1168
    276  1168				   .
    277  1168							; 
    278  1168
    279  1168				   .
    280  1168							; 
    281  1168
    282  1168				   .
    283  1168							; 
    284  1168
    285  1168				   .
    286  1168							; 
    287  1168
    288  1168				   .L061		;  bulletMultiplier  =  0
    289  1168
    290  1168		       a9 00		      LDA	#0
    291  116a		       85 e2		      STA	bulletMultiplier
    292  116c				   .L062		;  _High_Score1  =  _sc1
    293  116c
    294  116c		       a5 d2		      LDA	_sc1
    295  116e		       85 ea		      STA	_High_Score1
    296  1170				   .L063		;  _High_Score2  =  _sc2
    297  1170
    298  1170		       a5 d3		      LDA	_sc2
    299  1172		       85 eb		      STA	_High_Score2
    300  1174				   .L064		;  _High_Score3  =  _sc3
    301  1174
    302  1174		       a5 d4		      LDA	_sc3
    303  1176		       85 e9		      STA	_High_Score3
    304  1178				   .L065		;  lives  =  192
    305  1178
    306  1178		       a9 c0		      LDA	#192
    307  117a		       85 c2		      STA	lives
    308  117c				   .L066		;  ticker  =  0
    309  117c
    310  117c		       a9 00		      LDA	#0
    311  117e		       85 e4		      STA	ticker
    312  1180				   .L067		;  _resetTicker  =  0
    313  1180
    314  1180		       a9 00		      LDA	#0
    315  1182		       85 ee		      STA	_resetTicker
    316  1184				   .L068		;  altSprite  =  0
    317  1184
    318  1184		       a9 00		      LDA	#0
    319  1186		       85 e6		      STA	altSprite
    320  1188				   .L069		;  explosionTicker  =	0
    321  1188
    322  1188		       a9 00		      LDA	#0
    323  118a		       85 dc		      STA	explosionTicker
    324  118c				   .L070		;  scorecolor	=  $1b
    325  118c
    326  118c		       a9 1b		      LDA	#$1b
    327  118e		       85 d5		      STA	scorecolor
    328  1190				   .L071		;  firstFrame	=  0
    329  1190
    330  1190		       a9 00		      LDA	#0
    331  1192		       85 e8		      STA	firstFrame
    332  1194				   .L072		;  player3MoveLeft  =	1
    333  1194
    334  1194		       a9 01		      LDA	#1
    335  1196		       85 dd		      STA	player3MoveLeft
    336  1198				   .L073		;  killCount  =  0
    337  1198
    338  1198		       a9 00		      LDA	#0
    339  119a		       85 e3		      STA	killCount
    340  119c				   .L074		;  powerUpInPlay  =  0
    341  119c
    342  119c		       a9 00		      LDA	#0
    343  119e		       85 e5		      STA	powerUpInPlay
    344  11a0				   .sprites
    345  11a0							; sprites
    346  11a0
    347  11a0				   .L075		;  ticker  =  ticker  +  1
    348  11a0
    349  11a0		       e6 e4		      INC	ticker
    350  11a2				   .L076		;  if ticker  >  10 then COLUBK  =  $0  :  ticker  =  0  :  AUDV0  =  0  :  AUDC0  =  0  :  AUDF0  =  0
    351  11a2
    352  11a2		       a9 0a		      LDA	#10
    353  11a4		       c5 e4		      CMP	ticker
    354  11a6		       b0 0e		      BCS	.skipL076
    355  11a8				   .condpart0
    356  11a8		       a9 00		      LDA	#$0
    357  11aa		       85 09		      STA	COLUBK
    358  11ac		       a9 00		      LDA	#0
    359  11ae		       85 e4		      STA	ticker
    360  11b0		       85 19		      STA	AUDV0
    361  11b2		       85 15		      STA	AUDC0
    362  11b4		       85 17		      STA	AUDF0
    363  11b6				   .skipL076
    364  11b6				   .
    365  11b6							; 
    366  11b6
    367  11b6				   .
    368  11b6							; 
    369  11b6
    370  11b6				   .
    371  11b6							; 
    372  11b6
    373  11b6				   .
    374  11b6							; 
    375  11b6
    376  11b6				   .
    377  11b6							; 
    378  11b6
    379  11b6				   .L077		;  if player1y  =  100 then goto setPlayer1Color
    380  11b6
    381  11b6		       a5 8e		      LDA	player1y
    382  11b8		       c9 64		      CMP	#100
    383  11ba		       d0 03		      BNE	.skipL077
    384  11bc				   .condpart1
    385  11bc		       4c 22 dd 	      jmp	.setPlayer1Color
    386  11bf
    387  11bf				   .skipL077
    388  11bf				   .
    389  11bf							; 
    390  11bf
    391  11bf				   .completePlayer1ColorSet
    392  11bf							; completePlayer1ColorSet
    393  11bf
    394  11bf				   .L078		;  if player2y  =  100 then goto setPlayer2Color
    395  11bf
    396  11bf		       a5 8f		      LDA	player2y
    397  11c1		       c9 64		      CMP	#100
    398  11c3		       d0 03		      BNE	.skipL078
    399  11c5				   .condpart2
    400  11c5		       4c 89 dd 	      jmp	.setPlayer2Color
    401  11c8
    402  11c8				   .skipL078
    403  11c8				   .
    404  11c8							; 
    405  11c8
    406  11c8				   .completePlayer2ColorSet
    407  11c8							; completePlayer2ColorSet
    408  11c8
    409  11c8				   .L079		;  if player3y  =  100 then goto setPlayer3Color
    410  11c8
    411  11c8		       a5 90		      LDA	player3y
    412  11ca		       c9 64		      CMP	#100
    413  11cc		       d0 03		      BNE	.skipL079
    414  11ce				   .condpart3
    415  11ce		       4c b7 dd 	      jmp	.setPlayer3Color
    416  11d1
    417  11d1				   .skipL079
    418  11d1				   .
    419  11d1							; 
    420  11d1
    421  11d1				   .
    422  11d1							; 
    423  11d1
    424  11d1				   .
    425  11d1							; 
    426  11d1
    427  11d1				   .
    428  11d1							; 
    429  11d1
    430  11d1				   .
    431  11d1							; 
    432  11d1
    433  11d1				   .colorSetComplete
    434  11d1							; colorSetComplete
    435  11d1
    436  11d1				   .
    437  11d1							; 
    438  11d1
    439  11d1				   .L080		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    440  11d1
    441  11d1		       a5 92		      LDA	player5y
    442  11d3		       c9 c8		      CMP	#200
    443  11d5		       b0 02		      BCS	.skipL080
    444  11d7				   .condpart4
    445  11d7		       e6 dc		      INC	explosionTicker
    446  11d9				   .skipL080
    447  11d9				   .L081		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    448  11d9
    449  11d9		       a9 01		      LDA	#1
    450  11db		       c5 dc		      CMP	explosionTicker
    451  11dd		       b0 0e		      BCS	.skipL081
    452  11df				   .condpart5
    453  11df		       a9 c8		      LDA	#200
    454  11e1		       85 92		      STA	player5y
    455  11e3		       a9 00		      LDA	#0
    456  11e5		       85 dc		      STA	explosionTicker
    457  11e7		       85 19		      STA	AUDV0
    458  11e9		       85 15		      STA	AUDC0
    459  11eb		       85 17		      STA	AUDF0
    460  11ed				   .skipL081
    461  11ed				   .
    462  11ed							; 
    463  11ed
    464  11ed				   .L082		;  if player2y  <  85	&&  missile1y  >  150  &&  altSprite  =  1 then missile1y  =  player2y :  missile1x  =	player2x  -  3
    465  11ed
    466  11ed		       a5 8f		      LDA	player2y
    467  11ef		       c9 55		      CMP	#85
    468  11f1		       b0 17		      BCS	.skipL082
    469  11f3				   .condpart6
    470  11f3		       a9 96		      LDA	#150
    471  11f5		       c5 8b		      CMP	missile1y
    472  11f7		       b0 11		      BCS	.skip6then
    473  11f9				   .condpart7
    474  11f9		       a5 e6		      LDA	altSprite
    475  11fb		       c9 01		      CMP	#1
    476  11fd		       d0 0b		      BNE	.skip7then
    477  11ff				   .condpart8
    478  11ff		       a5 8f		      LDA	player2y
    479  1201		       85 8b		      STA	missile1y
    480  1203		       a5 86		      LDA	player2x
    481  1205		       38		      SEC
    482  1206		       e9 03		      SBC	#3
    483  1208		       85 81		      STA	missile1x
    484  120a				   .skip7then
    485  120a				   .skip6then
    486  120a				   .skipL082
    487  120a				   .L083		;  if player3y  <  85	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    488  120a
    489  120a		       a5 90		      LDA	player3y
    490  120c		       c9 55		      CMP	#85
    491  120e		       b0 11		      BCS	.skipL083
    492  1210				   .condpart9
    493  1210		       a9 96		      LDA	#150
    494  1212		       c5 8b		      CMP	missile1y
    495  1214		       b0 0b		      BCS	.skip9then
    496  1216				   .condpart10
    497  1216		       a5 90		      LDA	player3y
    498  1218		       85 8b		      STA	missile1y
    499  121a		       a5 87		      LDA	player3x
    500  121c		       38		      SEC
    501  121d		       e9 03		      SBC	#3
    502  121f		       85 81		      STA	missile1x
    503  1221				   .skip9then
    504  1221				   .skipL083
    505  1221				   .L084		;  if player4y  <  85	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    506  1221
    507  1221		       a5 91		      LDA	player4y
    508  1223		       c9 55		      CMP	#85
    509  1225		       b0 11		      BCS	.skipL084
    510  1227				   .condpart11
    511  1227		       a9 96		      LDA	#150
    512  1229		       c5 8b		      CMP	missile1y
    513  122b		       b0 0b		      BCS	.skip11then
    514  122d				   .condpart12
    515  122d		       a5 91		      LDA	player4y
    516  122f		       85 8b		      STA	missile1y
    517  1231		       a5 88		      LDA	player4x
    518  1233		       38		      SEC
    519  1234		       e9 03		      SBC	#3
    520  1236		       85 81		      STA	missile1x
    521  1238				   .skip11then
    522  1238				   .skipL084
    523  1238				   .
    524  1238							; 
    525  1238
    526  1238				   .L085		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    527  1238
    528  1238		       a9 1e		      LDA	#30
    529  123a		       c5 8a		      CMP	missile0y
    530  123c		       b0 15		      BCS	.skipL085
    531  123e				   .condpart13
    532  123e		       a5 8a		      LDA	missile0y
    533  1240		       c9 3c		      CMP	#60
    534  1242		       b0 0f		      BCS	.skip13then
    535  1244				   .condpart14
    536  1244		       a9 02		      LDA	#2
    537  1246		       85 1a		      STA	AUDV1
    538  1248		       a9 0c		      LDA	#12
    539  124a		       85 16		      STA	AUDC1
    540  124c		       a9 07		      LDA	#7
    541  124e		       85 18		      STA	AUDF1
    542  1250		       4c 5b d2 	      jmp	.skipelse0
    543  1253				   .skip13then
    544  1253				   .skipL085
    545  1253		       a9 00		      LDA	#0
    546  1255		       85 1a		      STA	AUDV1
    547  1257		       85 16		      STA	AUDC1
    548  1259		       85 17		      STA	AUDF0
    549  125b				   .skipelse0
    550  125b				   .
    551  125b							; 
    552  125b
    553  125b				   .L086		;  if player0x  >   ( player1x  -  20 )   &&  player0x  <   ( player1x  +  1 )   &&  player0y	>   ( player1y	-  10 )   &&  player0y	<   ( player1y	+  15 )   &&  powerUpInPlay  =	1 then goto handlePowerUp
    554  125b
    555  125b							; complex condition detected
    556  125b							; complex statement detected
    557  125b		       a5 85		      LDA	player1x
    558  125d		       38		      SEC
    559  125e		       e9 14		      SBC	#20
    560  1260							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    561  1260		       c5 84		      CMP	player0x
    562  1262		       b0 2e		      BCS	.skipL086
    563  1264				   .condpart15
    564  1264							; complex condition detected
    565  1264							; complex statement detected
    566  1264		       a5 85		      LDA	player1x
    567  1266		       18		      CLC
    568  1267		       69 01		      ADC	#1
    569  1269		       48		      PHA
    570  126a		       ba		      TSX
    571  126b		       68		      PLA
    572  126c		       a5 84		      LDA	player0x
    573  126e		       d5 01		      CMP	1,x
    574  1270		       b0 20		      BCS	.skip15then
    575  1272				   .condpart16
    576  1272							; complex condition detected
    577  1272							; complex statement detected
    578  1272		       a5 8e		      LDA	player1y
    579  1274		       38		      SEC
    580  1275		       e9 0a		      SBC	#10
    581  1277							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    582  1277		       c5 8d		      CMP	player0y
    583  1279		       b0 17		      BCS	.skip16then
    584  127b				   .condpart17
    585  127b							; complex condition detected
    586  127b							; complex statement detected
    587  127b		       a5 8e		      LDA	player1y
    588  127d		       18		      CLC
    589  127e		       69 0f		      ADC	#15
    590  1280		       48		      PHA
    591  1281		       ba		      TSX
    592  1282		       68		      PLA
    593  1283		       a5 8d		      LDA	player0y
    594  1285		       d5 01		      CMP	1,x
    595  1287		       b0 09		      BCS	.skip17then
    596  1289				   .condpart18
    597  1289		       a5 e5		      LDA	powerUpInPlay
    598  128b		       c9 01		      CMP	#1
    599  128d		       d0 03		      BNE	.skip18then
    600  128f				   .condpart19
    601  128f		       4c ba d2 	      jmp	.handlePowerUp
    602  1292
    603  1292				   .skip18then
    604  1292				   .skip17then
    605  1292				   .skip16then
    606  1292				   .skip15then
    607  1292				   .skipL086
    608  1292				   .
    609  1292							; 
    610  1292
    611  1292				   .L087		;  if collision(missile1,player0) then goto killPlayer
    612  1292
    613  1292		       24 01		      bit	CXM1P
    614  1294		       10 03		      BPL	.skipL087
    615  1296				   .condpart20
    616  1296		       4c 75 de 	      jmp	.killPlayer
    617  1299
    618  1299				   .skipL087
    619  1299				   .L088		;  if collision(player0,player1) then goto killPlayer
    620  1299
    621  1299		       24 07		      bit	CXPPMM
    622  129b		       10 03		      BPL	.skipL088
    623  129d				   .condpart21
    624  129d		       4c 75 de 	      jmp	.killPlayer
    625  12a0
    626  12a0				   .skipL088
    627  12a0				   .L089		;  if _resetTicker  >	0 then goto killPlayer
    628  12a0
    629  12a0		       a9 00		      LDA	#0
    630  12a2		       c5 ee		      CMP	_resetTicker
    631  12a4		       b0 03		      BCS	.skipL089
    632  12a6				   .condpart22
    633  12a6		       4c 75 de 	      jmp	.killPlayer
    634  12a9
    635  12a9				   .skipL089
    636  12a9				   .L090		;  if missile1y  <  150  &&  _resetTicker  =  0 then missile1y  =  missile1y  - 1
    637  12a9
    638  12a9		       a5 8b		      LDA	missile1y
    639  12ab		       c9 96		      CMP	#150
    640  12ad		       b0 08		      BCS	.skipL090
    641  12af				   .condpart23
    642  12af		       a5 ee		      LDA	_resetTicker
    643  12b1		       c9 00		      CMP	#0
    644  12b3		       d0 02		      BNE	.skip23then
    645  12b5				   .condpart24
    646  12b5		       c6 8b		      DEC	missile1y
    647  12b7				   .skip23then
    648  12b7				   .skipL090
    649  12b7				   .L091		;  goto titlepage
    650  12b7
    651  12b7		       4c 3b d3 	      jmp	.titlepage
    652  12ba
    653  12ba				   .
    654  12ba							; 
    655  12ba
    656  12ba				   .handlePowerUp
    657  12ba							; handlePowerUp
    658  12ba
    659  12ba				   .L092		;  player1y  =  100
    660  12ba
    661  12ba		       a9 64		      LDA	#100
    662  12bc		       85 8e		      STA	player1y
    663  12be				   .L093		;  player2y  =  100
    664  12be
    665  12be		       a9 64		      LDA	#100
    666  12c0		       85 8f		      STA	player2y
    667  12c2				   .L094		;  player3y  =  100
    668  12c2
    669  12c2		       a9 64		      LDA	#100
    670  12c4		       85 90		      STA	player3y
    671  12c6				   .L095		;  player4y  =  100
    672  12c6
    673  12c6		       a9 64		      LDA	#100
    674  12c8		       85 91		      STA	player4y
    675  12ca				   .L096		;  player1x  =  player1x  +   ( ticker  *  12 ) 
    676  12ca
    677  12ca							; complex statement detected
    678  12ca		       a5 85		      LDA	player1x
    679  12cc		       48		      PHA
    680  12cd		       a5 e4		      LDA	ticker
    681  12cf		       0a		      asl
    682  12d0		       18		      clc
    683  12d1		       65 e4		      adc	ticker
    684  12d3		       0a		      asl
    685  12d4		       0a		      asl
    686  12d5		       ba		      TSX
    687  12d6		       e8		      INX
    688  12d7		       9a		      TXS
    689  12d8		       18		      CLC
    690  12d9		       75 00		      ADC	$00,x
    691  12db		       85 85		      STA	player1x
    692  12dd				   .L097		;  player2x  =  player2x  +   ( ticker  *  12 ) 
    693  12dd
    694  12dd							; complex statement detected
    695  12dd		       a5 86		      LDA	player2x
    696  12df		       48		      PHA
    697  12e0		       a5 e4		      LDA	ticker
    698  12e2		       0a		      asl
    699  12e3		       18		      clc
    700  12e4		       65 e4		      adc	ticker
    701  12e6		       0a		      asl
    702  12e7		       0a		      asl
    703  12e8		       ba		      TSX
    704  12e9		       e8		      INX
    705  12ea		       9a		      TXS
    706  12eb		       18		      CLC
    707  12ec		       75 00		      ADC	$00,x
    708  12ee		       85 86		      STA	player2x
    709  12f0				   .L098		;  player3x  =  player3x  +   ( ticker  *  12 ) 
    710  12f0
    711  12f0							; complex statement detected
    712  12f0		       a5 87		      LDA	player3x
    713  12f2		       48		      PHA
    714  12f3		       a5 e4		      LDA	ticker
    715  12f5		       0a		      asl
    716  12f6		       18		      clc
    717  12f7		       65 e4		      adc	ticker
    718  12f9		       0a		      asl
    719  12fa		       0a		      asl
    720  12fb		       ba		      TSX
    721  12fc		       e8		      INX
    722  12fd		       9a		      TXS
    723  12fe		       18		      CLC
    724  12ff		       75 00		      ADC	$00,x
    725  1301		       85 87		      STA	player3x
    726  1303				   .L099		;  asteroid4x	=  116
    727  1303
    728  1303		       a9 00		      LDA	#0
    729  1305		       85 e1		      STA	k
    730  1307		       a9 74		      LDA	#116
    731  1309		       85 88		      STA	asteroid4x
    732  130b				   .L0100		;  score  =  score  +	50
    733  130b
    734  130b		       f8		      SED
    735  130c		       18		      CLC
    736  130d		       a5 d4		      LDA	score+2
    737  130f		       69 50		      ADC	#$50
    738  1311		       85 d4		      STA	score+2
    739  1313		       a5 d3		      LDA	score+1
    740  1315		       69 00		      ADC	#$00
    741  1317		       85 d3		      STA	score+1
    742  1319		       a5 d2		      LDA	score
    743  131b		       69 00		      ADC	#$00
    744  131d		       85 d2		      STA	score
    745  131f		       d8		      CLD
    746  1320				   .L0101		;  COLUBK  =  $1f
    747  1320
    748  1320		       a9 1f		      LDA	#$1f
    749  1322		       85 09		      STA	COLUBK
    750  1324				   .L0102		;  ticker  =  5
    751  1324
    752  1324		       a9 05		      LDA	#5
    753  1326		       85 e4		      STA	ticker
    754  1328				   .L0103		;  lives  =  192
    755  1328
    756  1328		       a9 c0		      LDA	#192
    757  132a		       85 c2		      STA	lives
    758  132c				   .L0104		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
    759  132c
    760  132c		       a9 0c		      LDA	#12
    761  132e		       85 19		      STA	AUDV0
    762  1330		       a9 08		      LDA	#8
    763  1332		       85 15		      STA	AUDC0
    764  1334		       a9 1c		      LDA	#28
    765  1336		       85 17		      STA	AUDF0
    766  1338				   .L0105		;  goto frameReset
    767  1338
    768  1338		       4c 57 d7 	      jmp	.frameReset
    769  133b
    770  133b				   .
    771  133b							; 
    772  133b
    773  133b				   .titlepage
    774  133b							; titlepage
    775  133b
    776  133b				   .L0106		;  if joy0fire  ||  switchreset then gameReady  =  1
    777  133b
    778  133b		       24 0c		      bit	INPT4
    779  133d		       30 03		      BMI	.skipL0106
    780  133f				   .condpart25
    781  133f		       4c 49 d3 	      jmp	.condpart26
    782  1342				   .skipL0106
    783  1342		       a9 01		      lda	#1
    784  1344		       2c 82 02 	      bit	SWCHB
    785  1347		       d0 04		      BNE	.skip10OR
    786  1349				   .condpart26
    787  1349		       a9 01		      LDA	#1
    788  134b		       85 f0		      STA	gameReady
    789  134d				   .skip10OR
    790  134d				   .L0107		;  if gameReady  =  1 then goto gamestart
    791  134d
    792  134d		       a5 f0		      LDA	gameReady
    793  134f		       c9 01		      CMP	#1
    794  1351		       d0 03		      BNE	.skipL0107
    795  1353				   .condpart27
    796  1353		       4c 89 d3 	      jmp	.gamestart
    797  1356
    798  1356				   .skipL0107
    799  1356				   .L0108		;  gosub titledrawscreen bank2
    800  1356
    801  1356		       85 d1		      sta	temp7
    802  1358		       a9 d3		      lda	#>(ret_point1-1)
    803  135a		       48		      pha
    804  135b		       a9 6d		      lda	#<(ret_point1-1)
    805  135d		       48		      pha
    806  135e		       a9 f4		      lda	#>(.titledrawscreen-1)
    807  1360		       48		      pha
    808  1361		       a9 40		      lda	#<(.titledrawscreen-1)
    809  1363		       48		      pha
    810  1364		       a5 d1		      lda	temp7
    811  1366		       48		      pha
    812  1367		       8a		      txa
    813  1368		       48		      pha
    814  1369		       a2 02		      ldx	#2
    815  136b		       4c eb ff 	      jmp	BS_jsr
    816  136e				   ret_point1
    817  136e				   .L0109		;  _sc1  =  0
    818  136e
    819  136e		       a9 00		      LDA	#0
    820  1370		       85 d2		      STA	_sc1
    821  1372				   .L0110		;  _sc2  =  0
    822  1372
    823  1372		       a9 00		      LDA	#0
    824  1374		       85 d3		      STA	_sc2
    825  1376				   .L0111		;  _sc3  =  0
    826  1376
    827  1376		       a9 00		      LDA	#0
    828  1378		       85 d4		      STA	_sc3
    829  137a				   .L0112		;  _sc1  =  _High_Score1
    830  137a
    831  137a		       a5 ea		      LDA	_High_Score1
    832  137c		       85 d2		      STA	_sc1
    833  137e				   .L0113		;  _sc2  =  _High_Score2
    834  137e
    835  137e		       a5 eb		      LDA	_High_Score2
    836  1380		       85 d3		      STA	_sc2
    837  1382				   .L0114		;  _sc3  =  _High_Score3
    838  1382
    839  1382		       a5 e9		      LDA	_High_Score3
    840  1384		       85 d4		      STA	_sc3
    841  1386				   .
    842  1386							; 
    843  1386
    844  1386				   .L0115		;  goto titlepage
    845  1386
    846  1386		       4c 3b d3 	      jmp	.titlepage
    847  1389
    848  1389				   .
    849  1389							; 
    850  1389
    851  1389				   .gamestart
    852  1389							; gamestart
    853  1389
    854  1389				   .L0116		;  CTRLPF  =  1
    855  1389
    856  1389		       a9 01		      LDA	#1
    857  138b		       85 0a		      STA	CTRLPF
    858  138d				   .
    859  138d							; 
    860  138d
    861  138d				   .L0117		;  if firstFrame  =  0 then missile0x	=  200	:  missile0y  =  200 :	_sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1 :  lives  =	192 :  bulletMultiplier  =  0 :  killCount  =  0
    862  138d
    863  138d		       a5 e8		      LDA	firstFrame
    864  138f		       c9 00		      CMP	#0
    865  1391		       d0 1c		      BNE	.skipL0117
    866  1393				   .condpart28
    867  1393		       a9 c8		      LDA	#200
    868  1395		       85 80		      STA	missile0x
    869  1397		       85 8a		      STA	missile0y
    870  1399		       a9 00		      LDA	#0
    871  139b		       85 d2		      STA	_sc1
    872  139d		       85 d3		      STA	_sc2
    873  139f		       85 d4		      STA	_sc3
    874  13a1		       a9 01		      LDA	#1
    875  13a3		       85 e8		      STA	firstFrame
    876  13a5		       a9 c0		      LDA	#192
    877  13a7		       85 c2		      STA	lives
    878  13a9		       a9 00		      LDA	#0
    879  13ab		       85 e2		      STA	bulletMultiplier
    880  13ad		       85 e3		      STA	killCount
    881  13af				   .skipL0117
    882  13af				   .
    883  13af							; 
    884  13af
    885  13af				   .L0118		;  lives:
    886  13af
    887  13af		       a9 84		      LDA	#<lives__L0118
    888  13b1		       85 c1		      STA	lifepointer
    889  13b3		       a5 c2		      LDA	lifepointer+1
    890  13b5		       29 e0		      AND	#$E0
    891  13b7		       09 1a		      ORA	#(>lives__L0118)&($1F)
    892  13b9		       85 c2		      STA	lifepointer+1
    893  13bb				   .
    894  13bb							; 
    895  13bb
    896  13bb				   .L0119		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    897  13bb
    898  13bb		       a5 ea		      LDA	_High_Score1
    899  13bd		       c5 d2		      CMP	_sc1
    900  13bf		       b0 03		      BCS	.skipL0119
    901  13c1				   .condpart29
    902  13c1		       4c f4 d3 	      jmp	.__New_High_Score
    903  13c4
    904  13c4				   .skipL0119
    905  13c4				   .L0120		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    906  13c4
    907  13c4		       a5 d2		      LDA	_sc1
    908  13c6		       c5 ea		      CMP	_High_Score1
    909  13c8		       b0 03		      BCS	.skipL0120
    910  13ca				   .condpart30
    911  13ca		       4c 00 d4 	      jmp	.__Skip_High_Score
    912  13cd
    913  13cd				   .skipL0120
    914  13cd				   .L0121		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    915  13cd
    916  13cd		       a5 eb		      LDA	_High_Score2
    917  13cf		       c5 d3		      CMP	_sc2
    918  13d1		       b0 03		      BCS	.skipL0121
    919  13d3				   .condpart31
    920  13d3		       4c f4 d3 	      jmp	.__New_High_Score
    921  13d6
    922  13d6				   .skipL0121
    923  13d6				   .L0122		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    924  13d6
    925  13d6		       a5 d3		      LDA	_sc2
    926  13d8		       c5 eb		      CMP	_High_Score2
    927  13da		       b0 03		      BCS	.skipL0122
    928  13dc				   .condpart32
    929  13dc		       4c 00 d4 	      jmp	.__Skip_High_Score
    930  13df
    931  13df				   .skipL0122
    932  13df				   .
    933  13df							; 
    934  13df
    935  13df				   .L0123		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    936  13df
    937  13df		       a5 e9		      LDA	_High_Score3
    938  13e1		       c5 d4		      CMP	_sc3
    939  13e3		       b0 03		      BCS	.skipL0123
    940  13e5				   .condpart33
    941  13e5		       4c f4 d3 	      jmp	.__New_High_Score
    942  13e8
    943  13e8				   .skipL0123
    944  13e8				   .L0124		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    945  13e8
    946  13e8		       a5 d4		      LDA	_sc3
    947  13ea		       c5 e9		      CMP	_High_Score3
    948  13ec		       b0 03		      BCS	.skipL0124
    949  13ee				   .condpart34
    950  13ee		       4c 00 d4 	      jmp	.__Skip_High_Score
    951  13f1
    952  13f1				   .skipL0124
    953  13f1				   .
    954  13f1							; 
    955  13f1
    956  13f1				   .L0125		;  goto __Skip_High_Score
    957  13f1
    958  13f1		       4c 00 d4 	      jmp	.__Skip_High_Score
    959  13f4
    960  13f4				   .
    961  13f4							; 
    962  13f4
    963  13f4				   .
    964  13f4							; 
    965  13f4
    966  13f4				   .__New_High_Score
    967  13f4							; __New_High_Score
    968  13f4
    969  13f4				   .
    970  13f4							; 
    971  13f4
    972  13f4				   .L0126		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    973  13f4
    974  13f4		       a5 d2		      LDA	_sc1
    975  13f6		       85 ea		      STA	_High_Score1
    976  13f8		       a5 d3		      LDA	_sc2
    977  13fa		       85 eb		      STA	_High_Score2
    978  13fc		       a5 d4		      LDA	_sc3
    979  13fe		       85 e9		      STA	_High_Score3
    980  1400				   .__Skip_High_Score
    981  1400							; __Skip_High_Score
    982  1400
    983  1400				   .
    984  1400							; 
    985  1400
    986  1400				   .L0127		;  if ticker  <  5 then player0: 
    987  1400
    988  1400		       a5 e4		      LDA	ticker
    989  1402		       c9 05		      CMP	#5
    990  1404		       b0 0c		      BCS	.skipL0127
    991  1406				   .condpart35
    992  1406		       a2 8c		      LDX	#<player35then_0
    993  1408		       86 a2		      STX	player0pointerlo
    994  140a		       a9 fa		      LDA	#>player35then_0
    995  140c		       85 a3		      STA	player0pointerhi
    996  140e		       a9 09		      LDA	#9
    997  1410		       85 b0		      STA	player0height
    998  1412				   .skipL0127
    999  1412				   .
   1000  1412							; 
   1001  1412
   1002  1412				   .L0128		;  if ticker  >=  5 then player0: 
   1003  1412
   1004  1412		       a5 e4		      LDA	ticker
   1005  1414		       c9 05		      CMP	#5
   1006  1416		       90 0c		      BCC	.skipL0128
   1007  1418				   .condpart36
   1008  1418		       a2 95		      LDX	#<player36then_0
   1009  141a		       86 a2		      STX	player0pointerlo
   1010  141c		       a9 fa		      LDA	#>player36then_0
   1011  141e		       85 a3		      STA	player0pointerhi
   1012  1420		       a9 09		      LDA	#9
   1013  1422		       85 b0		      STA	player0height
   1014  1424				   .skipL0128
   1015  1424				   .
   1016  1424							; 
   1017  1424
   1018  1424				   .L0129		;  if powerUpInPlay  =  1 then player1:
   1019  1424
   1020  1424		       a5 e5		      LDA	powerUpInPlay
   1021  1426		       c9 01		      CMP	#1
   1022  1428		       d0 0c		      BNE	.skipL0129
   1023  142a				   .condpart37
   1024  142a		       a2 9e		      LDX	#<player37then_1
   1025  142c		       86 a6		      STX	player1pointerlo
   1026  142e		       a9 fa		      LDA	#>player37then_1
   1027  1430		       85 ab		      STA	player1pointerhi
   1028  1432		       a9 09		      LDA	#9
   1029  1434		       85 b1		      STA	player1height
   1030  1436				   .skipL0129
   1031  1436				   .
   1032  1436							; 
   1033  1436
   1034  1436				   .L0130		;  if powerUpInPlay  =  0  &&	ticker	<  5 then player1:
   1035  1436
   1036  1436		       a5 e5		      LDA	powerUpInPlay
   1037  1438		       c9 00		      CMP	#0
   1038  143a		       d0 12		      BNE	.skipL0130
   1039  143c				   .condpart38
   1040  143c		       a5 e4		      LDA	ticker
   1041  143e		       c9 05		      CMP	#5
   1042  1440		       b0 0c		      BCS	.skip38then
   1043  1442				   .condpart39
   1044  1442		       a2 a6		      LDX	#<player39then_1
   1045  1444		       86 a6		      STX	player1pointerlo
   1046  1446		       a9 fa		      LDA	#>player39then_1
   1047  1448		       85 ab		      STA	player1pointerhi
   1048  144a		       a9 09		      LDA	#9
   1049  144c		       85 b1		      STA	player1height
   1050  144e				   .skip38then
   1051  144e				   .skipL0130
   1052  144e				   .
   1053  144e							; 
   1054  144e
   1055  144e				   .L0131		;  if powerUpInPlay  =  0  &&	ticker	>=  5 then player1:
   1056  144e
   1057  144e		       a5 e5		      LDA	powerUpInPlay
   1058  1450		       c9 00		      CMP	#0
   1059  1452		       d0 12		      BNE	.skipL0131
   1060  1454				   .condpart40
   1061  1454		       a5 e4		      LDA	ticker
   1062  1456		       c9 05		      CMP	#5
   1063  1458		       90 0c		      BCC	.skip40then
   1064  145a				   .condpart41
   1065  145a		       a2 ae		      LDX	#<player41then_1
   1066  145c		       86 a6		      STX	player1pointerlo
   1067  145e		       a9 fa		      LDA	#>player41then_1
   1068  1460		       85 ab		      STA	player1pointerhi
   1069  1462		       a9 09		      LDA	#9
   1070  1464		       85 b1		      STA	player1height
   1071  1466				   .skip40then
   1072  1466				   .skipL0131
   1073  1466				   .
   1074  1466							; 
   1075  1466
   1076  1466				   .L0132		;  if ticker  <  5 then player2:
   1077  1466
   1078  1466		       a5 e4		      LDA	ticker
   1079  1468		       c9 05		      CMP	#5
   1080  146a		       b0 0c		      BCS	.skipL0132
   1081  146c				   .condpart42
   1082  146c		       a2 b6		      LDX	#<player42then_2
   1083  146e		       86 a7		      STX	player2pointerlo
   1084  1470		       a9 fa		      LDA	#>player42then_2
   1085  1472		       85 ac		      STA	player2pointerhi
   1086  1474		       a9 09		      LDA	#9
   1087  1476		       85 b2		      STA	player2height
   1088  1478				   .skipL0132
   1089  1478				   .
   1090  1478							; 
   1091  1478
   1092  1478				   .L0133		;  if ticker  >=  5 then player2:
   1093  1478
   1094  1478		       a5 e4		      LDA	ticker
   1095  147a		       c9 05		      CMP	#5
   1096  147c		       90 0c		      BCC	.skipL0133
   1097  147e				   .condpart43
   1098  147e		       a2 be		      LDX	#<player43then_2
   1099  1480		       86 a7		      STX	player2pointerlo
   1100  1482		       a9 fa		      LDA	#>player43then_2
   1101  1484		       85 ac		      STA	player2pointerhi
   1102  1486		       a9 09		      LDA	#9
   1103  1488		       85 b2		      STA	player2height
   1104  148a				   .skipL0133
   1105  148a				   .
   1106  148a							; 
   1107  148a
   1108  148a				   .L0134		;  if ticker  <  3 then player3: 
   1109  148a
   1110  148a		       a5 e4		      LDA	ticker
   1111  148c		       c9 03		      CMP	#3
   1112  148e		       b0 0c		      BCS	.skipL0134
   1113  1490				   .condpart44
   1114  1490		       a2 c6		      LDX	#<player44then_3
   1115  1492		       86 a8		      STX	player3pointerlo
   1116  1494		       a9 fa		      LDA	#>player44then_3
   1117  1496		       85 ad		      STA	player3pointerhi
   1118  1498		       a9 09		      LDA	#9
   1119  149a		       85 b3		      STA	player3height
   1120  149c				   .skipL0134
   1121  149c				   .
   1122  149c							; 
   1123  149c
   1124  149c				   .L0135		;  if ticker  >= 3  &&  ticker  <  6 then player3: 
   1125  149c
   1126  149c		       a5 e4		      LDA	ticker
   1127  149e		       c9 03		      CMP	#3
   1128  14a0		       90 12		      BCC	.skipL0135
   1129  14a2				   .condpart45
   1130  14a2		       a5 e4		      LDA	ticker
   1131  14a4		       c9 06		      CMP	#6
   1132  14a6		       b0 0c		      BCS	.skip45then
   1133  14a8				   .condpart46
   1134  14a8		       a2 ce		      LDX	#<player46then_3
   1135  14aa		       86 a8		      STX	player3pointerlo
   1136  14ac		       a9 fa		      LDA	#>player46then_3
   1137  14ae		       85 ad		      STA	player3pointerhi
   1138  14b0		       a9 09		      LDA	#9
   1139  14b2		       85 b3		      STA	player3height
   1140  14b4				   .skip45then
   1141  14b4				   .skipL0135
   1142  14b4				   .
   1143  14b4							; 
   1144  14b4
   1145  14b4				   .L0136		;  if ticker  >=  6 then player3: 
   1146  14b4
   1147  14b4		       a5 e4		      LDA	ticker
   1148  14b6		       c9 06		      CMP	#6
   1149  14b8		       90 0c		      BCC	.skipL0136
   1150  14ba				   .condpart47
   1151  14ba		       a2 d6		      LDX	#<player47then_3
   1152  14bc		       86 a8		      STX	player3pointerlo
   1153  14be		       a9 fa		      LDA	#>player47then_3
   1154  14c0		       85 ad		      STA	player3pointerhi
   1155  14c2		       a9 09		      LDA	#9
   1156  14c4		       85 b3		      STA	player3height
   1157  14c6				   .skipL0136
   1158  14c6				   .
   1159  14c6							; 
   1160  14c6
   1161  14c6				   .
   1162  14c6							; 
   1163  14c6
   1164  14c6				   .L0137		;  if altSprite  >  0	&&  ticker  <  5 then player2:
   1165  14c6
   1166  14c6		       a9 00		      LDA	#0
   1167  14c8		       c5 e6		      CMP	altSprite
   1168  14ca		       b0 12		      BCS	.skipL0137
   1169  14cc				   .condpart48
   1170  14cc		       a5 e4		      LDA	ticker
   1171  14ce		       c9 05		      CMP	#5
   1172  14d0		       b0 0c		      BCS	.skip48then
   1173  14d2				   .condpart49
   1174  14d2		       a2 de		      LDX	#<player49then_2
   1175  14d4		       86 a7		      STX	player2pointerlo
   1176  14d6		       a9 fa		      LDA	#>player49then_2
   1177  14d8		       85 ac		      STA	player2pointerhi
   1178  14da		       a9 09		      LDA	#9
   1179  14dc		       85 b2		      STA	player2height
   1180  14de				   .skip48then
   1181  14de				   .skipL0137
   1182  14de				   .
   1183  14de							; 
   1184  14de
   1185  14de				   .L0138		;  if altSprite  >  0	&&  ticker  >=	5 then player2:
   1186  14de
   1187  14de		       a9 00		      LDA	#0
   1188  14e0		       c5 e6		      CMP	altSprite
   1189  14e2		       b0 12		      BCS	.skipL0138
   1190  14e4				   .condpart50
   1191  14e4		       a5 e4		      LDA	ticker
   1192  14e6		       c9 05		      CMP	#5
   1193  14e8		       90 0c		      BCC	.skip50then
   1194  14ea				   .condpart51
   1195  14ea		       a2 e6		      LDX	#<player51then_2
   1196  14ec		       86 a7		      STX	player2pointerlo
   1197  14ee		       a9 fa		      LDA	#>player51then_2
   1198  14f0		       85 ac		      STA	player2pointerhi
   1199  14f2		       a9 09		      LDA	#9
   1200  14f4		       85 b2		      STA	player2height
   1201  14f6				   .skip50then
   1202  14f6				   .skipL0138
   1203  14f6				   .
   1204  14f6							; 
   1205  14f6
   1206  14f6				   .
   1207  14f6							; 
   1208  14f6
   1209  14f6				   .L0139		;  if ticker  <  5 then player4:
   1210  14f6
   1211  14f6		       a5 e4		      LDA	ticker
   1212  14f8		       c9 05		      CMP	#5
   1213  14fa		       b0 0c		      BCS	.skipL0139
   1214  14fc				   .condpart52
   1215  14fc		       a2 ee		      LDX	#<player52then_4
   1216  14fe		       86 a9		      STX	player4pointerlo
   1217  1500		       a9 fa		      LDA	#>player52then_4
   1218  1502		       85 ae		      STA	player4pointerhi
   1219  1504		       a9 09		      LDA	#9
   1220  1506		       85 b4		      STA	player4height
   1221  1508				   .skipL0139
   1222  1508				   .
   1223  1508							; 
   1224  1508
   1225  1508				   .L0140		;  if ticker  >=  5 then player4:
   1226  1508
   1227  1508		       a5 e4		      LDA	ticker
   1228  150a		       c9 05		      CMP	#5
   1229  150c		       90 0c		      BCC	.skipL0140
   1230  150e				   .condpart53
   1231  150e		       a2 f6		      LDX	#<player53then_4
   1232  1510		       86 a9		      STX	player4pointerlo
   1233  1512		       a9 fa		      LDA	#>player53then_4
   1234  1514		       85 ae		      STA	player4pointerhi
   1235  1516		       a9 09		      LDA	#9
   1236  1518		       85 b4		      STA	player4height
   1237  151a				   .skipL0140
   1238  151a				   .
   1239  151a							; 
   1240  151a
   1241  151a				   .L0141		;  player5:
   1242  151a
   1243  151a		       a2 5a		      LDX	#<playerL0141_5
   1244  151c		       86 aa		      STX	player5pointerlo
   1245  151e		       a9 fb		      LDA	#>playerL0141_5
   1246  1520		       85 af		      STA	player5pointerhi
   1247  1522		       a9 09		      LDA	#9
   1248  1524		       85 b5		      STA	player5height
   1249  1526				   .
   1250  1526							; 
   1251  1526
   1252  1526				   .
   1253  1526							; 
   1254  1526
   1255  1526				   .
   1256  1526							; 
   1257  1526
   1258  1526				   .
   1259  1526							; 
   1260  1526
   1261  1526				   .L0142		;  if _resetTicker  >	0 then goto frameReset
   1262  1526
   1263  1526		       a9 00		      LDA	#0
   1264  1528		       c5 ee		      CMP	_resetTicker
   1265  152a		       b0 03		      BCS	.skipL0142
   1266  152c				   .condpart54
   1267  152c		       4c 57 d7 	      jmp	.frameReset
   1268  152f
   1269  152f				   .skipL0142
   1270  152f				   .
   1271  152f							; 
   1272  152f
   1273  152f				   .L0143		;  if player1y  <  41	&&  powerUpInPlay  =  0 then goto killPlayer
   1274  152f
   1275  152f		       a5 8e		      LDA	player1y
   1276  1531		       c9 29		      CMP	#41
   1277  1533		       b0 09		      BCS	.skipL0143
   1278  1535				   .condpart55
   1279  1535		       a5 e5		      LDA	powerUpInPlay
   1280  1537		       c9 00		      CMP	#0
   1281  1539		       d0 03		      BNE	.skip55then
   1282  153b				   .condpart56
   1283  153b		       4c 75 de 	      jmp	.killPlayer
   1284  153e
   1285  153e				   .skip55then
   1286  153e				   .skipL0143
   1287  153e				   .L0144		;  if player1y  <  10	&&  powerUpInPlay  =  1 then player1y  =  100
   1288  153e
   1289  153e		       a5 8e		      LDA	player1y
   1290  1540		       c9 0a		      CMP	#10
   1291  1542		       b0 0a		      BCS	.skipL0144
   1292  1544				   .condpart57
   1293  1544		       a5 e5		      LDA	powerUpInPlay
   1294  1546		       c9 01		      CMP	#1
   1295  1548		       d0 04		      BNE	.skip57then
   1296  154a				   .condpart58
   1297  154a		       a9 64		      LDA	#100
   1298  154c		       85 8e		      STA	player1y
   1299  154e				   .skip57then
   1300  154e				   .skipL0144
   1301  154e				   .
   1302  154e							; 
   1303  154e
   1304  154e				   .
   1305  154e							; 
   1306  154e
   1307  154e				   .L0145		;  if ticker  >  4 then COLUP4  =  $40 else COLUP4  =	$70
   1308  154e
   1309  154e		       a9 04		      LDA	#4
   1310  1550		       c5 e4		      CMP	ticker
   1311  1552		       b0 07		      BCS	.skipL0145
   1312  1554				   .condpart59
   1313  1554		       a9 40		      LDA	#$40
   1314  1556		       85 9b		      STA	COLUP4
   1315  1558		       4c 5f d5 	      jmp	.skipelse1
   1316  155b				   .skipL0145
   1317  155b		       a9 70		      LDA	#$70
   1318  155d		       85 9b		      STA	COLUP4
   1319  155f				   .skipelse1
   1320  155f				   .
   1321  155f							; 
   1322  155f
   1323  155f				   .L0146		;  if player2y  <  41 then goto killPlayer
   1324  155f
   1325  155f		       a5 8f		      LDA	player2y
   1326  1561		       c9 29		      CMP	#41
   1327  1563		       b0 03		      BCS	.skipL0146
   1328  1565				   .condpart60
   1329  1565		       4c 75 de 	      jmp	.killPlayer
   1330  1568
   1331  1568				   .skipL0146
   1332  1568				   .L0147		;  if player3y  <  41 then goto killPlayer
   1333  1568
   1334  1568		       a5 90		      LDA	player3y
   1335  156a		       c9 29		      CMP	#41
   1336  156c		       b0 03		      BCS	.skipL0147
   1337  156e				   .condpart61
   1338  156e		       4c 75 de 	      jmp	.killPlayer
   1339  1571
   1340  1571				   .skipL0147
   1341  1571				   .L0148		;  if player4y  <  41 then goto killPlayer
   1342  1571
   1343  1571		       a5 91		      LDA	player4y
   1344  1573		       c9 29		      CMP	#41
   1345  1575		       b0 03		      BCS	.skipL0148
   1346  1577				   .condpart62
   1347  1577		       4c 75 de 	      jmp	.killPlayer
   1348  157a
   1349  157a				   .skipL0148
   1350  157a				   .
   1351  157a							; 
   1352  157a
   1353  157a				   .L0149		;  if missile1y  <  10 then missile1y	=  200
   1354  157a
   1355  157a		       a5 8b		      LDA	missile1y
   1356  157c		       c9 0a		      CMP	#10
   1357  157e		       b0 04		      BCS	.skipL0149
   1358  1580				   .condpart63
   1359  1580		       a9 c8		      LDA	#200
   1360  1582		       85 8b		      STA	missile1y
   1361  1584				   .skipL0149
   1362  1584				   .
   1363  1584							; 
   1364  1584
   1365  1584				   .
   1366  1584							; 
   1367  1584
   1368  1584				   .L0150		;  if missile0y  >  100 then goto skip
   1369  1584
   1370  1584		       a9 64		      LDA	#100
   1371  1586		       c5 8a		      CMP	missile0y
   1372  1588		       b0 03		      BCS	.skipL0150
   1373  158a				   .condpart64
   1374  158a		       4c 97 d5 	      jmp	.skip
   1375  158d
   1376  158d				   .skipL0150
   1377  158d				   .
   1378  158d							; 
   1379  158d
   1380  158d				   .
   1381  158d							; 
   1382  158d
   1383  158d				   .L0151		;  missile0y  =  missile0y + 2 : goto draw_loop
   1384  158d
   1385  158d		       a5 8a		      LDA	missile0y
   1386  158f		       18		      CLC
   1387  1590		       69 02		      ADC	#2
   1388  1592		       85 8a		      STA	missile0y
   1389  1594		       4c f4 d5 	      jmp	.draw_loop
   1390  1597
   1391  1597				   .
   1392  1597							; 
   1393  1597
   1394  1597				   .skip
   1395  1597							; skip
   1396  1597
   1397  1597				   .L0152		;  if player0y  <  35	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  AUDV1  =  2	:  AUDC1  =  6	:  AUDF1  =  5 :  bulletMultiplier  =  bulletMultiplier  -  1 :  goto draw_loop
   1398  1597
   1399  1597		       a5 8d		      LDA	player0y
   1400  1599		       c9 23		      CMP	#35
   1401  159b		       b0 24		      BCS	.skipL0152
   1402  159d				   .condpart65
   1403  159d		       a5 c2		      LDA	lives
   1404  159f		       c9 c4		      CMP	#196
   1405  15a1		       b0 1e		      BCS	.skip65then
   1406  15a3				   .condpart66
   1407  15a3		       a5 e4		      LDA	ticker
   1408  15a5		       c9 00		      CMP	#0
   1409  15a7		       d0 18		      BNE	.skip66then
   1410  15a9				   .condpart67
   1411  15a9		       a5 c2		      LDA	lives
   1412  15ab		       18		      CLC
   1413  15ac		       69 20		      ADC	#32
   1414  15ae		       85 c2		      STA	lives
   1415  15b0		       a9 02		      LDA	#2
   1416  15b2		       85 1a		      STA	AUDV1
   1417  15b4		       a9 06		      LDA	#6
   1418  15b6		       85 16		      STA	AUDC1
   1419  15b8		       a9 05		      LDA	#5
   1420  15ba		       85 18		      STA	AUDF1
   1421  15bc		       c6 e2		      DEC	bulletMultiplier
   1422  15be		       4c f4 d5 	      jmp	.draw_loop
   1423  15c1
   1424  15c1				   .skip66then
   1425  15c1				   .skip65then
   1426  15c1				   .skipL0152
   1427  15c1				   .L0153		;  if player0y  <  35 then goto draw_loop
   1428  15c1
   1429  15c1		       a5 8d		      LDA	player0y
   1430  15c3		       c9 23		      CMP	#35
   1431  15c5		       b0 03		      BCS	.skipL0153
   1432  15c7				   .condpart68
   1433  15c7		       4c f4 d5 	      jmp	.draw_loop
   1434  15ca
   1435  15ca				   .skipL0153
   1436  15ca				   .L0154		;  if lives  <  32 then goto draw_loop
   1437  15ca
   1438  15ca		       a5 c2		      LDA	lives
   1439  15cc		       c9 20		      CMP	#32
   1440  15ce		       b0 03		      BCS	.skipL0154
   1441  15d0				   .condpart69
   1442  15d0		       4c f4 d5 	      jmp	.draw_loop
   1443  15d3
   1444  15d3				   .skipL0154
   1445  15d3				   .L0155		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : bulletMultiplier  =  bulletMultiplier  +  1 :  lives	=  lives  -  32  : missile0x  =  player0x  +  5
   1446  15d3
   1447  15d3		       24 0c		      bit	INPT4
   1448  15d5		       30 1d		      BMI	.skipL0155
   1449  15d7				   .condpart70
   1450  15d7		       a9 96		      LDA	#150
   1451  15d9		       c5 92		      CMP	player5y
   1452  15db		       b0 17		      BCS	.skip70then
   1453  15dd				   .condpart71
   1454  15dd		       a5 8d		      LDA	player0y
   1455  15df		       38		      SEC
   1456  15e0		       e9 04		      SBC	#4
   1457  15e2		       85 8a		      STA	missile0y
   1458  15e4		       e6 e2		      INC	bulletMultiplier
   1459  15e6		       a5 c2		      LDA	lives
   1460  15e8		       38		      SEC
   1461  15e9		       e9 20		      SBC	#32
   1462  15eb		       85 c2		      STA	lives
   1463  15ed		       a5 84		      LDA	player0x
   1464  15ef		       18		      CLC
   1465  15f0		       69 05		      ADC	#5
   1466  15f2		       85 80		      STA	missile0x
   1467  15f4				   .skip70then
   1468  15f4				   .skipL0155
   1469  15f4				   .draw_loop
   1470  15f4							; draw_loop
   1471  15f4
   1472  15f4				   .L0156		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x  +  1
   1473  15f4
   1474  15f4		       2c 80 02 	      bit	SWCHA
   1475  15f7		       30 08		      BMI	.skipL0156
   1476  15f9				   .condpart72
   1477  15f9		       a5 84		      LDA	player0x
   1478  15fb		       c9 86		      CMP	#134
   1479  15fd		       b0 02		      BCS	.skip72then
   1480  15ff				   .condpart73
   1481  15ff		       e6 84		      INC	player0x
   1482  1601				   .skip72then
   1483  1601				   .skipL0156
   1484  1601				   .L0157		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x  -  1
   1485  1601
   1486  1601		       2c 80 02 	      bit	SWCHA
   1487  1604		       70 08		      BVS	.skipL0157
   1488  1606				   .condpart74
   1489  1606		       a9 13		      LDA	#19
   1490  1608		       c5 84		      CMP	player0x
   1491  160a		       b0 02		      BCS	.skip74then
   1492  160c				   .condpart75
   1493  160c		       c6 84		      DEC	player0x
   1494  160e				   .skip74then
   1495  160e				   .skipL0157
   1496  160e				   .L0158		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y  -  1
   1497  160e
   1498  160e		       a9 20		      lda	#$20
   1499  1610		       2c 80 02 	      bit	SWCHA
   1500  1613		       d0 08		      BNE	.skipL0158
   1501  1615				   .condpart76
   1502  1615		       a9 0a		      LDA	#10
   1503  1617		       c5 8d		      CMP	player0y
   1504  1619		       b0 02		      BCS	.skip76then
   1505  161b				   .condpart77
   1506  161b		       c6 8d		      DEC	player0y
   1507  161d				   .skip76then
   1508  161d				   .skipL0158
   1509  161d				   .L0159		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y  +  1
   1510  161d
   1511  161d		       a9 10		      lda	#$10
   1512  161f		       2c 80 02 	      bit	SWCHA
   1513  1622		       d0 08		      BNE	.skipL0159
   1514  1624				   .condpart78
   1515  1624		       a5 8d		      LDA	player0y
   1516  1626		       c9 5a		      CMP	#90
   1517  1628		       b0 02		      BCS	.skip78then
   1518  162a				   .condpart79
   1519  162a		       e6 8d		      INC	player0y
   1520  162c				   .skip78then
   1521  162c				   .skipL0159
   1522  162c				   .
   1523  162c							; 
   1524  162c
   1525  162c				   .L0160		;  if player0y  <  35	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1526  162c
   1527  162c		       a5 8d		      LDA	player0y
   1528  162e		       c9 23		      CMP	#35
   1529  1630		       b0 13		      BCS	.skipL0160
   1530  1632				   .condpart80
   1531  1632		       a5 c2		      LDA	lives
   1532  1634		       c9 c4		      CMP	#196
   1533  1636		       b0 0d		      BCS	.skip80then
   1534  1638				   .condpart81
   1535  1638		       a5 e4		      LDA	ticker
   1536  163a		       c9 05		      CMP	#5
   1537  163c		       b0 07		      BCS	.skip81then
   1538  163e				   .condpart82
   1539  163e		       a9 f0		      LDA	#$F0
   1540  1640		       85 06		      STA	COLUP0
   1541  1642		       4c 6f d6 	      jmp	.exitColourSwitch
   1542  1645
   1543  1645				   .skip81then
   1544  1645				   .skip80then
   1545  1645				   .skipL0160
   1546  1645				   .L0161		;  if player0y  <  35	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1547  1645
   1548  1645		       a5 8d		      LDA	player0y
   1549  1647		       c9 23		      CMP	#35
   1550  1649		       b0 13		      BCS	.skipL0161
   1551  164b				   .condpart83
   1552  164b		       a5 c2		      LDA	lives
   1553  164d		       c9 c4		      CMP	#196
   1554  164f		       b0 0d		      BCS	.skip83then
   1555  1651				   .condpart84
   1556  1651		       a9 05		      LDA	#5
   1557  1653		       c5 e4		      CMP	ticker
   1558  1655		       b0 07		      BCS	.skip84then
   1559  1657				   .condpart85
   1560  1657		       a9 02		      LDA	#$02
   1561  1659		       85 06		      STA	COLUP0
   1562  165b		       4c 6f d6 	      jmp	.exitColourSwitch
   1563  165e
   1564  165e				   .skip84then
   1565  165e				   .skip83then
   1566  165e				   .skipL0161
   1567  165e				   .L0162		;  if lives  <  32 then COLUP0  =  $40 else COLUP0  =	$C6
   1568  165e
   1569  165e		       a5 c2		      LDA	lives
   1570  1660		       c9 20		      CMP	#32
   1571  1662		       b0 07		      BCS	.skipL0162
   1572  1664				   .condpart86
   1573  1664		       a9 40		      LDA	#$40
   1574  1666		       85 06		      STA	COLUP0
   1575  1668		       4c 6f d6 	      jmp	.skipelse2
   1576  166b				   .skipL0162
   1577  166b		       a9 c6		      LDA	#$C6
   1578  166d		       85 06		      STA	COLUP0
   1579  166f				   .skipelse2
   1580  166f				   .
   1581  166f							; 
   1582  166f
   1583  166f				   .exitColourSwitch
   1584  166f							; exitColourSwitch
   1585  166f
   1586  166f				   .L0163		;  if missile0y  >  80 then goto frameReset
   1587  166f
   1588  166f		       a9 50		      LDA	#80
   1589  1671		       c5 8a		      CMP	missile0y
   1590  1673		       b0 03		      BCS	.skipL0163
   1591  1675				   .condpart87
   1592  1675		       4c 57 d7 	      jmp	.frameReset
   1593  1678
   1594  1678				   .skipL0163
   1595  1678				   .L0164		;  if missile0x  >   ( player1x  -  12 )   &&	missile0x  <   ( player1x  +  3 )   &&	missile0y  >  player1y	-  10  &&  powerUpInPlay  =  0 then player1x  =  player1x  +   ( ticker  *  12 )  :  player1y  =  100 :  goto collisions
   1596  1678
   1597  1678							; complex condition detected
   1598  1678							; complex statement detected
   1599  1678		       a5 85		      LDA	player1x
   1600  167a		       38		      SEC
   1601  167b		       e9 0c		      SBC	#12
   1602  167d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1603  167d		       c5 80		      CMP	missile0x
   1604  167f		       b0 37		      BCS	.skipL0164
   1605  1681				   .condpart88
   1606  1681							; complex condition detected
   1607  1681							; complex statement detected
   1608  1681		       a5 85		      LDA	player1x
   1609  1683		       18		      CLC
   1610  1684		       69 03		      ADC	#3
   1611  1686		       48		      PHA
   1612  1687		       ba		      TSX
   1613  1688		       68		      PLA
   1614  1689		       a5 80		      LDA	missile0x
   1615  168b		       d5 01		      CMP	1,x
   1616  168d		       b0 29		      BCS	.skip88then
   1617  168f				   .condpart89
   1618  168f							; complex condition detected
   1619  168f		       a5 8e		      LDA	player1y
   1620  1691		       38		      SEC
   1621  1692		       e9 0a		      SBC	#10
   1622  1694							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1623  1694		       c5 8a		      CMP	missile0y
   1624  1696		       b0 20		      BCS	.skip89then
   1625  1698				   .condpart90
   1626  1698		       a5 e5		      LDA	powerUpInPlay
   1627  169a		       c9 00		      CMP	#0
   1628  169c		       d0 1a		      BNE	.skip90then
   1629  169e				   .condpart91
   1630  169e							; complex statement detected
   1631  169e		       a5 85		      LDA	player1x
   1632  16a0		       48		      PHA
   1633  16a1		       a5 e4		      LDA	ticker
   1634  16a3		       0a		      asl
   1635  16a4		       18		      clc
   1636  16a5		       65 e4		      adc	ticker
   1637  16a7		       0a		      asl
   1638  16a8		       0a		      asl
   1639  16a9		       ba		      TSX
   1640  16aa		       e8		      INX
   1641  16ab		       9a		      TXS
   1642  16ac		       18		      CLC
   1643  16ad		       75 00		      ADC	$00,x
   1644  16af		       85 85		      STA	player1x
   1645  16b1		       a9 64		      LDA	#100
   1646  16b3		       85 8e		      STA	player1y
   1647  16b5		       4c 39 de 	      jmp	.collisions
   1648  16b8
   1649  16b8				   .skip90then
   1650  16b8				   .skip89then
   1651  16b8				   .skip88then
   1652  16b8				   .skipL0164
   1653  16b8				   .L0165		;  if missile0x  >   ( player2x  -  12 )   &&	missile0x  <   ( player2x  +  3 )   &&	missile0y  >  player2y	-  10 then player2x  =	player2x  +   ( ticker	*  12 )  :  player2y  =  100 :	goto collisions
   1654  16b8
   1655  16b8							; complex condition detected
   1656  16b8							; complex statement detected
   1657  16b8		       a5 86		      LDA	player2x
   1658  16ba		       38		      SEC
   1659  16bb		       e9 0c		      SBC	#12
   1660  16bd							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1661  16bd		       c5 80		      CMP	missile0x
   1662  16bf		       b0 31		      BCS	.skipL0165
   1663  16c1				   .condpart92
   1664  16c1							; complex condition detected
   1665  16c1							; complex statement detected
   1666  16c1		       a5 86		      LDA	player2x
   1667  16c3		       18		      CLC
   1668  16c4		       69 03		      ADC	#3
   1669  16c6		       48		      PHA
   1670  16c7		       ba		      TSX
   1671  16c8		       68		      PLA
   1672  16c9		       a5 80		      LDA	missile0x
   1673  16cb		       d5 01		      CMP	1,x
   1674  16cd		       b0 23		      BCS	.skip92then
   1675  16cf				   .condpart93
   1676  16cf							; complex condition detected
   1677  16cf		       a5 8f		      LDA	player2y
   1678  16d1		       38		      SEC
   1679  16d2		       e9 0a		      SBC	#10
   1680  16d4		       c5 8a		      CMP	missile0y
   1681  16d6		       b0 1a		      BCS	.skip93then
   1682  16d8				   .condpart94
   1683  16d8							; complex statement detected
   1684  16d8		       a5 86		      LDA	player2x
   1685  16da		       48		      PHA
   1686  16db		       a5 e4		      LDA	ticker
   1687  16dd		       0a		      asl
   1688  16de		       18		      clc
   1689  16df		       65 e4		      adc	ticker
   1690  16e1		       0a		      asl
   1691  16e2		       0a		      asl
   1692  16e3		       ba		      TSX
   1693  16e4		       e8		      INX
   1694  16e5		       9a		      TXS
   1695  16e6		       18		      CLC
   1696  16e7		       75 00		      ADC	$00,x
   1697  16e9		       85 86		      STA	player2x
   1698  16eb		       a9 64		      LDA	#100
   1699  16ed		       85 8f		      STA	player2y
   1700  16ef		       4c 39 de 	      jmp	.collisions
   1701  16f2
   1702  16f2				   .skip93then
   1703  16f2				   .skip92then
   1704  16f2				   .skipL0165
   1705  16f2				   .L0166		;  if missile0x  >   ( player3x  -  12 )   &&	missile0x  <   ( player3x  +  3 )   &&	missile0y  >  player3y	-  10 then player3x  =	player3x  +   ( ticker	*  12 )  :  player3y  =  100 :	goto collisions
   1706  16f2
   1707  16f2							; complex condition detected
   1708  16f2							; complex statement detected
   1709  16f2		       a5 87		      LDA	player3x
   1710  16f4		       38		      SEC
   1711  16f5		       e9 0c		      SBC	#12
   1712  16f7							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1713  16f7		       c5 80		      CMP	missile0x
   1714  16f9		       b0 31		      BCS	.skipL0166
   1715  16fb				   .condpart95
   1716  16fb							; complex condition detected
   1717  16fb							; complex statement detected
   1718  16fb		       a5 87		      LDA	player3x
   1719  16fd		       18		      CLC
   1720  16fe		       69 03		      ADC	#3
   1721  1700		       48		      PHA
   1722  1701		       ba		      TSX
   1723  1702		       68		      PLA
   1724  1703		       a5 80		      LDA	missile0x
   1725  1705		       d5 01		      CMP	1,x
   1726  1707		       b0 23		      BCS	.skip95then
   1727  1709				   .condpart96
   1728  1709							; complex condition detected
   1729  1709		       a5 90		      LDA	player3y
   1730  170b		       38		      SEC
   1731  170c		       e9 0a		      SBC	#10
   1732  170e		       c5 8a		      CMP	missile0y
   1733  1710		       b0 1a		      BCS	.skip96then
   1734  1712				   .condpart97
   1735  1712							; complex statement detected
   1736  1712		       a5 87		      LDA	player3x
   1737  1714		       48		      PHA
   1738  1715		       a5 e4		      LDA	ticker
   1739  1717		       0a		      asl
   1740  1718		       18		      clc
   1741  1719		       65 e4		      adc	ticker
   1742  171b		       0a		      asl
   1743  171c		       0a		      asl
   1744  171d		       ba		      TSX
   1745  171e		       e8		      INX
   1746  171f		       9a		      TXS
   1747  1720		       18		      CLC
   1748  1721		       75 00		      ADC	$00,x
   1749  1723		       85 87		      STA	player3x
   1750  1725		       a9 64		      LDA	#100
   1751  1727		       85 90		      STA	player3y
   1752  1729		       4c 39 de 	      jmp	.collisions
   1753  172c
   1754  172c				   .skip96then
   1755  172c				   .skip95then
   1756  172c				   .skipL0166
   1757  172c				   .L0167		;  if missile0x  >   ( player4x  -  12 )   &&	missile0x  <   ( player4x  +  3 )   &&	missile0y  >  player4y	-  10 then player4y  =	100 :  player4x  =  116 :  goto collisions
   1758  172c
   1759  172c							; complex condition detected
   1760  172c							; complex statement detected
   1761  172c		       a5 88		      LDA	player4x
   1762  172e		       38		      SEC
   1763  172f		       e9 0c		      SBC	#12
   1764  1731							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1765  1731		       c5 80		      CMP	missile0x
   1766  1733		       b0 22		      BCS	.skipL0167
   1767  1735				   .condpart98
   1768  1735							; complex condition detected
   1769  1735							; complex statement detected
   1770  1735		       a5 88		      LDA	player4x
   1771  1737		       18		      CLC
   1772  1738		       69 03		      ADC	#3
   1773  173a		       48		      PHA
   1774  173b		       ba		      TSX
   1775  173c		       68		      PLA
   1776  173d		       a5 80		      LDA	missile0x
   1777  173f		       d5 01		      CMP	1,x
   1778  1741		       b0 14		      BCS	.skip98then
   1779  1743				   .condpart99
   1780  1743							; complex condition detected
   1781  1743		       a5 91		      LDA	player4y
   1782  1745		       38		      SEC
   1783  1746		       e9 0a		      SBC	#10
   1784  1748		       c5 8a		      CMP	missile0y
   1785  174a		       b0 0b		      BCS	.skip99then
   1786  174c				   .condpart100
   1787  174c		       a9 64		      LDA	#100
   1788  174e		       85 91		      STA	player4y
   1789  1750		       a9 74		      LDA	#116
   1790  1752		       85 88		      STA	player4x
   1791  1754		       4c 39 de 	      jmp	.collisions
   1792  1757
   1793  1757				   .skip99then
   1794  1757				   .skip98then
   1795  1757				   .skipL0167
   1796  1757				   .
   1797  1757							; 
   1798  1757
   1799  1757				   .frameReset
   1800  1757							; frameReset
   1801  1757
   1802  1757				   .
   1803  1757							; 
   1804  1757
   1805  1757				   .checkPlayer1Position
   1806  1757							; checkPlayer1Position
   1807  1757
   1808  1757				   .L0168		;  if player1y  <  99 then goto checkPlayer2Position
   1809  1757
   1810  1757		       a5 8e		      LDA	player1y
   1811  1759		       c9 63		      CMP	#99
   1812  175b		       b0 03		      BCS	.skipL0168
   1813  175d				   .condpart101
   1814  175d		       4c 79 d7 	      jmp	.checkPlayer2Position
   1815  1760
   1816  1760				   .skipL0168
   1817  1760				   .L0169		;  if player1x  <  30	||  player1x  >  120 then player1x  =  player1x  +  50	:  goto checkPlayer1Position
   1818  1760
   1819  1760		       a5 85		      LDA	player1x
   1820  1762		       c9 1e		      CMP	#30
   1821  1764		       b0 03		      BCS	.skipL0169
   1822  1766				   .condpart102
   1823  1766		       4c 6f d7 	      jmp	.condpart103
   1824  1769				   .skipL0169
   1825  1769		       a9 78		      LDA	#120
   1826  176b		       c5 85		      CMP	player1x
   1827  176d		       b0 0a		      BCS	.skip38OR
   1828  176f				   .condpart103
   1829  176f		       a5 85		      LDA	player1x
   1830  1771		       18		      CLC
   1831  1772		       69 32		      ADC	#50
   1832  1774		       85 85		      STA	player1x
   1833  1776		       4c 57 d7 	      jmp	.checkPlayer1Position
   1834  1779
   1835  1779				   .skip38OR
   1836  1779				   .
   1837  1779							; 
   1838  1779
   1839  1779				   .checkPlayer2Position
   1840  1779							; checkPlayer2Position
   1841  1779
   1842  1779				   .L0170		;  if player2y  <  99 then goto checkPlayer3Position
   1843  1779
   1844  1779		       a5 8f		      LDA	player2y
   1845  177b		       c9 63		      CMP	#99
   1846  177d		       b0 03		      BCS	.skipL0170
   1847  177f				   .condpart104
   1848  177f		       4c 9b d7 	      jmp	.checkPlayer3Position
   1849  1782
   1850  1782				   .skipL0170
   1851  1782				   .L0171		;  if player2x  <  30	||  player2x  >  120 then player2x  =  player2x  +  50	:  goto checkPlayer2Position
   1852  1782
   1853  1782		       a5 86		      LDA	player2x
   1854  1784		       c9 1e		      CMP	#30
   1855  1786		       b0 03		      BCS	.skipL0171
   1856  1788				   .condpart105
   1857  1788		       4c 91 d7 	      jmp	.condpart106
   1858  178b				   .skipL0171
   1859  178b		       a9 78		      LDA	#120
   1860  178d		       c5 86		      CMP	player2x
   1861  178f		       b0 0a		      BCS	.skip39OR
   1862  1791				   .condpart106
   1863  1791		       a5 86		      LDA	player2x
   1864  1793		       18		      CLC
   1865  1794		       69 32		      ADC	#50
   1866  1796		       85 86		      STA	player2x
   1867  1798		       4c 79 d7 	      jmp	.checkPlayer2Position
   1868  179b
   1869  179b				   .skip39OR
   1870  179b				   .
   1871  179b							; 
   1872  179b
   1873  179b				   .checkPlayer3Position
   1874  179b							; checkPlayer3Position
   1875  179b
   1876  179b				   .L0172		;  if player3y  <  99 then goto exitPositionCheck
   1877  179b
   1878  179b		       a5 90		      LDA	player3y
   1879  179d		       c9 63		      CMP	#99
   1880  179f		       b0 03		      BCS	.skipL0172
   1881  17a1				   .condpart107
   1882  17a1		       4c bd d7 	      jmp	.exitPositionCheck
   1883  17a4
   1884  17a4				   .skipL0172
   1885  17a4				   .L0173		;  if player3x  <  30	||  player3x  >  120 then player3x  =  player3x  +  50	:  goto checkPlayer3Position
   1886  17a4
   1887  17a4		       a5 87		      LDA	player3x
   1888  17a6		       c9 1e		      CMP	#30
   1889  17a8		       b0 03		      BCS	.skipL0173
   1890  17aa				   .condpart108
   1891  17aa		       4c b3 d7 	      jmp	.condpart109
   1892  17ad				   .skipL0173
   1893  17ad		       a9 78		      LDA	#120
   1894  17af		       c5 87		      CMP	player3x
   1895  17b1		       b0 0a		      BCS	.skip40OR
   1896  17b3				   .condpart109
   1897  17b3		       a5 87		      LDA	player3x
   1898  17b5		       18		      CLC
   1899  17b6		       69 32		      ADC	#50
   1900  17b8		       85 87		      STA	player3x
   1901  17ba		       4c 9b d7 	      jmp	.checkPlayer3Position
   1902  17bd
   1903  17bd				   .skip40OR
   1904  17bd				   .
   1905  17bd							; 
   1906  17bd
   1907  17bd				   .exitPositionCheck
   1908  17bd							; exitPositionCheck
   1909  17bd
   1910  17bd				   .
   1911  17bd							; 
   1912  17bd
   1913  17bd				   .
   1914  17bd							; 
   1915  17bd
   1916  17bd				   .
   1917  17bd							; 
   1918  17bd
   1919  17bd				   .L0174		;  if _resetTicker  >	0 then goto resetScreen
   1920  17bd
   1921  17bd		       a9 00		      LDA	#0
   1922  17bf		       c5 ee		      CMP	_resetTicker
   1923  17c1		       b0 03		      BCS	.skipL0174
   1924  17c3				   .condpart110
   1925  17c3		       4c ab db 	      jmp	.resetScreen
   1926  17c6
   1927  17c6				   .skipL0174
   1928  17c6				   .L0175		;  if killCount  <  5 then goto level1
   1929  17c6
   1930  17c6		       a5 e3		      LDA	killCount
   1931  17c8		       c9 05		      CMP	#5
   1932  17ca		       b0 03		      BCS	.skipL0175
   1933  17cc				   .condpart111
   1934  17cc		       4c 9a db 	      jmp	.level1
   1935  17cf
   1936  17cf				   .skipL0175
   1937  17cf				   .L0176		;  if killCount  <  11 then goto level2
   1938  17cf
   1939  17cf		       a5 e3		      LDA	killCount
   1940  17d1		       c9 0b		      CMP	#11
   1941  17d3		       b0 03		      BCS	.skipL0176
   1942  17d5				   .condpart112
   1943  17d5		       4c 7d db 	      jmp	.level2
   1944  17d8
   1945  17d8				   .skipL0176
   1946  17d8				   .L0177		;  if killCount  <  18 then goto level3
   1947  17d8
   1948  17d8		       a5 e3		      LDA	killCount
   1949  17da		       c9 12		      CMP	#18
   1950  17dc		       b0 03		      BCS	.skipL0177
   1951  17de				   .condpart113
   1952  17de		       4c 4d db 	      jmp	.level3
   1953  17e1
   1954  17e1				   .skipL0177
   1955  17e1				   .L0178		;  if killCount  <  26 then goto level4
   1956  17e1
   1957  17e1		       a5 e3		      LDA	killCount
   1958  17e3		       c9 1a		      CMP	#26
   1959  17e5		       b0 03		      BCS	.skipL0178
   1960  17e7				   .condpart114
   1961  17e7		       4c 1f db 	      jmp	.level4
   1962  17ea
   1963  17ea				   .skipL0178
   1964  17ea				   .L0179		;  if killCount  <  35 then goto level5
   1965  17ea
   1966  17ea		       a5 e3		      LDA	killCount
   1967  17ec		       c9 23		      CMP	#35
   1968  17ee		       b0 03		      BCS	.skipL0179
   1969  17f0				   .condpart115
   1970  17f0		       4c f5 da 	      jmp	.level5
   1971  17f3
   1972  17f3				   .skipL0179
   1973  17f3				   .L0180		;  if killCount  <  45 then goto level6
   1974  17f3
   1975  17f3		       a5 e3		      LDA	killCount
   1976  17f5		       c9 2d		      CMP	#45
   1977  17f7		       b0 03		      BCS	.skipL0180
   1978  17f9				   .condpart116
   1979  17f9		       4c c5 da 	      jmp	.level6
   1980  17fc
   1981  17fc				   .skipL0180
   1982  17fc				   .L0181		;  if killCount  <  56 then goto level7
   1983  17fc
   1984  17fc		       a5 e3		      LDA	killCount
   1985  17fe		       c9 38		      CMP	#56
   1986  1800		       b0 03		      BCS	.skipL0181
   1987  1802				   .condpart117
   1988  1802		       4c 88 da 	      jmp	.level7
   1989  1805
   1990  1805				   .skipL0181
   1991  1805				   .L0182		;  if killCount  <  68 then goto level8
   1992  1805
   1993  1805		       a5 e3		      LDA	killCount
   1994  1807		       c9 44		      CMP	#68
   1995  1809		       b0 03		      BCS	.skipL0182
   1996  180b				   .condpart118
   1997  180b		       4c 4d da 	      jmp	.level8
   1998  180e
   1999  180e				   .skipL0182
   2000  180e				   .L0183		;  if killCount  <  81 then goto level9
   2001  180e
   2002  180e		       a5 e3		      LDA	killCount
   2003  1810		       c9 51		      CMP	#81
   2004  1812		       b0 03		      BCS	.skipL0183
   2005  1814				   .condpart119
   2006  1814		       4c 16 da 	      jmp	.level9
   2007  1817
   2008  1817				   .skipL0183
   2009  1817				   .L0184		;  if killCount  <  95 then goto level10
   2010  1817
   2011  1817		       a5 e3		      LDA	killCount
   2012  1819		       c9 5f		      CMP	#95
   2013  181b		       b0 03		      BCS	.skipL0184
   2014  181d				   .condpart120
   2015  181d		       4c df d9 	      jmp	.level10
   2016  1820
   2017  1820				   .skipL0184
   2018  1820				   .L0185		;  if killCount  <  110 then goto level11
   2019  1820
   2020  1820		       a5 e3		      LDA	killCount
   2021  1822		       c9 6e		      CMP	#110
   2022  1824		       b0 03		      BCS	.skipL0185
   2023  1826				   .condpart121
   2024  1826		       4c a8 d9 	      jmp	.level11
   2025  1829
   2026  1829				   .skipL0185
   2027  1829				   .L0186		;  if killCount  <  126 then goto level12
   2028  1829
   2029  1829		       a5 e3		      LDA	killCount
   2030  182b		       c9 7e		      CMP	#126
   2031  182d		       b0 03		      BCS	.skipL0186
   2032  182f				   .condpart122
   2033  182f		       4c 6d d9 	      jmp	.level12
   2034  1832
   2035  1832				   .skipL0186
   2036  1832				   .L0187		;  if killCount  <  143 then goto level13
   2037  1832
   2038  1832		       a5 e3		      LDA	killCount
   2039  1834		       c9 8f		      CMP	#143
   2040  1836		       b0 03		      BCS	.skipL0187
   2041  1838				   .condpart123
   2042  1838		       4c 36 d9 	      jmp	.level13
   2043  183b
   2044  183b				   .skipL0187
   2045  183b				   .L0188		;  if killCount  <  161 then goto level14
   2046  183b
   2047  183b		       a5 e3		      LDA	killCount
   2048  183d		       c9 a1		      CMP	#161
   2049  183f		       b0 03		      BCS	.skipL0188
   2050  1841				   .condpart124
   2051  1841		       4c ff d8 	      jmp	.level14
   2052  1844
   2053  1844				   .skipL0188
   2054  1844				   .L0189		;  if killCount  <  180 then goto level15
   2055  1844
   2056  1844		       a5 e3		      LDA	killCount
   2057  1846		       c9 b4		      CMP	#180
   2058  1848		       b0 03		      BCS	.skipL0189
   2059  184a				   .condpart125
   2060  184a		       4c c8 d8 	      jmp	.level15
   2061  184d
   2062  184d				   .skipL0189
   2063  184d				   .L0190		;  if killCount  <  200 then goto level16
   2064  184d
   2065  184d		       a5 e3		      LDA	killCount
   2066  184f		       c9 c8		      CMP	#200
   2067  1851		       b0 03		      BCS	.skipL0190
   2068  1853				   .condpart126
   2069  1853		       4c 8d d8 	      jmp	.level16
   2070  1856
   2071  1856				   .skipL0190
   2072  1856				   .
   2073  1856							; 
   2074  1856
   2075  1856				   .L0191		;  asteroidY  =  asteroidY  -	0.37
   2076  1856
   2077  1856		       a5 d8		      LDA	b
   2078  1858		       38		      SEC
   2079  1859		       e9 5e		      SBC	#94
   2080  185b		       85 d8		      STA	b
   2081  185d		       a5 8e		      LDA	asteroidY
   2082  185f		       e9 00		      SBC	#0
   2083  1861		       85 8e		      STA	asteroidY
   2084  1863				   .L0192		;  asteroid2Y	=  asteroid2Y  -  0.42
   2085  1863
   2086  1863		       a5 d9		      LDA	c
   2087  1865		       38		      SEC
   2088  1866		       e9 6b		      SBC	#107
   2089  1868		       85 d9		      STA	c
   2090  186a		       a5 8f		      LDA	asteroid2Y
   2091  186c		       e9 00		      SBC	#0
   2092  186e		       85 8f		      STA	asteroid2Y
   2093  1870				   .L0193		;  asteroid3Y	=  asteroid3Y  -  0.33
   2094  1870
   2095  1870		       a5 da		      LDA	d
   2096  1872		       38		      SEC
   2097  1873		       e9 54		      SBC	#84
   2098  1875		       85 da		      STA	d
   2099  1877		       a5 90		      LDA	asteroid3Y
   2100  1879		       e9 00		      SBC	#0
   2101  187b		       85 90		      STA	asteroid3Y
   2102  187d				   .L0194		;  asteroid4Y	=  asteroid4Y  -  0.08
   2103  187d
   2104  187d		       a5 db		      LDA	e
   2105  187f		       38		      SEC
   2106  1880		       e9 14		      SBC	#20
   2107  1882		       85 db		      STA	e
   2108  1884		       a5 91		      LDA	asteroid4Y
   2109  1886		       e9 00		      SBC	#0
   2110  1888		       85 91		      STA	asteroid4Y
   2111  188a				   .L0195		;  goto resetScreen
   2112  188a
   2113  188a		       4c ab db 	      jmp	.resetScreen
   2114  188d
   2115  188d				   .
   2116  188d							; 
   2117  188d
   2118  188d				   .level16
   2119  188d							; level16
   2120  188d
   2121  188d				   .L0196		;  asteroidY  =  asteroidY  -	0.35
   2122  188d
   2123  188d		       a5 d8		      LDA	b
   2124  188f		       38		      SEC
   2125  1890		       e9 59		      SBC	#89
   2126  1892		       85 d8		      STA	b
   2127  1894		       a5 8e		      LDA	asteroidY
   2128  1896		       e9 00		      SBC	#0
   2129  1898		       85 8e		      STA	asteroidY
   2130  189a				   .L0197		;  asteroid2Y	=  asteroid2Y  -  0.40
   2131  189a
   2132  189a		       a5 d9		      LDA	c
   2133  189c		       38		      SEC
   2134  189d		       e9 66		      SBC	#102
   2135  189f		       85 d9		      STA	c
   2136  18a1		       a5 8f		      LDA	asteroid2Y
   2137  18a3		       e9 00		      SBC	#0
   2138  18a5		       85 8f		      STA	asteroid2Y
   2139  18a7				   .L0198		;  asteroid3Y	=  asteroid3Y  -  0.31
   2140  18a7
   2141  18a7		       a5 da		      LDA	d
   2142  18a9		       38		      SEC
   2143  18aa		       e9 4f		      SBC	#79
   2144  18ac		       85 da		      STA	d
   2145  18ae		       a5 90		      LDA	asteroid3Y
   2146  18b0		       e9 00		      SBC	#0
   2147  18b2		       85 90		      STA	asteroid3Y
   2148  18b4				   .L0199		;  asteroid4Y	=  asteroid4Y  -  0.08
   2149  18b4
   2150  18b4		       a5 db		      LDA	e
   2151  18b6		       38		      SEC
   2152  18b7		       e9 14		      SBC	#20
   2153  18b9		       85 db		      STA	e
   2154  18bb		       a5 91		      LDA	asteroid4Y
   2155  18bd		       e9 00		      SBC	#0
   2156  18bf		       85 91		      STA	asteroid4Y
   2157  18c1				   .L0200		;  COLUPF  =  $60
   2158  18c1
   2159  18c1		       a9 60		      LDA	#$60
   2160  18c3		       85 08		      STA	COLUPF
   2161  18c5				   .L0201		;  goto resetScreen
   2162  18c5
   2163  18c5		       4c ab db 	      jmp	.resetScreen
   2164  18c8
   2165  18c8				   .
   2166  18c8							; 
   2167  18c8
   2168  18c8				   .level15
   2169  18c8							; level15
   2170  18c8
   2171  18c8				   .L0202		;  asteroidY  =  asteroidY  -	0.33
   2172  18c8
   2173  18c8		       a5 d8		      LDA	b
   2174  18ca		       38		      SEC
   2175  18cb		       e9 54		      SBC	#84
   2176  18cd		       85 d8		      STA	b
   2177  18cf		       a5 8e		      LDA	asteroidY
   2178  18d1		       e9 00		      SBC	#0
   2179  18d3		       85 8e		      STA	asteroidY
   2180  18d5				   .L0203		;  asteroid2Y	=  asteroid2Y  -  0.38
   2181  18d5
   2182  18d5		       a5 d9		      LDA	c
   2183  18d7		       38		      SEC
   2184  18d8		       e9 61		      SBC	#97
   2185  18da		       85 d9		      STA	c
   2186  18dc		       a5 8f		      LDA	asteroid2Y
   2187  18de		       e9 00		      SBC	#0
   2188  18e0		       85 8f		      STA	asteroid2Y
   2189  18e2				   .L0204		;  asteroid3Y	=  asteroid3Y  -  0.29
   2190  18e2
   2191  18e2		       a5 da		      LDA	d
   2192  18e4		       38		      SEC
   2193  18e5		       e9 4a		      SBC	#74
   2194  18e7		       85 da		      STA	d
   2195  18e9		       a5 90		      LDA	asteroid3Y
   2196  18eb		       e9 00		      SBC	#0
   2197  18ed		       85 90		      STA	asteroid3Y
   2198  18ef				   .L0205		;  asteroid4Y	=  asteroid4Y  -  0.08
   2199  18ef
   2200  18ef		       a5 db		      LDA	e
   2201  18f1		       38		      SEC
   2202  18f2		       e9 14		      SBC	#20
   2203  18f4		       85 db		      STA	e
   2204  18f6		       a5 91		      LDA	asteroid4Y
   2205  18f8		       e9 00		      SBC	#0
   2206  18fa		       85 91		      STA	asteroid4Y
   2207  18fc				   .L0206		;  goto resetScreen
   2208  18fc
   2209  18fc		       4c ab db 	      jmp	.resetScreen
   2210  18ff
   2211  18ff				   .
   2212  18ff							; 
   2213  18ff
   2214  18ff				   .level14
   2215  18ff							; level14
   2216  18ff
   2217  18ff				   .L0207		;  asteroidY  =  asteroidY  -	0.31
   2218  18ff
   2219  18ff		       a5 d8		      LDA	b
   2220  1901		       38		      SEC
   2221  1902		       e9 4f		      SBC	#79
   2222  1904		       85 d8		      STA	b
   2223  1906		       a5 8e		      LDA	asteroidY
   2224  1908		       e9 00		      SBC	#0
   2225  190a		       85 8e		      STA	asteroidY
   2226  190c				   .L0208		;  asteroid2Y	=  asteroid2Y  -  0.35
   2227  190c
   2228  190c		       a5 d9		      LDA	c
   2229  190e		       38		      SEC
   2230  190f		       e9 59		      SBC	#89
   2231  1911		       85 d9		      STA	c
   2232  1913		       a5 8f		      LDA	asteroid2Y
   2233  1915		       e9 00		      SBC	#0
   2234  1917		       85 8f		      STA	asteroid2Y
   2235  1919				   .L0209		;  asteroid3Y	=  asteroid3Y  -  0.27
   2236  1919
   2237  1919		       a5 da		      LDA	d
   2238  191b		       38		      SEC
   2239  191c		       e9 45		      SBC	#69
   2240  191e		       85 da		      STA	d
   2241  1920		       a5 90		      LDA	asteroid3Y
   2242  1922		       e9 00		      SBC	#0
   2243  1924		       85 90		      STA	asteroid3Y
   2244  1926				   .L0210		;  asteroid4Y	=  asteroid4Y  -  0.08
   2245  1926
   2246  1926		       a5 db		      LDA	e
   2247  1928		       38		      SEC
   2248  1929		       e9 14		      SBC	#20
   2249  192b		       85 db		      STA	e
   2250  192d		       a5 91		      LDA	asteroid4Y
   2251  192f		       e9 00		      SBC	#0
   2252  1931		       85 91		      STA	asteroid4Y
   2253  1933				   .L0211		;  goto resetScreen
   2254  1933
   2255  1933		       4c ab db 	      jmp	.resetScreen
   2256  1936
   2257  1936				   .
   2258  1936							; 
   2259  1936
   2260  1936				   .level13
   2261  1936							; level13
   2262  1936
   2263  1936				   .L0212		;  asteroidY  =  asteroidY  -	0.29
   2264  1936
   2265  1936		       a5 d8		      LDA	b
   2266  1938		       38		      SEC
   2267  1939		       e9 4a		      SBC	#74
   2268  193b		       85 d8		      STA	b
   2269  193d		       a5 8e		      LDA	asteroidY
   2270  193f		       e9 00		      SBC	#0
   2271  1941		       85 8e		      STA	asteroidY
   2272  1943				   .L0213		;  asteroid2Y	=  asteroid2Y  -  0.33
   2273  1943
   2274  1943		       a5 d9		      LDA	c
   2275  1945		       38		      SEC
   2276  1946		       e9 54		      SBC	#84
   2277  1948		       85 d9		      STA	c
   2278  194a		       a5 8f		      LDA	asteroid2Y
   2279  194c		       e9 00		      SBC	#0
   2280  194e		       85 8f		      STA	asteroid2Y
   2281  1950				   .L0214		;  asteroid3Y	=  asteroid3Y  -  0.25
   2282  1950
   2283  1950		       a5 da		      LDA	d
   2284  1952		       38		      SEC
   2285  1953		       e9 40		      SBC	#64
   2286  1955		       85 da		      STA	d
   2287  1957		       a5 90		      LDA	asteroid3Y
   2288  1959		       e9 00		      SBC	#0
   2289  195b		       85 90		      STA	asteroid3Y
   2290  195d				   .L0215		;  asteroid4Y	=  asteroid4Y  -  0.08
   2291  195d
   2292  195d		       a5 db		      LDA	e
   2293  195f		       38		      SEC
   2294  1960		       e9 14		      SBC	#20
   2295  1962		       85 db		      STA	e
   2296  1964		       a5 91		      LDA	asteroid4Y
   2297  1966		       e9 00		      SBC	#0
   2298  1968		       85 91		      STA	asteroid4Y
   2299  196a				   .L0216		;  goto resetScreen
   2300  196a
   2301  196a		       4c ab db 	      jmp	.resetScreen
   2302  196d
   2303  196d				   .
   2304  196d							; 
   2305  196d
   2306  196d				   .level12
   2307  196d							; level12
   2308  196d
   2309  196d				   .L0217		;  asteroidY  =  asteroidY  -	0.27
   2310  196d
   2311  196d		       a5 d8		      LDA	b
   2312  196f		       38		      SEC
   2313  1970		       e9 45		      SBC	#69
   2314  1972		       85 d8		      STA	b
   2315  1974		       a5 8e		      LDA	asteroidY
   2316  1976		       e9 00		      SBC	#0
   2317  1978		       85 8e		      STA	asteroidY
   2318  197a				   .L0218		;  asteroid2Y	=  asteroid2Y  -  0.31
   2319  197a
   2320  197a		       a5 d9		      LDA	c
   2321  197c		       38		      SEC
   2322  197d		       e9 4f		      SBC	#79
   2323  197f		       85 d9		      STA	c
   2324  1981		       a5 8f		      LDA	asteroid2Y
   2325  1983		       e9 00		      SBC	#0
   2326  1985		       85 8f		      STA	asteroid2Y
   2327  1987				   .L0219		;  asteroid3Y	=  asteroid3Y  -  0.23
   2328  1987
   2329  1987		       a5 da		      LDA	d
   2330  1989		       38		      SEC
   2331  198a		       e9 3a		      SBC	#58
   2332  198c		       85 da		      STA	d
   2333  198e		       a5 90		      LDA	asteroid3Y
   2334  1990		       e9 00		      SBC	#0
   2335  1992		       85 90		      STA	asteroid3Y
   2336  1994				   .L0220		;  asteroid4Y	=  asteroid4Y  -  0.08
   2337  1994
   2338  1994		       a5 db		      LDA	e
   2339  1996		       38		      SEC
   2340  1997		       e9 14		      SBC	#20
   2341  1999		       85 db		      STA	e
   2342  199b		       a5 91		      LDA	asteroid4Y
   2343  199d		       e9 00		      SBC	#0
   2344  199f		       85 91		      STA	asteroid4Y
   2345  19a1				   .L0221		;  COLUPF  =  $02
   2346  19a1
   2347  19a1		       a9 02		      LDA	#$02
   2348  19a3		       85 08		      STA	COLUPF
   2349  19a5				   .L0222		;  goto resetScreen
   2350  19a5
   2351  19a5		       4c ab db 	      jmp	.resetScreen
   2352  19a8
   2353  19a8				   .
   2354  19a8							; 
   2355  19a8
   2356  19a8				   .level11
   2357  19a8							; level11
   2358  19a8
   2359  19a8				   .L0223		;  asteroidY  =  asteroidY  -	0.24
   2360  19a8
   2361  19a8		       a5 d8		      LDA	b
   2362  19aa		       38		      SEC
   2363  19ab		       e9 3d		      SBC	#61
   2364  19ad		       85 d8		      STA	b
   2365  19af		       a5 8e		      LDA	asteroidY
   2366  19b1		       e9 00		      SBC	#0
   2367  19b3		       85 8e		      STA	asteroidY
   2368  19b5				   .L0224		;  asteroid2Y	=  asteroid2Y  -  0.29
   2369  19b5
   2370  19b5		       a5 d9		      LDA	c
   2371  19b7		       38		      SEC
   2372  19b8		       e9 4a		      SBC	#74
   2373  19ba		       85 d9		      STA	c
   2374  19bc		       a5 8f		      LDA	asteroid2Y
   2375  19be		       e9 00		      SBC	#0
   2376  19c0		       85 8f		      STA	asteroid2Y
   2377  19c2				   .L0225		;  asteroid3Y	=  asteroid3Y  -  0.21
   2378  19c2
   2379  19c2		       a5 da		      LDA	d
   2380  19c4		       38		      SEC
   2381  19c5		       e9 35		      SBC	#53
   2382  19c7		       85 da		      STA	d
   2383  19c9		       a5 90		      LDA	asteroid3Y
   2384  19cb		       e9 00		      SBC	#0
   2385  19cd		       85 90		      STA	asteroid3Y
   2386  19cf				   .L0226		;  asteroid4Y	=  asteroid4Y  -  0.08
   2387  19cf
   2388  19cf		       a5 db		      LDA	e
   2389  19d1		       38		      SEC
   2390  19d2		       e9 14		      SBC	#20
   2391  19d4		       85 db		      STA	e
   2392  19d6		       a5 91		      LDA	asteroid4Y
   2393  19d8		       e9 00		      SBC	#0
   2394  19da		       85 91		      STA	asteroid4Y
   2395  19dc				   .L0227		;  goto resetScreen
   2396  19dc
   2397  19dc		       4c ab db 	      jmp	.resetScreen
   2398  19df
   2399  19df				   .
   2400  19df							; 
   2401  19df
   2402  19df				   .level10
   2403  19df							; level10
   2404  19df
   2405  19df				   .L0228		;  asteroidY  =  asteroidY  -	0.22
   2406  19df
   2407  19df		       a5 d8		      LDA	b
   2408  19e1		       38		      SEC
   2409  19e2		       e9 38		      SBC	#56
   2410  19e4		       85 d8		      STA	b
   2411  19e6		       a5 8e		      LDA	asteroidY
   2412  19e8		       e9 00		      SBC	#0
   2413  19ea		       85 8e		      STA	asteroidY
   2414  19ec				   .L0229		;  asteroid2Y	=  asteroid2Y  -  0.27
   2415  19ec
   2416  19ec		       a5 d9		      LDA	c
   2417  19ee		       38		      SEC
   2418  19ef		       e9 45		      SBC	#69
   2419  19f1		       85 d9		      STA	c
   2420  19f3		       a5 8f		      LDA	asteroid2Y
   2421  19f5		       e9 00		      SBC	#0
   2422  19f7		       85 8f		      STA	asteroid2Y
   2423  19f9				   .L0230		;  asteroid3Y	=  asteroid3Y  -  0.19
   2424  19f9
   2425  19f9		       a5 da		      LDA	d
   2426  19fb		       38		      SEC
   2427  19fc		       e9 30		      SBC	#48
   2428  19fe		       85 da		      STA	d
   2429  1a00		       a5 90		      LDA	asteroid3Y
   2430  1a02		       e9 00		      SBC	#0
   2431  1a04		       85 90		      STA	asteroid3Y
   2432  1a06				   .L0231		;  asteroid4Y	=  asteroid4Y  -  0.08
   2433  1a06
   2434  1a06		       a5 db		      LDA	e
   2435  1a08		       38		      SEC
   2436  1a09		       e9 14		      SBC	#20
   2437  1a0b		       85 db		      STA	e
   2438  1a0d		       a5 91		      LDA	asteroid4Y
   2439  1a0f		       e9 00		      SBC	#0
   2440  1a11		       85 91		      STA	asteroid4Y
   2441  1a13				   .L0232		;  goto resetScreen
   2442  1a13
   2443  1a13		       4c ab db 	      jmp	.resetScreen
   2444  1a16
   2445  1a16				   .
   2446  1a16							; 
   2447  1a16
   2448  1a16				   .level9
   2449  1a16							; level9
   2450  1a16
   2451  1a16				   .L0233		;  asteroidY  =  asteroidY  -	0.20
   2452  1a16
   2453  1a16		       a5 d8		      LDA	b
   2454  1a18		       38		      SEC
   2455  1a19		       e9 33		      SBC	#51
   2456  1a1b		       85 d8		      STA	b
   2457  1a1d		       a5 8e		      LDA	asteroidY
   2458  1a1f		       e9 00		      SBC	#0
   2459  1a21		       85 8e		      STA	asteroidY
   2460  1a23				   .L0234		;  asteroid2Y	=  asteroid2Y  -  0.25
   2461  1a23
   2462  1a23		       a5 d9		      LDA	c
   2463  1a25		       38		      SEC
   2464  1a26		       e9 40		      SBC	#64
   2465  1a28		       85 d9		      STA	c
   2466  1a2a		       a5 8f		      LDA	asteroid2Y
   2467  1a2c		       e9 00		      SBC	#0
   2468  1a2e		       85 8f		      STA	asteroid2Y
   2469  1a30				   .L0235		;  asteroid3Y	=  asteroid3Y  -  0.17
   2470  1a30
   2471  1a30		       a5 da		      LDA	d
   2472  1a32		       38		      SEC
   2473  1a33		       e9 2b		      SBC	#43
   2474  1a35		       85 da		      STA	d
   2475  1a37		       a5 90		      LDA	asteroid3Y
   2476  1a39		       e9 00		      SBC	#0
   2477  1a3b		       85 90		      STA	asteroid3Y
   2478  1a3d				   .L0236		;  asteroid4Y	=  asteroid4Y  -  0.08
   2479  1a3d
   2480  1a3d		       a5 db		      LDA	e
   2481  1a3f		       38		      SEC
   2482  1a40		       e9 14		      SBC	#20
   2483  1a42		       85 db		      STA	e
   2484  1a44		       a5 91		      LDA	asteroid4Y
   2485  1a46		       e9 00		      SBC	#0
   2486  1a48		       85 91		      STA	asteroid4Y
   2487  1a4a				   .L0237		;  goto resetScreen
   2488  1a4a
   2489  1a4a		       4c ab db 	      jmp	.resetScreen
   2490  1a4d
   2491  1a4d				   .
   2492  1a4d							; 
   2493  1a4d
   2494  1a4d				   .level8
   2495  1a4d							; level8
   2496  1a4d
   2497  1a4d				   .L0238		;  asteroidY  =  asteroidY  -	0.18
   2498  1a4d
   2499  1a4d		       a5 d8		      LDA	b
   2500  1a4f		       38		      SEC
   2501  1a50		       e9 2e		      SBC	#46
   2502  1a52		       85 d8		      STA	b
   2503  1a54		       a5 8e		      LDA	asteroidY
   2504  1a56		       e9 00		      SBC	#0
   2505  1a58		       85 8e		      STA	asteroidY
   2506  1a5a				   .L0239		;  asteroid2Y	=  asteroid2Y  -  0.23
   2507  1a5a
   2508  1a5a		       a5 d9		      LDA	c
   2509  1a5c		       38		      SEC
   2510  1a5d		       e9 3a		      SBC	#58
   2511  1a5f		       85 d9		      STA	c
   2512  1a61		       a5 8f		      LDA	asteroid2Y
   2513  1a63		       e9 00		      SBC	#0
   2514  1a65		       85 8f		      STA	asteroid2Y
   2515  1a67				   .L0240		;  asteroid3Y	=  asteroid3Y  -  0.15
   2516  1a67
   2517  1a67		       a5 da		      LDA	d
   2518  1a69		       38		      SEC
   2519  1a6a		       e9 26		      SBC	#38
   2520  1a6c		       85 da		      STA	d
   2521  1a6e		       a5 90		      LDA	asteroid3Y
   2522  1a70		       e9 00		      SBC	#0
   2523  1a72		       85 90		      STA	asteroid3Y
   2524  1a74				   .L0241		;  asteroid4Y	=  asteroid4Y  -  0.08
   2525  1a74
   2526  1a74		       a5 db		      LDA	e
   2527  1a76		       38		      SEC
   2528  1a77		       e9 14		      SBC	#20
   2529  1a79		       85 db		      STA	e
   2530  1a7b		       a5 91		      LDA	asteroid4Y
   2531  1a7d		       e9 00		      SBC	#0
   2532  1a7f		       85 91		      STA	asteroid4Y
   2533  1a81				   .L0242		;  COLUPF  =  $50
   2534  1a81
   2535  1a81		       a9 50		      LDA	#$50
   2536  1a83		       85 08		      STA	COLUPF
   2537  1a85				   .L0243		;  goto resetScreen
   2538  1a85
   2539  1a85		       4c ab db 	      jmp	.resetScreen
   2540  1a88
   2541  1a88				   .
   2542  1a88							; 
   2543  1a88
   2544  1a88				   .level7
   2545  1a88							; level7
   2546  1a88
   2547  1a88				   .L0244		;  asteroidY  =  asteroidY  -	0.18
   2548  1a88
   2549  1a88		       a5 d8		      LDA	b
   2550  1a8a		       38		      SEC
   2551  1a8b		       e9 2e		      SBC	#46
   2552  1a8d		       85 d8		      STA	b
   2553  1a8f		       a5 8e		      LDA	asteroidY
   2554  1a91		       e9 00		      SBC	#0
   2555  1a93		       85 8e		      STA	asteroidY
   2556  1a95				   .L0245		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.23
   2557  1a95
   2558  1a95		       a5 8f		      LDA	asteroid2Y
   2559  1a97		       c9 64		      CMP	#100
   2560  1a99		       b0 0d		      BCS	.skipL0245
   2561  1a9b				   .condpart127
   2562  1a9b		       a5 d9		      LDA	c
   2563  1a9d		       38		      SEC
   2564  1a9e		       e9 3a		      SBC	#58
   2565  1aa0		       85 d9		      STA	c
   2566  1aa2		       a5 8f		      LDA	asteroid2Y
   2567  1aa4		       e9 00		      SBC	#0
   2568  1aa6		       85 8f		      STA	asteroid2Y
   2569  1aa8				   .skipL0245
   2570  1aa8				   .L0246		;  asteroid3Y	=  asteroid3Y  -  0.15
   2571  1aa8
   2572  1aa8		       a5 da		      LDA	d
   2573  1aaa		       38		      SEC
   2574  1aab		       e9 26		      SBC	#38
   2575  1aad		       85 da		      STA	d
   2576  1aaf		       a5 90		      LDA	asteroid3Y
   2577  1ab1		       e9 00		      SBC	#0
   2578  1ab3		       85 90		      STA	asteroid3Y
   2579  1ab5				   .L0247		;  asteroid4Y	=  asteroid4Y  -  0.08
   2580  1ab5
   2581  1ab5		       a5 db		      LDA	e
   2582  1ab7		       38		      SEC
   2583  1ab8		       e9 14		      SBC	#20
   2584  1aba		       85 db		      STA	e
   2585  1abc		       a5 91		      LDA	asteroid4Y
   2586  1abe		       e9 00		      SBC	#0
   2587  1ac0		       85 91		      STA	asteroid4Y
   2588  1ac2				   .L0248		;  goto resetScreen
   2589  1ac2
   2590  1ac2		       4c ab db 	      jmp	.resetScreen
   2591  1ac5
   2592  1ac5				   .
   2593  1ac5							; 
   2594  1ac5
   2595  1ac5				   .level6
   2596  1ac5							; level6
   2597  1ac5
   2598  1ac5				   .L0249		;  asteroid3Y	=  asteroid3Y  -  0.13
   2599  1ac5
   2600  1ac5		       a5 da		      LDA	d
   2601  1ac7		       38		      SEC
   2602  1ac8		       e9 21		      SBC	#33
   2603  1aca		       85 da		      STA	d
   2604  1acc		       a5 90		      LDA	asteroid3Y
   2605  1ace		       e9 00		      SBC	#0
   2606  1ad0		       85 90		      STA	asteroid3Y
   2607  1ad2				   .L0250		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.21
   2608  1ad2
   2609  1ad2		       a5 8f		      LDA	asteroid2Y
   2610  1ad4		       c9 64		      CMP	#100
   2611  1ad6		       b0 0d		      BCS	.skipL0250
   2612  1ad8				   .condpart128
   2613  1ad8		       a5 d9		      LDA	c
   2614  1ada		       38		      SEC
   2615  1adb		       e9 35		      SBC	#53
   2616  1add		       85 d9		      STA	c
   2617  1adf		       a5 8f		      LDA	asteroid2Y
   2618  1ae1		       e9 00		      SBC	#0
   2619  1ae3		       85 8f		      STA	asteroid2Y
   2620  1ae5				   .skipL0250
   2621  1ae5				   .L0251		;  asteroidY  =  asteroidY  -	0.18
   2622  1ae5
   2623  1ae5		       a5 d8		      LDA	b
   2624  1ae7		       38		      SEC
   2625  1ae8		       e9 2e		      SBC	#46
   2626  1aea		       85 d8		      STA	b
   2627  1aec		       a5 8e		      LDA	asteroidY
   2628  1aee		       e9 00		      SBC	#0
   2629  1af0		       85 8e		      STA	asteroidY
   2630  1af2				   .L0252		;  goto resetScreen
   2631  1af2
   2632  1af2		       4c ab db 	      jmp	.resetScreen
   2633  1af5
   2634  1af5				   .
   2635  1af5							; 
   2636  1af5
   2637  1af5				   .level5
   2638  1af5							; level5
   2639  1af5
   2640  1af5				   .L0253		;  asteroid2Y	=  asteroid2Y  -  0.22
   2641  1af5
   2642  1af5		       a5 d9		      LDA	c
   2643  1af7		       38		      SEC
   2644  1af8		       e9 38		      SBC	#56
   2645  1afa		       85 d9		      STA	c
   2646  1afc		       a5 8f		      LDA	asteroid2Y
   2647  1afe		       e9 00		      SBC	#0
   2648  1b00		       85 8f		      STA	asteroid2Y
   2649  1b02				   .L0254		;  asteroid3Y	=  asteroid3Y  -  0.13
   2650  1b02
   2651  1b02		       a5 da		      LDA	d
   2652  1b04		       38		      SEC
   2653  1b05		       e9 21		      SBC	#33
   2654  1b07		       85 da		      STA	d
   2655  1b09		       a5 90		      LDA	asteroid3Y
   2656  1b0b		       e9 00		      SBC	#0
   2657  1b0d		       85 90		      STA	asteroid3Y
   2658  1b0f				   .L0255		;  asteroidY  =  asteroidY  -	0.18
   2659  1b0f
   2660  1b0f		       a5 d8		      LDA	b
   2661  1b11		       38		      SEC
   2662  1b12		       e9 2e		      SBC	#46
   2663  1b14		       85 d8		      STA	b
   2664  1b16		       a5 8e		      LDA	asteroidY
   2665  1b18		       e9 00		      SBC	#0
   2666  1b1a		       85 8e		      STA	asteroidY
   2667  1b1c				   .L0256		;  goto resetScreen
   2668  1b1c
   2669  1b1c		       4c ab db 	      jmp	.resetScreen
   2670  1b1f
   2671  1b1f				   .
   2672  1b1f							; 
   2673  1b1f
   2674  1b1f				   .level4
   2675  1b1f							; level4
   2676  1b1f
   2677  1b1f				   .L0257		;  asteroid2Y	=  asteroid2Y  -  0.21
   2678  1b1f
   2679  1b1f		       a5 d9		      LDA	c
   2680  1b21		       38		      SEC
   2681  1b22		       e9 35		      SBC	#53
   2682  1b24		       85 d9		      STA	c
   2683  1b26		       a5 8f		      LDA	asteroid2Y
   2684  1b28		       e9 00		      SBC	#0
   2685  1b2a		       85 8f		      STA	asteroid2Y
   2686  1b2c				   .L0258		;  asteroid3Y	=  asteroid3Y  -  0.13
   2687  1b2c
   2688  1b2c		       a5 da		      LDA	d
   2689  1b2e		       38		      SEC
   2690  1b2f		       e9 21		      SBC	#33
   2691  1b31		       85 da		      STA	d
   2692  1b33		       a5 90		      LDA	asteroid3Y
   2693  1b35		       e9 00		      SBC	#0
   2694  1b37		       85 90		      STA	asteroid3Y
   2695  1b39				   .L0259		;  asteroidY  =  asteroidY  -	0.15
   2696  1b39
   2697  1b39		       a5 d8		      LDA	b
   2698  1b3b		       38		      SEC
   2699  1b3c		       e9 26		      SBC	#38
   2700  1b3e		       85 d8		      STA	b
   2701  1b40		       a5 8e		      LDA	asteroidY
   2702  1b42		       e9 00		      SBC	#0
   2703  1b44		       85 8e		      STA	asteroidY
   2704  1b46				   .L0260		;  COLUPF  =  $40
   2705  1b46
   2706  1b46		       a9 40		      LDA	#$40
   2707  1b48		       85 08		      STA	COLUPF
   2708  1b4a				   .L0261		;  goto resetScreen
   2709  1b4a
   2710  1b4a		       4c ab db 	      jmp	.resetScreen
   2711  1b4d
   2712  1b4d				   .
   2713  1b4d							; 
   2714  1b4d
   2715  1b4d				   .level3
   2716  1b4d							; level3
   2717  1b4d
   2718  1b4d				   .L0262		;  if asteroidY  <  100 then asteroidY  =  asteroidY  -  0.15
   2719  1b4d
   2720  1b4d		       a5 8e		      LDA	asteroidY
   2721  1b4f		       c9 64		      CMP	#100
   2722  1b51		       b0 0d		      BCS	.skipL0262
   2723  1b53				   .condpart129
   2724  1b53		       a5 d8		      LDA	b
   2725  1b55		       38		      SEC
   2726  1b56		       e9 26		      SBC	#38
   2727  1b58		       85 d8		      STA	b
   2728  1b5a		       a5 8e		      LDA	asteroidY
   2729  1b5c		       e9 00		      SBC	#0
   2730  1b5e		       85 8e		      STA	asteroidY
   2731  1b60				   .skipL0262
   2732  1b60				   .L0263		;  asteroid2Y	=  asteroid2Y  -  0.21
   2733  1b60
   2734  1b60		       a5 d9		      LDA	c
   2735  1b62		       38		      SEC
   2736  1b63		       e9 35		      SBC	#53
   2737  1b65		       85 d9		      STA	c
   2738  1b67		       a5 8f		      LDA	asteroid2Y
   2739  1b69		       e9 00		      SBC	#0
   2740  1b6b		       85 8f		      STA	asteroid2Y
   2741  1b6d				   .L0264		;  asteroid3Y	=  asteroid3Y  -  0.13
   2742  1b6d
   2743  1b6d		       a5 da		      LDA	d
   2744  1b6f		       38		      SEC
   2745  1b70		       e9 21		      SBC	#33
   2746  1b72		       85 da		      STA	d
   2747  1b74		       a5 90		      LDA	asteroid3Y
   2748  1b76		       e9 00		      SBC	#0
   2749  1b78		       85 90		      STA	asteroid3Y
   2750  1b7a				   .L0265		;  goto resetScreen
   2751  1b7a
   2752  1b7a		       4c ab db 	      jmp	.resetScreen
   2753  1b7d
   2754  1b7d				   .
   2755  1b7d							; 
   2756  1b7d
   2757  1b7d				   .level2
   2758  1b7d							; level2
   2759  1b7d
   2760  1b7d				   .L0266		;  asteroid2Y	=  asteroid2Y  -  0.21
   2761  1b7d
   2762  1b7d		       a5 d9		      LDA	c
   2763  1b7f		       38		      SEC
   2764  1b80		       e9 35		      SBC	#53
   2765  1b82		       85 d9		      STA	c
   2766  1b84		       a5 8f		      LDA	asteroid2Y
   2767  1b86		       e9 00		      SBC	#0
   2768  1b88		       85 8f		      STA	asteroid2Y
   2769  1b8a				   .L0267		;  asteroidY  =  asteroidY  -	0.25
   2770  1b8a
   2771  1b8a		       a5 d8		      LDA	b
   2772  1b8c		       38		      SEC
   2773  1b8d		       e9 40		      SBC	#64
   2774  1b8f		       85 d8		      STA	b
   2775  1b91		       a5 8e		      LDA	asteroidY
   2776  1b93		       e9 00		      SBC	#0
   2777  1b95		       85 8e		      STA	asteroidY
   2778  1b97				   .L0268		;  goto resetScreen
   2779  1b97
   2780  1b97		       4c ab db 	      jmp	.resetScreen
   2781  1b9a
   2782  1b9a				   .
   2783  1b9a							; 
   2784  1b9a
   2785  1b9a				   .level1
   2786  1b9a							; level1
   2787  1b9a
   2788  1b9a				   .L0269		;  asteroid2Y	=  asteroid2Y  -  0.21
   2789  1b9a
   2790  1b9a		       a5 d9		      LDA	c
   2791  1b9c		       38		      SEC
   2792  1b9d		       e9 35		      SBC	#53
   2793  1b9f		       85 d9		      STA	c
   2794  1ba1		       a5 8f		      LDA	asteroid2Y
   2795  1ba3		       e9 00		      SBC	#0
   2796  1ba5		       85 8f		      STA	asteroid2Y
   2797  1ba7				   .L0270		;  COLUPF  =  $70
   2798  1ba7
   2799  1ba7		       a9 70		      LDA	#$70
   2800  1ba9		       85 08		      STA	COLUPF
   2801  1bab				   .
   2802  1bab							; 
   2803  1bab
   2804  1bab				   .
   2805  1bab							; 
   2806  1bab
   2807  1bab				   .resetScreen
   2808  1bab							; resetScreen
   2809  1bab
   2810  1bab				   .L0271		;  drawscreen
   2811  1bab
   2812  1bab		       85 d1		      sta	temp7
   2813  1bad		       a9 db		      lda	#>(ret_point2-1)
   2814  1baf		       48		      pha
   2815  1bb0		       a9 c2		      lda	#<(ret_point2-1)
   2816  1bb2		       48		      pha
   2817  1bb3		       a9 f0		      lda	#>(drawscreen-1)
   2818  1bb5		       48		      pha
   2819  1bb6		       a9 39		      lda	#<(drawscreen-1)
   2820  1bb8		       48		      pha
   2821  1bb9		       a5 d1		      lda	temp7
   2822  1bbb		       48		      pha
   2823  1bbc		       8a		      txa
   2824  1bbd		       48		      pha
   2825  1bbe		       a2 02		      ldx	#2
   2826  1bc0		       4c eb ff 	      jmp	BS_jsr
   2827  1bc3				   ret_point2
   2828  1bc3				   .
   2829  1bc3							; 
   2830  1bc3
   2831  1bc3				   .
   2832  1bc3							; 
   2833  1bc3
   2834  1bc3				   .L0272		;  if _resetTicker  >	0 then goto sprites
   2835  1bc3
   2836  1bc3		       a9 00		      LDA	#0
   2837  1bc5		       c5 ee		      CMP	_resetTicker
   2838  1bc7		       b0 03		      BCS	.skipL0272
   2839  1bc9				   .condpart130
   2840  1bc9		       4c a0 d1 	      jmp	.sprites
   2841  1bcc
   2842  1bcc				   .skipL0272
   2843  1bcc				   .L0273		;  if powerUpInPlay  =  1 then goto skipPlayer1
   2844  1bcc
   2845  1bcc		       a5 e5		      LDA	powerUpInPlay
   2846  1bce		       c9 01		      CMP	#1
   2847  1bd0		       d0 03		      BNE	.skipL0273
   2848  1bd2				   .condpart131
   2849  1bd2		       4c 1a dc 	      jmp	.skipPlayer1
   2850  1bd5
   2851  1bd5				   .skipL0273
   2852  1bd5				   .L0274		;  if asteroidY  >  70 then asteroidx	=  asteroidx  +  0.15
   2853  1bd5
   2854  1bd5		       a9 46		      LDA	#70
   2855  1bd7		       c5 8e		      CMP	asteroidY
   2856  1bd9		       b0 0d		      BCS	.skipL0274
   2857  1bdb				   .condpart132
   2858  1bdb		       a5 de		      LDA	h
   2859  1bdd		       18		      CLC
   2860  1bde		       69 26		      ADC	#38
   2861  1be0		       85 de		      STA	h
   2862  1be2		       a5 85		      LDA	asteroidx
   2863  1be4		       69 00		      ADC	#0
   2864  1be6		       85 85		      STA	asteroidx
   2865  1be8				   .skipL0274
   2866  1be8				   .L0275		;  if asteroidY  <  70  &&  asteroidY	>  50 then asteroidx  =  asteroidx  -  0.15
   2867  1be8
   2868  1be8		       a5 8e		      LDA	asteroidY
   2869  1bea		       c9 46		      CMP	#70
   2870  1bec		       b0 13		      BCS	.skipL0275
   2871  1bee				   .condpart133
   2872  1bee		       a9 32		      LDA	#50
   2873  1bf0		       c5 8e		      CMP	asteroidY
   2874  1bf2		       b0 0d		      BCS	.skip133then
   2875  1bf4				   .condpart134
   2876  1bf4		       a5 de		      LDA	h
   2877  1bf6		       38		      SEC
   2878  1bf7		       e9 26		      SBC	#38
   2879  1bf9		       85 de		      STA	h
   2880  1bfb		       a5 85		      LDA	asteroidx
   2881  1bfd		       e9 00		      SBC	#0
   2882  1bff		       85 85		      STA	asteroidx
   2883  1c01				   .skip133then
   2884  1c01				   .skipL0275
   2885  1c01				   .L0276		;  if asteroidY  <  50  &&  asteroidY	>  42 then asteroidx  =  asteroidx  +  0.15
   2886  1c01
   2887  1c01		       a5 8e		      LDA	asteroidY
   2888  1c03		       c9 32		      CMP	#50
   2889  1c05		       b0 13		      BCS	.skipL0276
   2890  1c07				   .condpart135
   2891  1c07		       a9 2a		      LDA	#42
   2892  1c09		       c5 8e		      CMP	asteroidY
   2893  1c0b		       b0 0d		      BCS	.skip135then
   2894  1c0d				   .condpart136
   2895  1c0d		       a5 de		      LDA	h
   2896  1c0f		       18		      CLC
   2897  1c10		       69 26		      ADC	#38
   2898  1c12		       85 de		      STA	h
   2899  1c14		       a5 85		      LDA	asteroidx
   2900  1c16		       69 00		      ADC	#0
   2901  1c18		       85 85		      STA	asteroidx
   2902  1c1a				   .skip135then
   2903  1c1a				   .skipL0276
   2904  1c1a				   .
   2905  1c1a							; 
   2906  1c1a
   2907  1c1a				   .skipPlayer1
   2908  1c1a							; skipPlayer1
   2909  1c1a
   2910  1c1a				   .L0277		;  if asteroid4Y  >  100 then asteroid4x  =  116
   2911  1c1a
   2912  1c1a		       a9 64		      LDA	#100
   2913  1c1c		       c5 91		      CMP	asteroid4Y
   2914  1c1e		       b0 08		      BCS	.skipL0277
   2915  1c20				   .condpart137
   2916  1c20		       a9 00		      LDA	#0
   2917  1c22		       85 e1		      STA	k
   2918  1c24		       a9 74		      LDA	#116
   2919  1c26		       85 88		      STA	asteroid4x
   2920  1c28				   .skipL0277
   2921  1c28				   .L0278		;  if asteroid4Y  <  90  &&  asteroid4Y  >  82 then asteroid4x  =  asteroid4x	-  0.75
   2922  1c28
   2923  1c28		       a5 91		      LDA	asteroid4Y
   2924  1c2a		       c9 5a		      CMP	#90
   2925  1c2c		       b0 13		      BCS	.skipL0278
   2926  1c2e				   .condpart138
   2927  1c2e		       a9 52		      LDA	#82
   2928  1c30		       c5 91		      CMP	asteroid4Y
   2929  1c32		       b0 0d		      BCS	.skip138then
   2930  1c34				   .condpart139
   2931  1c34		       a5 e1		      LDA	k
   2932  1c36		       38		      SEC
   2933  1c37		       e9 c0		      SBC	#192
   2934  1c39		       85 e1		      STA	k
   2935  1c3b		       a5 88		      LDA	asteroid4x
   2936  1c3d		       e9 00		      SBC	#0
   2937  1c3f		       85 88		      STA	asteroid4x
   2938  1c41				   .skip138then
   2939  1c41				   .skipL0278
   2940  1c41				   .L0279		;  if asteroid4Y  <  80  &&  asteroid4Y  >  72 then asteroid4x  =  asteroid4x	+  0.75
   2941  1c41
   2942  1c41		       a5 91		      LDA	asteroid4Y
   2943  1c43		       c9 50		      CMP	#80
   2944  1c45		       b0 13		      BCS	.skipL0279
   2945  1c47				   .condpart140
   2946  1c47		       a9 48		      LDA	#72
   2947  1c49		       c5 91		      CMP	asteroid4Y
   2948  1c4b		       b0 0d		      BCS	.skip140then
   2949  1c4d				   .condpart141
   2950  1c4d		       a5 e1		      LDA	k
   2951  1c4f		       18		      CLC
   2952  1c50		       69 c0		      ADC	#192
   2953  1c52		       85 e1		      STA	k
   2954  1c54		       a5 88		      LDA	asteroid4x
   2955  1c56		       69 00		      ADC	#0
   2956  1c58		       85 88		      STA	asteroid4x
   2957  1c5a				   .skip140then
   2958  1c5a				   .skipL0279
   2959  1c5a				   .L0280		;  if asteroid4Y  <  70  &&  asteroid4Y  >  62 then asteroid4x  =  asteroid4x	-  0.75
   2960  1c5a
   2961  1c5a		       a5 91		      LDA	asteroid4Y
   2962  1c5c		       c9 46		      CMP	#70
   2963  1c5e		       b0 13		      BCS	.skipL0280
   2964  1c60				   .condpart142
   2965  1c60		       a9 3e		      LDA	#62
   2966  1c62		       c5 91		      CMP	asteroid4Y
   2967  1c64		       b0 0d		      BCS	.skip142then
   2968  1c66				   .condpart143
   2969  1c66		       a5 e1		      LDA	k
   2970  1c68		       38		      SEC
   2971  1c69		       e9 c0		      SBC	#192
   2972  1c6b		       85 e1		      STA	k
   2973  1c6d		       a5 88		      LDA	asteroid4x
   2974  1c6f		       e9 00		      SBC	#0
   2975  1c71		       85 88		      STA	asteroid4x
   2976  1c73				   .skip142then
   2977  1c73				   .skipL0280
   2978  1c73				   .L0281		;  if asteroid4Y  <  60  &&  asteroid4Y  >  52 then asteroid4x  =  asteroid4x	+  0.75
   2979  1c73
   2980  1c73		       a5 91		      LDA	asteroid4Y
   2981  1c75		       c9 3c		      CMP	#60
   2982  1c77		       b0 13		      BCS	.skipL0281
   2983  1c79				   .condpart144
   2984  1c79		       a9 34		      LDA	#52
   2985  1c7b		       c5 91		      CMP	asteroid4Y
   2986  1c7d		       b0 0d		      BCS	.skip144then
   2987  1c7f				   .condpart145
   2988  1c7f		       a5 e1		      LDA	k
   2989  1c81		       18		      CLC
   2990  1c82		       69 c0		      ADC	#192
   2991  1c84		       85 e1		      STA	k
   2992  1c86		       a5 88		      LDA	asteroid4x
   2993  1c88		       69 00		      ADC	#0
   2994  1c8a		       85 88		      STA	asteroid4x
   2995  1c8c				   .skip144then
   2996  1c8c				   .skipL0281
   2997  1c8c				   .L0282		;  if asteroid4Y  <  50  &&  asteroid4Y  >  42 then asteroid4x  =  asteroid4x	-  0.75
   2998  1c8c
   2999  1c8c		       a5 91		      LDA	asteroid4Y
   3000  1c8e		       c9 32		      CMP	#50
   3001  1c90		       b0 13		      BCS	.skipL0282
   3002  1c92				   .condpart146
   3003  1c92		       a9 2a		      LDA	#42
   3004  1c94		       c5 91		      CMP	asteroid4Y
   3005  1c96		       b0 0d		      BCS	.skip146then
   3006  1c98				   .condpart147
   3007  1c98		       a5 e1		      LDA	k
   3008  1c9a		       38		      SEC
   3009  1c9b		       e9 c0		      SBC	#192
   3010  1c9d		       85 e1		      STA	k
   3011  1c9f		       a5 88		      LDA	asteroid4x
   3012  1ca1		       e9 00		      SBC	#0
   3013  1ca3		       85 88		      STA	asteroid4x
   3014  1ca5				   .skip146then
   3015  1ca5				   .skipL0282
   3016  1ca5				   .
   3017  1ca5							; 
   3018  1ca5
   3019  1ca5				   .
   3020  1ca5							; 
   3021  1ca5
   3022  1ca5				   .L0283		;  if asteroid3x  <  30 then player3MoveLeft  =  0
   3023  1ca5
   3024  1ca5		       a5 87		      LDA	asteroid3x
   3025  1ca7		       c9 1e		      CMP	#30
   3026  1ca9		       b0 04		      BCS	.skipL0283
   3027  1cab				   .condpart148
   3028  1cab		       a9 00		      LDA	#0
   3029  1cad		       85 dd		      STA	player3MoveLeft
   3030  1caf				   .skipL0283
   3031  1caf				   .L0284		;  if asteroid3x  >  120 then player3MoveLeft	=  1
   3032  1caf
   3033  1caf		       a9 78		      LDA	#120
   3034  1cb1		       c5 87		      CMP	asteroid3x
   3035  1cb3		       b0 04		      BCS	.skipL0284
   3036  1cb5				   .condpart149
   3037  1cb5		       a9 01		      LDA	#1
   3038  1cb7		       85 dd		      STA	player3MoveLeft
   3039  1cb9				   .skipL0284
   3040  1cb9				   .
   3041  1cb9							; 
   3042  1cb9
   3043  1cb9				   .L0285		;  if player3MoveLeft	=  1 then asteroid3x  =  asteroid3x  -	0.15 else asteroid3x  =  asteroid3x  +	0.15
   3044  1cb9
   3045  1cb9		       a5 dd		      LDA	player3MoveLeft
   3046  1cbb		       c9 01		      CMP	#1
   3047  1cbd		       d0 10		      BNE	.skipL0285
   3048  1cbf				   .condpart150
   3049  1cbf		       a5 e0		      LDA	j
   3050  1cc1		       38		      SEC
   3051  1cc2		       e9 26		      SBC	#38
   3052  1cc4		       85 e0		      STA	j
   3053  1cc6		       a5 87		      LDA	asteroid3x
   3054  1cc8		       e9 00		      SBC	#0
   3055  1cca		       85 87		      STA	asteroid3x
   3056  1ccc		       4c dc dc 	      jmp	.skipelse3
   3057  1ccf				   .skipL0285
   3058  1ccf		       a5 e0		      LDA	j
   3059  1cd1		       18		      CLC
   3060  1cd2		       69 26		      ADC	#38
   3061  1cd4		       85 e0		      STA	j
   3062  1cd6		       a5 87		      LDA	asteroid3x
   3063  1cd8		       69 00		      ADC	#0
   3064  1cda		       85 87		      STA	asteroid3x
   3065  1cdc				   .skipelse3
   3066  1cdc				   .
   3067  1cdc							; 
   3068  1cdc
   3069  1cdc				   .L0286		;  if altSprite  =  0	||  player2y  >  90 then goto sprites
   3070  1cdc
   3071  1cdc		       a5 e6		      LDA	altSprite
   3072  1cde		       c9 00		      CMP	#0
   3073  1ce0		       d0 03		      BNE	.skipL0286
   3074  1ce2				   .condpart151
   3075  1ce2		       4c eb dc 	      jmp	.condpart152
   3076  1ce5				   .skipL0286
   3077  1ce5		       a9 5a		      LDA	#90
   3078  1ce7		       c5 8f		      CMP	player2y
   3079  1ce9		       b0 03		      BCS	.skip48OR
   3080  1ceb				   .condpart152
   3081  1ceb		       4c a0 d1 	      jmp	.sprites
   3082  1cee
   3083  1cee				   .skip48OR
   3084  1cee				   .L0287		;  if player2x  -  7  >  player0x then asteroid2x  =  asteroid2x  -  0.5
   3085  1cee
   3086  1cee							; complex condition detected
   3087  1cee		       a5 86		      LDA	player2x
   3088  1cf0		       38		      SEC
   3089  1cf1		       e9 07		      SBC	#7
   3090  1cf3		       48		      PHA
   3091  1cf4		       ba		      TSX
   3092  1cf5		       68		      PLA
   3093  1cf6		       a5 84		      LDA	player0x
   3094  1cf8		       d5 01		      CMP	1,x
   3095  1cfa		       b0 0d		      BCS	.skipL0287
   3096  1cfc				   .condpart153
   3097  1cfc		       a5 df		      LDA	i
   3098  1cfe		       38		      SEC
   3099  1cff		       e9 80		      SBC	#128
   3100  1d01		       85 df		      STA	i
   3101  1d03		       a5 86		      LDA	asteroid2x
   3102  1d05		       e9 00		      SBC	#0
   3103  1d07		       85 86		      STA	asteroid2x
   3104  1d09				   .skipL0287
   3105  1d09				   .L0288		;  if player2x  -  7  <  player0x then asteroid2x  =  asteroid2x  +  0.5
   3106  1d09
   3107  1d09							; complex condition detected
   3108  1d09		       a5 86		      LDA	player2x
   3109  1d0b		       38		      SEC
   3110  1d0c		       e9 07		      SBC	#7
   3111  1d0e		       c5 84		      CMP	player0x
   3112  1d10		       b0 0d		      BCS	.skipL0288
   3113  1d12				   .condpart154
   3114  1d12		       a5 df		      LDA	i
   3115  1d14		       18		      CLC
   3116  1d15		       69 80		      ADC	#128
   3117  1d17		       85 df		      STA	i
   3118  1d19		       a5 86		      LDA	asteroid2x
   3119  1d1b		       69 00		      ADC	#0
   3120  1d1d		       85 86		      STA	asteroid2x
   3121  1d1f				   .skipL0288
   3122  1d1f				   .
   3123  1d1f							; 
   3124  1d1f
   3125  1d1f				   .L0289		;  goto sprites
   3126  1d1f
   3127  1d1f		       4c a0 d1 	      jmp	.sprites
   3128  1d22
   3129  1d22				   .
   3130  1d22							; 
   3131  1d22
   3132  1d22				   .setPlayer1Color
   3133  1d22							; setPlayer1Color
   3134  1d22
   3135  1d22				   .L0290		;  if ticker  =  0 then _COLUP1  =  $22
   3136  1d22
   3137  1d22		       a5 e4		      LDA	ticker
   3138  1d24		       c9 00		      CMP	#0
   3139  1d26		       d0 04		      BNE	.skipL0290
   3140  1d28				   .condpart155
   3141  1d28		       a9 22		      LDA	#$22
   3142  1d2a		       85 98		      STA	_COLUP1
   3143  1d2c				   .skipL0290
   3144  1d2c				   .L0291		;  if ticker  =  1 then _COLUP1  =  $38
   3145  1d2c
   3146  1d2c		       a5 e4		      LDA	ticker
   3147  1d2e		       c9 01		      CMP	#1
   3148  1d30		       d0 04		      BNE	.skipL0291
   3149  1d32				   .condpart156
   3150  1d32		       a9 38		      LDA	#$38
   3151  1d34		       85 98		      STA	_COLUP1
   3152  1d36				   .skipL0291
   3153  1d36				   .L0292		;  if ticker  =  2 then _COLUP1  =  $66
   3154  1d36
   3155  1d36		       a5 e4		      LDA	ticker
   3156  1d38		       c9 02		      CMP	#2
   3157  1d3a		       d0 04		      BNE	.skipL0292
   3158  1d3c				   .condpart157
   3159  1d3c		       a9 66		      LDA	#$66
   3160  1d3e		       85 98		      STA	_COLUP1
   3161  1d40				   .skipL0292
   3162  1d40				   .L0293		;  if ticker  =  3 then _COLUP1  =  $78
   3163  1d40
   3164  1d40		       a5 e4		      LDA	ticker
   3165  1d42		       c9 03		      CMP	#3
   3166  1d44		       d0 04		      BNE	.skipL0293
   3167  1d46				   .condpart158
   3168  1d46		       a9 78		      LDA	#$78
   3169  1d48		       85 98		      STA	_COLUP1
   3170  1d4a				   .skipL0293
   3171  1d4a				   .L0294		;  if ticker  =  4 then _COLUP1  =  $CA
   3172  1d4a
   3173  1d4a		       a5 e4		      LDA	ticker
   3174  1d4c		       c9 04		      CMP	#4
   3175  1d4e		       d0 04		      BNE	.skipL0294
   3176  1d50				   .condpart159
   3177  1d50		       a9 ca		      LDA	#$CA
   3178  1d52		       85 98		      STA	_COLUP1
   3179  1d54				   .skipL0294
   3180  1d54				   .L0295		;  if ticker  =  5 then _COLUP1  =  $D6
   3181  1d54
   3182  1d54		       a5 e4		      LDA	ticker
   3183  1d56		       c9 05		      CMP	#5
   3184  1d58		       d0 04		      BNE	.skipL0295
   3185  1d5a				   .condpart160
   3186  1d5a		       a9 d6		      LDA	#$D6
   3187  1d5c		       85 98		      STA	_COLUP1
   3188  1d5e				   .skipL0295
   3189  1d5e				   .L0296		;  if ticker  =  6 then _COLUP1  =  $E8
   3190  1d5e
   3191  1d5e		       a5 e4		      LDA	ticker
   3192  1d60		       c9 06		      CMP	#6
   3193  1d62		       d0 04		      BNE	.skipL0296
   3194  1d64				   .condpart161
   3195  1d64		       a9 e8		      LDA	#$E8
   3196  1d66		       85 98		      STA	_COLUP1
   3197  1d68				   .skipL0296
   3198  1d68				   .L0297		;  if ticker  =  7  ||  ticker  =  3 then powerUpInPlay  =  1 :  _COLUP1  =  $1f else powerUpInPlay  =  0
   3199  1d68
   3200  1d68		       a5 e4		      LDA	ticker
   3201  1d6a		       c9 07		      CMP	#7
   3202  1d6c		       d0 03		      BNE	.skipL0297
   3203  1d6e				   .condpart162
   3204  1d6e		       4c 77 dd 	      jmp	.condpart163
   3205  1d71				   .skipL0297
   3206  1d71		       a5 e4		      LDA	ticker
   3207  1d73		       c9 03		      CMP	#3
   3208  1d75		       d0 0b		      BNE	.skip49OR
   3209  1d77				   .condpart163
   3210  1d77		       a9 01		      LDA	#1
   3211  1d79		       85 e5		      STA	powerUpInPlay
   3212  1d7b		       a9 1f		      LDA	#$1f
   3213  1d7d		       85 98		      STA	_COLUP1
   3214  1d7f		       4c 86 dd 	      jmp	.skipelse4
   3215  1d82				   .skip49OR
   3216  1d82		       a9 00		      LDA	#0
   3217  1d84		       85 e5		      STA	powerUpInPlay
   3218  1d86				   .skipelse4
   3219  1d86				   .L0298		;  goto completePlayer1ColorSet
   3220  1d86
   3221  1d86		       4c bf d1 	      jmp	.completePlayer1ColorSet
   3222  1d89
   3223  1d89				   .
   3224  1d89							; 
   3225  1d89
   3226  1d89				   .setPlayer2Color
   3227  1d89							; setPlayer2Color
   3228  1d89
   3229  1d89				   .L0299		;  if ticker  >  5 then COLUP2  =  $68 else COLUP2  =	$22
   3230  1d89
   3231  1d89		       a9 05		      LDA	#5
   3232  1d8b		       c5 e4		      CMP	ticker
   3233  1d8d		       b0 07		      BCS	.skipL0299
   3234  1d8f				   .condpart164
   3235  1d8f		       a9 68		      LDA	#$68
   3236  1d91		       85 99		      STA	COLUP2
   3237  1d93		       4c 9a dd 	      jmp	.skipelse5
   3238  1d96				   .skipL0299
   3239  1d96		       a9 22		      LDA	#$22
   3240  1d98		       85 99		      STA	COLUP2
   3241  1d9a				   .skipelse5
   3242  1d9a				   .L0300		;  if ticker  <  5 then altSprite  =  0
   3243  1d9a
   3244  1d9a		       a5 e4		      LDA	ticker
   3245  1d9c		       c9 05		      CMP	#5
   3246  1d9e		       b0 04		      BCS	.skipL0300
   3247  1da0				   .condpart165
   3248  1da0		       a9 00		      LDA	#0
   3249  1da2		       85 e6		      STA	altSprite
   3250  1da4				   .skipL0300
   3251  1da4				   .L0301		;  if ticker  >=  5  &&  killCount  >	26 then altSprite  =  1
   3252  1da4
   3253  1da4		       a5 e4		      LDA	ticker
   3254  1da6		       c9 05		      CMP	#5
   3255  1da8		       90 0a		      BCC	.skipL0301
   3256  1daa				   .condpart166
   3257  1daa		       a9 1a		      LDA	#26
   3258  1dac		       c5 e3		      CMP	killCount
   3259  1dae		       b0 04		      BCS	.skip166then
   3260  1db0				   .condpart167
   3261  1db0		       a9 01		      LDA	#1
   3262  1db2		       85 e6		      STA	altSprite
   3263  1db4				   .skip166then
   3264  1db4				   .skipL0301
   3265  1db4				   .
   3266  1db4							; 
   3267  1db4
   3268  1db4				   .L0302		;  goto completePlayer2ColorSet
   3269  1db4
   3270  1db4		       4c c8 d1 	      jmp	.completePlayer2ColorSet
   3271  1db7
   3272  1db7				   .
   3273  1db7							; 
   3274  1db7
   3275  1db7				   .setPlayer3Color
   3276  1db7							; setPlayer3Color
   3277  1db7
   3278  1db7				   .L0303		;  if ticker  =  0 then COLUP3  =  $22
   3279  1db7
   3280  1db7		       a5 e4		      LDA	ticker
   3281  1db9		       c9 00		      CMP	#0
   3282  1dbb		       d0 04		      BNE	.skipL0303
   3283  1dbd				   .condpart168
   3284  1dbd		       a9 22		      LDA	#$22
   3285  1dbf		       85 9a		      STA	COLUP3
   3286  1dc1				   .skipL0303
   3287  1dc1				   .L0304		;  if ticker  =  1 then COLUP3  =  $38
   3288  1dc1
   3289  1dc1		       a5 e4		      LDA	ticker
   3290  1dc3		       c9 01		      CMP	#1
   3291  1dc5		       d0 04		      BNE	.skipL0304
   3292  1dc7				   .condpart169
   3293  1dc7		       a9 38		      LDA	#$38
   3294  1dc9		       85 9a		      STA	COLUP3
   3295  1dcb				   .skipL0304
   3296  1dcb				   .L0305		;  if ticker  =  2 then COLUP3  =  $66
   3297  1dcb
   3298  1dcb		       a5 e4		      LDA	ticker
   3299  1dcd		       c9 02		      CMP	#2
   3300  1dcf		       d0 04		      BNE	.skipL0305
   3301  1dd1				   .condpart170
   3302  1dd1		       a9 66		      LDA	#$66
   3303  1dd3		       85 9a		      STA	COLUP3
   3304  1dd5				   .skipL0305
   3305  1dd5				   .L0306		;  if ticker  =  3 then COLUP3  =  $78
   3306  1dd5
   3307  1dd5		       a5 e4		      LDA	ticker
   3308  1dd7		       c9 03		      CMP	#3
   3309  1dd9		       d0 04		      BNE	.skipL0306
   3310  1ddb				   .condpart171
   3311  1ddb		       a9 78		      LDA	#$78
   3312  1ddd		       85 9a		      STA	COLUP3
   3313  1ddf				   .skipL0306
   3314  1ddf				   .L0307		;  if ticker  =  4 then COLUP3  =  $CA
   3315  1ddf
   3316  1ddf		       a5 e4		      LDA	ticker
   3317  1de1		       c9 04		      CMP	#4
   3318  1de3		       d0 04		      BNE	.skipL0307
   3319  1de5				   .condpart172
   3320  1de5		       a9 ca		      LDA	#$CA
   3321  1de7		       85 9a		      STA	COLUP3
   3322  1de9				   .skipL0307
   3323  1de9				   .L0308		;  if ticker  =  5 then COLUP3  =  $D6
   3324  1de9
   3325  1de9		       a5 e4		      LDA	ticker
   3326  1deb		       c9 05		      CMP	#5
   3327  1ded		       d0 04		      BNE	.skipL0308
   3328  1def				   .condpart173
   3329  1def		       a9 d6		      LDA	#$D6
   3330  1df1		       85 9a		      STA	COLUP3
   3331  1df3				   .skipL0308
   3332  1df3				   .L0309		;  if ticker  =  6 then COLUP3  =  $E8
   3333  1df3
   3334  1df3		       a5 e4		      LDA	ticker
   3335  1df5		       c9 06		      CMP	#6
   3336  1df7		       d0 04		      BNE	.skipL0309
   3337  1df9				   .condpart174
   3338  1df9		       a9 e8		      LDA	#$E8
   3339  1dfb		       85 9a		      STA	COLUP3
   3340  1dfd				   .skipL0309
   3341  1dfd				   .L0310		;  if ticker  =  7 then COLUP3  =  $3E
   3342  1dfd
   3343  1dfd		       a5 e4		      LDA	ticker
   3344  1dff		       c9 07		      CMP	#7
   3345  1e01		       d0 04		      BNE	.skipL0310
   3346  1e03				   .condpart175
   3347  1e03		       a9 3e		      LDA	#$3E
   3348  1e05		       85 9a		      STA	COLUP3
   3349  1e07				   .skipL0310
   3350  1e07				   .L0311		;  if ticker  =  8 then COLUP3  =  $DC
   3351  1e07
   3352  1e07		       a5 e4		      LDA	ticker
   3353  1e09		       c9 08		      CMP	#8
   3354  1e0b		       d0 04		      BNE	.skipL0311
   3355  1e0d				   .condpart176
   3356  1e0d		       a9 dc		      LDA	#$DC
   3357  1e0f		       85 9a		      STA	COLUP3
   3358  1e11				   .skipL0311
   3359  1e11				   .L0312		;  if ticker  =  9 then COLUP3  =  $48
   3360  1e11
   3361  1e11		       a5 e4		      LDA	ticker
   3362  1e13		       c9 09		      CMP	#9
   3363  1e15		       d0 04		      BNE	.skipL0312
   3364  1e17				   .condpart177
   3365  1e17		       a9 48		      LDA	#$48
   3366  1e19		       85 9a		      STA	COLUP3
   3367  1e1b				   .skipL0312
   3368  1e1b				   .L0313		;  if ticker  =  10 then COLUP3  =  $68
   3369  1e1b
   3370  1e1b		       a5 e4		      LDA	ticker
   3371  1e1d		       c9 0a		      CMP	#10
   3372  1e1f		       d0 04		      BNE	.skipL0313
   3373  1e21				   .condpart178
   3374  1e21		       a9 68		      LDA	#$68
   3375  1e23		       85 9a		      STA	COLUP3
   3376  1e25				   .skipL0313
   3377  1e25				   .L0314		;  if ticker  >  4 then player3MoveLeft  =  1 else player3MoveLeft  =	0
   3378  1e25
   3379  1e25		       a9 04		      LDA	#4
   3380  1e27		       c5 e4		      CMP	ticker
   3381  1e29		       b0 07		      BCS	.skipL0314
   3382  1e2b				   .condpart179
   3383  1e2b		       a9 01		      LDA	#1
   3384  1e2d		       85 dd		      STA	player3MoveLeft
   3385  1e2f		       4c 36 de 	      jmp	.skipelse6
   3386  1e32				   .skipL0314
   3387  1e32		       a9 00		      LDA	#0
   3388  1e34		       85 dd		      STA	player3MoveLeft
   3389  1e36				   .skipelse6
   3390  1e36				   .
   3391  1e36							; 
   3392  1e36
   3393  1e36				   .
   3394  1e36							; 
   3395  1e36
   3396  1e36				   .
   3397  1e36							; 
   3398  1e36
   3399  1e36				   .L0315		;  goto colorSetComplete
   3400  1e36
   3401  1e36		       4c d1 d1 	      jmp	.colorSetComplete
   3402  1e39
   3403  1e39				   .
   3404  1e39							; 
   3405  1e39
   3406  1e39				   .
   3407  1e39							; 
   3408  1e39
   3409  1e39				   .
   3410  1e39							; 
   3411  1e39
   3412  1e39				   .
   3413  1e39							; 
   3414  1e39
   3415  1e39				   .
   3416  1e39							; 
   3417  1e39
   3418  1e39				   .collisions
   3419  1e39							; collisions
   3420  1e39
   3421  1e39				   .L0316		;  player5x  =  missile0x  +  4
   3422  1e39
   3423  1e39		       a5 80		      LDA	missile0x
   3424  1e3b		       18		      CLC
   3425  1e3c		       69 04		      ADC	#4
   3426  1e3e		       85 89		      STA	player5x
   3427  1e40				   .L0317		;  player5y  =  missile0y  +  9
   3428  1e40
   3429  1e40		       a5 8a		      LDA	missile0y
   3430  1e42		       18		      CLC
   3431  1e43		       69 09		      ADC	#9
   3432  1e45		       85 92		      STA	player5y
   3433  1e47				   .L0318		;  missile0y  =  200
   3434  1e47
   3435  1e47		       a9 c8		      LDA	#200
   3436  1e49		       85 8a		      STA	missile0y
   3437  1e4b				   .L0319		;  missile0x  =  200
   3438  1e4b
   3439  1e4b		       a9 c8		      LDA	#200
   3440  1e4d		       85 80		      STA	missile0x
   3441  1e4f				   .L0320		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   3442  1e4f
   3443  1e4f		       a9 0c		      LDA	#12
   3444  1e51		       85 19		      STA	AUDV0
   3445  1e53		       a9 08		      LDA	#8
   3446  1e55		       85 15		      STA	AUDC0
   3447  1e57		       a9 1c		      LDA	#28
   3448  1e59		       85 17		      STA	AUDF0
   3449  1e5b				   .L0321		;  score  =  score  +	bulletMultiplier
   3450  1e5b
   3451  1e5b		       f8		      SED
   3452  1e5c		       18		      CLC
   3453  1e5d		       a5 d4		      LDA	score+2
   3454  1e5f		       65 e2		      ADC	bulletMultiplier
   3455  1e61
   3456  1e61		       85 d4		      STA	score+2
   3457  1e63		       a5 d3		      LDA	score+1
   3458  1e65		       69 00		      ADC	#0
   3459  1e67		       85 d3		      STA	score+1
   3460  1e69		       a5 d2		      LDA	score
   3461  1e6b		       69 00		      ADC	#0
   3462  1e6d		       85 d2		      STA	score
   3463  1e6f		       d8		      CLD
   3464  1e70				   .L0322		;  killCount  =  killCount  +	1
   3465  1e70
   3466  1e70		       e6 e3		      INC	killCount
   3467  1e72				   .L0323		;  goto frameReset
   3468  1e72
   3469  1e72		       4c 57 d7 	      jmp	.frameReset
   3470  1e75
   3471  1e75				   .
   3472  1e75							; 
   3473  1e75
   3474  1e75				   .killPlayer
   3475  1e75							; killPlayer
   3476  1e75
   3477  1e75				   .L0324		;  if _resetTicker  <	1 then _resetTicker  =	1
   3478  1e75
   3479  1e75		       a5 ee		      LDA	_resetTicker
   3480  1e77		       c9 01		      CMP	#1
   3481  1e79		       b0 04		      BCS	.skipL0324
   3482  1e7b				   .condpart180
   3483  1e7b		       a9 01		      LDA	#1
   3484  1e7d		       85 ee		      STA	_resetTicker
   3485  1e7f				   .skipL0324
   3486  1e7f				   .L0325		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   3487  1e7f
   3488  1e7f		       24 ef		      BIT	_Bit6_Sequence_Switch
   3489  1e81		       70 10		      BVS	.skipL0325
   3490  1e83				   .condpart181
   3491  1e83		       e6 d7		      INC	_P0_Luminosity
   3492  1e85		       a5 d7		      LDA	_P0_Luminosity
   3493  1e87		       c9 20		      CMP	#$20
   3494  1e89		       90 08		      BCC	.skip181then
   3495  1e8b				   .condpart182
   3496  1e8b		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3497  1e8d		       09 40		      ORA	#64
   3498  1e8f		       85 ef		      STA	_Bit6_Sequence_Switch
   3499  1e91		       e6 ee		      INC	_resetTicker
   3500  1e93				   .skip181then
   3501  1e93				   .skipL0325
   3502  1e93				   .L0326		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   3503  1e93
   3504  1e93		       24 ef		      BIT	_Bit6_Sequence_Switch
   3505  1e95		       50 16		      BVC	.skipL0326
   3506  1e97				   .condpart183
   3507  1e97		       c6 d7		      DEC	_P0_Luminosity
   3508  1e99		       a9 12		      LDA	#$12
   3509  1e9b		       c5 d7		      CMP	_P0_Luminosity
   3510  1e9d		       90 0e		      BCC	.skip183then
   3511  1e9f				   .condpart184
   3512  1e9f		       a9 00		      LDA	#0
   3513  1ea1		       85 d8		      STA	b
   3514  1ea3		       a9 10		      LDA	#$10
   3515  1ea5		       85 d7		      STA	_P0_Luminosity
   3516  1ea7		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3517  1ea9		       29 bf		      AND	#191
   3518  1eab		       85 ef		      STA	_Bit6_Sequence_Switch
   3519  1ead				   .skip183then
   3520  1ead				   .skipL0326
   3521  1ead				   .L0327		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   3522  1ead
   3523  1ead		       a9 0a		      LDA	#10
   3524  1eaf		       85 1a		      STA	AUDV1
   3525  1eb1		       a9 08		      LDA	#8
   3526  1eb3		       85 16		      STA	AUDC1
   3527  1eb5		       a9 19		      LDA	#25
   3528  1eb7		       85 18		      STA	AUDF1
   3529  1eb9				   .L0328		;  COLUBK  =  _P0_Luminosity
   3530  1eb9
   3531  1eb9		       a5 d7		      LDA	_P0_Luminosity
   3532  1ebb		       85 09		      STA	COLUBK
   3533  1ebd				   .
   3534  1ebd							; 
   3535  1ebd
   3536  1ebd				   .L0329		;  if _resetTicker  >	3 then goto resetGame
   3537  1ebd
   3538  1ebd		       a9 03		      LDA	#3
   3539  1ebf		       c5 ee		      CMP	_resetTicker
   3540  1ec1		       b0 03		      BCS	.skipL0329
   3541  1ec3				   .condpart185
   3542  1ec3		       4c c9 de 	      jmp	.resetGame
   3543  1ec6
   3544  1ec6				   .skipL0329
   3545  1ec6				   .
   3546  1ec6							; 
   3547  1ec6
   3548  1ec6				   .L0330		;  goto resetScreen
   3549  1ec6
   3550  1ec6		       4c ab db 	      jmp	.resetScreen
   3551  1ec9
   3552  1ec9				   .
   3553  1ec9							; 
   3554  1ec9
   3555  1ec9				   .resetGame
   3556  1ec9							; resetGame
   3557  1ec9
   3558  1ec9				   .
   3559  1ec9							; 
   3560  1ec9
   3561  1ec9				   .L0331		;  player0x = 75
   3562  1ec9
   3563  1ec9		       a9 4b		      LDA	#75
   3564  1ecb		       85 84		      STA	player0x
   3565  1ecd				   .L0332		;  player0y = 30
   3566  1ecd
   3567  1ecd		       a9 1e		      LDA	#30
   3568  1ecf		       85 8d		      STA	player0y
   3569  1ed1				   .
   3570  1ed1							; 
   3571  1ed1
   3572  1ed1				   .L0333		;  player1x = 76
   3573  1ed1
   3574  1ed1		       a9 4c		      LDA	#76
   3575  1ed3		       85 85		      STA	player1x
   3576  1ed5				   .L0334		;  player1y = 100
   3577  1ed5
   3578  1ed5		       a9 64		      LDA	#100
   3579  1ed7		       85 8e		      STA	player1y
   3580  1ed9				   .
   3581  1ed9							; 
   3582  1ed9
   3583  1ed9				   .L0335		;  player2x = 86
   3584  1ed9
   3585  1ed9		       a9 56		      LDA	#86
   3586  1edb		       85 86		      STA	player2x
   3587  1edd				   .L0336		;  player2y = 110
   3588  1edd
   3589  1edd		       a9 6e		      LDA	#110
   3590  1edf		       85 8f		      STA	player2y
   3591  1ee1				   .
   3592  1ee1							; 
   3593  1ee1
   3594  1ee1				   .L0337		;  player3x = 96
   3595  1ee1
   3596  1ee1		       a9 60		      LDA	#96
   3597  1ee3		       85 87		      STA	player3x
   3598  1ee5				   .L0338		;  player3y = 120
   3599  1ee5
   3600  1ee5		       a9 78		      LDA	#120
   3601  1ee7		       85 90		      STA	player3y
   3602  1ee9				   .
   3603  1ee9							; 
   3604  1ee9
   3605  1ee9				   .L0339		;  player4x  =  116
   3606  1ee9
   3607  1ee9		       a9 74		      LDA	#116
   3608  1eeb		       85 88		      STA	player4x
   3609  1eed				   .L0340		;  player4y  =  100
   3610  1eed
   3611  1eed		       a9 64		      LDA	#100
   3612  1eef		       85 91		      STA	player4y
   3613  1ef1				   .
   3614  1ef1							; 
   3615  1ef1
   3616  1ef1				   .L0341		;  missile0y = 100
   3617  1ef1
   3618  1ef1		       a9 64		      LDA	#100
   3619  1ef3		       85 8a		      STA	missile0y
   3620  1ef5				   .
   3621  1ef5							; 
   3622  1ef5
   3623  1ef5				   .L0342		;  _resetTicker  =  0
   3624  1ef5
   3625  1ef5		       a9 00		      LDA	#0
   3626  1ef7		       85 ee		      STA	_resetTicker
   3627  1ef9				   .L0343		;  missile1y =  200
   3628  1ef9
   3629  1ef9		       a9 c8		      LDA	#200
   3630  1efb		       85 8b		      STA	missile1y
   3631  1efd				   .L0344		;  COLUBK  =  $0
   3632  1efd
   3633  1efd		       a9 00		      LDA	#$0
   3634  1eff		       85 09		      STA	COLUBK
   3635  1f01				   .L0345		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   3636  1f01
   3637  1f01		       a9 00		      LDA	#0
   3638  1f03		       85 1a		      STA	AUDV1
   3639  1f05		       85 16		      STA	AUDC1
   3640  1f07		       85 18		      STA	AUDF1
   3641  1f09				   .
   3642  1f09							; 
   3643  1f09
   3644  1f09				   .
   3645  1f09							; 
   3646  1f09
   3647  1f09				   .L0346		;  gameReady  =  0
   3648  1f09
   3649  1f09		       a9 00		      LDA	#0
   3650  1f0b		       85 f0		      STA	gameReady
   3651  1f0d				   .L0347		;  firstFrame	=  0
   3652  1f0d
   3653  1f0d		       a9 00		      LDA	#0
   3654  1f0f		       85 e8		      STA	firstFrame
   3655  1f11				   .L0348		;  goto resetScreen
   3656  1f11
   3657  1f11		       4c ab db 	      jmp	.resetScreen
   3658  1f14
   3659  1f14				   .
   3660  1f14							; 
   3661  1f14
   3662  1f14				   .
   3663  1f14							; 
   3664  1f14
   3665  1f14				   .L0349		;  bank 2
   3666  1f14
   3667  1f14					      if	ECHO1
      192 bytes of ROM space left in bank 1
   3668  1f14					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3669  1f14					      endif
   3670  1f14		       00 01	   ECHO1      =	1
   3671  1fd4					      ORG	$1FF4-bscode_length
   3672  1fd4					      RORG	$DFF4-bscode_length
   3673  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3674  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3675  1fd6				  -	      stx	FASTFETCH
   3676  1fd6					      endif
   3677  1fd6		       9a		      txs
   3678  1fd7				  -	      if	bankswitch == 64
   3679  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3680  1fd7					      else
   3681  1fd7		       a9 f3		      lda	#>(start-1)
   3682  1fd9					      endif
   3683  1fd9		       48		      pha
   3684  1fda		       a9 f7		      lda	#<(start-1)
   3685  1fdc		       48		      pha
   3686  1fdd		       48		      pha
   3687  1fde		       8a		      txa
   3688  1fdf		       48		      pha
   3689  1fe0		       ba		      tsx
   3690  1fe1					      if	bankswitch != 64
   3691  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3692  1fe3		       2a		      rol
   3693  1fe4		       2a		      rol
   3694  1fe5		       2a		      rol
   3695  1fe6		       2a		      rol
   3696  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3697  1fe9		       aa		      tax
   3698  1fea		       e8		      inx
   3699  1feb				  -	      else
   3700  1feb				  -	      lda	4,x	; get high byte of return address
   3701  1feb				  -	      tay
   3702  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3703  1feb				  -	      sta	4,x
   3704  1feb				  -	      tya
   3705  1feb				  -	      lsr
   3706  1feb				  -	      lsr
   3707  1feb				  -	      lsr
   3708  1feb				  -	      lsr
   3709  1feb				  -	      tax
   3710  1feb				  -	      inx
   3711  1feb					      endif
   3712  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3713  1fee		       68		      pla
   3714  1fef		       aa		      tax
   3715  1ff0		       68		      pla
   3716  1ff1		       60		      rts
   3717  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3718  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3719  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3720  1ff2					      endif
   3721  1ffc					      ORG	$1FFC
   3722  1ffc					      RORG	$DFFC
   3723  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   3724  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   3725  2000					      ORG	$2000
   3726  2000					      RORG	$F000
   3727  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3728  2000
   3729  2000				   FineAdjustTableBegin
   3730  2000		       60		      .byte.b	%01100000	;left 6
   3731  2001		       50		      .byte.b	%01010000
   3732  2002		       40		      .byte.b	%01000000
   3733  2003		       30		      .byte.b	%00110000
   3734  2004		       20		      .byte.b	%00100000
   3735  2005		       10		      .byte.b	%00010000
   3736  2006		       00		      .byte.b	%00000000	;left 0
   3737  2007		       f0		      .byte.b	%11110000
   3738  2008		       e0		      .byte.b	%11100000
   3739  2009		       d0		      .byte.b	%11010000
   3740  200a		       c0		      .byte.b	%11000000
   3741  200b		       b0		      .byte.b	%10110000
   3742  200c		       a0		      .byte.b	%10100000
   3743  200d		       90		      .byte.b	%10010000
   3744  200e		       80		      .byte.b	%10000000	;right 8
   3745  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   3746  200f
   3747  200f				   PFStart
   3748  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   3749  2017				   blank_pf
   3750  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   3751  201f							; .byte 43,21,0,10,0,0,0,5
   3752  201f				  -	      ifconst	screenheight
   3753  201f				  -pfsub
   3754  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   3755  201f					      endif
   3756  201f							;--set initial P1 positions
   3757  201f				   multisprite_setup
   3758  201f		       a9 0f		      lda	#15
   3759  2021		       85 c4		      sta	pfheight
   3760  2023
   3761  2023		       a2 04		      ldx	#4
   3762  2025							; stx temp3
   3763  2025				   SetCopyHeight
   3764  2025							;	lda #76
   3765  2025							;	sta NewSpriteX,X
   3766  2025							;	lda CopyColorData,X
   3767  2025							;	sta NewCOLUP1,X
   3768  2025							;lda SpriteHeightTable,X
   3769  2025							; sta spriteheight,x
   3770  2025		       8a		      txa
   3771  2026		       95 9d		      sta	SpriteGfxIndex,X
   3772  2028		       95 f1		      sta	spritesort,X
   3773  202a		       ca		      dex
   3774  202b		       10 f8		      bpl	SetCopyHeight
   3775  202d
   3776  202d
   3777  202d
   3778  202d							; since we can't turn off pf, point PF to zeros here
   3779  202d		       a9 f0		      lda	#>blank_pf
   3780  202f		       85 be		      sta	PF2pointer+1
   3781  2031		       85 bc		      sta	PF1pointer+1
   3782  2033		       a9 17		      lda	#<blank_pf
   3783  2035		       85 bd		      sta	PF2pointer
   3784  2037		       85 bb		      sta	PF1pointer
   3785  2039		       60		      rts
   3786  203a
   3787  203a				   drawscreen
   3788  203a				  -	      ifconst	debugscore
   3789  203a				  -	      jsr	debugcycles
   3790  203a					      endif
   3791  203a
   3792  203a				   WaitForOverscanEnd
   3793  203a		       ad 84 02 	      lda	INTIM
   3794  203d		       30 fb		      bmi	WaitForOverscanEnd
   3795  203f
   3796  203f		       a9 02		      lda	#2
   3797  2041		       85 02		      sta	WSYNC
   3798  2043		       85 00		      sta	VSYNC
   3799  2045		       85 02		      sta	WSYNC
   3800  2047		       85 02		      sta	WSYNC
   3801  2049		       4a		      lsr
   3802  204a		       85 27		      sta	VDELBL
   3803  204c		       85 25		      sta	VDELP0
   3804  204e		       85 02		      sta	WSYNC
   3805  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   3806  2052				  -	      ifconst	overscan_time
   3807  2052				  -	      lda	#overscan_time+5+128
   3808  2052					      else
   3809  2052		       a9 aa		      lda	#42+128
   3810  2054					      endif
   3811  2054		       8d 96 02 	      sta	TIM64T
   3812  2057
   3813  2057							; run possible vblank bB code
   3814  2057				  -	      ifconst	vblank_bB_code
   3815  2057				  -	      jsr	vblank_bB_code
   3816  2057					      endif
   3817  2057
   3818  2057		       20 df f1 	      jsr	setscorepointers
   3819  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   3820  205d
   3821  205d							;-------------
   3822  205d
   3823  205d
   3824  205d
   3825  205d
   3826  205d
   3827  205d							;--position P0, M0, M1, BL
   3828  205d
   3829  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   3830  2060
   3831  2060							;--set up player 0 pointer
   3832  2060
   3833  2060		       c6 8d		      dec	player0y
   3834  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   3835  2064		       38		      sec
   3836  2065		       e5 8d		      sbc	player0y
   3837  2067		       18		      clc
   3838  2068		       65 b0		      adc	player0height
   3839  206a		       85 a2		      sta	player0pointer
   3840  206c
   3841  206c		       a5 8d		      lda	player0y
   3842  206e		       85 cf		      sta	P0Top
   3843  2070		       38		      sec
   3844  2071		       e5 b0		      sbc	player0height
   3845  2073		       18		      clc
   3846  2074		       69 80		      adc	#$80
   3847  2076		       85 a4		      sta	P0Bottom
   3848  2078
   3849  2078
   3850  2078							;--some final setup
   3851  2078
   3852  2078		       a2 04		      ldx	#4
   3853  207a		       a9 80		      lda	#$80
   3854  207c				   cycle74_HMCLR
   3855  207c		       95 20		      sta	HMP0,X
   3856  207e		       ca		      dex
   3857  207f		       10 fb		      bpl	cycle74_HMCLR
   3858  2081							;	sta HMCLR
   3859  2081
   3860  2081
   3861  2081		       a9 00		      lda	#0
   3862  2083		       85 0e		      sta	PF1
   3863  2085		       85 0f		      sta	PF2
   3864  2087		       85 1b		      sta	GRP0
   3865  2089		       85 1c		      sta	GRP1
   3866  208b
   3867  208b
   3868  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   3869  208e
   3870  208e				   WaitForVblankEnd
   3871  208e		       ad 84 02 	      lda	INTIM
   3872  2091		       30 fb		      bmi	WaitForVblankEnd
   3873  2093		       a9 00		      lda	#0
   3874  2095		       85 02		      sta	WSYNC
   3875  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   3876  2099		       85 2c		      sta	CXCLR
   3877  209b
   3878  209b
   3879  209b		       4c 60 f1 	      jmp	KernelRoutine
   3880  209e
   3881  209e
   3882  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   3883  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   3884  209e							;if you do not wish to write to P1 during this function, make
   3885  209e							;sure Y==0 before you call it.  This function will change Y, and A
   3886  209e							;will be the value put into HMxx when returned.
   3887  209e							;Call this function with at least 11 cycles left in the scanline 
   3888  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   3889  209e							;into the second scanline
   3890  209e		       38		      sec
   3891  209f		       85 02		      sta	WSYNC	;begin line 1
   3892  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   3893  20a4				   DivideBy15Loop
   3894  20a4		       e9 0f		      sbc	#15
   3895  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   3896  20a8
   3897  20a8		       a8		      tay		;+2	10/15/...60
   3898  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   3899  20ac
   3900  20ac							;	15
   3901  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   3902  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   3903  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3904  20b2		       85 2a		      sta	HMOVE	;+3
   3905  20b4		       60		      rts		;+6	 9
   3906  20b5
   3907  20b5							;-------------------------------------------------------------------------
   3908  20b5
   3909  20b5				   PrePositionAllObjects
   3910  20b5
   3911  20b5		       a2 04		      ldx	#4
   3912  20b7		       a5 82		      lda	ballx
   3913  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3914  20bc
   3915  20bc		       ca		      dex
   3916  20bd		       a5 81		      lda	missile1x
   3917  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3918  20c2
   3919  20c2		       ca		      dex
   3920  20c3		       a5 80		      lda	missile0x
   3921  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3922  20c8
   3923  20c8		       ca		      dex
   3924  20c9		       ca		      dex
   3925  20ca		       a5 84		      lda	player0x
   3926  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3927  20cf
   3928  20cf		       60		      rts
   3929  20d0
   3930  20d0
   3931  20d0							;-------------------------------------------------------------------------
   3932  20d0
   3933  20d0
   3934  20d0
   3935  20d0
   3936  20d0
   3937  20d0
   3938  20d0
   3939  20d0
   3940  20d0							;-------------------------------------------------------------------------
   3941  20d0
   3942  20d0
   3943  20d0				   KernelSetupSubroutine
   3944  20d0
   3945  20d0		       a2 04		      ldx	#4
   3946  20d2				   AdjustYValuesUpLoop
   3947  20d2		       b5 8e		      lda	NewSpriteY,X
   3948  20d4		       18		      clc
   3949  20d5		       69 02		      adc	#2
   3950  20d7		       95 8e		      sta	NewSpriteY,X
   3951  20d9		       ca		      dex
   3952  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   3953  20dc
   3954  20dc
   3955  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   3956  20de
   3957  20de		       b5 9d		      lda	SpriteGfxIndex,x
   3958  20e0		       a8		      tay
   3959  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   3960  20e4		       85 ce		      sta	RepoLine
   3961  20e6
   3962  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   3963  20e8		       a8		      tay
   3964  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   3965  20ec		       85 d0		      sta	temp6
   3966  20ee
   3967  20ee		       86 83		      stx	SpriteIndex
   3968  20f0
   3969  20f0
   3970  20f0
   3971  20f0		       a9 ff		      lda	#255
   3972  20f2		       85 a5		      sta	P1Bottom
   3973  20f4
   3974  20f4		       a5 8d		      lda	player0y
   3975  20f6				  -	      ifconst	screenheight
   3976  20f6				  -	      cmp	#screenheight+1
   3977  20f6					      else
   3978  20f6		       c9 59		      cmp	#$59
   3979  20f8					      endif
   3980  20f8		       90 04		      bcc	nottoohigh
   3981  20fa		       a5 a4		      lda	P0Bottom
   3982  20fc		       85 cf		      sta	P0Top
   3983  20fe
   3984  20fe
   3985  20fe
   3986  20fe				   nottoohigh
   3987  20fe		       60		      rts
   3988  20ff
   3989  20ff							;-------------------------------------------------------------------------
   3990  20ff
   3991  20ff
   3992  20ff
   3993  20ff
   3994  20ff
   3995  20ff							;*************************************************************************
   3996  20ff
   3997  20ff							;-------------------------------------------------------------------------
   3998  20ff							;-------------------------Data Below--------------------------------------
   3999  20ff							;-------------------------------------------------------------------------
   4000  20ff
   4001  20ff				   MaskTable
   4002  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   4003  2104
   4004  2104							; shove 6-digit score routine here
   4005  2104
   4006  2104				   sixdigscore
   4007  2104		       a9 00		      lda	#0
   4008  2106							;	sta COLUBK
   4009  2106		       85 0d		      sta	PF0
   4010  2108		       85 0e		      sta	PF1
   4011  210a		       85 0f		      sta	PF2
   4012  210c		       85 1f		      sta	ENABL
   4013  210e		       85 1d		      sta	ENAM0
   4014  2110		       85 1e		      sta	ENAM1
   4015  2112							;end of kernel here
   4016  2112
   4017  2112
   4018  2112							; 6 digit score routine
   4019  2112							; lda #0
   4020  2112							; sta PF1
   4021  2112							; sta PF2
   4022  2112							; tax
   4023  2112
   4024  2112		       85 02		      sta	WSYNC	;,x
   4025  2114
   4026  2114							;		  STA WSYNC ;first one, need one more
   4027  2114		       85 0b		      sta	REFP0
   4028  2116		       85 0c		      sta	REFP1
   4029  2118		       85 1b		      STA	GRP0
   4030  211a		       85 1c		      STA	GRP1
   4031  211c		       85 2b		      sta	HMCLR
   4032  211e
   4033  211e							; restore P0pointer
   4034  211e
   4035  211e		       a5 a2		      lda	player0pointer
   4036  2120		       18		      clc
   4037  2121		       65 8d		      adc	player0y
   4038  2123		       38		      sec
   4039  2124		       e5 b0		      sbc	player0height
   4040  2126		       85 a2		      sta	player0pointer
   4041  2128		       e6 8d		      inc	player0y
   4042  212a
   4043  212a				  -	      ifconst	vblank_time
   4044  212a				  -	      ifconst	screenheight
   4045  212a				  -	      if	screenheight == 84
   4046  212a				  -	      lda	#vblank_time+9+128+10
   4047  212a				  -	      else
   4048  212a				  -	      lda	#vblank_time+9+128+19
   4049  212a				  -	      endif
   4050  212a				  -	      else
   4051  212a				  -	      lda	#vblank_time+9+128
   4052  212a				  -	      endif
   4053  212a					      else
   4054  212a				  -	      ifconst	screenheight
   4055  212a				  -	      if	screenheight == 84
   4056  212a				  -	      lda	#52+128+10
   4057  212a				  -	      else
   4058  212a				  -	      lda	#52+128+19
   4059  212a				  -	      endif
   4060  212a					      else
   4061  212a		       a9 b4		      lda	#52+128
   4062  212c					      endif
   4063  212c					      endif
   4064  212c
   4065  212c		       8d 96 02 	      sta	TIM64T
   4066  212f					      ifconst	minikernel
   4067  212f		       20 b0 f9 	      jsr	minikernel
   4068  2132					      endif
   4069  2132				  -	      ifconst	noscore
   4070  2132				  -	      pla
   4071  2132				  -	      pla
   4072  2132				  -	      jmp	skipscore
   4073  2132					      endif
   4074  2132
   4075  2132							; score pointers contain:
   4076  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4077  2132							; swap lo2->temp1
   4078  2132							; swap lo4->temp3
   4079  2132							; swap lo6->temp5
   4080  2132
   4081  2132		       a5 ca		      lda	scorepointers+5
   4082  2134		       85 cf		      sta	temp5
   4083  2136		       a5 c6		      lda	scorepointers+1
   4084  2138		       85 cb		      sta	temp1
   4085  213a		       a5 c8		      lda	scorepointers+3
   4086  213c		       85 cd		      sta	temp3
   4087  213e
   4088  213e		       a9 ff		      lda	#>scoretable
   4089  2140		       85 c6		      sta	scorepointers+1
   4090  2142		       85 c8		      sta	scorepointers+3
   4091  2144		       85 ca		      sta	scorepointers+5
   4092  2146		       85 cc		      sta	temp2
   4093  2148		       85 ce		      sta	temp4
   4094  214a		       85 d0		      sta	temp6
   4095  214c
   4096  214c		       60		      rts
   4097  214d
   4098  214d
   4099  214d
   4100  214d							;-------------------------------------------------------------------------
   4101  214d							;----------------------Kernel Routine-------------------------------------
   4102  214d							;-------------------------------------------------------------------------
   4103  214d
   4104  214d
   4105  214d							;-------------------------------------------------------------------------
   4106  214d							; repeat $f147-*
   4107  214d							; brk
   4108  214d							; repend
   4109  214d							;	org $F240
   4110  214d
   4111  214d				   SwitchDrawP0K1		;	72
   4112  214d		       a5 a4		      lda	P0Bottom
   4113  214f		       85 cf		      sta	P0Top	;+6	 2
   4114  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4115  2154
   4116  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   4118  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4119  2159
   4120  2159				   SkipDrawP1K1 		;	11
   4121  2159		       a9 00		      lda	#0
   4122  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   4123  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   4124  2160
   4125  2160							;-------------------------------------------------------------------------
   4126  2160
   4127  2160				   KernelRoutine
   4128  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   4130  2166							; jsr wastetime ; waste 12 cycles
   4131  2166				  -	      else
   4132  2166				  -	      sleep	6
   4133  2166					      endif
   4134  2166		       ba		      tsx
   4135  2167		       86 f6		      stx	stack1
   4136  2169		       a2 1f		      ldx	#ENABL
   4137  216b		       9a		      txs		;+9	 9
   4138  216c
   4139  216c		       a2 00		      ldx	#0
   4140  216e		       a5 c4		      lda	pfheight
   4141  2170		       10 01		      bpl	asdhj
   4142  2172		       24		      .byte.b	$24
   4143  2173				   asdhj
   4144  2173		       aa		      tax
   4145  2174
   4146  2174							; ldx pfheight
   4147  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   4148  2177
   4149  2177				  -	      ifconst	screenheight
   4150  2177				  -	      sec
   4151  2177				  -	      if	screenheight == 84
   4152  2177				  -	      sbc	pfsub+1,x
   4153  2177				  -	      else
   4154  2177				  -	      sbc	pfsub,x
   4155  2177				  -	      endif
   4156  2177					      endif
   4157  2177
   4158  2177		       85 ba		      sta	pfpixelheight
   4159  2179
   4160  2179				  -	      ifconst	screenheight
   4161  2179				  -	      ldy	#screenheight
   4162  2179					      else
   4163  2179		       a0 58		      ldy	#88
   4164  217b					      endif
   4165  217b
   4166  217b							;	lda #$02
   4167  217b							;	sta COLUBK		;+5	18
   4168  217b
   4169  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   4171  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   4173  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   4175  2181		       c4 cf		      cpy	P0Top	;+3	69
   4176  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   4177  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   4178  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   4179  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   4180  218b				   BackFromSwitchDrawP0K1
   4181  218b
   4182  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   4183  218d							;		to a value greater than maximum Y value initially
   4184  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   4185  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   4186  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   4187  2194				   BackFromSkipDrawP1
   4188  2194
   4189  2194							;fuck	
   4190  2194		       84 cb		      sty	temp1
   4191  2196		       a4 ba		      ldy	pfpixelheight
   4192  2198		       b3 bb		      lax	(PF1pointer),y
   4193  219a		       86 0e		      stx	PF1	;+7	26
   4194  219c		       b1 bd		      lda	(PF2pointer),y
   4195  219e		       85 0f		      sta	PF2	;+7	33
   4196  21a0							;sleep 6
   4197  21a0		       86 b7		      stx	PF1temp2
   4198  21a2		       85 b9		      sta	PF2temp2
   4199  21a4		       88		      dey
   4200  21a5		       30 35		      bmi	pagewraphandler
   4201  21a7		       b1 bb		      lda	(PF1pointer),y
   4202  21a9				   cyclebalance
   4203  21a9		       85 b6		      sta	PF1temp1
   4204  21ab		       b1 bd		      lda	(PF2pointer),y
   4205  21ad		       85 b8		      sta	PF2temp1
   4206  21af		       a4 cb		      ldy	temp1
   4207  21b1
   4208  21b1		       a2 1f		      ldx	#ENABL
   4209  21b3		       9a		      txs
   4210  21b4		       c4 8c		      cpy	bally
   4211  21b6		       08		      php		;+6	39	VDEL ball
   4212  21b7
   4213  21b7
   4214  21b7		       c4 8b		      cpy	missile1y
   4215  21b9		       08		      php		;+6	71
   4216  21ba
   4217  21ba		       c4 8a		      cpy	missile0y
   4218  21bc		       08		      php		;+6	 1
   4219  21bd
   4220  21bd
   4221  21bd		       88		      dey		;+2	15
   4222  21be
   4223  21be		       c4 ce		      cpy	RepoLine	;+3	18
   4224  21c0		       f0 62		      beq	RepoKernel	;+2	20
   4225  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   4227  21c5
   4228  21c5				   newrepo		; since we have time here, store next repoline
   4229  21c5		       a6 83		      ldx	SpriteIndex
   4230  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   4231  21c9		       aa		      tax
   4232  21ca		       b5 8e		      lda	NewSpriteY,x
   4233  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   4235  21d0
   4236  21d0				   BackFromRepoKernel
   4237  21d0		       98		      tya		;+2	45
   4238  21d1		       25 c4		      and	pfheight	;+2	47
   4239  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   4240  21d5		       c6 ba		      dec	pfpixelheight
   4241  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   4242  21d9							;	bmi donewkernel		;+3	54
   4243  21d9							;	bne KernelLoopb+1		;+3	54
   4244  21d9
   4245  21d9				   donewkernel
   4246  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   4247  21dc
   4248  21dc				   pagewraphandler
   4249  21dc		       4c a9 f1 	      jmp	cyclebalance
   4250  21df
   4251  21df							;-------------------------------------------------------------------------
   4252  21df
   4253  21df							; room here for score?
   4254  21df
   4255  21df				   setscorepointers
   4256  21df		       a7 d4		      lax	score+2
   4257  21e1		       20 fb f1 	      jsr	scorepointerset
   4258  21e4		       84 ca		      sty	scorepointers+5
   4259  21e6		       86 c7		      stx	scorepointers+2
   4260  21e8		       a7 d3		      lax	score+1
   4261  21ea		       20 fb f1 	      jsr	scorepointerset
   4262  21ed		       84 c9		      sty	scorepointers+4
   4263  21ef		       86 c6		      stx	scorepointers+1
   4264  21f1		       a7 d2		      lax	score
   4265  21f3		       20 fb f1 	      jsr	scorepointerset
   4266  21f6		       84 c8		      sty	scorepointers+3
   4267  21f8		       86 c5		      stx	scorepointers
   4268  21fa				   wastetime
   4269  21fa		       60		      rts
   4270  21fb
   4271  21fb				   scorepointerset
   4272  21fb		       29 0f		      and	#$0F
   4273  21fd		       0a		      asl
   4274  21fe		       0a		      asl
   4275  21ff		       0a		      asl
   4276  2200		       69 74		      adc	#<scoretable
   4277  2202		       a8		      tay
   4278  2203		       8a		      txa
   4279  2204		       29 f0		      and	#$F0
   4280  2206		       4a		      lsr
   4281  2207		       69 74		      adc	#<scoretable
   4282  2209		       aa		      tax
   4283  220a		       60		      rts
   4284  220b							;	align 256
   4285  220b
   4286  220b				   SwitchDrawP0KR		;	45
   4287  220b		       a5 a4		      lda	P0Bottom
   4288  220d		       85 cf		      sta	P0Top	;+6	51
   4289  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4290  2212
   4291  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   4293  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4294  2217
   4295  2217							;-----------------------------------------------------------
   4296  2217
   4297  2217				   noUpdateXKR
   4298  2217		       a2 01		      ldx	#1
   4299  2219		       cc cf 00 	      cpy.w	P0Top
   4300  221c		       4c 2e f2 	      JMP	retXKR
   4301  221f
   4302  221f				   skipthis
   4303  221f		       a2 01		      ldx	#1
   4304  2221		       4c 70 f2 	      jmp	goback
   4305  2224
   4306  2224				   RepoKernel		;	22	crosses page boundary
   4307  2224		       98		      tya
   4308  2225		       25 c4		      and	pfheight	;+2	26
   4309  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   4310  2229		       aa		      tax
   4311  222a							;	dex			;+2	30
   4312  222a		       c6 ba		      dec	pfpixelheight
   4313  222c							;	stx Temp		;+3	35
   4314  222c							;	SLEEP 3
   4315  222c
   4316  222c		       c4 cf		      cpy	P0Top	;+3	42
   4317  222e				   retXKR
   4318  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   4319  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   4320  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   4321  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   4322  2236				   BackFromSwitchDrawP0KR
   4323  2236		       38		      sec		;+2	56
   4324  2237
   4325  2237
   4326  2237
   4327  2237		       b5 b8		      lda	PF2temp1,X
   4328  2239		       b4 b6		      ldy	PF1temp1,X
   4329  223b
   4330  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   4331  223d
   4332  223d		       85 0f		      sta	PF2	;+7	63
   4333  223f
   4334  223f		       b5 9d		      lda	SpriteGfxIndex,x
   4335  2241		       84 0e		      sty	PF1	;+7	70	too early?
   4336  2243		       aa		      tax
   4337  2244		       a9 00		      lda	#0
   4338  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   4339  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   4340  224a
   4341  224a				   DivideBy15LoopK		;	 6	(carry set above)
   4342  224a		       e9 0f		      sbc	#15
   4343  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   4344  224e
   4345  224e		       aa		      tax		;+2	12/17/...62
   4346  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   4347  2252
   4348  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   4349  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   4350  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   4351  2258							;sta HMOVE			;+3	 3
   4352  2258
   4353  2258		       a2 1f		      ldx	#ENABL
   4354  225a		       9a		      txs		;+4	25
   4355  225b		       a4 ce		      ldy	RepoLine	; restore y
   4356  225d		       c4 8c		      cpy	bally
   4357  225f		       08		      php		;+6	 9	VDEL ball
   4358  2260
   4359  2260		       c4 8b		      cpy	missile1y
   4360  2262		       08		      php		;+6	15
   4361  2263
   4362  2263		       c4 8a		      cpy	missile0y
   4363  2265		       08		      php		;+6	21
   4364  2266
   4365  2266
   4366  2266
   4367  2266
   4368  2266
   4369  2266							;15 cycles
   4370  2266		       98		      tya
   4371  2267		       25 c4		      and	pfheight
   4372  2269							;eor #1
   4373  2269		       29 fe		      and	#$FE
   4374  226b		       d0 b2		      bne	skipthis
   4375  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   4377  2270							;	sleep 2
   4378  2270				   goback
   4379  2270
   4380  2270		       88		      dey
   4381  2271		       c4 cf		      cpy	P0Top	;+3	52
   4382  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   4383  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   4384  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   4385  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   4386  227b				   BackFromSwitchDrawP0KV
   4387  227b
   4388  227b							; sleep 3
   4389  227b
   4390  227b		       b5 b8		      lda	PF2temp1,X
   4391  227d		       85 0f		      sta	PF2	;+7	 5
   4392  227f		       b5 b6		      lda	PF1temp1,X
   4393  2281		       85 0e		      sta	PF1	;+7	74 
   4394  2283		       85 2a		      sta	HMOVE
   4395  2285
   4396  2285		       a9 00		      lda	#0
   4397  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   4398  2289
   4399  2289		       a2 1f		      ldx	#ENABL
   4400  228b		       9a		      txs		;+4	 8
   4401  228c
   4402  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   4403  228e							;--now, set all new variables and return to main kernel loop
   4404  228e
   4405  228e
   4406  228e							;
   4407  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   4408  2290		       aa		      tax		;+2	33
   4409  2291							;
   4410  2291
   4411  2291
   4412  2291
   4413  2291		       b5 93		      lda	NewNUSIZ,X
   4414  2293		       85 05		      sta	NUSIZ1	;+7	20
   4415  2295		       85 0c		      sta	REFP1
   4416  2297		       b5 98		      lda	NewCOLUP1,X
   4417  2299		       85 07		      sta	COLUP1	;+7	27
   4418  229b
   4419  229b							;	lda SpriteGfxIndex,X	;+4	31
   4420  229b							;	tax				;+2	33
   4421  229b							;fuck2
   4422  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   4423  229d		       38		      sec		;+2	38
   4424  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   4425  22a0		       85 a5		      sta	P1Bottom	;+3	45
   4426  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   4428  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   4429  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   4430  22a9		       85 cc		      sta	P1display	;+3	55
   4431  22ab		       b5 ab		      lda	player1pointerhi,X
   4432  22ad		       85 cd		      sta	P1display+1	;+7	62
   4433  22af
   4434  22af
   4435  22af		       c4 8c		      cpy	bally
   4436  22b1		       08		      php		;+6	68	VDELed
   4437  22b2
   4438  22b2		       c4 8b		      cpy	missile1y
   4439  22b4		       08		      php		;+6	74
   4440  22b5
   4441  22b5		       c4 8a		      cpy	missile0y
   4442  22b7		       08		      php		;+6	 4
   4443  22b8
   4444  22b8
   4445  22b8
   4446  22b8							; lda SpriteGfxIndex-1,x
   4447  22b8							; sleep 3
   4448  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   4449  22ba							; tax
   4450  22ba							; lda NewSpriteY,x
   4451  22ba							; sta RepoLine
   4452  22ba
   4453  22ba							; 10 cycles below...
   4454  22ba		       10 05		      bpl	SetNextLine
   4455  22bc		       a9 ff		      lda	#255
   4456  22be		       4c c4 f2 	      jmp	SetLastLine
   4457  22c1				   SetNextLine
   4458  22c1							;	lda NewSpriteY-1,x
   4459  22c1		       ad d0 00 	      lda.w	temp6
   4460  22c4				   SetLastLine
   4461  22c4		       85 ce		      sta	RepoLine
   4462  22c6
   4463  22c6		       98		      tya
   4464  22c7		       25 c4		      and	pfheight
   4465  22c9		       d0 06		      bne	nodec
   4466  22cb		       c6 ba		      dec	pfpixelheight
   4467  22cd		       88		      dey		;+2	30
   4468  22ce
   4469  22ce							; 10 cycles 
   4470  22ce
   4471  22ce
   4472  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   4473  22d1
   4474  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   4476  22d3		       88		      dey
   4477  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   4478  22d7
   4479  22d7							;-------------------------------------------------------------------------
   4480  22d7
   4481  22d7
   4482  22d7				   SwitchDrawP0KV		;	69
   4483  22d7		       a5 a4		      lda	P0Bottom
   4484  22d9		       85 cf		      sta	P0Top	;+6	75
   4485  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4486  22de
   4487  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   4489  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4490  22e3
   4491  22e3							;-------------------------------------------------------------------------
   4492  22e3
   4493  22e3				   DoneWithKernel
   4494  22e3
   4495  22e3				   BottomOfKernelLoop
   4496  22e3
   4497  22e3		       85 02		      sta	WSYNC
   4498  22e5		       a6 f6		      ldx	stack1
   4499  22e7		       9a		      txs
   4500  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   4501  22eb
   4502  22eb
   4503  22eb		       85 02		      sta	WSYNC
   4504  22ed		       a2 00		      ldx	#0
   4505  22ef		       85 2b		      sta	HMCLR
   4506  22f1		       86 1b		      STx	GRP0
   4507  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4508  22f5
   4509  22f5		       a0 07		      LDY	#7
   4510  22f7		       84 25		      STy	VDELP0
   4511  22f9		       84 26		      STy	VDELP1
   4512  22fb		       a9 10		      LDA	#$10
   4513  22fd		       85 21		      STA	HMP1
   4514  22ff		       a5 d5		      LDA	scorecolor
   4515  2301		       85 06		      STA	COLUP0
   4516  2303		       85 07		      STA	COLUP1
   4517  2305
   4518  2305		       a9 03		      LDA	#$03
   4519  2307		       85 04		      STA	NUSIZ0
   4520  2309		       85 05		      STA	NUSIZ1
   4521  230b
   4522  230b		       85 10		      STA	RESP0
   4523  230d		       85 11		      STA	RESP1
   4524  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   4526  2314		       b1 c5		      lda	(scorepointers),y
   4527  2316		       85 1b		      sta	GRP0
   4528  2318				  -	      ifconst	pfscore
   4529  2318				  -	      lda	pfscorecolor
   4530  2318				  -	      sta	COLUPF
   4531  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   4533  231b					      endif
   4534  231b
   4535  231b		       85 2a		      STA	HMOVE
   4536  231d		       b1 cd		      lda	(scorepointers+8),y
   4537  231f							; sta WSYNC
   4538  231f							;sleep 2
   4539  231f		       4c 2c f3 	      jmp	beginscore
   4540  2322
   4541  2322
   4542  2322				   loop2
   4543  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   4544  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   4545  2326				  -	      ifconst	pfscore
   4546  2326				  -	      lda.w	pfscore1
   4547  2326				  -	      sta	PF1
   4548  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   4550  232a					      endif
   4551  232a							; cycle 0
   4552  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   4553  232c				   beginscore
   4554  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   4555  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   4556  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   4557  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   4558  2334		       9a		      txs
   4559  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   4561  2339				  -	      ifconst	pfscore
   4562  2339				  -	      lda	pfscore2
   4563  2339				  -	      sta	PF1
   4564  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   4566  233c					      endif
   4567  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   4568  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   4569  2340		       ba		      tsx
   4570  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   4571  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   4572  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   4573  2347		       88		      dey
   4574  2348		       10 d8		      bpl	loop2	;+2  60  180
   4575  234a		       a6 f6		      ldx	stack1
   4576  234c		       9a		      txs
   4577  234d
   4578  234d
   4579  234d							; lda scorepointers+1
   4580  234d		       a4 cb		      ldy	temp1
   4581  234f							; sta temp1
   4582  234f		       84 c6		      sty	scorepointers+1
   4583  2351
   4584  2351		       a9 00		      LDA	#0
   4585  2353		       85 1b		      STA	GRP0
   4586  2355		       85 1c		      STA	GRP1
   4587  2357		       85 0e		      sta	PF1
   4588  2359		       85 25		      STA	VDELP0
   4589  235b		       85 26		      STA	VDELP1	;do we need these
   4590  235d		       85 04		      STA	NUSIZ0
   4591  235f		       85 05		      STA	NUSIZ1
   4592  2361
   4593  2361							; lda scorepointers+3
   4594  2361		       a4 cd		      ldy	temp3
   4595  2363							; sta temp3
   4596  2363		       84 c8		      sty	scorepointers+3
   4597  2365
   4598  2365							; lda scorepointers+5
   4599  2365		       a4 cf		      ldy	temp5
   4600  2367							; sta temp5
   4601  2367		       84 ca		      sty	scorepointers+5
   4602  2369
   4603  2369
   4604  2369							;-------------------------------------------------------------------------
   4605  2369							;------------------------Overscan Routine---------------------------------
   4606  2369							;-------------------------------------------------------------------------
   4607  2369
   4608  2369				   OverscanRoutine
   4609  2369
   4610  2369
   4611  2369
   4612  2369				   skipscore
   4613  2369				  -	      ifconst	qtcontroller
   4614  2369				  -	      lda	qtcontroller
   4615  2369				  -	      lsr		; bit 0 in carry
   4616  2369				  -	      lda	#4
   4617  2369				  -	      ror		; carry into top of A
   4618  2369					      else
   4619  2369		       a9 02		      lda	#2
   4620  236b					      endif		; qtcontroller
   4621  236b		       85 02		      sta	WSYNC
   4622  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   4623  236f
   4624  236f
   4625  236f
   4626  236f
   4627  236f
   4628  236f							;-------------------------------------------------------------------------
   4629  236f							;----------------------------End Main Routines----------------------------
   4630  236f							;-------------------------------------------------------------------------
   4631  236f
   4632  236f
   4633  236f							;*************************************************************************
   4634  236f
   4635  236f							;-------------------------------------------------------------------------
   4636  236f							;----------------------Begin Subroutines----------------------------------
   4637  236f							;-------------------------------------------------------------------------
   4638  236f
   4639  236f
   4640  236f
   4641  236f
   4642  236f				   KernelCleanupSubroutine
   4643  236f
   4644  236f		       a2 04		      ldx	#4
   4645  2371				   AdjustYValuesDownLoop
   4646  2371		       b5 8e		      lda	NewSpriteY,X
   4647  2373		       38		      sec
   4648  2374		       e9 02		      sbc	#2
   4649  2376		       95 8e		      sta	NewSpriteY,X
   4650  2378		       ca		      dex
   4651  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   4652  237b
   4653  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   4655  237e							;rts
   4656  237e
   4657  237e				   SetupP1Subroutine
   4658  237e							; flickersort algorithm
   4659  237e							; count 4-0
   4660  237e							; table2=table1 (?)
   4661  237e							; detect overlap of sprites in table 2
   4662  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   4663  237e							; if no overlap, do regular sort in table 2 and table 1
   4664  237e				   fsstart
   4665  237e		       a2 ff		      ldx	#255
   4666  2380				   copytable
   4667  2380		       e8		      inx
   4668  2381		       b5 f1		      lda	spritesort,x
   4669  2383		       95 9d		      sta	SpriteGfxIndex,x
   4670  2385		       e0 04		      cpx	#4
   4671  2387		       d0 f7		      bne	copytable
   4672  2389
   4673  2389		       86 cd		      stx	temp3	; highest displayed sprite
   4674  238b		       ca		      dex
   4675  238c		       86 cc		      stx	temp2
   4676  238e				   sortloop
   4677  238e		       a6 cc		      ldx	temp2
   4678  2390		       b5 f1		      lda	spritesort,x
   4679  2392		       aa		      tax
   4680  2393		       b5 8e		      lda	NewSpriteY,x
   4681  2395		       85 cb		      sta	temp1
   4682  2397
   4683  2397		       a6 cc		      ldx	temp2
   4684  2399		       b5 f2		      lda	spritesort+1,x
   4685  239b		       aa		      tax
   4686  239c		       b5 8e		      lda	NewSpriteY,x
   4687  239e		       38		      sec
   4688  239f		       18		      clc
   4689  23a0		       e5 cb		      sbc	temp1
   4690  23a2		       90 0e		      bcc	largerXislower
   4691  23a4
   4692  23a4							; larger x is higher (A>=temp1)
   4693  23a4		       d5 b1		      cmp	spriteheight,x
   4694  23a6		       b0 2f		      bcs	countdown
   4695  23a8							; overlap with x+1>x
   4696  23a8							; 
   4697  23a8							; stick x at end of gfxtable, dec counter
   4698  23a8				   overlapping
   4699  23a8		       c6 cd		      dec	temp3
   4700  23aa		       a6 cc		      ldx	temp2
   4701  23ac							; inx
   4702  23ac		       20 eb f3 	      jsr	shiftnumbers
   4703  23af		       4c cd f3 	      jmp	skipswapGfxtable
   4704  23b2
   4705  23b2				   largerXislower		; (temp1>A)
   4706  23b2		       a8		      tay
   4707  23b3		       a6 cc		      ldx	temp2
   4708  23b5		       b5 f1		      lda	spritesort,x
   4709  23b7		       aa		      tax
   4710  23b8		       98		      tya
   4711  23b9		       49 ff		      eor	#$FF
   4712  23bb		       e9 01		      sbc	#1
   4713  23bd		       90 e9		      bcc	overlapping
   4714  23bf		       d5 b1		      cmp	spriteheight,x
   4715  23c1		       b0 0a		      bcs	notoverlapping
   4716  23c3
   4717  23c3		       c6 cd		      dec	temp3
   4718  23c5		       a6 cc		      ldx	temp2
   4719  23c7							; inx
   4720  23c7		       20 eb f3 	      jsr	shiftnumbers
   4721  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   4722  23cd				   notoverlapping
   4723  23cd							; ldx temp2 ; swap display table
   4724  23cd							; ldy SpriteGfxIndex+1,x
   4725  23cd							; lda SpriteGfxIndex,x
   4726  23cd							; sty SpriteGfxIndex,x
   4727  23cd							; sta SpriteGfxIndex+1,x 
   4728  23cd
   4729  23cd				   skipswapGfxtable
   4730  23cd		       a6 cc		      ldx	temp2	; swap sort table
   4731  23cf		       b4 f2		      ldy	spritesort+1,x
   4732  23d1		       b5 f1		      lda	spritesort,x
   4733  23d3		       94 f1		      sty	spritesort,x
   4734  23d5		       95 f2		      sta	spritesort+1,x
   4735  23d7
   4736  23d7				   countdown
   4737  23d7		       c6 cc		      dec	temp2
   4738  23d9		       10 b3		      bpl	sortloop
   4739  23db
   4740  23db				   checktoohigh
   4741  23db		       a6 cd		      ldx	temp3
   4742  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   4743  23df		       aa		      tax
   4744  23e0		       b5 8e		      lda	NewSpriteY,x
   4745  23e2				  -	      ifconst	screenheight
   4746  23e2				  -	      cmp	#screenheight-3
   4747  23e2					      else
   4748  23e2		       c9 55		      cmp	#$55
   4749  23e4					      endif
   4750  23e4		       90 04		      bcc	nonetoohigh
   4751  23e6		       c6 cd		      dec	temp3
   4752  23e8		       d0 f1		      bne	checktoohigh
   4753  23ea
   4754  23ea				   nonetoohigh
   4755  23ea		       60		      rts
   4756  23eb
   4757  23eb
   4758  23eb				   shiftnumbers
   4759  23eb							; stick current x at end, shift others down
   4760  23eb							; if x=4: don't do anything
   4761  23eb							; if x=3: swap 3 and 4
   4762  23eb							; if x=2: 2=3, 3=4, 4=2
   4763  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   4764  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   4765  23eb							; ldy SpriteGfxIndex,x
   4766  23eb				   swaploop
   4767  23eb		       e0 04		      cpx	#4
   4768  23ed		       f0 08		      beq	shiftdone
   4769  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   4770  23f1		       95 9d		      sta	SpriteGfxIndex,x
   4771  23f3		       e8		      inx
   4772  23f4		       4c eb f3 	      jmp	swaploop
   4773  23f7				   shiftdone
   4774  23f7							; sty SpriteGfxIndex,x
   4775  23f7		       60		      rts
   4776  23f8
   4777  23f8				  -	      ifconst	debugscore
   4778  23f8				  -debugcycles
   4779  23f8				  -	      ldx	#14
   4780  23f8				  -	      lda	INTIM	; display # cycles left in the score
   4781  23f8				  -
   4782  23f8				  -	      ifconst	mincycles
   4783  23f8				  -	      lda	mincycles
   4784  23f8				  -	      cmp	INTIM
   4785  23f8				  -	      lda	mincycles
   4786  23f8				  -	      bcc	nochange
   4787  23f8				  -	      lda	INTIM
   4788  23f8				  -	      sta	mincycles
   4789  23f8				  -nochange
   4790  23f8				  -	      endif
   4791  23f8				  -
   4792  23f8				  -			;   cmp #$2B
   4793  23f8				  -			;   bcs no_cycles_left
   4794  23f8				  -	      bmi	cycles_left
   4795  23f8				  -	      ldx	#64
   4796  23f8				  -	      eor	#$ff	;make negative
   4797  23f8				  -cycles_left
   4798  23f8				  -	      stx	scorecolor
   4799  23f8				  -	      and	#$7f	; clear sign bit
   4800  23f8				  -	      tax
   4801  23f8				  -	      lda	scorebcd,x
   4802  23f8				  -	      sta	score+2
   4803  23f8				  -	      lda	scorebcd1,x
   4804  23f8				  -	      sta	score+1
   4805  23f8				  -	      rts
   4806  23f8				  -scorebcd
   4807  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4808  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4809  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4810  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4811  23f8				  -scorebcd1
   4812  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4813  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4814  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4815  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4816  23f8					      endif
   4817  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4818  23f8
   4819  23f8				   start
   4820  23f8		       78		      sei
   4821  23f9		       d8		      cld
   4822  23fa		       a0 00		      ldy	#0
   4823  23fc		       a5 d0		      lda	$D0
   4824  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   4825  2400		       d0 07		      bne	MachineIs2600
   4826  2402		       a5 d1		      lda	$D1
   4827  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   4828  2406		       d0 01		      bne	MachineIs2600
   4829  2408		       88		      dey
   4830  2409				   MachineIs2600
   4831  2409		       a2 00		      ldx	#0
   4832  240b		       8a		      txa
   4833  240c				   clearmem
   4834  240c		       e8		      inx
   4835  240d		       9a		      txs
   4836  240e		       48		      pha
   4837  240f		       d0 fb		      bne	clearmem
   4838  2411		       84 cb		      sty	temp1
   4839  2413				  -	      ifnconst	multisprite
   4840  2413				  -	      ifconst	pfrowheight
   4841  2413				  -	      lda	#pfrowheight
   4842  2413				  -	      else
   4843  2413				  -	      ifconst	pfres
   4844  2413				  -	      lda	#(96/pfres)
   4845  2413				  -	      else
   4846  2413				  -	      lda	#8
   4847  2413				  -	      endif
   4848  2413				  -	      endif
   4849  2413				  -	      sta	playfieldpos
   4850  2413					      endif
   4851  2413		       a2 05		      ldx	#5
   4852  2415				   initscore
   4853  2415		       a9 74		      lda	#<scoretable
   4854  2417		       95 c5		      sta	scorepointers,x
   4855  2419		       ca		      dex
   4856  241a		       10 f9		      bpl	initscore
   4857  241c		       a9 01		      lda	#1
   4858  241e		       85 0a		      sta	CTRLPF
   4859  2420		       0d 84 02 	      ora	INTIM
   4860  2423		       85 d6		      sta	rand
   4861  2425
   4862  2425					      ifconst	multisprite
   4863  2425		       20 1f f0 	      jsr	multisprite_setup
   4864  2428					      endif
   4865  2428
   4866  2428				  -	      ifnconst	bankswitch
   4867  2428				  -	      jmp	game
   4868  2428					      else
   4869  2428		       a9 d0		      lda	#>(game-1)
   4870  242a		       48		      pha
   4871  242b		       a9 ff		      lda	#<(game-1)
   4872  242d		       48		      pha
   4873  242e		       48		      pha
   4874  242f		       48		      pha
   4875  2430		       a2 01		      ldx	#1
   4876  2432		       4c eb ff 	      jmp	BS_jsr
   4877  2435					      endif
   4878  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4879  2435
   4880  2435							;standard routines needed for pretty much all games
   4881  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   4882  2435							; repositioning code and score pointer setup moved to overscan
   4883  2435							; read switches, joysticks now compiler generated (more efficient)
   4884  2435
   4885  2435				   randomize
   4886  2435		       a5 d6		      lda	rand
   4887  2437		       4a		      lsr
   4888  2438				  -	      ifconst	rand16
   4889  2438				  -	      rol	rand16
   4890  2438					      endif
   4891  2438		       90 02		      bcc	noeor
   4892  243a		       49 b4		      eor	#$B4
   4893  243c				   noeor
   4894  243c		       85 d6		      sta	rand
   4895  243e				  -	      ifconst	rand16
   4896  243e				  -	      eor	rand16
   4897  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   4899  2441							;bB.asm
   4900  2441							; bB.asm file is split here
   4901  2441				   .L0350		;  asm
   4902  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_48x2_1
     10  2441					      draw_48x2_2
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_48x2_1
      1  2482		       00 01	   mk_48x1_on =	1
      2  2482		       00 01	   mk_48x2_1_on =	1
      3  2482		       20 9e f5 	      jsr	draw_bmp_48x2_1
      0  2485					      draw_48x2_2
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x2_2_on =	1
      3  2485		       20 fe f5 	      jsr	draw_bmp_48x2_2
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 5e f6 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 24 f7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e				  -	      ifconst	mk_48x1_1_on
     75  259e				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  259e					      endif		;mk_48x1_1_on
     77  259e
     78  259e				  -	      ifconst	mk_48x1_2_on
     79  259e				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  259e					      endif		;mk_48x1_2_on
     81  259e
     82  259e				  -	      ifconst	mk_48x1_3_on
     83  259e				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  259e					      endif		;mk_48x1_3_on
     85  259e
     86  259e					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x2_1
      3  259e
      4  259e		       a0 17		      ldy	#(bmp_48x2_1_window-1)
      5  25a0
      6  25a0		       a9 37		      lda	#<(bmp_48x2_1_colors-1)
      7  25a2		       18		      clc
      8  25a3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
      9  25a5				  -	      ifconst	bmp_48x2_1_index
     10  25a5				  -	      sec
     11  25a5				  -	      sbc	bmp_48x2_1_index
     12  25a5					      endif
     13  25a5		       85 c1		      sta	aux5+0
     14  25a7		       a9 f7		      lda	#>(bmp_48x2_1_colors-1)
     15  25a9		       85 c2		      sta	aux5+1
     16  25ab
     17  25ab		       c8		      iny
     18  25ac		       b1 c1		      lda	(aux5),y
     19  25ae		       88		      dey
     20  25af		       85 06		      sta	COLUP0	;3
     21  25b1		       85 07		      sta	COLUP1	;3
     22  25b3		       85 2b		      sta	HMCLR	;3
     23  25b5
     24  25b5							;setup score pointers to point at my bitmap slices instead
     25  25b5		       a9 50		      lda	#<bmp_48x2_1_00
     26  25b7		       18		      clc
     27  25b8		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     28  25ba				  -	      ifconst	bmp_48x2_1_index
     29  25ba				  -	      sec
     30  25ba				  -	      sbc	bmp_48x2_1_index
     31  25ba					      endif
     32  25ba		       85 c5		      sta	scorepointers+0
     33  25bc		       a9 f7		      lda	#>bmp_48x2_1_00
     34  25be		       85 c6		      sta	scorepointers+1
     35  25c0
     36  25c0
     37  25c0		       a9 68		      lda	#<bmp_48x2_1_01
     38  25c2		       18		      clc
     39  25c3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     40  25c5				  -	      ifconst	bmp_48x2_1_index
     41  25c5				  -	      sec
     42  25c5				  -	      sbc	bmp_48x2_1_index
     43  25c5					      endif
     44  25c5		       85 c7		      sta	scorepointers+2
     45  25c7		       a9 f7		      lda	#>bmp_48x2_1_01
     46  25c9		       85 c8		      sta	scorepointers+3
     47  25cb
     48  25cb
     49  25cb		       a9 80		      lda	#<bmp_48x2_1_02
     50  25cd		       18		      clc
     51  25ce		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     52  25d0				  -	      ifconst	bmp_48x2_1_index
     53  25d0				  -	      sec
     54  25d0				  -	      sbc	bmp_48x2_1_index
     55  25d0					      endif
     56  25d0		       85 c9		      sta	scorepointers+4
     57  25d2		       a9 f7		      lda	#>bmp_48x2_1_02
     58  25d4		       85 ca		      sta	scorepointers+5
     59  25d6
     60  25d6
     61  25d6		       a9 98		      lda	#<bmp_48x2_1_03
     62  25d8		       18		      clc
     63  25d9		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     64  25db				  -	      ifconst	bmp_48x2_1_index
     65  25db				  -	      sec
     66  25db				  -	      sbc	bmp_48x2_1_index
     67  25db					      endif
     68  25db		       85 cb		      sta	scorepointers+6
     69  25dd		       a9 f7		      lda	#>bmp_48x2_1_03
     70  25df		       85 cc		      sta	scorepointers+7
     71  25e1
     72  25e1
     73  25e1		       a9 b0		      lda	#<bmp_48x2_1_04
     74  25e3		       18		      clc
     75  25e4		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     76  25e6				  -	      ifconst	bmp_48x2_1_index
     77  25e6				  -	      sec
     78  25e6				  -	      sbc	bmp_48x2_1_index
     79  25e6					      endif
     80  25e6		       85 cd		      sta	scorepointers+8
     81  25e8		       a9 f7		      lda	#>bmp_48x2_1_04
     82  25ea		       85 ce		      sta	scorepointers+9
     83  25ec
     84  25ec
     85  25ec		       a9 c8		      lda	#<bmp_48x2_1_05
     86  25ee		       18		      clc
     87  25ef		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     88  25f1				  -	      ifconst	bmp_48x2_1_index
     89  25f1				  -	      sec
     90  25f1				  -	      sbc	bmp_48x2_1_index
     91  25f1					      endif
     92  25f1		       85 cf		      sta	scorepointers+10
     93  25f3		       a9 f7		      lda	#>bmp_48x2_1_05
     94  25f5		       85 d0		      sta	scorepointers+11
     95  25f7
     96  25f7		       a9 00		      lda	#0	;two line kernel
     97  25f9		       85 bf		      sta	aux3
     98  25fb
     99  25fb		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  25fe
------- FILE titlescreen/asm/titlescreen.asm
     88  25fe					      endif		;mk_48x2_1_on
     89  25fe
     90  25fe					      ifconst	mk_48x2_2_on
------- FILE titlescreen/asm/48x2_2_kernel.asm LEVEL 3 PASS 3
      0  25fe					      include	"titlescreen/asm/48x2_2_kernel.asm"
      1  25fe
      2  25fe				   draw_bmp_48x2_2
      3  25fe
      4  25fe		       a0 2f		      ldy	#(bmp_48x2_2_window-1)
      5  2600
      6  2600		       a9 00		      lda	#<(bmp_48x2_2_colors-1)
      7  2602		       18		      clc
      8  2603		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
      9  2605				  -	      ifconst	bmp_48x2_2_index
     10  2605				  -	      sec
     11  2605				  -	      sbc	bmp_48x2_2_index
     12  2605					      endif
     13  2605		       85 c1		      sta	aux5+0
     14  2607		       a9 f8		      lda	#>(bmp_48x2_2_colors-1)
     15  2609		       85 c2		      sta	aux5+1
     16  260b
     17  260b		       c8		      iny
     18  260c		       b1 c1		      lda	(aux5),y
     19  260e		       88		      dey
     20  260f		       85 06		      sta	COLUP0	;3
     21  2611		       85 07		      sta	COLUP1	;3
     22  2613		       85 2b		      sta	HMCLR	;3
     23  2615
     24  2615							;setup score pointers to point at my bitmap slices instead
     25  2615		       a9 31		      lda	#<bmp_48x2_2_00
     26  2617		       18		      clc
     27  2618		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     28  261a				  -	      ifconst	bmp_48x2_2_index
     29  261a				  -	      sec
     30  261a				  -	      sbc	bmp_48x2_2_index
     31  261a					      endif
     32  261a		       85 c5		      sta	scorepointers+0
     33  261c		       a9 f8		      lda	#>bmp_48x2_2_00
     34  261e		       85 c6		      sta	scorepointers+1
     35  2620
     36  2620
     37  2620		       a9 61		      lda	#<bmp_48x2_2_01
     38  2622		       18		      clc
     39  2623		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     40  2625				  -	      ifconst	bmp_48x2_2_index
     41  2625				  -	      sec
     42  2625				  -	      sbc	bmp_48x2_2_index
     43  2625					      endif
     44  2625		       85 c7		      sta	scorepointers+2
     45  2627		       a9 f8		      lda	#>bmp_48x2_2_01
     46  2629		       85 c8		      sta	scorepointers+3
     47  262b
     48  262b
     49  262b		       a9 91		      lda	#<bmp_48x2_2_02
     50  262d		       18		      clc
     51  262e		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     52  2630				  -	      ifconst	bmp_48x2_2_index
     53  2630				  -	      sec
     54  2630				  -	      sbc	bmp_48x2_2_index
     55  2630					      endif
     56  2630		       85 c9		      sta	scorepointers+4
     57  2632		       a9 f8		      lda	#>bmp_48x2_2_02
     58  2634		       85 ca		      sta	scorepointers+5
     59  2636
     60  2636
     61  2636		       a9 c1		      lda	#<bmp_48x2_2_03
     62  2638		       18		      clc
     63  2639		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     64  263b				  -	      ifconst	bmp_48x2_2_index
     65  263b				  -	      sec
     66  263b				  -	      sbc	bmp_48x2_2_index
     67  263b					      endif
     68  263b		       85 cb		      sta	scorepointers+6
     69  263d		       a9 f8		      lda	#>bmp_48x2_2_03
     70  263f		       85 cc		      sta	scorepointers+7
     71  2641
     72  2641
     73  2641		       a9 00		      lda	#<bmp_48x2_2_04
     74  2643		       18		      clc
     75  2644		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     76  2646				  -	      ifconst	bmp_48x2_2_index
     77  2646				  -	      sec
     78  2646				  -	      sbc	bmp_48x2_2_index
     79  2646					      endif
     80  2646		       85 cd		      sta	scorepointers+8
     81  2648		       a9 f9		      lda	#>bmp_48x2_2_04
     82  264a		       85 ce		      sta	scorepointers+9
     83  264c
     84  264c
     85  264c		       a9 30		      lda	#<bmp_48x2_2_05
     86  264e		       18		      clc
     87  264f		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     88  2651				  -	      ifconst	bmp_48x2_2_index
     89  2651				  -	      sec
     90  2651				  -	      sbc	bmp_48x2_2_index
     91  2651					      endif
     92  2651		       85 cf		      sta	scorepointers+10
     93  2653		       a9 f9		      lda	#>bmp_48x2_2_05
     94  2655		       85 d0		      sta	scorepointers+11
     95  2657
     96  2657		       a9 00		      lda	#0	;two line kernel
     97  2659		       85 bf		      sta	aux3
     98  265b
     99  265b		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  265e
------- FILE titlescreen/asm/titlescreen.asm
     92  265e					      endif		;mk_48x2_2_on
     93  265e
     94  265e				  -	      ifconst	mk_48x2_3_on
     95  265e				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  265e					      endif		;mk_48x2_3_on
     97  265e
     98  265e				  -	      ifconst	mk_96x2_1_on
     99  265e				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    100  265e					      endif		;mk_96x2_1_on
    101  265e
    102  265e				  -	      ifconst	mk_96x2_2_on
    103  265e				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  265e					      endif		;mk_96x2_2_on
    105  265e
    106  265e				  -	      ifconst	mk_96x2_3_on
    107  265e				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  265e					      endif		;mk_96x2_3_on
    109  265e
    110  265e					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  265e					      include	"titlescreen/asm/score_kernel.asm"
      1  265e							; The batari Basic score kernel
      2  265e							; This minikernel is not under the same license as the rest of the 
      3  265e							; titlescreen code. Refer to the bB license before you use this in
      4  265e							; a non-bB program.
      5  265e
      6  265e				   draw_score_display
      7  265e
      8  265e		       a7 d4		      lax	score+2
      9  2660		       20 14 f7 	      jsr	miniscorepointerset
     10  2663		       84 ca		      sty	scorepointers+5
     11  2665		       86 c7		      stx	scorepointers+2
     12  2667		       a7 d3		      lax	score+1
     13  2669		       20 14 f7 	      jsr	miniscorepointerset
     14  266c		       84 c9		      sty	scorepointers+4
     15  266e		       86 c6		      stx	scorepointers+1
     16  2670		       a7 d2		      lax	score
     17  2672		       20 14 f7 	      jsr	miniscorepointerset
     18  2675		       84 c8		      sty	scorepointers+3
     19  2677		       86 c5		      stx	scorepointers
     20  2679
     21  2679		       a5 c6		      lda	scorepointers+1
     22  267b		       85 cb		      sta	temp1
     23  267d
     24  267d		       a5 c8		      lda	scorepointers+3
     25  267f		       85 cd		      sta	temp3
     26  2681
     27  2681
     28  2681		       85 2b		      sta	HMCLR
     29  2683		       ba		      tsx
     30  2684		       86 f6		      stx	stack1
     31  2686							;ldx #$10
     32  2686		       a2 20		      ldx	#$20
     33  2688		       86 20		      stx	HMP0
     34  268a
     35  268a		       a2 00		      ldx	#0
     36  268c		       85 02		      sta	WSYNC
     37  268e		       86 1b		      STx	GRP0
     38  2690		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  2692
     40  2692		       a5 ca		      lda	scorepointers+5
     41  2694		       95 cf		      sta	temp5,x
     42  2696		       a9 f9		      lda	#>miniscoretable
     43  2698		       85 c6		      sta	scorepointers+1
     44  269a		       85 c8		      sta	scorepointers+3
     45  269c		       95 ca		      sta	scorepointers+5,x
     46  269e		       95 cc		      sta	temp2,x
     47  26a0		       95 ce		      sta	temp4,x
     48  26a2		       95 d0		      sta	temp6,x
     49  26a4
     50  26a4
     51  26a4		       a0 07		      LDY	#7
     52  26a6		       85 10		      STA	RESP0
     53  26a8		       85 11		      STA	RESP1
     54  26aa
     55  26aa
     56  26aa		       a9 03		      LDA	#$03
     57  26ac		       85 04		      STA	NUSIZ0
     58  26ae		       95 05		      STA	NUSIZ1,x
     59  26b0		       85 25		      STA	VDELP0
     60  26b2		       85 26		      STA	VDELP1
     61  26b4							;LDA #$20
     62  26b4		       a9 30		      LDA	#$30
     63  26b6		       85 21		      STA	HMP1
     64  26b8		       a5 d5		      LDA	scorecolor
     65  26ba		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  26bc				  -	      ifconst	score_kernel_fade
     67  26bc				  -	      and	score_kernel_fade
     68  26bc					      endif
     69  26bc
     70  26bc		       85 06		      STA	COLUP0
     71  26be		       85 07		      STA	COLUP1
     72  26c0				  -	      ifconst	scorefade
     73  26c0				  -	      STA	stack2	; scorefade
     74  26c0					      endif
     75  26c0		       b1 c5		      lda	(scorepointers),y
     76  26c2		       85 1b		      sta	GRP0
     77  26c4		       b1 cd		      lda	(scorepointers+8),y
     78  26c6		       85 02		      sta	WSYNC
      0  26c8					      sleep	2
      1  26c8				   .CYCLES    SET	2
      2  26c8
      3  26c8				  -	      IF	.CYCLES < 2
      4  26c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26c8				  -	      ERR
      6  26c8					      ENDIF
      7  26c8
      8  26c8				  -	      IF	.CYCLES & 1
      9  26c8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26c8				  -	      nop	0
     11  26c8				  -	      ELSE
     12  26c8				  -	      bit	VSYNC
     13  26c8				  -	      ENDIF
     14  26c8				  -.CYCLES    SET	.CYCLES - 3
     15  26c8					      ENDIF
     16  26c8
     17  26c8					      REPEAT	.CYCLES / 2
     18  26c8		       ea		      nop
     19  26c9					      REPEND
     80  26c9		       4c d7 f6 	      jmp	beginscoreloop
     81  26cc
     82  26cc				  -	      if	((<*)>$d4)
     83  26cc				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  26cc					      endif
     85  26cc
     86  26cc				   scoreloop2
     87  26cc				  -	      ifconst	scorefade
     88  26cc				  -	      lda	stack2
     89  26cc				  -	      sta	COLUP0
     90  26cc				  -	      sta	COLUP1
     91  26cc					      else
      0  26cc					      sleep	9
      1  26cc				   .CYCLES    SET	9
      2  26cc
      3  26cc				  -	      IF	.CYCLES < 2
      4  26cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26cc				  -	      ERR
      6  26cc					      ENDIF
      7  26cc
      8  26cc					      IF	.CYCLES & 1
      9  26cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26cc		       04 00		      nop	0
     11  26ce				  -	      ELSE
     12  26ce				  -	      bit	VSYNC
     13  26ce					      ENDIF
     14  26ce				   .CYCLES    SET	.CYCLES - 3
     15  26ce					      ENDIF
     16  26ce
     17  26ce					      REPEAT	.CYCLES / 2
     18  26ce		       ea		      nop
     17  26ce					      REPEND
     18  26cf		       ea		      nop
     17  26cf					      REPEND
     18  26d0		       ea		      nop
     19  26d1					      REPEND
     93  26d1					      endif
     94  26d1		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  26d3		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  26d5		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  26d7							; cycle 0
     98  26d7				   beginscoreloop
     99  26d7		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  26d9		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  26db		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  26dd		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  26df		       9a		      txs
    104  26e0		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  26e2
    106  26e2				  -	      ifconst	scorefade
    107  26e2				  -	      dec	stack2
    108  26e2					      else
      0  26e2					      sleep	5
      1  26e2				   .CYCLES    SET	5
      2  26e2
      3  26e2				  -	      IF	.CYCLES < 2
      4  26e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e2				  -	      ERR
      6  26e2					      ENDIF
      7  26e2
      8  26e2					      IF	.CYCLES & 1
      9  26e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e2		       04 00		      nop	0
     11  26e4				  -	      ELSE
     12  26e4				  -	      bit	VSYNC
     13  26e4					      ENDIF
     14  26e4				   .CYCLES    SET	.CYCLES - 3
     15  26e4					      ENDIF
     16  26e4
     17  26e4					      REPEAT	.CYCLES / 2
     18  26e4		       ea		      nop
     19  26e5					      REPEND
    110  26e5					      endif
      0  26e5					      sleep	2
      1  26e5				   .CYCLES    SET	2
      2  26e5
      3  26e5				  -	      IF	.CYCLES < 2
      4  26e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e5				  -	      ERR
      6  26e5					      ENDIF
      7  26e5
      8  26e5				  -	      IF	.CYCLES & 1
      9  26e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e5				  -	      nop	0
     11  26e5				  -	      ELSE
     12  26e5				  -	      bit	VSYNC
     13  26e5				  -	      ENDIF
     14  26e5				  -.CYCLES    SET	.CYCLES - 3
     15  26e5					      ENDIF
     16  26e5
     17  26e5					      REPEAT	.CYCLES / 2
     18  26e5		       ea		      nop
     19  26e6					      REPEND
    112  26e6
    113  26e6		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  26e8		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  26ea		       ba		      tsx
    116  26eb		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  26ed		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  26ef
    119  26ef		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  26f1		       88		      dey
    121  26f2		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  26f4
    123  26f4
    124  26f4		       a6 f6		      ldx	stack1
    125  26f6		       9a		      txs
    126  26f7		       a4 cb		      ldy	temp1
    127  26f9		       84 c6		      sty	scorepointers+1
    128  26fb
    129  26fb		       a9 00		      LDA	#0
    130  26fd		       85 0e		      sta	PF1
    131  26ff		       85 1b		      STA	GRP0
    132  2701		       85 1c		      STA	GRP1
    133  2703		       85 25		      STA	VDELP0
    134  2705		       85 26		      STA	VDELP1
    135  2707		       85 04		      STA	NUSIZ0
    136  2709		       85 05		      STA	NUSIZ1
    137  270b
    138  270b		       a4 cd		      ldy	temp3
    139  270d		       84 c8		      sty	scorepointers+3
    140  270f
    141  270f		       a4 cf		      ldy	temp5
    142  2711		       84 ca		      sty	scorepointers+5
    143  2713		       60		      rts
    144  2714
    145  2714				   miniscorepointerset
    146  2714		       29 0f		      and	#$0F
    147  2716		       0a		      asl
    148  2717		       0a		      asl
    149  2718		       0a		      asl
    150  2719		       69 60		      adc	#<miniscoretable
    151  271b		       a8		      tay
    152  271c		       8a		      txa
    153  271d		       29 f0		      and	#$F0
    154  271f		       4a		      lsr
    155  2720		       69 60		      adc	#<miniscoretable
    156  2722		       aa		      tax
    157  2723		       60		      rts
    158  2724
------- FILE titlescreen/asm/titlescreen.asm
    112  2724					      endif		;mk_score_on
    113  2724
    114  2724				  -	      ifconst	mk_gameselect_on
    115  2724				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2724					      endif		;mk_gameselect_on
    117  2724
    118  2724				   PFWAIT
    119  2724		       ad 84 02 	      lda	INTIM
    120  2727		       d0 fb		      bne	PFWAIT
    121  2729
    122  2729				   OVERSCAN
    123  2729							;lda #35+128 
    124  2729
    125  2729					      ifnconst	overscan_time
    126  2729		       a9 a3		      lda	#35+128
    127  272b				  -	      else
    128  272b				  -	      lda	#overscan_time+128-3-1
    129  272b					      endif
    130  272b
    131  272b
    132  272b		       8d 96 02 	      sta	TIM64T
    133  272e		       a9 c2		      lda	#%11000010
    134  2730		       85 02		      sta	WSYNC
    135  2732		       85 01		      sta	VBLANK
      0  2734					      RETURN
      1  2734				  -	      ifnconst	bankswitch
      2  2734				  -	      rts
      3  2734					      else
      4  2734		       4c dd ff 	      jmp	BS_return
      5  2737					      endif
    137  2737
    138  2737				  -	      ifconst	mk_48x1_1_on
    139  2737				  -	      include	"titlescreen/48x1_1_image.asm"
    140  2737					      endif
    141  2737				  -	      ifconst	mk_48x1_2_on
    142  2737				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2737					      endif
    144  2737				  -	      ifconst	mk_48x1_3_on
    145  2737				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2737					      endif
    147  2737
    148  2737					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2737					      include	"titlescreen/48x2_1_image.asm"
      1  2737
      2  2737							;*** The height of the displayed data...
      3  2737		       00 18	   bmp_48x2_1_window =	24
      4  2737
      5  2737							;*** The height of the bitmap data. This can be larger than
      6  2737							;*** the displayed data height, if you are scrolling or animating
      7  2737							;*** the data...
      8  2737		       00 18	   bmp_48x2_1_height =	24
      9  2737
     10  2737				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2737				  -	      align	256
     12  2737					      endif
     13  2737		       00		      BYTE.b	$00	; leave this here!
     14  2738
     15  2738
     16  2738							;*** this is the color of each line in the bitmap data
     17  2738				   bmp_48x2_1_colors
     18  2738		       40		      BYTE.b	$40
     19  2739		       40		      BYTE.b	$40
     20  273a		       40		      BYTE.b	$40
     21  273b		       40		      BYTE.b	$40
     22  273c		       1f		      BYTE.b	$1f
     23  273d		       1f		      BYTE.b	$1f
     24  273e		       1f		      BYTE.b	$1f
     25  273f		       1f		      BYTE.b	$1f
     26  2740		       1f		      BYTE.b	$1f
     27  2741		       1f		      BYTE.b	$1f
     28  2742		       1f		      BYTE.b	$1f
     29  2743		       1f		      BYTE.b	$1f
     30  2744		       1f		      BYTE.b	$1f
     31  2745		       1f		      BYTE.b	$1f
     32  2746		       1f		      BYTE.b	$1f
     33  2747		       1f		      BYTE.b	$1f
     34  2748		       1f		      BYTE.b	$1f
     35  2749		       1f		      BYTE.b	$1f
     36  274a		       1f		      BYTE.b	$1f
     37  274b		       1f		      BYTE.b	$1f
     38  274c		       1f		      BYTE.b	$1f
     39  274d		       1f		      BYTE.b	$1f
     40  274e		       1f		      BYTE.b	$1f
     41  274f		       1f		      BYTE.b	$1f
     42  2750
     43  2750				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     44  2750				  -	      align	256
     45  2750					      endif
     46  2750
     47  2750				   bmp_48x2_1_00
     48  2750
     49  2750		       00		      BYTE.b	%00000000
     50  2751		       00		      BYTE.b	%00000000
     51  2752		       00		      BYTE.b	%00000000
     52  2753		       7f		      BYTE.b	%01111111
     53  2754		       00		      BYTE.b	%00000000
     54  2755		       79		      BYTE.b	%01111001
     55  2756		       1d		      BYTE.b	%00011101
     56  2757		       1d		      BYTE.b	%00011101
     57  2758		       79		      BYTE.b	%01111001
     58  2759		       41		      BYTE.b	%01000001
     59  275a		       78		      BYTE.b	%01111000
     60  275b		       00		      BYTE.b	%00000000
     61  275c		       00		      BYTE.b	%00000000
     62  275d		       00		      BYTE.b	%00000000
     63  275e		       00		      BYTE.b	%00000000
     64  275f		       00		      BYTE.b	%00000000
     65  2760		       00		      BYTE.b	%00000000
     66  2761		       00		      BYTE.b	%00000000
     67  2762		       01		      BYTE.b	%00000001
     68  2763		       03		      BYTE.b	%00000011
     69  2764		       07		      BYTE.b	%00000111
     70  2765		       00		      BYTE.b	%00000000
     71  2766		       00		      BYTE.b	%00000000
     72  2767		       00		      BYTE.b	%00000000
     73  2768
     74  2768				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2768				  -	      align	256
     76  2768					      endif
     77  2768
     78  2768				   bmp_48x2_1_01
     79  2768
     80  2768		       00		      BYTE.b	%00000000
     81  2769		       00		      BYTE.b	%00000000
     82  276a		       00		      BYTE.b	%00000000
     83  276b		       ff		      BYTE.b	%11111111
     84  276c		       00		      BYTE.b	%00000000
     85  276d		       30		      BYTE.b	%00110000
     86  276e		       31		      BYTE.b	%00110001
     87  276f		       f2		      BYTE.b	%11110010
     88  2770		       32		      BYTE.b	%00110010
     89  2771		       32		      BYTE.b	%00110010
     90  2772		       e2		      BYTE.b	%11100010
     91  2773		       00		      BYTE.b	%00000000
     92  2774		       00		      BYTE.b	%00000000
     93  2775		       00		      BYTE.b	%00000000
     94  2776		       11		      BYTE.b	%00010001
     95  2777		       32		      BYTE.b	%00110010
     96  2778		       70		      BYTE.b	%01110000
     97  2779		       f1		      BYTE.b	%11110001
     98  277a		       f3		      BYTE.b	%11110011
     99  277b		       f3		      BYTE.b	%11110011
    100  277c		       f1		      BYTE.b	%11110001
    101  277d		       00		      BYTE.b	%00000000
    102  277e		       00		      BYTE.b	%00000000
    103  277f		       00		      BYTE.b	%00000000
    104  2780
    105  2780				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    106  2780				  -	      align	256
    107  2780					      endif
    108  2780
    109  2780				   bmp_48x2_1_02
    110  2780
    111  2780		       00		      BYTE.b	%00000000
    112  2781		       00		      BYTE.b	%00000000
    113  2782		       00		      BYTE.b	%00000000
    114  2783		       ff		      BYTE.b	%11111111
    115  2784		       00		      BYTE.b	%00000000
    116  2785		       87		      BYTE.b	%10000111
    117  2786		       c3		      BYTE.b	%11000011
    118  2787		       63		      BYTE.b	%01100011
    119  2788		       63		      BYTE.b	%01100011
    120  2789		       63		      BYTE.b	%01100011
    121  278a		       67		      BYTE.b	%01100111
    122  278b		       00		      BYTE.b	%00000000
    123  278c		       00		      BYTE.b	%00000000
    124  278d		       00		      BYTE.b	%00000000
    125  278e		       c4		      BYTE.b	%11000100
    126  278f		       e5		      BYTE.b	%11100101
    127  2790		       e7		      BYTE.b	%11100111
    128  2791		       c7		      BYTE.b	%11000111
    129  2792		       05		      BYTE.b	%00000101
    130  2793		       05		      BYTE.b	%00000101
    131  2794		       c4		      BYTE.b	%11000100
    132  2795		       00		      BYTE.b	%00000000
    133  2796		       00		      BYTE.b	%00000000
    134  2797		       00		      BYTE.b	%00000000
    135  2798
    136  2798				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    137  2798				  -	      align	256
    138  2798					      endif
    139  2798
    140  2798				   bmp_48x2_1_03
    141  2798
    142  2798		       00		      BYTE.b	%00000000
    143  2799		       00		      BYTE.b	%00000000
    144  279a		       00		      BYTE.b	%00000000
    145  279b		       ff		      BYTE.b	%11111111
    146  279c		       00		      BYTE.b	%00000000
    147  279d		       8f		      BYTE.b	%10001111
    148  279e		       19		      BYTE.b	%00011001
    149  279f		       19		      BYTE.b	%00011001
    150  27a0		       19		      BYTE.b	%00011001
    151  27a1		       19		      BYTE.b	%00011001
    152  27a2		       8f		      BYTE.b	%10001111
    153  27a3		       00		      BYTE.b	%00000000
    154  27a4		       00		      BYTE.b	%00000000
    155  27a5		       00		      BYTE.b	%00000000
    156  27a6		       c6		      BYTE.b	%11000110
    157  27a7		       86		      BYTE.b	%10000110
    158  27a8		       06		      BYTE.b	%00000110
    159  27a9		       0f		      BYTE.b	%00001111
    160  27aa		       99		      BYTE.b	%10011001
    161  27ab		       99		      BYTE.b	%10011001
    162  27ac		       d9		      BYTE.b	%11011001
    163  27ad		       00		      BYTE.b	%00000000
    164  27ae		       00		      BYTE.b	%00000000
    165  27af		       00		      BYTE.b	%00000000
    166  27b0
    167  27b0				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  27b0				  -	      align	256
    169  27b0					      endif
    170  27b0
    171  27b0				   bmp_48x2_1_04
    172  27b0
    173  27b0		       00		      BYTE.b	%00000000
    174  27b1		       00		      BYTE.b	%00000000
    175  27b2		       00		      BYTE.b	%00000000
    176  27b3		       ff		      BYTE.b	%11111111
    177  27b4		       00		      BYTE.b	%00000000
    178  27b5		       1c		      BYTE.b	%00011100
    179  27b6		       26		      BYTE.b	%00100110
    180  27b7		       26		      BYTE.b	%00100110
    181  27b8		       26		      BYTE.b	%00100110
    182  27b9		       26		      BYTE.b	%00100110
    183  27ba		       26		      BYTE.b	%00100110
    184  27bb		       00		      BYTE.b	%00000000
    185  27bc		       00		      BYTE.b	%00000000
    186  27bd		       00		      BYTE.b	%00000000
    187  27be		       20		      BYTE.b	%00100000
    188  27bf		       30		      BYTE.b	%00110000
    189  27c0		       38		      BYTE.b	%00111000
    190  27c1		       3c		      BYTE.b	%00111100
    191  27c2		       3e		      BYTE.b	%00111110
    192  27c3		       3f		      BYTE.b	%00111111
    193  27c4		       3f		      BYTE.b	%00111111
    194  27c5		       00		      BYTE.b	%00000000
    195  27c6		       00		      BYTE.b	%00000000
    196  27c7		       00		      BYTE.b	%00000000
    197  27c8
    198  27c8				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    199  27c8				  -	      align	256
    200  27c8					      endif
    201  27c8
    202  27c8				   bmp_48x2_1_05
    203  27c8
    204  27c8		       00		      BYTE.b	%00000000
    205  27c9		       00		      BYTE.b	%00000000
    206  27ca		       00		      BYTE.b	%00000000
    207  27cb		       fc		      BYTE.b	%11111100
    208  27cc		       00		      BYTE.b	%00000000
    209  27cd		       4c		      BYTE.b	%01001100
    210  27ce		       50		      BYTE.b	%01010000
    211  27cf		       78		      BYTE.b	%01111000
    212  27d0		       4c		      BYTE.b	%01001100
    213  27d1		       4c		      BYTE.b	%01001100
    214  27d2		       78		      BYTE.b	%01111000
    215  27d3		       00		      BYTE.b	%00000000
    216  27d4		       00		      BYTE.b	%00000000
    217  27d5		       00		      BYTE.b	%00000000
    218  27d6		       00		      BYTE.b	%00000000
    219  27d7		       00		      BYTE.b	%00000000
    220  27d8		       00		      BYTE.b	%00000000
    221  27d9		       00		      BYTE.b	%00000000
    222  27da		       00		      BYTE.b	%00000000
    223  27db		       00		      BYTE.b	%00000000
    224  27dc		       80		      BYTE.b	%10000000
    225  27dd		       00		      BYTE.b	%00000000
    226  27de		       00		      BYTE.b	%00000000
    227  27df		       00		      BYTE.b	%00000000
    228  27e0
------- FILE titlescreen/asm/titlescreen.asm
    150  27e0					      endif
    151  27e0					      ifconst	mk_48x2_2_on
------- FILE titlescreen/48x2_2_image.asm LEVEL 3 PASS 3
      0  27e0					      include	"titlescreen/48x2_2_image.asm"
      1  27e0
      2  27e0							;*** The height of the displayed data...
      3  27e0		       00 30	   bmp_48x2_2_window =	48
      4  27e0
      5  27e0							;*** The height of the bitmap data. This can be larger than
      6  27e0							;*** the displayed data height, if you are scrolling or animating
      7  27e0							;*** the data...
      8  27e0		       00 30	   bmp_48x2_2_height =	48
      9  27e0
     10  27e0					      if	>. != >[.+(bmp_48x2_2_height)]
     11  2800		       00 00 00 00*	      align	256
     12  2800					      endif
     13  2800		       00		      BYTE.b	$00	; leave this here!
     14  2801
     15  2801
     16  2801							;*** this is the color of each line in the bitmap data
     17  2801				   bmp_48x2_2_colors
     18  2801		       10		      BYTE.b	$10
     19  2802		       10		      BYTE.b	$10
     20  2803		       10		      BYTE.b	$10
     21  2804		       10		      BYTE.b	$10
     22  2805		       10		      BYTE.b	$10
     23  2806		       10		      BYTE.b	$10
     24  2807		       10		      BYTE.b	$10
     25  2808		       10		      BYTE.b	$10
     26  2809		       10		      BYTE.b	$10
     27  280a		       10		      BYTE.b	$10
     28  280b		       10		      BYTE.b	$10
     29  280c		       10		      BYTE.b	$10
     30  280d		       10		      BYTE.b	$10
     31  280e		       10		      BYTE.b	$10
     32  280f		       10		      BYTE.b	$10
     33  2810		       10		      BYTE.b	$10
     34  2811		       10		      BYTE.b	$10
     35  2812		       10		      BYTE.b	$10
     36  2813		       10		      BYTE.b	$10
     37  2814		       0c		      BYTE.b	$0c
     38  2815		       0c		      BYTE.b	$0c
     39  2816		       0c		      BYTE.b	$0c
     40  2817		       0c		      BYTE.b	$0c
     41  2818		       0c		      BYTE.b	$0c
     42  2819		       0c		      BYTE.b	$0c
     43  281a		       0c		      BYTE.b	$0c
     44  281b		       0c		      BYTE.b	$0c
     45  281c		       0c		      BYTE.b	$0c
     46  281d		       0c		      BYTE.b	$0c
     47  281e		       0c		      BYTE.b	$0c
     48  281f		       0c		      BYTE.b	$0c
     49  2820		       0c		      BYTE.b	$0c
     50  2821		       0c		      BYTE.b	$0c
     51  2822		       0c		      BYTE.b	$0c
     52  2823		       0c		      BYTE.b	$0c
     53  2824		       0c		      BYTE.b	$0c
     54  2825		       0c		      BYTE.b	$0c
     55  2826		       0c		      BYTE.b	$0c
     56  2827		       0c		      BYTE.b	$0c
     57  2828		       0c		      BYTE.b	$0c
     58  2829		       0c		      BYTE.b	$0c
     59  282a		       0c		      BYTE.b	$0c
     60  282b		       0c		      BYTE.b	$0c
     61  282c		       0c		      BYTE.b	$0c
     62  282d		       0c		      BYTE.b	$0c
     63  282e		       0c		      BYTE.b	$0c
     64  282f		       0c		      BYTE.b	$0c
     65  2830		       0c		      BYTE.b	$0c
     66  2831
     67  2831				  -	      if	>. != >[.+(bmp_48x2_2_height)]
     68  2831				  -	      align	256
     69  2831					      endif
     70  2831
     71  2831				   bmp_48x2_2_00
     72  2831
     73  2831		       80		      BYTE.b	%10000000
     74  2832		       ee		      BYTE.b	%11101110
     75  2833		       ee		      BYTE.b	%11101110
     76  2834		       80		      BYTE.b	%10000000
     77  2835		       ee		      BYTE.b	%11101110
     78  2836		       ee		      BYTE.b	%11101110
     79  2837		       80		      BYTE.b	%10000000
     80  2838		       ee		      BYTE.b	%11101110
     81  2839		       ee		      BYTE.b	%11101110
     82  283a		       80		      BYTE.b	%10000000
     83  283b		       80		      BYTE.b	%10000000
     84  283c		       ee		      BYTE.b	%11101110
     85  283d		       ee		      BYTE.b	%11101110
     86  283e		       80		      BYTE.b	%10000000
     87  283f		       ee		      BYTE.b	%11101110
     88  2840		       ee		      BYTE.b	%11101110
     89  2841		       ff		      BYTE.b	%11111111
     90  2842		       00		      BYTE.b	%00000000
     91  2843		       00		      BYTE.b	%00000000
     92  2844		       00		      BYTE.b	%00000000
     93  2845		       00		      BYTE.b	%00000000
     94  2846		       00		      BYTE.b	%00000000
     95  2847		       00		      BYTE.b	%00000000
     96  2848		       00		      BYTE.b	%00000000
     97  2849		       00		      BYTE.b	%00000000
     98  284a		       04		      BYTE.b	%00000100
     99  284b		       00		      BYTE.b	%00000000
    100  284c		       00		      BYTE.b	%00000000
    101  284d		       00		      BYTE.b	%00000000
    102  284e		       00		      BYTE.b	%00000000
    103  284f		       00		      BYTE.b	%00000000
    104  2850		       00		      BYTE.b	%00000000
    105  2851		       00		      BYTE.b	%00000000
    106  2852		       00		      BYTE.b	%00000000
    107  2853		       00		      BYTE.b	%00000000
    108  2854		       00		      BYTE.b	%00000000
    109  2855		       00		      BYTE.b	%00000000
    110  2856		       00		      BYTE.b	%00000000
    111  2857		       00		      BYTE.b	%00000000
    112  2858		       00		      BYTE.b	%00000000
    113  2859		       00		      BYTE.b	%00000000
    114  285a		       00		      BYTE.b	%00000000
    115  285b		       00		      BYTE.b	%00000000
    116  285c		       10		      BYTE.b	%00010000
    117  285d		       00		      BYTE.b	%00000000
    118  285e		       00		      BYTE.b	%00000000
    119  285f		       00		      BYTE.b	%00000000
    120  2860		       00		      BYTE.b	%00000000
    121  2861
    122  2861				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    123  2861				  -	      align	256
    124  2861					      endif
    125  2861
    126  2861				   bmp_48x2_2_01
    127  2861
    128  2861		       3a		      BYTE.b	%00111010
    129  2862		       e0		      BYTE.b	%11100000
    130  2863		       e0		      BYTE.b	%11100000
    131  2864		       3a		      BYTE.b	%00111010
    132  2865		       ff		      BYTE.b	%11111111
    133  2866		       e0		      BYTE.b	%11100000
    134  2867		       20		      BYTE.b	%00100000
    135  2868		       e0		      BYTE.b	%11100000
    136  2869		       e0		      BYTE.b	%11100000
    137  286a		       20		      BYTE.b	%00100000
    138  286b		       20		      BYTE.b	%00100000
    139  286c		       e0		      BYTE.b	%11100000
    140  286d		       e0		      BYTE.b	%11100000
    141  286e		       20		      BYTE.b	%00100000
    142  286f		       e0		      BYTE.b	%11100000
    143  2870		       e0		      BYTE.b	%11100000
    144  2871		       e0		      BYTE.b	%11100000
    145  2872		       00		      BYTE.b	%00000000
    146  2873		       00		      BYTE.b	%00000000
    147  2874		       00		      BYTE.b	%00000000
    148  2875		       00		      BYTE.b	%00000000
    149  2876		       00		      BYTE.b	%00000000
    150  2877		       00		      BYTE.b	%00000000
    151  2878		       00		      BYTE.b	%00000000
    152  2879		       00		      BYTE.b	%00000000
    153  287a		       00		      BYTE.b	%00000000
    154  287b		       00		      BYTE.b	%00000000
    155  287c		       00		      BYTE.b	%00000000
    156  287d		       00		      BYTE.b	%00000000
    157  287e		       00		      BYTE.b	%00000000
    158  287f		       00		      BYTE.b	%00000000
    159  2880		       00		      BYTE.b	%00000000
    160  2881		       00		      BYTE.b	%00000000
    161  2882		       00		      BYTE.b	%00000000
    162  2883		       00		      BYTE.b	%00000000
    163  2884		       00		      BYTE.b	%00000000
    164  2885		       00		      BYTE.b	%00000000
    165  2886		       00		      BYTE.b	%00000000
    166  2887		       00		      BYTE.b	%00000000
    167  2888		       08		      BYTE.b	%00001000
    168  2889		       00		      BYTE.b	%00000000
    169  288a		       00		      BYTE.b	%00000000
    170  288b		       00		      BYTE.b	%00000000
    171  288c		       00		      BYTE.b	%00000000
    172  288d		       00		      BYTE.b	%00000000
    173  288e		       00		      BYTE.b	%00000000
    174  288f		       00		      BYTE.b	%00000000
    175  2890		       00		      BYTE.b	%00000000
    176  2891
    177  2891				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    178  2891				  -	      align	256
    179  2891					      endif
    180  2891
    181  2891				   bmp_48x2_2_02
    182  2891
    183  2891		       fb		      BYTE.b	%11111011
    184  2892		       3b		      BYTE.b	%00111011
    185  2893		       3b		      BYTE.b	%00111011
    186  2894		       fb		      BYTE.b	%11111011
    187  2895		       f1		      BYTE.b	%11110001
    188  2896		       11		      BYTE.b	%00010001
    189  2897		       11		      BYTE.b	%00010001
    190  2898		       1b		      BYTE.b	%00011011
    191  2899		       1b		      BYTE.b	%00011011
    192  289a		       1b		      BYTE.b	%00011011
    193  289b		       1b		      BYTE.b	%00011011
    194  289c		       11		      BYTE.b	%00010001
    195  289d		       11		      BYTE.b	%00010001
    196  289e		       11		      BYTE.b	%00010001
    197  289f		       11		      BYTE.b	%00010001
    198  28a0		       1b		      BYTE.b	%00011011
    199  28a1		       1b		      BYTE.b	%00011011
    200  28a2		       1b		      BYTE.b	%00011011
    201  28a3		       1f		      BYTE.b	%00011111
    202  28a4		       00		      BYTE.b	%00000000
    203  28a5		       00		      BYTE.b	%00000000
    204  28a6		       00		      BYTE.b	%00000000
    205  28a7		       00		      BYTE.b	%00000000
    206  28a8		       00		      BYTE.b	%00000000
    207  28a9		       00		      BYTE.b	%00000000
    208  28aa		       00		      BYTE.b	%00000000
    209  28ab		       00		      BYTE.b	%00000000
    210  28ac		       00		      BYTE.b	%00000000
    211  28ad		       80		      BYTE.b	%10000000
    212  28ae		       00		      BYTE.b	%00000000
    213  28af		       00		      BYTE.b	%00000000
    214  28b0		       00		      BYTE.b	%00000000
    215  28b1		       00		      BYTE.b	%00000000
    216  28b2		       01		      BYTE.b	%00000001
    217  28b3		       00		      BYTE.b	%00000000
    218  28b4		       00		      BYTE.b	%00000000
    219  28b5		       00		      BYTE.b	%00000000
    220  28b6		       00		      BYTE.b	%00000000
    221  28b7		       00		      BYTE.b	%00000000
    222  28b8		       00		      BYTE.b	%00000000
    223  28b9		       00		      BYTE.b	%00000000
    224  28ba		       00		      BYTE.b	%00000000
    225  28bb		       00		      BYTE.b	%00000000
    226  28bc		       04		      BYTE.b	%00000100
    227  28bd		       00		      BYTE.b	%00000000
    228  28be		       00		      BYTE.b	%00000000
    229  28bf		       00		      BYTE.b	%00000000
    230  28c0		       00		      BYTE.b	%00000000
    231  28c1
    232  28c1				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    233  28c1				  -	      align	256
    234  28c1					      endif
    235  28c1
    236  28c1				   bmp_48x2_2_03
    237  28c1
    238  28c1		       6d		      BYTE.b	%01101101
    239  28c2		       45		      BYTE.b	%01000101
    240  28c3		       6d		      BYTE.b	%01101101
    241  28c4		       45		      BYTE.b	%01000101
    242  28c5		       6d		      BYTE.b	%01101101
    243  28c6		       45		      BYTE.b	%01000101
    244  28c7		       6d		      BYTE.b	%01101101
    245  28c8		       45		      BYTE.b	%01000101
    246  28c9		       6d		      BYTE.b	%01101101
    247  28ca		       45		      BYTE.b	%01000101
    248  28cb		       6d		      BYTE.b	%01101101
    249  28cc		       45		      BYTE.b	%01000101
    250  28cd		       6d		      BYTE.b	%01101101
    251  28ce		       45		      BYTE.b	%01000101
    252  28cf		       7c		      BYTE.b	%01111100
    253  28d0		       00		      BYTE.b	%00000000
    254  28d1		       00		      BYTE.b	%00000000
    255  28d2		       00		      BYTE.b	%00000000
    256  28d3		       00		      BYTE.b	%00000000
    257  28d4		       00		      BYTE.b	%00000000
    258  28d5		       00		      BYTE.b	%00000000
    259  28d6		       00		      BYTE.b	%00000000
    260  28d7		       00		      BYTE.b	%00000000
    261  28d8		       20		      BYTE.b	%00100000
    262  28d9		       00		      BYTE.b	%00000000
    263  28da		       00		      BYTE.b	%00000000
    264  28db		       00		      BYTE.b	%00000000
    265  28dc		       00		      BYTE.b	%00000000
    266  28dd		       00		      BYTE.b	%00000000
    267  28de		       00		      BYTE.b	%00000000
    268  28df		       00		      BYTE.b	%00000000
    269  28e0		       00		      BYTE.b	%00000000
    270  28e1		       00		      BYTE.b	%00000000
    271  28e2		       00		      BYTE.b	%00000000
    272  28e3		       01		      BYTE.b	%00000001
    273  28e4		       01		      BYTE.b	%00000001
    274  28e5		       01		      BYTE.b	%00000001
    275  28e6		       01		      BYTE.b	%00000001
    276  28e7		       01		      BYTE.b	%00000001
    277  28e8		       01		      BYTE.b	%00000001
    278  28e9		       00		      BYTE.b	%00000000
    279  28ea		       00		      BYTE.b	%00000000
    280  28eb		       00		      BYTE.b	%00000000
    281  28ec		       00		      BYTE.b	%00000000
    282  28ed		       00		      BYTE.b	%00000000
    283  28ee		       00		      BYTE.b	%00000000
    284  28ef		       00		      BYTE.b	%00000000
    285  28f0		       00		      BYTE.b	%00000000
    286  28f1
    287  28f1					      if	>. != >[.+(bmp_48x2_2_height)]
    288  2900		       00 00 00 00*	      align	256
    289  2900					      endif
    290  2900
    291  2900				   bmp_48x2_2_04
    292  2900
    293  2900		       dd		      BYTE.b	%11011101
    294  2901		       05		      BYTE.b	%00000101
    295  2902		       dd		      BYTE.b	%11011101
    296  2903		       05		      BYTE.b	%00000101
    297  2904		       dd		      BYTE.b	%11011101
    298  2905		       05		      BYTE.b	%00000101
    299  2906		       dd		      BYTE.b	%11011101
    300  2907		       05		      BYTE.b	%00000101
    301  2908		       dd		      BYTE.b	%11011101
    302  2909		       05		      BYTE.b	%00000101
    303  290a		       dd		      BYTE.b	%11011101
    304  290b		       05		      BYTE.b	%00000101
    305  290c		       dd		      BYTE.b	%11011101
    306  290d		       fd		      BYTE.b	%11111101
    307  290e		       00		      BYTE.b	%00000000
    308  290f		       00		      BYTE.b	%00000000
    309  2910		       00		      BYTE.b	%00000000
    310  2911		       00		      BYTE.b	%00000000
    311  2912		       00		      BYTE.b	%00000000
    312  2913		       00		      BYTE.b	%00000000
    313  2914		       00		      BYTE.b	%00000000
    314  2915		       00		      BYTE.b	%00000000
    315  2916		       00		      BYTE.b	%00000000
    316  2917		       00		      BYTE.b	%00000000
    317  2918		       01		      BYTE.b	%00000001
    318  2919		       00		      BYTE.b	%00000000
    319  291a		       00		      BYTE.b	%00000000
    320  291b		       00		      BYTE.b	%00000000
    321  291c		       00		      BYTE.b	%00000000
    322  291d		       00		      BYTE.b	%00000000
    323  291e		       00		      BYTE.b	%00000000
    324  291f		       3f		      BYTE.b	%00111111
    325  2920		       ff		      BYTE.b	%11111111
    326  2921		       ff		      BYTE.b	%11111111
    327  2922		       cc		      BYTE.b	%11001100
    328  2923		       80		      BYTE.b	%10000000
    329  2924		       a1		      BYTE.b	%10100001
    330  2925		       ad		      BYTE.b	%10101101
    331  2926		       e1		      BYTE.b	%11100001
    332  2927		       f3		      BYTE.b	%11110011
    333  2928		       f3		      BYTE.b	%11110011
    334  2929		       ff		      BYTE.b	%11111111
    335  292a		       3f		      BYTE.b	%00111111
    336  292b		       00		      BYTE.b	%00000000
    337  292c		       00		      BYTE.b	%00000000
    338  292d		       00		      BYTE.b	%00000000
    339  292e		       00		      BYTE.b	%00000000
    340  292f		       00		      BYTE.b	%00000000
    341  2930
    342  2930				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    343  2930				  -	      align	256
    344  2930					      endif
    345  2930
    346  2930				   bmp_48x2_2_05
    347  2930
    348  2930		       fb		      BYTE.b	%11111011
    349  2931		       4a		      BYTE.b	%01001010
    350  2932		       fb		      BYTE.b	%11111011
    351  2933		       4a		      BYTE.b	%01001010
    352  2934		       fb		      BYTE.b	%11111011
    353  2935		       4a		      BYTE.b	%01001010
    354  2936		       fb		      BYTE.b	%11111011
    355  2937		       78		      BYTE.b	%01111000
    356  2938		       c0		      BYTE.b	%11000000
    357  2939		       40		      BYTE.b	%01000000
    358  293a		       c0		      BYTE.b	%11000000
    359  293b		       40		      BYTE.b	%01000000
    360  293c		       c0		      BYTE.b	%11000000
    361  293d		       c0		      BYTE.b	%11000000
    362  293e		       00		      BYTE.b	%00000000
    363  293f		       00		      BYTE.b	%00000000
    364  2940		       00		      BYTE.b	%00000000
    365  2941		       00		      BYTE.b	%00000000
    366  2942		       00		      BYTE.b	%00000000
    367  2943		       04		      BYTE.b	%00000100
    368  2944		       00		      BYTE.b	%00000000
    369  2945		       00		      BYTE.b	%00000000
    370  2946		       00		      BYTE.b	%00000000
    371  2947		       00		      BYTE.b	%00000000
    372  2948		       00		      BYTE.b	%00000000
    373  2949		       00		      BYTE.b	%00000000
    374  294a		       00		      BYTE.b	%00000000
    375  294b		       00		      BYTE.b	%00000000
    376  294c		       00		      BYTE.b	%00000000
    377  294d		       00		      BYTE.b	%00000000
    378  294e		       00		      BYTE.b	%00000000
    379  294f		       00		      BYTE.b	%00000000
    380  2950		       c0		      BYTE.b	%11000000
    381  2951		       e0		      BYTE.b	%11100000
    382  2952		       e0		      BYTE.b	%11100000
    383  2953		       60		      BYTE.b	%01100000
    384  2954		       60		      BYTE.b	%01100000
    385  2955		       60		      BYTE.b	%01100000
    386  2956		       e0		      BYTE.b	%11100000
    387  2957		       e0		      BYTE.b	%11100000
    388  2958		       e0		      BYTE.b	%11100000
    389  2959		       c0		      BYTE.b	%11000000
    390  295a		       00		      BYTE.b	%00000000
    391  295b		       00		      BYTE.b	%00000000
    392  295c		       00		      BYTE.b	%00000000
    393  295d		       00		      BYTE.b	%00000000
    394  295e		       00		      BYTE.b	%00000000
    395  295f		       00		      BYTE.b	%00000000
    396  2960
------- FILE titlescreen/asm/titlescreen.asm
    153  2960					      endif
    154  2960				  -	      ifconst	mk_48x2_3_on
    155  2960				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2960					      endif
    157  2960
    158  2960				  -	      ifconst	mk_96x2_1_on
    159  2960				  -	      include	"titlescreen/96x2_1_image.asm"
    160  2960					      endif
    161  2960				  -	      ifconst	mk_96x2_2_on
    162  2960				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2960					      endif
    164  2960				  -	      ifconst	mk_96x2_3_on
    165  2960				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2960					      endif
    167  2960
    168  2960					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2960					      include	"titlescreen/score_image.asm"
      1  2960							; feel free to modify the score graphics - just keep each digit 8 high
      2  2960							; if you're looking to want to modify any one font, pick on the 
      3  2960
      4  2960				  -	      ifnconst	NOFONT
      5  2960				  -NOFONT     =	0
      6  2960					      endif
      7  2960				  -	      ifnconst	STOCK
      8  2960				  -STOCK      =	1	;_FONTNAME
      9  2960					      endif
     10  2960				  -	      ifnconst	NEWCENTURY
     11  2960				  -NEWCENTURY =	2	;_FONTNAME
     12  2960					      endif
     13  2960				  -	      ifnconst	WHIMSEY
     14  2960				  -WHIMSEY    =	3	;_FONTNAME
     15  2960					      endif
     16  2960				  -	      ifnconst	ALARMCLOCK
     17  2960				  -ALARMCLOCK =	4	;_FONTNAME
     18  2960					      endif
     19  2960				  -	      ifnconst	HANDWRITTEN
     20  2960				  -HANDWRITTEN =	5	;_FONTNAME
     21  2960					      endif
     22  2960				  -	      ifnconst	INTERRUPTED
     23  2960				  -INTERRUPTED =	6	;_FONTNAME
     24  2960					      endif
     25  2960				  -	      ifnconst	TINY
     26  2960				  -TINY       =	7	;_FONTNAME
     27  2960					      endif
     28  2960				  -	      ifnconst	RETROPUTER
     29  2960				  -RETROPUTER =	8	;_FONTNAME
     30  2960					      endif
     31  2960				  -	      ifnconst	CURVES
     32  2960				  -CURVES     =	9	;_FONTNAME
     33  2960					      endif
     34  2960				  -	      ifnconst	HUSKY
     35  2960				  -HUSKY      =	10	;_FONTNAME
     36  2960					      endif
     37  2960				  -	      ifnconst	SNAKE
     38  2960				  -SNAKE      =	11	;_FONTNAME
     39  2960					      endif
     40  2960				  -	      ifnconst	PLOK
     41  2960				  -PLOK       =	13	;_FONTNAME
     42  2960					      endif
     43  2960
     44  2960				  -	      ifnconst	SYMBOLS
     45  2960				  -SYMBOLS    =	0	;_FONTNAME 
     46  2960					      endif
     47  2960
     48  2960							; ### setup some defaults
     49  2960				  -	      ifnconst	fontstyle
     50  2960				  -fontstyle  =	STOCK
     51  2960					      endif
     52  2960
     53  2960							;fix up the table alignment, if necessary
     54  2960				  -	      if	>. != >[.+128]
     55  2960				  -	      align	256
     56  2960					      endif
     57  2960
     58  2960				   miniscoretable
     59  2960
     60  2960					      if	fontstyle == STOCK
     61  2960
     62  2960							;byte %00000000 ; STOCK
     63  2960
     64  2960		       3c		      .byte.b	%00111100	; STOCK
     65  2961		       66		      .byte.b	%01100110	; STOCK
     66  2962		       66		      .byte.b	%01100110	; STOCK
     67  2963		       66		      .byte.b	%01100110	; STOCK
     68  2964		       66		      .byte.b	%01100110	; STOCK
     69  2965		       66		      .byte.b	%01100110	; STOCK
     70  2966		       66		      .byte.b	%01100110	; STOCK
     71  2967		       3c		      .byte.b	%00111100	; STOCK
     72  2968
     73  2968							;byte %00000000 ; STOCK
     74  2968
     75  2968		       7e		      .byte.b	%01111110	; STOCK
     76  2969		       18		      .byte.b	%00011000	; STOCK
     77  296a		       18		      .byte.b	%00011000	; STOCK
     78  296b		       18		      .byte.b	%00011000	; STOCK
     79  296c		       18		      .byte.b	%00011000	; STOCK
     80  296d		       38		      .byte.b	%00111000	; STOCK
     81  296e		       18		      .byte.b	%00011000	; STOCK
     82  296f		       08		      .byte.b	%00001000	; STOCK
     83  2970
     84  2970							;byte %00000000 ; STOCK
     85  2970
     86  2970		       7e		      .byte.b	%01111110	; STOCK
     87  2971		       60		      .byte.b	%01100000	; STOCK
     88  2972		       60		      .byte.b	%01100000	; STOCK
     89  2973		       3c		      .byte.b	%00111100	; STOCK
     90  2974		       06		      .byte.b	%00000110	; STOCK
     91  2975		       06		      .byte.b	%00000110	; STOCK
     92  2976		       46		      .byte.b	%01000110	; STOCK
     93  2977		       3c		      .byte.b	%00111100	; STOCK
     94  2978
     95  2978							;byte %00000000 ; STOCK
     96  2978
     97  2978		       3c		      .byte.b	%00111100	; STOCK
     98  2979		       46		      .byte.b	%01000110	; STOCK
     99  297a		       06		      .byte.b	%00000110	; STOCK
    100  297b		       06		      .byte.b	%00000110	; STOCK
    101  297c		       1c		      .byte.b	%00011100	; STOCK
    102  297d		       06		      .byte.b	%00000110	; STOCK
    103  297e		       46		      .byte.b	%01000110	; STOCK
    104  297f		       3c		      .byte.b	%00111100	; STOCK
    105  2980
    106  2980							;byte %00000000 ; STOCK
    107  2980
    108  2980		       0c		      .byte.b	%00001100	; STOCK
    109  2981		       0c		      .byte.b	%00001100	; STOCK
    110  2982		       7e		      .byte.b	%01111110	; STOCK
    111  2983		       4c		      .byte.b	%01001100	; STOCK
    112  2984		       4c		      .byte.b	%01001100	; STOCK
    113  2985		       2c		      .byte.b	%00101100	; STOCK
    114  2986		       1c		      .byte.b	%00011100	; STOCK
    115  2987		       0c		      .byte.b	%00001100	; STOCK
    116  2988
    117  2988							;byte %00000000 ; STOCK
    118  2988
    119  2988		       3c		      .byte.b	%00111100	; STOCK
    120  2989		       46		      .byte.b	%01000110	; STOCK
    121  298a		       06		      .byte.b	%00000110	; STOCK
    122  298b		       06		      .byte.b	%00000110	; STOCK
    123  298c		       3c		      .byte.b	%00111100	; STOCK
    124  298d		       60		      .byte.b	%01100000	; STOCK
    125  298e		       60		      .byte.b	%01100000	; STOCK
    126  298f		       7e		      .byte.b	%01111110	; STOCK
    127  2990
    128  2990							;byte %00000000 ; STOCK
    129  2990
    130  2990		       3c		      .byte.b	%00111100	; STOCK
    131  2991		       66		      .byte.b	%01100110	; STOCK
    132  2992		       66		      .byte.b	%01100110	; STOCK
    133  2993		       66		      .byte.b	%01100110	; STOCK
    134  2994		       7c		      .byte.b	%01111100	; STOCK
    135  2995		       60		      .byte.b	%01100000	; STOCK
    136  2996		       62		      .byte.b	%01100010	; STOCK
    137  2997		       3c		      .byte.b	%00111100	; STOCK
    138  2998
    139  2998							;byte %00000000 ; STOCK
    140  2998
    141  2998		       30		      .byte.b	%00110000	; STOCK
    142  2999		       30		      .byte.b	%00110000	; STOCK
    143  299a		       30		      .byte.b	%00110000	; STOCK
    144  299b		       18		      .byte.b	%00011000	; STOCK
    145  299c		       0c		      .byte.b	%00001100	; STOCK
    146  299d		       06		      .byte.b	%00000110	; STOCK
    147  299e		       42		      .byte.b	%01000010	; STOCK
    148  299f		       3e		      .byte.b	%00111110	; STOCK
    149  29a0
    150  29a0							;byte %00000000 ; STOCK
    151  29a0
    152  29a0		       3c		      .byte.b	%00111100	; STOCK
    153  29a1		       66		      .byte.b	%01100110	; STOCK
    154  29a2		       66		      .byte.b	%01100110	; STOCK
    155  29a3		       66		      .byte.b	%01100110	; STOCK
    156  29a4		       3c		      .byte.b	%00111100	; STOCK
    157  29a5		       66		      .byte.b	%01100110	; STOCK
    158  29a6		       66		      .byte.b	%01100110	; STOCK
    159  29a7		       3c		      .byte.b	%00111100	; STOCK
    160  29a8
    161  29a8							;byte %00000000 ; STOCK
    162  29a8
    163  29a8		       3c		      .byte.b	%00111100	; STOCK
    164  29a9		       46		      .byte.b	%01000110	; STOCK
    165  29aa		       06		      .byte.b	%00000110	; STOCK
    166  29ab		       3e		      .byte.b	%00111110	; STOCK
    167  29ac		       66		      .byte.b	%01100110	; STOCK
    168  29ad		       66		      .byte.b	%01100110	; STOCK
    169  29ae		       66		      .byte.b	%01100110	; STOCK
    170  29af		       3c		      .byte.b	%00111100	; STOCK
    171  29b0
    172  29b0							;byte %00000000 ; STOCK
    173  29b0
    174  29b0				  -	      ifconst	fontcharsHEX
    175  29b0				  -
    176  29b0				  -	      .byte	%01100110	; STOCK
    177  29b0				  -	      .byte	%01100110	; STOCK
    178  29b0				  -	      .byte	%01100110	; STOCK
    179  29b0				  -	      .byte	%01111110	; STOCK
    180  29b0				  -	      .byte	%01100110	; STOCK
    181  29b0				  -	      .byte	%01100110	; STOCK
    182  29b0				  -	      .byte	%01100110	; STOCK
    183  29b0				  -	      .byte	%00111100	; STOCK
    184  29b0				  -
    185  29b0				  -			;byte %00000000 ; STOCK
    186  29b0				  -
    187  29b0				  -	      .byte	%01111100	; STOCK
    188  29b0				  -	      .byte	%01100110	; STOCK
    189  29b0				  -	      .byte	%01100110	; STOCK
    190  29b0				  -	      .byte	%01100110	; STOCK
    191  29b0				  -	      .byte	%01111100	; STOCK
    192  29b0				  -	      .byte	%01100110	; STOCK
    193  29b0				  -	      .byte	%01100110	; STOCK
    194  29b0				  -	      .byte	%01111100	; STOCK
    195  29b0				  -
    196  29b0				  -			;byte %00000000 ; STOCK
    197  29b0				  -
    198  29b0				  -	      .byte	%00111100	; STOCK
    199  29b0				  -	      .byte	%01100110	; STOCK
    200  29b0				  -	      .byte	%01100000	; STOCK
    201  29b0				  -	      .byte	%01100000	; STOCK
    202  29b0				  -	      .byte	%01100000	; STOCK
    203  29b0				  -	      .byte	%01100000	; STOCK
    204  29b0				  -	      .byte	%01100110	; STOCK
    205  29b0				  -	      .byte	%00111100	; STOCK
    206  29b0				  -
    207  29b0				  -			;byte %00000000 ; STOCK
    208  29b0				  -
    209  29b0				  -	      .byte	%01111100	; STOCK
    210  29b0				  -	      .byte	%01100110	; STOCK
    211  29b0				  -	      .byte	%01100110	; STOCK
    212  29b0				  -	      .byte	%01100110	; STOCK
    213  29b0				  -	      .byte	%01100110	; STOCK
    214  29b0				  -	      .byte	%01100110	; STOCK
    215  29b0				  -	      .byte	%01100110	; STOCK
    216  29b0				  -	      .byte	%01111100	; STOCK
    217  29b0				  -
    218  29b0				  -			;byte %00000000 ; STOCK
    219  29b0				  -
    220  29b0				  -	      .byte	%01111110	; STOCK
    221  29b0				  -	      .byte	%01100000	; STOCK
    222  29b0				  -	      .byte	%01100000	; STOCK
    223  29b0				  -	      .byte	%01100000	; STOCK
    224  29b0				  -	      .byte	%01111100	; STOCK
    225  29b0				  -	      .byte	%01100000	; STOCK
    226  29b0				  -	      .byte	%01100000	; STOCK
    227  29b0				  -	      .byte	%01111110	; STOCK
    228  29b0				  -
    229  29b0				  -			;byte %00000000 ; STOCK
    230  29b0				  -
    231  29b0				  -	      .byte	%01100000	; STOCK
    232  29b0				  -	      .byte	%01100000	; STOCK
    233  29b0				  -	      .byte	%01100000	; STOCK
    234  29b0				  -	      .byte	%01100000	; STOCK
    235  29b0				  -	      .byte	%01111100	; STOCK
    236  29b0				  -	      .byte	%01100000	; STOCK
    237  29b0				  -	      .byte	%01100000	; STOCK
    238  29b0				  -	      .byte	%01111110	; STOCK
    239  29b0				  -
    240  29b0				  -			;byte %00000000 ; STOCK
    241  29b0				  -			;byte %00000000 ; STOCK
    242  29b0				  -			;byte %00000000 ; STOCK
    243  29b0				  -			;byte %00000000 ; STOCK
    244  29b0					      endif		; fontcharsHEX 
    245  29b0					      endif		; STOCK
    246  29b0
    247  29b0				  -	      if	fontstyle == NEWCENTURY
    248  29b0				  -			;byte %00000000 ; NEWCENTURY
    249  29b0				  -
    250  29b0				  -	      .byte	%00111100	; NEWCENTURY
    251  29b0				  -	      .byte	%01000010	; NEWCENTURY
    252  29b0				  -	      .byte	%01000010	; NEWCENTURY
    253  29b0				  -	      .byte	%01000010	; NEWCENTURY
    254  29b0				  -	      .byte	%00100100	; NEWCENTURY
    255  29b0				  -	      .byte	%00100100	; NEWCENTURY
    256  29b0				  -	      .byte	%00100100	; NEWCENTURY
    257  29b0				  -	      .byte	%00011000	; NEWCENTURY
    258  29b0				  -
    259  29b0				  -			;byte %00000000 ; NEWCENTURY
    260  29b0				  -
    261  29b0				  -	      .byte	%00001000	; NEWCENTURY
    262  29b0				  -	      .byte	%00001000	; NEWCENTURY
    263  29b0				  -	      .byte	%00001000	; NEWCENTURY
    264  29b0				  -	      .byte	%00001000	; NEWCENTURY
    265  29b0				  -	      .byte	%00001000	; NEWCENTURY
    266  29b0				  -	      .byte	%00001000	; NEWCENTURY
    267  29b0				  -	      .byte	%00001000	; NEWCENTURY
    268  29b0				  -	      .byte	%00001000	; NEWCENTURY
    269  29b0				  -
    270  29b0				  -			;byte %00000000 ; NEWCENTURY
    271  29b0				  -
    272  29b0				  -	      .byte	%01111110	; NEWCENTURY
    273  29b0				  -	      .byte	%01000000	; NEWCENTURY
    274  29b0				  -	      .byte	%01000000	; NEWCENTURY
    275  29b0				  -	      .byte	%00100000	; NEWCENTURY
    276  29b0				  -	      .byte	%00011100	; NEWCENTURY
    277  29b0				  -	      .byte	%00000010	; NEWCENTURY
    278  29b0				  -	      .byte	%00000010	; NEWCENTURY
    279  29b0				  -	      .byte	%00011100	; NEWCENTURY
    280  29b0				  -
    281  29b0				  -			;byte %00000000 ; NEWCENTURY
    282  29b0				  -
    283  29b0				  -	      .byte	%01111100	; NEWCENTURY
    284  29b0				  -	      .byte	%00000010	; NEWCENTURY
    285  29b0				  -	      .byte	%00000010	; NEWCENTURY
    286  29b0				  -	      .byte	%00000010	; NEWCENTURY
    287  29b0				  -	      .byte	%00111100	; NEWCENTURY
    288  29b0				  -	      .byte	%00000010	; NEWCENTURY
    289  29b0				  -	      .byte	%00000010	; NEWCENTURY
    290  29b0				  -	      .byte	%00011100	; NEWCENTURY
    291  29b0				  -
    292  29b0				  -			;byte %00000000 ; NEWCENTURY
    293  29b0				  -
    294  29b0				  -	      .byte	%00000010	; NEWCENTURY
    295  29b0				  -	      .byte	%00000010	; NEWCENTURY
    296  29b0				  -	      .byte	%00000010	; NEWCENTURY
    297  29b0				  -	      .byte	%00111110	; NEWCENTURY
    298  29b0				  -	      .byte	%00100010	; NEWCENTURY
    299  29b0				  -	      .byte	%00100010	; NEWCENTURY
    300  29b0				  -	      .byte	%00010010	; NEWCENTURY
    301  29b0				  -	      .byte	%00010010	; NEWCENTURY
    302  29b0				  -
    303  29b0				  -			;byte %00000000 ; NEWCENTURY
    304  29b0				  -
    305  29b0				  -	      .byte	%01111100	; NEWCENTURY
    306  29b0				  -	      .byte	%00000010	; NEWCENTURY
    307  29b0				  -	      .byte	%00000010	; NEWCENTURY
    308  29b0				  -	      .byte	%00000010	; NEWCENTURY
    309  29b0				  -	      .byte	%01111100	; NEWCENTURY
    310  29b0				  -	      .byte	%01000000	; NEWCENTURY
    311  29b0				  -	      .byte	%01000000	; NEWCENTURY
    312  29b0				  -	      .byte	%01111000	; NEWCENTURY
    313  29b0				  -
    314  29b0				  -			;byte %00000000 ; NEWCENTURY
    315  29b0				  -
    316  29b0				  -	      .byte	%00111100	; NEWCENTURY
    317  29b0				  -	      .byte	%01000010	; NEWCENTURY
    318  29b0				  -	      .byte	%01000010	; NEWCENTURY
    319  29b0				  -	      .byte	%01000010	; NEWCENTURY
    320  29b0				  -	      .byte	%01111100	; NEWCENTURY
    321  29b0				  -	      .byte	%01000000	; NEWCENTURY
    322  29b0				  -	      .byte	%01000000	; NEWCENTURY
    323  29b0				  -	      .byte	%00110000	; NEWCENTURY
    324  29b0				  -
    325  29b0				  -			;byte %00000000 ; NEWCENTURY
    326  29b0				  -
    327  29b0				  -	      .byte	%00010000	; NEWCENTURY
    328  29b0				  -	      .byte	%00010000	; NEWCENTURY
    329  29b0				  -	      .byte	%00001000	; NEWCENTURY
    330  29b0				  -	      .byte	%00001000	; NEWCENTURY
    331  29b0				  -	      .byte	%00000100	; NEWCENTURY
    332  29b0				  -	      .byte	%00000100	; NEWCENTURY
    333  29b0				  -	      .byte	%00000010	; NEWCENTURY
    334  29b0				  -	      .byte	%00011110	; NEWCENTURY
    335  29b0				  -
    336  29b0				  -			;byte %00000000 ; NEWCENTURY
    337  29b0				  -
    338  29b0				  -	      .byte	%00111100	; NEWCENTURY
    339  29b0				  -	      .byte	%01000010	; NEWCENTURY
    340  29b0				  -	      .byte	%01000010	; NEWCENTURY
    341  29b0				  -	      .byte	%01000010	; NEWCENTURY
    342  29b0				  -	      .byte	%00111100	; NEWCENTURY
    343  29b0				  -	      .byte	%00100100	; NEWCENTURY
    344  29b0				  -	      .byte	%00100100	; NEWCENTURY
    345  29b0				  -	      .byte	%00011000	; NEWCENTURY
    346  29b0				  -
    347  29b0				  -			;byte %00000000 ; NEWCENTURY
    348  29b0				  -
    349  29b0				  -	      .byte	%00111100	; NEWCENTURY
    350  29b0				  -	      .byte	%00000010	; NEWCENTURY
    351  29b0				  -	      .byte	%00000010	; NEWCENTURY
    352  29b0				  -	      .byte	%00000010	; NEWCENTURY
    353  29b0				  -	      .byte	%00001110	; NEWCENTURY
    354  29b0				  -	      .byte	%00010010	; NEWCENTURY
    355  29b0				  -	      .byte	%00010010	; NEWCENTURY
    356  29b0				  -	      .byte	%00001100	; NEWCENTURY
    357  29b0				  -
    358  29b0				  -	      ifconst	fontcharsHEX
    359  29b0				  -
    360  29b0				  -			;byte %00000000 ; NEWCENTURY
    361  29b0				  -
    362  29b0				  -	      .byte	%01000010	; NEWCENTURY
    363  29b0				  -	      .byte	%01000010	; NEWCENTURY
    364  29b0				  -	      .byte	%01000010	; NEWCENTURY
    365  29b0				  -	      .byte	%01000010	; NEWCENTURY
    366  29b0				  -	      .byte	%01111100	; NEWCENTURY
    367  29b0				  -	      .byte	%01000100	; NEWCENTURY
    368  29b0				  -	      .byte	%01000100	; NEWCENTURY
    369  29b0				  -	      .byte	%00111000	; NEWCENTURY
    370  29b0				  -
    371  29b0				  -			;byte %00000000 ; NEWCENTURY
    372  29b0				  -
    373  29b0				  -	      .byte	%01111100	; NEWCENTURY
    374  29b0				  -	      .byte	%01000010	; NEWCENTURY
    375  29b0				  -	      .byte	%01000010	; NEWCENTURY
    376  29b0				  -	      .byte	%01000010	; NEWCENTURY
    377  29b0				  -	      .byte	%01111100	; NEWCENTURY
    378  29b0				  -	      .byte	%01000100	; NEWCENTURY
    379  29b0				  -	      .byte	%01000100	; NEWCENTURY
    380  29b0				  -	      .byte	%01111000	; NEWCENTURY
    381  29b0				  -
    382  29b0				  -			;byte %00000000 ; NEWCENTURY
    383  29b0				  -
    384  29b0				  -	      .byte	%00111100	; NEWCENTURY
    385  29b0				  -	      .byte	%01000010	; NEWCENTURY
    386  29b0				  -	      .byte	%01000000	; NEWCENTURY
    387  29b0				  -	      .byte	%01000000	; NEWCENTURY
    388  29b0				  -	      .byte	%01000000	; NEWCENTURY
    389  29b0				  -	      .byte	%01000000	; NEWCENTURY
    390  29b0				  -	      .byte	%01000000	; NEWCENTURY
    391  29b0				  -	      .byte	%00111000	; NEWCENTURY
    392  29b0				  -
    393  29b0				  -			;byte %00000000 ; NEWCENTURY
    394  29b0				  -
    395  29b0				  -	      .byte	%01111100	; NEWCENTURY
    396  29b0				  -	      .byte	%01000010	; NEWCENTURY
    397  29b0				  -	      .byte	%01000010	; NEWCENTURY
    398  29b0				  -	      .byte	%01000010	; NEWCENTURY
    399  29b0				  -	      .byte	%01000010	; NEWCENTURY
    400  29b0				  -	      .byte	%01000100	; NEWCENTURY
    401  29b0				  -	      .byte	%01000100	; NEWCENTURY
    402  29b0				  -	      .byte	%01111000	; NEWCENTURY
    403  29b0				  -
    404  29b0				  -			;byte %00000000 ; NEWCENTURY
    405  29b0				  -
    406  29b0				  -	      .byte	%01111110	; NEWCENTURY
    407  29b0				  -	      .byte	%01000000	; NEWCENTURY
    408  29b0				  -	      .byte	%01000000	; NEWCENTURY
    409  29b0				  -	      .byte	%01000000	; NEWCENTURY
    410  29b0				  -	      .byte	%01111100	; NEWCENTURY
    411  29b0				  -	      .byte	%01000000	; NEWCENTURY
    412  29b0				  -	      .byte	%01000000	; NEWCENTURY
    413  29b0				  -	      .byte	%01111000	; NEWCENTURY
    414  29b0				  -
    415  29b0				  -			;byte %00000000 ; NEWCENTURY
    416  29b0				  -
    417  29b0				  -	      .byte	%01000000	; NEWCENTURY
    418  29b0				  -	      .byte	%01000000	; NEWCENTURY
    419  29b0				  -	      .byte	%01000000	; NEWCENTURY
    420  29b0				  -	      .byte	%01000000	; NEWCENTURY
    421  29b0				  -	      .byte	%01111100	; NEWCENTURY
    422  29b0				  -	      .byte	%01000000	; NEWCENTURY
    423  29b0				  -	      .byte	%01000000	; NEWCENTURY
    424  29b0				  -	      .byte	%01111000	; NEWCENTURY
    425  29b0				  -
    426  29b0				  -			;byte %00000000 ; NEWCENTURY
    427  29b0				  -			;byte %00000000 ; NEWCENTURY
    428  29b0				  -			;byte %00000000 ; NEWCENTURY
    429  29b0				  -			;byte %00000000 ; NEWCENTURY
    430  29b0				  -
    431  29b0				  -	      endif		; fontcharsHEX 
    432  29b0					      endif		; NEWCENTURY
    433  29b0
    434  29b0				  -	      if	fontstyle == WHIMSEY
    435  29b0				  -			;byte %00000000 ; WHIMSEY
    436  29b0				  -
    437  29b0				  -	      .byte	%00111100	; WHIMSEY
    438  29b0				  -	      .byte	%01111110	; WHIMSEY
    439  29b0				  -	      .byte	%01111110	; WHIMSEY
    440  29b0				  -	      .byte	%01111110	; WHIMSEY
    441  29b0				  -	      .byte	%01110110	; WHIMSEY
    442  29b0				  -	      .byte	%01110110	; WHIMSEY
    443  29b0				  -	      .byte	%01110110	; WHIMSEY
    444  29b0				  -	      .byte	%00111100	; WHIMSEY
    445  29b0				  -
    446  29b0				  -			;byte %00000000 ; WHIMSEY
    447  29b0				  -
    448  29b0				  -	      .byte	%01111110	; WHIMSEY
    449  29b0				  -	      .byte	%01111110	; WHIMSEY
    450  29b0				  -	      .byte	%01111110	; WHIMSEY
    451  29b0				  -	      .byte	%00011000	; WHIMSEY
    452  29b0				  -	      .byte	%00011000	; WHIMSEY
    453  29b0				  -	      .byte	%00011000	; WHIMSEY
    454  29b0				  -	      .byte	%01111000	; WHIMSEY
    455  29b0				  -	      .byte	%00011000	; WHIMSEY
    456  29b0				  -
    457  29b0				  -			;byte %00000000 ; WHIMSEY
    458  29b0				  -
    459  29b0				  -	      .byte	%01111110	; WHIMSEY
    460  29b0				  -	      .byte	%01111110	; WHIMSEY
    461  29b0				  -	      .byte	%01111110	; WHIMSEY
    462  29b0				  -	      .byte	%01111000	; WHIMSEY
    463  29b0				  -	      .byte	%00111100	; WHIMSEY
    464  29b0				  -	      .byte	%00001110	; WHIMSEY
    465  29b0				  -	      .byte	%01100110	; WHIMSEY
    466  29b0				  -	      .byte	%00111100	; WHIMSEY
    467  29b0				  -
    468  29b0				  -			;byte %00000000 ; WHIMSEY
    469  29b0				  -
    470  29b0				  -	      .byte	%00111100	; WHIMSEY
    471  29b0				  -	      .byte	%01111110	; WHIMSEY
    472  29b0				  -	      .byte	%01111110	; WHIMSEY
    473  29b0				  -	      .byte	%01101110	; WHIMSEY
    474  29b0				  -	      .byte	%00001110	; WHIMSEY
    475  29b0				  -	      .byte	%00111100	; WHIMSEY
    476  29b0				  -	      .byte	%00011100	; WHIMSEY
    477  29b0				  -	      .byte	%01111110	; WHIMSEY
    478  29b0				  -
    479  29b0				  -			;byte %00000000 ; WHIMSEY
    480  29b0				  -
    481  29b0				  -	      .byte	%00011100	; WHIMSEY
    482  29b0				  -	      .byte	%00011100	; WHIMSEY
    483  29b0				  -	      .byte	%01111110	; WHIMSEY
    484  29b0				  -	      .byte	%01011100	; WHIMSEY
    485  29b0				  -	      .byte	%01011100	; WHIMSEY
    486  29b0				  -	      .byte	%00011100	; WHIMSEY
    487  29b0				  -	      .byte	%00011100	; WHIMSEY
    488  29b0				  -	      .byte	%00011100	; WHIMSEY
    489  29b0				  -
    490  29b0				  -			;byte %00000000 ; WHIMSEY
    491  29b0				  -
    492  29b0				  -	      .byte	%00111100	; WHIMSEY
    493  29b0				  -	      .byte	%01111110	; WHIMSEY
    494  29b0				  -	      .byte	%01111110	; WHIMSEY
    495  29b0				  -	      .byte	%01101110	; WHIMSEY
    496  29b0				  -	      .byte	%00001110	; WHIMSEY
    497  29b0				  -	      .byte	%01111100	; WHIMSEY
    498  29b0				  -	      .byte	%01110000	; WHIMSEY
    499  29b0				  -	      .byte	%01111110	; WHIMSEY
    500  29b0				  -
    501  29b0				  -			;byte %00000000 ; WHIMSEY
    502  29b0				  -
    503  29b0				  -	      .byte	%00111100	; WHIMSEY
    504  29b0				  -	      .byte	%01111110	; WHIMSEY
    505  29b0				  -	      .byte	%01111110	; WHIMSEY
    506  29b0				  -	      .byte	%01110110	; WHIMSEY
    507  29b0				  -	      .byte	%01110110	; WHIMSEY
    508  29b0				  -	      .byte	%01111100	; WHIMSEY
    509  29b0				  -	      .byte	%01110000	; WHIMSEY
    510  29b0				  -	      .byte	%00111110	; WHIMSEY
    511  29b0				  -
    512  29b0				  -			;byte %00000000 ; WHIMSEY
    513  29b0				  -
    514  29b0				  -	      .byte	%01111000	; WHIMSEY
    515  29b0				  -	      .byte	%01111000	; WHIMSEY
    516  29b0				  -	      .byte	%01111000	; WHIMSEY
    517  29b0				  -	      .byte	%00111100	; WHIMSEY
    518  29b0				  -	      .byte	%00011100	; WHIMSEY
    519  29b0				  -	      .byte	%00001110	; WHIMSEY
    520  29b0				  -	      .byte	%00001110	; WHIMSEY
    521  29b0				  -	      .byte	%01111110	; WHIMSEY
    522  29b0				  -
    523  29b0				  -			;byte %00000000 ; WHIMSEY
    524  29b0				  -
    525  29b0				  -	      .byte	%00111100	; WHIMSEY
    526  29b0				  -	      .byte	%01111110	; WHIMSEY
    527  29b0				  -	      .byte	%01111110	; WHIMSEY
    528  29b0				  -	      .byte	%01110110	; WHIMSEY
    529  29b0				  -	      .byte	%01110110	; WHIMSEY
    530  29b0				  -	      .byte	%00111100	; WHIMSEY
    531  29b0				  -	      .byte	%01110110	; WHIMSEY
    532  29b0				  -	      .byte	%00111100	; WHIMSEY
    533  29b0				  -
    534  29b0				  -			;byte %00000000 ; WHIMSEY
    535  29b0				  -
    536  29b0				  -	      .byte	%00111100	; WHIMSEY
    537  29b0				  -	      .byte	%01111110	; WHIMSEY
    538  29b0				  -	      .byte	%01111110	; WHIMSEY
    539  29b0				  -	      .byte	%01110110	; WHIMSEY
    540  29b0				  -	      .byte	%00000110	; WHIMSEY
    541  29b0				  -	      .byte	%00111110	; WHIMSEY
    542  29b0				  -	      .byte	%01110110	; WHIMSEY
    543  29b0				  -	      .byte	%00111100	; WHIMSEY
    544  29b0				  -
    545  29b0				  -	      ifconst	fontcharsHEX
    546  29b0				  -
    547  29b0				  -			;byte %00000000 ; WHIMSEY
    548  29b0				  -
    549  29b0				  -	      .byte	%01110110	; WHIMSEY
    550  29b0				  -	      .byte	%01110110	; WHIMSEY
    551  29b0				  -	      .byte	%01111110	; WHIMSEY
    552  29b0				  -	      .byte	%01111110	; WHIMSEY
    553  29b0				  -	      .byte	%01111110	; WHIMSEY
    554  29b0				  -	      .byte	%01110110	; WHIMSEY
    555  29b0				  -	      .byte	%01110110	; WHIMSEY
    556  29b0				  -	      .byte	%00111100	; WHIMSEY
    557  29b0				  -
    558  29b0				  -			;byte %00000000 ; WHIMSEY
    559  29b0				  -
    560  29b0				  -	      .byte	%01111100	; WHIMSEY
    561  29b0				  -	      .byte	%01111110	; WHIMSEY
    562  29b0				  -	      .byte	%01111110	; WHIMSEY
    563  29b0				  -	      .byte	%01110110	; WHIMSEY
    564  29b0				  -	      .byte	%01110110	; WHIMSEY
    565  29b0				  -	      .byte	%01111100	; WHIMSEY
    566  29b0				  -	      .byte	%01110110	; WHIMSEY
    567  29b0				  -	      .byte	%01111100	; WHIMSEY
    568  29b0				  -
    569  29b0				  -			;byte %00000000 ; WHIMSEY
    570  29b0				  -
    571  29b0				  -	      .byte	%00111100	; WHIMSEY
    572  29b0				  -	      .byte	%01111110	; WHIMSEY
    573  29b0				  -	      .byte	%01111110	; WHIMSEY
    574  29b0				  -	      .byte	%01110110	; WHIMSEY
    575  29b0				  -	      .byte	%01110000	; WHIMSEY
    576  29b0				  -	      .byte	%01110000	; WHIMSEY
    577  29b0				  -	      .byte	%01110110	; WHIMSEY
    578  29b0				  -	      .byte	%00111100	; WHIMSEY
    579  29b0				  -
    580  29b0				  -			;byte %00000000 ; WHIMSEY
    581  29b0				  -
    582  29b0				  -	      .byte	%01111100	; WHIMSEY
    583  29b0				  -	      .byte	%01111110	; WHIMSEY
    584  29b0				  -	      .byte	%01111110	; WHIMSEY
    585  29b0				  -	      .byte	%01111110	; WHIMSEY
    586  29b0				  -	      .byte	%01110110	; WHIMSEY
    587  29b0				  -	      .byte	%01110110	; WHIMSEY
    588  29b0				  -	      .byte	%01110110	; WHIMSEY
    589  29b0				  -	      .byte	%01111100	; WHIMSEY
    590  29b0				  -
    591  29b0				  -			;byte %00000000 ; WHIMSEY
    592  29b0				  -
    593  29b0				  -	      .byte	%01111110	; WHIMSEY
    594  29b0				  -	      .byte	%01111110	; WHIMSEY
    595  29b0				  -	      .byte	%01111110	; WHIMSEY
    596  29b0				  -	      .byte	%01110000	; WHIMSEY
    597  29b0				  -	      .byte	%01110000	; WHIMSEY
    598  29b0				  -	      .byte	%01111100	; WHIMSEY
    599  29b0				  -	      .byte	%01110000	; WHIMSEY
    600  29b0				  -	      .byte	%01111100	; WHIMSEY
    601  29b0				  -
    602  29b0				  -			;byte %00000000 ; WHIMSEY
    603  29b0				  -
    604  29b0				  -	      .byte	%01110000	; WHIMSEY
    605  29b0				  -	      .byte	%01110000	; WHIMSEY
    606  29b0				  -	      .byte	%01110000	; WHIMSEY
    607  29b0				  -	      .byte	%01110000	; WHIMSEY
    608  29b0				  -	      .byte	%01110000	; WHIMSEY
    609  29b0				  -	      .byte	%01111100	; WHIMSEY
    610  29b0				  -	      .byte	%01110000	; WHIMSEY
    611  29b0				  -	      .byte	%01111100	; WHIMSEY
    612  29b0				  -
    613  29b0				  -			;byte %00000000 ; WHIMSEY
    614  29b0				  -			;byte %00000000 ; WHIMSEY
    615  29b0				  -			;byte %00000000 ; WHIMSEY
    616  29b0				  -			;byte %00000000 ; WHIMSEY
    617  29b0				  -
    618  29b0				  -	      endif		; fontcharsHEX
    619  29b0					      endif		; WHIMSEY
    620  29b0
    621  29b0				  -	      if	fontstyle == ALARMCLOCK
    622  29b0				  -
    623  29b0				  -			;byte %00000000 ; ALARMCLOCK
    624  29b0				  -
    625  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    626  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    627  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    628  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    629  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    630  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    631  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    632  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    633  29b0				  -
    634  29b0				  -			;byte %00000000 ; ALARMCLOCK
    635  29b0				  -
    636  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    637  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    638  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    639  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    640  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    641  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    642  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    643  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    644  29b0				  -
    645  29b0				  -			;byte %00000000 ; ALARMCLOCK
    646  29b0				  -
    647  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    648  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    649  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    650  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    651  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    652  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    653  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    654  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    655  29b0				  -
    656  29b0				  -			;byte %00000000 ; ALARMCLOCK
    657  29b0				  -
    658  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    659  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    660  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    661  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    662  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    663  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    664  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    665  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    666  29b0				  -
    667  29b0				  -			;byte %00000000 ; ALARMCLOCK
    668  29b0				  -
    669  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    670  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    671  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    672  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    673  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    674  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    675  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    676  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    677  29b0				  -
    678  29b0				  -			;byte %00000000 ; ALARMCLOCK
    679  29b0				  -
    680  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    681  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    682  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    683  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    684  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    685  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    686  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    687  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    688  29b0				  -
    689  29b0				  -			;byte %00000000 ; ALARMCLOCK
    690  29b0				  -
    691  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    692  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    693  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    694  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    695  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    696  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    697  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    698  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    699  29b0				  -
    700  29b0				  -			;byte %00000000 ; ALARMCLOCK
    701  29b0				  -
    702  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    703  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    704  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    705  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    706  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    707  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    708  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    709  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    710  29b0				  -
    711  29b0				  -			;byte %00000000 ; ALARMCLOCK
    712  29b0				  -
    713  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    714  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    715  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    716  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    717  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    718  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    719  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    720  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    721  29b0				  -
    722  29b0				  -			;byte %00000000 ; ALARMCLOCK
    723  29b0				  -
    724  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    725  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    726  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    727  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    728  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    729  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    730  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    731  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    732  29b0				  -
    733  29b0				  -
    734  29b0				  -	      ifconst	fontcharsHEX
    735  29b0				  -			;byte %00000000 ; ALARMCLOCK
    736  29b0				  -
    737  29b0				  -
    738  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    739  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    740  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    741  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    742  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    743  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    744  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    745  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    746  29b0				  -
    747  29b0				  -			;byte %00000000 ; ALARMCLOCK
    748  29b0				  -
    749  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    750  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    751  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    752  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    753  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    754  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    755  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    756  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    757  29b0				  -
    758  29b0				  -			;byte %00000000 ; ALARMCLOCK
    759  29b0				  -
    760  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    761  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    762  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    763  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    764  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    765  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    766  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    767  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    768  29b0				  -
    769  29b0				  -			;byte %00000000 ; ALARMCLOCK
    770  29b0				  -
    771  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    772  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    773  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    774  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    775  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    776  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    777  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    778  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    779  29b0				  -
    780  29b0				  -			;byte %00000000 ; ALARMCLOCK
    781  29b0				  -
    782  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    783  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    784  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    785  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    786  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    787  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    788  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    789  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    790  29b0				  -
    791  29b0				  -			;byte %00000000 ; ALARMCLOCK
    792  29b0				  -
    793  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    794  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    795  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    796  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    797  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    798  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    799  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    800  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    801  29b0				  -
    802  29b0				  -			;byte %00000000 ; ALARMCLOCK
    803  29b0				  -			;byte %00000000 ; ALARMCLOCK
    804  29b0				  -			;byte %00000000 ; ALARMCLOCK
    805  29b0				  -			;byte %00000000 ; ALARMCLOCK
    806  29b0				  -
    807  29b0				  -	      endif		; fontcharsHEX
    808  29b0					      endif		; ALARMCLOCK
    809  29b0
    810  29b0				  -	      if	fontstyle == HANDWRITTEN
    811  29b0				  -
    812  29b0				  -			;byte %00000000 ; HANDWRITTEN
    813  29b0				  -
    814  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    815  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    816  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    817  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    818  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    819  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    820  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    821  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    822  29b0				  -
    823  29b0				  -			;byte %00000000 ; HANDWRITTEN
    824  29b0				  -
    825  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    826  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    827  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    828  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    829  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    830  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    831  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    832  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    833  29b0				  -
    834  29b0				  -			;byte %00000000 ; HANDWRITTEN
    835  29b0				  -
    836  29b0				  -	      .byte	%01110000	; HANDWRITTEN
    837  29b0				  -	      .byte	%01001100	; HANDWRITTEN
    838  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    839  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    840  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    841  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    842  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    843  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    844  29b0				  -
    845  29b0				  -			;byte %00000000 ; HANDWRITTEN
    846  29b0				  -
    847  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    848  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    849  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    850  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    851  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    852  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    853  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    854  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    855  29b0				  -
    856  29b0				  -			;byte %00000000 ; HANDWRITTEN
    857  29b0				  -
    858  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    859  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    860  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    861  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    862  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    863  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    864  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    865  29b0				  -	      .byte	%00000010	; HANDWRITTEN
    866  29b0				  -
    867  29b0				  -			;byte %00000000 ; HANDWRITTEN
    868  29b0				  -
    869  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    870  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    871  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    872  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    873  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    874  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    875  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    876  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    877  29b0				  -
    878  29b0				  -			;byte %00000000 ; HANDWRITTEN
    879  29b0				  -
    880  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    881  29b0				  -	      .byte	%00101000	; HANDWRITTEN
    882  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    883  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    884  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    885  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    886  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    887  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    888  29b0				  -
    889  29b0				  -			;byte %00000000 ; HANDWRITTEN
    890  29b0				  -
    891  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    892  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    893  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    894  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    895  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    896  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    897  29b0				  -	      .byte	%00110010	; HANDWRITTEN
    898  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    899  29b0				  -
    900  29b0				  -			;byte %00000000 ; HANDWRITTEN
    901  29b0				  -
    902  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    903  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    904  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    905  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    906  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    907  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    908  29b0				  -	      .byte	%00001010	; HANDWRITTEN
    909  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    910  29b0				  -
    911  29b0				  -			;byte %00000000 ; HANDWRITTEN
    912  29b0				  -
    913  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    914  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    915  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    916  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    917  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    918  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    919  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    920  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    921  29b0				  -
    922  29b0				  -	      ifconst	fontcharsHEX
    923  29b0				  -
    924  29b0				  -			;byte %00000000 ; HANDWRITTEN
    925  29b0				  -
    926  29b0				  -	      .byte	%00110110	; HANDWRITTEN
    927  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    928  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    929  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    930  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    931  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    932  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    933  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    934  29b0				  -
    935  29b0				  -			;byte %00000000 ; HANDWRITTEN
    936  29b0				  -
    937  29b0				  -	      .byte	%11110000	; HANDWRITTEN
    938  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    939  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    940  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    941  29b0				  -	      .byte	%00111100	; HANDWRITTEN
    942  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    943  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    944  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    945  29b0				  -
    946  29b0				  -			;byte %00000000 ; HANDWRITTEN
    947  29b0				  -
    948  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    949  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    950  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    951  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    952  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    953  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    954  29b0				  -	      .byte	%00010100	; HANDWRITTEN
    955  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    956  29b0				  -
    957  29b0				  -			;byte %00000000 ; HANDWRITTEN
    958  29b0				  -
    959  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    960  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    961  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    962  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    963  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    964  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    965  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    966  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    967  29b0				  -
    968  29b0				  -			;byte %00000000 ; HANDWRITTEN
    969  29b0				  -
    970  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    971  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    972  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    973  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    974  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    975  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    976  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    977  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    978  29b0				  -
    979  29b0				  -			;byte %00000000 ; HANDWRITTEN
    980  29b0				  -
    981  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    982  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    983  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    984  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    985  29b0				  -	      .byte	%00111000	; HANDWRITTEN
    986  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    987  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    988  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    989  29b0				  -
    990  29b0				  -			;byte %00000000 ; HANDWRITTEN
    991  29b0				  -			;byte %00000000 ; HANDWRITTEN
    992  29b0				  -			;byte %00000000 ; HANDWRITTEN
    993  29b0				  -			;byte %00000000 ; HANDWRITTEN
    994  29b0				  -
    995  29b0				  -	      endif		; fontcharsHEX
    996  29b0					      endif		; HANDWRITTEN
    997  29b0
    998  29b0				  -	      if	fontstyle == INTERRUPTED
    999  29b0				  -
   1000  29b0				  -			;byte %00000000 ; INTERRUPTED
   1001  29b0				  -
   1002  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1003  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1004  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1005  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1006  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1007  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1008  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1009  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1010  29b0				  -
   1011  29b0				  -			;byte %00000000 ; INTERRUPTED
   1012  29b0				  -
   1013  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1014  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1015  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1016  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1017  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1018  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1019  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1020  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1021  29b0				  -
   1022  29b0				  -			;byte %00000000 ; INTERRUPTED
   1023  29b0				  -
   1024  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1025  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1026  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1027  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1028  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1029  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1030  29b0				  -	      .byte	%01000110	; INTERRUPTED
   1031  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1032  29b0				  -
   1033  29b0				  -			;byte %00000000 ; INTERRUPTED
   1034  29b0				  -
   1035  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1036  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1037  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1038  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1039  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1040  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1041  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1042  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1043  29b0				  -
   1044  29b0				  -			;byte %00000000 ; INTERRUPTED
   1045  29b0				  -
   1046  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1047  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1048  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1049  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1050  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1051  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1052  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1053  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1054  29b0				  -
   1055  29b0				  -			;byte %00000000 ; INTERRUPTED
   1056  29b0				  -
   1057  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1058  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1059  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1060  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1061  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1062  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1063  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1064  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1065  29b0				  -
   1066  29b0				  -			;byte %00000000 ; INTERRUPTED
   1067  29b0				  -
   1068  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1069  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1070  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1071  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1072  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1073  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1074  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1075  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1076  29b0				  -
   1077  29b0				  -			;byte %00000000 ; INTERRUPTED
   1078  29b0				  -
   1079  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1080  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1081  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1082  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1083  29b0				  -	      .byte	%00001110	; INTERRUPTED
   1084  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1085  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1086  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1087  29b0				  -
   1088  29b0				  -			;byte %00000000 ; INTERRUPTED
   1089  29b0				  -
   1090  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1091  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1092  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1093  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1094  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1095  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1096  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1097  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1098  29b0				  -
   1099  29b0				  -			;byte %00000000 ; INTERRUPTED
   1100  29b0				  -
   1101  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1102  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1103  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1104  29b0				  -	      .byte	%00110110	; INTERRUPTED
   1105  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1106  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1107  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1108  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1109  29b0				  -
   1110  29b0				  -	      ifconst	fontcharsHEX
   1111  29b0				  -
   1112  29b0				  -			;byte %00000000 ; INTERRUPTED
   1113  29b0				  -
   1114  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1115  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1116  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1117  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1118  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1119  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1120  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1121  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1122  29b0				  -
   1123  29b0				  -			;byte %00000000 ; INTERRUPTED
   1124  29b0				  -
   1125  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1126  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1127  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1128  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1129  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1130  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1131  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1132  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1133  29b0				  -
   1134  29b0				  -			;byte %00000000 ; INTERRUPTED
   1135  29b0				  -
   1136  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1137  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1138  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1139  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1140  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1141  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1142  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1143  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1144  29b0				  -
   1145  29b0				  -			;byte %00000000 ; INTERRUPTED
   1146  29b0				  -
   1147  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1148  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1149  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1150  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1151  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1152  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1153  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1154  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1155  29b0				  -
   1156  29b0				  -			;byte %00000000 ; INTERRUPTED
   1157  29b0				  -
   1158  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1159  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1160  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1161  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1162  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1163  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1164  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1165  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1166  29b0				  -
   1167  29b0				  -			;byte %00000000 ; INTERRUPTED
   1168  29b0				  -
   1169  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1170  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1171  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1172  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1173  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1174  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1175  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1176  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1177  29b0				  -
   1178  29b0				  -			;byte %00000000 ; INTERRUPTED
   1179  29b0				  -			;byte %00000000 ; INTERRUPTED
   1180  29b0				  -			;byte %00000000 ; INTERRUPTED
   1181  29b0				  -			;byte %00000000 ; INTERRUPTED
   1182  29b0				  -
   1183  29b0				  -	      endif		; fontcharsHEX
   1184  29b0					      endif		; INTERRUPTED
   1185  29b0
   1186  29b0
   1187  29b0				  -	      if	fontstyle == TINY
   1188  29b0				  -
   1189  29b0				  -			;byte %00000000 ; TINY
   1190  29b0				  -
   1191  29b0				  -	      .byte	%00000000	; TINY
   1192  29b0				  -	      .byte	%00111000	; TINY
   1193  29b0				  -	      .byte	%00101000	; TINY
   1194  29b0				  -	      .byte	%00101000	; TINY
   1195  29b0				  -	      .byte	%00101000	; TINY
   1196  29b0				  -	      .byte	%00111000	; TINY
   1197  29b0				  -	      .byte	%00000000	; TINY
   1198  29b0				  -	      .byte	%00000000	; TINY
   1199  29b0				  -
   1200  29b0				  -			;byte %00000000 ; TINY
   1201  29b0				  -
   1202  29b0				  -	      .byte	%00000000	; TINY
   1203  29b0				  -	      .byte	%00010000	; TINY
   1204  29b0				  -	      .byte	%00010000	; TINY
   1205  29b0				  -	      .byte	%00010000	; TINY
   1206  29b0				  -	      .byte	%00010000	; TINY
   1207  29b0				  -	      .byte	%00010000	; TINY
   1208  29b0				  -	      .byte	%00000000	; TINY
   1209  29b0				  -	      .byte	%00000000	; TINY
   1210  29b0				  -
   1211  29b0				  -			;byte %00000000 ; TINY
   1212  29b0				  -
   1213  29b0				  -	      .byte	%00000000	; TINY
   1214  29b0				  -	      .byte	%00111000	; TINY
   1215  29b0				  -	      .byte	%00100000	; TINY
   1216  29b0				  -	      .byte	%00111000	; TINY
   1217  29b0				  -	      .byte	%00001000	; TINY
   1218  29b0				  -	      .byte	%00111000	; TINY
   1219  29b0				  -	      .byte	%00000000	; TINY
   1220  29b0				  -	      .byte	%00000000	; TINY
   1221  29b0				  -
   1222  29b0				  -			;byte %00000000 ; TINY
   1223  29b0				  -
   1224  29b0				  -	      .byte	%00000000	; TINY
   1225  29b0				  -	      .byte	%00111000	; TINY
   1226  29b0				  -	      .byte	%00001000	; TINY
   1227  29b0				  -	      .byte	%00111000	; TINY
   1228  29b0				  -	      .byte	%00001000	; TINY
   1229  29b0				  -	      .byte	%00111000	; TINY
   1230  29b0				  -	      .byte	%00000000	; TINY
   1231  29b0				  -	      .byte	%00000000	; TINY
   1232  29b0				  -
   1233  29b0				  -			;byte %00000000 ; TINY
   1234  29b0				  -
   1235  29b0				  -	      .byte	%00000000	; TINY
   1236  29b0				  -	      .byte	%00001000	; TINY
   1237  29b0				  -	      .byte	%00001000	; TINY
   1238  29b0				  -	      .byte	%00111000	; TINY
   1239  29b0				  -	      .byte	%00101000	; TINY
   1240  29b0				  -	      .byte	%00101000	; TINY
   1241  29b0				  -	      .byte	%00000000	; TINY
   1242  29b0				  -	      .byte	%00000000	; TINY
   1243  29b0				  -
   1244  29b0				  -			;byte %00000000 ; TINY
   1245  29b0				  -
   1246  29b0				  -	      .byte	%00000000	; TINY
   1247  29b0				  -	      .byte	%00111000	; TINY
   1248  29b0				  -	      .byte	%00001000	; TINY
   1249  29b0				  -	      .byte	%00111000	; TINY
   1250  29b0				  -	      .byte	%00100000	; TINY
   1251  29b0				  -	      .byte	%00111000	; TINY
   1252  29b0				  -	      .byte	%00000000	; TINY
   1253  29b0				  -	      .byte	%00000000	; TINY
   1254  29b0				  -
   1255  29b0				  -			;byte %00000000 ; TINY
   1256  29b0				  -
   1257  29b0				  -	      .byte	%00000000	; TINY
   1258  29b0				  -	      .byte	%00111000	; TINY
   1259  29b0				  -	      .byte	%00101000	; TINY
   1260  29b0				  -	      .byte	%00111000	; TINY
   1261  29b0				  -	      .byte	%00100000	; TINY
   1262  29b0				  -	      .byte	%00111000	; TINY
   1263  29b0				  -	      .byte	%00000000	; TINY
   1264  29b0				  -	      .byte	%00000000	; TINY
   1265  29b0				  -
   1266  29b0				  -			;byte %00000000 ; TINY
   1267  29b0				  -
   1268  29b0				  -	      .byte	%00000000	; TINY
   1269  29b0				  -	      .byte	%00001000	; TINY
   1270  29b0				  -	      .byte	%00001000	; TINY
   1271  29b0				  -	      .byte	%00001000	; TINY
   1272  29b0				  -	      .byte	%00001000	; TINY
   1273  29b0				  -	      .byte	%00111000	; TINY
   1274  29b0				  -	      .byte	%00000000	; TINY
   1275  29b0				  -	      .byte	%00000000	; TINY
   1276  29b0				  -
   1277  29b0				  -			;byte %00000000 ; TINY
   1278  29b0				  -
   1279  29b0				  -	      .byte	%00000000	; TINY
   1280  29b0				  -	      .byte	%00111000	; TINY
   1281  29b0				  -	      .byte	%00101000	; TINY
   1282  29b0				  -	      .byte	%00111000	; TINY
   1283  29b0				  -	      .byte	%00101000	; TINY
   1284  29b0				  -	      .byte	%00111000	; TINY
   1285  29b0				  -	      .byte	%00000000	; TINY
   1286  29b0				  -	      .byte	%00000000	; TINY
   1287  29b0				  -
   1288  29b0				  -			;byte %00000000 ; TINY
   1289  29b0				  -
   1290  29b0				  -	      .byte	%00000000	; TINY
   1291  29b0				  -	      .byte	%00001000	; TINY
   1292  29b0				  -	      .byte	%00001000	; TINY
   1293  29b0				  -	      .byte	%00111000	; TINY
   1294  29b0				  -	      .byte	%00101000	; TINY
   1295  29b0				  -	      .byte	%00111000	; TINY
   1296  29b0				  -	      .byte	%00000000	; TINY
   1297  29b0				  -	      .byte	%00000000	; TINY
   1298  29b0				  -
   1299  29b0				  -	      ifconst	fontcharsHEX
   1300  29b0				  -
   1301  29b0				  -			;byte %00000000 ; TINY
   1302  29b0				  -
   1303  29b0				  -	      .byte	%00000000	; TINY
   1304  29b0				  -	      .byte	%00101000	; TINY
   1305  29b0				  -	      .byte	%00101000	; TINY
   1306  29b0				  -	      .byte	%00111000	; TINY
   1307  29b0				  -	      .byte	%00101000	; TINY
   1308  29b0				  -	      .byte	%00111000	; TINY
   1309  29b0				  -	      .byte	%00000000	; TINY
   1310  29b0				  -	      .byte	%00000000	; TINY
   1311  29b0				  -
   1312  29b0				  -			;byte %00000000 ; TINY
   1313  29b0				  -
   1314  29b0				  -	      .byte	%00000000	; TINY
   1315  29b0				  -	      .byte	%00110000	; TINY
   1316  29b0				  -	      .byte	%00101000	; TINY
   1317  29b0				  -	      .byte	%00110000	; TINY
   1318  29b0				  -	      .byte	%00101000	; TINY
   1319  29b0				  -	      .byte	%00110000	; TINY
   1320  29b0				  -	      .byte	%00000000	; TINY
   1321  29b0				  -	      .byte	%00000000	; TINY
   1322  29b0				  -
   1323  29b0				  -			;byte %00000000 ; TINY
   1324  29b0				  -
   1325  29b0				  -	      .byte	%00000000	; TINY
   1326  29b0				  -	      .byte	%00111000	; TINY
   1327  29b0				  -	      .byte	%00100000	; TINY
   1328  29b0				  -	      .byte	%00100000	; TINY
   1329  29b0				  -	      .byte	%00100000	; TINY
   1330  29b0				  -	      .byte	%00111000	; TINY
   1331  29b0				  -	      .byte	%00000000	; TINY
   1332  29b0				  -	      .byte	%00000000	; TINY
   1333  29b0				  -
   1334  29b0				  -			;byte %00000000 ; TINY
   1335  29b0				  -
   1336  29b0				  -	      .byte	%00000000	; TINY
   1337  29b0				  -	      .byte	%00110000	; TINY
   1338  29b0				  -	      .byte	%00101000	; TINY
   1339  29b0				  -	      .byte	%00101000	; TINY
   1340  29b0				  -	      .byte	%00101000	; TINY
   1341  29b0				  -	      .byte	%00110000	; TINY
   1342  29b0				  -	      .byte	%00000000	; TINY
   1343  29b0				  -	      .byte	%00000000	; TINY
   1344  29b0				  -
   1345  29b0				  -			;byte %00000000 ; TINY
   1346  29b0				  -
   1347  29b0				  -	      .byte	%00000000	; TINY
   1348  29b0				  -	      .byte	%00111000	; TINY
   1349  29b0				  -	      .byte	%00100000	; TINY
   1350  29b0				  -	      .byte	%00111000	; TINY
   1351  29b0				  -	      .byte	%00100000	; TINY
   1352  29b0				  -	      .byte	%00111000	; TINY
   1353  29b0				  -	      .byte	%00000000	; TINY
   1354  29b0				  -	      .byte	%00000000	; TINY
   1355  29b0				  -
   1356  29b0				  -			;byte %00000000 ; TINY
   1357  29b0				  -
   1358  29b0				  -	      .byte	%00000000	; TINY
   1359  29b0				  -	      .byte	%00100000	; TINY
   1360  29b0				  -	      .byte	%00100000	; TINY
   1361  29b0				  -	      .byte	%00111000	; TINY
   1362  29b0				  -	      .byte	%00100000	; TINY
   1363  29b0				  -	      .byte	%00111000	; TINY
   1364  29b0				  -	      .byte	%00000000	; TINY
   1365  29b0				  -	      .byte	%00000000	; TINY
   1366  29b0				  -
   1367  29b0				  -			;byte %00000000 ; TINY
   1368  29b0				  -			;byte %00000000 ; TINY
   1369  29b0				  -			;byte %00000000 ; TINY
   1370  29b0				  -			;byte %00000000 ; TINY
   1371  29b0				  -
   1372  29b0				  -	      endif		; fontcharsHEX
   1373  29b0					      endif		; TINY
   1374  29b0
   1375  29b0				  -	      if	fontstyle == RETROPUTER
   1376  29b0				  -
   1377  29b0				  -			;byte %00000000 ; RETROPUTER
   1378  29b0				  -
   1379  29b0				  -	      .byte	%01111110	; RETROPUTER
   1380  29b0				  -	      .byte	%01000110	; RETROPUTER
   1381  29b0				  -	      .byte	%01000110	; RETROPUTER
   1382  29b0				  -	      .byte	%01000110	; RETROPUTER
   1383  29b0				  -	      .byte	%01100010	; RETROPUTER
   1384  29b0				  -	      .byte	%01100010	; RETROPUTER
   1385  29b0				  -	      .byte	%01100010	; RETROPUTER
   1386  29b0				  -	      .byte	%01111110	; RETROPUTER
   1387  29b0				  -
   1388  29b0				  -			;byte %00000000 ; RETROPUTER
   1389  29b0				  -
   1390  29b0				  -	      .byte	%00111000	; RETROPUTER
   1391  29b0				  -	      .byte	%00111000	; RETROPUTER
   1392  29b0				  -	      .byte	%00111000	; RETROPUTER
   1393  29b0				  -	      .byte	%00111000	; RETROPUTER
   1394  29b0				  -	      .byte	%00011000	; RETROPUTER
   1395  29b0				  -	      .byte	%00011000	; RETROPUTER
   1396  29b0				  -	      .byte	%00011000	; RETROPUTER
   1397  29b0				  -	      .byte	%00011000	; RETROPUTER
   1398  29b0				  -
   1399  29b0				  -			;byte %00000000 ; RETROPUTER
   1400  29b0				  -
   1401  29b0				  -	      .byte	%01111110	; RETROPUTER
   1402  29b0				  -	      .byte	%01100000	; RETROPUTER
   1403  29b0				  -	      .byte	%01100000	; RETROPUTER
   1404  29b0				  -	      .byte	%01100000	; RETROPUTER
   1405  29b0				  -	      .byte	%00111110	; RETROPUTER
   1406  29b0				  -	      .byte	%00000010	; RETROPUTER
   1407  29b0				  -	      .byte	%01000010	; RETROPUTER
   1408  29b0				  -	      .byte	%01111110	; RETROPUTER
   1409  29b0				  -
   1410  29b0				  -			;byte %00000000 ; RETROPUTER
   1411  29b0				  -
   1412  29b0				  -	      .byte	%01111110	; RETROPUTER
   1413  29b0				  -	      .byte	%01000110	; RETROPUTER
   1414  29b0				  -	      .byte	%00000110	; RETROPUTER
   1415  29b0				  -	      .byte	%00000110	; RETROPUTER
   1416  29b0				  -	      .byte	%00111110	; RETROPUTER
   1417  29b0				  -	      .byte	%00000010	; RETROPUTER
   1418  29b0				  -	      .byte	%01000010	; RETROPUTER
   1419  29b0				  -	      .byte	%01111110	; RETROPUTER
   1420  29b0				  -
   1421  29b0				  -			;byte %00000000 ; RETROPUTER
   1422  29b0				  -
   1423  29b0				  -	      .byte	%00001100	; RETROPUTER
   1424  29b0				  -	      .byte	%00001100	; RETROPUTER
   1425  29b0				  -	      .byte	%00001100	; RETROPUTER
   1426  29b0				  -	      .byte	%01111110	; RETROPUTER
   1427  29b0				  -	      .byte	%01000100	; RETROPUTER
   1428  29b0				  -	      .byte	%01000100	; RETROPUTER
   1429  29b0				  -	      .byte	%01000100	; RETROPUTER
   1430  29b0				  -	      .byte	%00000100	; RETROPUTER
   1431  29b0				  -
   1432  29b0				  -			;byte %00000000 ; RETROPUTER
   1433  29b0				  -
   1434  29b0				  -	      .byte	%01111110	; RETROPUTER
   1435  29b0				  -	      .byte	%01000110	; RETROPUTER
   1436  29b0				  -	      .byte	%00000110	; RETROPUTER
   1437  29b0				  -	      .byte	%00000110	; RETROPUTER
   1438  29b0				  -	      .byte	%01111100	; RETROPUTER
   1439  29b0				  -	      .byte	%01000000	; RETROPUTER
   1440  29b0				  -	      .byte	%01000000	; RETROPUTER
   1441  29b0				  -	      .byte	%01111110	; RETROPUTER
   1442  29b0				  -
   1443  29b0				  -			;byte %00000000 ; RETROPUTER
   1444  29b0				  -
   1445  29b0				  -	      .byte	%01111110	; RETROPUTER
   1446  29b0				  -	      .byte	%01000110	; RETROPUTER
   1447  29b0				  -	      .byte	%01000110	; RETROPUTER
   1448  29b0				  -	      .byte	%01000110	; RETROPUTER
   1449  29b0				  -	      .byte	%01111100	; RETROPUTER
   1450  29b0				  -	      .byte	%01000000	; RETROPUTER
   1451  29b0				  -	      .byte	%01000010	; RETROPUTER
   1452  29b0				  -	      .byte	%01111110	; RETROPUTER
   1453  29b0				  -
   1454  29b0				  -			;byte %00000000 ; RETROPUTER
   1455  29b0				  -
   1456  29b0				  -	      .byte	%00001100	; RETROPUTER
   1457  29b0				  -	      .byte	%00001100	; RETROPUTER
   1458  29b0				  -	      .byte	%00001100	; RETROPUTER
   1459  29b0				  -	      .byte	%00001100	; RETROPUTER
   1460  29b0				  -	      .byte	%00000100	; RETROPUTER
   1461  29b0				  -	      .byte	%00000010	; RETROPUTER
   1462  29b0				  -	      .byte	%01000010	; RETROPUTER
   1463  29b0				  -	      .byte	%01111110	; RETROPUTER
   1464  29b0				  -
   1465  29b0				  -			;byte %00000000 ; RETROPUTER
   1466  29b0				  -
   1467  29b0				  -	      .byte	%01111110	; RETROPUTER
   1468  29b0				  -	      .byte	%01000110	; RETROPUTER
   1469  29b0				  -	      .byte	%01000110	; RETROPUTER
   1470  29b0				  -	      .byte	%01000110	; RETROPUTER
   1471  29b0				  -	      .byte	%01111110	; RETROPUTER
   1472  29b0				  -	      .byte	%01000010	; RETROPUTER
   1473  29b0				  -	      .byte	%01000010	; RETROPUTER
   1474  29b0				  -	      .byte	%01111110	; RETROPUTER
   1475  29b0				  -
   1476  29b0				  -			;byte %00000000 ; RETROPUTER
   1477  29b0				  -
   1478  29b0				  -	      .byte	%00000110	; RETROPUTER
   1479  29b0				  -	      .byte	%00000110	; RETROPUTER
   1480  29b0				  -	      .byte	%00000110	; RETROPUTER
   1481  29b0				  -	      .byte	%00000010	; RETROPUTER
   1482  29b0				  -	      .byte	%01111110	; RETROPUTER
   1483  29b0				  -	      .byte	%01000010	; RETROPUTER
   1484  29b0				  -	      .byte	%01000010	; RETROPUTER
   1485  29b0				  -	      .byte	%01111110	; RETROPUTER
   1486  29b0				  -
   1487  29b0				  -	      ifconst	fontcharsHEX
   1488  29b0				  -
   1489  29b0				  -			;byte %00000000  ; RETROPUTER
   1490  29b0				  -
   1491  29b0				  -	      .byte	%01100010	; RETROPUTER
   1492  29b0				  -	      .byte	%01100010	; RETROPUTER
   1493  29b0				  -	      .byte	%01100010	; RETROPUTER
   1494  29b0				  -	      .byte	%01000010	; RETROPUTER
   1495  29b0				  -	      .byte	%01111110	; RETROPUTER
   1496  29b0				  -	      .byte	%01000010	; RETROPUTER
   1497  29b0				  -	      .byte	%01000010	; RETROPUTER
   1498  29b0				  -	      .byte	%01111110	; RETROPUTER
   1499  29b0				  -
   1500  29b0				  -			;byte %00000000 ; RETROPUTER
   1501  29b0				  -
   1502  29b0				  -	      .byte	%01111110	; RETROPUTER
   1503  29b0				  -	      .byte	%01100010	; RETROPUTER
   1504  29b0				  -	      .byte	%01100010	; RETROPUTER
   1505  29b0				  -	      .byte	%01000010	; RETROPUTER
   1506  29b0				  -	      .byte	%01111100	; RETROPUTER
   1507  29b0				  -	      .byte	%01000010	; RETROPUTER
   1508  29b0				  -	      .byte	%01000010	; RETROPUTER
   1509  29b0				  -	      .byte	%01111110	; RETROPUTER
   1510  29b0				  -
   1511  29b0				  -			;byte %00000000 ; RETROPUTER
   1512  29b0				  -
   1513  29b0				  -	      .byte	%01111110	; RETROPUTER
   1514  29b0				  -	      .byte	%01100010	; RETROPUTER
   1515  29b0				  -	      .byte	%01100010	; RETROPUTER
   1516  29b0				  -	      .byte	%01100000	; RETROPUTER
   1517  29b0				  -	      .byte	%01000000	; RETROPUTER
   1518  29b0				  -	      .byte	%01000000	; RETROPUTER
   1519  29b0				  -	      .byte	%01000010	; RETROPUTER
   1520  29b0				  -	      .byte	%01111110	; RETROPUTER
   1521  29b0				  -
   1522  29b0				  -			;byte %00000000 ; RETROPUTER
   1523  29b0				  -
   1524  29b0				  -	      .byte	%01111100	; RETROPUTER
   1525  29b0				  -	      .byte	%01100010	; RETROPUTER
   1526  29b0				  -	      .byte	%01100010	; RETROPUTER
   1527  29b0				  -	      .byte	%01100010	; RETROPUTER
   1528  29b0				  -	      .byte	%01000010	; RETROPUTER
   1529  29b0				  -	      .byte	%01000010	; RETROPUTER
   1530  29b0				  -	      .byte	%01000010	; RETROPUTER
   1531  29b0				  -	      .byte	%01111100	; RETROPUTER
   1532  29b0				  -
   1533  29b0				  -			;byte %00000000 ; RETROPUTER
   1534  29b0				  -
   1535  29b0				  -	      .byte	%01111110	; RETROPUTER
   1536  29b0				  -	      .byte	%01100010	; RETROPUTER
   1537  29b0				  -	      .byte	%01100000	; RETROPUTER
   1538  29b0				  -	      .byte	%01000000	; RETROPUTER
   1539  29b0				  -	      .byte	%01111100	; RETROPUTER
   1540  29b0				  -	      .byte	%01000000	; RETROPUTER
   1541  29b0				  -	      .byte	%01000010	; RETROPUTER
   1542  29b0				  -	      .byte	%01111110	; RETROPUTER
   1543  29b0				  -
   1544  29b0				  -			;byte %00000000 ; RETROPUTER
   1545  29b0				  -
   1546  29b0				  -	      .byte	%01100000	; RETROPUTER
   1547  29b0				  -	      .byte	%01100000	; RETROPUTER
   1548  29b0				  -	      .byte	%01100000	; RETROPUTER
   1549  29b0				  -	      .byte	%01000000	; RETROPUTER
   1550  29b0				  -	      .byte	%01111100	; RETROPUTER
   1551  29b0				  -	      .byte	%01000000	; RETROPUTER
   1552  29b0				  -	      .byte	%01000010	; RETROPUTER
   1553  29b0				  -	      .byte	%01111110	; RETROPUTER
   1554  29b0				  -
   1555  29b0				  -			;byte %00000000 ; RETROPUTER
   1556  29b0				  -			;byte %00000000 ; RETROPUTER
   1557  29b0				  -			;byte %00000000 ; RETROPUTER
   1558  29b0				  -			;byte %00000000 ; RETROPUTER
   1559  29b0				  -
   1560  29b0				  -	      endif		; fontcharsHEX
   1561  29b0					      endif		; RETROPUTER
   1562  29b0
   1563  29b0				  -	      if	fontstyle == CURVES
   1564  29b0				  -
   1565  29b0				  -			;byte %00000000 ; CURVES
   1566  29b0				  -
   1567  29b0				  -	      .byte	%00111100	; CURVES
   1568  29b0				  -	      .byte	%01111110	; CURVES
   1569  29b0				  -	      .byte	%01100110	; CURVES
   1570  29b0				  -	      .byte	%01100110	; CURVES
   1571  29b0				  -	      .byte	%01100110	; CURVES
   1572  29b0				  -	      .byte	%01100110	; CURVES
   1573  29b0				  -	      .byte	%01111110	; CURVES
   1574  29b0				  -	      .byte	%00111100	; CURVES
   1575  29b0				  -
   1576  29b0				  -			;byte %00000000 ; CURVES
   1577  29b0				  -
   1578  29b0				  -	      .byte	%00011000	; CURVES
   1579  29b0				  -	      .byte	%00011000	; CURVES
   1580  29b0				  -	      .byte	%00011000	; CURVES
   1581  29b0				  -	      .byte	%00011000	; CURVES
   1582  29b0				  -	      .byte	%00011000	; CURVES
   1583  29b0				  -	      .byte	%00011000	; CURVES
   1584  29b0				  -	      .byte	%01111000	; CURVES
   1585  29b0				  -	      .byte	%01110000	; CURVES
   1586  29b0				  -
   1587  29b0				  -			;byte %00000000 ; CURVES
   1588  29b0				  -
   1589  29b0				  -	      .byte	%01111110	; CURVES
   1590  29b0				  -	      .byte	%01111110	; CURVES
   1591  29b0				  -	      .byte	%01100000	; CURVES
   1592  29b0				  -	      .byte	%01111100	; CURVES
   1593  29b0				  -	      .byte	%00111110	; CURVES
   1594  29b0				  -	      .byte	%00000110	; CURVES
   1595  29b0				  -	      .byte	%01111110	; CURVES
   1596  29b0				  -	      .byte	%01111100	; CURVES
   1597  29b0				  -
   1598  29b0				  -			;byte %00000000 ; CURVES
   1599  29b0				  -
   1600  29b0				  -	      .byte	%01111100	; CURVES
   1601  29b0				  -	      .byte	%01111110	; CURVES
   1602  29b0				  -	      .byte	%00001110	; CURVES
   1603  29b0				  -	      .byte	%00111100	; CURVES
   1604  29b0				  -	      .byte	%00111100	; CURVES
   1605  29b0				  -	      .byte	%00001110	; CURVES
   1606  29b0				  -	      .byte	%01111110	; CURVES
   1607  29b0				  -	      .byte	%01111100	; CURVES
   1608  29b0				  -
   1609  29b0				  -			;byte %00000000 ; CURVES
   1610  29b0				  -
   1611  29b0				  -	      .byte	%00000110	; CURVES
   1612  29b0				  -	      .byte	%00000110	; CURVES
   1613  29b0				  -	      .byte	%00111110	; CURVES
   1614  29b0				  -	      .byte	%01111110	; CURVES
   1615  29b0				  -	      .byte	%01100110	; CURVES
   1616  29b0				  -	      .byte	%01100110	; CURVES
   1617  29b0				  -	      .byte	%01100110	; CURVES
   1618  29b0				  -	      .byte	%01100110	; CURVES
   1619  29b0				  -
   1620  29b0				  -			;byte %00000000 ; CURVES
   1621  29b0				  -
   1622  29b0				  -	      .byte	%01111100	; CURVES
   1623  29b0				  -	      .byte	%01111110	; CURVES
   1624  29b0				  -	      .byte	%00000110	; CURVES
   1625  29b0				  -	      .byte	%01111110	; CURVES
   1626  29b0				  -	      .byte	%01111100	; CURVES
   1627  29b0				  -	      .byte	%01100000	; CURVES
   1628  29b0				  -	      .byte	%01111110	; CURVES
   1629  29b0				  -	      .byte	%01111110	; CURVES
   1630  29b0				  -
   1631  29b0				  -			;byte %00000000 ; CURVES
   1632  29b0				  -
   1633  29b0				  -	      .byte	%00111100	; CURVES
   1634  29b0				  -	      .byte	%01111110	; CURVES
   1635  29b0				  -	      .byte	%01100110	; CURVES
   1636  29b0				  -	      .byte	%01111110	; CURVES
   1637  29b0				  -	      .byte	%01111100	; CURVES
   1638  29b0				  -	      .byte	%01100000	; CURVES
   1639  29b0				  -	      .byte	%01111110	; CURVES
   1640  29b0				  -	      .byte	%00111110	; CURVES
   1641  29b0				  -
   1642  29b0				  -			;byte %00000000 ; CURVES
   1643  29b0				  -
   1644  29b0				  -	      .byte	%00000110	; CURVES
   1645  29b0				  -	      .byte	%00000110	; CURVES
   1646  29b0				  -	      .byte	%00000110	; CURVES
   1647  29b0				  -	      .byte	%00000110	; CURVES
   1648  29b0				  -	      .byte	%00000110	; CURVES
   1649  29b0				  -	      .byte	%01100110	; CURVES
   1650  29b0				  -	      .byte	%01111110	; CURVES
   1651  29b0				  -	      .byte	%00111100	; CURVES
   1652  29b0				  -
   1653  29b0				  -			;byte %00000000 ; CURVES
   1654  29b0				  -
   1655  29b0				  -	      .byte	%00111100	; CURVES
   1656  29b0				  -	      .byte	%01111110	; CURVES
   1657  29b0				  -	      .byte	%01100110	; CURVES
   1658  29b0				  -	      .byte	%01111110	; CURVES
   1659  29b0				  -	      .byte	%00111100	; CURVES
   1660  29b0				  -	      .byte	%01100110	; CURVES
   1661  29b0				  -	      .byte	%01111110	; CURVES
   1662  29b0				  -	      .byte	%00111100	; CURVES
   1663  29b0				  -
   1664  29b0				  -			;byte %00000000 ; CURVES
   1665  29b0				  -
   1666  29b0				  -	      .byte	%01111100	; CURVES
   1667  29b0				  -	      .byte	%01111110	; CURVES
   1668  29b0				  -	      .byte	%00000110	; CURVES
   1669  29b0				  -	      .byte	%00111110	; CURVES
   1670  29b0				  -	      .byte	%01111110	; CURVES
   1671  29b0				  -	      .byte	%01100110	; CURVES
   1672  29b0				  -	      .byte	%01111110	; CURVES
   1673  29b0				  -	      .byte	%00111100	; CURVES
   1674  29b0				  -
   1675  29b0				  -	      ifconst	fontcharsHEX
   1676  29b0				  -
   1677  29b0				  -			;byte %00000000 ; CURVES
   1678  29b0				  -
   1679  29b0				  -	      .byte	%01100110	; CURVES
   1680  29b0				  -	      .byte	%01100110	; CURVES
   1681  29b0				  -	      .byte	%01111110	; CURVES
   1682  29b0				  -	      .byte	%01111110	; CURVES
   1683  29b0				  -	      .byte	%01100110	; CURVES
   1684  29b0				  -	      .byte	%01100110	; CURVES
   1685  29b0				  -	      .byte	%01111110	; CURVES
   1686  29b0				  -	      .byte	%00111100	; CURVES
   1687  29b0				  -
   1688  29b0				  -			;byte %00000000 ; CURVES
   1689  29b0				  -
   1690  29b0				  -	      .byte	%01111100	; CURVES
   1691  29b0				  -	      .byte	%01111110	; CURVES
   1692  29b0				  -	      .byte	%01100110	; CURVES
   1693  29b0				  -	      .byte	%01111110	; CURVES
   1694  29b0				  -	      .byte	%01111100	; CURVES
   1695  29b0				  -	      .byte	%01100110	; CURVES
   1696  29b0				  -	      .byte	%01111110	; CURVES
   1697  29b0				  -	      .byte	%01111100	; CURVES
   1698  29b0				  -
   1699  29b0				  -			;byte %00000000 ; CURVES
   1700  29b0				  -
   1701  29b0				  -	      .byte	%00111110	; CURVES
   1702  29b0				  -	      .byte	%01111110	; CURVES
   1703  29b0				  -	      .byte	%01100000	; CURVES
   1704  29b0				  -	      .byte	%01100000	; CURVES
   1705  29b0				  -	      .byte	%01100000	; CURVES
   1706  29b0				  -	      .byte	%01100000	; CURVES
   1707  29b0				  -	      .byte	%01111110	; CURVES
   1708  29b0				  -	      .byte	%00111110	; CURVES
   1709  29b0				  -
   1710  29b0				  -			;byte %00000000 ; CURVES
   1711  29b0				  -
   1712  29b0				  -	      .byte	%01111100	; CURVES
   1713  29b0				  -	      .byte	%01111110	; CURVES
   1714  29b0				  -	      .byte	%01100110	; CURVES
   1715  29b0				  -	      .byte	%01100110	; CURVES
   1716  29b0				  -	      .byte	%01100110	; CURVES
   1717  29b0				  -	      .byte	%01100110	; CURVES
   1718  29b0				  -	      .byte	%01111110	; CURVES
   1719  29b0				  -	      .byte	%01111100	; CURVES
   1720  29b0				  -
   1721  29b0				  -			;byte %00000000 ; CURVES
   1722  29b0				  -
   1723  29b0				  -	      .byte	%00111110	; CURVES
   1724  29b0				  -	      .byte	%01111110	; CURVES
   1725  29b0				  -	      .byte	%01100000	; CURVES
   1726  29b0				  -	      .byte	%01111100	; CURVES
   1727  29b0				  -	      .byte	%01111100	; CURVES
   1728  29b0				  -	      .byte	%01100000	; CURVES
   1729  29b0				  -	      .byte	%01111110	; CURVES
   1730  29b0				  -	      .byte	%00111110	; CURVES
   1731  29b0				  -
   1732  29b0				  -			;byte %00000000 ; CURVES
   1733  29b0				  -
   1734  29b0				  -	      .byte	%01100000	; CURVES
   1735  29b0				  -	      .byte	%01100000	; CURVES
   1736  29b0				  -	      .byte	%01100000	; CURVES
   1737  29b0				  -	      .byte	%01111100	; CURVES
   1738  29b0				  -	      .byte	%01111100	; CURVES
   1739  29b0				  -	      .byte	%01100000	; CURVES
   1740  29b0				  -	      .byte	%01111110	; CURVES
   1741  29b0				  -	      .byte	%00111110	; CURVES
   1742  29b0				  -
   1743  29b0				  -			;byte %00000000 ; CURVES
   1744  29b0				  -			;byte %00000000 ; CURVES
   1745  29b0				  -			;byte %00000000 ; CURVES
   1746  29b0				  -			;byte %00000000 ; CURVES
   1747  29b0				  -
   1748  29b0				  -	      endif		; fontcharsHEX 
   1749  29b0					      endif		; CURVES
   1750  29b0
   1751  29b0
   1752  29b0				  -	      if	fontstyle == HUSKY
   1753  29b0				  -
   1754  29b0				  -			;byte %00000000 ; HUSKY
   1755  29b0				  -
   1756  29b0				  -	      .byte	%01111100	; HUSKY
   1757  29b0				  -	      .byte	%11111110	; HUSKY
   1758  29b0				  -	      .byte	%11101110	; HUSKY
   1759  29b0				  -	      .byte	%11101110	; HUSKY
   1760  29b0				  -	      .byte	%11101110	; HUSKY
   1761  29b0				  -	      .byte	%11101110	; HUSKY
   1762  29b0				  -	      .byte	%11111110	; HUSKY
   1763  29b0				  -	      .byte	%01111100	; HUSKY
   1764  29b0				  -
   1765  29b0				  -			;byte %00000000 ; HUSKY
   1766  29b0				  -
   1767  29b0				  -	      .byte	%00111000	; HUSKY
   1768  29b0				  -	      .byte	%00111000	; HUSKY
   1769  29b0				  -	      .byte	%00111000	; HUSKY
   1770  29b0				  -	      .byte	%00111000	; HUSKY
   1771  29b0				  -	      .byte	%00111000	; HUSKY
   1772  29b0				  -	      .byte	%00111000	; HUSKY
   1773  29b0				  -	      .byte	%00111000	; HUSKY
   1774  29b0				  -	      .byte	%00111000	; HUSKY
   1775  29b0				  -
   1776  29b0				  -			;byte %00000000 ; HUSKY
   1777  29b0				  -
   1778  29b0				  -	      .byte	%11111110	; HUSKY
   1779  29b0				  -	      .byte	%11111110	; HUSKY
   1780  29b0				  -	      .byte	%11100000	; HUSKY
   1781  29b0				  -	      .byte	%11111100	; HUSKY
   1782  29b0				  -	      .byte	%01111110	; HUSKY
   1783  29b0				  -	      .byte	%00001110	; HUSKY
   1784  29b0				  -	      .byte	%11111110	; HUSKY
   1785  29b0				  -	      .byte	%11111100	; HUSKY
   1786  29b0				  -
   1787  29b0				  -			;byte %00000000 ; HUSKY
   1788  29b0				  -
   1789  29b0				  -	      .byte	%11111100	; HUSKY
   1790  29b0				  -	      .byte	%11111110	; HUSKY
   1791  29b0				  -	      .byte	%00001110	; HUSKY
   1792  29b0				  -	      .byte	%11111100	; HUSKY
   1793  29b0				  -	      .byte	%11111100	; HUSKY
   1794  29b0				  -	      .byte	%00001110	; HUSKY
   1795  29b0				  -	      .byte	%11111110	; HUSKY
   1796  29b0				  -	      .byte	%11111100	; HUSKY
   1797  29b0				  -
   1798  29b0				  -			;byte %00000000 ; HUSKY
   1799  29b0				  -
   1800  29b0				  -	      .byte	%00011100	; HUSKY
   1801  29b0				  -	      .byte	%00011100	; HUSKY
   1802  29b0				  -	      .byte	%11111110	; HUSKY
   1803  29b0				  -	      .byte	%11111110	; HUSKY
   1804  29b0				  -	      .byte	%11011100	; HUSKY
   1805  29b0				  -	      .byte	%11011100	; HUSKY
   1806  29b0				  -	      .byte	%00011100	; HUSKY
   1807  29b0				  -	      .byte	%00011100	; HUSKY
   1808  29b0				  -
   1809  29b0				  -			;byte %00000000 ; HUSKY
   1810  29b0				  -
   1811  29b0				  -	      .byte	%11111100	; HUSKY
   1812  29b0				  -	      .byte	%11111110	; HUSKY
   1813  29b0				  -	      .byte	%00001110	; HUSKY
   1814  29b0				  -	      .byte	%11111110	; HUSKY
   1815  29b0				  -	      .byte	%11111100	; HUSKY
   1816  29b0				  -	      .byte	%11100000	; HUSKY
   1817  29b0				  -	      .byte	%11111110	; HUSKY
   1818  29b0				  -	      .byte	%11111110	; HUSKY
   1819  29b0				  -
   1820  29b0				  -			;byte %00000000 ; HUSKY
   1821  29b0				  -
   1822  29b0				  -	      .byte	%01111100	; HUSKY
   1823  29b0				  -	      .byte	%11111110	; HUSKY
   1824  29b0				  -	      .byte	%11101110	; HUSKY
   1825  29b0				  -	      .byte	%11111110	; HUSKY
   1826  29b0				  -	      .byte	%11111100	; HUSKY
   1827  29b0				  -	      .byte	%11100000	; HUSKY
   1828  29b0				  -	      .byte	%11111110	; HUSKY
   1829  29b0				  -	      .byte	%01111110	; HUSKY
   1830  29b0				  -
   1831  29b0				  -			;byte %00000000 ; HUSKY
   1832  29b0				  -
   1833  29b0				  -	      .byte	%00111000	; HUSKY
   1834  29b0				  -	      .byte	%00111000	; HUSKY
   1835  29b0				  -	      .byte	%00111000	; HUSKY
   1836  29b0				  -	      .byte	%00111000	; HUSKY
   1837  29b0				  -	      .byte	%00011100	; HUSKY
   1838  29b0				  -	      .byte	%00001110	; HUSKY
   1839  29b0				  -	      .byte	%11111110	; HUSKY
   1840  29b0				  -	      .byte	%11111110	; HUSKY
   1841  29b0				  -
   1842  29b0				  -			;byte %00000000 ; HUSKY
   1843  29b0				  -
   1844  29b0				  -	      .byte	%01111100	; HUSKY
   1845  29b0				  -	      .byte	%11111110	; HUSKY
   1846  29b0				  -	      .byte	%11101110	; HUSKY
   1847  29b0				  -	      .byte	%11111110	; HUSKY
   1848  29b0				  -	      .byte	%01111100	; HUSKY
   1849  29b0				  -	      .byte	%11101110	; HUSKY
   1850  29b0				  -	      .byte	%11111110	; HUSKY
   1851  29b0				  -	      .byte	%01111100	; HUSKY
   1852  29b0				  -
   1853  29b0				  -			;byte %00000000 ; HUSKY
   1854  29b0				  -
   1855  29b0				  -	      .byte	%11111100	; HUSKY
   1856  29b0				  -	      .byte	%11111110	; HUSKY
   1857  29b0				  -	      .byte	%00001110	; HUSKY
   1858  29b0				  -	      .byte	%01111110	; HUSKY
   1859  29b0				  -	      .byte	%11111110	; HUSKY
   1860  29b0				  -	      .byte	%11101110	; HUSKY
   1861  29b0				  -	      .byte	%11111110	; HUSKY
   1862  29b0				  -	      .byte	%01111100	; HUSKY
   1863  29b0				  -
   1864  29b0				  -	      ifconst	fontcharsHEX
   1865  29b0				  -
   1866  29b0				  -			;byte %00000000 ; HUSKY
   1867  29b0				  -
   1868  29b0				  -	      .byte	%11101110	; HUSKY
   1869  29b0				  -	      .byte	%11101110	; HUSKY
   1870  29b0				  -	      .byte	%11111110	; HUSKY
   1871  29b0				  -	      .byte	%11111110	; HUSKY
   1872  29b0				  -	      .byte	%11101110	; HUSKY
   1873  29b0				  -	      .byte	%11111110	; HUSKY
   1874  29b0				  -	      .byte	%01111100	; HUSKY
   1875  29b0				  -	      .byte	%00111000	; HUSKY
   1876  29b0				  -
   1877  29b0				  -			;byte %00000000 ; HUSKY
   1878  29b0				  -
   1879  29b0				  -	      .byte	%11111100	; HUSKY
   1880  29b0				  -	      .byte	%11111110	; HUSKY
   1881  29b0				  -	      .byte	%11101110	; HUSKY
   1882  29b0				  -	      .byte	%11111110	; HUSKY
   1883  29b0				  -	      .byte	%11111100	; HUSKY
   1884  29b0				  -	      .byte	%11101110	; HUSKY
   1885  29b0				  -	      .byte	%11111110	; HUSKY
   1886  29b0				  -	      .byte	%11111100	; HUSKY
   1887  29b0				  -
   1888  29b0				  -			;byte %00000000 ; HUSKY
   1889  29b0				  -
   1890  29b0				  -	      .byte	%01111110	; HUSKY
   1891  29b0				  -	      .byte	%11111110	; HUSKY
   1892  29b0				  -	      .byte	%11110000	; HUSKY
   1893  29b0				  -	      .byte	%11100000	; HUSKY
   1894  29b0				  -	      .byte	%11100000	; HUSKY
   1895  29b0				  -	      .byte	%11110000	; HUSKY
   1896  29b0				  -	      .byte	%11111110	; HUSKY
   1897  29b0				  -	      .byte	%01111110	; HUSKY
   1898  29b0				  -
   1899  29b0				  -			;byte %00000000 ; HUSKY
   1900  29b0				  -
   1901  29b0				  -	      .byte	%11111000	; HUSKY
   1902  29b0				  -	      .byte	%11111100	; HUSKY
   1903  29b0				  -	      .byte	%11111110	; HUSKY
   1904  29b0				  -	      .byte	%11101110	; HUSKY
   1905  29b0				  -	      .byte	%11101110	; HUSKY
   1906  29b0				  -	      .byte	%11111110	; HUSKY
   1907  29b0				  -	      .byte	%11111100	; HUSKY
   1908  29b0				  -	      .byte	%11111000	; HUSKY
   1909  29b0				  -
   1910  29b0				  -			;byte %00000000 ; HUSKY
   1911  29b0				  -
   1912  29b0				  -	      .byte	%11111110	; HUSKY
   1913  29b0				  -	      .byte	%11111110	; HUSKY
   1914  29b0				  -	      .byte	%11100000	; HUSKY
   1915  29b0				  -	      .byte	%11111110	; HUSKY
   1916  29b0				  -	      .byte	%11111110	; HUSKY
   1917  29b0				  -	      .byte	%11100000	; HUSKY
   1918  29b0				  -	      .byte	%11111110	; HUSKY
   1919  29b0				  -	      .byte	%11111110	; HUSKY
   1920  29b0				  -
   1921  29b0				  -			;byte %00000000 ; HUSKY
   1922  29b0				  -
   1923  29b0				  -	      .byte	%11100000	; HUSKY
   1924  29b0				  -	      .byte	%11100000	; HUSKY
   1925  29b0				  -	      .byte	%11100000	; HUSKY
   1926  29b0				  -	      .byte	%11111110	; HUSKY
   1927  29b0				  -	      .byte	%11111110	; HUSKY
   1928  29b0				  -	      .byte	%11100000	; HUSKY
   1929  29b0				  -	      .byte	%11111110	; HUSKY
   1930  29b0				  -	      .byte	%11111110	; HUSKY
   1931  29b0				  -
   1932  29b0				  -			;byte %00000000 ; HUSKY
   1933  29b0				  -			;byte %00000000 ; HUSKY
   1934  29b0				  -			;byte %00000000 ; HUSKY
   1935  29b0				  -			;byte %00000000 ; HUSKY
   1936  29b0				  -
   1937  29b0				  -	      endif		; fontcharsHEX 
   1938  29b0					      endif		; HUSKY
   1939  29b0
   1940  29b0
   1941  29b0				  -	      if	fontstyle == SNAKE
   1942  29b0				  -
   1943  29b0				  -			;byte %00000000 ; SNAKE
   1944  29b0				  -
   1945  29b0				  -	      .byte	%01111110	; SNAKE
   1946  29b0				  -	      .byte	%01000010	; SNAKE
   1947  29b0				  -	      .byte	%01000010	; SNAKE
   1948  29b0				  -	      .byte	%01000010	; SNAKE
   1949  29b0				  -	      .byte	%01000010	; SNAKE
   1950  29b0				  -	      .byte	%01000010	; SNAKE
   1951  29b0				  -	      .byte	%01000010	; SNAKE
   1952  29b0				  -	      .byte	%01111110	; SNAKE
   1953  29b0				  -
   1954  29b0				  -			;byte %00000000 ; SNAKE
   1955  29b0				  -
   1956  29b0				  -	      .byte	%00111000	; SNAKE
   1957  29b0				  -	      .byte	%00101000	; SNAKE
   1958  29b0				  -	      .byte	%00001000	; SNAKE
   1959  29b0				  -	      .byte	%00001000	; SNAKE
   1960  29b0				  -	      .byte	%00001000	; SNAKE
   1961  29b0				  -	      .byte	%00001000	; SNAKE
   1962  29b0				  -	      .byte	%00001000	; SNAKE
   1963  29b0				  -	      .byte	%00111000	; SNAKE
   1964  29b0				  -
   1965  29b0				  -			;byte %00000000 ; SNAKE
   1966  29b0				  -
   1967  29b0				  -	      .byte	%01111110	; SNAKE
   1968  29b0				  -	      .byte	%01000010	; SNAKE
   1969  29b0				  -	      .byte	%01000110	; SNAKE
   1970  29b0				  -	      .byte	%01000000	; SNAKE
   1971  29b0				  -	      .byte	%01111110	; SNAKE
   1972  29b0				  -	      .byte	%00000010	; SNAKE
   1973  29b0				  -	      .byte	%01000010	; SNAKE
   1974  29b0				  -	      .byte	%01111110	; SNAKE
   1975  29b0				  -
   1976  29b0				  -			;byte %00000000 ; SNAKE
   1977  29b0				  -
   1978  29b0				  -	      .byte	%01111110	; SNAKE
   1979  29b0				  -	      .byte	%01000010	; SNAKE
   1980  29b0				  -	      .byte	%01100010	; SNAKE
   1981  29b0				  -	      .byte	%00000010	; SNAKE
   1982  29b0				  -	      .byte	%01111110	; SNAKE
   1983  29b0				  -	      .byte	%00000010	; SNAKE
   1984  29b0				  -	      .byte	%01000010	; SNAKE
   1985  29b0				  -	      .byte	%01111110	; SNAKE
   1986  29b0				  -
   1987  29b0				  -			;byte %00000000 ; SNAKE
   1988  29b0				  -
   1989  29b0				  -	      .byte	%00001110	; SNAKE
   1990  29b0				  -	      .byte	%00001010	; SNAKE
   1991  29b0				  -	      .byte	%00000010	; SNAKE
   1992  29b0				  -	      .byte	%01111110	; SNAKE
   1993  29b0				  -	      .byte	%01000010	; SNAKE
   1994  29b0				  -	      .byte	%01000010	; SNAKE
   1995  29b0				  -	      .byte	%01000010	; SNAKE
   1996  29b0				  -	      .byte	%01100110	; SNAKE
   1997  29b0				  -
   1998  29b0				  -			;byte %00000000 ; SNAKE
   1999  29b0				  -
   2000  29b0				  -	      .byte	%01111110	; SNAKE
   2001  29b0				  -	      .byte	%01000010	; SNAKE
   2002  29b0				  -	      .byte	%01100010	; SNAKE
   2003  29b0				  -	      .byte	%00000010	; SNAKE
   2004  29b0				  -	      .byte	%01111110	; SNAKE
   2005  29b0				  -	      .byte	%01000000	; SNAKE
   2006  29b0				  -	      .byte	%01000010	; SNAKE
   2007  29b0				  -	      .byte	%01111110	; SNAKE
   2008  29b0				  -
   2009  29b0				  -			;byte %00000000 ; SNAKE
   2010  29b0				  -
   2011  29b0				  -	      .byte	%01111110	; SNAKE
   2012  29b0				  -	      .byte	%01000010	; SNAKE
   2013  29b0				  -	      .byte	%01000010	; SNAKE
   2014  29b0				  -	      .byte	%01111110	; SNAKE
   2015  29b0				  -	      .byte	%01000000	; SNAKE
   2016  29b0				  -	      .byte	%01000110	; SNAKE
   2017  29b0				  -	      .byte	%01000010	; SNAKE
   2018  29b0				  -	      .byte	%01111110	; SNAKE
   2019  29b0				  -
   2020  29b0				  -			;byte %00000000 ; SNAKE
   2021  29b0				  -
   2022  29b0				  -	      .byte	%00000110	; SNAKE
   2023  29b0				  -	      .byte	%00000010	; SNAKE
   2024  29b0				  -	      .byte	%00000010	; SNAKE
   2025  29b0				  -	      .byte	%00000010	; SNAKE
   2026  29b0				  -	      .byte	%00000010	; SNAKE
   2027  29b0				  -	      .byte	%01100010	; SNAKE
   2028  29b0				  -	      .byte	%01000010	; SNAKE
   2029  29b0				  -	      .byte	%01111110	; SNAKE
   2030  29b0				  -
   2031  29b0				  -			;byte %00000000 ; SNAKE
   2032  29b0				  -
   2033  29b0				  -	      .byte	%01111110	; SNAKE
   2034  29b0				  -	      .byte	%01000010	; SNAKE
   2035  29b0				  -	      .byte	%01000010	; SNAKE
   2036  29b0				  -	      .byte	%01000010	; SNAKE
   2037  29b0				  -	      .byte	%01111110	; SNAKE
   2038  29b0				  -	      .byte	%01000010	; SNAKE
   2039  29b0				  -	      .byte	%01000010	; SNAKE
   2040  29b0				  -	      .byte	%01111110	; SNAKE
   2041  29b0				  -
   2042  29b0				  -			;byte %00000000 ; SNAKE
   2043  29b0				  -
   2044  29b0				  -	      .byte	%00001110	; SNAKE
   2045  29b0				  -	      .byte	%00001010	; SNAKE
   2046  29b0				  -	      .byte	%00000010	; SNAKE
   2047  29b0				  -	      .byte	%00000010	; SNAKE
   2048  29b0				  -	      .byte	%01111110	; SNAKE
   2049  29b0				  -	      .byte	%01000010	; SNAKE
   2050  29b0				  -	      .byte	%01000010	; SNAKE
   2051  29b0				  -	      .byte	%01111110	; SNAKE
   2052  29b0				  -
   2053  29b0				  -
   2054  29b0				  -	      ifconst	fontcharsHEX
   2055  29b0				  -
   2056  29b0				  -			;byte %00000000 ; SNAKE
   2057  29b0				  -
   2058  29b0				  -	      .byte	%01100110	; SNAKE
   2059  29b0				  -	      .byte	%01000010	; SNAKE
   2060  29b0				  -	      .byte	%01000010	; SNAKE
   2061  29b0				  -	      .byte	%01000010	; SNAKE
   2062  29b0				  -	      .byte	%01111110	; SNAKE
   2063  29b0				  -	      .byte	%01000010	; SNAKE
   2064  29b0				  -	      .byte	%01000010	; SNAKE
   2065  29b0				  -	      .byte	%01111110	; SNAKE
   2066  29b0				  -
   2067  29b0				  -			;byte %00000000 ; SNAKE
   2068  29b0				  -
   2069  29b0				  -	      .byte	%01111110	; SNAKE
   2070  29b0				  -	      .byte	%01000010	; SNAKE
   2071  29b0				  -	      .byte	%01000010	; SNAKE
   2072  29b0				  -	      .byte	%01000110	; SNAKE
   2073  29b0				  -	      .byte	%01111100	; SNAKE
   2074  29b0				  -	      .byte	%01000110	; SNAKE
   2075  29b0				  -	      .byte	%01000010	; SNAKE
   2076  29b0				  -	      .byte	%01111110	; SNAKE
   2077  29b0				  -
   2078  29b0				  -			;byte %00000000 ; SNAKE
   2079  29b0				  -
   2080  29b0				  -	      .byte	%01111110	; SNAKE
   2081  29b0				  -	      .byte	%01000010	; SNAKE
   2082  29b0				  -	      .byte	%01000110	; SNAKE
   2083  29b0				  -	      .byte	%01000000	; SNAKE
   2084  29b0				  -	      .byte	%01000000	; SNAKE
   2085  29b0				  -	      .byte	%01000110	; SNAKE
   2086  29b0				  -	      .byte	%01000010	; SNAKE
   2087  29b0				  -	      .byte	%01111110	; SNAKE
   2088  29b0				  -
   2089  29b0				  -			;byte %00000000 ; SNAKE
   2090  29b0				  -
   2091  29b0				  -	      .byte	%01111100	; SNAKE
   2092  29b0				  -	      .byte	%01000110	; SNAKE
   2093  29b0				  -	      .byte	%01000010	; SNAKE
   2094  29b0				  -	      .byte	%01000010	; SNAKE
   2095  29b0				  -	      .byte	%01000010	; SNAKE
   2096  29b0				  -	      .byte	%01000010	; SNAKE
   2097  29b0				  -	      .byte	%01000110	; SNAKE
   2098  29b0				  -	      .byte	%01111100	; SNAKE
   2099  29b0				  -
   2100  29b0				  -			;byte %00000000 ; SNAKE
   2101  29b0				  -
   2102  29b0				  -	      .byte	%01111110	; SNAKE
   2103  29b0				  -	      .byte	%01000010	; SNAKE
   2104  29b0				  -	      .byte	%01000110	; SNAKE
   2105  29b0				  -	      .byte	%01000000	; SNAKE
   2106  29b0				  -	      .byte	%01111000	; SNAKE
   2107  29b0				  -	      .byte	%01000000	; SNAKE
   2108  29b0				  -	      .byte	%01000010	; SNAKE
   2109  29b0				  -	      .byte	%01111110	; SNAKE
   2110  29b0				  -
   2111  29b0				  -			;byte %00000000 ; SNAKE
   2112  29b0				  -
   2113  29b0				  -	      .byte	%01000000	; SNAKE
   2114  29b0				  -	      .byte	%01000000	; SNAKE
   2115  29b0				  -	      .byte	%01000000	; SNAKE
   2116  29b0				  -	      .byte	%01000000	; SNAKE
   2117  29b0				  -	      .byte	%01111000	; SNAKE
   2118  29b0				  -	      .byte	%01000000	; SNAKE
   2119  29b0				  -	      .byte	%01000010	; SNAKE
   2120  29b0				  -	      .byte	%01111110	; SNAKE
   2121  29b0				  -
   2122  29b0				  -			;byte %00000000 ; SNAKE
   2123  29b0				  -			;byte %00000000 ; SNAKE
   2124  29b0				  -			;byte %00000000 ; SNAKE
   2125  29b0				  -			;byte %00000000 ; SNAKE
   2126  29b0				  -
   2127  29b0				  -	      endif		; fontcharsHEX 
   2128  29b0					      endif		; SNAKE
   2129  29b0
   2130  29b0				  -	      if	fontstyle == PLOK
   2131  29b0				  -
   2132  29b0				  -			;byte %00000000 ; PLOK
   2133  29b0				  -
   2134  29b0				  -	      .byte	%00000000	; PLOK
   2135  29b0				  -	      .byte	%00111000	; PLOK
   2136  29b0				  -	      .byte	%01100100	; PLOK
   2137  29b0				  -	      .byte	%01100010	; PLOK
   2138  29b0				  -	      .byte	%01100010	; PLOK
   2139  29b0				  -	      .byte	%00110110	; PLOK
   2140  29b0				  -	      .byte	%00011100	; PLOK
   2141  29b0				  -	      .byte	%00000000	; PLOK
   2142  29b0				  -
   2143  29b0				  -			;byte %00000000 ; PLOK
   2144  29b0				  -
   2145  29b0				  -	      .byte	%00000000	; PLOK
   2146  29b0				  -	      .byte	%00010000	; PLOK
   2147  29b0				  -	      .byte	%00011100	; PLOK
   2148  29b0				  -	      .byte	%00011100	; PLOK
   2149  29b0				  -	      .byte	%00011000	; PLOK
   2150  29b0				  -	      .byte	%00111000	; PLOK
   2151  29b0				  -	      .byte	%00011000	; PLOK
   2152  29b0				  -	      .byte	%00000000	; PLOK
   2153  29b0				  -
   2154  29b0				  -			;byte %00000000 ; PLOK
   2155  29b0				  -
   2156  29b0				  -	      .byte	%00000000	; PLOK
   2157  29b0				  -	      .byte	%00001110	; PLOK
   2158  29b0				  -	      .byte	%01111110	; PLOK
   2159  29b0				  -	      .byte	%00011000	; PLOK
   2160  29b0				  -	      .byte	%00001100	; PLOK
   2161  29b0				  -	      .byte	%00000110	; PLOK
   2162  29b0				  -	      .byte	%00111100	; PLOK
   2163  29b0				  -	      .byte	%00000000	; PLOK
   2164  29b0				  -
   2165  29b0				  -			;byte %00000000 ; PLOK
   2166  29b0				  -
   2167  29b0				  -	      .byte	%00000000	; PLOK
   2168  29b0				  -	      .byte	%00111100	; PLOK
   2169  29b0				  -	      .byte	%01101110	; PLOK
   2170  29b0				  -	      .byte	%00001110	; PLOK
   2171  29b0				  -	      .byte	%00011100	; PLOK
   2172  29b0				  -	      .byte	%00000110	; PLOK
   2173  29b0				  -	      .byte	%01111100	; PLOK
   2174  29b0				  -	      .byte	%00000000	; PLOK
   2175  29b0				  -
   2176  29b0				  -			;byte %00000000 ; PLOK
   2177  29b0				  -
   2178  29b0				  -	      .byte	%00000000	; PLOK
   2179  29b0				  -	      .byte	%00011000	; PLOK
   2180  29b0				  -	      .byte	%01111110	; PLOK
   2181  29b0				  -	      .byte	%01101100	; PLOK
   2182  29b0				  -	      .byte	%00100100	; PLOK
   2183  29b0				  -	      .byte	%00110000	; PLOK
   2184  29b0				  -	      .byte	%00110000	; PLOK
   2185  29b0				  -	      .byte	%00000000	; PLOK
   2186  29b0				  -
   2187  29b0				  -			;byte %00000000 ; PLOK
   2188  29b0				  -
   2189  29b0				  -	      .byte	%00000000	; PLOK
   2190  29b0				  -	      .byte	%00111100	; PLOK
   2191  29b0				  -	      .byte	%01001110	; PLOK
   2192  29b0				  -	      .byte	%00011100	; PLOK
   2193  29b0				  -	      .byte	%01100000	; PLOK
   2194  29b0				  -	      .byte	%01111100	; PLOK
   2195  29b0				  -	      .byte	%00011100	; PLOK
   2196  29b0				  -	      .byte	%00000000	; PLOK
   2197  29b0				  -
   2198  29b0				  -			;byte %00000000 ; PLOK
   2199  29b0				  -
   2200  29b0				  -	      .byte	%00000000	; PLOK
   2201  29b0				  -	      .byte	%00111100	; PLOK
   2202  29b0				  -	      .byte	%01000110	; PLOK
   2203  29b0				  -	      .byte	%01101100	; PLOK
   2204  29b0				  -	      .byte	%01110000	; PLOK
   2205  29b0				  -	      .byte	%00111000	; PLOK
   2206  29b0				  -	      .byte	%00010000	; PLOK
   2207  29b0				  -	      .byte	%00000000	; PLOK
   2208  29b0				  -
   2209  29b0				  -			;byte %00000000 ; PLOK
   2210  29b0				  -
   2211  29b0				  -	      .byte	%00000000	; PLOK
   2212  29b0				  -	      .byte	%00111100	; PLOK
   2213  29b0				  -	      .byte	%00011100	; PLOK
   2214  29b0				  -	      .byte	%00001100	; PLOK
   2215  29b0				  -	      .byte	%00000110	; PLOK
   2216  29b0				  -	      .byte	%01111110	; PLOK
   2217  29b0				  -	      .byte	%00110000	; PLOK
   2218  29b0				  -	      .byte	%00000000	; PLOK
   2219  29b0				  -
   2220  29b0				  -			;byte %00000000 ; PLOK
   2221  29b0				  -
   2222  29b0				  -	      .byte	%00000000	; PLOK
   2223  29b0				  -	      .byte	%00111100	; PLOK
   2224  29b0				  -	      .byte	%01001110	; PLOK
   2225  29b0				  -	      .byte	%01101110	; PLOK
   2226  29b0				  -	      .byte	%00111100	; PLOK
   2227  29b0				  -	      .byte	%01100100	; PLOK
   2228  29b0				  -	      .byte	%00111000	; PLOK
   2229  29b0				  -	      .byte	%00000000	; PLOK
   2230  29b0				  -
   2231  29b0				  -			;byte %00000000 ; PLOK
   2232  29b0				  -
   2233  29b0				  -	      .byte	%00000000	; PLOK
   2234  29b0				  -	      .byte	%00011000	; PLOK
   2235  29b0				  -	      .byte	%00001100	; PLOK
   2236  29b0				  -	      .byte	%00011100	; PLOK
   2237  29b0				  -	      .byte	%00100110	; PLOK
   2238  29b0				  -	      .byte	%01001110	; PLOK
   2239  29b0				  -	      .byte	%00111100	; PLOK
   2240  29b0				  -	      .byte	%00000000	; PLOK
   2241  29b0				  -
   2242  29b0				  -	      ifconst	fontcharsHEX
   2243  29b0				  -
   2244  29b0				  -			;byte %00000000 ; PLOK
   2245  29b0				  -
   2246  29b0				  -	      .byte	%00000000	; PLOK
   2247  29b0				  -	      .byte	%01100010	; PLOK
   2248  29b0				  -	      .byte	%01100110	; PLOK
   2249  29b0				  -	      .byte	%01111110	; PLOK
   2250  29b0				  -	      .byte	%00101100	; PLOK
   2251  29b0				  -	      .byte	%00101000	; PLOK
   2252  29b0				  -	      .byte	%00110000	; PLOK
   2253  29b0				  -	      .byte	%00000000	; PLOK
   2254  29b0				  -
   2255  29b0				  -			;byte %00000000 ; PLOK
   2256  29b0				  -
   2257  29b0				  -	      .byte	%00000000	; PLOK
   2258  29b0				  -	      .byte	%01111100	; PLOK
   2259  29b0				  -	      .byte	%00110010	; PLOK
   2260  29b0				  -	      .byte	%00110110	; PLOK
   2261  29b0				  -	      .byte	%00111100	; PLOK
   2262  29b0				  -	      .byte	%00110110	; PLOK
   2263  29b0				  -	      .byte	%01111100	; PLOK
   2264  29b0				  -	      .byte	%00000000	; PLOK
   2265  29b0				  -
   2266  29b0				  -			;byte %00000000 ; PLOK
   2267  29b0				  -
   2268  29b0				  -	      .byte	%00000000	; PLOK
   2269  29b0				  -	      .byte	%00111100	; PLOK
   2270  29b0				  -	      .byte	%01100110	; PLOK
   2271  29b0				  -	      .byte	%01100000	; PLOK
   2272  29b0				  -	      .byte	%01100100	; PLOK
   2273  29b0				  -	      .byte	%00101110	; PLOK
   2274  29b0				  -	      .byte	%00011100	; PLOK
   2275  29b0				  -	      .byte	%00000000	; PLOK
   2276  29b0				  -
   2277  29b0				  -			;byte %00000000 ; PLOK
   2278  29b0				  -
   2279  29b0				  -	      .byte	%00000000	; PLOK
   2280  29b0				  -	      .byte	%01111100	; PLOK
   2281  29b0				  -	      .byte	%00110010	; PLOK
   2282  29b0				  -	      .byte	%00110010	; PLOK
   2283  29b0				  -	      .byte	%00110110	; PLOK
   2284  29b0				  -	      .byte	%01111100	; PLOK
   2285  29b0				  -	      .byte	%01111000	; PLOK
   2286  29b0				  -	      .byte	%00000000	; PLOK
   2287  29b0				  -
   2288  29b0				  -			;byte %00000000 ; PLOK
   2289  29b0				  -
   2290  29b0				  -	      .byte	%00000000	; PLOK
   2291  29b0				  -	      .byte	%01111110	; PLOK
   2292  29b0				  -	      .byte	%00110000	; PLOK
   2293  29b0				  -	      .byte	%00111000	; PLOK
   2294  29b0				  -	      .byte	%00111100	; PLOK
   2295  29b0				  -	      .byte	%00110000	; PLOK
   2296  29b0				  -	      .byte	%01111110	; PLOK
   2297  29b0				  -	      .byte	%00000000	; PLOK
   2298  29b0				  -
   2299  29b0				  -			;byte %00000000 ; PLOK
   2300  29b0				  -
   2301  29b0				  -	      .byte	%00000000	; PLOK
   2302  29b0				  -	      .byte	%01100000	; PLOK
   2303  29b0				  -	      .byte	%01100000	; PLOK
   2304  29b0				  -	      .byte	%00111000	; PLOK
   2305  29b0				  -	      .byte	%00100000	; PLOK
   2306  29b0				  -	      .byte	%01111110	; PLOK
   2307  29b0				  -	      .byte	%00011100	; PLOK
   2308  29b0				  -	      .byte	%00000000	; PLOK
   2309  29b0				  -
   2310  29b0				  -			;byte %00000000 ; PLOK
   2311  29b0				  -			;byte %00000000 ; PLOK
   2312  29b0				  -			;byte %00000000 ; PLOK
   2313  29b0				  -			;byte %00000000 ; PLOK
   2314  29b0				  -
   2315  29b0				  -
   2316  29b0				  -	      endif		; fontcharsHEX
   2317  29b0					      endif		; PLOK
   2318  29b0
   2319  29b0							; ### any characters that aren't font specific follow... 
   2320  29b0
   2321  29b0				  -	      ifconst	fontcharSPACE
   2322  29b0				  -			;byte %00000000 ; SYMBOLS
   2323  29b0				  -
   2324  29b0				  -	      .byte	%00000000	; SYMBOLS
   2325  29b0				  -	      .byte	%00000000	; SYMBOLS
   2326  29b0				  -	      .byte	%00000000	; SYMBOLS
   2327  29b0				  -	      .byte	%00000000	; SYMBOLS
   2328  29b0				  -	      .byte	%00000000	; SYMBOLS
   2329  29b0				  -	      .byte	%00000000	; SYMBOLS
   2330  29b0				  -	      .byte	%00000000	; SYMBOLS
   2331  29b0				  -	      .byte	%00000000	; SYMBOLS
   2332  29b0				  -
   2333  29b0				  -			;byte %00000000 ; SYMBOLS
   2334  29b0					      endif		; fontcharSPACE
   2335  29b0
   2336  29b0				  -	      ifconst	fontcharDOLLAR
   2337  29b0				  -			;byte %00000000 ; SYMBOLS
   2338  29b0				  -
   2339  29b0				  -	      .byte	%00000000	; SYMBOLS
   2340  29b0				  -	      .byte	%00010000	; SYMBOLS
   2341  29b0				  -	      .byte	%01111100	; SYMBOLS
   2342  29b0				  -	      .byte	%00010010	; SYMBOLS
   2343  29b0				  -	      .byte	%01111100	; SYMBOLS
   2344  29b0				  -	      .byte	%10010000	; SYMBOLS
   2345  29b0				  -	      .byte	%01111100	; SYMBOLS
   2346  29b0				  -	      .byte	%00010000	; SYMBOLS
   2347  29b0				  -
   2348  29b0				  -			;byte %00000000 ; SYMBOLS
   2349  29b0				  -
   2350  29b0					      endif		; fontcharDOLLAR
   2351  29b0
   2352  29b0				  -	      ifconst	fontcharPOUND
   2353  29b0				  -			;byte %00000000 ; SYMBOLS
   2354  29b0				  -
   2355  29b0				  -	      .byte	%01111110	; SYMBOLS
   2356  29b0				  -	      .byte	%01000000	; SYMBOLS
   2357  29b0				  -	      .byte	%00100000	; SYMBOLS
   2358  29b0				  -	      .byte	%00100000	; SYMBOLS
   2359  29b0				  -	      .byte	%01111000	; SYMBOLS
   2360  29b0				  -	      .byte	%00100000	; SYMBOLS
   2361  29b0				  -	      .byte	%00100010	; SYMBOLS
   2362  29b0				  -	      .byte	%00011100	; SYMBOLS
   2363  29b0				  -
   2364  29b0				  -			;byte %00000000 ; SYMBOLS
   2365  29b0				  -
   2366  29b0					      endif		; fontcharPOUND
   2367  29b0
   2368  29b0
   2369  29b0				  -	      ifconst	fontcharMRHAPPY
   2370  29b0				  -			;byte %00000000 ; SYMBOLS
   2371  29b0				  -
   2372  29b0				  -	      .byte	%00111100	; SYMBOLS
   2373  29b0				  -	      .byte	%01100110	; SYMBOLS
   2374  29b0				  -	      .byte	%01011010	; SYMBOLS
   2375  29b0				  -	      .byte	%01111110	; SYMBOLS
   2376  29b0				  -	      .byte	%01111110	; SYMBOLS
   2377  29b0				  -	      .byte	%01011010	; SYMBOLS
   2378  29b0				  -	      .byte	%01111110	; SYMBOLS
   2379  29b0				  -	      .byte	%00111100	; SYMBOLS
   2380  29b0				  -
   2381  29b0				  -			;byte %00000000 ; SYMBOLS
   2382  29b0				  -
   2383  29b0					      endif		; fontcharMRHAPPY
   2384  29b0
   2385  29b0				  -	      ifconst	fontcharMRSAD
   2386  29b0				  -			;byte %00000000 ; SYMBOLS
   2387  29b0				  -
   2388  29b0				  -	      .byte	%00111100	; SYMBOLS
   2389  29b0				  -	      .byte	%01011010	; SYMBOLS
   2390  29b0				  -	      .byte	%01100110	; SYMBOLS
   2391  29b0				  -	      .byte	%01111110	; SYMBOLS
   2392  29b0				  -	      .byte	%01111110	; SYMBOLS
   2393  29b0				  -	      .byte	%01011010	; SYMBOLS
   2394  29b0				  -	      .byte	%01111110	; SYMBOLS
   2395  29b0				  -	      .byte	%00111100	; SYMBOLS
   2396  29b0				  -
   2397  29b0				  -			;byte %00000000 ; SYMBOLS
   2398  29b0				  -
   2399  29b0					      endif		; fontcharMRSAD
   2400  29b0
   2401  29b0
   2402  29b0				  -	      ifconst	fontcharCOPYRIGHT
   2403  29b0				  -			;byte %00000000 ; SYMBOLS
   2404  29b0				  -
   2405  29b0				  -	      .byte	%00000000	; SYMBOLS
   2406  29b0				  -	      .byte	%00111000	; SYMBOLS
   2407  29b0				  -	      .byte	%01000100	; SYMBOLS
   2408  29b0				  -	      .byte	%10111010	; SYMBOLS
   2409  29b0				  -	      .byte	%10100010	; SYMBOLS
   2410  29b0				  -	      .byte	%10111010	; SYMBOLS
   2411  29b0				  -	      .byte	%01000100	; SYMBOLS
   2412  29b0				  -	      .byte	%00111000	; SYMBOLS
   2413  29b0				  -
   2414  29b0				  -			;byte %00000000 ; SYMBOLS
   2415  29b0				  -
   2416  29b0					      endif		; fontcharCOPYRIGHT
   2417  29b0
   2418  29b0
   2419  29b0				  -	      ifconst	fontcharFUJI
   2420  29b0				  -
   2421  29b0				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  29b0				  -
   2423  29b0				  -	      .byte	%01110000	; SYMBOLS
   2424  29b0				  -	      .byte	%01111001	; SYMBOLS
   2425  29b0				  -	      .byte	%00011101	; SYMBOLS
   2426  29b0				  -	      .byte	%00001101	; SYMBOLS
   2427  29b0				  -	      .byte	%00001101	; SYMBOLS
   2428  29b0				  -	      .byte	%00001101	; SYMBOLS
   2429  29b0				  -	      .byte	%00001101	; SYMBOLS
   2430  29b0				  -	      .byte	%00000000	; SYMBOLS
   2431  29b0				  -
   2432  29b0				  -			;byte %00000000 ; SYMBOLS
   2433  29b0				  -
   2434  29b0				  -	      .byte	%00001110	; SYMBOLS
   2435  29b0				  -	      .byte	%10011110	; SYMBOLS
   2436  29b0				  -	      .byte	%10111000	; SYMBOLS
   2437  29b0				  -	      .byte	%10110000	; SYMBOLS
   2438  29b0				  -	      .byte	%10110000	; SYMBOLS
   2439  29b0				  -	      .byte	%10110000	; SYMBOLS
   2440  29b0				  -	      .byte	%10110000	; SYMBOLS
   2441  29b0				  -	      .byte	%00000000	; SYMBOLS
   2442  29b0				  -
   2443  29b0				  -			;byte %00000000 ; SYMBOLS
   2444  29b0				  -
   2445  29b0					      endif		; fontcharFUJI
   2446  29b0
   2447  29b0
   2448  29b0				  -	      ifconst	fontcharHEART
   2449  29b0				  -			;byte %00000000 ; SYMBOLS
   2450  29b0				  -
   2451  29b0				  -	      .byte	%00010000	; SYMBOLS
   2452  29b0				  -	      .byte	%00111000	; SYMBOLS
   2453  29b0				  -	      .byte	%01111100	; SYMBOLS
   2454  29b0				  -	      .byte	%01111100	; SYMBOLS
   2455  29b0				  -	      .byte	%11111110	; SYMBOLS
   2456  29b0				  -	      .byte	%11111110	; SYMBOLS
   2457  29b0				  -	      .byte	%11101110	; SYMBOLS
   2458  29b0				  -	      .byte	%01000100	; SYMBOLS
   2459  29b0				  -
   2460  29b0				  -			;byte %00000000 ; SYMBOLS
   2461  29b0				  -
   2462  29b0					      endif		; fontcharHEART
   2463  29b0
   2464  29b0				  -	      ifconst	fontcharDIAMOND
   2465  29b0				  -			;byte %00000000 ; SYMBOLS
   2466  29b0				  -
   2467  29b0				  -	      .byte	%00010000	; SYMBOLS
   2468  29b0				  -	      .byte	%00111000	; SYMBOLS
   2469  29b0				  -	      .byte	%01111100	; SYMBOLS
   2470  29b0				  -	      .byte	%11111110	; SYMBOLS
   2471  29b0				  -	      .byte	%11111110	; SYMBOLS
   2472  29b0				  -	      .byte	%01111100	; SYMBOLS
   2473  29b0				  -	      .byte	%00111000	; SYMBOLS
   2474  29b0				  -	      .byte	%00010000	; SYMBOLS
   2475  29b0				  -
   2476  29b0				  -			;byte %00000000 ; SYMBOLS
   2477  29b0				  -
   2478  29b0					      endif		; fontcharDIAMOND
   2479  29b0
   2480  29b0				  -	      ifconst	fontcharSPADE
   2481  29b0				  -			;byte %00000000 ; SYMBOLS
   2482  29b0				  -
   2483  29b0				  -	      .byte	%00111000	; SYMBOLS
   2484  29b0				  -	      .byte	%00010000	; SYMBOLS
   2485  29b0				  -	      .byte	%01010100	; SYMBOLS
   2486  29b0				  -	      .byte	%11111110	; SYMBOLS
   2487  29b0				  -	      .byte	%11111110	; SYMBOLS
   2488  29b0				  -	      .byte	%01111100	; SYMBOLS
   2489  29b0				  -	      .byte	%00111000	; SYMBOLS
   2490  29b0				  -	      .byte	%00010000	; SYMBOLS
   2491  29b0				  -
   2492  29b0				  -			;byte %00000000 ; SYMBOLS
   2493  29b0				  -
   2494  29b0					      endif		; fontcharSPADE
   2495  29b0
   2496  29b0				  -	      ifconst	fontcharCLUB
   2497  29b0				  -			;byte %00000000 ; SYMBOLS
   2498  29b0				  -
   2499  29b0				  -	      .byte	%00111000	; SYMBOLS
   2500  29b0				  -	      .byte	%00010000	; SYMBOLS
   2501  29b0				  -	      .byte	%11010110	; SYMBOLS
   2502  29b0				  -	      .byte	%11111110	; SYMBOLS
   2503  29b0				  -	      .byte	%11010110	; SYMBOLS
   2504  29b0				  -	      .byte	%00111000	; SYMBOLS
   2505  29b0				  -	      .byte	%00111000	; SYMBOLS
   2506  29b0				  -	      .byte	%00000000	; SYMBOLS
   2507  29b0				  -
   2508  29b0				  -			;byte %00000000 ; SYMBOLS
   2509  29b0				  -
   2510  29b0					      endif		; fontcharCLUB
   2511  29b0
   2512  29b0
   2513  29b0				  -	      ifconst	fontcharCOLON
   2514  29b0				  -			;byte %00000000 ; SYMBOLS
   2515  29b0				  -
   2516  29b0				  -	      .byte	%00000000	; SYMBOLS
   2517  29b0				  -	      .byte	%00011000	; SYMBOLS
   2518  29b0				  -	      .byte	%00011000	; SYMBOLS
   2519  29b0				  -	      .byte	%00000000	; SYMBOLS
   2520  29b0				  -	      .byte	%00000000	; SYMBOLS
   2521  29b0				  -	      .byte	%00011000	; SYMBOLS
   2522  29b0				  -	      .byte	%00011000	; SYMBOLS
   2523  29b0				  -	      .byte	%00000000	; SYMBOLS
   2524  29b0				  -
   2525  29b0				  -			;byte %00000000 ; SYMBOLS
   2526  29b0				  -
   2527  29b0					      endif		; fontcharCOLON
   2528  29b0
   2529  29b0
   2530  29b0				  -	      ifconst	fontcharBLOCK
   2531  29b0				  -
   2532  29b0				  -			;byte %00000000 ; SYMBOLS
   2533  29b0				  -
   2534  29b0				  -	      .byte	%11111111	; SYMBOLS
   2535  29b0				  -	      .byte	%11111111	; SYMBOLS
   2536  29b0				  -	      .byte	%11111111	; SYMBOLS
   2537  29b0				  -	      .byte	%11111111	; SYMBOLS
   2538  29b0				  -	      .byte	%11111111	; SYMBOLS
   2539  29b0				  -	      .byte	%11111111	; SYMBOLS
   2540  29b0				  -	      .byte	%11111111	; SYMBOLS
   2541  29b0				  -	      .byte	%11111111	; SYMBOLS
   2542  29b0				  -
   2543  29b0				  -			;byte %00000000 ; SYMBOLS
   2544  29b0				  -
   2545  29b0					      endif		; fontcharBLOCK
   2546  29b0
   2547  29b0				  -	      ifconst	fontcharUNDERLINE
   2548  29b0				  -
   2549  29b0				  -			;byte %00000000 ; SYMBOLS
   2550  29b0				  -
   2551  29b0				  -	      .byte	%11111111	; SYMBOLS
   2552  29b0				  -	      .byte	%00000000	; SYMBOLS
   2553  29b0				  -	      .byte	%00000000	; SYMBOLS
   2554  29b0				  -	      .byte	%00000000	; SYMBOLS
   2555  29b0				  -	      .byte	%00000000	; SYMBOLS
   2556  29b0				  -	      .byte	%00000000	; SYMBOLS
   2557  29b0				  -	      .byte	%00000000	; SYMBOLS
   2558  29b0				  -	      .byte	%00000000	; SYMBOLS
   2559  29b0				  -
   2560  29b0				  -			;byte %00000000 ; SYMBOLS
   2561  29b0				  -
   2562  29b0					      endif		; fontcharUNDERLINE
   2563  29b0
   2564  29b0				  -	      ifconst	fontcharARISIDE
   2565  29b0				  -			;byte %00000000 ; SYMBOLS
   2566  29b0				  -
   2567  29b0				  -	      .byte	%00000000	; SYMBOLS
   2568  29b0				  -	      .byte	%00101010	; SYMBOLS
   2569  29b0				  -	      .byte	%00101010	; SYMBOLS
   2570  29b0				  -	      .byte	%00101100	; SYMBOLS
   2571  29b0				  -	      .byte	%01111111	; SYMBOLS
   2572  29b0				  -	      .byte	%00110111	; SYMBOLS
   2573  29b0				  -	      .byte	%00000010	; SYMBOLS
   2574  29b0				  -	      .byte	%00000001	; SYMBOLS
   2575  29b0				  -
   2576  29b0				  -			;byte %00000000 ; SYMBOLS
   2577  29b0				  -
   2578  29b0					      endif		; fontcharARISIDE
   2579  29b0
   2580  29b0				  -	      ifconst	fontcharARIFACE
   2581  29b0				  -			;byte %00000000 ; SYMBOLS
   2582  29b0				  -
   2583  29b0				  -	      .byte	%00001000	; SYMBOLS
   2584  29b0				  -	      .byte	%00011100	; SYMBOLS
   2585  29b0				  -	      .byte	%00111110	; SYMBOLS
   2586  29b0				  -	      .byte	%00101010	; SYMBOLS
   2587  29b0				  -	      .byte	%00011100	; SYMBOLS
   2588  29b0				  -	      .byte	%01010100	; SYMBOLS
   2589  29b0				  -	      .byte	%00100100	; SYMBOLS
   2590  29b0				  -	      .byte	%00000010	; SYMBOLS
   2591  29b0				  -
   2592  29b0				  -			;byte %00000000 ; SYMBOLS
   2593  29b0				  -
   2594  29b0				  -
   2595  29b0					      endif		; fontcharARIRACE
   2596  29b0
------- FILE titlescreen/asm/titlescreen.asm
    170  29b0					      endif
    171  29b0
    172  29b0				  -	      ifconst	mk_gameselect_on
    173  29b0				  -	      include	"titlescreen/gameselect_image.asm"
    174  29b0					      endif
    175  29b0
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
   4904  29b0
   4905  29b0				   .
   4906  29b0							; 
   4907  29b0
   4908  29b0				   .
   4909  29b0							; 
   4910  29b0
   4911  29b0				   .L0351		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  29b0					      include	6lives_statusbar.asm
      1  29b0							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  29b0
      3  29b0				   minikernel		; display up to 6 lives on screen
      4  29b0		       85 02		      sta	WSYNC
      5  29b2		       a2 20		      ldx	#$20
      6  29b4		       86 21		      stx	HMP1
      7  29b6		       86 25		      stx	VDELP0
      8  29b8		       a5 c2		      lda	lives
      9  29ba		       4a		      lsr
     10  29bb		       4a		      lsr
     11  29bc		       4a		      lsr
     12  29bd		       4a		      lsr
     13  29be		       4a		      lsr
     14  29bf		       85 10		      sta	RESP0
     15  29c1		       85 11		      sta	RESP1
     16  29c3		       86 26		      stx	VDELP1
     17  29c5		       aa		      tax
     18  29c6		       bd 5c fa 	      lda	lifenusiz0table,x
     19  29c9		       85 04		      sta	NUSIZ0
     20  29cb		       bd 5b fa 	      lda	lifenusiz1table,x
     21  29ce		       85 05		      sta	NUSIZ1
     22  29d0		       a5 c0		      lda	lifecolor
     23  29d2		       85 06		      sta	COLUP0
     24  29d4		       85 07		      sta	COLUP1
     25  29d6		       a9 10		      lda	#$10
     26  29d8		       85 20		      sta	HMP0
     27  29da
     28  29da		       a5 bf		      lda	statusbarlength
     29  29dc		       4a		      lsr
     30  29dd		       4a		      lsr
     31  29de		       4a		      lsr		; 0-31
     32  29df							; 3 cases: 0-7, 8-15, 16-24
     33  29df							; if 0-7, temp1=val, temp2=0, temp3=0
     34  29df							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  29df							; if 16-23, temp1=255, temp2=255, temp3=val
     36  29df		       a8		      tay
     37  29e0
     38  29e0		       85 2a		      sta	HMOVE	;cycle 74?
     39  29e2
     40  29e2				  -	      ifconst	statusbarcolor
     41  29e2				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  29e2				  -	      lda	statusbarcolor
     43  29e2				  -	      sta	COLUPF
     44  29e2					      endif
     45  29e2
     46  29e2		       c0 08		      cpy	#8
     47  29e4		       90 17		      bcc	zero_7
     48  29e6		       c0 10		      cpy	#16
     49  29e8		       90 23		      bcc	eight_15
     50  29ea		       a9 ff		      lda	#255
     51  29ec		       85 cb		      sta	temp1
     52  29ee		       85 cc		      sta	temp2
     53  29f0		       b9 54 fa 	      lda	statustable-16,y
     54  29f3		       85 cd		      sta	temp3
     55  29f5		       b9 64 fa 	      lda	statustable,y
     56  29f8		       85 ce		      sta	temp4
     57  29fa		       4c 1c fa 	      jmp	startlifedisplay
     58  29fd
     59  29fd				   zero_7
     60  29fd		       a9 00		      lda	#0
     61  29ff		       85 ce		      sta	temp4
     62  2a01		       85 cd		      sta	temp3
     63  2a03		       85 cc		      sta	temp2
     64  2a05		       b9 64 fa 	      lda	statustable,y
     65  2a08		       85 cb		      sta	temp1
     66  2a0a		       4c 1c fa 	      jmp	startlifedisplay
     67  2a0d				   eight_15
     68  2a0d		       a9 ff		      lda	#255
     69  2a0f		       85 cb		      sta	temp1
     70  2a11		       a9 00		      lda	#0
     71  2a13		       85 ce		      sta	temp4
     72  2a15		       85 cd		      sta	temp3
     73  2a17		       b9 74 fa 	      lda	statustable+16,y
     74  2a1a		       85 cc		      sta	temp2
     75  2a1c				   startlifedisplay
     76  2a1c		       a0 07		      ldy	#7
     77  2a1e				   lifeloop
     78  2a1e		       85 02		      sta	WSYNC
     79  2a20		       86 0d		      stx	PF0
     80  2a22		       b1 c1		      lda	(lifepointer),y
     81  2a24		       e0 00		      cpx	#0
     82  2a26		       d0 01		      bne	onelife
     83  2a28		       0c		      .byte.b	$0C
     84  2a29				   onelife
     85  2a29		       85 1b		      sta	GRP0
     86  2a2b
     87  2a2b		       e0 02		      cpx	#2
     88  2a2d		       b0 01		      bcs	nolives
     89  2a2f		       0c		      .byte.b	$0C
     90  2a30				   nolives
     91  2a30		       85 1c		      sta	GRP1
     92  2a32		       a5 ce		      lda	temp4
     93  2a34		       85 0d		      sta	PF0
     94  2a36		       a5 cb		      lda	temp1
     95  2a38		       85 0f		      sta	PF2
     96  2a3a		       a5 cd		      lda	temp3
     97  2a3c		       85 0e		      sta	PF1
     98  2a3e		       a5 cc		      lda	temp2
     99  2a40		       85 0f		      sta	PF2	;cycle 48!
    100  2a42		       68		      pla		; waste 14 cycles in 4 bytes
    101  2a43		       48		      pha		;
    102  2a44		       68		      pla		;
    103  2a45		       48		      pha		; Shouldn't hurt anything!
    104  2a46		       a9 00		      lda	#0
    105  2a48		       88		      dey
    106  2a49		       85 0e		      sta	PF1
    107  2a4b		       10 d1		      bpl	lifeloop
    108  2a4d		       85 02		      sta	WSYNC
    109  2a4f		       c8		      iny
    110  2a50		       84 0d		      sty	PF0
    111  2a52		       84 0f		      sty	PF2
    112  2a54		       84 0e		      sty	PF1
    113  2a56		       84 1b		      sty	GRP0
    114  2a58		       84 1c		      sty	GRP1
    115  2a5a		       60		      rts
    116  2a5b
    117  2a5b				  -	      if	(<*) > $F5
    118  2a5b				  -	      align	256
    119  2a5b					      endif
    120  2a5b				   lifenusiz1table
    121  2a5b		       00		      .byte.b	0
    122  2a5c				   lifenusiz0table
    123  2a5c		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2a64
    125  2a64				   statustable		; warning: page-wrapping might cause issues
    126  2a64							;0-7 and 16+
    127  2a64		       00		      .byte.b	%00000000
    128  2a65		       01		      .byte.b	%00000001
    129  2a66		       03		      .byte.b	%00000011
    130  2a67		       07		      .byte.b	%00000111
    131  2a68		       0f		      .byte.b	%00001111
    132  2a69		       1f		      .byte.b	%00011111
    133  2a6a		       3f		      .byte.b	%00111111
    134  2a6b		       7f		      .byte.b	%01111111
    135  2a6c		       ff		      .byte.b	255
    136  2a6d		       ff		      .byte.b	255
    137  2a6e		       ff		      .byte.b	255
    138  2a6f		       ff		      .byte.b	255
    139  2a70		       ff		      .byte.b	255
    140  2a71		       ff		      .byte.b	255
    141  2a72		       ff		      .byte.b	255
    142  2a73		       ff		      .byte.b	255
    143  2a74							; 8-15
    144  2a74		       00		      .byte.b	0
    145  2a75		       00		      .byte.b	0
    146  2a76		       00		      .byte.b	0
    147  2a77		       00		      .byte.b	0
    148  2a78		       00		      .byte.b	0
    149  2a79		       00		      .byte.b	0
    150  2a7a		       00		      .byte.b	0
    151  2a7b		       00		      .byte.b	0
    152  2a7c		       00		      .byte.b	%00000000
    153  2a7d		       80		      .byte.b	%10000000
    154  2a7e		       c0		      .byte.b	%11000000
    155  2a7f		       e0		      .byte.b	%11100000
    156  2a80		       f0		      .byte.b	%11110000
    157  2a81		       f8		      .byte.b	%11111000
    158  2a82		       fc		      .byte.b	%11111100
    159  2a83		       fe		      .byte.b	%11111110
    160  2a84
------- FILE c:\Projects\SkySaviour2600\default.bas.asm
   4913  2a84				  -	      if	(<*) > (<(*+8))
   4914  2a84				  -	      repeat	($100-<*)
   4915  2a84				  -	      .byte	0
   4916  2a84				  -	      repend
   4917  2a84					      endif
   4918  2a84				   lives__L0118
   4919  2a84		       3c		      .byte.b	%00111100
   4920  2a85		       18		      .byte.b	%00011000
   4921  2a86		       3c		      .byte.b	%00111100
   4922  2a87		       3c		      .byte.b	%00111100
   4923  2a88		       3c		      .byte.b	%00111100
   4924  2a89		       18		      .byte.b	%00011000
   4925  2a8a		       00		      .byte.b	%00000000
   4926  2a8b		       00		      .byte.b	%00000000
   4927  2a8c				  -	      if	(<*) > (<(*+8))
   4928  2a8c				  -	      repeat	($100-<*)
   4929  2a8c				  -	      .byte	0
   4930  2a8c				  -	      repend
   4931  2a8c					      endif
   4932  2a8c				  -	      if	(<*) < 90
   4933  2a8c				  -	      repeat	(90-<*)
   4934  2a8c				  -	      .byte	0
   4935  2a8c				  -	      repend
   4936  2a8c					      endif
   4937  2a8c				   player35then_0
   4938  2a8c		       00		      .byte.b	0
   4939  2a8d		       66		      .byte.b	%01100110
   4940  2a8e		       ff		      .byte.b	%11111111
   4941  2a8f		       bd		      .byte.b	%10111101
   4942  2a90		       a5		      .byte.b	%10100101
   4943  2a91		       3c		      .byte.b	%00111100
   4944  2a92		       18		      .byte.b	%00011000
   4945  2a93		       18		      .byte.b	%00011000
   4946  2a94		       00		      .byte.b	%00000000
   4947  2a95				  -	      if	(<*) > (<(*+8))
   4948  2a95				  -	      repeat	($100-<*)
   4949  2a95				  -	      .byte	0
   4950  2a95				  -	      repend
   4951  2a95					      endif
   4952  2a95				  -	      if	(<*) < 90
   4953  2a95				  -	      repeat	(90-<*)
   4954  2a95				  -	      .byte	0
   4955  2a95				  -	      repend
   4956  2a95					      endif
   4957  2a95				   player36then_0
   4958  2a95		       00		      .byte.b	0
   4959  2a96		       00		      .byte.b	%00000000
   4960  2a97		       ff		      .byte.b	%11111111
   4961  2a98		       bd		      .byte.b	%10111101
   4962  2a99		       a5		      .byte.b	%10100101
   4963  2a9a		       3c		      .byte.b	%00111100
   4964  2a9b		       18		      .byte.b	%00011000
   4965  2a9c		       18		      .byte.b	%00011000
   4966  2a9d		       00		      .byte.b	%00000000
   4967  2a9e				  -	      if	(<*) > (<(*+7))
   4968  2a9e				  -	      repeat	($100-<*)
   4969  2a9e				  -	      .byte	0
   4970  2a9e				  -	      repend
   4971  2a9e					      endif
   4972  2a9e				  -	      if	(<*) < 90
   4973  2a9e				  -	      repeat	(90-<*)
   4974  2a9e				  -	      .byte	0
   4975  2a9e				  -	      repend
   4976  2a9e					      endif
   4977  2a9e				   player37then_1
   4978  2a9e		       3e		      .byte.b	%00111110
   4979  2a9f		       63		      .byte.b	%01100011
   4980  2aa0		       51		      .byte.b	%01010001
   4981  2aa1		       5d		      .byte.b	%01011101
   4982  2aa2		       55		      .byte.b	%01010101
   4983  2aa3		       5d		      .byte.b	%01011101
   4984  2aa4		       63		      .byte.b	%01100011
   4985  2aa5		       3e		      .byte.b	%00111110
   4986  2aa6				  -	      if	(<*) > (<(*+7))
   4987  2aa6				  -	      repeat	($100-<*)
   4988  2aa6				  -	      .byte	0
   4989  2aa6				  -	      repend
   4990  2aa6					      endif
   4991  2aa6				  -	      if	(<*) < 90
   4992  2aa6				  -	      repeat	(90-<*)
   4993  2aa6				  -	      .byte	0
   4994  2aa6				  -	      repend
   4995  2aa6					      endif
   4996  2aa6				   player39then_1
   4997  2aa6		       98		      .byte.b	%10011000
   4998  2aa7		       66		      .byte.b	%01100110
   4999  2aa8		       18		      .byte.b	%00011000
   5000  2aa9		       7c		      .byte.b	%01111100
   5001  2aaa		       18		      .byte.b	%00011000
   5002  2aab		       3c		      .byte.b	%00111100
   5003  2aac		       5a		      .byte.b	%01011010
   5004  2aad		       3c		      .byte.b	%00111100
   5005  2aae				  -	      if	(<*) > (<(*+7))
   5006  2aae				  -	      repeat	($100-<*)
   5007  2aae				  -	      .byte	0
   5008  2aae				  -	      repend
   5009  2aae					      endif
   5010  2aae				  -	      if	(<*) < 90
   5011  2aae				  -	      repeat	(90-<*)
   5012  2aae				  -	      .byte	0
   5013  2aae				  -	      repend
   5014  2aae					      endif
   5015  2aae				   player41then_1
   5016  2aae		       19		      .byte.b	%00011001
   5017  2aaf		       66		      .byte.b	%01100110
   5018  2ab0		       18		      .byte.b	%00011000
   5019  2ab1		       3e		      .byte.b	%00111110
   5020  2ab2		       18		      .byte.b	%00011000
   5021  2ab3		       3c		      .byte.b	%00111100
   5022  2ab4		       5a		      .byte.b	%01011010
   5023  2ab5		       3c		      .byte.b	%00111100
   5024  2ab6				  -	      if	(<*) > (<(*+7))
   5025  2ab6				  -	      repeat	($100-<*)
   5026  2ab6				  -	      .byte	0
   5027  2ab6				  -	      repend
   5028  2ab6					      endif
   5029  2ab6				  -	      if	(<*) < 90
   5030  2ab6				  -	      repeat	(90-<*)
   5031  2ab6				  -	      .byte	0
   5032  2ab6				  -	      repend
   5033  2ab6					      endif
   5034  2ab6				   player42then_2
   5035  2ab6		       01		      .byte.b	%00000001
   5036  2ab7		       99		      .byte.b	%10011001
   5037  2ab8		       ff		      .byte.b	%11111111
   5038  2ab9		       3c		      .byte.b	%00111100
   5039  2aba		       ff		      .byte.b	%11111111
   5040  2abb		       3c		      .byte.b	%00111100
   5041  2abc		       e7		      .byte.b	%11100111
   5042  2abd		       98		      .byte.b	%10011000
   5043  2abe				  -	      if	(<*) > (<(*+7))
   5044  2abe				  -	      repeat	($100-<*)
   5045  2abe				  -	      .byte	0
   5046  2abe				  -	      repend
   5047  2abe					      endif
   5048  2abe				  -	      if	(<*) < 90
   5049  2abe				  -	      repeat	(90-<*)
   5050  2abe				  -	      .byte	0
   5051  2abe				  -	      repend
   5052  2abe					      endif
   5053  2abe				   player43then_2
   5054  2abe		       80		      .byte.b	%10000000
   5055  2abf		       99		      .byte.b	%10011001
   5056  2ac0		       ff		      .byte.b	%11111111
   5057  2ac1		       3c		      .byte.b	%00111100
   5058  2ac2		       ff		      .byte.b	%11111111
   5059  2ac3		       3c		      .byte.b	%00111100
   5060  2ac4		       e7		      .byte.b	%11100111
   5061  2ac5		       19		      .byte.b	%00011001
   5062  2ac6				  -	      if	(<*) > (<(*+7))
   5063  2ac6				  -	      repeat	($100-<*)
   5064  2ac6				  -	      .byte	0
   5065  2ac6				  -	      repend
   5066  2ac6					      endif
   5067  2ac6				  -	      if	(<*) < 90
   5068  2ac6				  -	      repeat	(90-<*)
   5069  2ac6				  -	      .byte	0
   5070  2ac6				  -	      repend
   5071  2ac6					      endif
   5072  2ac6				   player44then_3
   5073  2ac6		       81		      .byte.b	%10000001
   5074  2ac7		       ff		      .byte.b	%11111111
   5075  2ac8		       24		      .byte.b	%00100100
   5076  2ac9		       c3		      .byte.b	%11000011
   5077  2aca		       5a		      .byte.b	%01011010
   5078  2acb		       42		      .byte.b	%01000010
   5079  2acc		       3c		      .byte.b	%00111100
   5080  2acd		       e7		      .byte.b	%11100111
   5081  2ace				  -	      if	(<*) > (<(*+7))
   5082  2ace				  -	      repeat	($100-<*)
   5083  2ace				  -	      .byte	0
   5084  2ace				  -	      repend
   5085  2ace					      endif
   5086  2ace				  -	      if	(<*) < 90
   5087  2ace				  -	      repeat	(90-<*)
   5088  2ace				  -	      .byte	0
   5089  2ace				  -	      repend
   5090  2ace					      endif
   5091  2ace				   player46then_3
   5092  2ace		       00		      .byte.b	%00000000
   5093  2acf		       ff		      .byte.b	%11111111
   5094  2ad0		       24		      .byte.b	%00100100
   5095  2ad1		       42		      .byte.b	%01000010
   5096  2ad2		       db		      .byte.b	%11011011
   5097  2ad3		       42		      .byte.b	%01000010
   5098  2ad4		       3c		      .byte.b	%00111100
   5099  2ad5		       e7		      .byte.b	%11100111
   5100  2ad6				  -	      if	(<*) > (<(*+7))
   5101  2ad6				  -	      repeat	($100-<*)
   5102  2ad6				  -	      .byte	0
   5103  2ad6				  -	      repend
   5104  2ad6					      endif
   5105  2ad6				  -	      if	(<*) < 90
   5106  2ad6				  -	      repeat	(90-<*)
   5107  2ad6				  -	      .byte	0
   5108  2ad6				  -	      repend
   5109  2ad6					      endif
   5110  2ad6				   player47then_3
   5111  2ad6		       00		      .byte.b	%00000000
   5112  2ad7		       7e		      .byte.b	%01111110
   5113  2ad8		       a5		      .byte.b	%10100101
   5114  2ad9		       42		      .byte.b	%01000010
   5115  2ada		       5a		      .byte.b	%01011010
   5116  2adb		       c3		      .byte.b	%11000011
   5117  2adc		       3c		      .byte.b	%00111100
   5118  2add		       e7		      .byte.b	%11100111
   5119  2ade				  -	      if	(<*) > (<(*+7))
   5120  2ade				  -	      repeat	($100-<*)
   5121  2ade				  -	      .byte	0
   5122  2ade				  -	      repend
   5123  2ade					      endif
   5124  2ade				  -	      if	(<*) < 90
   5125  2ade				  -	      repeat	(90-<*)
   5126  2ade				  -	      .byte	0
   5127  2ade				  -	      repend
   5128  2ade					      endif
   5129  2ade				   player49then_2
   5130  2ade		       3c		      .byte.b	%00111100
   5131  2adf		       db		      .byte.b	%11011011
   5132  2ae0		       5a		      .byte.b	%01011010
   5133  2ae1		       ff		      .byte.b	%11111111
   5134  2ae2		       99		      .byte.b	%10011001
   5135  2ae3		       a5		      .byte.b	%10100101
   5136  2ae4		       c3		      .byte.b	%11000011
   5137  2ae5		       7e		      .byte.b	%01111110
   5138  2ae6				  -	      if	(<*) > (<(*+7))
   5139  2ae6				  -	      repeat	($100-<*)
   5140  2ae6				  -	      .byte	0
   5141  2ae6				  -	      repend
   5142  2ae6					      endif
   5143  2ae6				  -	      if	(<*) < 90
   5144  2ae6				  -	      repeat	(90-<*)
   5145  2ae6				  -	      .byte	0
   5146  2ae6				  -	      repend
   5147  2ae6					      endif
   5148  2ae6				   player51then_2
   5149  2ae6		       5a		      .byte.b	%01011010
   5150  2ae7		       5a		      .byte.b	%01011010
   5151  2ae8		       5a		      .byte.b	%01011010
   5152  2ae9		       ff		      .byte.b	%11111111
   5153  2aea		       81		      .byte.b	%10000001
   5154  2aeb		       a5		      .byte.b	%10100101
   5155  2aec		       c3		      .byte.b	%11000011
   5156  2aed		       7e		      .byte.b	%01111110
   5157  2aee				  -	      if	(<*) > (<(*+7))
   5158  2aee				  -	      repeat	($100-<*)
   5159  2aee				  -	      .byte	0
   5160  2aee				  -	      repend
   5161  2aee					      endif
   5162  2aee				  -	      if	(<*) < 90
   5163  2aee				  -	      repeat	(90-<*)
   5164  2aee				  -	      .byte	0
   5165  2aee				  -	      repend
   5166  2aee					      endif
   5167  2aee				   player52then_4
   5168  2aee		       24		      .byte.b	%00100100
   5169  2aef		       a5		      .byte.b	%10100101
   5170  2af0		       5a		      .byte.b	%01011010
   5171  2af1		       3c		      .byte.b	%00111100
   5172  2af2		       7e		      .byte.b	%01111110
   5173  2af3		       99		      .byte.b	%10011001
   5174  2af4		       24		      .byte.b	%00100100
   5175  2af5		       42		      .byte.b	%01000010
   5176  2af6				  -	      if	(<*) > (<(*+7))
   5177  2af6				  -	      repeat	($100-<*)
   5178  2af6				  -	      .byte	0
   5179  2af6				  -	      repend
   5180  2af6					      endif
   5181  2af6				  -	      if	(<*) < 90
   5182  2af6				  -	      repeat	(90-<*)
   5183  2af6				  -	      .byte	0
   5184  2af6				  -	      repend
   5185  2af6					      endif
   5186  2af6				   player53then_4
   5187  2af6		       24		      .byte.b	%00100100
   5188  2af7		       24		      .byte.b	%00100100
   5189  2af8		       db		      .byte.b	%11011011
   5190  2af9		       3c		      .byte.b	%00111100
   5191  2afa		       ff		      .byte.b	%11111111
   5192  2afb		       18		      .byte.b	%00011000
   5193  2afc		       24		      .byte.b	%00100100
   5194  2afd		       24		      .byte.b	%00100100
   5195  2afe					      if	(<*) > (<(*+7))
   5196  2afe					      repeat	($100-<*)
   5197  2afe		       00		      .byte.b	0
   5196  2afe					      repend
   5197  2aff		       00		      .byte.b	0
   5198  2b00					      repend
   5199  2b00					      endif
   5200  2b00					      if	(<*) < 90
   5201  2b00					      repeat	(90-<*)
   5202  2b00		       00		      .byte.b	0
   5201  2b00					      repend
   5202  2b01		       00		      .byte.b	0
   5201  2b01					      repend
   5202  2b02		       00		      .byte.b	0
   5201  2b02					      repend
   5202  2b03		       00		      .byte.b	0
   5201  2b03					      repend
   5202  2b04		       00		      .byte.b	0
   5201  2b04					      repend
   5202  2b05		       00		      .byte.b	0
   5201  2b05					      repend
   5202  2b06		       00		      .byte.b	0
   5201  2b06					      repend
   5202  2b07		       00		      .byte.b	0
   5201  2b07					      repend
   5202  2b08		       00		      .byte.b	0
   5201  2b08					      repend
   5202  2b09		       00		      .byte.b	0
   5201  2b09					      repend
   5202  2b0a		       00		      .byte.b	0
   5201  2b0a					      repend
   5202  2b0b		       00		      .byte.b	0
   5201  2b0b					      repend
   5202  2b0c		       00		      .byte.b	0
   5201  2b0c					      repend
   5202  2b0d		       00		      .byte.b	0
   5201  2b0d					      repend
   5202  2b0e		       00		      .byte.b	0
   5201  2b0e					      repend
   5202  2b0f		       00		      .byte.b	0
   5201  2b0f					      repend
   5202  2b10		       00		      .byte.b	0
   5201  2b10					      repend
   5202  2b11		       00		      .byte.b	0
   5201  2b11					      repend
   5202  2b12		       00		      .byte.b	0
   5201  2b12					      repend
   5202  2b13		       00		      .byte.b	0
   5201  2b13					      repend
   5202  2b14		       00		      .byte.b	0
   5201  2b14					      repend
   5202  2b15		       00		      .byte.b	0
   5201  2b15					      repend
   5202  2b16		       00		      .byte.b	0
   5201  2b16					      repend
   5202  2b17		       00		      .byte.b	0
   5201  2b17					      repend
   5202  2b18		       00		      .byte.b	0
   5201  2b18					      repend
   5202  2b19		       00		      .byte.b	0
   5201  2b19					      repend
   5202  2b1a		       00		      .byte.b	0
   5201  2b1a					      repend
   5202  2b1b		       00		      .byte.b	0
   5201  2b1b					      repend
   5202  2b1c		       00		      .byte.b	0
   5201  2b1c					      repend
   5202  2b1d		       00		      .byte.b	0
   5201  2b1d					      repend
   5202  2b1e		       00		      .byte.b	0
   5201  2b1e					      repend
   5202  2b1f		       00		      .byte.b	0
   5201  2b1f					      repend
   5202  2b20		       00		      .byte.b	0
   5201  2b20					      repend
   5202  2b21		       00		      .byte.b	0
   5201  2b21					      repend
   5202  2b22		       00		      .byte.b	0
   5201  2b22					      repend
   5202  2b23		       00		      .byte.b	0
   5201  2b23					      repend
   5202  2b24		       00		      .byte.b	0
   5201  2b24					      repend
   5202  2b25		       00		      .byte.b	0
   5201  2b25					      repend
   5202  2b26		       00		      .byte.b	0
   5201  2b26					      repend
   5202  2b27		       00		      .byte.b	0
   5201  2b27					      repend
   5202  2b28		       00		      .byte.b	0
   5201  2b28					      repend
   5202  2b29		       00		      .byte.b	0
   5201  2b29					      repend
   5202  2b2a		       00		      .byte.b	0
   5201  2b2a					      repend
   5202  2b2b		       00		      .byte.b	0
   5201  2b2b					      repend
   5202  2b2c		       00		      .byte.b	0
   5201  2b2c					      repend
   5202  2b2d		       00		      .byte.b	0
   5201  2b2d					      repend
   5202  2b2e		       00		      .byte.b	0
   5201  2b2e					      repend
   5202  2b2f		       00		      .byte.b	0
   5201  2b2f					      repend
   5202  2b30		       00		      .byte.b	0
   5201  2b30					      repend
   5202  2b31		       00		      .byte.b	0
   5201  2b31					      repend
   5202  2b32		       00		      .byte.b	0
   5201  2b32					      repend
   5202  2b33		       00		      .byte.b	0
   5201  2b33					      repend
   5202  2b34		       00		      .byte.b	0
   5201  2b34					      repend
   5202  2b35		       00		      .byte.b	0
   5201  2b35					      repend
   5202  2b36		       00		      .byte.b	0
   5201  2b36					      repend
   5202  2b37		       00		      .byte.b	0
   5201  2b37					      repend
   5202  2b38		       00		      .byte.b	0
   5201  2b38					      repend
   5202  2b39		       00		      .byte.b	0
   5201  2b39					      repend
   5202  2b3a		       00		      .byte.b	0
   5201  2b3a					      repend
   5202  2b3b		       00		      .byte.b	0
   5201  2b3b					      repend
   5202  2b3c		       00		      .byte.b	0
   5201  2b3c					      repend
   5202  2b3d		       00		      .byte.b	0
   5201  2b3d					      repend
   5202  2b3e		       00		      .byte.b	0
   5201  2b3e					      repend
   5202  2b3f		       00		      .byte.b	0
   5201  2b3f					      repend
   5202  2b40		       00		      .byte.b	0
   5201  2b40					      repend
   5202  2b41		       00		      .byte.b	0
   5201  2b41					      repend
   5202  2b42		       00		      .byte.b	0
   5201  2b42					      repend
   5202  2b43		       00		      .byte.b	0
   5201  2b43					      repend
   5202  2b44		       00		      .byte.b	0
   5201  2b44					      repend
   5202  2b45		       00		      .byte.b	0
   5201  2b45					      repend
   5202  2b46		       00		      .byte.b	0
   5201  2b46					      repend
   5202  2b47		       00		      .byte.b	0
   5201  2b47					      repend
   5202  2b48		       00		      .byte.b	0
   5201  2b48					      repend
   5202  2b49		       00		      .byte.b	0
   5201  2b49					      repend
   5202  2b4a		       00		      .byte.b	0
   5201  2b4a					      repend
   5202  2b4b		       00		      .byte.b	0
   5201  2b4b					      repend
   5202  2b4c		       00		      .byte.b	0
   5201  2b4c					      repend
   5202  2b4d		       00		      .byte.b	0
   5201  2b4d					      repend
   5202  2b4e		       00		      .byte.b	0
   5201  2b4e					      repend
   5202  2b4f		       00		      .byte.b	0
   5201  2b4f					      repend
   5202  2b50		       00		      .byte.b	0
   5201  2b50					      repend
   5202  2b51		       00		      .byte.b	0
   5201  2b51					      repend
   5202  2b52		       00		      .byte.b	0
   5201  2b52					      repend
   5202  2b53		       00		      .byte.b	0
   5201  2b53					      repend
   5202  2b54		       00		      .byte.b	0
   5201  2b54					      repend
   5202  2b55		       00		      .byte.b	0
   5201  2b55					      repend
   5202  2b56		       00		      .byte.b	0
   5201  2b56					      repend
   5202  2b57		       00		      .byte.b	0
   5201  2b57					      repend
   5202  2b58		       00		      .byte.b	0
   5201  2b58					      repend
   5202  2b59		       00		      .byte.b	0
   5203  2b5a					      repend
   5204  2b5a					      endif
   5205  2b5a				   playerL0141_5
   5206  2b5a		       91		      .byte.b	%10010001
   5207  2b5b		       5a		      .byte.b	%01011010
   5208  2b5c		       24		      .byte.b	%00100100
   5209  2b5d		       db		      .byte.b	%11011011
   5210  2b5e		       5a		      .byte.b	%01011010
   5211  2b5f		       24		      .byte.b	%00100100
   5212  2b60		       5a		      .byte.b	%01011010
   5213  2b61		       89		      .byte.b	%10001001
   5214  2b62				  -	      if	((>(*+11)) > (>*))
   5215  2b62				  -	      ALIGN	256
   5216  2b62					      endif
   5217  2b62				   PF1_data0
   5218  2b62		       7f		      .byte.b	%01111111
   5219  2b63		       7f		      .byte.b	%01111111
   5220  2b64		       6b		      .byte.b	%01101011
   5221  2b65		       3e		      .byte.b	%00111110
   5222  2b66		       00		      .byte.b	%00000000
   5223  2b67		       00		      .byte.b	%00000000
   5224  2b68		       00		      .byte.b	%00000000
   5225  2b69		       00		      .byte.b	%00000000
   5226  2b6a		       00		      .byte.b	%00000000
   5227  2b6b		       00		      .byte.b	%00000000
   5228  2b6c		       00		      .byte.b	%00000000
   5229  2b6d				  -	      if	((>(*+11)) > (>*))
   5230  2b6d				  -	      ALIGN	256
   5231  2b6d					      endif
   5232  2b6d				   PF2_data0
   5233  2b6d		       6c		      .byte.b	%01101100
   5234  2b6e		       7c		      .byte.b	%01111100
   5235  2b6f		       54		      .byte.b	%01010100
   5236  2b70		       7c		      .byte.b	%01111100
   5237  2b71		       00		      .byte.b	%00000000
   5238  2b72		       00		      .byte.b	%00000000
   5239  2b73		       00		      .byte.b	%00000000
   5240  2b74		       00		      .byte.b	%00000000
   5241  2b75		       00		      .byte.b	%00000000
   5242  2b76		       00		      .byte.b	%00000000
   5243  2b77		       00		      .byte.b	%00000000
   5244  2b78					      if	ECHOFIRST
      1020 bytes of ROM space left in bank 2
   5245  2b78					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5246  2b78					      endif
   5247  2b78		       00 01	   ECHOFIRST  =	1
   5248  2b78
   5249  2b78
   5250  2b78							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5251  2b78
   5252  2b78							; feel free to modify the score graphics - just keep each digit 8 high
   5253  2b78							; and keep the conditional compilation stuff intact
   5254  2b78				  -	      ifconst	ROM2k
   5255  2b78				  -	      ORG	$F7AC-8
   5256  2b78					      else
   5257  2b78					      ifconst	bankswitch
   5258  2b78					      if	bankswitch == 8
   5259  2f74					      ORG	$2F94-bscode_length
   5260  2f74					      RORG	$FF94-bscode_length
   5261  2f74					      endif
   5262  2f74				  -	      if	bankswitch == 16
   5263  2f74				  -	      ORG	$4F94-bscode_length
   5264  2f74				  -	      RORG	$FF94-bscode_length
   5265  2f74					      endif
   5266  2f74				  -	      if	bankswitch == 32
   5267  2f74				  -	      ORG	$8F94-bscode_length
   5268  2f74				  -	      RORG	$FF94-bscode_length
   5269  2f74					      endif
   5270  2f74				  -	      if	bankswitch == 64
   5271  2f74				  -	      ORG	$10F80-bscode_length
   5272  2f74				  -	      RORG	$1FF80-bscode_length
   5273  2f74					      endif
   5274  2f74				  -	      else
   5275  2f74				  -	      ORG	$FF9C
   5276  2f74					      endif
   5277  2f74					      endif
   5278  2f74
   5279  2f74							; font equates
   5280  2f74		       00 01	   .21stcentury =	1
   5281  2f74		       00 02	   alarmclock =	2
   5282  2f74		       00 03	   handwritten =	3
   5283  2f74		       00 04	   interrupted =	4
   5284  2f74		       00 05	   retroputer =	5
   5285  2f74		       00 06	   whimsey    =	6
   5286  2f74		       00 07	   tiny       =	7
   5287  2f74		       00 08	   hex	      =	8
   5288  2f74
   5289  2f74				  -	      ifconst	font
   5290  2f74				  -	      if	font == hex
   5291  2f74				  -	      ORG	. - 48
   5292  2f74				  -	      endif
   5293  2f74					      endif
   5294  2f74
   5295  2f74				   scoretable
   5296  2f74
   5297  2f74				  -	      ifconst	font
   5298  2f74				  -	      if	font == .21stcentury
   5299  2f74				  -	      include	"score_graphics.asm.21stcentury"
   5300  2f74				  -	      endif
   5301  2f74				  -	      if	font == alarmclock
   5302  2f74				  -	      include	"score_graphics.asm.alarmclock"
   5303  2f74				  -	      endif
   5304  2f74				  -	      if	font == handwritten
   5305  2f74				  -	      include	"score_graphics.asm.handwritten"
   5306  2f74				  -	      endif
   5307  2f74				  -	      if	font == interrupted
   5308  2f74				  -	      include	"score_graphics.asm.interrupted"
   5309  2f74				  -	      endif
   5310  2f74				  -	      if	font == retroputer
   5311  2f74				  -	      include	"score_graphics.asm.retroputer"
   5312  2f74				  -	      endif
   5313  2f74				  -	      if	font == whimsey
   5314  2f74				  -	      include	"score_graphics.asm.whimsey"
   5315  2f74				  -	      endif
   5316  2f74				  -	      if	font == tiny
   5317  2f74				  -	      include	"score_graphics.asm.tiny"
   5318  2f74				  -	      endif
   5319  2f74				  -	      if	font == hex
   5320  2f74				  -	      include	"score_graphics.asm.hex"
   5321  2f74				  -	      endif
   5322  2f74					      else		; default font
   5323  2f74
   5324  2f74		       3c		      .byte.b	%00111100
   5325  2f75		       66		      .byte.b	%01100110
   5326  2f76		       66		      .byte.b	%01100110
   5327  2f77		       66		      .byte.b	%01100110
   5328  2f78		       66		      .byte.b	%01100110
   5329  2f79		       66		      .byte.b	%01100110
   5330  2f7a		       66		      .byte.b	%01100110
   5331  2f7b		       3c		      .byte.b	%00111100
   5332  2f7c
   5333  2f7c		       7e		      .byte.b	%01111110
   5334  2f7d		       18		      .byte.b	%00011000
   5335  2f7e		       18		      .byte.b	%00011000
   5336  2f7f		       18		      .byte.b	%00011000
   5337  2f80		       18		      .byte.b	%00011000
   5338  2f81		       38		      .byte.b	%00111000
   5339  2f82		       18		      .byte.b	%00011000
   5340  2f83		       08		      .byte.b	%00001000
   5341  2f84
   5342  2f84		       7e		      .byte.b	%01111110
   5343  2f85		       60		      .byte.b	%01100000
   5344  2f86		       60		      .byte.b	%01100000
   5345  2f87		       3c		      .byte.b	%00111100
   5346  2f88		       06		      .byte.b	%00000110
   5347  2f89		       06		      .byte.b	%00000110
   5348  2f8a		       46		      .byte.b	%01000110
   5349  2f8b		       3c		      .byte.b	%00111100
   5350  2f8c
   5351  2f8c		       3c		      .byte.b	%00111100
   5352  2f8d		       46		      .byte.b	%01000110
   5353  2f8e		       06		      .byte.b	%00000110
   5354  2f8f		       06		      .byte.b	%00000110
   5355  2f90		       1c		      .byte.b	%00011100
   5356  2f91		       06		      .byte.b	%00000110
   5357  2f92		       46		      .byte.b	%01000110
   5358  2f93		       3c		      .byte.b	%00111100
   5359  2f94
   5360  2f94		       0c		      .byte.b	%00001100
   5361  2f95		       0c		      .byte.b	%00001100
   5362  2f96		       7e		      .byte.b	%01111110
   5363  2f97		       4c		      .byte.b	%01001100
   5364  2f98		       4c		      .byte.b	%01001100
   5365  2f99		       2c		      .byte.b	%00101100
   5366  2f9a		       1c		      .byte.b	%00011100
   5367  2f9b		       0c		      .byte.b	%00001100
   5368  2f9c
   5369  2f9c		       3c		      .byte.b	%00111100
   5370  2f9d		       46		      .byte.b	%01000110
   5371  2f9e		       06		      .byte.b	%00000110
   5372  2f9f		       06		      .byte.b	%00000110
   5373  2fa0		       3c		      .byte.b	%00111100
   5374  2fa1		       60		      .byte.b	%01100000
   5375  2fa2		       60		      .byte.b	%01100000
   5376  2fa3		       7e		      .byte.b	%01111110
   5377  2fa4
   5378  2fa4		       3c		      .byte.b	%00111100
   5379  2fa5		       66		      .byte.b	%01100110
   5380  2fa6		       66		      .byte.b	%01100110
   5381  2fa7		       66		      .byte.b	%01100110
   5382  2fa8		       7c		      .byte.b	%01111100
   5383  2fa9		       60		      .byte.b	%01100000
   5384  2faa		       62		      .byte.b	%01100010
   5385  2fab		       3c		      .byte.b	%00111100
   5386  2fac
   5387  2fac		       30		      .byte.b	%00110000
   5388  2fad		       30		      .byte.b	%00110000
   5389  2fae		       30		      .byte.b	%00110000
   5390  2faf		       18		      .byte.b	%00011000
   5391  2fb0		       0c		      .byte.b	%00001100
   5392  2fb1		       06		      .byte.b	%00000110
   5393  2fb2		       42		      .byte.b	%01000010
   5394  2fb3		       3e		      .byte.b	%00111110
   5395  2fb4
   5396  2fb4		       3c		      .byte.b	%00111100
   5397  2fb5		       66		      .byte.b	%01100110
   5398  2fb6		       66		      .byte.b	%01100110
   5399  2fb7		       66		      .byte.b	%01100110
   5400  2fb8		       3c		      .byte.b	%00111100
   5401  2fb9		       66		      .byte.b	%01100110
   5402  2fba		       66		      .byte.b	%01100110
   5403  2fbb		       3c		      .byte.b	%00111100
   5404  2fbc
   5405  2fbc		       3c		      .byte.b	%00111100
   5406  2fbd		       46		      .byte.b	%01000110
   5407  2fbe		       06		      .byte.b	%00000110
   5408  2fbf		       3e		      .byte.b	%00111110
   5409  2fc0		       66		      .byte.b	%01100110
   5410  2fc1		       66		      .byte.b	%01100110
   5411  2fc2		       66		      .byte.b	%01100110
   5412  2fc3		       3c		      .byte.b	%00111100
   5413  2fc4
   5414  2fc4					      ifnconst	DPC_kernel_options
   5415  2fc4
   5416  2fc4		       00		      .byte.b	%00000000
   5417  2fc5		       00		      .byte.b	%00000000
   5418  2fc6		       00		      .byte.b	%00000000
   5419  2fc7		       00		      .byte.b	%00000000
   5420  2fc8		       00		      .byte.b	%00000000
   5421  2fc9		       00		      .byte.b	%00000000
   5422  2fca		       00		      .byte.b	%00000000
   5423  2fcb		       00		      .byte.b	%00000000
   5424  2fcc
   5425  2fcc					      endif
   5426  2fcc
   5427  2fcc					      endif
   5428  2fcc
   5429  2fcc				  -	      ifconst	ROM2k
   5430  2fcc				  -	      ORG	$F7FC
   5431  2fcc					      else
   5432  2fcc					      ifconst	bankswitch
   5433  2fcc					      if	bankswitch == 8
   5434  2fd4					      ORG	$2FF4-bscode_length
   5435  2fd4					      RORG	$FFF4-bscode_length
   5436  2fd4					      endif
   5437  2fd4				  -	      if	bankswitch == 16
   5438  2fd4				  -	      ORG	$4FF4-bscode_length
   5439  2fd4				  -	      RORG	$FFF4-bscode_length
   5440  2fd4					      endif
   5441  2fd4				  -	      if	bankswitch == 32
   5442  2fd4				  -	      ORG	$8FF4-bscode_length
   5443  2fd4				  -	      RORG	$FFF4-bscode_length
   5444  2fd4					      endif
   5445  2fd4				  -	      if	bankswitch == 64
   5446  2fd4				  -	      ORG	$10FE0-bscode_length
   5447  2fd4				  -	      RORG	$1FFE0-bscode_length
   5448  2fd4					      endif
   5449  2fd4				  -	      else
   5450  2fd4				  -	      ORG	$FFFC
   5451  2fd4					      endif
   5452  2fd4					      endif
   5453  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5454  2fd4
   5455  2fd4							; every bank has this stuff at the same place
   5456  2fd4							; this code can switch to/from any bank at any entry point
   5457  2fd4							; and can preserve register values
   5458  2fd4							; note: lines not starting with a space are not placed in all banks
   5459  2fd4							;
   5460  2fd4							; line below tells the compiler how long this is - do not remove
   5461  2fd4							;size=32
   5462  2fd4
   5463  2fd4				   begin_bscode
   5464  2fd4		       a2 ff		      ldx	#$ff
   5465  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   5466  2fd6				  -	      stx	FASTFETCH
   5467  2fd6					      endif
   5468  2fd6		       9a		      txs
   5469  2fd7				  -	      if	bankswitch == 64
   5470  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5471  2fd7					      else
   5472  2fd7		       a9 f3		      lda	#>(start-1)
   5473  2fd9					      endif
   5474  2fd9		       48		      pha
   5475  2fda		       a9 f7		      lda	#<(start-1)
   5476  2fdc		       48		      pha
   5477  2fdd
   5478  2fdd				   BS_return
   5479  2fdd		       48		      pha
   5480  2fde		       8a		      txa
   5481  2fdf		       48		      pha
   5482  2fe0		       ba		      tsx
   5483  2fe1
   5484  2fe1					      if	bankswitch != 64
   5485  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   5486  2fe3
   5487  2fe3		       2a		      rol
   5488  2fe4		       2a		      rol
   5489  2fe5		       2a		      rol
   5490  2fe6		       2a		      rol
   5491  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5492  2fe9		       aa		      tax
   5493  2fea		       e8		      inx
   5494  2feb				  -	      else
   5495  2feb				  -	      lda	4,x	; get high byte of return address
   5496  2feb				  -	      tay
   5497  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5498  2feb				  -	      sta	4,x
   5499  2feb				  -	      tya
   5500  2feb				  -	      lsr
   5501  2feb				  -	      lsr
   5502  2feb				  -	      lsr
   5503  2feb				  -	      lsr
   5504  2feb				  -	      tax
   5505  2feb				  -	      inx
   5506  2feb					      endif
   5507  2feb
   5508  2feb				   BS_jsr
   5509  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5510  2fee		       68		      pla
   5511  2fef		       aa		      tax
   5512  2ff0		       68		      pla
   5513  2ff1		       60		      rts
   5514  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5515  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5516  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5517  2ff2					      endif
   5518  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5519  2ff2
   5520  2ff2					      ifconst	bankswitch
   5521  2ff2					      if	bankswitch == 8
   5522  2ffc					      ORG	$2FFC
   5523  2ffc					      RORG	$FFFC
   5524  2ffc					      endif
   5525  2ffc				  -	      if	bankswitch == 16
   5526  2ffc				  -	      ORG	$4FFC
   5527  2ffc				  -	      RORG	$FFFC
   5528  2ffc					      endif
   5529  2ffc				  -	      if	bankswitch == 32
   5530  2ffc				  -	      ORG	$8FFC
   5531  2ffc				  -	      RORG	$FFFC
   5532  2ffc					      endif
   5533  2ffc				  -	      if	bankswitch == 64
   5534  2ffc				  -	      ORG	$10FF0
   5535  2ffc				  -	      RORG	$1FFF0
   5536  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5537  2ffc				  -	      ORG	$10FF8
   5538  2ffc				  -	      RORG	$1FFF8
   5539  2ffc				  -	      ifconst	superchip
   5540  2ffc				  -	      .byte	"E","F","S","C"
   5541  2ffc				  -	      else
   5542  2ffc				  -	      .byte	"E","F","E","F"
   5543  2ffc				  -	      endif
   5544  2ffc				  -	      ORG	$10FFC
   5545  2ffc				  -	      RORG	$1FFFC
   5546  2ffc					      endif
   5547  2ffc				  -	      else
   5548  2ffc				  -	      ifconst	ROM2k
   5549  2ffc				  -	      ORG	$F7FC
   5550  2ffc				  -	      else
   5551  2ffc				  -	      ORG	$FFFC
   5552  2ffc				  -	      endif
   5553  2ffc					      endif
   5554  2ffc		       f8 f3		      .word.w	(start & $ffff)
   5555  2ffe		       f8 f3		      .word.w	(start & $ffff)
