------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 d4	   _sc3       =	score + 2
      7  3000 ????
      8  3000 ????	       00 d3	   _sc2       =	score + 1
      9  3000 ????
     10  3000 ????	       00 d2	   _sc1       =	score
     11  3000 ????
     12  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     13  3000 ????
     14  3000 ????	       00 f0	   gameReady  =	z
     15  3000 ????
     16  3000 ????	       00 ee	   _resetTicker =	x
     17  3000 ????
     18  3000 ????	       00 eb	   _High_Score2 =	u
     19  3000 ????
     20  3000 ????	       00 ea	   _High_Score1 =	t
     21  3000 ????
     22  3000 ????	       00 e9	   _High_Score3 =	s
     23  3000 ????
     24  3000 ????	       00 e8	   firstFrame =	r
     25  3000 ????
     26  3000 ????	       00 e6	   altSprite  =	p
     27  3000 ????
     28  3000 ????	       00 e5	   powerUpInPlay =	o
     29  3000 ????
     30  3000 ????	       00 e4	   ticker     =	n
     31  3000 ????
     32  3000 ????	       00 e3	   killCount  =	m
     33  3000 ????
     34  3000 ????	       00 e2	   bulletMultiplier =	l
     35  3000 ????
     36  3000 ????	       00 88	   asteroid4x =	player4x
     37  3000 ????	       00 87	   asteroid3x =	player3x
     38  3000 ????	       00 86	   asteroid2x =	player2x
     39  3000 ????	       00 85	   asteroidx  =	player1x
     40  3000 ????	       00 dd	   player3MoveLeft =	g
     41  3000 ????
     42  3000 ????	       00 dc	   explosionTicker =	f
     43  3000 ????
     44  3000 ????	       00 91	   asteroid4Y =	player4y
     45  3000 ????	       00 90	   asteroid3Y =	player3y
     46  3000 ????	       00 8f	   asteroid2Y =	player2y
     47  3000 ????	       00 8e	   asteroidY  =	player1y
     48  3000 ????	       00 d7	   _P0_Luminosity =	a
     49  3000 ????	       00 01	   bs_mask    =	1
     50  3000 ????	       00 08	   bankswitch =	8
     51  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     52  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .
     50  1100							; 
     51  1100
     52  1100				   .L08 		;  includesfile multisprite_superchip.inc
     53  1100
     54  1100				   .L09 		;  set kernel multisprite
     55  1100
     56  1100				   .L010		;  set romsize 8k
     57  1100
     58  1100				   .
     59  1100							; 
     60  1100
     61  1100				   .L011		;  pfheight = 7
     62  1100
     63  1100		       a9 07		      LDA	#7
     64  1102		       85 c4		      STA	pfheight
     65  1104				   .
     66  1104							; 
     67  1104
     68  1104				   .L012		;  playfield:
     69  1104
     70  1104		       a9 62		      LDA	#<PF1_data0
     71  1106		       85 bb		      STA	PF1pointer
     72  1108		       a9 fb		      LDA	#>PF1_data0
     73  110a		       85 bc		      STA	PF1pointer+1
     74  110c		       a9 6d		      LDA	#<PF2_data0
     75  110e		       85 bd		      STA	PF2pointer
     76  1110		       a9 fb		      LDA	#>PF2_data0
     77  1112		       85 be		      STA	PF2pointer+1
     78  1114				   .
     79  1114							; 
     80  1114
     81  1114				   .L013		;  _COLUP1  =	$3A
     82  1114
     83  1114		       a9 3a		      LDA	#$3A
     84  1116		       85 98		      STA	_COLUP1
     85  1118				   .L014		;  COLUP2  =  $A4
     86  1118
     87  1118		       a9 a4		      LDA	#$A4
     88  111a		       85 99		      STA	COLUP2
     89  111c				   .L015		;  COLUP3  =  $A4
     90  111c
     91  111c		       a9 a4		      LDA	#$A4
     92  111e		       85 9a		      STA	COLUP3
     93  1120				   .L016		;  COLUP4  =  $76
     94  1120
     95  1120		       a9 76		      LDA	#$76
     96  1122		       85 9b		      STA	COLUP4
     97  1124				   .L017		;  COLUP5  =  $2E
     98  1124
     99  1124		       a9 2e		      LDA	#$2E
    100  1126		       85 9c		      STA	COLUP5
    101  1128				   .
    102  1128							; 
    103  1128
    104  1128				   .
    105  1128							; 
    106  1128
    107  1128				   .L018		;  lifecolor  =  $aa
    108  1128
    109  1128		       a9 aa		      LDA	#$aa
    110  112a		       85 c0		      STA	lifecolor
    111  112c				   .
    112  112c							; 
    113  112c
    114  112c				   .
    115  112c							; 
    116  112c
    117  112c				   .
    118  112c							; 
    119  112c
    120  112c				   .L019		;  player0x = 76
    121  112c
    122  112c		       a9 4c		      LDA	#76
    123  112e		       85 84		      STA	player0x
    124  1130				   .L020		;  player0y = 30
    125  1130
    126  1130		       a9 1e		      LDA	#30
    127  1132		       85 8d		      STA	player0y
    128  1134				   .
    129  1134							; 
    130  1134
    131  1134				   .L021		;  player1x = 76
    132  1134
    133  1134		       a9 4c		      LDA	#76
    134  1136		       85 85		      STA	player1x
    135  1138				   .L022		;  player1y = 115
    136  1138
    137  1138		       a9 73		      LDA	#115
    138  113a		       85 8e		      STA	player1y
    139  113c				   .
    140  113c							; 
    141  113c
    142  113c				   .L023		;  player2x = 86
    143  113c
    144  113c		       a9 56		      LDA	#86
    145  113e		       85 86		      STA	player2x
    146  1140				   .L024		;  player2y = 105
    147  1140
    148  1140		       a9 69		      LDA	#105
    149  1142		       85 8f		      STA	player2y
    150  1144				   .
    151  1144							; 
    152  1144
    153  1144				   .L025		;  player3x = 96
    154  1144
    155  1144		       a9 60		      LDA	#96
    156  1146		       85 87		      STA	player3x
    157  1148				   .L026		;  player3y = 110
    158  1148
    159  1148		       a9 6e		      LDA	#110
    160  114a		       85 90		      STA	player3y
    161  114c				   .
    162  114c							; 
    163  114c
    164  114c				   .L027		;  player4x = 116
    165  114c
    166  114c		       a9 74		      LDA	#116
    167  114e		       85 88		      STA	player4x
    168  1150				   .L028		;  player4y = 100
    169  1150
    170  1150		       a9 64		      LDA	#100
    171  1152		       85 91		      STA	player4y
    172  1154				   .
    173  1154							; 
    174  1154
    175  1154				   .L029		;  player5x = 100
    176  1154
    177  1154		       a9 64		      LDA	#100
    178  1156		       85 89		      STA	player5x
    179  1158				   .L030		;  player5y =	200
    180  1158
    181  1158		       a9 c8		      LDA	#200
    182  115a		       85 92		      STA	player5y
    183  115c				   .
    184  115c							; 
    185  115c
    186  115c				   .L031		;  missile0y = 100
    187  115c
    188  115c		       a9 64		      LDA	#100
    189  115e		       85 8a		      STA	missile0y
    190  1160				   .L032		;  missile0x = 140
    191  1160
    192  1160		       a9 8c		      LDA	#140
    193  1162		       85 80		      STA	missile0x
    194  1164				   .
    195  1164							; 
    196  1164
    197  1164				   .
    198  1164							; 
    199  1164
    200  1164				   .
    201  1164							; 
    202  1164
    203  1164				   .L033		;  missile1y = 200
    204  1164
    205  1164		       a9 c8		      LDA	#200
    206  1166		       85 8b		      STA	missile1y
    207  1168				   .L034		;  missile1x = 50
    208  1168
    209  1168		       a9 32		      LDA	#50
    210  116a		       85 81		      STA	missile1x
    211  116c				   .
    212  116c							; 
    213  116c
    214  116c				   .
    215  116c							; 
    216  116c
    217  116c				   .
    218  116c							; 
    219  116c
    220  116c				   .
    221  116c							; 
    222  116c
    223  116c				   .L035		;  dim _P0_Luminosity	=  a.b
    224  116c
    225  116c				   .L036		;  dim asteroidY  =  player1y.b
    226  116c
    227  116c				   .L037		;  dim asteroid2Y  =  player2y.c
    228  116c
    229  116c				   .L038		;  dim asteroid3Y  =  player3y.d
    230  116c
    231  116c				   .L039		;  dim asteroid4Y  =  player4y.e
    232  116c
    233  116c				   .L040		;  dim explosionTicker  =  f
    234  116c
    235  116c				   .L041		;  dim player3MoveLeft  =  g
    236  116c
    237  116c				   .L042		;  dim asteroidx  =  player1x.h
    238  116c
    239  116c				   .L043		;  dim asteroid2x  =  player2x.i
    240  116c
    241  116c				   .L044		;  dim asteroid3x  =  player3x.j
    242  116c
    243  116c				   .L045		;  dim asteroid4x  =  player4x.k
    244  116c
    245  116c				   .L046		;  dim bulletMultiplier  =  l
    246  116c
    247  116c				   .L047		;  dim killCount  =  m
    248  116c
    249  116c				   .L048		;  dim ticker	=  n
    250  116c
    251  116c				   .L049		;  dim powerUpInPlay  =  o
    252  116c
    253  116c				   .L050		;  dim altSprite  =  p
    254  116c
    255  116c				   .L051		;  dim firstFrame  =  r
    256  116c
    257  116c				   .L052		;  dim _High_Score3  =  s
    258  116c
    259  116c				   .L053		;  dim _High_Score1  =  t
    260  116c
    261  116c				   .L054		;  dim _High_Score2  =  u
    262  116c
    263  116c				   .L055		;  dim _resetTicker  =  x
    264  116c
    265  116c				   .L056		;  dim gameReady  =  z
    266  116c
    267  116c				   .
    268  116c							; 
    269  116c
    270  116c				   .L057		;  dim _Bit6_Sequence_Switch  =  y
    271  116c
    272  116c				   .
    273  116c							; 
    274  116c
    275  116c				   .L058		;  dim _sc1  =  score
    276  116c
    277  116c				   .L059		;  dim _sc2  =  score + 1
    278  116c
    279  116c				   .L060		;  dim _sc3  =  score + 2
    280  116c
    281  116c				   .L061		;  dim titlescreencolor  =  $F0
    282  116c
    283  116c				   .
    284  116c							; 
    285  116c
    286  116c				   .
    287  116c							; 
    288  116c
    289  116c				   .
    290  116c							; 
    291  116c
    292  116c				   .
    293  116c							; 
    294  116c
    295  116c				   .L062		;  bulletMultiplier  =  0
    296  116c
    297  116c		       a9 00		      LDA	#0
    298  116e		       85 e2		      STA	bulletMultiplier
    299  1170				   .L063		;  _High_Score1  =  _sc1
    300  1170
    301  1170		       a5 d2		      LDA	_sc1
    302  1172		       85 ea		      STA	_High_Score1
    303  1174				   .L064		;  _High_Score2  =  _sc2
    304  1174
    305  1174		       a5 d3		      LDA	_sc2
    306  1176		       85 eb		      STA	_High_Score2
    307  1178				   .L065		;  _High_Score3  =  _sc3
    308  1178
    309  1178		       a5 d4		      LDA	_sc3
    310  117a		       85 e9		      STA	_High_Score3
    311  117c				   .L066		;  lives  =  192
    312  117c
    313  117c		       a9 c0		      LDA	#192
    314  117e		       85 c2		      STA	lives
    315  1180				   .L067		;  ticker  =  0
    316  1180
    317  1180		       a9 00		      LDA	#0
    318  1182		       85 e4		      STA	ticker
    319  1184				   .L068		;  _resetTicker  =  0
    320  1184
    321  1184		       a9 00		      LDA	#0
    322  1186		       85 ee		      STA	_resetTicker
    323  1188				   .L069		;  altSprite  =  0
    324  1188
    325  1188		       a9 00		      LDA	#0
    326  118a		       85 e6		      STA	altSprite
    327  118c				   .L070		;  explosionTicker  =	0
    328  118c
    329  118c		       a9 00		      LDA	#0
    330  118e		       85 dc		      STA	explosionTicker
    331  1190				   .L071		;  scorecolor	=  $1b
    332  1190
    333  1190		       a9 1b		      LDA	#$1b
    334  1192		       85 d5		      STA	scorecolor
    335  1194				   .L072		;  firstFrame	=  0
    336  1194
    337  1194		       a9 00		      LDA	#0
    338  1196		       85 e8		      STA	firstFrame
    339  1198				   .L073		;  player3MoveLeft  =	1
    340  1198
    341  1198		       a9 01		      LDA	#1
    342  119a		       85 dd		      STA	player3MoveLeft
    343  119c				   .L074		;  killCount  =  0
    344  119c
    345  119c		       a9 00		      LDA	#0
    346  119e		       85 e3		      STA	killCount
    347  11a0				   .L075		;  powerUpInPlay  =  0
    348  11a0
    349  11a0		       a9 00		      LDA	#0
    350  11a2		       85 e5		      STA	powerUpInPlay
    351  11a4				   .sprites
    352  11a4							; sprites
    353  11a4
    354  11a4				   .L076		;  ticker  =  ticker  +  1
    355  11a4
    356  11a4		       e6 e4		      INC	ticker
    357  11a6				   .L077		;  if ticker  >  10 then COLUBK  =  $0  :  ticker  =  0  :  AUDV0  =  0  :  AUDC0  =  0  :  AUDF0  =  0
    358  11a6
    359  11a6		       a9 0a		      LDA	#10
    360  11a8		       c5 e4		      CMP	ticker
    361  11aa		       b0 0e		      BCS	.skipL077
    362  11ac				   .condpart0
    363  11ac		       a9 00		      LDA	#$0
    364  11ae		       85 09		      STA	COLUBK
    365  11b0		       a9 00		      LDA	#0
    366  11b2		       85 e4		      STA	ticker
    367  11b4		       85 19		      STA	AUDV0
    368  11b6		       85 15		      STA	AUDC0
    369  11b8		       85 17		      STA	AUDF0
    370  11ba				   .skipL077
    371  11ba				   .
    372  11ba							; 
    373  11ba
    374  11ba				   .
    375  11ba							; 
    376  11ba
    377  11ba				   .
    378  11ba							; 
    379  11ba
    380  11ba				   .
    381  11ba							; 
    382  11ba
    383  11ba				   .
    384  11ba							; 
    385  11ba
    386  11ba				   .L078		;  if player1y  =  100 then goto setPlayer1Color
    387  11ba
    388  11ba		       a5 8e		      LDA	player1y
    389  11bc		       c9 64		      CMP	#100
    390  11be		       d0 03		      BNE	.skipL078
    391  11c0				   .condpart1
    392  11c0		       4c 3d dd 	      jmp	.setPlayer1Color
    393  11c3
    394  11c3				   .skipL078
    395  11c3				   .
    396  11c3							; 
    397  11c3
    398  11c3				   .completePlayer1ColorSet
    399  11c3							; completePlayer1ColorSet
    400  11c3
    401  11c3				   .L079		;  if player2y  =  100 then goto setPlayer2Color
    402  11c3
    403  11c3		       a5 8f		      LDA	player2y
    404  11c5		       c9 64		      CMP	#100
    405  11c7		       d0 03		      BNE	.skipL079
    406  11c9				   .condpart2
    407  11c9		       4c 66 dd 	      jmp	.setPlayer2Color
    408  11cc
    409  11cc				   .skipL079
    410  11cc				   .
    411  11cc							; 
    412  11cc
    413  11cc				   .completePlayer2ColorSet
    414  11cc							; completePlayer2ColorSet
    415  11cc
    416  11cc				   .L080		;  if player3y  =  100 then goto setPlayer3Color
    417  11cc
    418  11cc		       a5 90		      LDA	player3y
    419  11ce		       c9 64		      CMP	#100
    420  11d0		       d0 03		      BNE	.skipL080
    421  11d2				   .condpart3
    422  11d2		       4c 94 dd 	      jmp	.setPlayer3Color
    423  11d5
    424  11d5				   .skipL080
    425  11d5				   .
    426  11d5							; 
    427  11d5
    428  11d5				   .
    429  11d5							; 
    430  11d5
    431  11d5				   .
    432  11d5							; 
    433  11d5
    434  11d5				   .
    435  11d5							; 
    436  11d5
    437  11d5				   .
    438  11d5							; 
    439  11d5
    440  11d5				   .colorSetComplete
    441  11d5							; colorSetComplete
    442  11d5
    443  11d5				   .
    444  11d5							; 
    445  11d5
    446  11d5				   .L081		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    447  11d5
    448  11d5		       a5 92		      LDA	player5y
    449  11d7		       c9 c8		      CMP	#200
    450  11d9		       b0 02		      BCS	.skipL081
    451  11db				   .condpart4
    452  11db		       e6 dc		      INC	explosionTicker
    453  11dd				   .skipL081
    454  11dd				   .L082		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    455  11dd
    456  11dd		       a9 01		      LDA	#1
    457  11df		       c5 dc		      CMP	explosionTicker
    458  11e1		       b0 0e		      BCS	.skipL082
    459  11e3				   .condpart5
    460  11e3		       a9 c8		      LDA	#200
    461  11e5		       85 92		      STA	player5y
    462  11e7		       a9 00		      LDA	#0
    463  11e9		       85 dc		      STA	explosionTicker
    464  11eb		       85 19		      STA	AUDV0
    465  11ed		       85 15		      STA	AUDC0
    466  11ef		       85 17		      STA	AUDF0
    467  11f1				   .skipL082
    468  11f1				   .
    469  11f1							; 
    470  11f1
    471  11f1				   .L083		;  if player2y  <  85	&&  missile1y  >  150  &&  altSprite  =  1 then missile1y  =  player2y :  missile1x  =	player2x  -  3
    472  11f1
    473  11f1		       a5 8f		      LDA	player2y
    474  11f3		       c9 55		      CMP	#85
    475  11f5		       b0 17		      BCS	.skipL083
    476  11f7				   .condpart6
    477  11f7		       a9 96		      LDA	#150
    478  11f9		       c5 8b		      CMP	missile1y
    479  11fb		       b0 11		      BCS	.skip6then
    480  11fd				   .condpart7
    481  11fd		       a5 e6		      LDA	altSprite
    482  11ff		       c9 01		      CMP	#1
    483  1201		       d0 0b		      BNE	.skip7then
    484  1203				   .condpart8
    485  1203		       a5 8f		      LDA	player2y
    486  1205		       85 8b		      STA	missile1y
    487  1207		       a5 86		      LDA	player2x
    488  1209		       38		      SEC
    489  120a		       e9 03		      SBC	#3
    490  120c		       85 81		      STA	missile1x
    491  120e				   .skip7then
    492  120e				   .skip6then
    493  120e				   .skipL083
    494  120e				   .L084		;  if player3y  <  85	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    495  120e
    496  120e		       a5 90		      LDA	player3y
    497  1210		       c9 55		      CMP	#85
    498  1212		       b0 11		      BCS	.skipL084
    499  1214				   .condpart9
    500  1214		       a9 96		      LDA	#150
    501  1216		       c5 8b		      CMP	missile1y
    502  1218		       b0 0b		      BCS	.skip9then
    503  121a				   .condpart10
    504  121a		       a5 90		      LDA	player3y
    505  121c		       85 8b		      STA	missile1y
    506  121e		       a5 87		      LDA	player3x
    507  1220		       38		      SEC
    508  1221		       e9 03		      SBC	#3
    509  1223		       85 81		      STA	missile1x
    510  1225				   .skip9then
    511  1225				   .skipL084
    512  1225				   .L085		;  if player4y  <  85	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    513  1225
    514  1225		       a5 91		      LDA	player4y
    515  1227		       c9 55		      CMP	#85
    516  1229		       b0 11		      BCS	.skipL085
    517  122b				   .condpart11
    518  122b		       a9 96		      LDA	#150
    519  122d		       c5 8b		      CMP	missile1y
    520  122f		       b0 0b		      BCS	.skip11then
    521  1231				   .condpart12
    522  1231		       a5 91		      LDA	player4y
    523  1233		       85 8b		      STA	missile1y
    524  1235		       a5 88		      LDA	player4x
    525  1237		       38		      SEC
    526  1238		       e9 03		      SBC	#3
    527  123a		       85 81		      STA	missile1x
    528  123c				   .skip11then
    529  123c				   .skipL085
    530  123c				   .
    531  123c							; 
    532  123c
    533  123c				   .L086		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    534  123c
    535  123c		       a9 1e		      LDA	#30
    536  123e		       c5 8a		      CMP	missile0y
    537  1240		       b0 15		      BCS	.skipL086
    538  1242				   .condpart13
    539  1242		       a5 8a		      LDA	missile0y
    540  1244		       c9 3c		      CMP	#60
    541  1246		       b0 0f		      BCS	.skip13then
    542  1248				   .condpart14
    543  1248		       a9 02		      LDA	#2
    544  124a		       85 1a		      STA	AUDV1
    545  124c		       a9 0c		      LDA	#12
    546  124e		       85 16		      STA	AUDC1
    547  1250		       a9 07		      LDA	#7
    548  1252		       85 18		      STA	AUDF1
    549  1254		       4c 5f d2 	      jmp	.skipelse0
    550  1257				   .skip13then
    551  1257				   .skipL086
    552  1257		       a9 00		      LDA	#0
    553  1259		       85 1a		      STA	AUDV1
    554  125b		       85 16		      STA	AUDC1
    555  125d		       85 17		      STA	AUDF0
    556  125f				   .skipelse0
    557  125f				   .
    558  125f							; 
    559  125f
    560  125f				   .L087		;  if player0x  >   ( player1x  -  20 )   &&  player0x  <   ( player1x  +  1 )   &&  player0y	>   ( player1y	-  10 )   &&  player0y	<   ( player1y	+  15 )   &&  powerUpInPlay  =	1 then goto handlePowerUp
    561  125f
    562  125f							; complex condition detected
    563  125f							; complex statement detected
    564  125f		       a5 85		      LDA	player1x
    565  1261		       38		      SEC
    566  1262		       e9 14		      SBC	#20
    567  1264							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    568  1264		       c5 84		      CMP	player0x
    569  1266		       b0 2e		      BCS	.skipL087
    570  1268				   .condpart15
    571  1268							; complex condition detected
    572  1268							; complex statement detected
    573  1268		       a5 85		      LDA	player1x
    574  126a		       18		      CLC
    575  126b		       69 01		      ADC	#1
    576  126d		       48		      PHA
    577  126e		       ba		      TSX
    578  126f		       68		      PLA
    579  1270		       a5 84		      LDA	player0x
    580  1272		       d5 01		      CMP	1,x
    581  1274		       b0 20		      BCS	.skip15then
    582  1276				   .condpart16
    583  1276							; complex condition detected
    584  1276							; complex statement detected
    585  1276		       a5 8e		      LDA	player1y
    586  1278		       38		      SEC
    587  1279		       e9 0a		      SBC	#10
    588  127b							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
    589  127b		       c5 8d		      CMP	player0y
    590  127d		       b0 17		      BCS	.skip16then
    591  127f				   .condpart17
    592  127f							; complex condition detected
    593  127f							; complex statement detected
    594  127f		       a5 8e		      LDA	player1y
    595  1281		       18		      CLC
    596  1282		       69 0f		      ADC	#15
    597  1284		       48		      PHA
    598  1285		       ba		      TSX
    599  1286		       68		      PLA
    600  1287		       a5 8d		      LDA	player0y
    601  1289		       d5 01		      CMP	1,x
    602  128b		       b0 09		      BCS	.skip17then
    603  128d				   .condpart18
    604  128d		       a5 e5		      LDA	powerUpInPlay
    605  128f		       c9 01		      CMP	#1
    606  1291		       d0 03		      BNE	.skip18then
    607  1293				   .condpart19
    608  1293		       4c be d2 	      jmp	.handlePowerUp
    609  1296
    610  1296				   .skip18then
    611  1296				   .skip17then
    612  1296				   .skip16then
    613  1296				   .skip15then
    614  1296				   .skipL087
    615  1296				   .
    616  1296							; 
    617  1296
    618  1296				   .L088		;  if collision(missile1,player0) then goto killPlayer
    619  1296
    620  1296		       24 01		      bit	CXM1P
    621  1298		       10 03		      BPL	.skipL088
    622  129a				   .condpart20
    623  129a		       4c 52 de 	      jmp	.killPlayer
    624  129d
    625  129d				   .skipL088
    626  129d				   .L089		;  if collision(player0,player1) then goto killPlayer
    627  129d
    628  129d		       24 07		      bit	CXPPMM
    629  129f		       10 03		      BPL	.skipL089
    630  12a1				   .condpart21
    631  12a1		       4c 52 de 	      jmp	.killPlayer
    632  12a4
    633  12a4				   .skipL089
    634  12a4				   .L090		;  if _resetTicker  >	0 then goto killPlayer
    635  12a4
    636  12a4		       a9 00		      LDA	#0
    637  12a6		       c5 ee		      CMP	_resetTicker
    638  12a8		       b0 03		      BCS	.skipL090
    639  12aa				   .condpart22
    640  12aa		       4c 52 de 	      jmp	.killPlayer
    641  12ad
    642  12ad				   .skipL090
    643  12ad				   .L091		;  if missile1y  <  150  &&  _resetTicker  =  0 then missile1y  =  missile1y  - 1
    644  12ad
    645  12ad		       a5 8b		      LDA	missile1y
    646  12af		       c9 96		      CMP	#150
    647  12b1		       b0 08		      BCS	.skipL091
    648  12b3				   .condpart23
    649  12b3		       a5 ee		      LDA	_resetTicker
    650  12b5		       c9 00		      CMP	#0
    651  12b7		       d0 02		      BNE	.skip23then
    652  12b9				   .condpart24
    653  12b9		       c6 8b		      DEC	missile1y
    654  12bb				   .skip23then
    655  12bb				   .skipL091
    656  12bb				   .L092		;  goto titlepage
    657  12bb
    658  12bb		       4c 3f d3 	      jmp	.titlepage
    659  12be
    660  12be				   .
    661  12be							; 
    662  12be
    663  12be				   .handlePowerUp
    664  12be							; handlePowerUp
    665  12be
    666  12be				   .L093		;  player1y  =  115
    667  12be
    668  12be		       a9 73		      LDA	#115
    669  12c0		       85 8e		      STA	player1y
    670  12c2				   .L094		;  player2y  =  105
    671  12c2
    672  12c2		       a9 69		      LDA	#105
    673  12c4		       85 8f		      STA	player2y
    674  12c6				   .L095		;  player3y  =  120
    675  12c6
    676  12c6		       a9 78		      LDA	#120
    677  12c8		       85 90		      STA	player3y
    678  12ca				   .L096		;  player4y  =  100
    679  12ca
    680  12ca		       a9 64		      LDA	#100
    681  12cc		       85 91		      STA	player4y
    682  12ce				   .
    683  12ce							; 
    684  12ce
    685  12ce				   .L097		;  player1x  =  player1x  +   ( ticker  *  12 ) 
    686  12ce
    687  12ce							; complex statement detected
    688  12ce		       a5 85		      LDA	player1x
    689  12d0		       48		      PHA
    690  12d1		       a5 e4		      LDA	ticker
    691  12d3		       0a		      asl
    692  12d4		       18		      clc
    693  12d5		       65 e4		      adc	ticker
    694  12d7		       0a		      asl
    695  12d8		       0a		      asl
    696  12d9		       ba		      TSX
    697  12da		       e8		      INX
    698  12db		       9a		      TXS
    699  12dc		       18		      CLC
    700  12dd		       75 00		      ADC	$00,x
    701  12df		       85 85		      STA	player1x
    702  12e1				   .L098		;  player2x  =  player2x  +   ( ticker  *  12 ) 
    703  12e1
    704  12e1							; complex statement detected
    705  12e1		       a5 86		      LDA	player2x
    706  12e3		       48		      PHA
    707  12e4		       a5 e4		      LDA	ticker
    708  12e6		       0a		      asl
    709  12e7		       18		      clc
    710  12e8		       65 e4		      adc	ticker
    711  12ea		       0a		      asl
    712  12eb		       0a		      asl
    713  12ec		       ba		      TSX
    714  12ed		       e8		      INX
    715  12ee		       9a		      TXS
    716  12ef		       18		      CLC
    717  12f0		       75 00		      ADC	$00,x
    718  12f2		       85 86		      STA	player2x
    719  12f4				   .L099		;  player3x  =  player3x  +   ( ticker  *  12 ) 
    720  12f4
    721  12f4							; complex statement detected
    722  12f4		       a5 87		      LDA	player3x
    723  12f6		       48		      PHA
    724  12f7		       a5 e4		      LDA	ticker
    725  12f9		       0a		      asl
    726  12fa		       18		      clc
    727  12fb		       65 e4		      adc	ticker
    728  12fd		       0a		      asl
    729  12fe		       0a		      asl
    730  12ff		       ba		      TSX
    731  1300		       e8		      INX
    732  1301		       9a		      TXS
    733  1302		       18		      CLC
    734  1303		       75 00		      ADC	$00,x
    735  1305		       85 87		      STA	player3x
    736  1307				   .L0100		;  asteroid4x	=  116
    737  1307
    738  1307		       a9 00		      LDA	#0
    739  1309		       85 e1		      STA	k
    740  130b		       a9 74		      LDA	#116
    741  130d		       85 88		      STA	asteroid4x
    742  130f				   .L0101		;  score  =  score  +	50
    743  130f
    744  130f		       f8		      SED
    745  1310		       18		      CLC
    746  1311		       a5 d4		      LDA	score+2
    747  1313		       69 50		      ADC	#$50
    748  1315		       85 d4		      STA	score+2
    749  1317		       a5 d3		      LDA	score+1
    750  1319		       69 00		      ADC	#$00
    751  131b		       85 d3		      STA	score+1
    752  131d		       a5 d2		      LDA	score
    753  131f		       69 00		      ADC	#$00
    754  1321		       85 d2		      STA	score
    755  1323		       d8		      CLD
    756  1324				   .L0102		;  COLUBK  =  $1f
    757  1324
    758  1324		       a9 1f		      LDA	#$1f
    759  1326		       85 09		      STA	COLUBK
    760  1328				   .L0103		;  ticker  =  5
    761  1328
    762  1328		       a9 05		      LDA	#5
    763  132a		       85 e4		      STA	ticker
    764  132c				   .L0104		;  lives  =  192
    765  132c
    766  132c		       a9 c0		      LDA	#192
    767  132e		       85 c2		      STA	lives
    768  1330				   .L0105		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
    769  1330
    770  1330		       a9 0c		      LDA	#12
    771  1332		       85 19		      STA	AUDV0
    772  1334		       a9 08		      LDA	#8
    773  1336		       85 15		      STA	AUDC0
    774  1338		       a9 1c		      LDA	#28
    775  133a		       85 17		      STA	AUDF0
    776  133c				   .L0106		;  goto frameReset
    777  133c
    778  133c		       4c 5b d7 	      jmp	.frameReset
    779  133f
    780  133f				   .
    781  133f							; 
    782  133f
    783  133f				   .titlepage
    784  133f							; titlepage
    785  133f
    786  133f				   .L0107		;  if joy0fire  ||  switchreset then gameReady  =  1
    787  133f
    788  133f		       24 0c		      bit	INPT4
    789  1341		       30 03		      BMI	.skipL0107
    790  1343				   .condpart25
    791  1343		       4c 4d d3 	      jmp	.condpart26
    792  1346				   .skipL0107
    793  1346		       a9 01		      lda	#1
    794  1348		       2c 82 02 	      bit	SWCHB
    795  134b		       d0 04		      BNE	.skip10OR
    796  134d				   .condpart26
    797  134d		       a9 01		      LDA	#1
    798  134f		       85 f0		      STA	gameReady
    799  1351				   .skip10OR
    800  1351				   .L0108		;  if gameReady  =  1 then goto gamestart
    801  1351
    802  1351		       a5 f0		      LDA	gameReady
    803  1353		       c9 01		      CMP	#1
    804  1355		       d0 03		      BNE	.skipL0108
    805  1357				   .condpart27
    806  1357		       4c 8d d3 	      jmp	.gamestart
    807  135a
    808  135a				   .skipL0108
    809  135a				   .L0109		;  gosub titledrawscreen bank2
    810  135a
    811  135a		       85 d1		      sta	temp7
    812  135c		       a9 d3		      lda	#>(ret_point1-1)
    813  135e		       48		      pha
    814  135f		       a9 71		      lda	#<(ret_point1-1)
    815  1361		       48		      pha
    816  1362		       a9 f4		      lda	#>(.titledrawscreen-1)
    817  1364		       48		      pha
    818  1365		       a9 40		      lda	#<(.titledrawscreen-1)
    819  1367		       48		      pha
    820  1368		       a5 d1		      lda	temp7
    821  136a		       48		      pha
    822  136b		       8a		      txa
    823  136c		       48		      pha
    824  136d		       a2 02		      ldx	#2
    825  136f		       4c eb ff 	      jmp	BS_jsr
    826  1372				   ret_point1
    827  1372				   .L0110		;  _sc1  =  0
    828  1372
    829  1372		       a9 00		      LDA	#0
    830  1374		       85 d2		      STA	_sc1
    831  1376				   .L0111		;  _sc2  =  0
    832  1376
    833  1376		       a9 00		      LDA	#0
    834  1378		       85 d3		      STA	_sc2
    835  137a				   .L0112		;  _sc3  =  0
    836  137a
    837  137a		       a9 00		      LDA	#0
    838  137c		       85 d4		      STA	_sc3
    839  137e				   .L0113		;  _sc1  =  _High_Score1
    840  137e
    841  137e		       a5 ea		      LDA	_High_Score1
    842  1380		       85 d2		      STA	_sc1
    843  1382				   .L0114		;  _sc2  =  _High_Score2
    844  1382
    845  1382		       a5 eb		      LDA	_High_Score2
    846  1384		       85 d3		      STA	_sc2
    847  1386				   .L0115		;  _sc3  =  _High_Score3
    848  1386
    849  1386		       a5 e9		      LDA	_High_Score3
    850  1388		       85 d4		      STA	_sc3
    851  138a				   .
    852  138a							; 
    853  138a
    854  138a				   .L0116		;  goto titlepage
    855  138a
    856  138a		       4c 3f d3 	      jmp	.titlepage
    857  138d
    858  138d				   .
    859  138d							; 
    860  138d
    861  138d				   .gamestart
    862  138d							; gamestart
    863  138d
    864  138d				   .L0117		;  CTRLPF  =  1
    865  138d
    866  138d		       a9 01		      LDA	#1
    867  138f		       85 0a		      STA	CTRLPF
    868  1391				   .
    869  1391							; 
    870  1391
    871  1391				   .L0118		;  if firstFrame  =  0 then missile0x	=  200	:  missile0y  =  200 :	_sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1 :  lives  =	192 :  bulletMultiplier  =  0 :  killCount  =  0
    872  1391
    873  1391		       a5 e8		      LDA	firstFrame
    874  1393		       c9 00		      CMP	#0
    875  1395		       d0 1c		      BNE	.skipL0118
    876  1397				   .condpart28
    877  1397		       a9 c8		      LDA	#200
    878  1399		       85 80		      STA	missile0x
    879  139b		       85 8a		      STA	missile0y
    880  139d		       a9 00		      LDA	#0
    881  139f		       85 d2		      STA	_sc1
    882  13a1		       85 d3		      STA	_sc2
    883  13a3		       85 d4		      STA	_sc3
    884  13a5		       a9 01		      LDA	#1
    885  13a7		       85 e8		      STA	firstFrame
    886  13a9		       a9 c0		      LDA	#192
    887  13ab		       85 c2		      STA	lives
    888  13ad		       a9 00		      LDA	#0
    889  13af		       85 e2		      STA	bulletMultiplier
    890  13b1		       85 e3		      STA	killCount
    891  13b3				   .skipL0118
    892  13b3				   .
    893  13b3							; 
    894  13b3
    895  13b3				   .L0119		;  lives:
    896  13b3
    897  13b3		       a9 84		      LDA	#<lives__L0119
    898  13b5		       85 c1		      STA	lifepointer
    899  13b7		       a5 c2		      LDA	lifepointer+1
    900  13b9		       29 e0		      AND	#$E0
    901  13bb		       09 1a		      ORA	#(>lives__L0119)&($1F)
    902  13bd		       85 c2		      STA	lifepointer+1
    903  13bf				   .
    904  13bf							; 
    905  13bf
    906  13bf				   .L0120		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    907  13bf
    908  13bf		       a5 ea		      LDA	_High_Score1
    909  13c1		       c5 d2		      CMP	_sc1
    910  13c3		       b0 03		      BCS	.skipL0120
    911  13c5				   .condpart29
    912  13c5		       4c f8 d3 	      jmp	.__New_High_Score
    913  13c8
    914  13c8				   .skipL0120
    915  13c8				   .L0121		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    916  13c8
    917  13c8		       a5 d2		      LDA	_sc1
    918  13ca		       c5 ea		      CMP	_High_Score1
    919  13cc		       b0 03		      BCS	.skipL0121
    920  13ce				   .condpart30
    921  13ce		       4c 04 d4 	      jmp	.__Skip_High_Score
    922  13d1
    923  13d1				   .skipL0121
    924  13d1				   .L0122		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    925  13d1
    926  13d1		       a5 eb		      LDA	_High_Score2
    927  13d3		       c5 d3		      CMP	_sc2
    928  13d5		       b0 03		      BCS	.skipL0122
    929  13d7				   .condpart31
    930  13d7		       4c f8 d3 	      jmp	.__New_High_Score
    931  13da
    932  13da				   .skipL0122
    933  13da				   .L0123		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    934  13da
    935  13da		       a5 d3		      LDA	_sc2
    936  13dc		       c5 eb		      CMP	_High_Score2
    937  13de		       b0 03		      BCS	.skipL0123
    938  13e0				   .condpart32
    939  13e0		       4c 04 d4 	      jmp	.__Skip_High_Score
    940  13e3
    941  13e3				   .skipL0123
    942  13e3				   .
    943  13e3							; 
    944  13e3
    945  13e3				   .L0124		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    946  13e3
    947  13e3		       a5 e9		      LDA	_High_Score3
    948  13e5		       c5 d4		      CMP	_sc3
    949  13e7		       b0 03		      BCS	.skipL0124
    950  13e9				   .condpart33
    951  13e9		       4c f8 d3 	      jmp	.__New_High_Score
    952  13ec
    953  13ec				   .skipL0124
    954  13ec				   .L0125		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    955  13ec
    956  13ec		       a5 d4		      LDA	_sc3
    957  13ee		       c5 e9		      CMP	_High_Score3
    958  13f0		       b0 03		      BCS	.skipL0125
    959  13f2				   .condpart34
    960  13f2		       4c 04 d4 	      jmp	.__Skip_High_Score
    961  13f5
    962  13f5				   .skipL0125
    963  13f5				   .
    964  13f5							; 
    965  13f5
    966  13f5				   .L0126		;  goto __Skip_High_Score
    967  13f5
    968  13f5		       4c 04 d4 	      jmp	.__Skip_High_Score
    969  13f8
    970  13f8				   .
    971  13f8							; 
    972  13f8
    973  13f8				   .__New_High_Score
    974  13f8							; __New_High_Score
    975  13f8
    976  13f8				   .
    977  13f8							; 
    978  13f8
    979  13f8				   .L0127		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    980  13f8
    981  13f8		       a5 d2		      LDA	_sc1
    982  13fa		       85 ea		      STA	_High_Score1
    983  13fc		       a5 d3		      LDA	_sc2
    984  13fe		       85 eb		      STA	_High_Score2
    985  1400		       a5 d4		      LDA	_sc3
    986  1402		       85 e9		      STA	_High_Score3
    987  1404				   .__Skip_High_Score
    988  1404							; __Skip_High_Score
    989  1404
    990  1404				   .
    991  1404							; 
    992  1404
    993  1404				   .L0128		;  if ticker  <  5 then player0: 
    994  1404
    995  1404		       a5 e4		      LDA	ticker
    996  1406		       c9 05		      CMP	#5
    997  1408		       b0 0c		      BCS	.skipL0128
    998  140a				   .condpart35
    999  140a		       a2 8c		      LDX	#<player35then_0
   1000  140c		       86 a2		      STX	player0pointerlo
   1001  140e		       a9 fa		      LDA	#>player35then_0
   1002  1410		       85 a3		      STA	player0pointerhi
   1003  1412		       a9 09		      LDA	#9
   1004  1414		       85 b0		      STA	player0height
   1005  1416				   .skipL0128
   1006  1416				   .
   1007  1416							; 
   1008  1416
   1009  1416				   .L0129		;  if ticker  >=  5 then player0: 
   1010  1416
   1011  1416		       a5 e4		      LDA	ticker
   1012  1418		       c9 05		      CMP	#5
   1013  141a		       90 0c		      BCC	.skipL0129
   1014  141c				   .condpart36
   1015  141c		       a2 95		      LDX	#<player36then_0
   1016  141e		       86 a2		      STX	player0pointerlo
   1017  1420		       a9 fa		      LDA	#>player36then_0
   1018  1422		       85 a3		      STA	player0pointerhi
   1019  1424		       a9 09		      LDA	#9
   1020  1426		       85 b0		      STA	player0height
   1021  1428				   .skipL0129
   1022  1428				   .
   1023  1428							; 
   1024  1428
   1025  1428				   .L0130		;  if powerUpInPlay  =  1 then player1:
   1026  1428
   1027  1428		       a5 e5		      LDA	powerUpInPlay
   1028  142a		       c9 01		      CMP	#1
   1029  142c		       d0 0c		      BNE	.skipL0130
   1030  142e				   .condpart37
   1031  142e		       a2 9e		      LDX	#<player37then_1
   1032  1430		       86 a6		      STX	player1pointerlo
   1033  1432		       a9 fa		      LDA	#>player37then_1
   1034  1434		       85 ab		      STA	player1pointerhi
   1035  1436		       a9 09		      LDA	#9
   1036  1438		       85 b1		      STA	player1height
   1037  143a				   .skipL0130
   1038  143a				   .
   1039  143a							; 
   1040  143a
   1041  143a				   .L0131		;  if powerUpInPlay  =  0  &&	ticker	<  5 then player1:
   1042  143a
   1043  143a		       a5 e5		      LDA	powerUpInPlay
   1044  143c		       c9 00		      CMP	#0
   1045  143e		       d0 12		      BNE	.skipL0131
   1046  1440				   .condpart38
   1047  1440		       a5 e4		      LDA	ticker
   1048  1442		       c9 05		      CMP	#5
   1049  1444		       b0 0c		      BCS	.skip38then
   1050  1446				   .condpart39
   1051  1446		       a2 a6		      LDX	#<player39then_1
   1052  1448		       86 a6		      STX	player1pointerlo
   1053  144a		       a9 fa		      LDA	#>player39then_1
   1054  144c		       85 ab		      STA	player1pointerhi
   1055  144e		       a9 09		      LDA	#9
   1056  1450		       85 b1		      STA	player1height
   1057  1452				   .skip38then
   1058  1452				   .skipL0131
   1059  1452				   .
   1060  1452							; 
   1061  1452
   1062  1452				   .L0132		;  if powerUpInPlay  =  0  &&	ticker	>=  5 then player1:
   1063  1452
   1064  1452		       a5 e5		      LDA	powerUpInPlay
   1065  1454		       c9 00		      CMP	#0
   1066  1456		       d0 12		      BNE	.skipL0132
   1067  1458				   .condpart40
   1068  1458		       a5 e4		      LDA	ticker
   1069  145a		       c9 05		      CMP	#5
   1070  145c		       90 0c		      BCC	.skip40then
   1071  145e				   .condpart41
   1072  145e		       a2 ae		      LDX	#<player41then_1
   1073  1460		       86 a6		      STX	player1pointerlo
   1074  1462		       a9 fa		      LDA	#>player41then_1
   1075  1464		       85 ab		      STA	player1pointerhi
   1076  1466		       a9 09		      LDA	#9
   1077  1468		       85 b1		      STA	player1height
   1078  146a				   .skip40then
   1079  146a				   .skipL0132
   1080  146a				   .
   1081  146a							; 
   1082  146a
   1083  146a				   .L0133		;  if ticker  <  5 then player2:
   1084  146a
   1085  146a		       a5 e4		      LDA	ticker
   1086  146c		       c9 05		      CMP	#5
   1087  146e		       b0 0c		      BCS	.skipL0133
   1088  1470				   .condpart42
   1089  1470		       a2 b6		      LDX	#<player42then_2
   1090  1472		       86 a7		      STX	player2pointerlo
   1091  1474		       a9 fa		      LDA	#>player42then_2
   1092  1476		       85 ac		      STA	player2pointerhi
   1093  1478		       a9 09		      LDA	#9
   1094  147a		       85 b2		      STA	player2height
   1095  147c				   .skipL0133
   1096  147c				   .
   1097  147c							; 
   1098  147c
   1099  147c				   .L0134		;  if ticker  >=  5 then player2:
   1100  147c
   1101  147c		       a5 e4		      LDA	ticker
   1102  147e		       c9 05		      CMP	#5
   1103  1480		       90 0c		      BCC	.skipL0134
   1104  1482				   .condpart43
   1105  1482		       a2 be		      LDX	#<player43then_2
   1106  1484		       86 a7		      STX	player2pointerlo
   1107  1486		       a9 fa		      LDA	#>player43then_2
   1108  1488		       85 ac		      STA	player2pointerhi
   1109  148a		       a9 09		      LDA	#9
   1110  148c		       85 b2		      STA	player2height
   1111  148e				   .skipL0134
   1112  148e				   .
   1113  148e							; 
   1114  148e
   1115  148e				   .L0135		;  if ticker  <  3 then player3: 
   1116  148e
   1117  148e		       a5 e4		      LDA	ticker
   1118  1490		       c9 03		      CMP	#3
   1119  1492		       b0 0c		      BCS	.skipL0135
   1120  1494				   .condpart44
   1121  1494		       a2 c6		      LDX	#<player44then_3
   1122  1496		       86 a8		      STX	player3pointerlo
   1123  1498		       a9 fa		      LDA	#>player44then_3
   1124  149a		       85 ad		      STA	player3pointerhi
   1125  149c		       a9 09		      LDA	#9
   1126  149e		       85 b3		      STA	player3height
   1127  14a0				   .skipL0135
   1128  14a0				   .
   1129  14a0							; 
   1130  14a0
   1131  14a0				   .L0136		;  if ticker  >= 3  &&  ticker  <  6 then player3: 
   1132  14a0
   1133  14a0		       a5 e4		      LDA	ticker
   1134  14a2		       c9 03		      CMP	#3
   1135  14a4		       90 12		      BCC	.skipL0136
   1136  14a6				   .condpart45
   1137  14a6		       a5 e4		      LDA	ticker
   1138  14a8		       c9 06		      CMP	#6
   1139  14aa		       b0 0c		      BCS	.skip45then
   1140  14ac				   .condpart46
   1141  14ac		       a2 ce		      LDX	#<player46then_3
   1142  14ae		       86 a8		      STX	player3pointerlo
   1143  14b0		       a9 fa		      LDA	#>player46then_3
   1144  14b2		       85 ad		      STA	player3pointerhi
   1145  14b4		       a9 09		      LDA	#9
   1146  14b6		       85 b3		      STA	player3height
   1147  14b8				   .skip45then
   1148  14b8				   .skipL0136
   1149  14b8				   .
   1150  14b8							; 
   1151  14b8
   1152  14b8				   .L0137		;  if ticker  >=  6 then player3: 
   1153  14b8
   1154  14b8		       a5 e4		      LDA	ticker
   1155  14ba		       c9 06		      CMP	#6
   1156  14bc		       90 0c		      BCC	.skipL0137
   1157  14be				   .condpart47
   1158  14be		       a2 d6		      LDX	#<player47then_3
   1159  14c0		       86 a8		      STX	player3pointerlo
   1160  14c2		       a9 fa		      LDA	#>player47then_3
   1161  14c4		       85 ad		      STA	player3pointerhi
   1162  14c6		       a9 09		      LDA	#9
   1163  14c8		       85 b3		      STA	player3height
   1164  14ca				   .skipL0137
   1165  14ca				   .
   1166  14ca							; 
   1167  14ca
   1168  14ca				   .
   1169  14ca							; 
   1170  14ca
   1171  14ca				   .L0138		;  if altSprite  >  0	&&  ticker  <  5 then player2:
   1172  14ca
   1173  14ca		       a9 00		      LDA	#0
   1174  14cc		       c5 e6		      CMP	altSprite
   1175  14ce		       b0 12		      BCS	.skipL0138
   1176  14d0				   .condpart48
   1177  14d0		       a5 e4		      LDA	ticker
   1178  14d2		       c9 05		      CMP	#5
   1179  14d4		       b0 0c		      BCS	.skip48then
   1180  14d6				   .condpart49
   1181  14d6		       a2 de		      LDX	#<player49then_2
   1182  14d8		       86 a7		      STX	player2pointerlo
   1183  14da		       a9 fa		      LDA	#>player49then_2
   1184  14dc		       85 ac		      STA	player2pointerhi
   1185  14de		       a9 09		      LDA	#9
   1186  14e0		       85 b2		      STA	player2height
   1187  14e2				   .skip48then
   1188  14e2				   .skipL0138
   1189  14e2				   .
   1190  14e2							; 
   1191  14e2
   1192  14e2				   .L0139		;  if altSprite  >  0	&&  ticker  >=	5 then player2:
   1193  14e2
   1194  14e2		       a9 00		      LDA	#0
   1195  14e4		       c5 e6		      CMP	altSprite
   1196  14e6		       b0 12		      BCS	.skipL0139
   1197  14e8				   .condpart50
   1198  14e8		       a5 e4		      LDA	ticker
   1199  14ea		       c9 05		      CMP	#5
   1200  14ec		       90 0c		      BCC	.skip50then
   1201  14ee				   .condpart51
   1202  14ee		       a2 e6		      LDX	#<player51then_2
   1203  14f0		       86 a7		      STX	player2pointerlo
   1204  14f2		       a9 fa		      LDA	#>player51then_2
   1205  14f4		       85 ac		      STA	player2pointerhi
   1206  14f6		       a9 09		      LDA	#9
   1207  14f8		       85 b2		      STA	player2height
   1208  14fa				   .skip50then
   1209  14fa				   .skipL0139
   1210  14fa				   .
   1211  14fa							; 
   1212  14fa
   1213  14fa				   .
   1214  14fa							; 
   1215  14fa
   1216  14fa				   .L0140		;  if ticker  <  5 then player4:
   1217  14fa
   1218  14fa		       a5 e4		      LDA	ticker
   1219  14fc		       c9 05		      CMP	#5
   1220  14fe		       b0 0c		      BCS	.skipL0140
   1221  1500				   .condpart52
   1222  1500		       a2 ee		      LDX	#<player52then_4
   1223  1502		       86 a9		      STX	player4pointerlo
   1224  1504		       a9 fa		      LDA	#>player52then_4
   1225  1506		       85 ae		      STA	player4pointerhi
   1226  1508		       a9 09		      LDA	#9
   1227  150a		       85 b4		      STA	player4height
   1228  150c				   .skipL0140
   1229  150c				   .
   1230  150c							; 
   1231  150c
   1232  150c				   .L0141		;  if ticker  >=  5 then player4:
   1233  150c
   1234  150c		       a5 e4		      LDA	ticker
   1235  150e		       c9 05		      CMP	#5
   1236  1510		       90 0c		      BCC	.skipL0141
   1237  1512				   .condpart53
   1238  1512		       a2 f6		      LDX	#<player53then_4
   1239  1514		       86 a9		      STX	player4pointerlo
   1240  1516		       a9 fa		      LDA	#>player53then_4
   1241  1518		       85 ae		      STA	player4pointerhi
   1242  151a		       a9 09		      LDA	#9
   1243  151c		       85 b4		      STA	player4height
   1244  151e				   .skipL0141
   1245  151e				   .
   1246  151e							; 
   1247  151e
   1248  151e				   .L0142		;  player5:
   1249  151e
   1250  151e		       a2 5a		      LDX	#<playerL0142_5
   1251  1520		       86 aa		      STX	player5pointerlo
   1252  1522		       a9 fb		      LDA	#>playerL0142_5
   1253  1524		       85 af		      STA	player5pointerhi
   1254  1526		       a9 09		      LDA	#9
   1255  1528		       85 b5		      STA	player5height
   1256  152a				   .
   1257  152a							; 
   1258  152a
   1259  152a				   .
   1260  152a							; 
   1261  152a
   1262  152a				   .
   1263  152a							; 
   1264  152a
   1265  152a				   .
   1266  152a							; 
   1267  152a
   1268  152a				   .L0143		;  if _resetTicker  >	0 then goto frameReset
   1269  152a
   1270  152a		       a9 00		      LDA	#0
   1271  152c		       c5 ee		      CMP	_resetTicker
   1272  152e		       b0 03		      BCS	.skipL0143
   1273  1530				   .condpart54
   1274  1530		       4c 5b d7 	      jmp	.frameReset
   1275  1533
   1276  1533				   .skipL0143
   1277  1533				   .
   1278  1533							; 
   1279  1533
   1280  1533				   .L0144		;  if player1y  <  41	&&  powerUpInPlay  =  0 then goto killPlayer
   1281  1533
   1282  1533		       a5 8e		      LDA	player1y
   1283  1535		       c9 29		      CMP	#41
   1284  1537		       b0 09		      BCS	.skipL0144
   1285  1539				   .condpart55
   1286  1539		       a5 e5		      LDA	powerUpInPlay
   1287  153b		       c9 00		      CMP	#0
   1288  153d		       d0 03		      BNE	.skip55then
   1289  153f				   .condpart56
   1290  153f		       4c 52 de 	      jmp	.killPlayer
   1291  1542
   1292  1542				   .skip55then
   1293  1542				   .skipL0144
   1294  1542				   .L0145		;  if player1y  <  10	&&  powerUpInPlay  =  1 then player1y  =  100
   1295  1542
   1296  1542		       a5 8e		      LDA	player1y
   1297  1544		       c9 0a		      CMP	#10
   1298  1546		       b0 0a		      BCS	.skipL0145
   1299  1548				   .condpart57
   1300  1548		       a5 e5		      LDA	powerUpInPlay
   1301  154a		       c9 01		      CMP	#1
   1302  154c		       d0 04		      BNE	.skip57then
   1303  154e				   .condpart58
   1304  154e		       a9 64		      LDA	#100
   1305  1550		       85 8e		      STA	player1y
   1306  1552				   .skip57then
   1307  1552				   .skipL0145
   1308  1552				   .
   1309  1552							; 
   1310  1552
   1311  1552				   .
   1312  1552							; 
   1313  1552
   1314  1552				   .L0146		;  if ticker  >  4 then COLUP4  =  $40 else COLUP4  =	$70
   1315  1552
   1316  1552		       a9 04		      LDA	#4
   1317  1554		       c5 e4		      CMP	ticker
   1318  1556		       b0 07		      BCS	.skipL0146
   1319  1558				   .condpart59
   1320  1558		       a9 40		      LDA	#$40
   1321  155a		       85 9b		      STA	COLUP4
   1322  155c		       4c 63 d5 	      jmp	.skipelse1
   1323  155f				   .skipL0146
   1324  155f		       a9 70		      LDA	#$70
   1325  1561		       85 9b		      STA	COLUP4
   1326  1563				   .skipelse1
   1327  1563				   .
   1328  1563							; 
   1329  1563
   1330  1563				   .L0147		;  if player2y  <  41 then goto killPlayer
   1331  1563
   1332  1563		       a5 8f		      LDA	player2y
   1333  1565		       c9 29		      CMP	#41
   1334  1567		       b0 03		      BCS	.skipL0147
   1335  1569				   .condpart60
   1336  1569		       4c 52 de 	      jmp	.killPlayer
   1337  156c
   1338  156c				   .skipL0147
   1339  156c				   .L0148		;  if player3y  <  41 then goto killPlayer
   1340  156c
   1341  156c		       a5 90		      LDA	player3y
   1342  156e		       c9 29		      CMP	#41
   1343  1570		       b0 03		      BCS	.skipL0148
   1344  1572				   .condpart61
   1345  1572		       4c 52 de 	      jmp	.killPlayer
   1346  1575
   1347  1575				   .skipL0148
   1348  1575				   .L0149		;  if player4y  <  41 then goto killPlayer
   1349  1575
   1350  1575		       a5 91		      LDA	player4y
   1351  1577		       c9 29		      CMP	#41
   1352  1579		       b0 03		      BCS	.skipL0149
   1353  157b				   .condpart62
   1354  157b		       4c 52 de 	      jmp	.killPlayer
   1355  157e
   1356  157e				   .skipL0149
   1357  157e				   .
   1358  157e							; 
   1359  157e
   1360  157e				   .L0150		;  if missile1y  <  10 then missile1y	=  200
   1361  157e
   1362  157e		       a5 8b		      LDA	missile1y
   1363  1580		       c9 0a		      CMP	#10
   1364  1582		       b0 04		      BCS	.skipL0150
   1365  1584				   .condpart63
   1366  1584		       a9 c8		      LDA	#200
   1367  1586		       85 8b		      STA	missile1y
   1368  1588				   .skipL0150
   1369  1588				   .
   1370  1588							; 
   1371  1588
   1372  1588				   .
   1373  1588							; 
   1374  1588
   1375  1588				   .L0151		;  if missile0y  >  100 then goto skip
   1376  1588
   1377  1588		       a9 64		      LDA	#100
   1378  158a		       c5 8a		      CMP	missile0y
   1379  158c		       b0 03		      BCS	.skipL0151
   1380  158e				   .condpart64
   1381  158e		       4c 9b d5 	      jmp	.skip
   1382  1591
   1383  1591				   .skipL0151
   1384  1591				   .
   1385  1591							; 
   1386  1591
   1387  1591				   .
   1388  1591							; 
   1389  1591
   1390  1591				   .L0152		;  missile0y  =  missile0y + 2 : goto draw_loop
   1391  1591
   1392  1591		       a5 8a		      LDA	missile0y
   1393  1593		       18		      CLC
   1394  1594		       69 02		      ADC	#2
   1395  1596		       85 8a		      STA	missile0y
   1396  1598		       4c f8 d5 	      jmp	.draw_loop
   1397  159b
   1398  159b				   .
   1399  159b							; 
   1400  159b
   1401  159b				   .skip
   1402  159b							; skip
   1403  159b
   1404  159b				   .L0153		;  if player0y  <  35	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  AUDV1  =  2	:  AUDC1  =  6	:  AUDF1  =  5 :  bulletMultiplier  =  bulletMultiplier  -  1 :  goto draw_loop
   1405  159b
   1406  159b		       a5 8d		      LDA	player0y
   1407  159d		       c9 23		      CMP	#35
   1408  159f		       b0 24		      BCS	.skipL0153
   1409  15a1				   .condpart65
   1410  15a1		       a5 c2		      LDA	lives
   1411  15a3		       c9 c4		      CMP	#196
   1412  15a5		       b0 1e		      BCS	.skip65then
   1413  15a7				   .condpart66
   1414  15a7		       a5 e4		      LDA	ticker
   1415  15a9		       c9 00		      CMP	#0
   1416  15ab		       d0 18		      BNE	.skip66then
   1417  15ad				   .condpart67
   1418  15ad		       a5 c2		      LDA	lives
   1419  15af		       18		      CLC
   1420  15b0		       69 20		      ADC	#32
   1421  15b2		       85 c2		      STA	lives
   1422  15b4		       a9 02		      LDA	#2
   1423  15b6		       85 1a		      STA	AUDV1
   1424  15b8		       a9 06		      LDA	#6
   1425  15ba		       85 16		      STA	AUDC1
   1426  15bc		       a9 05		      LDA	#5
   1427  15be		       85 18		      STA	AUDF1
   1428  15c0		       c6 e2		      DEC	bulletMultiplier
   1429  15c2		       4c f8 d5 	      jmp	.draw_loop
   1430  15c5
   1431  15c5				   .skip66then
   1432  15c5				   .skip65then
   1433  15c5				   .skipL0153
   1434  15c5				   .L0154		;  if player0y  <  35 then goto draw_loop
   1435  15c5
   1436  15c5		       a5 8d		      LDA	player0y
   1437  15c7		       c9 23		      CMP	#35
   1438  15c9		       b0 03		      BCS	.skipL0154
   1439  15cb				   .condpart68
   1440  15cb		       4c f8 d5 	      jmp	.draw_loop
   1441  15ce
   1442  15ce				   .skipL0154
   1443  15ce				   .L0155		;  if lives  <  32 then goto draw_loop
   1444  15ce
   1445  15ce		       a5 c2		      LDA	lives
   1446  15d0		       c9 20		      CMP	#32
   1447  15d2		       b0 03		      BCS	.skipL0155
   1448  15d4				   .condpart69
   1449  15d4		       4c f8 d5 	      jmp	.draw_loop
   1450  15d7
   1451  15d7				   .skipL0155
   1452  15d7				   .L0156		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : bulletMultiplier  =  bulletMultiplier  +  1 :  lives	=  lives  -  32  : missile0x  =  player0x  +  5
   1453  15d7
   1454  15d7		       24 0c		      bit	INPT4
   1455  15d9		       30 1d		      BMI	.skipL0156
   1456  15db				   .condpart70
   1457  15db		       a9 96		      LDA	#150
   1458  15dd		       c5 92		      CMP	player5y
   1459  15df		       b0 17		      BCS	.skip70then
   1460  15e1				   .condpart71
   1461  15e1		       a5 8d		      LDA	player0y
   1462  15e3		       38		      SEC
   1463  15e4		       e9 04		      SBC	#4
   1464  15e6		       85 8a		      STA	missile0y
   1465  15e8		       e6 e2		      INC	bulletMultiplier
   1466  15ea		       a5 c2		      LDA	lives
   1467  15ec		       38		      SEC
   1468  15ed		       e9 20		      SBC	#32
   1469  15ef		       85 c2		      STA	lives
   1470  15f1		       a5 84		      LDA	player0x
   1471  15f3		       18		      CLC
   1472  15f4		       69 05		      ADC	#5
   1473  15f6		       85 80		      STA	missile0x
   1474  15f8				   .skip70then
   1475  15f8				   .skipL0156
   1476  15f8				   .draw_loop
   1477  15f8							; draw_loop
   1478  15f8
   1479  15f8				   .L0157		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x  +  1
   1480  15f8
   1481  15f8		       2c 80 02 	      bit	SWCHA
   1482  15fb		       30 08		      BMI	.skipL0157
   1483  15fd				   .condpart72
   1484  15fd		       a5 84		      LDA	player0x
   1485  15ff		       c9 86		      CMP	#134
   1486  1601		       b0 02		      BCS	.skip72then
   1487  1603				   .condpart73
   1488  1603		       e6 84		      INC	player0x
   1489  1605				   .skip72then
   1490  1605				   .skipL0157
   1491  1605				   .L0158		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x  -  1
   1492  1605
   1493  1605		       2c 80 02 	      bit	SWCHA
   1494  1608		       70 08		      BVS	.skipL0158
   1495  160a				   .condpart74
   1496  160a		       a9 13		      LDA	#19
   1497  160c		       c5 84		      CMP	player0x
   1498  160e		       b0 02		      BCS	.skip74then
   1499  1610				   .condpart75
   1500  1610		       c6 84		      DEC	player0x
   1501  1612				   .skip74then
   1502  1612				   .skipL0158
   1503  1612				   .L0159		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y  -  1
   1504  1612
   1505  1612		       a9 20		      lda	#$20
   1506  1614		       2c 80 02 	      bit	SWCHA
   1507  1617		       d0 08		      BNE	.skipL0159
   1508  1619				   .condpart76
   1509  1619		       a9 0a		      LDA	#10
   1510  161b		       c5 8d		      CMP	player0y
   1511  161d		       b0 02		      BCS	.skip76then
   1512  161f				   .condpart77
   1513  161f		       c6 8d		      DEC	player0y
   1514  1621				   .skip76then
   1515  1621				   .skipL0159
   1516  1621				   .L0160		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y  +  1
   1517  1621
   1518  1621		       a9 10		      lda	#$10
   1519  1623		       2c 80 02 	      bit	SWCHA
   1520  1626		       d0 08		      BNE	.skipL0160
   1521  1628				   .condpart78
   1522  1628		       a5 8d		      LDA	player0y
   1523  162a		       c9 5a		      CMP	#90
   1524  162c		       b0 02		      BCS	.skip78then
   1525  162e				   .condpart79
   1526  162e		       e6 8d		      INC	player0y
   1527  1630				   .skip78then
   1528  1630				   .skipL0160
   1529  1630				   .
   1530  1630							; 
   1531  1630
   1532  1630				   .L0161		;  if player0y  <  35	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1533  1630
   1534  1630		       a5 8d		      LDA	player0y
   1535  1632		       c9 23		      CMP	#35
   1536  1634		       b0 13		      BCS	.skipL0161
   1537  1636				   .condpart80
   1538  1636		       a5 c2		      LDA	lives
   1539  1638		       c9 c4		      CMP	#196
   1540  163a		       b0 0d		      BCS	.skip80then
   1541  163c				   .condpart81
   1542  163c		       a5 e4		      LDA	ticker
   1543  163e		       c9 05		      CMP	#5
   1544  1640		       b0 07		      BCS	.skip81then
   1545  1642				   .condpart82
   1546  1642		       a9 f0		      LDA	#$F0
   1547  1644		       85 06		      STA	COLUP0
   1548  1646		       4c 73 d6 	      jmp	.exitColourSwitch
   1549  1649
   1550  1649				   .skip81then
   1551  1649				   .skip80then
   1552  1649				   .skipL0161
   1553  1649				   .L0162		;  if player0y  <  35	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1554  1649
   1555  1649		       a5 8d		      LDA	player0y
   1556  164b		       c9 23		      CMP	#35
   1557  164d		       b0 13		      BCS	.skipL0162
   1558  164f				   .condpart83
   1559  164f		       a5 c2		      LDA	lives
   1560  1651		       c9 c4		      CMP	#196
   1561  1653		       b0 0d		      BCS	.skip83then
   1562  1655				   .condpart84
   1563  1655		       a9 05		      LDA	#5
   1564  1657		       c5 e4		      CMP	ticker
   1565  1659		       b0 07		      BCS	.skip84then
   1566  165b				   .condpart85
   1567  165b		       a9 02		      LDA	#$02
   1568  165d		       85 06		      STA	COLUP0
   1569  165f		       4c 73 d6 	      jmp	.exitColourSwitch
   1570  1662
   1571  1662				   .skip84then
   1572  1662				   .skip83then
   1573  1662				   .skipL0162
   1574  1662				   .L0163		;  if lives  <  32 then COLUP0  =  $40 else COLUP0  =	$C6
   1575  1662
   1576  1662		       a5 c2		      LDA	lives
   1577  1664		       c9 20		      CMP	#32
   1578  1666		       b0 07		      BCS	.skipL0163
   1579  1668				   .condpart86
   1580  1668		       a9 40		      LDA	#$40
   1581  166a		       85 06		      STA	COLUP0
   1582  166c		       4c 73 d6 	      jmp	.skipelse2
   1583  166f				   .skipL0163
   1584  166f		       a9 c6		      LDA	#$C6
   1585  1671		       85 06		      STA	COLUP0
   1586  1673				   .skipelse2
   1587  1673				   .
   1588  1673							; 
   1589  1673
   1590  1673				   .exitColourSwitch
   1591  1673							; exitColourSwitch
   1592  1673
   1593  1673				   .L0164		;  if missile0y  >  80 then goto frameReset
   1594  1673
   1595  1673		       a9 50		      LDA	#80
   1596  1675		       c5 8a		      CMP	missile0y
   1597  1677		       b0 03		      BCS	.skipL0164
   1598  1679				   .condpart87
   1599  1679		       4c 5b d7 	      jmp	.frameReset
   1600  167c
   1601  167c				   .skipL0164
   1602  167c				   .L0165		;  if missile0x  >   ( player1x  -  12 )   &&	missile0x  <   ( player1x  +  3 )   &&	missile0y  >  player1y	-  10  &&  powerUpInPlay  =  0 then player1x  =  player1x  +   ( ticker  *  12 )  :  player1y  =  115 :  goto collisions
   1603  167c
   1604  167c							; complex condition detected
   1605  167c							; complex statement detected
   1606  167c		       a5 85		      LDA	player1x
   1607  167e		       38		      SEC
   1608  167f		       e9 0c		      SBC	#12
   1609  1681							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1610  1681		       c5 80		      CMP	missile0x
   1611  1683		       b0 37		      BCS	.skipL0165
   1612  1685				   .condpart88
   1613  1685							; complex condition detected
   1614  1685							; complex statement detected
   1615  1685		       a5 85		      LDA	player1x
   1616  1687		       18		      CLC
   1617  1688		       69 03		      ADC	#3
   1618  168a		       48		      PHA
   1619  168b		       ba		      TSX
   1620  168c		       68		      PLA
   1621  168d		       a5 80		      LDA	missile0x
   1622  168f		       d5 01		      CMP	1,x
   1623  1691		       b0 29		      BCS	.skip88then
   1624  1693				   .condpart89
   1625  1693							; complex condition detected
   1626  1693		       a5 8e		      LDA	player1y
   1627  1695		       38		      SEC
   1628  1696		       e9 0a		      SBC	#10
   1629  1698							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1630  1698		       c5 8a		      CMP	missile0y
   1631  169a		       b0 20		      BCS	.skip89then
   1632  169c				   .condpart90
   1633  169c		       a5 e5		      LDA	powerUpInPlay
   1634  169e		       c9 00		      CMP	#0
   1635  16a0		       d0 1a		      BNE	.skip90then
   1636  16a2				   .condpart91
   1637  16a2							; complex statement detected
   1638  16a2		       a5 85		      LDA	player1x
   1639  16a4		       48		      PHA
   1640  16a5		       a5 e4		      LDA	ticker
   1641  16a7		       0a		      asl
   1642  16a8		       18		      clc
   1643  16a9		       65 e4		      adc	ticker
   1644  16ab		       0a		      asl
   1645  16ac		       0a		      asl
   1646  16ad		       ba		      TSX
   1647  16ae		       e8		      INX
   1648  16af		       9a		      TXS
   1649  16b0		       18		      CLC
   1650  16b1		       75 00		      ADC	$00,x
   1651  16b3		       85 85		      STA	player1x
   1652  16b5		       a9 73		      LDA	#115
   1653  16b7		       85 8e		      STA	player1y
   1654  16b9		       4c 16 de 	      jmp	.collisions
   1655  16bc
   1656  16bc				   .skip90then
   1657  16bc				   .skip89then
   1658  16bc				   .skip88then
   1659  16bc				   .skipL0165
   1660  16bc				   .L0166		;  if missile0x  >   ( player2x  -  12 )   &&	missile0x  <   ( player2x  +  3 )   &&	missile0y  >  player2y	-  10 then player2x  =	player2x  +   ( ticker	*  12 )  :  player2y  =  105 :	goto collisions
   1661  16bc
   1662  16bc							; complex condition detected
   1663  16bc							; complex statement detected
   1664  16bc		       a5 86		      LDA	player2x
   1665  16be		       38		      SEC
   1666  16bf		       e9 0c		      SBC	#12
   1667  16c1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1668  16c1		       c5 80		      CMP	missile0x
   1669  16c3		       b0 31		      BCS	.skipL0166
   1670  16c5				   .condpart92
   1671  16c5							; complex condition detected
   1672  16c5							; complex statement detected
   1673  16c5		       a5 86		      LDA	player2x
   1674  16c7		       18		      CLC
   1675  16c8		       69 03		      ADC	#3
   1676  16ca		       48		      PHA
   1677  16cb		       ba		      TSX
   1678  16cc		       68		      PLA
   1679  16cd		       a5 80		      LDA	missile0x
   1680  16cf		       d5 01		      CMP	1,x
   1681  16d1		       b0 23		      BCS	.skip92then
   1682  16d3				   .condpart93
   1683  16d3							; complex condition detected
   1684  16d3		       a5 8f		      LDA	player2y
   1685  16d5		       38		      SEC
   1686  16d6		       e9 0a		      SBC	#10
   1687  16d8		       c5 8a		      CMP	missile0y
   1688  16da		       b0 1a		      BCS	.skip93then
   1689  16dc				   .condpart94
   1690  16dc							; complex statement detected
   1691  16dc		       a5 86		      LDA	player2x
   1692  16de		       48		      PHA
   1693  16df		       a5 e4		      LDA	ticker
   1694  16e1		       0a		      asl
   1695  16e2		       18		      clc
   1696  16e3		       65 e4		      adc	ticker
   1697  16e5		       0a		      asl
   1698  16e6		       0a		      asl
   1699  16e7		       ba		      TSX
   1700  16e8		       e8		      INX
   1701  16e9		       9a		      TXS
   1702  16ea		       18		      CLC
   1703  16eb		       75 00		      ADC	$00,x
   1704  16ed		       85 86		      STA	player2x
   1705  16ef		       a9 69		      LDA	#105
   1706  16f1		       85 8f		      STA	player2y
   1707  16f3		       4c 16 de 	      jmp	.collisions
   1708  16f6
   1709  16f6				   .skip93then
   1710  16f6				   .skip92then
   1711  16f6				   .skipL0166
   1712  16f6				   .L0167		;  if missile0x  >   ( player3x  -  12 )   &&	missile0x  <   ( player3x  +  3 )   &&	missile0y  >  player3y	-  10 then player3x  =	player3x  +   ( ticker	*  12 )  :  player3y  =  120 :	goto collisions
   1713  16f6
   1714  16f6							; complex condition detected
   1715  16f6							; complex statement detected
   1716  16f6		       a5 87		      LDA	player3x
   1717  16f8		       38		      SEC
   1718  16f9		       e9 0c		      SBC	#12
   1719  16fb							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1720  16fb		       c5 80		      CMP	missile0x
   1721  16fd		       b0 31		      BCS	.skipL0167
   1722  16ff				   .condpart95
   1723  16ff							; complex condition detected
   1724  16ff							; complex statement detected
   1725  16ff		       a5 87		      LDA	player3x
   1726  1701		       18		      CLC
   1727  1702		       69 03		      ADC	#3
   1728  1704		       48		      PHA
   1729  1705		       ba		      TSX
   1730  1706		       68		      PLA
   1731  1707		       a5 80		      LDA	missile0x
   1732  1709		       d5 01		      CMP	1,x
   1733  170b		       b0 23		      BCS	.skip95then
   1734  170d				   .condpart96
   1735  170d							; complex condition detected
   1736  170d		       a5 90		      LDA	player3y
   1737  170f		       38		      SEC
   1738  1710		       e9 0a		      SBC	#10
   1739  1712		       c5 8a		      CMP	missile0y
   1740  1714		       b0 1a		      BCS	.skip96then
   1741  1716				   .condpart97
   1742  1716							; complex statement detected
   1743  1716		       a5 87		      LDA	player3x
   1744  1718		       48		      PHA
   1745  1719		       a5 e4		      LDA	ticker
   1746  171b		       0a		      asl
   1747  171c		       18		      clc
   1748  171d		       65 e4		      adc	ticker
   1749  171f		       0a		      asl
   1750  1720		       0a		      asl
   1751  1721		       ba		      TSX
   1752  1722		       e8		      INX
   1753  1723		       9a		      TXS
   1754  1724		       18		      CLC
   1755  1725		       75 00		      ADC	$00,x
   1756  1727		       85 87		      STA	player3x
   1757  1729		       a9 78		      LDA	#120
   1758  172b		       85 90		      STA	player3y
   1759  172d		       4c 16 de 	      jmp	.collisions
   1760  1730
   1761  1730				   .skip96then
   1762  1730				   .skip95then
   1763  1730				   .skipL0167
   1764  1730				   .L0168		;  if missile0x  >   ( player4x  -  12 )   &&	missile0x  <   ( player4x  +  3 )   &&	missile0y  >  player4y	-  10 then player4y  =	100 :  player4x  =  116 :  goto collisions
   1765  1730
   1766  1730							; complex condition detected
   1767  1730							; complex statement detected
   1768  1730		       a5 88		      LDA	player4x
   1769  1732		       38		      SEC
   1770  1733		       e9 0c		      SBC	#12
   1771  1735							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1772  1735		       c5 80		      CMP	missile0x
   1773  1737		       b0 22		      BCS	.skipL0168
   1774  1739				   .condpart98
   1775  1739							; complex condition detected
   1776  1739							; complex statement detected
   1777  1739		       a5 88		      LDA	player4x
   1778  173b		       18		      CLC
   1779  173c		       69 03		      ADC	#3
   1780  173e		       48		      PHA
   1781  173f		       ba		      TSX
   1782  1740		       68		      PLA
   1783  1741		       a5 80		      LDA	missile0x
   1784  1743		       d5 01		      CMP	1,x
   1785  1745		       b0 14		      BCS	.skip98then
   1786  1747				   .condpart99
   1787  1747							; complex condition detected
   1788  1747		       a5 91		      LDA	player4y
   1789  1749		       38		      SEC
   1790  174a		       e9 0a		      SBC	#10
   1791  174c		       c5 8a		      CMP	missile0y
   1792  174e		       b0 0b		      BCS	.skip99then
   1793  1750				   .condpart100
   1794  1750		       a9 64		      LDA	#100
   1795  1752		       85 91		      STA	player4y
   1796  1754		       a9 74		      LDA	#116
   1797  1756		       85 88		      STA	player4x
   1798  1758		       4c 16 de 	      jmp	.collisions
   1799  175b
   1800  175b				   .skip99then
   1801  175b				   .skip98then
   1802  175b				   .skipL0168
   1803  175b				   .
   1804  175b							; 
   1805  175b
   1806  175b				   .frameReset
   1807  175b							; frameReset
   1808  175b
   1809  175b				   .
   1810  175b							; 
   1811  175b
   1812  175b				   .checkPlayer1Position
   1813  175b							; checkPlayer1Position
   1814  175b
   1815  175b				   .L0169		;  if player1y  <  99 then goto checkPlayer2Position
   1816  175b
   1817  175b		       a5 8e		      LDA	player1y
   1818  175d		       c9 63		      CMP	#99
   1819  175f		       b0 03		      BCS	.skipL0169
   1820  1761				   .condpart101
   1821  1761		       4c 7d d7 	      jmp	.checkPlayer2Position
   1822  1764
   1823  1764				   .skipL0169
   1824  1764				   .L0170		;  if player1x  <  30	||  player1x  >  120 then player1x  =  player1x  +  50	:  goto checkPlayer1Position
   1825  1764
   1826  1764		       a5 85		      LDA	player1x
   1827  1766		       c9 1e		      CMP	#30
   1828  1768		       b0 03		      BCS	.skipL0170
   1829  176a				   .condpart102
   1830  176a		       4c 73 d7 	      jmp	.condpart103
   1831  176d				   .skipL0170
   1832  176d		       a9 78		      LDA	#120
   1833  176f		       c5 85		      CMP	player1x
   1834  1771		       b0 0a		      BCS	.skip38OR
   1835  1773				   .condpart103
   1836  1773		       a5 85		      LDA	player1x
   1837  1775		       18		      CLC
   1838  1776		       69 32		      ADC	#50
   1839  1778		       85 85		      STA	player1x
   1840  177a		       4c 5b d7 	      jmp	.checkPlayer1Position
   1841  177d
   1842  177d				   .skip38OR
   1843  177d				   .
   1844  177d							; 
   1845  177d
   1846  177d				   .checkPlayer2Position
   1847  177d							; checkPlayer2Position
   1848  177d
   1849  177d				   .L0171		;  if player2y  <  99 then goto checkPlayer3Position
   1850  177d
   1851  177d		       a5 8f		      LDA	player2y
   1852  177f		       c9 63		      CMP	#99
   1853  1781		       b0 03		      BCS	.skipL0171
   1854  1783				   .condpart104
   1855  1783		       4c 9f d7 	      jmp	.checkPlayer3Position
   1856  1786
   1857  1786				   .skipL0171
   1858  1786				   .L0172		;  if player2x  <  30	||  player2x  >  120 then player2x  =  player2x  +  50	:  goto checkPlayer2Position
   1859  1786
   1860  1786		       a5 86		      LDA	player2x
   1861  1788		       c9 1e		      CMP	#30
   1862  178a		       b0 03		      BCS	.skipL0172
   1863  178c				   .condpart105
   1864  178c		       4c 95 d7 	      jmp	.condpart106
   1865  178f				   .skipL0172
   1866  178f		       a9 78		      LDA	#120
   1867  1791		       c5 86		      CMP	player2x
   1868  1793		       b0 0a		      BCS	.skip39OR
   1869  1795				   .condpart106
   1870  1795		       a5 86		      LDA	player2x
   1871  1797		       18		      CLC
   1872  1798		       69 32		      ADC	#50
   1873  179a		       85 86		      STA	player2x
   1874  179c		       4c 7d d7 	      jmp	.checkPlayer2Position
   1875  179f
   1876  179f				   .skip39OR
   1877  179f				   .
   1878  179f							; 
   1879  179f
   1880  179f				   .checkPlayer3Position
   1881  179f							; checkPlayer3Position
   1882  179f
   1883  179f				   .L0173		;  if player3y  <  99 then goto exitPositionCheck
   1884  179f
   1885  179f		       a5 90		      LDA	player3y
   1886  17a1		       c9 63		      CMP	#99
   1887  17a3		       b0 03		      BCS	.skipL0173
   1888  17a5				   .condpart107
   1889  17a5		       4c c1 d7 	      jmp	.exitPositionCheck
   1890  17a8
   1891  17a8				   .skipL0173
   1892  17a8				   .L0174		;  if player3x  <  30	||  player3x  >  120 then player3x  =  player3x  +  50	:  goto checkPlayer3Position
   1893  17a8
   1894  17a8		       a5 87		      LDA	player3x
   1895  17aa		       c9 1e		      CMP	#30
   1896  17ac		       b0 03		      BCS	.skipL0174
   1897  17ae				   .condpart108
   1898  17ae		       4c b7 d7 	      jmp	.condpart109
   1899  17b1				   .skipL0174
   1900  17b1		       a9 78		      LDA	#120
   1901  17b3		       c5 87		      CMP	player3x
   1902  17b5		       b0 0a		      BCS	.skip40OR
   1903  17b7				   .condpart109
   1904  17b7		       a5 87		      LDA	player3x
   1905  17b9		       18		      CLC
   1906  17ba		       69 32		      ADC	#50
   1907  17bc		       85 87		      STA	player3x
   1908  17be		       4c 9f d7 	      jmp	.checkPlayer3Position
   1909  17c1
   1910  17c1				   .skip40OR
   1911  17c1				   .
   1912  17c1							; 
   1913  17c1
   1914  17c1				   .exitPositionCheck
   1915  17c1							; exitPositionCheck
   1916  17c1
   1917  17c1				   .
   1918  17c1							; 
   1919  17c1
   1920  17c1				   .
   1921  17c1							; 
   1922  17c1
   1923  17c1				   .
   1924  17c1							; 
   1925  17c1
   1926  17c1				   .L0175		;  if _resetTicker  >	0 then goto resetScreen
   1927  17c1
   1928  17c1		       a9 00		      LDA	#0
   1929  17c3		       c5 ee		      CMP	_resetTicker
   1930  17c5		       b0 03		      BCS	.skipL0175
   1931  17c7				   .condpart110
   1932  17c7		       4c b7 db 	      jmp	.resetScreen
   1933  17ca
   1934  17ca				   .skipL0175
   1935  17ca				   .L0176		;  if killCount  <  5 then goto level1
   1936  17ca
   1937  17ca		       a5 e3		      LDA	killCount
   1938  17cc		       c9 05		      CMP	#5
   1939  17ce		       b0 03		      BCS	.skipL0176
   1940  17d0				   .condpart111
   1941  17d0		       4c a6 db 	      jmp	.level1
   1942  17d3
   1943  17d3				   .skipL0176
   1944  17d3				   .L0177		;  if killCount  <  11 then goto level2
   1945  17d3
   1946  17d3		       a5 e3		      LDA	killCount
   1947  17d5		       c9 0b		      CMP	#11
   1948  17d7		       b0 03		      BCS	.skipL0177
   1949  17d9				   .condpart112
   1950  17d9		       4c 89 db 	      jmp	.level2
   1951  17dc
   1952  17dc				   .skipL0177
   1953  17dc				   .L0178		;  if killCount  <  18 then goto level3
   1954  17dc
   1955  17dc		       a5 e3		      LDA	killCount
   1956  17de		       c9 12		      CMP	#18
   1957  17e0		       b0 03		      BCS	.skipL0178
   1958  17e2				   .condpart113
   1959  17e2		       4c 59 db 	      jmp	.level3
   1960  17e5
   1961  17e5				   .skipL0178
   1962  17e5				   .L0179		;  if killCount  <  26 then goto level4
   1963  17e5
   1964  17e5		       a5 e3		      LDA	killCount
   1965  17e7		       c9 1a		      CMP	#26
   1966  17e9		       b0 03		      BCS	.skipL0179
   1967  17eb				   .condpart114
   1968  17eb		       4c 2b db 	      jmp	.level4
   1969  17ee
   1970  17ee				   .skipL0179
   1971  17ee				   .L0180		;  if killCount  <  35 then goto level5
   1972  17ee
   1973  17ee		       a5 e3		      LDA	killCount
   1974  17f0		       c9 23		      CMP	#35
   1975  17f2		       b0 03		      BCS	.skipL0180
   1976  17f4				   .condpart115
   1977  17f4		       4c 01 db 	      jmp	.level5
   1978  17f7
   1979  17f7				   .skipL0180
   1980  17f7				   .L0181		;  if killCount  <  45 then goto level6
   1981  17f7
   1982  17f7		       a5 e3		      LDA	killCount
   1983  17f9		       c9 2d		      CMP	#45
   1984  17fb		       b0 03		      BCS	.skipL0181
   1985  17fd				   .condpart116
   1986  17fd		       4c d7 da 	      jmp	.level6
   1987  1800
   1988  1800				   .skipL0181
   1989  1800				   .L0182		;  if killCount  <  56 then goto level7
   1990  1800
   1991  1800		       a5 e3		      LDA	killCount
   1992  1802		       c9 38		      CMP	#56
   1993  1804		       b0 03		      BCS	.skipL0182
   1994  1806				   .condpart117
   1995  1806		       4c 96 da 	      jmp	.level7
   1996  1809
   1997  1809				   .skipL0182
   1998  1809				   .L0183		;  if killCount  <  68 then goto level8
   1999  1809
   2000  1809		       a5 e3		      LDA	killCount
   2001  180b		       c9 44		      CMP	#68
   2002  180d		       b0 03		      BCS	.skipL0183
   2003  180f				   .condpart118
   2004  180f		       4c 59 da 	      jmp	.level8
   2005  1812
   2006  1812				   .skipL0183
   2007  1812				   .L0184		;  if killCount  <  81 then goto level9
   2008  1812
   2009  1812		       a5 e3		      LDA	killCount
   2010  1814		       c9 51		      CMP	#81
   2011  1816		       b0 03		      BCS	.skipL0184
   2012  1818				   .condpart119
   2013  1818		       4c 1e da 	      jmp	.level9
   2014  181b
   2015  181b				   .skipL0184
   2016  181b				   .L0185		;  if killCount  <  95 then goto level10
   2017  181b
   2018  181b		       a5 e3		      LDA	killCount
   2019  181d		       c9 5f		      CMP	#95
   2020  181f		       b0 03		      BCS	.skipL0185
   2021  1821				   .condpart120
   2022  1821		       4c e7 d9 	      jmp	.level10
   2023  1824
   2024  1824				   .skipL0185
   2025  1824				   .L0186		;  if killCount  <  110 then goto level11
   2026  1824
   2027  1824		       a5 e3		      LDA	killCount
   2028  1826		       c9 6e		      CMP	#110
   2029  1828		       b0 03		      BCS	.skipL0186
   2030  182a				   .condpart121
   2031  182a		       4c b0 d9 	      jmp	.level11
   2032  182d
   2033  182d				   .skipL0186
   2034  182d				   .L0187		;  if killCount  <  126 then goto level12
   2035  182d
   2036  182d		       a5 e3		      LDA	killCount
   2037  182f		       c9 7e		      CMP	#126
   2038  1831		       b0 03		      BCS	.skipL0187
   2039  1833				   .condpart122
   2040  1833		       4c 75 d9 	      jmp	.level12
   2041  1836
   2042  1836				   .skipL0187
   2043  1836				   .L0188		;  if killCount  <  143 then goto level13
   2044  1836
   2045  1836		       a5 e3		      LDA	killCount
   2046  1838		       c9 8f		      CMP	#143
   2047  183a		       b0 03		      BCS	.skipL0188
   2048  183c				   .condpart123
   2049  183c		       4c 3e d9 	      jmp	.level13
   2050  183f
   2051  183f				   .skipL0188
   2052  183f				   .L0189		;  if killCount  <  161 then goto level14
   2053  183f
   2054  183f		       a5 e3		      LDA	killCount
   2055  1841		       c9 a1		      CMP	#161
   2056  1843		       b0 03		      BCS	.skipL0189
   2057  1845				   .condpart124
   2058  1845		       4c 07 d9 	      jmp	.level14
   2059  1848
   2060  1848				   .skipL0189
   2061  1848				   .L0190		;  if killCount  <  180 then goto level15
   2062  1848
   2063  1848		       a5 e3		      LDA	killCount
   2064  184a		       c9 b4		      CMP	#180
   2065  184c		       b0 03		      BCS	.skipL0190
   2066  184e				   .condpart125
   2067  184e		       4c cc d8 	      jmp	.level15
   2068  1851
   2069  1851				   .skipL0190
   2070  1851				   .L0191		;  if killCount  <  200 then goto level16
   2071  1851
   2072  1851		       a5 e3		      LDA	killCount
   2073  1853		       c9 c8		      CMP	#200
   2074  1855		       b0 03		      BCS	.skipL0191
   2075  1857				   .condpart126
   2076  1857		       4c 95 d8 	      jmp	.level16
   2077  185a
   2078  185a				   .skipL0191
   2079  185a				   .
   2080  185a							; 
   2081  185a
   2082  185a				   .L0192		;  asteroidY  =  asteroidY  -	0.50
   2083  185a
   2084  185a		       a5 d8		      LDA	b
   2085  185c		       38		      SEC
   2086  185d		       e9 80		      SBC	#128
   2087  185f		       85 d8		      STA	b
   2088  1861		       a5 8e		      LDA	asteroidY
   2089  1863		       e9 00		      SBC	#0
   2090  1865		       85 8e		      STA	asteroidY
   2091  1867				   .L0193		;  asteroid2Y	=  asteroid2Y  -  0.45
   2092  1867
   2093  1867		       a5 d9		      LDA	c
   2094  1869		       38		      SEC
   2095  186a		       e9 73		      SBC	#115
   2096  186c		       85 d9		      STA	c
   2097  186e		       a5 8f		      LDA	asteroid2Y
   2098  1870		       e9 00		      SBC	#0
   2099  1872		       85 8f		      STA	asteroid2Y
   2100  1874				   .L0194		;  asteroid3Y	=  asteroid3Y  -  0.35
   2101  1874
   2102  1874		       a5 da		      LDA	d
   2103  1876		       38		      SEC
   2104  1877		       e9 59		      SBC	#89
   2105  1879		       85 da		      STA	d
   2106  187b		       a5 90		      LDA	asteroid3Y
   2107  187d		       e9 00		      SBC	#0
   2108  187f		       85 90		      STA	asteroid3Y
   2109  1881				   .L0195		;  asteroid4Y	=  asteroid4Y  -  0.08
   2110  1881
   2111  1881		       a5 db		      LDA	e
   2112  1883		       38		      SEC
   2113  1884		       e9 14		      SBC	#20
   2114  1886		       85 db		      STA	e
   2115  1888		       a5 91		      LDA	asteroid4Y
   2116  188a		       e9 00		      SBC	#0
   2117  188c		       85 91		      STA	asteroid4Y
   2118  188e				   .L0196		;  COLUPF  =  $70
   2119  188e
   2120  188e		       a9 70		      LDA	#$70
   2121  1890		       85 08		      STA	COLUPF
   2122  1892				   .L0197		;  goto resetScreen
   2123  1892
   2124  1892		       4c b7 db 	      jmp	.resetScreen
   2125  1895
   2126  1895				   .
   2127  1895							; 
   2128  1895
   2129  1895				   .level16
   2130  1895							; level16
   2131  1895
   2132  1895				   .L0198		;  asteroidY  =  asteroidY  -	0.45
   2133  1895
   2134  1895		       a5 d8		      LDA	b
   2135  1897		       38		      SEC
   2136  1898		       e9 73		      SBC	#115
   2137  189a		       85 d8		      STA	b
   2138  189c		       a5 8e		      LDA	asteroidY
   2139  189e		       e9 00		      SBC	#0
   2140  18a0		       85 8e		      STA	asteroidY
   2141  18a2				   .L0199		;  asteroid2Y	=  asteroid2Y  -  0.40
   2142  18a2
   2143  18a2		       a5 d9		      LDA	c
   2144  18a4		       38		      SEC
   2145  18a5		       e9 66		      SBC	#102
   2146  18a7		       85 d9		      STA	c
   2147  18a9		       a5 8f		      LDA	asteroid2Y
   2148  18ab		       e9 00		      SBC	#0
   2149  18ad		       85 8f		      STA	asteroid2Y
   2150  18af				   .L0200		;  asteroid3Y	=  asteroid3Y  -  0.30
   2151  18af
   2152  18af		       a5 da		      LDA	d
   2153  18b1		       38		      SEC
   2154  18b2		       e9 4c		      SBC	#76
   2155  18b4		       85 da		      STA	d
   2156  18b6		       a5 90		      LDA	asteroid3Y
   2157  18b8		       e9 00		      SBC	#0
   2158  18ba		       85 90		      STA	asteroid3Y
   2159  18bc				   .L0201		;  asteroid4Y	=  asteroid4Y  -  0.08
   2160  18bc
   2161  18bc		       a5 db		      LDA	e
   2162  18be		       38		      SEC
   2163  18bf		       e9 14		      SBC	#20
   2164  18c1		       85 db		      STA	e
   2165  18c3		       a5 91		      LDA	asteroid4Y
   2166  18c5		       e9 00		      SBC	#0
   2167  18c7		       85 91		      STA	asteroid4Y
   2168  18c9				   .L0202		;  goto resetScreen
   2169  18c9
   2170  18c9		       4c b7 db 	      jmp	.resetScreen
   2171  18cc
   2172  18cc				   .
   2173  18cc							; 
   2174  18cc
   2175  18cc				   .level15
   2176  18cc							; level15
   2177  18cc
   2178  18cc				   .L0203		;  asteroidY  =  asteroidY  -	0.40
   2179  18cc
   2180  18cc		       a5 d8		      LDA	b
   2181  18ce		       38		      SEC
   2182  18cf		       e9 66		      SBC	#102
   2183  18d1		       85 d8		      STA	b
   2184  18d3		       a5 8e		      LDA	asteroidY
   2185  18d5		       e9 00		      SBC	#0
   2186  18d7		       85 8e		      STA	asteroidY
   2187  18d9				   .L0204		;  asteroid2Y	=  asteroid2Y  -  0.40
   2188  18d9
   2189  18d9		       a5 d9		      LDA	c
   2190  18db		       38		      SEC
   2191  18dc		       e9 66		      SBC	#102
   2192  18de		       85 d9		      STA	c
   2193  18e0		       a5 8f		      LDA	asteroid2Y
   2194  18e2		       e9 00		      SBC	#0
   2195  18e4		       85 8f		      STA	asteroid2Y
   2196  18e6				   .L0205		;  asteroid3Y	=  asteroid3Y  -  0.26
   2197  18e6
   2198  18e6		       a5 da		      LDA	d
   2199  18e8		       38		      SEC
   2200  18e9		       e9 42		      SBC	#66
   2201  18eb		       85 da		      STA	d
   2202  18ed		       a5 90		      LDA	asteroid3Y
   2203  18ef		       e9 00		      SBC	#0
   2204  18f1		       85 90		      STA	asteroid3Y
   2205  18f3				   .L0206		;  asteroid4Y	=  asteroid4Y  -  0.08
   2206  18f3
   2207  18f3		       a5 db		      LDA	e
   2208  18f5		       38		      SEC
   2209  18f6		       e9 14		      SBC	#20
   2210  18f8		       85 db		      STA	e
   2211  18fa		       a5 91		      LDA	asteroid4Y
   2212  18fc		       e9 00		      SBC	#0
   2213  18fe		       85 91		      STA	asteroid4Y
   2214  1900				   .L0207		;  COLUPF  =  $50
   2215  1900
   2216  1900		       a9 50		      LDA	#$50
   2217  1902		       85 08		      STA	COLUPF
   2218  1904				   .L0208		;  goto resetScreen
   2219  1904
   2220  1904		       4c b7 db 	      jmp	.resetScreen
   2221  1907
   2222  1907				   .
   2223  1907							; 
   2224  1907
   2225  1907				   .level14
   2226  1907							; level14
   2227  1907
   2228  1907				   .L0209		;  asteroidY  =  asteroidY  -	0.40
   2229  1907
   2230  1907		       a5 d8		      LDA	b
   2231  1909		       38		      SEC
   2232  190a		       e9 66		      SBC	#102
   2233  190c		       85 d8		      STA	b
   2234  190e		       a5 8e		      LDA	asteroidY
   2235  1910		       e9 00		      SBC	#0
   2236  1912		       85 8e		      STA	asteroidY
   2237  1914				   .L0210		;  asteroid2Y	=  asteroid2Y  -  0.66
   2238  1914
   2239  1914		       a5 d9		      LDA	c
   2240  1916		       38		      SEC
   2241  1917		       e9 a8		      SBC	#168
   2242  1919		       85 d9		      STA	c
   2243  191b		       a5 8f		      LDA	asteroid2Y
   2244  191d		       e9 00		      SBC	#0
   2245  191f		       85 8f		      STA	asteroid2Y
   2246  1921				   .L0211		;  asteroid3Y	=  asteroid3Y  -  0.26
   2247  1921
   2248  1921		       a5 da		      LDA	d
   2249  1923		       38		      SEC
   2250  1924		       e9 42		      SBC	#66
   2251  1926		       85 da		      STA	d
   2252  1928		       a5 90		      LDA	asteroid3Y
   2253  192a		       e9 00		      SBC	#0
   2254  192c		       85 90		      STA	asteroid3Y
   2255  192e				   .L0212		;  asteroid4Y	=  asteroid4Y  -  0.08
   2256  192e
   2257  192e		       a5 db		      LDA	e
   2258  1930		       38		      SEC
   2259  1931		       e9 14		      SBC	#20
   2260  1933		       85 db		      STA	e
   2261  1935		       a5 91		      LDA	asteroid4Y
   2262  1937		       e9 00		      SBC	#0
   2263  1939		       85 91		      STA	asteroid4Y
   2264  193b				   .L0213		;  goto resetScreen
   2265  193b
   2266  193b		       4c b7 db 	      jmp	.resetScreen
   2267  193e
   2268  193e				   .
   2269  193e							; 
   2270  193e
   2271  193e				   .level13
   2272  193e							; level13
   2273  193e
   2274  193e				   .L0214		;  asteroidY  =  asteroidY  -	0.40
   2275  193e
   2276  193e		       a5 d8		      LDA	b
   2277  1940		       38		      SEC
   2278  1941		       e9 66		      SBC	#102
   2279  1943		       85 d8		      STA	b
   2280  1945		       a5 8e		      LDA	asteroidY
   2281  1947		       e9 00		      SBC	#0
   2282  1949		       85 8e		      STA	asteroidY
   2283  194b				   .L0215		;  asteroid2Y	=  asteroid2Y  -  0.33
   2284  194b
   2285  194b		       a5 d9		      LDA	c
   2286  194d		       38		      SEC
   2287  194e		       e9 54		      SBC	#84
   2288  1950		       85 d9		      STA	c
   2289  1952		       a5 8f		      LDA	asteroid2Y
   2290  1954		       e9 00		      SBC	#0
   2291  1956		       85 8f		      STA	asteroid2Y
   2292  1958				   .L0216		;  asteroid3Y	=  asteroid3Y  -  0.25
   2293  1958
   2294  1958		       a5 da		      LDA	d
   2295  195a		       38		      SEC
   2296  195b		       e9 40		      SBC	#64
   2297  195d		       85 da		      STA	d
   2298  195f		       a5 90		      LDA	asteroid3Y
   2299  1961		       e9 00		      SBC	#0
   2300  1963		       85 90		      STA	asteroid3Y
   2301  1965				   .L0217		;  asteroid4Y	=  asteroid4Y  -  0.08
   2302  1965
   2303  1965		       a5 db		      LDA	e
   2304  1967		       38		      SEC
   2305  1968		       e9 14		      SBC	#20
   2306  196a		       85 db		      STA	e
   2307  196c		       a5 91		      LDA	asteroid4Y
   2308  196e		       e9 00		      SBC	#0
   2309  1970		       85 91		      STA	asteroid4Y
   2310  1972				   .L0218		;  goto resetScreen
   2311  1972
   2312  1972		       4c b7 db 	      jmp	.resetScreen
   2313  1975
   2314  1975				   .
   2315  1975							; 
   2316  1975
   2317  1975				   .level12
   2318  1975							; level12
   2319  1975
   2320  1975				   .L0219		;  asteroidY  =  asteroidY  -	0.37
   2321  1975
   2322  1975		       a5 d8		      LDA	b
   2323  1977		       38		      SEC
   2324  1978		       e9 5e		      SBC	#94
   2325  197a		       85 d8		      STA	b
   2326  197c		       a5 8e		      LDA	asteroidY
   2327  197e		       e9 00		      SBC	#0
   2328  1980		       85 8e		      STA	asteroidY
   2329  1982				   .L0220		;  asteroid2Y	=  asteroid2Y  -  0.30
   2330  1982
   2331  1982		       a5 d9		      LDA	c
   2332  1984		       38		      SEC
   2333  1985		       e9 4c		      SBC	#76
   2334  1987		       85 d9		      STA	c
   2335  1989		       a5 8f		      LDA	asteroid2Y
   2336  198b		       e9 00		      SBC	#0
   2337  198d		       85 8f		      STA	asteroid2Y
   2338  198f				   .L0221		;  asteroid3Y	=  asteroid3Y  -  0.22
   2339  198f
   2340  198f		       a5 da		      LDA	d
   2341  1991		       38		      SEC
   2342  1992		       e9 38		      SBC	#56
   2343  1994		       85 da		      STA	d
   2344  1996		       a5 90		      LDA	asteroid3Y
   2345  1998		       e9 00		      SBC	#0
   2346  199a		       85 90		      STA	asteroid3Y
   2347  199c				   .L0222		;  asteroid4Y	=  asteroid4Y  -  0.08
   2348  199c
   2349  199c		       a5 db		      LDA	e
   2350  199e		       38		      SEC
   2351  199f		       e9 14		      SBC	#20
   2352  19a1		       85 db		      STA	e
   2353  19a3		       a5 91		      LDA	asteroid4Y
   2354  19a5		       e9 00		      SBC	#0
   2355  19a7		       85 91		      STA	asteroid4Y
   2356  19a9				   .L0223		;  COLUPF  =  $60
   2357  19a9
   2358  19a9		       a9 60		      LDA	#$60
   2359  19ab		       85 08		      STA	COLUPF
   2360  19ad				   .L0224		;  goto resetScreen
   2361  19ad
   2362  19ad		       4c b7 db 	      jmp	.resetScreen
   2363  19b0
   2364  19b0				   .
   2365  19b0							; 
   2366  19b0
   2367  19b0				   .level11
   2368  19b0							; level11
   2369  19b0
   2370  19b0				   .L0225		;  asteroidY  =  asteroidY  -	0.34
   2371  19b0
   2372  19b0		       a5 d8		      LDA	b
   2373  19b2		       38		      SEC
   2374  19b3		       e9 57		      SBC	#87
   2375  19b5		       85 d8		      STA	b
   2376  19b7		       a5 8e		      LDA	asteroidY
   2377  19b9		       e9 00		      SBC	#0
   2378  19bb		       85 8e		      STA	asteroidY
   2379  19bd				   .L0226		;  asteroid2Y	=  asteroid2Y  -  0.28
   2380  19bd
   2381  19bd		       a5 d9		      LDA	c
   2382  19bf		       38		      SEC
   2383  19c0		       e9 47		      SBC	#71
   2384  19c2		       85 d9		      STA	c
   2385  19c4		       a5 8f		      LDA	asteroid2Y
   2386  19c6		       e9 00		      SBC	#0
   2387  19c8		       85 8f		      STA	asteroid2Y
   2388  19ca				   .L0227		;  asteroid3Y	=  asteroid3Y  -  0.20
   2389  19ca
   2390  19ca		       a5 da		      LDA	d
   2391  19cc		       38		      SEC
   2392  19cd		       e9 33		      SBC	#51
   2393  19cf		       85 da		      STA	d
   2394  19d1		       a5 90		      LDA	asteroid3Y
   2395  19d3		       e9 00		      SBC	#0
   2396  19d5		       85 90		      STA	asteroid3Y
   2397  19d7				   .L0228		;  asteroid4Y	=  asteroid4Y  -  0.08
   2398  19d7
   2399  19d7		       a5 db		      LDA	e
   2400  19d9		       38		      SEC
   2401  19da		       e9 14		      SBC	#20
   2402  19dc		       85 db		      STA	e
   2403  19de		       a5 91		      LDA	asteroid4Y
   2404  19e0		       e9 00		      SBC	#0
   2405  19e2		       85 91		      STA	asteroid4Y
   2406  19e4				   .L0229		;  goto resetScreen
   2407  19e4
   2408  19e4		       4c b7 db 	      jmp	.resetScreen
   2409  19e7
   2410  19e7				   .
   2411  19e7							; 
   2412  19e7
   2413  19e7				   .level10
   2414  19e7							; level10
   2415  19e7
   2416  19e7				   .L0230		;  asteroidY  =  asteroidY  -	0.32
   2417  19e7
   2418  19e7		       a5 d8		      LDA	b
   2419  19e9		       38		      SEC
   2420  19ea		       e9 51		      SBC	#81
   2421  19ec		       85 d8		      STA	b
   2422  19ee		       a5 8e		      LDA	asteroidY
   2423  19f0		       e9 00		      SBC	#0
   2424  19f2		       85 8e		      STA	asteroidY
   2425  19f4				   .L0231		;  asteroid2Y	=  asteroid2Y  -  0.26
   2426  19f4
   2427  19f4		       a5 d9		      LDA	c
   2428  19f6		       38		      SEC
   2429  19f7		       e9 42		      SBC	#66
   2430  19f9		       85 d9		      STA	c
   2431  19fb		       a5 8f		      LDA	asteroid2Y
   2432  19fd		       e9 00		      SBC	#0
   2433  19ff		       85 8f		      STA	asteroid2Y
   2434  1a01				   .L0232		;  asteroid3Y	=  asteroid3Y  -  0.18
   2435  1a01
   2436  1a01		       a5 da		      LDA	d
   2437  1a03		       38		      SEC
   2438  1a04		       e9 2e		      SBC	#46
   2439  1a06		       85 da		      STA	d
   2440  1a08		       a5 90		      LDA	asteroid3Y
   2441  1a0a		       e9 00		      SBC	#0
   2442  1a0c		       85 90		      STA	asteroid3Y
   2443  1a0e				   .L0233		;  asteroid4Y	=  asteroid4Y  -  0.08
   2444  1a0e
   2445  1a0e		       a5 db		      LDA	e
   2446  1a10		       38		      SEC
   2447  1a11		       e9 14		      SBC	#20
   2448  1a13		       85 db		      STA	e
   2449  1a15		       a5 91		      LDA	asteroid4Y
   2450  1a17		       e9 00		      SBC	#0
   2451  1a19		       85 91		      STA	asteroid4Y
   2452  1a1b				   .L0234		;  goto resetScreen
   2453  1a1b
   2454  1a1b		       4c b7 db 	      jmp	.resetScreen
   2455  1a1e
   2456  1a1e				   .
   2457  1a1e							; 
   2458  1a1e
   2459  1a1e				   .level9
   2460  1a1e							; level9
   2461  1a1e
   2462  1a1e				   .L0235		;  asteroidY  =  asteroidY  -	0.31
   2463  1a1e
   2464  1a1e		       a5 d8		      LDA	b
   2465  1a20		       38		      SEC
   2466  1a21		       e9 4f		      SBC	#79
   2467  1a23		       85 d8		      STA	b
   2468  1a25		       a5 8e		      LDA	asteroidY
   2469  1a27		       e9 00		      SBC	#0
   2470  1a29		       85 8e		      STA	asteroidY
   2471  1a2b				   .L0236		;  asteroid2Y	=  asteroid2Y  -  0.21
   2472  1a2b
   2473  1a2b		       a5 d9		      LDA	c
   2474  1a2d		       38		      SEC
   2475  1a2e		       e9 35		      SBC	#53
   2476  1a30		       85 d9		      STA	c
   2477  1a32		       a5 8f		      LDA	asteroid2Y
   2478  1a34		       e9 00		      SBC	#0
   2479  1a36		       85 8f		      STA	asteroid2Y
   2480  1a38				   .L0237		;  asteroid3Y	=  asteroid3Y  -  0.17
   2481  1a38
   2482  1a38		       a5 da		      LDA	d
   2483  1a3a		       38		      SEC
   2484  1a3b		       e9 2b		      SBC	#43
   2485  1a3d		       85 da		      STA	d
   2486  1a3f		       a5 90		      LDA	asteroid3Y
   2487  1a41		       e9 00		      SBC	#0
   2488  1a43		       85 90		      STA	asteroid3Y
   2489  1a45				   .L0238		;  asteroid4Y	=  asteroid4Y  -  0.08
   2490  1a45
   2491  1a45		       a5 db		      LDA	e
   2492  1a47		       38		      SEC
   2493  1a48		       e9 14		      SBC	#20
   2494  1a4a		       85 db		      STA	e
   2495  1a4c		       a5 91		      LDA	asteroid4Y
   2496  1a4e		       e9 00		      SBC	#0
   2497  1a50		       85 91		      STA	asteroid4Y
   2498  1a52				   .L0239		;  COLUPF  =  $05
   2499  1a52
   2500  1a52		       a9 05		      LDA	#$05
   2501  1a54		       85 08		      STA	COLUPF
   2502  1a56				   .L0240		;  goto resetScreen
   2503  1a56
   2504  1a56		       4c b7 db 	      jmp	.resetScreen
   2505  1a59
   2506  1a59				   .
   2507  1a59							; 
   2508  1a59
   2509  1a59				   .level8
   2510  1a59							; level8
   2511  1a59
   2512  1a59				   .L0241		;  if asteroidY  <  100 then asteroidY  =  asteroidY  -  0.31
   2513  1a59
   2514  1a59		       a5 8e		      LDA	asteroidY
   2515  1a5b		       c9 64		      CMP	#100
   2516  1a5d		       b0 0d		      BCS	.skipL0241
   2517  1a5f				   .condpart127
   2518  1a5f		       a5 d8		      LDA	b
   2519  1a61		       38		      SEC
   2520  1a62		       e9 4f		      SBC	#79
   2521  1a64		       85 d8		      STA	b
   2522  1a66		       a5 8e		      LDA	asteroidY
   2523  1a68		       e9 00		      SBC	#0
   2524  1a6a		       85 8e		      STA	asteroidY
   2525  1a6c				   .skipL0241
   2526  1a6c				   .L0242		;  asteroid2Y	=  asteroid2Y  -  0.21
   2527  1a6c
   2528  1a6c		       a5 d9		      LDA	c
   2529  1a6e		       38		      SEC
   2530  1a6f		       e9 35		      SBC	#53
   2531  1a71		       85 d9		      STA	c
   2532  1a73		       a5 8f		      LDA	asteroid2Y
   2533  1a75		       e9 00		      SBC	#0
   2534  1a77		       85 8f		      STA	asteroid2Y
   2535  1a79				   .L0243		;  asteroid3Y	=  asteroid3Y  -  0.17
   2536  1a79
   2537  1a79		       a5 da		      LDA	d
   2538  1a7b		       38		      SEC
   2539  1a7c		       e9 2b		      SBC	#43
   2540  1a7e		       85 da		      STA	d
   2541  1a80		       a5 90		      LDA	asteroid3Y
   2542  1a82		       e9 00		      SBC	#0
   2543  1a84		       85 90		      STA	asteroid3Y
   2544  1a86				   .L0244		;  asteroid4Y	=  asteroid4Y  -  0.08
   2545  1a86
   2546  1a86		       a5 db		      LDA	e
   2547  1a88		       38		      SEC
   2548  1a89		       e9 14		      SBC	#20
   2549  1a8b		       85 db		      STA	e
   2550  1a8d		       a5 91		      LDA	asteroid4Y
   2551  1a8f		       e9 00		      SBC	#0
   2552  1a91		       85 91		      STA	asteroid4Y
   2553  1a93				   .L0245		;  goto resetScreen
   2554  1a93
   2555  1a93		       4c b7 db 	      jmp	.resetScreen
   2556  1a96
   2557  1a96				   .
   2558  1a96							; 
   2559  1a96
   2560  1a96				   .level7
   2561  1a96							; level7
   2562  1a96
   2563  1a96				   .L0246		;  asteroidY  =  asteroidY  -	0.21
   2564  1a96
   2565  1a96		       a5 d8		      LDA	b
   2566  1a98		       38		      SEC
   2567  1a99		       e9 35		      SBC	#53
   2568  1a9b		       85 d8		      STA	b
   2569  1a9d		       a5 8e		      LDA	asteroidY
   2570  1a9f		       e9 00		      SBC	#0
   2571  1aa1		       85 8e		      STA	asteroidY
   2572  1aa3				   .L0247		;  asteroid2Y	=  asteroid2Y  -  0.31
   2573  1aa3
   2574  1aa3		       a5 d9		      LDA	c
   2575  1aa5		       38		      SEC
   2576  1aa6		       e9 4f		      SBC	#79
   2577  1aa8		       85 d9		      STA	c
   2578  1aaa		       a5 8f		      LDA	asteroid2Y
   2579  1aac		       e9 00		      SBC	#0
   2580  1aae		       85 8f		      STA	asteroid2Y
   2581  1ab0				   .L0248		;  if asteroid3Y  <  100 then asteroid3Y  =  asteroid3Y  -  0.16
   2582  1ab0
   2583  1ab0		       a5 90		      LDA	asteroid3Y
   2584  1ab2		       c9 64		      CMP	#100
   2585  1ab4		       b0 0d		      BCS	.skipL0248
   2586  1ab6				   .condpart128
   2587  1ab6		       a5 da		      LDA	d
   2588  1ab8		       38		      SEC
   2589  1ab9		       e9 28		      SBC	#40
   2590  1abb		       85 da		      STA	d
   2591  1abd		       a5 90		      LDA	asteroid3Y
   2592  1abf		       e9 00		      SBC	#0
   2593  1ac1		       85 90		      STA	asteroid3Y
   2594  1ac3				   .skipL0248
   2595  1ac3				   .L0249		;  asteroid4Y	=  asteroid4Y  -  0.08
   2596  1ac3
   2597  1ac3		       a5 db		      LDA	e
   2598  1ac5		       38		      SEC
   2599  1ac6		       e9 14		      SBC	#20
   2600  1ac8		       85 db		      STA	e
   2601  1aca		       a5 91		      LDA	asteroid4Y
   2602  1acc		       e9 00		      SBC	#0
   2603  1ace		       85 91		      STA	asteroid4Y
   2604  1ad0				   .L0250		;  COLUPF  =  $02
   2605  1ad0
   2606  1ad0		       a9 02		      LDA	#$02
   2607  1ad2		       85 08		      STA	COLUPF
   2608  1ad4				   .L0251		;  goto resetScreen
   2609  1ad4
   2610  1ad4		       4c b7 db 	      jmp	.resetScreen
   2611  1ad7
   2612  1ad7				   .
   2613  1ad7							; 
   2614  1ad7
   2615  1ad7				   .level6
   2616  1ad7							; level6
   2617  1ad7
   2618  1ad7				   .L0252		;  asteroidY  =  asteroidY  -	0.21
   2619  1ad7
   2620  1ad7		       a5 d8		      LDA	b
   2621  1ad9		       38		      SEC
   2622  1ada		       e9 35		      SBC	#53
   2623  1adc		       85 d8		      STA	b
   2624  1ade		       a5 8e		      LDA	asteroidY
   2625  1ae0		       e9 00		      SBC	#0
   2626  1ae2		       85 8e		      STA	asteroidY
   2627  1ae4				   .L0253		;  asteroid2Y	=  asteroid2Y  -  0.31
   2628  1ae4
   2629  1ae4		       a5 d9		      LDA	c
   2630  1ae6		       38		      SEC
   2631  1ae7		       e9 4f		      SBC	#79
   2632  1ae9		       85 d9		      STA	c
   2633  1aeb		       a5 8f		      LDA	asteroid2Y
   2634  1aed		       e9 00		      SBC	#0
   2635  1aef		       85 8f		      STA	asteroid2Y
   2636  1af1				   .L0254		;  asteroid3Y	=  asteroid3Y  -  0.16
   2637  1af1
   2638  1af1		       a5 da		      LDA	d
   2639  1af3		       38		      SEC
   2640  1af4		       e9 28		      SBC	#40
   2641  1af6		       85 da		      STA	d
   2642  1af8		       a5 90		      LDA	asteroid3Y
   2643  1afa		       e9 00		      SBC	#0
   2644  1afc		       85 90		      STA	asteroid3Y
   2645  1afe				   .L0255		;  goto resetScreen
   2646  1afe
   2647  1afe		       4c b7 db 	      jmp	.resetScreen
   2648  1b01
   2649  1b01				   .
   2650  1b01							; 
   2651  1b01
   2652  1b01				   .level5
   2653  1b01							; level5
   2654  1b01
   2655  1b01				   .L0256		;  asteroidY  =  asteroidY  -	0.20
   2656  1b01
   2657  1b01		       a5 d8		      LDA	b
   2658  1b03		       38		      SEC
   2659  1b04		       e9 33		      SBC	#51
   2660  1b06		       85 d8		      STA	b
   2661  1b08		       a5 8e		      LDA	asteroidY
   2662  1b0a		       e9 00		      SBC	#0
   2663  1b0c		       85 8e		      STA	asteroidY
   2664  1b0e				   .L0257		;  asteroid2Y	=  asteroid2Y  -  0.30
   2665  1b0e
   2666  1b0e		       a5 d9		      LDA	c
   2667  1b10		       38		      SEC
   2668  1b11		       e9 4c		      SBC	#76
   2669  1b13		       85 d9		      STA	c
   2670  1b15		       a5 8f		      LDA	asteroid2Y
   2671  1b17		       e9 00		      SBC	#0
   2672  1b19		       85 8f		      STA	asteroid2Y
   2673  1b1b				   .L0258		;  asteroid3Y	=  asteroid3Y  -  0.15
   2674  1b1b
   2675  1b1b		       a5 da		      LDA	d
   2676  1b1d		       38		      SEC
   2677  1b1e		       e9 26		      SBC	#38
   2678  1b20		       85 da		      STA	d
   2679  1b22		       a5 90		      LDA	asteroid3Y
   2680  1b24		       e9 00		      SBC	#0
   2681  1b26		       85 90		      STA	asteroid3Y
   2682  1b28				   .L0259		;  goto resetScreen
   2683  1b28
   2684  1b28		       4c b7 db 	      jmp	.resetScreen
   2685  1b2b
   2686  1b2b				   .
   2687  1b2b							; 
   2688  1b2b
   2689  1b2b				   .level4
   2690  1b2b							; level4
   2691  1b2b
   2692  1b2b				   .L0260		;  asteroidY  =  asteroidY  -	0.20
   2693  1b2b
   2694  1b2b		       a5 d8		      LDA	b
   2695  1b2d		       38		      SEC
   2696  1b2e		       e9 33		      SBC	#51
   2697  1b30		       85 d8		      STA	b
   2698  1b32		       a5 8e		      LDA	asteroidY
   2699  1b34		       e9 00		      SBC	#0
   2700  1b36		       85 8e		      STA	asteroidY
   2701  1b38				   .L0261		;  asteroid2Y	=  asteroid2Y  -  0.30
   2702  1b38
   2703  1b38		       a5 d9		      LDA	c
   2704  1b3a		       38		      SEC
   2705  1b3b		       e9 4c		      SBC	#76
   2706  1b3d		       85 d9		      STA	c
   2707  1b3f		       a5 8f		      LDA	asteroid2Y
   2708  1b41		       e9 00		      SBC	#0
   2709  1b43		       85 8f		      STA	asteroid2Y
   2710  1b45				   .L0262		;  asteroid3Y	=  asteroid3Y  -  0.15
   2711  1b45
   2712  1b45		       a5 da		      LDA	d
   2713  1b47		       38		      SEC
   2714  1b48		       e9 26		      SBC	#38
   2715  1b4a		       85 da		      STA	d
   2716  1b4c		       a5 90		      LDA	asteroid3Y
   2717  1b4e		       e9 00		      SBC	#0
   2718  1b50		       85 90		      STA	asteroid3Y
   2719  1b52				   .L0263		;  COLUPF  =  $10
   2720  1b52
   2721  1b52		       a9 10		      LDA	#$10
   2722  1b54		       85 08		      STA	COLUPF
   2723  1b56				   .L0264		;  goto resetScreen
   2724  1b56
   2725  1b56		       4c b7 db 	      jmp	.resetScreen
   2726  1b59
   2727  1b59				   .
   2728  1b59							; 
   2729  1b59
   2730  1b59				   .level3
   2731  1b59							; level3
   2732  1b59
   2733  1b59				   .L0265		;  if asteroidY  <  100 then asteroidY  =  asteroidY  -  20.0
   2734  1b59
   2735  1b59		       a5 8e		      LDA	asteroidY
   2736  1b5b		       c9 64		      CMP	#100
   2737  1b5d		       b0 0d		      BCS	.skipL0265
   2738  1b5f				   .condpart129
   2739  1b5f		       a5 d8		      LDA	b
   2740  1b61		       38		      SEC
   2741  1b62		       e9 00		      SBC	#0
   2742  1b64		       85 d8		      STA	b
   2743  1b66		       a5 8e		      LDA	asteroidY
   2744  1b68		       e9 14		      SBC	#20
   2745  1b6a		       85 8e		      STA	asteroidY
   2746  1b6c				   .skipL0265
   2747  1b6c				   .L0266		;  asteroid2Y	=  asteroid2Y  -  0.30
   2748  1b6c
   2749  1b6c		       a5 d9		      LDA	c
   2750  1b6e		       38		      SEC
   2751  1b6f		       e9 4c		      SBC	#76
   2752  1b71		       85 d9		      STA	c
   2753  1b73		       a5 8f		      LDA	asteroid2Y
   2754  1b75		       e9 00		      SBC	#0
   2755  1b77		       85 8f		      STA	asteroid2Y
   2756  1b79				   .L0267		;  asteroid3Y	=  asteroid3Y  -  0.10
   2757  1b79
   2758  1b79		       a5 da		      LDA	d
   2759  1b7b		       38		      SEC
   2760  1b7c		       e9 19		      SBC	#25
   2761  1b7e		       85 da		      STA	d
   2762  1b80		       a5 90		      LDA	asteroid3Y
   2763  1b82		       e9 00		      SBC	#0
   2764  1b84		       85 90		      STA	asteroid3Y
   2765  1b86				   .L0268		;  goto resetScreen
   2766  1b86
   2767  1b86		       4c b7 db 	      jmp	.resetScreen
   2768  1b89
   2769  1b89				   .
   2770  1b89							; 
   2771  1b89
   2772  1b89				   .level2
   2773  1b89							; level2
   2774  1b89
   2775  1b89				   .L0269		;  asteroid2Y	=  asteroid2Y  -  0.30
   2776  1b89
   2777  1b89		       a5 d9		      LDA	c
   2778  1b8b		       38		      SEC
   2779  1b8c		       e9 4c		      SBC	#76
   2780  1b8e		       85 d9		      STA	c
   2781  1b90		       a5 8f		      LDA	asteroid2Y
   2782  1b92		       e9 00		      SBC	#0
   2783  1b94		       85 8f		      STA	asteroid2Y
   2784  1b96				   .L0270		;  asteroidY  =  asteroidY  -	0.20
   2785  1b96
   2786  1b96		       a5 d8		      LDA	b
   2787  1b98		       38		      SEC
   2788  1b99		       e9 33		      SBC	#51
   2789  1b9b		       85 d8		      STA	b
   2790  1b9d		       a5 8e		      LDA	asteroidY
   2791  1b9f		       e9 00		      SBC	#0
   2792  1ba1		       85 8e		      STA	asteroidY
   2793  1ba3				   .L0271		;  goto resetScreen
   2794  1ba3
   2795  1ba3		       4c b7 db 	      jmp	.resetScreen
   2796  1ba6
   2797  1ba6				   .
   2798  1ba6							; 
   2799  1ba6
   2800  1ba6				   .level1
   2801  1ba6							; level1
   2802  1ba6
   2803  1ba6				   .L0272		;  asteroid2Y	=  asteroid2Y  -  0.30
   2804  1ba6
   2805  1ba6		       a5 d9		      LDA	c
   2806  1ba8		       38		      SEC
   2807  1ba9		       e9 4c		      SBC	#76
   2808  1bab		       85 d9		      STA	c
   2809  1bad		       a5 8f		      LDA	asteroid2Y
   2810  1baf		       e9 00		      SBC	#0
   2811  1bb1		       85 8f		      STA	asteroid2Y
   2812  1bb3				   .L0273		;  COLUPF  =  $70
   2813  1bb3
   2814  1bb3		       a9 70		      LDA	#$70
   2815  1bb5		       85 08		      STA	COLUPF
   2816  1bb7				   .
   2817  1bb7							; 
   2818  1bb7
   2819  1bb7				   .resetScreen
   2820  1bb7							; resetScreen
   2821  1bb7
   2822  1bb7				   .L0274		;  drawscreen
   2823  1bb7
   2824  1bb7		       85 d1		      sta	temp7
   2825  1bb9		       a9 db		      lda	#>(ret_point2-1)
   2826  1bbb		       48		      pha
   2827  1bbc		       a9 ce		      lda	#<(ret_point2-1)
   2828  1bbe		       48		      pha
   2829  1bbf		       a9 f0		      lda	#>(drawscreen-1)
   2830  1bc1		       48		      pha
   2831  1bc2		       a9 39		      lda	#<(drawscreen-1)
   2832  1bc4		       48		      pha
   2833  1bc5		       a5 d1		      lda	temp7
   2834  1bc7		       48		      pha
   2835  1bc8		       8a		      txa
   2836  1bc9		       48		      pha
   2837  1bca		       a2 02		      ldx	#2
   2838  1bcc		       4c eb ff 	      jmp	BS_jsr
   2839  1bcf				   ret_point2
   2840  1bcf				   .
   2841  1bcf							; 
   2842  1bcf
   2843  1bcf				   .
   2844  1bcf							; 
   2845  1bcf
   2846  1bcf				   .L0275		;  if _resetTicker  >	0 then goto sprites
   2847  1bcf
   2848  1bcf		       a9 00		      LDA	#0
   2849  1bd1		       c5 ee		      CMP	_resetTicker
   2850  1bd3		       b0 03		      BCS	.skipL0275
   2851  1bd5				   .condpart130
   2852  1bd5		       4c a4 d1 	      jmp	.sprites
   2853  1bd8
   2854  1bd8				   .skipL0275
   2855  1bd8				   .L0276		;  if powerUpInPlay  =  1 then goto skipPlayer1
   2856  1bd8
   2857  1bd8		       a5 e5		      LDA	powerUpInPlay
   2858  1bda		       c9 01		      CMP	#1
   2859  1bdc		       d0 03		      BNE	.skipL0276
   2860  1bde				   .condpart131
   2861  1bde		       4c 2c dc 	      jmp	.skipPlayer1
   2862  1be1
   2863  1be1				   .skipL0276
   2864  1be1				   .L0277		;  if asteroidY  >  70  &&  asteroidY	<  100 then asteroidx  =  asteroidx  +	0.15
   2865  1be1
   2866  1be1		       a9 46		      LDA	#70
   2867  1be3		       c5 8e		      CMP	asteroidY
   2868  1be5		       b0 13		      BCS	.skipL0277
   2869  1be7				   .condpart132
   2870  1be7		       a5 8e		      LDA	asteroidY
   2871  1be9		       c9 64		      CMP	#100
   2872  1beb		       b0 0d		      BCS	.skip132then
   2873  1bed				   .condpart133
   2874  1bed		       a5 de		      LDA	h
   2875  1bef		       18		      CLC
   2876  1bf0		       69 26		      ADC	#38
   2877  1bf2		       85 de		      STA	h
   2878  1bf4		       a5 85		      LDA	asteroidx
   2879  1bf6		       69 00		      ADC	#0
   2880  1bf8		       85 85		      STA	asteroidx
   2881  1bfa				   .skip132then
   2882  1bfa				   .skipL0277
   2883  1bfa				   .L0278		;  if asteroidY  <  70  &&  asteroidY	>  50 then asteroidx  =  asteroidx  -  0.15
   2884  1bfa
   2885  1bfa		       a5 8e		      LDA	asteroidY
   2886  1bfc		       c9 46		      CMP	#70
   2887  1bfe		       b0 13		      BCS	.skipL0278
   2888  1c00				   .condpart134
   2889  1c00		       a9 32		      LDA	#50
   2890  1c02		       c5 8e		      CMP	asteroidY
   2891  1c04		       b0 0d		      BCS	.skip134then
   2892  1c06				   .condpart135
   2893  1c06		       a5 de		      LDA	h
   2894  1c08		       38		      SEC
   2895  1c09		       e9 26		      SBC	#38
   2896  1c0b		       85 de		      STA	h
   2897  1c0d		       a5 85		      LDA	asteroidx
   2898  1c0f		       e9 00		      SBC	#0
   2899  1c11		       85 85		      STA	asteroidx
   2900  1c13				   .skip134then
   2901  1c13				   .skipL0278
   2902  1c13				   .L0279		;  if asteroidY  <  50  &&  asteroidY	>  42 then asteroidx  =  asteroidx  +  0.15
   2903  1c13
   2904  1c13		       a5 8e		      LDA	asteroidY
   2905  1c15		       c9 32		      CMP	#50
   2906  1c17		       b0 13		      BCS	.skipL0279
   2907  1c19				   .condpart136
   2908  1c19		       a9 2a		      LDA	#42
   2909  1c1b		       c5 8e		      CMP	asteroidY
   2910  1c1d		       b0 0d		      BCS	.skip136then
   2911  1c1f				   .condpart137
   2912  1c1f		       a5 de		      LDA	h
   2913  1c21		       18		      CLC
   2914  1c22		       69 26		      ADC	#38
   2915  1c24		       85 de		      STA	h
   2916  1c26		       a5 85		      LDA	asteroidx
   2917  1c28		       69 00		      ADC	#0
   2918  1c2a		       85 85		      STA	asteroidx
   2919  1c2c				   .skip136then
   2920  1c2c				   .skipL0279
   2921  1c2c				   .
   2922  1c2c							; 
   2923  1c2c
   2924  1c2c				   .skipPlayer1
   2925  1c2c							; skipPlayer1
   2926  1c2c
   2927  1c2c				   .L0280		;  if asteroid4Y  >  100 then asteroid4x  =  116
   2928  1c2c
   2929  1c2c		       a9 64		      LDA	#100
   2930  1c2e		       c5 91		      CMP	asteroid4Y
   2931  1c30		       b0 08		      BCS	.skipL0280
   2932  1c32				   .condpart138
   2933  1c32		       a9 00		      LDA	#0
   2934  1c34		       85 e1		      STA	k
   2935  1c36		       a9 74		      LDA	#116
   2936  1c38		       85 88		      STA	asteroid4x
   2937  1c3a				   .skipL0280
   2938  1c3a				   .L0281		;  if asteroid4Y  <  90  &&  asteroid4Y  >  82 then asteroid4x  =  asteroid4x	-  0.75
   2939  1c3a
   2940  1c3a		       a5 91		      LDA	asteroid4Y
   2941  1c3c		       c9 5a		      CMP	#90
   2942  1c3e		       b0 13		      BCS	.skipL0281
   2943  1c40				   .condpart139
   2944  1c40		       a9 52		      LDA	#82
   2945  1c42		       c5 91		      CMP	asteroid4Y
   2946  1c44		       b0 0d		      BCS	.skip139then
   2947  1c46				   .condpart140
   2948  1c46		       a5 e1		      LDA	k
   2949  1c48		       38		      SEC
   2950  1c49		       e9 c0		      SBC	#192
   2951  1c4b		       85 e1		      STA	k
   2952  1c4d		       a5 88		      LDA	asteroid4x
   2953  1c4f		       e9 00		      SBC	#0
   2954  1c51		       85 88		      STA	asteroid4x
   2955  1c53				   .skip139then
   2956  1c53				   .skipL0281
   2957  1c53				   .L0282		;  if asteroid4Y  <  80  &&  asteroid4Y  >  72 then asteroid4x  =  asteroid4x	+  0.75
   2958  1c53
   2959  1c53		       a5 91		      LDA	asteroid4Y
   2960  1c55		       c9 50		      CMP	#80
   2961  1c57		       b0 13		      BCS	.skipL0282
   2962  1c59				   .condpart141
   2963  1c59		       a9 48		      LDA	#72
   2964  1c5b		       c5 91		      CMP	asteroid4Y
   2965  1c5d		       b0 0d		      BCS	.skip141then
   2966  1c5f				   .condpart142
   2967  1c5f		       a5 e1		      LDA	k
   2968  1c61		       18		      CLC
   2969  1c62		       69 c0		      ADC	#192
   2970  1c64		       85 e1		      STA	k
   2971  1c66		       a5 88		      LDA	asteroid4x
   2972  1c68		       69 00		      ADC	#0
   2973  1c6a		       85 88		      STA	asteroid4x
   2974  1c6c				   .skip141then
   2975  1c6c				   .skipL0282
   2976  1c6c				   .L0283		;  if asteroid4Y  <  70  &&  asteroid4Y  >  62 then asteroid4x  =  asteroid4x	-  0.75
   2977  1c6c
   2978  1c6c		       a5 91		      LDA	asteroid4Y
   2979  1c6e		       c9 46		      CMP	#70
   2980  1c70		       b0 13		      BCS	.skipL0283
   2981  1c72				   .condpart143
   2982  1c72		       a9 3e		      LDA	#62
   2983  1c74		       c5 91		      CMP	asteroid4Y
   2984  1c76		       b0 0d		      BCS	.skip143then
   2985  1c78				   .condpart144
   2986  1c78		       a5 e1		      LDA	k
   2987  1c7a		       38		      SEC
   2988  1c7b		       e9 c0		      SBC	#192
   2989  1c7d		       85 e1		      STA	k
   2990  1c7f		       a5 88		      LDA	asteroid4x
   2991  1c81		       e9 00		      SBC	#0
   2992  1c83		       85 88		      STA	asteroid4x
   2993  1c85				   .skip143then
   2994  1c85				   .skipL0283
   2995  1c85				   .L0284		;  if asteroid4Y  <  60  &&  asteroid4Y  >  52 then asteroid4x  =  asteroid4x	+  0.75
   2996  1c85
   2997  1c85		       a5 91		      LDA	asteroid4Y
   2998  1c87		       c9 3c		      CMP	#60
   2999  1c89		       b0 13		      BCS	.skipL0284
   3000  1c8b				   .condpart145
   3001  1c8b		       a9 34		      LDA	#52
   3002  1c8d		       c5 91		      CMP	asteroid4Y
   3003  1c8f		       b0 0d		      BCS	.skip145then
   3004  1c91				   .condpart146
   3005  1c91		       a5 e1		      LDA	k
   3006  1c93		       18		      CLC
   3007  1c94		       69 c0		      ADC	#192
   3008  1c96		       85 e1		      STA	k
   3009  1c98		       a5 88		      LDA	asteroid4x
   3010  1c9a		       69 00		      ADC	#0
   3011  1c9c		       85 88		      STA	asteroid4x
   3012  1c9e				   .skip145then
   3013  1c9e				   .skipL0284
   3014  1c9e				   .L0285		;  if asteroid4Y  <  50  &&  asteroid4Y  >  42 then asteroid4x  =  asteroid4x	-  0.75
   3015  1c9e
   3016  1c9e		       a5 91		      LDA	asteroid4Y
   3017  1ca0		       c9 32		      CMP	#50
   3018  1ca2		       b0 13		      BCS	.skipL0285
   3019  1ca4				   .condpart147
   3020  1ca4		       a9 2a		      LDA	#42
   3021  1ca6		       c5 91		      CMP	asteroid4Y
   3022  1ca8		       b0 0d		      BCS	.skip147then
   3023  1caa				   .condpart148
   3024  1caa		       a5 e1		      LDA	k
   3025  1cac		       38		      SEC
   3026  1cad		       e9 c0		      SBC	#192
   3027  1caf		       85 e1		      STA	k
   3028  1cb1		       a5 88		      LDA	asteroid4x
   3029  1cb3		       e9 00		      SBC	#0
   3030  1cb5		       85 88		      STA	asteroid4x
   3031  1cb7				   .skip147then
   3032  1cb7				   .skipL0285
   3033  1cb7				   .
   3034  1cb7							; 
   3035  1cb7
   3036  1cb7				   .L0286		;  if asteroid3Y  >  100 then goto skipAsteroid3xMovement
   3037  1cb7
   3038  1cb7		       a9 64		      LDA	#100
   3039  1cb9		       c5 90		      CMP	asteroid3Y
   3040  1cbb		       b0 03		      BCS	.skipL0286
   3041  1cbd				   .condpart149
   3042  1cbd		       4c f7 dc 	      jmp	.skipAsteroid3xMovement
   3043  1cc0
   3044  1cc0				   .skipL0286
   3045  1cc0				   .L0287		;  if asteroid3x  <  30 then player3MoveLeft  =  0
   3046  1cc0
   3047  1cc0		       a5 87		      LDA	asteroid3x
   3048  1cc2		       c9 1e		      CMP	#30
   3049  1cc4		       b0 04		      BCS	.skipL0287
   3050  1cc6				   .condpart150
   3051  1cc6		       a9 00		      LDA	#0
   3052  1cc8		       85 dd		      STA	player3MoveLeft
   3053  1cca				   .skipL0287
   3054  1cca				   .L0288		;  if asteroid3x  >  120 then player3MoveLeft	=  1
   3055  1cca
   3056  1cca		       a9 78		      LDA	#120
   3057  1ccc		       c5 87		      CMP	asteroid3x
   3058  1cce		       b0 04		      BCS	.skipL0288
   3059  1cd0				   .condpart151
   3060  1cd0		       a9 01		      LDA	#1
   3061  1cd2		       85 dd		      STA	player3MoveLeft
   3062  1cd4				   .skipL0288
   3063  1cd4				   .L0289		;  if player3MoveLeft	=  1 then asteroid3x  =  asteroid3x  -	0.15 else asteroid3x  =  asteroid3x  +	0.15
   3064  1cd4
   3065  1cd4		       a5 dd		      LDA	player3MoveLeft
   3066  1cd6		       c9 01		      CMP	#1
   3067  1cd8		       d0 10		      BNE	.skipL0289
   3068  1cda				   .condpart152
   3069  1cda		       a5 e0		      LDA	j
   3070  1cdc		       38		      SEC
   3071  1cdd		       e9 26		      SBC	#38
   3072  1cdf		       85 e0		      STA	j
   3073  1ce1		       a5 87		      LDA	asteroid3x
   3074  1ce3		       e9 00		      SBC	#0
   3075  1ce5		       85 87		      STA	asteroid3x
   3076  1ce7		       4c f7 dc 	      jmp	.skipelse3
   3077  1cea				   .skipL0289
   3078  1cea		       a5 e0		      LDA	j
   3079  1cec		       18		      CLC
   3080  1ced		       69 26		      ADC	#38
   3081  1cef		       85 e0		      STA	j
   3082  1cf1		       a5 87		      LDA	asteroid3x
   3083  1cf3		       69 00		      ADC	#0
   3084  1cf5		       85 87		      STA	asteroid3x
   3085  1cf7				   .skipelse3
   3086  1cf7				   .
   3087  1cf7							; 
   3088  1cf7
   3089  1cf7				   .skipAsteroid3xMovement
   3090  1cf7							; skipAsteroid3xMovement
   3091  1cf7
   3092  1cf7				   .
   3093  1cf7							; 
   3094  1cf7
   3095  1cf7				   .L0290		;  if altSprite  =  0	||  player2y  >  90 then goto sprites
   3096  1cf7
   3097  1cf7		       a5 e6		      LDA	altSprite
   3098  1cf9		       c9 00		      CMP	#0
   3099  1cfb		       d0 03		      BNE	.skipL0290
   3100  1cfd				   .condpart153
   3101  1cfd		       4c 06 dd 	      jmp	.condpart154
   3102  1d00				   .skipL0290
   3103  1d00		       a9 5a		      LDA	#90
   3104  1d02		       c5 8f		      CMP	player2y
   3105  1d04		       b0 03		      BCS	.skip49OR
   3106  1d06				   .condpart154
   3107  1d06		       4c a4 d1 	      jmp	.sprites
   3108  1d09
   3109  1d09				   .skip49OR
   3110  1d09				   .L0291		;  if player2x  -  7  >  player0x then asteroid2x  =  asteroid2x  -  0.5
   3111  1d09
   3112  1d09							; complex condition detected
   3113  1d09		       a5 86		      LDA	player2x
   3114  1d0b		       38		      SEC
   3115  1d0c		       e9 07		      SBC	#7
   3116  1d0e		       48		      PHA
   3117  1d0f		       ba		      TSX
   3118  1d10		       68		      PLA
   3119  1d11		       a5 84		      LDA	player0x
   3120  1d13		       d5 01		      CMP	1,x
   3121  1d15		       b0 0d		      BCS	.skipL0291
   3122  1d17				   .condpart155
   3123  1d17		       a5 df		      LDA	i
   3124  1d19		       38		      SEC
   3125  1d1a		       e9 80		      SBC	#128
   3126  1d1c		       85 df		      STA	i
   3127  1d1e		       a5 86		      LDA	asteroid2x
   3128  1d20		       e9 00		      SBC	#0
   3129  1d22		       85 86		      STA	asteroid2x
   3130  1d24				   .skipL0291
   3131  1d24				   .L0292		;  if player2x  -  7  <  player0x then asteroid2x  =  asteroid2x  +  0.5
   3132  1d24
   3133  1d24							; complex condition detected
   3134  1d24		       a5 86		      LDA	player2x
   3135  1d26		       38		      SEC
   3136  1d27		       e9 07		      SBC	#7
   3137  1d29		       c5 84		      CMP	player0x
   3138  1d2b		       b0 0d		      BCS	.skipL0292
   3139  1d2d				   .condpart156
   3140  1d2d		       a5 df		      LDA	i
   3141  1d2f		       18		      CLC
   3142  1d30		       69 80		      ADC	#128
   3143  1d32		       85 df		      STA	i
   3144  1d34		       a5 86		      LDA	asteroid2x
   3145  1d36		       69 00		      ADC	#0
   3146  1d38		       85 86		      STA	asteroid2x
   3147  1d3a				   .skipL0292
   3148  1d3a				   .
   3149  1d3a							; 
   3150  1d3a
   3151  1d3a				   .L0293		;  goto sprites
   3152  1d3a
   3153  1d3a		       4c a4 d1 	      jmp	.sprites
   3154  1d3d
   3155  1d3d				   .
   3156  1d3d							; 
   3157  1d3d
   3158  1d3d				   .setPlayer1Color
   3159  1d3d							; setPlayer1Color
   3160  1d3d
   3161  1d3d				   .L0294		;  if ticker  <  5 then _COLUP1  =  $22 else _COLUP1  =  #38
   3162  1d3d
   3163  1d3d		       a5 e4		      LDA	ticker
   3164  1d3f		       c9 05		      CMP	#5
   3165  1d41		       b0 07		      BCS	.skipL0294
   3166  1d43				   .condpart157
   3167  1d43		       a9 22		      LDA	#$22
   3168  1d45		       85 98		      STA	_COLUP1
   3169  1d47		       4c 4e dd 	      jmp	.skipelse4
   3170  1d4a				   .skipL0294
   3171  1d4a		       a9 26		      LDA	##38
   3172  1d4c		       85 98		      STA	_COLUP1
   3173  1d4e				   .skipelse4
   3174  1d4e				   .L0295		;  if ticker  =  7 then powerUpInPlay	=  1 :	_COLUP1  =  $1f else powerUpInPlay  =  0
   3175  1d4e
   3176  1d4e		       a5 e4		      LDA	ticker
   3177  1d50		       c9 07		      CMP	#7
   3178  1d52		       d0 0b		      BNE	.skipL0295
   3179  1d54				   .condpart158
   3180  1d54		       a9 01		      LDA	#1
   3181  1d56		       85 e5		      STA	powerUpInPlay
   3182  1d58		       a9 1f		      LDA	#$1f
   3183  1d5a		       85 98		      STA	_COLUP1
   3184  1d5c		       4c 63 dd 	      jmp	.skipelse5
   3185  1d5f				   .skipL0295
   3186  1d5f		       a9 00		      LDA	#0
   3187  1d61		       85 e5		      STA	powerUpInPlay
   3188  1d63				   .skipelse5
   3189  1d63				   .L0296		;  goto completePlayer1ColorSet
   3190  1d63
   3191  1d63		       4c c3 d1 	      jmp	.completePlayer1ColorSet
   3192  1d66
   3193  1d66				   .
   3194  1d66							; 
   3195  1d66
   3196  1d66				   .setPlayer2Color
   3197  1d66							; setPlayer2Color
   3198  1d66
   3199  1d66				   .L0297		;  if ticker  >  5 then COLUP2  =  $68 else COLUP2  =	$22
   3200  1d66
   3201  1d66		       a9 05		      LDA	#5
   3202  1d68		       c5 e4		      CMP	ticker
   3203  1d6a		       b0 07		      BCS	.skipL0297
   3204  1d6c				   .condpart159
   3205  1d6c		       a9 68		      LDA	#$68
   3206  1d6e		       85 99		      STA	COLUP2
   3207  1d70		       4c 77 dd 	      jmp	.skipelse6
   3208  1d73				   .skipL0297
   3209  1d73		       a9 22		      LDA	#$22
   3210  1d75		       85 99		      STA	COLUP2
   3211  1d77				   .skipelse6
   3212  1d77				   .L0298		;  if ticker  <  5 then altSprite  =  0
   3213  1d77
   3214  1d77		       a5 e4		      LDA	ticker
   3215  1d79		       c9 05		      CMP	#5
   3216  1d7b		       b0 04		      BCS	.skipL0298
   3217  1d7d				   .condpart160
   3218  1d7d		       a9 00		      LDA	#0
   3219  1d7f		       85 e6		      STA	altSprite
   3220  1d81				   .skipL0298
   3221  1d81				   .L0299		;  if ticker  >=  5  &&  killCount  >	26 then altSprite  =  1
   3222  1d81
   3223  1d81		       a5 e4		      LDA	ticker
   3224  1d83		       c9 05		      CMP	#5
   3225  1d85		       90 0a		      BCC	.skipL0299
   3226  1d87				   .condpart161
   3227  1d87		       a9 1a		      LDA	#26
   3228  1d89		       c5 e3		      CMP	killCount
   3229  1d8b		       b0 04		      BCS	.skip161then
   3230  1d8d				   .condpart162
   3231  1d8d		       a9 01		      LDA	#1
   3232  1d8f		       85 e6		      STA	altSprite
   3233  1d91				   .skip161then
   3234  1d91				   .skipL0299
   3235  1d91				   .
   3236  1d91							; 
   3237  1d91
   3238  1d91				   .L0300		;  goto completePlayer2ColorSet
   3239  1d91
   3240  1d91		       4c cc d1 	      jmp	.completePlayer2ColorSet
   3241  1d94
   3242  1d94				   .
   3243  1d94							; 
   3244  1d94
   3245  1d94				   .setPlayer3Color
   3246  1d94							; setPlayer3Color
   3247  1d94
   3248  1d94				   .L0301		;  if ticker  =  0 then COLUP3  =  $22
   3249  1d94
   3250  1d94		       a5 e4		      LDA	ticker
   3251  1d96		       c9 00		      CMP	#0
   3252  1d98		       d0 04		      BNE	.skipL0301
   3253  1d9a				   .condpart163
   3254  1d9a		       a9 22		      LDA	#$22
   3255  1d9c		       85 9a		      STA	COLUP3
   3256  1d9e				   .skipL0301
   3257  1d9e				   .L0302		;  if ticker  =  1 then COLUP3  =  $38
   3258  1d9e
   3259  1d9e		       a5 e4		      LDA	ticker
   3260  1da0		       c9 01		      CMP	#1
   3261  1da2		       d0 04		      BNE	.skipL0302
   3262  1da4				   .condpart164
   3263  1da4		       a9 38		      LDA	#$38
   3264  1da6		       85 9a		      STA	COLUP3
   3265  1da8				   .skipL0302
   3266  1da8				   .L0303		;  if ticker  =  2 then COLUP3  =  $66
   3267  1da8
   3268  1da8		       a5 e4		      LDA	ticker
   3269  1daa		       c9 02		      CMP	#2
   3270  1dac		       d0 04		      BNE	.skipL0303
   3271  1dae				   .condpart165
   3272  1dae		       a9 66		      LDA	#$66
   3273  1db0		       85 9a		      STA	COLUP3
   3274  1db2				   .skipL0303
   3275  1db2				   .L0304		;  if ticker  =  3 then COLUP3  =  $78
   3276  1db2
   3277  1db2		       a5 e4		      LDA	ticker
   3278  1db4		       c9 03		      CMP	#3
   3279  1db6		       d0 04		      BNE	.skipL0304
   3280  1db8				   .condpart166
   3281  1db8		       a9 78		      LDA	#$78
   3282  1dba		       85 9a		      STA	COLUP3
   3283  1dbc				   .skipL0304
   3284  1dbc				   .L0305		;  if ticker  =  4 then COLUP3  =  $CA
   3285  1dbc
   3286  1dbc		       a5 e4		      LDA	ticker
   3287  1dbe		       c9 04		      CMP	#4
   3288  1dc0		       d0 04		      BNE	.skipL0305
   3289  1dc2				   .condpart167
   3290  1dc2		       a9 ca		      LDA	#$CA
   3291  1dc4		       85 9a		      STA	COLUP3
   3292  1dc6				   .skipL0305
   3293  1dc6				   .L0306		;  if ticker  =  5 then COLUP3  =  $D6
   3294  1dc6
   3295  1dc6		       a5 e4		      LDA	ticker
   3296  1dc8		       c9 05		      CMP	#5
   3297  1dca		       d0 04		      BNE	.skipL0306
   3298  1dcc				   .condpart168
   3299  1dcc		       a9 d6		      LDA	#$D6
   3300  1dce		       85 9a		      STA	COLUP3
   3301  1dd0				   .skipL0306
   3302  1dd0				   .L0307		;  if ticker  =  6 then COLUP3  =  $E8
   3303  1dd0
   3304  1dd0		       a5 e4		      LDA	ticker
   3305  1dd2		       c9 06		      CMP	#6
   3306  1dd4		       d0 04		      BNE	.skipL0307
   3307  1dd6				   .condpart169
   3308  1dd6		       a9 e8		      LDA	#$E8
   3309  1dd8		       85 9a		      STA	COLUP3
   3310  1dda				   .skipL0307
   3311  1dda				   .L0308		;  if ticker  =  7 then COLUP3  =  $3E
   3312  1dda
   3313  1dda		       a5 e4		      LDA	ticker
   3314  1ddc		       c9 07		      CMP	#7
   3315  1dde		       d0 04		      BNE	.skipL0308
   3316  1de0				   .condpart170
   3317  1de0		       a9 3e		      LDA	#$3E
   3318  1de2		       85 9a		      STA	COLUP3
   3319  1de4				   .skipL0308
   3320  1de4				   .L0309		;  if ticker  =  8 then COLUP3  =  $DC
   3321  1de4
   3322  1de4		       a5 e4		      LDA	ticker
   3323  1de6		       c9 08		      CMP	#8
   3324  1de8		       d0 04		      BNE	.skipL0309
   3325  1dea				   .condpart171
   3326  1dea		       a9 dc		      LDA	#$DC
   3327  1dec		       85 9a		      STA	COLUP3
   3328  1dee				   .skipL0309
   3329  1dee				   .L0310		;  if ticker  =  9 then COLUP3  =  $48
   3330  1dee
   3331  1dee		       a5 e4		      LDA	ticker
   3332  1df0		       c9 09		      CMP	#9
   3333  1df2		       d0 04		      BNE	.skipL0310
   3334  1df4				   .condpart172
   3335  1df4		       a9 48		      LDA	#$48
   3336  1df6		       85 9a		      STA	COLUP3
   3337  1df8				   .skipL0310
   3338  1df8				   .L0311		;  if ticker  =  10 then COLUP3  =  $68
   3339  1df8
   3340  1df8		       a5 e4		      LDA	ticker
   3341  1dfa		       c9 0a		      CMP	#10
   3342  1dfc		       d0 04		      BNE	.skipL0311
   3343  1dfe				   .condpart173
   3344  1dfe		       a9 68		      LDA	#$68
   3345  1e00		       85 9a		      STA	COLUP3
   3346  1e02				   .skipL0311
   3347  1e02				   .L0312		;  if ticker  >  4 then player3MoveLeft  =  1 else player3MoveLeft  =	0
   3348  1e02
   3349  1e02		       a9 04		      LDA	#4
   3350  1e04		       c5 e4		      CMP	ticker
   3351  1e06		       b0 07		      BCS	.skipL0312
   3352  1e08				   .condpart174
   3353  1e08		       a9 01		      LDA	#1
   3354  1e0a		       85 dd		      STA	player3MoveLeft
   3355  1e0c		       4c 13 de 	      jmp	.skipelse7
   3356  1e0f				   .skipL0312
   3357  1e0f		       a9 00		      LDA	#0
   3358  1e11		       85 dd		      STA	player3MoveLeft
   3359  1e13				   .skipelse7
   3360  1e13				   .
   3361  1e13							; 
   3362  1e13
   3363  1e13				   .
   3364  1e13							; 
   3365  1e13
   3366  1e13				   .
   3367  1e13							; 
   3368  1e13
   3369  1e13				   .L0313		;  goto colorSetComplete
   3370  1e13
   3371  1e13		       4c d5 d1 	      jmp	.colorSetComplete
   3372  1e16
   3373  1e16				   .
   3374  1e16							; 
   3375  1e16
   3376  1e16				   .
   3377  1e16							; 
   3378  1e16
   3379  1e16				   .
   3380  1e16							; 
   3381  1e16
   3382  1e16				   .
   3383  1e16							; 
   3384  1e16
   3385  1e16				   .
   3386  1e16							; 
   3387  1e16
   3388  1e16				   .collisions
   3389  1e16							; collisions
   3390  1e16
   3391  1e16				   .L0314		;  player5x  =  missile0x  +  4
   3392  1e16
   3393  1e16		       a5 80		      LDA	missile0x
   3394  1e18		       18		      CLC
   3395  1e19		       69 04		      ADC	#4
   3396  1e1b		       85 89		      STA	player5x
   3397  1e1d				   .L0315		;  player5y  =  missile0y  +  9
   3398  1e1d
   3399  1e1d		       a5 8a		      LDA	missile0y
   3400  1e1f		       18		      CLC
   3401  1e20		       69 09		      ADC	#9
   3402  1e22		       85 92		      STA	player5y
   3403  1e24				   .L0316		;  missile0y  =  200
   3404  1e24
   3405  1e24		       a9 c8		      LDA	#200
   3406  1e26		       85 8a		      STA	missile0y
   3407  1e28				   .L0317		;  missile0x  =  200
   3408  1e28
   3409  1e28		       a9 c8		      LDA	#200
   3410  1e2a		       85 80		      STA	missile0x
   3411  1e2c				   .L0318		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   3412  1e2c
   3413  1e2c		       a9 0c		      LDA	#12
   3414  1e2e		       85 19		      STA	AUDV0
   3415  1e30		       a9 08		      LDA	#8
   3416  1e32		       85 15		      STA	AUDC0
   3417  1e34		       a9 1c		      LDA	#28
   3418  1e36		       85 17		      STA	AUDF0
   3419  1e38				   .L0319		;  score  =  score  +	bulletMultiplier
   3420  1e38
   3421  1e38		       f8		      SED
   3422  1e39		       18		      CLC
   3423  1e3a		       a5 d4		      LDA	score+2
   3424  1e3c		       65 e2		      ADC	bulletMultiplier
   3425  1e3e
   3426  1e3e		       85 d4		      STA	score+2
   3427  1e40		       a5 d3		      LDA	score+1
   3428  1e42		       69 00		      ADC	#0
   3429  1e44		       85 d3		      STA	score+1
   3430  1e46		       a5 d2		      LDA	score
   3431  1e48		       69 00		      ADC	#0
   3432  1e4a		       85 d2		      STA	score
   3433  1e4c		       d8		      CLD
   3434  1e4d				   .L0320		;  killCount  =  killCount  +	1
   3435  1e4d
   3436  1e4d		       e6 e3		      INC	killCount
   3437  1e4f				   .L0321		;  goto frameReset
   3438  1e4f
   3439  1e4f		       4c 5b d7 	      jmp	.frameReset
   3440  1e52
   3441  1e52				   .
   3442  1e52							; 
   3443  1e52
   3444  1e52				   .killPlayer
   3445  1e52							; killPlayer
   3446  1e52
   3447  1e52				   .L0322		;  if _resetTicker  <	1 then _resetTicker  =	1
   3448  1e52
   3449  1e52		       a5 ee		      LDA	_resetTicker
   3450  1e54		       c9 01		      CMP	#1
   3451  1e56		       b0 04		      BCS	.skipL0322
   3452  1e58				   .condpart175
   3453  1e58		       a9 01		      LDA	#1
   3454  1e5a		       85 ee		      STA	_resetTicker
   3455  1e5c				   .skipL0322
   3456  1e5c				   .L0323		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   3457  1e5c
   3458  1e5c		       24 ef		      BIT	_Bit6_Sequence_Switch
   3459  1e5e		       70 10		      BVS	.skipL0323
   3460  1e60				   .condpart176
   3461  1e60		       e6 d7		      INC	_P0_Luminosity
   3462  1e62		       a5 d7		      LDA	_P0_Luminosity
   3463  1e64		       c9 20		      CMP	#$20
   3464  1e66		       90 08		      BCC	.skip176then
   3465  1e68				   .condpart177
   3466  1e68		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3467  1e6a		       09 40		      ORA	#64
   3468  1e6c		       85 ef		      STA	_Bit6_Sequence_Switch
   3469  1e6e		       e6 ee		      INC	_resetTicker
   3470  1e70				   .skip176then
   3471  1e70				   .skipL0323
   3472  1e70				   .L0324		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   3473  1e70
   3474  1e70		       24 ef		      BIT	_Bit6_Sequence_Switch
   3475  1e72		       50 16		      BVC	.skipL0324
   3476  1e74				   .condpart178
   3477  1e74		       c6 d7		      DEC	_P0_Luminosity
   3478  1e76		       a9 12		      LDA	#$12
   3479  1e78		       c5 d7		      CMP	_P0_Luminosity
   3480  1e7a		       90 0e		      BCC	.skip178then
   3481  1e7c				   .condpart179
   3482  1e7c		       a9 00		      LDA	#0
   3483  1e7e		       85 d8		      STA	b
   3484  1e80		       a9 10		      LDA	#$10
   3485  1e82		       85 d7		      STA	_P0_Luminosity
   3486  1e84		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3487  1e86		       29 bf		      AND	#191
   3488  1e88		       85 ef		      STA	_Bit6_Sequence_Switch
   3489  1e8a				   .skip178then
   3490  1e8a				   .skipL0324
   3491  1e8a				   .L0325		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   3492  1e8a
   3493  1e8a		       a9 0a		      LDA	#10
   3494  1e8c		       85 1a		      STA	AUDV1
   3495  1e8e		       a9 08		      LDA	#8
   3496  1e90		       85 16		      STA	AUDC1
   3497  1e92		       a9 19		      LDA	#25
   3498  1e94		       85 18		      STA	AUDF1
   3499  1e96				   .L0326		;  COLUBK  =  _P0_Luminosity
   3500  1e96
   3501  1e96		       a5 d7		      LDA	_P0_Luminosity
   3502  1e98		       85 09		      STA	COLUBK
   3503  1e9a				   .
   3504  1e9a							; 
   3505  1e9a
   3506  1e9a				   .L0327		;  if _resetTicker  >	3 then goto resetGame
   3507  1e9a
   3508  1e9a		       a9 03		      LDA	#3
   3509  1e9c		       c5 ee		      CMP	_resetTicker
   3510  1e9e		       b0 03		      BCS	.skipL0327
   3511  1ea0				   .condpart180
   3512  1ea0		       4c a6 de 	      jmp	.resetGame
   3513  1ea3
   3514  1ea3				   .skipL0327
   3515  1ea3				   .
   3516  1ea3							; 
   3517  1ea3
   3518  1ea3				   .L0328		;  goto resetScreen
   3519  1ea3
   3520  1ea3		       4c b7 db 	      jmp	.resetScreen
   3521  1ea6
   3522  1ea6				   .
   3523  1ea6							; 
   3524  1ea6
   3525  1ea6				   .resetGame
   3526  1ea6							; resetGame
   3527  1ea6
   3528  1ea6				   .
   3529  1ea6							; 
   3530  1ea6
   3531  1ea6				   .L0329		;  player0x = 75
   3532  1ea6
   3533  1ea6		       a9 4b		      LDA	#75
   3534  1ea8		       85 84		      STA	player0x
   3535  1eaa				   .L0330		;  player0y = 30
   3536  1eaa
   3537  1eaa		       a9 1e		      LDA	#30
   3538  1eac		       85 8d		      STA	player0y
   3539  1eae				   .
   3540  1eae							; 
   3541  1eae
   3542  1eae				   .L0331		;  player1x = 76
   3543  1eae
   3544  1eae		       a9 4c		      LDA	#76
   3545  1eb0		       85 85		      STA	player1x
   3546  1eb2				   .L0332		;  player1y = 115
   3547  1eb2
   3548  1eb2		       a9 73		      LDA	#115
   3549  1eb4		       85 8e		      STA	player1y
   3550  1eb6				   .
   3551  1eb6							; 
   3552  1eb6
   3553  1eb6				   .L0333		;  player2x = 86
   3554  1eb6
   3555  1eb6		       a9 56		      LDA	#86
   3556  1eb8		       85 86		      STA	player2x
   3557  1eba				   .L0334		;  player2y = 105
   3558  1eba
   3559  1eba		       a9 69		      LDA	#105
   3560  1ebc		       85 8f		      STA	player2y
   3561  1ebe				   .
   3562  1ebe							; 
   3563  1ebe
   3564  1ebe				   .L0335		;  player3x = 96
   3565  1ebe
   3566  1ebe		       a9 60		      LDA	#96
   3567  1ec0		       85 87		      STA	player3x
   3568  1ec2				   .L0336		;  player3y = 120
   3569  1ec2
   3570  1ec2		       a9 78		      LDA	#120
   3571  1ec4		       85 90		      STA	player3y
   3572  1ec6				   .
   3573  1ec6							; 
   3574  1ec6
   3575  1ec6				   .L0337		;  player4x  =  116
   3576  1ec6
   3577  1ec6		       a9 74		      LDA	#116
   3578  1ec8		       85 88		      STA	player4x
   3579  1eca				   .L0338		;  player4y  =  100
   3580  1eca
   3581  1eca		       a9 64		      LDA	#100
   3582  1ecc		       85 91		      STA	player4y
   3583  1ece				   .
   3584  1ece							; 
   3585  1ece
   3586  1ece				   .L0339		;  missile0y = 100
   3587  1ece
   3588  1ece		       a9 64		      LDA	#100
   3589  1ed0		       85 8a		      STA	missile0y
   3590  1ed2				   .L0340		;  missile0x = 140
   3591  1ed2
   3592  1ed2		       a9 8c		      LDA	#140
   3593  1ed4		       85 80		      STA	missile0x
   3594  1ed6				   .
   3595  1ed6							; 
   3596  1ed6
   3597  1ed6				   .
   3598  1ed6							; 
   3599  1ed6
   3600  1ed6				   .L0341		;  _resetTicker  =  0
   3601  1ed6
   3602  1ed6		       a9 00		      LDA	#0
   3603  1ed8		       85 ee		      STA	_resetTicker
   3604  1eda				   .L0342		;  missile1y =  200
   3605  1eda
   3606  1eda		       a9 c8		      LDA	#200
   3607  1edc		       85 8b		      STA	missile1y
   3608  1ede				   .L0343		;  COLUBK  =  $0
   3609  1ede
   3610  1ede		       a9 00		      LDA	#$0
   3611  1ee0		       85 09		      STA	COLUBK
   3612  1ee2				   .L0344		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   3613  1ee2
   3614  1ee2		       a9 00		      LDA	#0
   3615  1ee4		       85 1a		      STA	AUDV1
   3616  1ee6		       85 16		      STA	AUDC1
   3617  1ee8		       85 18		      STA	AUDF1
   3618  1eea				   .
   3619  1eea							; 
   3620  1eea
   3621  1eea				   .
   3622  1eea							; 
   3623  1eea
   3624  1eea				   .L0345		;  gameReady  =  0
   3625  1eea
   3626  1eea		       a9 00		      LDA	#0
   3627  1eec		       85 f0		      STA	gameReady
   3628  1eee				   .L0346		;  firstFrame	=  0
   3629  1eee
   3630  1eee		       a9 00		      LDA	#0
   3631  1ef0		       85 e8		      STA	firstFrame
   3632  1ef2				   .L0347		;  altSprite  =  0
   3633  1ef2
   3634  1ef2		       a9 00		      LDA	#0
   3635  1ef4		       85 e6		      STA	altSprite
   3636  1ef6				   .
   3637  1ef6							; 
   3638  1ef6
   3639  1ef6				   .L0348		;  goto resetScreen
   3640  1ef6
   3641  1ef6		       4c b7 db 	      jmp	.resetScreen
   3642  1ef9
   3643  1ef9				   .
   3644  1ef9							; 
   3645  1ef9
   3646  1ef9				   .
   3647  1ef9							; 
   3648  1ef9
   3649  1ef9				   .L0349		;  bank 2
   3650  1ef9
   3651  1ef9					      if	ECHO1
      219 bytes of ROM space left in bank 1
   3652  1ef9					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3653  1ef9					      endif
   3654  1ef9		       00 01	   ECHO1      =	1
   3655  1fd4					      ORG	$1FF4-bscode_length
   3656  1fd4					      RORG	$DFF4-bscode_length
   3657  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3658  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3659  1fd6				  -	      stx	FASTFETCH
   3660  1fd6					      endif
   3661  1fd6		       9a		      txs
   3662  1fd7				  -	      if	bankswitch == 64
   3663  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3664  1fd7					      else
   3665  1fd7		       a9 f3		      lda	#>(start-1)
   3666  1fd9					      endif
   3667  1fd9		       48		      pha
   3668  1fda		       a9 f7		      lda	#<(start-1)
   3669  1fdc		       48		      pha
   3670  1fdd		       48		      pha
   3671  1fde		       8a		      txa
   3672  1fdf		       48		      pha
   3673  1fe0		       ba		      tsx
   3674  1fe1					      if	bankswitch != 64
   3675  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3676  1fe3		       2a		      rol
   3677  1fe4		       2a		      rol
   3678  1fe5		       2a		      rol
   3679  1fe6		       2a		      rol
   3680  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3681  1fe9		       aa		      tax
   3682  1fea		       e8		      inx
   3683  1feb				  -	      else
   3684  1feb				  -	      lda	4,x	; get high byte of return address
   3685  1feb				  -	      tay
   3686  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3687  1feb				  -	      sta	4,x
   3688  1feb				  -	      tya
   3689  1feb				  -	      lsr
   3690  1feb				  -	      lsr
   3691  1feb				  -	      lsr
   3692  1feb				  -	      lsr
   3693  1feb				  -	      tax
   3694  1feb				  -	      inx
   3695  1feb					      endif
   3696  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3697  1fee		       68		      pla
   3698  1fef		       aa		      tax
   3699  1ff0		       68		      pla
   3700  1ff1		       60		      rts
   3701  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3702  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3703  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3704  1ff2					      endif
   3705  1ffc					      ORG	$1FFC
   3706  1ffc					      RORG	$DFFC
   3707  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   3708  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   3709  2000					      ORG	$2000
   3710  2000					      RORG	$F000
   3711  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3712  2000
   3713  2000				   FineAdjustTableBegin
   3714  2000		       60		      .byte.b	%01100000	;left 6
   3715  2001		       50		      .byte.b	%01010000
   3716  2002		       40		      .byte.b	%01000000
   3717  2003		       30		      .byte.b	%00110000
   3718  2004		       20		      .byte.b	%00100000
   3719  2005		       10		      .byte.b	%00010000
   3720  2006		       00		      .byte.b	%00000000	;left 0
   3721  2007		       f0		      .byte.b	%11110000
   3722  2008		       e0		      .byte.b	%11100000
   3723  2009		       d0		      .byte.b	%11010000
   3724  200a		       c0		      .byte.b	%11000000
   3725  200b		       b0		      .byte.b	%10110000
   3726  200c		       a0		      .byte.b	%10100000
   3727  200d		       90		      .byte.b	%10010000
   3728  200e		       80		      .byte.b	%10000000	;right 8
   3729  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   3730  200f
   3731  200f				   PFStart
   3732  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   3733  2017				   blank_pf
   3734  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   3735  201f							; .byte 43,21,0,10,0,0,0,5
   3736  201f				  -	      ifconst	screenheight
   3737  201f				  -pfsub
   3738  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   3739  201f					      endif
   3740  201f							;--set initial P1 positions
   3741  201f				   multisprite_setup
   3742  201f		       a9 0f		      lda	#15
   3743  2021		       85 c4		      sta	pfheight
   3744  2023
   3745  2023		       a2 04		      ldx	#4
   3746  2025							; stx temp3
   3747  2025				   SetCopyHeight
   3748  2025							;	lda #76
   3749  2025							;	sta NewSpriteX,X
   3750  2025							;	lda CopyColorData,X
   3751  2025							;	sta NewCOLUP1,X
   3752  2025							;lda SpriteHeightTable,X
   3753  2025							; sta spriteheight,x
   3754  2025		       8a		      txa
   3755  2026		       95 9d		      sta	SpriteGfxIndex,X
   3756  2028		       95 f1		      sta	spritesort,X
   3757  202a		       ca		      dex
   3758  202b		       10 f8		      bpl	SetCopyHeight
   3759  202d
   3760  202d
   3761  202d
   3762  202d							; since we can't turn off pf, point PF to zeros here
   3763  202d		       a9 f0		      lda	#>blank_pf
   3764  202f		       85 be		      sta	PF2pointer+1
   3765  2031		       85 bc		      sta	PF1pointer+1
   3766  2033		       a9 17		      lda	#<blank_pf
   3767  2035		       85 bd		      sta	PF2pointer
   3768  2037		       85 bb		      sta	PF1pointer
   3769  2039		       60		      rts
   3770  203a
   3771  203a				   drawscreen
   3772  203a				  -	      ifconst	debugscore
   3773  203a				  -	      jsr	debugcycles
   3774  203a					      endif
   3775  203a
   3776  203a				   WaitForOverscanEnd
   3777  203a		       ad 84 02 	      lda	INTIM
   3778  203d		       30 fb		      bmi	WaitForOverscanEnd
   3779  203f
   3780  203f		       a9 02		      lda	#2
   3781  2041		       85 02		      sta	WSYNC
   3782  2043		       85 00		      sta	VSYNC
   3783  2045		       85 02		      sta	WSYNC
   3784  2047		       85 02		      sta	WSYNC
   3785  2049		       4a		      lsr
   3786  204a		       85 27		      sta	VDELBL
   3787  204c		       85 25		      sta	VDELP0
   3788  204e		       85 02		      sta	WSYNC
   3789  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   3790  2052				  -	      ifconst	overscan_time
   3791  2052				  -	      lda	#overscan_time+5+128
   3792  2052					      else
   3793  2052		       a9 aa		      lda	#42+128
   3794  2054					      endif
   3795  2054		       8d 96 02 	      sta	TIM64T
   3796  2057
   3797  2057							; run possible vblank bB code
   3798  2057				  -	      ifconst	vblank_bB_code
   3799  2057				  -	      jsr	vblank_bB_code
   3800  2057					      endif
   3801  2057
   3802  2057		       20 df f1 	      jsr	setscorepointers
   3803  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   3804  205d
   3805  205d							;-------------
   3806  205d
   3807  205d
   3808  205d
   3809  205d
   3810  205d
   3811  205d							;--position P0, M0, M1, BL
   3812  205d
   3813  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   3814  2060
   3815  2060							;--set up player 0 pointer
   3816  2060
   3817  2060		       c6 8d		      dec	player0y
   3818  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   3819  2064		       38		      sec
   3820  2065		       e5 8d		      sbc	player0y
   3821  2067		       18		      clc
   3822  2068		       65 b0		      adc	player0height
   3823  206a		       85 a2		      sta	player0pointer
   3824  206c
   3825  206c		       a5 8d		      lda	player0y
   3826  206e		       85 cf		      sta	P0Top
   3827  2070		       38		      sec
   3828  2071		       e5 b0		      sbc	player0height
   3829  2073		       18		      clc
   3830  2074		       69 80		      adc	#$80
   3831  2076		       85 a4		      sta	P0Bottom
   3832  2078
   3833  2078
   3834  2078							;--some final setup
   3835  2078
   3836  2078		       a2 04		      ldx	#4
   3837  207a		       a9 80		      lda	#$80
   3838  207c				   cycle74_HMCLR
   3839  207c		       95 20		      sta	HMP0,X
   3840  207e		       ca		      dex
   3841  207f		       10 fb		      bpl	cycle74_HMCLR
   3842  2081							;	sta HMCLR
   3843  2081
   3844  2081
   3845  2081		       a9 00		      lda	#0
   3846  2083		       85 0e		      sta	PF1
   3847  2085		       85 0f		      sta	PF2
   3848  2087		       85 1b		      sta	GRP0
   3849  2089		       85 1c		      sta	GRP1
   3850  208b
   3851  208b
   3852  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   3853  208e
   3854  208e				   WaitForVblankEnd
   3855  208e		       ad 84 02 	      lda	INTIM
   3856  2091		       30 fb		      bmi	WaitForVblankEnd
   3857  2093		       a9 00		      lda	#0
   3858  2095		       85 02		      sta	WSYNC
   3859  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   3860  2099		       85 2c		      sta	CXCLR
   3861  209b
   3862  209b
   3863  209b		       4c 60 f1 	      jmp	KernelRoutine
   3864  209e
   3865  209e
   3866  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   3867  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   3868  209e							;if you do not wish to write to P1 during this function, make
   3869  209e							;sure Y==0 before you call it.  This function will change Y, and A
   3870  209e							;will be the value put into HMxx when returned.
   3871  209e							;Call this function with at least 11 cycles left in the scanline 
   3872  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   3873  209e							;into the second scanline
   3874  209e		       38		      sec
   3875  209f		       85 02		      sta	WSYNC	;begin line 1
   3876  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   3877  20a4				   DivideBy15Loop
   3878  20a4		       e9 0f		      sbc	#15
   3879  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   3880  20a8
   3881  20a8		       a8		      tay		;+2	10/15/...60
   3882  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   3883  20ac
   3884  20ac							;	15
   3885  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   3886  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   3887  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3888  20b2		       85 2a		      sta	HMOVE	;+3
   3889  20b4		       60		      rts		;+6	 9
   3890  20b5
   3891  20b5							;-------------------------------------------------------------------------
   3892  20b5
   3893  20b5				   PrePositionAllObjects
   3894  20b5
   3895  20b5		       a2 04		      ldx	#4
   3896  20b7		       a5 82		      lda	ballx
   3897  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3898  20bc
   3899  20bc		       ca		      dex
   3900  20bd		       a5 81		      lda	missile1x
   3901  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3902  20c2
   3903  20c2		       ca		      dex
   3904  20c3		       a5 80		      lda	missile0x
   3905  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3906  20c8
   3907  20c8		       ca		      dex
   3908  20c9		       ca		      dex
   3909  20ca		       a5 84		      lda	player0x
   3910  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3911  20cf
   3912  20cf		       60		      rts
   3913  20d0
   3914  20d0
   3915  20d0							;-------------------------------------------------------------------------
   3916  20d0
   3917  20d0
   3918  20d0
   3919  20d0
   3920  20d0
   3921  20d0
   3922  20d0
   3923  20d0
   3924  20d0							;-------------------------------------------------------------------------
   3925  20d0
   3926  20d0
   3927  20d0				   KernelSetupSubroutine
   3928  20d0
   3929  20d0		       a2 04		      ldx	#4
   3930  20d2				   AdjustYValuesUpLoop
   3931  20d2		       b5 8e		      lda	NewSpriteY,X
   3932  20d4		       18		      clc
   3933  20d5		       69 02		      adc	#2
   3934  20d7		       95 8e		      sta	NewSpriteY,X
   3935  20d9		       ca		      dex
   3936  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   3937  20dc
   3938  20dc
   3939  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   3940  20de
   3941  20de		       b5 9d		      lda	SpriteGfxIndex,x
   3942  20e0		       a8		      tay
   3943  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   3944  20e4		       85 ce		      sta	RepoLine
   3945  20e6
   3946  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   3947  20e8		       a8		      tay
   3948  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   3949  20ec		       85 d0		      sta	temp6
   3950  20ee
   3951  20ee		       86 83		      stx	SpriteIndex
   3952  20f0
   3953  20f0
   3954  20f0
   3955  20f0		       a9 ff		      lda	#255
   3956  20f2		       85 a5		      sta	P1Bottom
   3957  20f4
   3958  20f4		       a5 8d		      lda	player0y
   3959  20f6				  -	      ifconst	screenheight
   3960  20f6				  -	      cmp	#screenheight+1
   3961  20f6					      else
   3962  20f6		       c9 59		      cmp	#$59
   3963  20f8					      endif
   3964  20f8		       90 04		      bcc	nottoohigh
   3965  20fa		       a5 a4		      lda	P0Bottom
   3966  20fc		       85 cf		      sta	P0Top
   3967  20fe
   3968  20fe
   3969  20fe
   3970  20fe				   nottoohigh
   3971  20fe		       60		      rts
   3972  20ff
   3973  20ff							;-------------------------------------------------------------------------
   3974  20ff
   3975  20ff
   3976  20ff
   3977  20ff
   3978  20ff
   3979  20ff							;*************************************************************************
   3980  20ff
   3981  20ff							;-------------------------------------------------------------------------
   3982  20ff							;-------------------------Data Below--------------------------------------
   3983  20ff							;-------------------------------------------------------------------------
   3984  20ff
   3985  20ff				   MaskTable
   3986  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   3987  2104
   3988  2104							; shove 6-digit score routine here
   3989  2104
   3990  2104				   sixdigscore
   3991  2104		       a9 00		      lda	#0
   3992  2106							;	sta COLUBK
   3993  2106		       85 0d		      sta	PF0
   3994  2108		       85 0e		      sta	PF1
   3995  210a		       85 0f		      sta	PF2
   3996  210c		       85 1f		      sta	ENABL
   3997  210e		       85 1d		      sta	ENAM0
   3998  2110		       85 1e		      sta	ENAM1
   3999  2112							;end of kernel here
   4000  2112
   4001  2112
   4002  2112							; 6 digit score routine
   4003  2112							; lda #0
   4004  2112							; sta PF1
   4005  2112							; sta PF2
   4006  2112							; tax
   4007  2112
   4008  2112		       85 02		      sta	WSYNC	;,x
   4009  2114
   4010  2114							;		  STA WSYNC ;first one, need one more
   4011  2114		       85 0b		      sta	REFP0
   4012  2116		       85 0c		      sta	REFP1
   4013  2118		       85 1b		      STA	GRP0
   4014  211a		       85 1c		      STA	GRP1
   4015  211c		       85 2b		      sta	HMCLR
   4016  211e
   4017  211e							; restore P0pointer
   4018  211e
   4019  211e		       a5 a2		      lda	player0pointer
   4020  2120		       18		      clc
   4021  2121		       65 8d		      adc	player0y
   4022  2123		       38		      sec
   4023  2124		       e5 b0		      sbc	player0height
   4024  2126		       85 a2		      sta	player0pointer
   4025  2128		       e6 8d		      inc	player0y
   4026  212a
   4027  212a				  -	      ifconst	vblank_time
   4028  212a				  -	      ifconst	screenheight
   4029  212a				  -	      if	screenheight == 84
   4030  212a				  -	      lda	#vblank_time+9+128+10
   4031  212a				  -	      else
   4032  212a				  -	      lda	#vblank_time+9+128+19
   4033  212a				  -	      endif
   4034  212a				  -	      else
   4035  212a				  -	      lda	#vblank_time+9+128
   4036  212a				  -	      endif
   4037  212a					      else
   4038  212a				  -	      ifconst	screenheight
   4039  212a				  -	      if	screenheight == 84
   4040  212a				  -	      lda	#52+128+10
   4041  212a				  -	      else
   4042  212a				  -	      lda	#52+128+19
   4043  212a				  -	      endif
   4044  212a					      else
   4045  212a		       a9 b4		      lda	#52+128
   4046  212c					      endif
   4047  212c					      endif
   4048  212c
   4049  212c		       8d 96 02 	      sta	TIM64T
   4050  212f					      ifconst	minikernel
   4051  212f		       20 b0 f9 	      jsr	minikernel
   4052  2132					      endif
   4053  2132				  -	      ifconst	noscore
   4054  2132				  -	      pla
   4055  2132				  -	      pla
   4056  2132				  -	      jmp	skipscore
   4057  2132					      endif
   4058  2132
   4059  2132							; score pointers contain:
   4060  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4061  2132							; swap lo2->temp1
   4062  2132							; swap lo4->temp3
   4063  2132							; swap lo6->temp5
   4064  2132
   4065  2132		       a5 ca		      lda	scorepointers+5
   4066  2134		       85 cf		      sta	temp5
   4067  2136		       a5 c6		      lda	scorepointers+1
   4068  2138		       85 cb		      sta	temp1
   4069  213a		       a5 c8		      lda	scorepointers+3
   4070  213c		       85 cd		      sta	temp3
   4071  213e
   4072  213e		       a9 ff		      lda	#>scoretable
   4073  2140		       85 c6		      sta	scorepointers+1
   4074  2142		       85 c8		      sta	scorepointers+3
   4075  2144		       85 ca		      sta	scorepointers+5
   4076  2146		       85 cc		      sta	temp2
   4077  2148		       85 ce		      sta	temp4
   4078  214a		       85 d0		      sta	temp6
   4079  214c
   4080  214c		       60		      rts
   4081  214d
   4082  214d
   4083  214d
   4084  214d							;-------------------------------------------------------------------------
   4085  214d							;----------------------Kernel Routine-------------------------------------
   4086  214d							;-------------------------------------------------------------------------
   4087  214d
   4088  214d
   4089  214d							;-------------------------------------------------------------------------
   4090  214d							; repeat $f147-*
   4091  214d							; brk
   4092  214d							; repend
   4093  214d							;	org $F240
   4094  214d
   4095  214d				   SwitchDrawP0K1		;	72
   4096  214d		       a5 a4		      lda	P0Bottom
   4097  214f		       85 cf		      sta	P0Top	;+6	 2
   4098  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4099  2154
   4100  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   4102  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4103  2159
   4104  2159				   SkipDrawP1K1 		;	11
   4105  2159		       a9 00		      lda	#0
   4106  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   4107  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   4108  2160
   4109  2160							;-------------------------------------------------------------------------
   4110  2160
   4111  2160				   KernelRoutine
   4112  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   4114  2166							; jsr wastetime ; waste 12 cycles
   4115  2166				  -	      else
   4116  2166				  -	      sleep	6
   4117  2166					      endif
   4118  2166		       ba		      tsx
   4119  2167		       86 f6		      stx	stack1
   4120  2169		       a2 1f		      ldx	#ENABL
   4121  216b		       9a		      txs		;+9	 9
   4122  216c
   4123  216c		       a2 00		      ldx	#0
   4124  216e		       a5 c4		      lda	pfheight
   4125  2170		       10 01		      bpl	asdhj
   4126  2172		       24		      .byte.b	$24
   4127  2173				   asdhj
   4128  2173		       aa		      tax
   4129  2174
   4130  2174							; ldx pfheight
   4131  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   4132  2177
   4133  2177				  -	      ifconst	screenheight
   4134  2177				  -	      sec
   4135  2177				  -	      if	screenheight == 84
   4136  2177				  -	      sbc	pfsub+1,x
   4137  2177				  -	      else
   4138  2177				  -	      sbc	pfsub,x
   4139  2177				  -	      endif
   4140  2177					      endif
   4141  2177
   4142  2177		       85 ba		      sta	pfpixelheight
   4143  2179
   4144  2179				  -	      ifconst	screenheight
   4145  2179				  -	      ldy	#screenheight
   4146  2179					      else
   4147  2179		       a0 58		      ldy	#88
   4148  217b					      endif
   4149  217b
   4150  217b							;	lda #$02
   4151  217b							;	sta COLUBK		;+5	18
   4152  217b
   4153  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   4155  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   4157  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   4159  2181		       c4 cf		      cpy	P0Top	;+3	69
   4160  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   4161  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   4162  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   4163  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   4164  218b				   BackFromSwitchDrawP0K1
   4165  218b
   4166  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   4167  218d							;		to a value greater than maximum Y value initially
   4168  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   4169  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   4170  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   4171  2194				   BackFromSkipDrawP1
   4172  2194
   4173  2194							;fuck	
   4174  2194		       84 cb		      sty	temp1
   4175  2196		       a4 ba		      ldy	pfpixelheight
   4176  2198		       b3 bb		      lax	(PF1pointer),y
   4177  219a		       86 0e		      stx	PF1	;+7	26
   4178  219c		       b1 bd		      lda	(PF2pointer),y
   4179  219e		       85 0f		      sta	PF2	;+7	33
   4180  21a0							;sleep 6
   4181  21a0		       86 b7		      stx	PF1temp2
   4182  21a2		       85 b9		      sta	PF2temp2
   4183  21a4		       88		      dey
   4184  21a5		       30 35		      bmi	pagewraphandler
   4185  21a7		       b1 bb		      lda	(PF1pointer),y
   4186  21a9				   cyclebalance
   4187  21a9		       85 b6		      sta	PF1temp1
   4188  21ab		       b1 bd		      lda	(PF2pointer),y
   4189  21ad		       85 b8		      sta	PF2temp1
   4190  21af		       a4 cb		      ldy	temp1
   4191  21b1
   4192  21b1		       a2 1f		      ldx	#ENABL
   4193  21b3		       9a		      txs
   4194  21b4		       c4 8c		      cpy	bally
   4195  21b6		       08		      php		;+6	39	VDEL ball
   4196  21b7
   4197  21b7
   4198  21b7		       c4 8b		      cpy	missile1y
   4199  21b9		       08		      php		;+6	71
   4200  21ba
   4201  21ba		       c4 8a		      cpy	missile0y
   4202  21bc		       08		      php		;+6	 1
   4203  21bd
   4204  21bd
   4205  21bd		       88		      dey		;+2	15
   4206  21be
   4207  21be		       c4 ce		      cpy	RepoLine	;+3	18
   4208  21c0		       f0 62		      beq	RepoKernel	;+2	20
   4209  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   4211  21c5
   4212  21c5				   newrepo		; since we have time here, store next repoline
   4213  21c5		       a6 83		      ldx	SpriteIndex
   4214  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   4215  21c9		       aa		      tax
   4216  21ca		       b5 8e		      lda	NewSpriteY,x
   4217  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   4219  21d0
   4220  21d0				   BackFromRepoKernel
   4221  21d0		       98		      tya		;+2	45
   4222  21d1		       25 c4		      and	pfheight	;+2	47
   4223  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   4224  21d5		       c6 ba		      dec	pfpixelheight
   4225  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   4226  21d9							;	bmi donewkernel		;+3	54
   4227  21d9							;	bne KernelLoopb+1		;+3	54
   4228  21d9
   4229  21d9				   donewkernel
   4230  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   4231  21dc
   4232  21dc				   pagewraphandler
   4233  21dc		       4c a9 f1 	      jmp	cyclebalance
   4234  21df
   4235  21df							;-------------------------------------------------------------------------
   4236  21df
   4237  21df							; room here for score?
   4238  21df
   4239  21df				   setscorepointers
   4240  21df		       a7 d4		      lax	score+2
   4241  21e1		       20 fb f1 	      jsr	scorepointerset
   4242  21e4		       84 ca		      sty	scorepointers+5
   4243  21e6		       86 c7		      stx	scorepointers+2
   4244  21e8		       a7 d3		      lax	score+1
   4245  21ea		       20 fb f1 	      jsr	scorepointerset
   4246  21ed		       84 c9		      sty	scorepointers+4
   4247  21ef		       86 c6		      stx	scorepointers+1
   4248  21f1		       a7 d2		      lax	score
   4249  21f3		       20 fb f1 	      jsr	scorepointerset
   4250  21f6		       84 c8		      sty	scorepointers+3
   4251  21f8		       86 c5		      stx	scorepointers
   4252  21fa				   wastetime
   4253  21fa		       60		      rts
   4254  21fb
   4255  21fb				   scorepointerset
   4256  21fb		       29 0f		      and	#$0F
   4257  21fd		       0a		      asl
   4258  21fe		       0a		      asl
   4259  21ff		       0a		      asl
   4260  2200		       69 74		      adc	#<scoretable
   4261  2202		       a8		      tay
   4262  2203		       8a		      txa
   4263  2204		       29 f0		      and	#$F0
   4264  2206		       4a		      lsr
   4265  2207		       69 74		      adc	#<scoretable
   4266  2209		       aa		      tax
   4267  220a		       60		      rts
   4268  220b							;	align 256
   4269  220b
   4270  220b				   SwitchDrawP0KR		;	45
   4271  220b		       a5 a4		      lda	P0Bottom
   4272  220d		       85 cf		      sta	P0Top	;+6	51
   4273  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4274  2212
   4275  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   4277  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4278  2217
   4279  2217							;-----------------------------------------------------------
   4280  2217
   4281  2217				   noUpdateXKR
   4282  2217		       a2 01		      ldx	#1
   4283  2219		       cc cf 00 	      cpy.w	P0Top
   4284  221c		       4c 2e f2 	      JMP	retXKR
   4285  221f
   4286  221f				   skipthis
   4287  221f		       a2 01		      ldx	#1
   4288  2221		       4c 70 f2 	      jmp	goback
   4289  2224
   4290  2224				   RepoKernel		;	22	crosses page boundary
   4291  2224		       98		      tya
   4292  2225		       25 c4		      and	pfheight	;+2	26
   4293  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   4294  2229		       aa		      tax
   4295  222a							;	dex			;+2	30
   4296  222a		       c6 ba		      dec	pfpixelheight
   4297  222c							;	stx Temp		;+3	35
   4298  222c							;	SLEEP 3
   4299  222c
   4300  222c		       c4 cf		      cpy	P0Top	;+3	42
   4301  222e				   retXKR
   4302  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   4303  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   4304  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   4305  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   4306  2236				   BackFromSwitchDrawP0KR
   4307  2236		       38		      sec		;+2	56
   4308  2237
   4309  2237
   4310  2237
   4311  2237		       b5 b8		      lda	PF2temp1,X
   4312  2239		       b4 b6		      ldy	PF1temp1,X
   4313  223b
   4314  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   4315  223d
   4316  223d		       85 0f		      sta	PF2	;+7	63
   4317  223f
   4318  223f		       b5 9d		      lda	SpriteGfxIndex,x
   4319  2241		       84 0e		      sty	PF1	;+7	70	too early?
   4320  2243		       aa		      tax
   4321  2244		       a9 00		      lda	#0
   4322  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   4323  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   4324  224a
   4325  224a				   DivideBy15LoopK		;	 6	(carry set above)
   4326  224a		       e9 0f		      sbc	#15
   4327  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   4328  224e
   4329  224e		       aa		      tax		;+2	12/17/...62
   4330  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   4331  2252
   4332  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   4333  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   4334  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   4335  2258							;sta HMOVE			;+3	 3
   4336  2258
   4337  2258		       a2 1f		      ldx	#ENABL
   4338  225a		       9a		      txs		;+4	25
   4339  225b		       a4 ce		      ldy	RepoLine	; restore y
   4340  225d		       c4 8c		      cpy	bally
   4341  225f		       08		      php		;+6	 9	VDEL ball
   4342  2260
   4343  2260		       c4 8b		      cpy	missile1y
   4344  2262		       08		      php		;+6	15
   4345  2263
   4346  2263		       c4 8a		      cpy	missile0y
   4347  2265		       08		      php		;+6	21
   4348  2266
   4349  2266
   4350  2266
   4351  2266
   4352  2266
   4353  2266							;15 cycles
   4354  2266		       98		      tya
   4355  2267		       25 c4		      and	pfheight
   4356  2269							;eor #1
   4357  2269		       29 fe		      and	#$FE
   4358  226b		       d0 b2		      bne	skipthis
   4359  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   4361  2270							;	sleep 2
   4362  2270				   goback
   4363  2270
   4364  2270		       88		      dey
   4365  2271		       c4 cf		      cpy	P0Top	;+3	52
   4366  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   4367  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   4368  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   4369  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   4370  227b				   BackFromSwitchDrawP0KV
   4371  227b
   4372  227b							; sleep 3
   4373  227b
   4374  227b		       b5 b8		      lda	PF2temp1,X
   4375  227d		       85 0f		      sta	PF2	;+7	 5
   4376  227f		       b5 b6		      lda	PF1temp1,X
   4377  2281		       85 0e		      sta	PF1	;+7	74 
   4378  2283		       85 2a		      sta	HMOVE
   4379  2285
   4380  2285		       a9 00		      lda	#0
   4381  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   4382  2289
   4383  2289		       a2 1f		      ldx	#ENABL
   4384  228b		       9a		      txs		;+4	 8
   4385  228c
   4386  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   4387  228e							;--now, set all new variables and return to main kernel loop
   4388  228e
   4389  228e
   4390  228e							;
   4391  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   4392  2290		       aa		      tax		;+2	33
   4393  2291							;
   4394  2291
   4395  2291
   4396  2291
   4397  2291		       b5 93		      lda	NewNUSIZ,X
   4398  2293		       85 05		      sta	NUSIZ1	;+7	20
   4399  2295		       85 0c		      sta	REFP1
   4400  2297		       b5 98		      lda	NewCOLUP1,X
   4401  2299		       85 07		      sta	COLUP1	;+7	27
   4402  229b
   4403  229b							;	lda SpriteGfxIndex,X	;+4	31
   4404  229b							;	tax				;+2	33
   4405  229b							;fuck2
   4406  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   4407  229d		       38		      sec		;+2	38
   4408  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   4409  22a0		       85 a5		      sta	P1Bottom	;+3	45
   4410  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   4412  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   4413  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   4414  22a9		       85 cc		      sta	P1display	;+3	55
   4415  22ab		       b5 ab		      lda	player1pointerhi,X
   4416  22ad		       85 cd		      sta	P1display+1	;+7	62
   4417  22af
   4418  22af
   4419  22af		       c4 8c		      cpy	bally
   4420  22b1		       08		      php		;+6	68	VDELed
   4421  22b2
   4422  22b2		       c4 8b		      cpy	missile1y
   4423  22b4		       08		      php		;+6	74
   4424  22b5
   4425  22b5		       c4 8a		      cpy	missile0y
   4426  22b7		       08		      php		;+6	 4
   4427  22b8
   4428  22b8
   4429  22b8
   4430  22b8							; lda SpriteGfxIndex-1,x
   4431  22b8							; sleep 3
   4432  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   4433  22ba							; tax
   4434  22ba							; lda NewSpriteY,x
   4435  22ba							; sta RepoLine
   4436  22ba
   4437  22ba							; 10 cycles below...
   4438  22ba		       10 05		      bpl	SetNextLine
   4439  22bc		       a9 ff		      lda	#255
   4440  22be		       4c c4 f2 	      jmp	SetLastLine
   4441  22c1				   SetNextLine
   4442  22c1							;	lda NewSpriteY-1,x
   4443  22c1		       ad d0 00 	      lda.w	temp6
   4444  22c4				   SetLastLine
   4445  22c4		       85 ce		      sta	RepoLine
   4446  22c6
   4447  22c6		       98		      tya
   4448  22c7		       25 c4		      and	pfheight
   4449  22c9		       d0 06		      bne	nodec
   4450  22cb		       c6 ba		      dec	pfpixelheight
   4451  22cd		       88		      dey		;+2	30
   4452  22ce
   4453  22ce							; 10 cycles 
   4454  22ce
   4455  22ce
   4456  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   4457  22d1
   4458  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   4460  22d3		       88		      dey
   4461  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   4462  22d7
   4463  22d7							;-------------------------------------------------------------------------
   4464  22d7
   4465  22d7
   4466  22d7				   SwitchDrawP0KV		;	69
   4467  22d7		       a5 a4		      lda	P0Bottom
   4468  22d9		       85 cf		      sta	P0Top	;+6	75
   4469  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4470  22de
   4471  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   4473  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4474  22e3
   4475  22e3							;-------------------------------------------------------------------------
   4476  22e3
   4477  22e3				   DoneWithKernel
   4478  22e3
   4479  22e3				   BottomOfKernelLoop
   4480  22e3
   4481  22e3		       85 02		      sta	WSYNC
   4482  22e5		       a6 f6		      ldx	stack1
   4483  22e7		       9a		      txs
   4484  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   4485  22eb
   4486  22eb
   4487  22eb		       85 02		      sta	WSYNC
   4488  22ed		       a2 00		      ldx	#0
   4489  22ef		       85 2b		      sta	HMCLR
   4490  22f1		       86 1b		      STx	GRP0
   4491  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4492  22f5
   4493  22f5		       a0 07		      LDY	#7
   4494  22f7		       84 25		      STy	VDELP0
   4495  22f9		       84 26		      STy	VDELP1
   4496  22fb		       a9 10		      LDA	#$10
   4497  22fd		       85 21		      STA	HMP1
   4498  22ff		       a5 d5		      LDA	scorecolor
   4499  2301		       85 06		      STA	COLUP0
   4500  2303		       85 07		      STA	COLUP1
   4501  2305
   4502  2305		       a9 03		      LDA	#$03
   4503  2307		       85 04		      STA	NUSIZ0
   4504  2309		       85 05		      STA	NUSIZ1
   4505  230b
   4506  230b		       85 10		      STA	RESP0
   4507  230d		       85 11		      STA	RESP1
   4508  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   4510  2314		       b1 c5		      lda	(scorepointers),y
   4511  2316		       85 1b		      sta	GRP0
   4512  2318				  -	      ifconst	pfscore
   4513  2318				  -	      lda	pfscorecolor
   4514  2318				  -	      sta	COLUPF
   4515  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   4517  231b					      endif
   4518  231b
   4519  231b		       85 2a		      STA	HMOVE
   4520  231d		       b1 cd		      lda	(scorepointers+8),y
   4521  231f							; sta WSYNC
   4522  231f							;sleep 2
   4523  231f		       4c 2c f3 	      jmp	beginscore
   4524  2322
   4525  2322
   4526  2322				   loop2
   4527  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   4528  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   4529  2326				  -	      ifconst	pfscore
   4530  2326				  -	      lda.w	pfscore1
   4531  2326				  -	      sta	PF1
   4532  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   4534  232a					      endif
   4535  232a							; cycle 0
   4536  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   4537  232c				   beginscore
   4538  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   4539  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   4540  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   4541  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   4542  2334		       9a		      txs
   4543  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   4545  2339				  -	      ifconst	pfscore
   4546  2339				  -	      lda	pfscore2
   4547  2339				  -	      sta	PF1
   4548  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   4550  233c					      endif
   4551  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   4552  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   4553  2340		       ba		      tsx
   4554  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   4555  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   4556  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   4557  2347		       88		      dey
   4558  2348		       10 d8		      bpl	loop2	;+2  60  180
   4559  234a		       a6 f6		      ldx	stack1
   4560  234c		       9a		      txs
   4561  234d
   4562  234d
   4563  234d							; lda scorepointers+1
   4564  234d		       a4 cb		      ldy	temp1
   4565  234f							; sta temp1
   4566  234f		       84 c6		      sty	scorepointers+1
   4567  2351
   4568  2351		       a9 00		      LDA	#0
   4569  2353		       85 1b		      STA	GRP0
   4570  2355		       85 1c		      STA	GRP1
   4571  2357		       85 0e		      sta	PF1
   4572  2359		       85 25		      STA	VDELP0
   4573  235b		       85 26		      STA	VDELP1	;do we need these
   4574  235d		       85 04		      STA	NUSIZ0
   4575  235f		       85 05		      STA	NUSIZ1
   4576  2361
   4577  2361							; lda scorepointers+3
   4578  2361		       a4 cd		      ldy	temp3
   4579  2363							; sta temp3
   4580  2363		       84 c8		      sty	scorepointers+3
   4581  2365
   4582  2365							; lda scorepointers+5
   4583  2365		       a4 cf		      ldy	temp5
   4584  2367							; sta temp5
   4585  2367		       84 ca		      sty	scorepointers+5
   4586  2369
   4587  2369
   4588  2369							;-------------------------------------------------------------------------
   4589  2369							;------------------------Overscan Routine---------------------------------
   4590  2369							;-------------------------------------------------------------------------
   4591  2369
   4592  2369				   OverscanRoutine
   4593  2369
   4594  2369
   4595  2369
   4596  2369				   skipscore
   4597  2369				  -	      ifconst	qtcontroller
   4598  2369				  -	      lda	qtcontroller
   4599  2369				  -	      lsr		; bit 0 in carry
   4600  2369				  -	      lda	#4
   4601  2369				  -	      ror		; carry into top of A
   4602  2369					      else
   4603  2369		       a9 02		      lda	#2
   4604  236b					      endif		; qtcontroller
   4605  236b		       85 02		      sta	WSYNC
   4606  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   4607  236f
   4608  236f
   4609  236f
   4610  236f
   4611  236f
   4612  236f							;-------------------------------------------------------------------------
   4613  236f							;----------------------------End Main Routines----------------------------
   4614  236f							;-------------------------------------------------------------------------
   4615  236f
   4616  236f
   4617  236f							;*************************************************************************
   4618  236f
   4619  236f							;-------------------------------------------------------------------------
   4620  236f							;----------------------Begin Subroutines----------------------------------
   4621  236f							;-------------------------------------------------------------------------
   4622  236f
   4623  236f
   4624  236f
   4625  236f
   4626  236f				   KernelCleanupSubroutine
   4627  236f
   4628  236f		       a2 04		      ldx	#4
   4629  2371				   AdjustYValuesDownLoop
   4630  2371		       b5 8e		      lda	NewSpriteY,X
   4631  2373		       38		      sec
   4632  2374		       e9 02		      sbc	#2
   4633  2376		       95 8e		      sta	NewSpriteY,X
   4634  2378		       ca		      dex
   4635  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   4636  237b
   4637  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   4639  237e							;rts
   4640  237e
   4641  237e				   SetupP1Subroutine
   4642  237e							; flickersort algorithm
   4643  237e							; count 4-0
   4644  237e							; table2=table1 (?)
   4645  237e							; detect overlap of sprites in table 2
   4646  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   4647  237e							; if no overlap, do regular sort in table 2 and table 1
   4648  237e				   fsstart
   4649  237e		       a2 ff		      ldx	#255
   4650  2380				   copytable
   4651  2380		       e8		      inx
   4652  2381		       b5 f1		      lda	spritesort,x
   4653  2383		       95 9d		      sta	SpriteGfxIndex,x
   4654  2385		       e0 04		      cpx	#4
   4655  2387		       d0 f7		      bne	copytable
   4656  2389
   4657  2389		       86 cd		      stx	temp3	; highest displayed sprite
   4658  238b		       ca		      dex
   4659  238c		       86 cc		      stx	temp2
   4660  238e				   sortloop
   4661  238e		       a6 cc		      ldx	temp2
   4662  2390		       b5 f1		      lda	spritesort,x
   4663  2392		       aa		      tax
   4664  2393		       b5 8e		      lda	NewSpriteY,x
   4665  2395		       85 cb		      sta	temp1
   4666  2397
   4667  2397		       a6 cc		      ldx	temp2
   4668  2399		       b5 f2		      lda	spritesort+1,x
   4669  239b		       aa		      tax
   4670  239c		       b5 8e		      lda	NewSpriteY,x
   4671  239e		       38		      sec
   4672  239f		       18		      clc
   4673  23a0		       e5 cb		      sbc	temp1
   4674  23a2		       90 0e		      bcc	largerXislower
   4675  23a4
   4676  23a4							; larger x is higher (A>=temp1)
   4677  23a4		       d5 b1		      cmp	spriteheight,x
   4678  23a6		       b0 2f		      bcs	countdown
   4679  23a8							; overlap with x+1>x
   4680  23a8							; 
   4681  23a8							; stick x at end of gfxtable, dec counter
   4682  23a8				   overlapping
   4683  23a8		       c6 cd		      dec	temp3
   4684  23aa		       a6 cc		      ldx	temp2
   4685  23ac							; inx
   4686  23ac		       20 eb f3 	      jsr	shiftnumbers
   4687  23af		       4c cd f3 	      jmp	skipswapGfxtable
   4688  23b2
   4689  23b2				   largerXislower		; (temp1>A)
   4690  23b2		       a8		      tay
   4691  23b3		       a6 cc		      ldx	temp2
   4692  23b5		       b5 f1		      lda	spritesort,x
   4693  23b7		       aa		      tax
   4694  23b8		       98		      tya
   4695  23b9		       49 ff		      eor	#$FF
   4696  23bb		       e9 01		      sbc	#1
   4697  23bd		       90 e9		      bcc	overlapping
   4698  23bf		       d5 b1		      cmp	spriteheight,x
   4699  23c1		       b0 0a		      bcs	notoverlapping
   4700  23c3
   4701  23c3		       c6 cd		      dec	temp3
   4702  23c5		       a6 cc		      ldx	temp2
   4703  23c7							; inx
   4704  23c7		       20 eb f3 	      jsr	shiftnumbers
   4705  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   4706  23cd				   notoverlapping
   4707  23cd							; ldx temp2 ; swap display table
   4708  23cd							; ldy SpriteGfxIndex+1,x
   4709  23cd							; lda SpriteGfxIndex,x
   4710  23cd							; sty SpriteGfxIndex,x
   4711  23cd							; sta SpriteGfxIndex+1,x 
   4712  23cd
   4713  23cd				   skipswapGfxtable
   4714  23cd		       a6 cc		      ldx	temp2	; swap sort table
   4715  23cf		       b4 f2		      ldy	spritesort+1,x
   4716  23d1		       b5 f1		      lda	spritesort,x
   4717  23d3		       94 f1		      sty	spritesort,x
   4718  23d5		       95 f2		      sta	spritesort+1,x
   4719  23d7
   4720  23d7				   countdown
   4721  23d7		       c6 cc		      dec	temp2
   4722  23d9		       10 b3		      bpl	sortloop
   4723  23db
   4724  23db				   checktoohigh
   4725  23db		       a6 cd		      ldx	temp3
   4726  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   4727  23df		       aa		      tax
   4728  23e0		       b5 8e		      lda	NewSpriteY,x
   4729  23e2				  -	      ifconst	screenheight
   4730  23e2				  -	      cmp	#screenheight-3
   4731  23e2					      else
   4732  23e2		       c9 55		      cmp	#$55
   4733  23e4					      endif
   4734  23e4		       90 04		      bcc	nonetoohigh
   4735  23e6		       c6 cd		      dec	temp3
   4736  23e8		       d0 f1		      bne	checktoohigh
   4737  23ea
   4738  23ea				   nonetoohigh
   4739  23ea		       60		      rts
   4740  23eb
   4741  23eb
   4742  23eb				   shiftnumbers
   4743  23eb							; stick current x at end, shift others down
   4744  23eb							; if x=4: don't do anything
   4745  23eb							; if x=3: swap 3 and 4
   4746  23eb							; if x=2: 2=3, 3=4, 4=2
   4747  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   4748  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   4749  23eb							; ldy SpriteGfxIndex,x
   4750  23eb				   swaploop
   4751  23eb		       e0 04		      cpx	#4
   4752  23ed		       f0 08		      beq	shiftdone
   4753  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   4754  23f1		       95 9d		      sta	SpriteGfxIndex,x
   4755  23f3		       e8		      inx
   4756  23f4		       4c eb f3 	      jmp	swaploop
   4757  23f7				   shiftdone
   4758  23f7							; sty SpriteGfxIndex,x
   4759  23f7		       60		      rts
   4760  23f8
   4761  23f8				  -	      ifconst	debugscore
   4762  23f8				  -debugcycles
   4763  23f8				  -	      ldx	#14
   4764  23f8				  -	      lda	INTIM	; display # cycles left in the score
   4765  23f8				  -
   4766  23f8				  -	      ifconst	mincycles
   4767  23f8				  -	      lda	mincycles
   4768  23f8				  -	      cmp	INTIM
   4769  23f8				  -	      lda	mincycles
   4770  23f8				  -	      bcc	nochange
   4771  23f8				  -	      lda	INTIM
   4772  23f8				  -	      sta	mincycles
   4773  23f8				  -nochange
   4774  23f8				  -	      endif
   4775  23f8				  -
   4776  23f8				  -			;   cmp #$2B
   4777  23f8				  -			;   bcs no_cycles_left
   4778  23f8				  -	      bmi	cycles_left
   4779  23f8				  -	      ldx	#64
   4780  23f8				  -	      eor	#$ff	;make negative
   4781  23f8				  -cycles_left
   4782  23f8				  -	      stx	scorecolor
   4783  23f8				  -	      and	#$7f	; clear sign bit
   4784  23f8				  -	      tax
   4785  23f8				  -	      lda	scorebcd,x
   4786  23f8				  -	      sta	score+2
   4787  23f8				  -	      lda	scorebcd1,x
   4788  23f8				  -	      sta	score+1
   4789  23f8				  -	      rts
   4790  23f8				  -scorebcd
   4791  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4792  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4793  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4794  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4795  23f8				  -scorebcd1
   4796  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4797  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4798  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4799  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4800  23f8					      endif
   4801  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4802  23f8
   4803  23f8				   start
   4804  23f8		       78		      sei
   4805  23f9		       d8		      cld
   4806  23fa		       a0 00		      ldy	#0
   4807  23fc		       a5 d0		      lda	$D0
   4808  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   4809  2400		       d0 07		      bne	MachineIs2600
   4810  2402		       a5 d1		      lda	$D1
   4811  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   4812  2406		       d0 01		      bne	MachineIs2600
   4813  2408		       88		      dey
   4814  2409				   MachineIs2600
   4815  2409		       a2 00		      ldx	#0
   4816  240b		       8a		      txa
   4817  240c				   clearmem
   4818  240c		       e8		      inx
   4819  240d		       9a		      txs
   4820  240e		       48		      pha
   4821  240f		       d0 fb		      bne	clearmem
   4822  2411		       84 cb		      sty	temp1
   4823  2413				  -	      ifnconst	multisprite
   4824  2413				  -	      ifconst	pfrowheight
   4825  2413				  -	      lda	#pfrowheight
   4826  2413				  -	      else
   4827  2413				  -	      ifconst	pfres
   4828  2413				  -	      lda	#(96/pfres)
   4829  2413				  -	      else
   4830  2413				  -	      lda	#8
   4831  2413				  -	      endif
   4832  2413				  -	      endif
   4833  2413				  -	      sta	playfieldpos
   4834  2413					      endif
   4835  2413		       a2 05		      ldx	#5
   4836  2415				   initscore
   4837  2415		       a9 74		      lda	#<scoretable
   4838  2417		       95 c5		      sta	scorepointers,x
   4839  2419		       ca		      dex
   4840  241a		       10 f9		      bpl	initscore
   4841  241c		       a9 01		      lda	#1
   4842  241e		       85 0a		      sta	CTRLPF
   4843  2420		       0d 84 02 	      ora	INTIM
   4844  2423		       85 d6		      sta	rand
   4845  2425
   4846  2425					      ifconst	multisprite
   4847  2425		       20 1f f0 	      jsr	multisprite_setup
   4848  2428					      endif
   4849  2428
   4850  2428				  -	      ifnconst	bankswitch
   4851  2428				  -	      jmp	game
   4852  2428					      else
   4853  2428		       a9 d0		      lda	#>(game-1)
   4854  242a		       48		      pha
   4855  242b		       a9 ff		      lda	#<(game-1)
   4856  242d		       48		      pha
   4857  242e		       48		      pha
   4858  242f		       48		      pha
   4859  2430		       a2 01		      ldx	#1
   4860  2432		       4c eb ff 	      jmp	BS_jsr
   4861  2435					      endif
   4862  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4863  2435
   4864  2435							;standard routines needed for pretty much all games
   4865  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   4866  2435							; repositioning code and score pointer setup moved to overscan
   4867  2435							; read switches, joysticks now compiler generated (more efficient)
   4868  2435
   4869  2435				   randomize
   4870  2435		       a5 d6		      lda	rand
   4871  2437		       4a		      lsr
   4872  2438				  -	      ifconst	rand16
   4873  2438				  -	      rol	rand16
   4874  2438					      endif
   4875  2438		       90 02		      bcc	noeor
   4876  243a		       49 b4		      eor	#$B4
   4877  243c				   noeor
   4878  243c		       85 d6		      sta	rand
   4879  243e				  -	      ifconst	rand16
   4880  243e				  -	      eor	rand16
   4881  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   4883  2441							;bB.asm
   4884  2441							; bB.asm file is split here
   4885  2441				   .L0350		;  asm
   4886  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_48x2_1
     10  2441					      draw_48x2_2
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_48x2_1
      1  2482		       00 01	   mk_48x1_on =	1
      2  2482		       00 01	   mk_48x2_1_on =	1
      3  2482		       20 9e f5 	      jsr	draw_bmp_48x2_1
      0  2485					      draw_48x2_2
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x2_2_on =	1
      3  2485		       20 fe f5 	      jsr	draw_bmp_48x2_2
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 5e f6 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 24 f7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e				  -	      ifconst	mk_48x1_1_on
     75  259e				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  259e					      endif		;mk_48x1_1_on
     77  259e
     78  259e				  -	      ifconst	mk_48x1_2_on
     79  259e				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  259e					      endif		;mk_48x1_2_on
     81  259e
     82  259e				  -	      ifconst	mk_48x1_3_on
     83  259e				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  259e					      endif		;mk_48x1_3_on
     85  259e
     86  259e					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x2_1
      3  259e
      4  259e		       a0 17		      ldy	#(bmp_48x2_1_window-1)
      5  25a0
      6  25a0		       a9 37		      lda	#<(bmp_48x2_1_colors-1)
      7  25a2		       18		      clc
      8  25a3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
      9  25a5				  -	      ifconst	bmp_48x2_1_index
     10  25a5				  -	      sec
     11  25a5				  -	      sbc	bmp_48x2_1_index
     12  25a5					      endif
     13  25a5		       85 c1		      sta	aux5+0
     14  25a7		       a9 f7		      lda	#>(bmp_48x2_1_colors-1)
     15  25a9		       85 c2		      sta	aux5+1
     16  25ab
     17  25ab		       c8		      iny
     18  25ac		       b1 c1		      lda	(aux5),y
     19  25ae		       88		      dey
     20  25af		       85 06		      sta	COLUP0	;3
     21  25b1		       85 07		      sta	COLUP1	;3
     22  25b3		       85 2b		      sta	HMCLR	;3
     23  25b5
     24  25b5							;setup score pointers to point at my bitmap slices instead
     25  25b5		       a9 50		      lda	#<bmp_48x2_1_00
     26  25b7		       18		      clc
     27  25b8		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     28  25ba				  -	      ifconst	bmp_48x2_1_index
     29  25ba				  -	      sec
     30  25ba				  -	      sbc	bmp_48x2_1_index
     31  25ba					      endif
     32  25ba		       85 c5		      sta	scorepointers+0
     33  25bc		       a9 f7		      lda	#>bmp_48x2_1_00
     34  25be		       85 c6		      sta	scorepointers+1
     35  25c0
     36  25c0
     37  25c0		       a9 68		      lda	#<bmp_48x2_1_01
     38  25c2		       18		      clc
     39  25c3		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     40  25c5				  -	      ifconst	bmp_48x2_1_index
     41  25c5				  -	      sec
     42  25c5				  -	      sbc	bmp_48x2_1_index
     43  25c5					      endif
     44  25c5		       85 c7		      sta	scorepointers+2
     45  25c7		       a9 f7		      lda	#>bmp_48x2_1_01
     46  25c9		       85 c8		      sta	scorepointers+3
     47  25cb
     48  25cb
     49  25cb		       a9 80		      lda	#<bmp_48x2_1_02
     50  25cd		       18		      clc
     51  25ce		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     52  25d0				  -	      ifconst	bmp_48x2_1_index
     53  25d0				  -	      sec
     54  25d0				  -	      sbc	bmp_48x2_1_index
     55  25d0					      endif
     56  25d0		       85 c9		      sta	scorepointers+4
     57  25d2		       a9 f7		      lda	#>bmp_48x2_1_02
     58  25d4		       85 ca		      sta	scorepointers+5
     59  25d6
     60  25d6
     61  25d6		       a9 98		      lda	#<bmp_48x2_1_03
     62  25d8		       18		      clc
     63  25d9		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     64  25db				  -	      ifconst	bmp_48x2_1_index
     65  25db				  -	      sec
     66  25db				  -	      sbc	bmp_48x2_1_index
     67  25db					      endif
     68  25db		       85 cb		      sta	scorepointers+6
     69  25dd		       a9 f7		      lda	#>bmp_48x2_1_03
     70  25df		       85 cc		      sta	scorepointers+7
     71  25e1
     72  25e1
     73  25e1		       a9 b0		      lda	#<bmp_48x2_1_04
     74  25e3		       18		      clc
     75  25e4		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     76  25e6				  -	      ifconst	bmp_48x2_1_index
     77  25e6				  -	      sec
     78  25e6				  -	      sbc	bmp_48x2_1_index
     79  25e6					      endif
     80  25e6		       85 cd		      sta	scorepointers+8
     81  25e8		       a9 f7		      lda	#>bmp_48x2_1_04
     82  25ea		       85 ce		      sta	scorepointers+9
     83  25ec
     84  25ec
     85  25ec		       a9 c8		      lda	#<bmp_48x2_1_05
     86  25ee		       18		      clc
     87  25ef		       69 00		      adc	#(#bmp_48x2_1_height-#bmp_48x2_1_window)
     88  25f1				  -	      ifconst	bmp_48x2_1_index
     89  25f1				  -	      sec
     90  25f1				  -	      sbc	bmp_48x2_1_index
     91  25f1					      endif
     92  25f1		       85 cf		      sta	scorepointers+10
     93  25f3		       a9 f7		      lda	#>bmp_48x2_1_05
     94  25f5		       85 d0		      sta	scorepointers+11
     95  25f7
     96  25f7		       a9 00		      lda	#0	;two line kernel
     97  25f9		       85 bf		      sta	aux3
     98  25fb
     99  25fb		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  25fe
------- FILE titlescreen/asm/titlescreen.asm
     88  25fe					      endif		;mk_48x2_1_on
     89  25fe
     90  25fe					      ifconst	mk_48x2_2_on
------- FILE titlescreen/asm/48x2_2_kernel.asm LEVEL 3 PASS 3
      0  25fe					      include	"titlescreen/asm/48x2_2_kernel.asm"
      1  25fe
      2  25fe				   draw_bmp_48x2_2
      3  25fe
      4  25fe		       a0 2f		      ldy	#(bmp_48x2_2_window-1)
      5  2600
      6  2600		       a9 00		      lda	#<(bmp_48x2_2_colors-1)
      7  2602		       18		      clc
      8  2603		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
      9  2605				  -	      ifconst	bmp_48x2_2_index
     10  2605				  -	      sec
     11  2605				  -	      sbc	bmp_48x2_2_index
     12  2605					      endif
     13  2605		       85 c1		      sta	aux5+0
     14  2607		       a9 f8		      lda	#>(bmp_48x2_2_colors-1)
     15  2609		       85 c2		      sta	aux5+1
     16  260b
     17  260b		       c8		      iny
     18  260c		       b1 c1		      lda	(aux5),y
     19  260e		       88		      dey
     20  260f		       85 06		      sta	COLUP0	;3
     21  2611		       85 07		      sta	COLUP1	;3
     22  2613		       85 2b		      sta	HMCLR	;3
     23  2615
     24  2615							;setup score pointers to point at my bitmap slices instead
     25  2615		       a9 31		      lda	#<bmp_48x2_2_00
     26  2617		       18		      clc
     27  2618		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     28  261a				  -	      ifconst	bmp_48x2_2_index
     29  261a				  -	      sec
     30  261a				  -	      sbc	bmp_48x2_2_index
     31  261a					      endif
     32  261a		       85 c5		      sta	scorepointers+0
     33  261c		       a9 f8		      lda	#>bmp_48x2_2_00
     34  261e		       85 c6		      sta	scorepointers+1
     35  2620
     36  2620
     37  2620		       a9 61		      lda	#<bmp_48x2_2_01
     38  2622		       18		      clc
     39  2623		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     40  2625				  -	      ifconst	bmp_48x2_2_index
     41  2625				  -	      sec
     42  2625				  -	      sbc	bmp_48x2_2_index
     43  2625					      endif
     44  2625		       85 c7		      sta	scorepointers+2
     45  2627		       a9 f8		      lda	#>bmp_48x2_2_01
     46  2629		       85 c8		      sta	scorepointers+3
     47  262b
     48  262b
     49  262b		       a9 91		      lda	#<bmp_48x2_2_02
     50  262d		       18		      clc
     51  262e		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     52  2630				  -	      ifconst	bmp_48x2_2_index
     53  2630				  -	      sec
     54  2630				  -	      sbc	bmp_48x2_2_index
     55  2630					      endif
     56  2630		       85 c9		      sta	scorepointers+4
     57  2632		       a9 f8		      lda	#>bmp_48x2_2_02
     58  2634		       85 ca		      sta	scorepointers+5
     59  2636
     60  2636
     61  2636		       a9 c1		      lda	#<bmp_48x2_2_03
     62  2638		       18		      clc
     63  2639		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     64  263b				  -	      ifconst	bmp_48x2_2_index
     65  263b				  -	      sec
     66  263b				  -	      sbc	bmp_48x2_2_index
     67  263b					      endif
     68  263b		       85 cb		      sta	scorepointers+6
     69  263d		       a9 f8		      lda	#>bmp_48x2_2_03
     70  263f		       85 cc		      sta	scorepointers+7
     71  2641
     72  2641
     73  2641		       a9 00		      lda	#<bmp_48x2_2_04
     74  2643		       18		      clc
     75  2644		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     76  2646				  -	      ifconst	bmp_48x2_2_index
     77  2646				  -	      sec
     78  2646				  -	      sbc	bmp_48x2_2_index
     79  2646					      endif
     80  2646		       85 cd		      sta	scorepointers+8
     81  2648		       a9 f9		      lda	#>bmp_48x2_2_04
     82  264a		       85 ce		      sta	scorepointers+9
     83  264c
     84  264c
     85  264c		       a9 30		      lda	#<bmp_48x2_2_05
     86  264e		       18		      clc
     87  264f		       69 00		      adc	#(#bmp_48x2_2_height-#bmp_48x2_2_window)
     88  2651				  -	      ifconst	bmp_48x2_2_index
     89  2651				  -	      sec
     90  2651				  -	      sbc	bmp_48x2_2_index
     91  2651					      endif
     92  2651		       85 cf		      sta	scorepointers+10
     93  2653		       a9 f9		      lda	#>bmp_48x2_2_05
     94  2655		       85 d0		      sta	scorepointers+11
     95  2657
     96  2657		       a9 00		      lda	#0	;two line kernel
     97  2659		       85 bf		      sta	aux3
     98  265b
     99  265b		       4c 8f f4 	      jmp	draw_bmp_48x1adv
    100  265e
------- FILE titlescreen/asm/titlescreen.asm
     92  265e					      endif		;mk_48x2_2_on
     93  265e
     94  265e				  -	      ifconst	mk_48x2_3_on
     95  265e				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  265e					      endif		;mk_48x2_3_on
     97  265e
     98  265e				  -	      ifconst	mk_96x2_1_on
     99  265e				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    100  265e					      endif		;mk_96x2_1_on
    101  265e
    102  265e				  -	      ifconst	mk_96x2_2_on
    103  265e				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  265e					      endif		;mk_96x2_2_on
    105  265e
    106  265e				  -	      ifconst	mk_96x2_3_on
    107  265e				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  265e					      endif		;mk_96x2_3_on
    109  265e
    110  265e					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  265e					      include	"titlescreen/asm/score_kernel.asm"
      1  265e							; The batari Basic score kernel
      2  265e							; This minikernel is not under the same license as the rest of the 
      3  265e							; titlescreen code. Refer to the bB license before you use this in
      4  265e							; a non-bB program.
      5  265e
      6  265e				   draw_score_display
      7  265e
      8  265e		       a7 d4		      lax	score+2
      9  2660		       20 14 f7 	      jsr	miniscorepointerset
     10  2663		       84 ca		      sty	scorepointers+5
     11  2665		       86 c7		      stx	scorepointers+2
     12  2667		       a7 d3		      lax	score+1
     13  2669		       20 14 f7 	      jsr	miniscorepointerset
     14  266c		       84 c9		      sty	scorepointers+4
     15  266e		       86 c6		      stx	scorepointers+1
     16  2670		       a7 d2		      lax	score
     17  2672		       20 14 f7 	      jsr	miniscorepointerset
     18  2675		       84 c8		      sty	scorepointers+3
     19  2677		       86 c5		      stx	scorepointers
     20  2679
     21  2679		       a5 c6		      lda	scorepointers+1
     22  267b		       85 cb		      sta	temp1
     23  267d
     24  267d		       a5 c8		      lda	scorepointers+3
     25  267f		       85 cd		      sta	temp3
     26  2681
     27  2681
     28  2681		       85 2b		      sta	HMCLR
     29  2683		       ba		      tsx
     30  2684		       86 f6		      stx	stack1
     31  2686							;ldx #$10
     32  2686		       a2 20		      ldx	#$20
     33  2688		       86 20		      stx	HMP0
     34  268a
     35  268a		       a2 00		      ldx	#0
     36  268c		       85 02		      sta	WSYNC
     37  268e		       86 1b		      STx	GRP0
     38  2690		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  2692
     40  2692		       a5 ca		      lda	scorepointers+5
     41  2694		       95 cf		      sta	temp5,x
     42  2696		       a9 f9		      lda	#>miniscoretable
     43  2698		       85 c6		      sta	scorepointers+1
     44  269a		       85 c8		      sta	scorepointers+3
     45  269c		       95 ca		      sta	scorepointers+5,x
     46  269e		       95 cc		      sta	temp2,x
     47  26a0		       95 ce		      sta	temp4,x
     48  26a2		       95 d0		      sta	temp6,x
     49  26a4
     50  26a4
     51  26a4		       a0 07		      LDY	#7
     52  26a6		       85 10		      STA	RESP0
     53  26a8		       85 11		      STA	RESP1
     54  26aa
     55  26aa
     56  26aa		       a9 03		      LDA	#$03
     57  26ac		       85 04		      STA	NUSIZ0
     58  26ae		       95 05		      STA	NUSIZ1,x
     59  26b0		       85 25		      STA	VDELP0
     60  26b2		       85 26		      STA	VDELP1
     61  26b4							;LDA #$20
     62  26b4		       a9 30		      LDA	#$30
     63  26b6		       85 21		      STA	HMP1
     64  26b8		       a5 d5		      LDA	scorecolor
     65  26ba		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  26bc				  -	      ifconst	score_kernel_fade
     67  26bc				  -	      and	score_kernel_fade
     68  26bc					      endif
     69  26bc
     70  26bc		       85 06		      STA	COLUP0
     71  26be		       85 07		      STA	COLUP1
     72  26c0				  -	      ifconst	scorefade
     73  26c0				  -	      STA	stack2	; scorefade
     74  26c0					      endif
     75  26c0		       b1 c5		      lda	(scorepointers),y
     76  26c2		       85 1b		      sta	GRP0
     77  26c4		       b1 cd		      lda	(scorepointers+8),y
     78  26c6		       85 02		      sta	WSYNC
      0  26c8					      sleep	2
      1  26c8				   .CYCLES    SET	2
      2  26c8
      3  26c8				  -	      IF	.CYCLES < 2
      4  26c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26c8				  -	      ERR
      6  26c8					      ENDIF
      7  26c8
      8  26c8				  -	      IF	.CYCLES & 1
      9  26c8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26c8				  -	      nop	0
     11  26c8				  -	      ELSE
     12  26c8				  -	      bit	VSYNC
     13  26c8				  -	      ENDIF
     14  26c8				  -.CYCLES    SET	.CYCLES - 3
     15  26c8					      ENDIF
     16  26c8
     17  26c8					      REPEAT	.CYCLES / 2
     18  26c8		       ea		      nop
     19  26c9					      REPEND
     80  26c9		       4c d7 f6 	      jmp	beginscoreloop
     81  26cc
     82  26cc				  -	      if	((<*)>$d4)
     83  26cc				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  26cc					      endif
     85  26cc
     86  26cc				   scoreloop2
     87  26cc				  -	      ifconst	scorefade
     88  26cc				  -	      lda	stack2
     89  26cc				  -	      sta	COLUP0
     90  26cc				  -	      sta	COLUP1
     91  26cc					      else
      0  26cc					      sleep	9
      1  26cc				   .CYCLES    SET	9
      2  26cc
      3  26cc				  -	      IF	.CYCLES < 2
      4  26cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26cc				  -	      ERR
      6  26cc					      ENDIF
      7  26cc
      8  26cc					      IF	.CYCLES & 1
      9  26cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26cc		       04 00		      nop	0
     11  26ce				  -	      ELSE
     12  26ce				  -	      bit	VSYNC
     13  26ce					      ENDIF
     14  26ce				   .CYCLES    SET	.CYCLES - 3
     15  26ce					      ENDIF
     16  26ce
     17  26ce					      REPEAT	.CYCLES / 2
     18  26ce		       ea		      nop
     17  26ce					      REPEND
     18  26cf		       ea		      nop
     17  26cf					      REPEND
     18  26d0		       ea		      nop
     19  26d1					      REPEND
     93  26d1					      endif
     94  26d1		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  26d3		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  26d5		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  26d7							; cycle 0
     98  26d7				   beginscoreloop
     99  26d7		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  26d9		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  26db		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  26dd		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  26df		       9a		      txs
    104  26e0		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  26e2
    106  26e2				  -	      ifconst	scorefade
    107  26e2				  -	      dec	stack2
    108  26e2					      else
      0  26e2					      sleep	5
      1  26e2				   .CYCLES    SET	5
      2  26e2
      3  26e2				  -	      IF	.CYCLES < 2
      4  26e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e2				  -	      ERR
      6  26e2					      ENDIF
      7  26e2
      8  26e2					      IF	.CYCLES & 1
      9  26e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e2		       04 00		      nop	0
     11  26e4				  -	      ELSE
     12  26e4				  -	      bit	VSYNC
     13  26e4					      ENDIF
     14  26e4				   .CYCLES    SET	.CYCLES - 3
     15  26e4					      ENDIF
     16  26e4
     17  26e4					      REPEAT	.CYCLES / 2
     18  26e4		       ea		      nop
     19  26e5					      REPEND
    110  26e5					      endif
      0  26e5					      sleep	2
      1  26e5				   .CYCLES    SET	2
      2  26e5
      3  26e5				  -	      IF	.CYCLES < 2
      4  26e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26e5				  -	      ERR
      6  26e5					      ENDIF
      7  26e5
      8  26e5				  -	      IF	.CYCLES & 1
      9  26e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26e5				  -	      nop	0
     11  26e5				  -	      ELSE
     12  26e5				  -	      bit	VSYNC
     13  26e5				  -	      ENDIF
     14  26e5				  -.CYCLES    SET	.CYCLES - 3
     15  26e5					      ENDIF
     16  26e5
     17  26e5					      REPEAT	.CYCLES / 2
     18  26e5		       ea		      nop
     19  26e6					      REPEND
    112  26e6
    113  26e6		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  26e8		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  26ea		       ba		      tsx
    116  26eb		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  26ed		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  26ef
    119  26ef		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  26f1		       88		      dey
    121  26f2		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  26f4
    123  26f4
    124  26f4		       a6 f6		      ldx	stack1
    125  26f6		       9a		      txs
    126  26f7		       a4 cb		      ldy	temp1
    127  26f9		       84 c6		      sty	scorepointers+1
    128  26fb
    129  26fb		       a9 00		      LDA	#0
    130  26fd		       85 0e		      sta	PF1
    131  26ff		       85 1b		      STA	GRP0
    132  2701		       85 1c		      STA	GRP1
    133  2703		       85 25		      STA	VDELP0
    134  2705		       85 26		      STA	VDELP1
    135  2707		       85 04		      STA	NUSIZ0
    136  2709		       85 05		      STA	NUSIZ1
    137  270b
    138  270b		       a4 cd		      ldy	temp3
    139  270d		       84 c8		      sty	scorepointers+3
    140  270f
    141  270f		       a4 cf		      ldy	temp5
    142  2711		       84 ca		      sty	scorepointers+5
    143  2713		       60		      rts
    144  2714
    145  2714				   miniscorepointerset
    146  2714		       29 0f		      and	#$0F
    147  2716		       0a		      asl
    148  2717		       0a		      asl
    149  2718		       0a		      asl
    150  2719		       69 60		      adc	#<miniscoretable
    151  271b		       a8		      tay
    152  271c		       8a		      txa
    153  271d		       29 f0		      and	#$F0
    154  271f		       4a		      lsr
    155  2720		       69 60		      adc	#<miniscoretable
    156  2722		       aa		      tax
    157  2723		       60		      rts
    158  2724
------- FILE titlescreen/asm/titlescreen.asm
    112  2724					      endif		;mk_score_on
    113  2724
    114  2724				  -	      ifconst	mk_gameselect_on
    115  2724				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2724					      endif		;mk_gameselect_on
    117  2724
    118  2724				   PFWAIT
    119  2724		       ad 84 02 	      lda	INTIM
    120  2727		       d0 fb		      bne	PFWAIT
    121  2729
    122  2729				   OVERSCAN
    123  2729							;lda #35+128 
    124  2729
    125  2729					      ifnconst	overscan_time
    126  2729		       a9 a3		      lda	#35+128
    127  272b				  -	      else
    128  272b				  -	      lda	#overscan_time+128-3-1
    129  272b					      endif
    130  272b
    131  272b
    132  272b		       8d 96 02 	      sta	TIM64T
    133  272e		       a9 c2		      lda	#%11000010
    134  2730		       85 02		      sta	WSYNC
    135  2732		       85 01		      sta	VBLANK
      0  2734					      RETURN
      1  2734				  -	      ifnconst	bankswitch
      2  2734				  -	      rts
      3  2734					      else
      4  2734		       4c dd ff 	      jmp	BS_return
      5  2737					      endif
    137  2737
    138  2737				  -	      ifconst	mk_48x1_1_on
    139  2737				  -	      include	"titlescreen/48x1_1_image.asm"
    140  2737					      endif
    141  2737				  -	      ifconst	mk_48x1_2_on
    142  2737				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2737					      endif
    144  2737				  -	      ifconst	mk_48x1_3_on
    145  2737				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2737					      endif
    147  2737
    148  2737					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2737					      include	"titlescreen/48x2_1_image.asm"
      1  2737
      2  2737							;*** The height of the displayed data...
      3  2737		       00 18	   bmp_48x2_1_window =	24
      4  2737
      5  2737							;*** The height of the bitmap data. This can be larger than
      6  2737							;*** the displayed data height, if you are scrolling or animating
      7  2737							;*** the data...
      8  2737		       00 18	   bmp_48x2_1_height =	24
      9  2737
     10  2737				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2737				  -	      align	256
     12  2737					      endif
     13  2737		       00		      BYTE.b	$00	; leave this here!
     14  2738
     15  2738
     16  2738							;*** this is the color of each line in the bitmap data
     17  2738				   bmp_48x2_1_colors
     18  2738		       40		      BYTE.b	$40
     19  2739		       40		      BYTE.b	$40
     20  273a		       40		      BYTE.b	$40
     21  273b		       40		      BYTE.b	$40
     22  273c		       1f		      BYTE.b	$1f
     23  273d		       1f		      BYTE.b	$1f
     24  273e		       1f		      BYTE.b	$1f
     25  273f		       1f		      BYTE.b	$1f
     26  2740		       1f		      BYTE.b	$1f
     27  2741		       1f		      BYTE.b	$1f
     28  2742		       1f		      BYTE.b	$1f
     29  2743		       1f		      BYTE.b	$1f
     30  2744		       1f		      BYTE.b	$1f
     31  2745		       1f		      BYTE.b	$1f
     32  2746		       1f		      BYTE.b	$1f
     33  2747		       1f		      BYTE.b	$1f
     34  2748		       1f		      BYTE.b	$1f
     35  2749		       1f		      BYTE.b	$1f
     36  274a		       1f		      BYTE.b	$1f
     37  274b		       1f		      BYTE.b	$1f
     38  274c		       1f		      BYTE.b	$1f
     39  274d		       1f		      BYTE.b	$1f
     40  274e		       1f		      BYTE.b	$1f
     41  274f		       1f		      BYTE.b	$1f
     42  2750
     43  2750				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     44  2750				  -	      align	256
     45  2750					      endif
     46  2750
     47  2750				   bmp_48x2_1_00
     48  2750
     49  2750		       00		      BYTE.b	%00000000
     50  2751		       00		      BYTE.b	%00000000
     51  2752		       00		      BYTE.b	%00000000
     52  2753		       7f		      BYTE.b	%01111111
     53  2754		       00		      BYTE.b	%00000000
     54  2755		       79		      BYTE.b	%01111001
     55  2756		       1d		      BYTE.b	%00011101
     56  2757		       1d		      BYTE.b	%00011101
     57  2758		       79		      BYTE.b	%01111001
     58  2759		       41		      BYTE.b	%01000001
     59  275a		       78		      BYTE.b	%01111000
     60  275b		       00		      BYTE.b	%00000000
     61  275c		       00		      BYTE.b	%00000000
     62  275d		       00		      BYTE.b	%00000000
     63  275e		       00		      BYTE.b	%00000000
     64  275f		       00		      BYTE.b	%00000000
     65  2760		       00		      BYTE.b	%00000000
     66  2761		       00		      BYTE.b	%00000000
     67  2762		       01		      BYTE.b	%00000001
     68  2763		       03		      BYTE.b	%00000011
     69  2764		       07		      BYTE.b	%00000111
     70  2765		       00		      BYTE.b	%00000000
     71  2766		       00		      BYTE.b	%00000000
     72  2767		       00		      BYTE.b	%00000000
     73  2768
     74  2768				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2768				  -	      align	256
     76  2768					      endif
     77  2768
     78  2768				   bmp_48x2_1_01
     79  2768
     80  2768		       00		      BYTE.b	%00000000
     81  2769		       00		      BYTE.b	%00000000
     82  276a		       00		      BYTE.b	%00000000
     83  276b		       ff		      BYTE.b	%11111111
     84  276c		       00		      BYTE.b	%00000000
     85  276d		       30		      BYTE.b	%00110000
     86  276e		       31		      BYTE.b	%00110001
     87  276f		       f2		      BYTE.b	%11110010
     88  2770		       32		      BYTE.b	%00110010
     89  2771		       32		      BYTE.b	%00110010
     90  2772		       e2		      BYTE.b	%11100010
     91  2773		       00		      BYTE.b	%00000000
     92  2774		       00		      BYTE.b	%00000000
     93  2775		       00		      BYTE.b	%00000000
     94  2776		       11		      BYTE.b	%00010001
     95  2777		       32		      BYTE.b	%00110010
     96  2778		       70		      BYTE.b	%01110000
     97  2779		       f1		      BYTE.b	%11110001
     98  277a		       f3		      BYTE.b	%11110011
     99  277b		       f3		      BYTE.b	%11110011
    100  277c		       f1		      BYTE.b	%11110001
    101  277d		       00		      BYTE.b	%00000000
    102  277e		       00		      BYTE.b	%00000000
    103  277f		       00		      BYTE.b	%00000000
    104  2780
    105  2780				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    106  2780				  -	      align	256
    107  2780					      endif
    108  2780
    109  2780				   bmp_48x2_1_02
    110  2780
    111  2780		       00		      BYTE.b	%00000000
    112  2781		       00		      BYTE.b	%00000000
    113  2782		       00		      BYTE.b	%00000000
    114  2783		       ff		      BYTE.b	%11111111
    115  2784		       00		      BYTE.b	%00000000
    116  2785		       87		      BYTE.b	%10000111
    117  2786		       c3		      BYTE.b	%11000011
    118  2787		       63		      BYTE.b	%01100011
    119  2788		       63		      BYTE.b	%01100011
    120  2789		       63		      BYTE.b	%01100011
    121  278a		       67		      BYTE.b	%01100111
    122  278b		       00		      BYTE.b	%00000000
    123  278c		       00		      BYTE.b	%00000000
    124  278d		       00		      BYTE.b	%00000000
    125  278e		       c4		      BYTE.b	%11000100
    126  278f		       e5		      BYTE.b	%11100101
    127  2790		       e7		      BYTE.b	%11100111
    128  2791		       c7		      BYTE.b	%11000111
    129  2792		       05		      BYTE.b	%00000101
    130  2793		       05		      BYTE.b	%00000101
    131  2794		       c4		      BYTE.b	%11000100
    132  2795		       00		      BYTE.b	%00000000
    133  2796		       00		      BYTE.b	%00000000
    134  2797		       00		      BYTE.b	%00000000
    135  2798
    136  2798				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    137  2798				  -	      align	256
    138  2798					      endif
    139  2798
    140  2798				   bmp_48x2_1_03
    141  2798
    142  2798		       00		      BYTE.b	%00000000
    143  2799		       00		      BYTE.b	%00000000
    144  279a		       00		      BYTE.b	%00000000
    145  279b		       ff		      BYTE.b	%11111111
    146  279c		       00		      BYTE.b	%00000000
    147  279d		       8f		      BYTE.b	%10001111
    148  279e		       19		      BYTE.b	%00011001
    149  279f		       19		      BYTE.b	%00011001
    150  27a0		       19		      BYTE.b	%00011001
    151  27a1		       19		      BYTE.b	%00011001
    152  27a2		       8f		      BYTE.b	%10001111
    153  27a3		       00		      BYTE.b	%00000000
    154  27a4		       00		      BYTE.b	%00000000
    155  27a5		       00		      BYTE.b	%00000000
    156  27a6		       c6		      BYTE.b	%11000110
    157  27a7		       86		      BYTE.b	%10000110
    158  27a8		       06		      BYTE.b	%00000110
    159  27a9		       0f		      BYTE.b	%00001111
    160  27aa		       99		      BYTE.b	%10011001
    161  27ab		       99		      BYTE.b	%10011001
    162  27ac		       d9		      BYTE.b	%11011001
    163  27ad		       00		      BYTE.b	%00000000
    164  27ae		       00		      BYTE.b	%00000000
    165  27af		       00		      BYTE.b	%00000000
    166  27b0
    167  27b0				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    168  27b0				  -	      align	256
    169  27b0					      endif
    170  27b0
    171  27b0				   bmp_48x2_1_04
    172  27b0
    173  27b0		       00		      BYTE.b	%00000000
    174  27b1		       00		      BYTE.b	%00000000
    175  27b2		       00		      BYTE.b	%00000000
    176  27b3		       ff		      BYTE.b	%11111111
    177  27b4		       00		      BYTE.b	%00000000
    178  27b5		       1c		      BYTE.b	%00011100
    179  27b6		       26		      BYTE.b	%00100110
    180  27b7		       26		      BYTE.b	%00100110
    181  27b8		       26		      BYTE.b	%00100110
    182  27b9		       26		      BYTE.b	%00100110
    183  27ba		       26		      BYTE.b	%00100110
    184  27bb		       00		      BYTE.b	%00000000
    185  27bc		       00		      BYTE.b	%00000000
    186  27bd		       00		      BYTE.b	%00000000
    187  27be		       20		      BYTE.b	%00100000
    188  27bf		       30		      BYTE.b	%00110000
    189  27c0		       38		      BYTE.b	%00111000
    190  27c1		       3c		      BYTE.b	%00111100
    191  27c2		       3e		      BYTE.b	%00111110
    192  27c3		       3f		      BYTE.b	%00111111
    193  27c4		       3f		      BYTE.b	%00111111
    194  27c5		       00		      BYTE.b	%00000000
    195  27c6		       00		      BYTE.b	%00000000
    196  27c7		       00		      BYTE.b	%00000000
    197  27c8
    198  27c8				  -	      if	>. != >[.+(bmp_48x2_1_height)]
    199  27c8				  -	      align	256
    200  27c8					      endif
    201  27c8
    202  27c8				   bmp_48x2_1_05
    203  27c8
    204  27c8		       00		      BYTE.b	%00000000
    205  27c9		       00		      BYTE.b	%00000000
    206  27ca		       00		      BYTE.b	%00000000
    207  27cb		       fc		      BYTE.b	%11111100
    208  27cc		       00		      BYTE.b	%00000000
    209  27cd		       4c		      BYTE.b	%01001100
    210  27ce		       50		      BYTE.b	%01010000
    211  27cf		       78		      BYTE.b	%01111000
    212  27d0		       4c		      BYTE.b	%01001100
    213  27d1		       4c		      BYTE.b	%01001100
    214  27d2		       78		      BYTE.b	%01111000
    215  27d3		       00		      BYTE.b	%00000000
    216  27d4		       00		      BYTE.b	%00000000
    217  27d5		       00		      BYTE.b	%00000000
    218  27d6		       00		      BYTE.b	%00000000
    219  27d7		       00		      BYTE.b	%00000000
    220  27d8		       00		      BYTE.b	%00000000
    221  27d9		       00		      BYTE.b	%00000000
    222  27da		       00		      BYTE.b	%00000000
    223  27db		       00		      BYTE.b	%00000000
    224  27dc		       80		      BYTE.b	%10000000
    225  27dd		       00		      BYTE.b	%00000000
    226  27de		       00		      BYTE.b	%00000000
    227  27df		       00		      BYTE.b	%00000000
    228  27e0
------- FILE titlescreen/asm/titlescreen.asm
    150  27e0					      endif
    151  27e0					      ifconst	mk_48x2_2_on
------- FILE titlescreen/48x2_2_image.asm LEVEL 3 PASS 3
      0  27e0					      include	"titlescreen/48x2_2_image.asm"
      1  27e0
      2  27e0							;*** The height of the displayed data...
      3  27e0		       00 30	   bmp_48x2_2_window =	48
      4  27e0
      5  27e0							;*** The height of the bitmap data. This can be larger than
      6  27e0							;*** the displayed data height, if you are scrolling or animating
      7  27e0							;*** the data...
      8  27e0		       00 30	   bmp_48x2_2_height =	48
      9  27e0
     10  27e0					      if	>. != >[.+(bmp_48x2_2_height)]
     11  2800		       00 00 00 00*	      align	256
     12  2800					      endif
     13  2800		       00		      BYTE.b	$00	; leave this here!
     14  2801
     15  2801
     16  2801							;*** this is the color of each line in the bitmap data
     17  2801				   bmp_48x2_2_colors
     18  2801		       10		      BYTE.b	$10
     19  2802		       10		      BYTE.b	$10
     20  2803		       10		      BYTE.b	$10
     21  2804		       10		      BYTE.b	$10
     22  2805		       10		      BYTE.b	$10
     23  2806		       10		      BYTE.b	$10
     24  2807		       10		      BYTE.b	$10
     25  2808		       10		      BYTE.b	$10
     26  2809		       10		      BYTE.b	$10
     27  280a		       10		      BYTE.b	$10
     28  280b		       10		      BYTE.b	$10
     29  280c		       10		      BYTE.b	$10
     30  280d		       10		      BYTE.b	$10
     31  280e		       10		      BYTE.b	$10
     32  280f		       10		      BYTE.b	$10
     33  2810		       10		      BYTE.b	$10
     34  2811		       10		      BYTE.b	$10
     35  2812		       10		      BYTE.b	$10
     36  2813		       10		      BYTE.b	$10
     37  2814		       0c		      BYTE.b	$0c
     38  2815		       0c		      BYTE.b	$0c
     39  2816		       0c		      BYTE.b	$0c
     40  2817		       0c		      BYTE.b	$0c
     41  2818		       0c		      BYTE.b	$0c
     42  2819		       0c		      BYTE.b	$0c
     43  281a		       0c		      BYTE.b	$0c
     44  281b		       0c		      BYTE.b	$0c
     45  281c		       0c		      BYTE.b	$0c
     46  281d		       0c		      BYTE.b	$0c
     47  281e		       0c		      BYTE.b	$0c
     48  281f		       0c		      BYTE.b	$0c
     49  2820		       0c		      BYTE.b	$0c
     50  2821		       0c		      BYTE.b	$0c
     51  2822		       0c		      BYTE.b	$0c
     52  2823		       0c		      BYTE.b	$0c
     53  2824		       0c		      BYTE.b	$0c
     54  2825		       0c		      BYTE.b	$0c
     55  2826		       0c		      BYTE.b	$0c
     56  2827		       0c		      BYTE.b	$0c
     57  2828		       0c		      BYTE.b	$0c
     58  2829		       0c		      BYTE.b	$0c
     59  282a		       0c		      BYTE.b	$0c
     60  282b		       0c		      BYTE.b	$0c
     61  282c		       0c		      BYTE.b	$0c
     62  282d		       0c		      BYTE.b	$0c
     63  282e		       0c		      BYTE.b	$0c
     64  282f		       0c		      BYTE.b	$0c
     65  2830		       0c		      BYTE.b	$0c
     66  2831
     67  2831				  -	      if	>. != >[.+(bmp_48x2_2_height)]
     68  2831				  -	      align	256
     69  2831					      endif
     70  2831
     71  2831				   bmp_48x2_2_00
     72  2831
     73  2831		       80		      BYTE.b	%10000000
     74  2832		       ee		      BYTE.b	%11101110
     75  2833		       ee		      BYTE.b	%11101110
     76  2834		       80		      BYTE.b	%10000000
     77  2835		       ee		      BYTE.b	%11101110
     78  2836		       ee		      BYTE.b	%11101110
     79  2837		       80		      BYTE.b	%10000000
     80  2838		       ee		      BYTE.b	%11101110
     81  2839		       ee		      BYTE.b	%11101110
     82  283a		       80		      BYTE.b	%10000000
     83  283b		       80		      BYTE.b	%10000000
     84  283c		       ee		      BYTE.b	%11101110
     85  283d		       ee		      BYTE.b	%11101110
     86  283e		       80		      BYTE.b	%10000000
     87  283f		       ee		      BYTE.b	%11101110
     88  2840		       ee		      BYTE.b	%11101110
     89  2841		       ff		      BYTE.b	%11111111
     90  2842		       00		      BYTE.b	%00000000
     91  2843		       00		      BYTE.b	%00000000
     92  2844		       00		      BYTE.b	%00000000
     93  2845		       00		      BYTE.b	%00000000
     94  2846		       00		      BYTE.b	%00000000
     95  2847		       00		      BYTE.b	%00000000
     96  2848		       00		      BYTE.b	%00000000
     97  2849		       00		      BYTE.b	%00000000
     98  284a		       04		      BYTE.b	%00000100
     99  284b		       00		      BYTE.b	%00000000
    100  284c		       00		      BYTE.b	%00000000
    101  284d		       00		      BYTE.b	%00000000
    102  284e		       00		      BYTE.b	%00000000
    103  284f		       00		      BYTE.b	%00000000
    104  2850		       00		      BYTE.b	%00000000
    105  2851		       00		      BYTE.b	%00000000
    106  2852		       00		      BYTE.b	%00000000
    107  2853		       00		      BYTE.b	%00000000
    108  2854		       00		      BYTE.b	%00000000
    109  2855		       00		      BYTE.b	%00000000
    110  2856		       00		      BYTE.b	%00000000
    111  2857		       00		      BYTE.b	%00000000
    112  2858		       00		      BYTE.b	%00000000
    113  2859		       00		      BYTE.b	%00000000
    114  285a		       00		      BYTE.b	%00000000
    115  285b		       00		      BYTE.b	%00000000
    116  285c		       10		      BYTE.b	%00010000
    117  285d		       00		      BYTE.b	%00000000
    118  285e		       00		      BYTE.b	%00000000
    119  285f		       00		      BYTE.b	%00000000
    120  2860		       00		      BYTE.b	%00000000
    121  2861
    122  2861				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    123  2861				  -	      align	256
    124  2861					      endif
    125  2861
    126  2861				   bmp_48x2_2_01
    127  2861
    128  2861		       3a		      BYTE.b	%00111010
    129  2862		       e0		      BYTE.b	%11100000
    130  2863		       e0		      BYTE.b	%11100000
    131  2864		       3a		      BYTE.b	%00111010
    132  2865		       ff		      BYTE.b	%11111111
    133  2866		       e0		      BYTE.b	%11100000
    134  2867		       20		      BYTE.b	%00100000
    135  2868		       e0		      BYTE.b	%11100000
    136  2869		       e0		      BYTE.b	%11100000
    137  286a		       20		      BYTE.b	%00100000
    138  286b		       20		      BYTE.b	%00100000
    139  286c		       e0		      BYTE.b	%11100000
    140  286d		       e0		      BYTE.b	%11100000
    141  286e		       20		      BYTE.b	%00100000
    142  286f		       e0		      BYTE.b	%11100000
    143  2870		       e0		      BYTE.b	%11100000
    144  2871		       e0		      BYTE.b	%11100000
    145  2872		       00		      BYTE.b	%00000000
    146  2873		       00		      BYTE.b	%00000000
    147  2874		       00		      BYTE.b	%00000000
    148  2875		       00		      BYTE.b	%00000000
    149  2876		       00		      BYTE.b	%00000000
    150  2877		       00		      BYTE.b	%00000000
    151  2878		       00		      BYTE.b	%00000000
    152  2879		       00		      BYTE.b	%00000000
    153  287a		       00		      BYTE.b	%00000000
    154  287b		       00		      BYTE.b	%00000000
    155  287c		       00		      BYTE.b	%00000000
    156  287d		       00		      BYTE.b	%00000000
    157  287e		       00		      BYTE.b	%00000000
    158  287f		       00		      BYTE.b	%00000000
    159  2880		       00		      BYTE.b	%00000000
    160  2881		       00		      BYTE.b	%00000000
    161  2882		       00		      BYTE.b	%00000000
    162  2883		       00		      BYTE.b	%00000000
    163  2884		       00		      BYTE.b	%00000000
    164  2885		       00		      BYTE.b	%00000000
    165  2886		       00		      BYTE.b	%00000000
    166  2887		       00		      BYTE.b	%00000000
    167  2888		       08		      BYTE.b	%00001000
    168  2889		       00		      BYTE.b	%00000000
    169  288a		       00		      BYTE.b	%00000000
    170  288b		       00		      BYTE.b	%00000000
    171  288c		       00		      BYTE.b	%00000000
    172  288d		       00		      BYTE.b	%00000000
    173  288e		       00		      BYTE.b	%00000000
    174  288f		       00		      BYTE.b	%00000000
    175  2890		       00		      BYTE.b	%00000000
    176  2891
    177  2891				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    178  2891				  -	      align	256
    179  2891					      endif
    180  2891
    181  2891				   bmp_48x2_2_02
    182  2891
    183  2891		       fb		      BYTE.b	%11111011
    184  2892		       3b		      BYTE.b	%00111011
    185  2893		       3b		      BYTE.b	%00111011
    186  2894		       fb		      BYTE.b	%11111011
    187  2895		       f1		      BYTE.b	%11110001
    188  2896		       11		      BYTE.b	%00010001
    189  2897		       11		      BYTE.b	%00010001
    190  2898		       1b		      BYTE.b	%00011011
    191  2899		       1b		      BYTE.b	%00011011
    192  289a		       1b		      BYTE.b	%00011011
    193  289b		       1b		      BYTE.b	%00011011
    194  289c		       11		      BYTE.b	%00010001
    195  289d		       11		      BYTE.b	%00010001
    196  289e		       11		      BYTE.b	%00010001
    197  289f		       11		      BYTE.b	%00010001
    198  28a0		       1b		      BYTE.b	%00011011
    199  28a1		       1b		      BYTE.b	%00011011
    200  28a2		       1b		      BYTE.b	%00011011
    201  28a3		       1f		      BYTE.b	%00011111
    202  28a4		       00		      BYTE.b	%00000000
    203  28a5		       00		      BYTE.b	%00000000
    204  28a6		       00		      BYTE.b	%00000000
    205  28a7		       00		      BYTE.b	%00000000
    206  28a8		       00		      BYTE.b	%00000000
    207  28a9		       00		      BYTE.b	%00000000
    208  28aa		       00		      BYTE.b	%00000000
    209  28ab		       00		      BYTE.b	%00000000
    210  28ac		       00		      BYTE.b	%00000000
    211  28ad		       80		      BYTE.b	%10000000
    212  28ae		       00		      BYTE.b	%00000000
    213  28af		       00		      BYTE.b	%00000000
    214  28b0		       00		      BYTE.b	%00000000
    215  28b1		       00		      BYTE.b	%00000000
    216  28b2		       01		      BYTE.b	%00000001
    217  28b3		       00		      BYTE.b	%00000000
    218  28b4		       00		      BYTE.b	%00000000
    219  28b5		       00		      BYTE.b	%00000000
    220  28b6		       00		      BYTE.b	%00000000
    221  28b7		       00		      BYTE.b	%00000000
    222  28b8		       00		      BYTE.b	%00000000
    223  28b9		       00		      BYTE.b	%00000000
    224  28ba		       00		      BYTE.b	%00000000
    225  28bb		       00		      BYTE.b	%00000000
    226  28bc		       04		      BYTE.b	%00000100
    227  28bd		       00		      BYTE.b	%00000000
    228  28be		       00		      BYTE.b	%00000000
    229  28bf		       00		      BYTE.b	%00000000
    230  28c0		       00		      BYTE.b	%00000000
    231  28c1
    232  28c1				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    233  28c1				  -	      align	256
    234  28c1					      endif
    235  28c1
    236  28c1				   bmp_48x2_2_03
    237  28c1
    238  28c1		       6d		      BYTE.b	%01101101
    239  28c2		       45		      BYTE.b	%01000101
    240  28c3		       6d		      BYTE.b	%01101101
    241  28c4		       45		      BYTE.b	%01000101
    242  28c5		       6d		      BYTE.b	%01101101
    243  28c6		       45		      BYTE.b	%01000101
    244  28c7		       6d		      BYTE.b	%01101101
    245  28c8		       45		      BYTE.b	%01000101
    246  28c9		       6d		      BYTE.b	%01101101
    247  28ca		       45		      BYTE.b	%01000101
    248  28cb		       6d		      BYTE.b	%01101101
    249  28cc		       45		      BYTE.b	%01000101
    250  28cd		       6d		      BYTE.b	%01101101
    251  28ce		       45		      BYTE.b	%01000101
    252  28cf		       7c		      BYTE.b	%01111100
    253  28d0		       00		      BYTE.b	%00000000
    254  28d1		       00		      BYTE.b	%00000000
    255  28d2		       00		      BYTE.b	%00000000
    256  28d3		       00		      BYTE.b	%00000000
    257  28d4		       00		      BYTE.b	%00000000
    258  28d5		       00		      BYTE.b	%00000000
    259  28d6		       00		      BYTE.b	%00000000
    260  28d7		       00		      BYTE.b	%00000000
    261  28d8		       20		      BYTE.b	%00100000
    262  28d9		       00		      BYTE.b	%00000000
    263  28da		       00		      BYTE.b	%00000000
    264  28db		       00		      BYTE.b	%00000000
    265  28dc		       00		      BYTE.b	%00000000
    266  28dd		       00		      BYTE.b	%00000000
    267  28de		       00		      BYTE.b	%00000000
    268  28df		       00		      BYTE.b	%00000000
    269  28e0		       00		      BYTE.b	%00000000
    270  28e1		       00		      BYTE.b	%00000000
    271  28e2		       00		      BYTE.b	%00000000
    272  28e3		       01		      BYTE.b	%00000001
    273  28e4		       01		      BYTE.b	%00000001
    274  28e5		       01		      BYTE.b	%00000001
    275  28e6		       01		      BYTE.b	%00000001
    276  28e7		       01		      BYTE.b	%00000001
    277  28e8		       01		      BYTE.b	%00000001
    278  28e9		       00		      BYTE.b	%00000000
    279  28ea		       00		      BYTE.b	%00000000
    280  28eb		       00		      BYTE.b	%00000000
    281  28ec		       00		      BYTE.b	%00000000
    282  28ed		       00		      BYTE.b	%00000000
    283  28ee		       00		      BYTE.b	%00000000
    284  28ef		       00		      BYTE.b	%00000000
    285  28f0		       00		      BYTE.b	%00000000
    286  28f1
    287  28f1					      if	>. != >[.+(bmp_48x2_2_height)]
    288  2900		       00 00 00 00*	      align	256
    289  2900					      endif
    290  2900
    291  2900				   bmp_48x2_2_04
    292  2900
    293  2900		       dd		      BYTE.b	%11011101
    294  2901		       05		      BYTE.b	%00000101
    295  2902		       dd		      BYTE.b	%11011101
    296  2903		       05		      BYTE.b	%00000101
    297  2904		       dd		      BYTE.b	%11011101
    298  2905		       05		      BYTE.b	%00000101
    299  2906		       dd		      BYTE.b	%11011101
    300  2907		       05		      BYTE.b	%00000101
    301  2908		       dd		      BYTE.b	%11011101
    302  2909		       05		      BYTE.b	%00000101
    303  290a		       dd		      BYTE.b	%11011101
    304  290b		       05		      BYTE.b	%00000101
    305  290c		       dd		      BYTE.b	%11011101
    306  290d		       fd		      BYTE.b	%11111101
    307  290e		       00		      BYTE.b	%00000000
    308  290f		       00		      BYTE.b	%00000000
    309  2910		       00		      BYTE.b	%00000000
    310  2911		       00		      BYTE.b	%00000000
    311  2912		       00		      BYTE.b	%00000000
    312  2913		       00		      BYTE.b	%00000000
    313  2914		       00		      BYTE.b	%00000000
    314  2915		       00		      BYTE.b	%00000000
    315  2916		       00		      BYTE.b	%00000000
    316  2917		       00		      BYTE.b	%00000000
    317  2918		       01		      BYTE.b	%00000001
    318  2919		       00		      BYTE.b	%00000000
    319  291a		       00		      BYTE.b	%00000000
    320  291b		       00		      BYTE.b	%00000000
    321  291c		       00		      BYTE.b	%00000000
    322  291d		       00		      BYTE.b	%00000000
    323  291e		       00		      BYTE.b	%00000000
    324  291f		       3f		      BYTE.b	%00111111
    325  2920		       ff		      BYTE.b	%11111111
    326  2921		       ff		      BYTE.b	%11111111
    327  2922		       cc		      BYTE.b	%11001100
    328  2923		       80		      BYTE.b	%10000000
    329  2924		       a1		      BYTE.b	%10100001
    330  2925		       ad		      BYTE.b	%10101101
    331  2926		       e1		      BYTE.b	%11100001
    332  2927		       f3		      BYTE.b	%11110011
    333  2928		       f3		      BYTE.b	%11110011
    334  2929		       ff		      BYTE.b	%11111111
    335  292a		       3f		      BYTE.b	%00111111
    336  292b		       00		      BYTE.b	%00000000
    337  292c		       00		      BYTE.b	%00000000
    338  292d		       00		      BYTE.b	%00000000
    339  292e		       00		      BYTE.b	%00000000
    340  292f		       00		      BYTE.b	%00000000
    341  2930
    342  2930				  -	      if	>. != >[.+(bmp_48x2_2_height)]
    343  2930				  -	      align	256
    344  2930					      endif
    345  2930
    346  2930				   bmp_48x2_2_05
    347  2930
    348  2930		       fb		      BYTE.b	%11111011
    349  2931		       4a		      BYTE.b	%01001010
    350  2932		       fb		      BYTE.b	%11111011
    351  2933		       4a		      BYTE.b	%01001010
    352  2934		       fb		      BYTE.b	%11111011
    353  2935		       4a		      BYTE.b	%01001010
    354  2936		       fb		      BYTE.b	%11111011
    355  2937		       78		      BYTE.b	%01111000
    356  2938		       c0		      BYTE.b	%11000000
    357  2939		       40		      BYTE.b	%01000000
    358  293a		       c0		      BYTE.b	%11000000
    359  293b		       40		      BYTE.b	%01000000
    360  293c		       c0		      BYTE.b	%11000000
    361  293d		       c0		      BYTE.b	%11000000
    362  293e		       00		      BYTE.b	%00000000
    363  293f		       00		      BYTE.b	%00000000
    364  2940		       00		      BYTE.b	%00000000
    365  2941		       00		      BYTE.b	%00000000
    366  2942		       00		      BYTE.b	%00000000
    367  2943		       04		      BYTE.b	%00000100
    368  2944		       00		      BYTE.b	%00000000
    369  2945		       00		      BYTE.b	%00000000
    370  2946		       00		      BYTE.b	%00000000
    371  2947		       00		      BYTE.b	%00000000
    372  2948		       00		      BYTE.b	%00000000
    373  2949		       00		      BYTE.b	%00000000
    374  294a		       00		      BYTE.b	%00000000
    375  294b		       00		      BYTE.b	%00000000
    376  294c		       00		      BYTE.b	%00000000
    377  294d		       00		      BYTE.b	%00000000
    378  294e		       00		      BYTE.b	%00000000
    379  294f		       00		      BYTE.b	%00000000
    380  2950		       c0		      BYTE.b	%11000000
    381  2951		       e0		      BYTE.b	%11100000
    382  2952		       e0		      BYTE.b	%11100000
    383  2953		       60		      BYTE.b	%01100000
    384  2954		       60		      BYTE.b	%01100000
    385  2955		       60		      BYTE.b	%01100000
    386  2956		       e0		      BYTE.b	%11100000
    387  2957		       e0		      BYTE.b	%11100000
    388  2958		       e0		      BYTE.b	%11100000
    389  2959		       c0		      BYTE.b	%11000000
    390  295a		       00		      BYTE.b	%00000000
    391  295b		       00		      BYTE.b	%00000000
    392  295c		       00		      BYTE.b	%00000000
    393  295d		       00		      BYTE.b	%00000000
    394  295e		       00		      BYTE.b	%00000000
    395  295f		       00		      BYTE.b	%00000000
    396  2960
------- FILE titlescreen/asm/titlescreen.asm
    153  2960					      endif
    154  2960				  -	      ifconst	mk_48x2_3_on
    155  2960				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2960					      endif
    157  2960
    158  2960				  -	      ifconst	mk_96x2_1_on
    159  2960				  -	      include	"titlescreen/96x2_1_image.asm"
    160  2960					      endif
    161  2960				  -	      ifconst	mk_96x2_2_on
    162  2960				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2960					      endif
    164  2960				  -	      ifconst	mk_96x2_3_on
    165  2960				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2960					      endif
    167  2960
    168  2960					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2960					      include	"titlescreen/score_image.asm"
      1  2960							; feel free to modify the score graphics - just keep each digit 8 high
      2  2960							; if you're looking to want to modify any one font, pick on the 
      3  2960
      4  2960				  -	      ifnconst	NOFONT
      5  2960				  -NOFONT     =	0
      6  2960					      endif
      7  2960				  -	      ifnconst	STOCK
      8  2960				  -STOCK      =	1	;_FONTNAME
      9  2960					      endif
     10  2960				  -	      ifnconst	NEWCENTURY
     11  2960				  -NEWCENTURY =	2	;_FONTNAME
     12  2960					      endif
     13  2960				  -	      ifnconst	WHIMSEY
     14  2960				  -WHIMSEY    =	3	;_FONTNAME
     15  2960					      endif
     16  2960				  -	      ifnconst	ALARMCLOCK
     17  2960				  -ALARMCLOCK =	4	;_FONTNAME
     18  2960					      endif
     19  2960				  -	      ifnconst	HANDWRITTEN
     20  2960				  -HANDWRITTEN =	5	;_FONTNAME
     21  2960					      endif
     22  2960				  -	      ifnconst	INTERRUPTED
     23  2960				  -INTERRUPTED =	6	;_FONTNAME
     24  2960					      endif
     25  2960				  -	      ifnconst	TINY
     26  2960				  -TINY       =	7	;_FONTNAME
     27  2960					      endif
     28  2960				  -	      ifnconst	RETROPUTER
     29  2960				  -RETROPUTER =	8	;_FONTNAME
     30  2960					      endif
     31  2960				  -	      ifnconst	CURVES
     32  2960				  -CURVES     =	9	;_FONTNAME
     33  2960					      endif
     34  2960				  -	      ifnconst	HUSKY
     35  2960				  -HUSKY      =	10	;_FONTNAME
     36  2960					      endif
     37  2960				  -	      ifnconst	SNAKE
     38  2960				  -SNAKE      =	11	;_FONTNAME
     39  2960					      endif
     40  2960				  -	      ifnconst	PLOK
     41  2960				  -PLOK       =	13	;_FONTNAME
     42  2960					      endif
     43  2960
     44  2960				  -	      ifnconst	SYMBOLS
     45  2960				  -SYMBOLS    =	0	;_FONTNAME 
     46  2960					      endif
     47  2960
     48  2960							; ### setup some defaults
     49  2960				  -	      ifnconst	fontstyle
     50  2960				  -fontstyle  =	STOCK
     51  2960					      endif
     52  2960
     53  2960							;fix up the table alignment, if necessary
     54  2960				  -	      if	>. != >[.+128]
     55  2960				  -	      align	256
     56  2960					      endif
     57  2960
     58  2960				   miniscoretable
     59  2960
     60  2960					      if	fontstyle == STOCK
     61  2960
     62  2960							;byte %00000000 ; STOCK
     63  2960
     64  2960		       3c		      .byte.b	%00111100	; STOCK
     65  2961		       66		      .byte.b	%01100110	; STOCK
     66  2962		       66		      .byte.b	%01100110	; STOCK
     67  2963		       66		      .byte.b	%01100110	; STOCK
     68  2964		       66		      .byte.b	%01100110	; STOCK
     69  2965		       66		      .byte.b	%01100110	; STOCK
     70  2966		       66		      .byte.b	%01100110	; STOCK
     71  2967		       3c		      .byte.b	%00111100	; STOCK
     72  2968
     73  2968							;byte %00000000 ; STOCK
     74  2968
     75  2968		       7e		      .byte.b	%01111110	; STOCK
     76  2969		       18		      .byte.b	%00011000	; STOCK
     77  296a		       18		      .byte.b	%00011000	; STOCK
     78  296b		       18		      .byte.b	%00011000	; STOCK
     79  296c		       18		      .byte.b	%00011000	; STOCK
     80  296d		       38		      .byte.b	%00111000	; STOCK
     81  296e		       18		      .byte.b	%00011000	; STOCK
     82  296f		       08		      .byte.b	%00001000	; STOCK
     83  2970
     84  2970							;byte %00000000 ; STOCK
     85  2970
     86  2970		       7e		      .byte.b	%01111110	; STOCK
     87  2971		       60		      .byte.b	%01100000	; STOCK
     88  2972		       60		      .byte.b	%01100000	; STOCK
     89  2973		       3c		      .byte.b	%00111100	; STOCK
     90  2974		       06		      .byte.b	%00000110	; STOCK
     91  2975		       06		      .byte.b	%00000110	; STOCK
     92  2976		       46		      .byte.b	%01000110	; STOCK
     93  2977		       3c		      .byte.b	%00111100	; STOCK
     94  2978
     95  2978							;byte %00000000 ; STOCK
     96  2978
     97  2978		       3c		      .byte.b	%00111100	; STOCK
     98  2979		       46		      .byte.b	%01000110	; STOCK
     99  297a		       06		      .byte.b	%00000110	; STOCK
    100  297b		       06		      .byte.b	%00000110	; STOCK
    101  297c		       1c		      .byte.b	%00011100	; STOCK
    102  297d		       06		      .byte.b	%00000110	; STOCK
    103  297e		       46		      .byte.b	%01000110	; STOCK
    104  297f		       3c		      .byte.b	%00111100	; STOCK
    105  2980
    106  2980							;byte %00000000 ; STOCK
    107  2980
    108  2980		       0c		      .byte.b	%00001100	; STOCK
    109  2981		       0c		      .byte.b	%00001100	; STOCK
    110  2982		       7e		      .byte.b	%01111110	; STOCK
    111  2983		       4c		      .byte.b	%01001100	; STOCK
    112  2984		       4c		      .byte.b	%01001100	; STOCK
    113  2985		       2c		      .byte.b	%00101100	; STOCK
    114  2986		       1c		      .byte.b	%00011100	; STOCK
    115  2987		       0c		      .byte.b	%00001100	; STOCK
    116  2988
    117  2988							;byte %00000000 ; STOCK
    118  2988
    119  2988		       3c		      .byte.b	%00111100	; STOCK
    120  2989		       46		      .byte.b	%01000110	; STOCK
    121  298a		       06		      .byte.b	%00000110	; STOCK
    122  298b		       06		      .byte.b	%00000110	; STOCK
    123  298c		       3c		      .byte.b	%00111100	; STOCK
    124  298d		       60		      .byte.b	%01100000	; STOCK
    125  298e		       60		      .byte.b	%01100000	; STOCK
    126  298f		       7e		      .byte.b	%01111110	; STOCK
    127  2990
    128  2990							;byte %00000000 ; STOCK
    129  2990
    130  2990		       3c		      .byte.b	%00111100	; STOCK
    131  2991		       66		      .byte.b	%01100110	; STOCK
    132  2992		       66		      .byte.b	%01100110	; STOCK
    133  2993		       66		      .byte.b	%01100110	; STOCK
    134  2994		       7c		      .byte.b	%01111100	; STOCK
    135  2995		       60		      .byte.b	%01100000	; STOCK
    136  2996		       62		      .byte.b	%01100010	; STOCK
    137  2997		       3c		      .byte.b	%00111100	; STOCK
    138  2998
    139  2998							;byte %00000000 ; STOCK
    140  2998
    141  2998		       30		      .byte.b	%00110000	; STOCK
    142  2999		       30		      .byte.b	%00110000	; STOCK
    143  299a		       30		      .byte.b	%00110000	; STOCK
    144  299b		       18		      .byte.b	%00011000	; STOCK
    145  299c		       0c		      .byte.b	%00001100	; STOCK
    146  299d		       06		      .byte.b	%00000110	; STOCK
    147  299e		       42		      .byte.b	%01000010	; STOCK
    148  299f		       3e		      .byte.b	%00111110	; STOCK
    149  29a0
    150  29a0							;byte %00000000 ; STOCK
    151  29a0
    152  29a0		       3c		      .byte.b	%00111100	; STOCK
    153  29a1		       66		      .byte.b	%01100110	; STOCK
    154  29a2		       66		      .byte.b	%01100110	; STOCK
    155  29a3		       66		      .byte.b	%01100110	; STOCK
    156  29a4		       3c		      .byte.b	%00111100	; STOCK
    157  29a5		       66		      .byte.b	%01100110	; STOCK
    158  29a6		       66		      .byte.b	%01100110	; STOCK
    159  29a7		       3c		      .byte.b	%00111100	; STOCK
    160  29a8
    161  29a8							;byte %00000000 ; STOCK
    162  29a8
    163  29a8		       3c		      .byte.b	%00111100	; STOCK
    164  29a9		       46		      .byte.b	%01000110	; STOCK
    165  29aa		       06		      .byte.b	%00000110	; STOCK
    166  29ab		       3e		      .byte.b	%00111110	; STOCK
    167  29ac		       66		      .byte.b	%01100110	; STOCK
    168  29ad		       66		      .byte.b	%01100110	; STOCK
    169  29ae		       66		      .byte.b	%01100110	; STOCK
    170  29af		       3c		      .byte.b	%00111100	; STOCK
    171  29b0
    172  29b0							;byte %00000000 ; STOCK
    173  29b0
    174  29b0				  -	      ifconst	fontcharsHEX
    175  29b0				  -
    176  29b0				  -	      .byte	%01100110	; STOCK
    177  29b0				  -	      .byte	%01100110	; STOCK
    178  29b0				  -	      .byte	%01100110	; STOCK
    179  29b0				  -	      .byte	%01111110	; STOCK
    180  29b0				  -	      .byte	%01100110	; STOCK
    181  29b0				  -	      .byte	%01100110	; STOCK
    182  29b0				  -	      .byte	%01100110	; STOCK
    183  29b0				  -	      .byte	%00111100	; STOCK
    184  29b0				  -
    185  29b0				  -			;byte %00000000 ; STOCK
    186  29b0				  -
    187  29b0				  -	      .byte	%01111100	; STOCK
    188  29b0				  -	      .byte	%01100110	; STOCK
    189  29b0				  -	      .byte	%01100110	; STOCK
    190  29b0				  -	      .byte	%01100110	; STOCK
    191  29b0				  -	      .byte	%01111100	; STOCK
    192  29b0				  -	      .byte	%01100110	; STOCK
    193  29b0				  -	      .byte	%01100110	; STOCK
    194  29b0				  -	      .byte	%01111100	; STOCK
    195  29b0				  -
    196  29b0				  -			;byte %00000000 ; STOCK
    197  29b0				  -
    198  29b0				  -	      .byte	%00111100	; STOCK
    199  29b0				  -	      .byte	%01100110	; STOCK
    200  29b0				  -	      .byte	%01100000	; STOCK
    201  29b0				  -	      .byte	%01100000	; STOCK
    202  29b0				  -	      .byte	%01100000	; STOCK
    203  29b0				  -	      .byte	%01100000	; STOCK
    204  29b0				  -	      .byte	%01100110	; STOCK
    205  29b0				  -	      .byte	%00111100	; STOCK
    206  29b0				  -
    207  29b0				  -			;byte %00000000 ; STOCK
    208  29b0				  -
    209  29b0				  -	      .byte	%01111100	; STOCK
    210  29b0				  -	      .byte	%01100110	; STOCK
    211  29b0				  -	      .byte	%01100110	; STOCK
    212  29b0				  -	      .byte	%01100110	; STOCK
    213  29b0				  -	      .byte	%01100110	; STOCK
    214  29b0				  -	      .byte	%01100110	; STOCK
    215  29b0				  -	      .byte	%01100110	; STOCK
    216  29b0				  -	      .byte	%01111100	; STOCK
    217  29b0				  -
    218  29b0				  -			;byte %00000000 ; STOCK
    219  29b0				  -
    220  29b0				  -	      .byte	%01111110	; STOCK
    221  29b0				  -	      .byte	%01100000	; STOCK
    222  29b0				  -	      .byte	%01100000	; STOCK
    223  29b0				  -	      .byte	%01100000	; STOCK
    224  29b0				  -	      .byte	%01111100	; STOCK
    225  29b0				  -	      .byte	%01100000	; STOCK
    226  29b0				  -	      .byte	%01100000	; STOCK
    227  29b0				  -	      .byte	%01111110	; STOCK
    228  29b0				  -
    229  29b0				  -			;byte %00000000 ; STOCK
    230  29b0				  -
    231  29b0				  -	      .byte	%01100000	; STOCK
    232  29b0				  -	      .byte	%01100000	; STOCK
    233  29b0				  -	      .byte	%01100000	; STOCK
    234  29b0				  -	      .byte	%01100000	; STOCK
    235  29b0				  -	      .byte	%01111100	; STOCK
    236  29b0				  -	      .byte	%01100000	; STOCK
    237  29b0				  -	      .byte	%01100000	; STOCK
    238  29b0				  -	      .byte	%01111110	; STOCK
    239  29b0				  -
    240  29b0				  -			;byte %00000000 ; STOCK
    241  29b0				  -			;byte %00000000 ; STOCK
    242  29b0				  -			;byte %00000000 ; STOCK
    243  29b0				  -			;byte %00000000 ; STOCK
    244  29b0					      endif		; fontcharsHEX 
    245  29b0					      endif		; STOCK
    246  29b0
    247  29b0				  -	      if	fontstyle == NEWCENTURY
    248  29b0				  -			;byte %00000000 ; NEWCENTURY
    249  29b0				  -
    250  29b0				  -	      .byte	%00111100	; NEWCENTURY
    251  29b0				  -	      .byte	%01000010	; NEWCENTURY
    252  29b0				  -	      .byte	%01000010	; NEWCENTURY
    253  29b0				  -	      .byte	%01000010	; NEWCENTURY
    254  29b0				  -	      .byte	%00100100	; NEWCENTURY
    255  29b0				  -	      .byte	%00100100	; NEWCENTURY
    256  29b0				  -	      .byte	%00100100	; NEWCENTURY
    257  29b0				  -	      .byte	%00011000	; NEWCENTURY
    258  29b0				  -
    259  29b0				  -			;byte %00000000 ; NEWCENTURY
    260  29b0				  -
    261  29b0				  -	      .byte	%00001000	; NEWCENTURY
    262  29b0				  -	      .byte	%00001000	; NEWCENTURY
    263  29b0				  -	      .byte	%00001000	; NEWCENTURY
    264  29b0				  -	      .byte	%00001000	; NEWCENTURY
    265  29b0				  -	      .byte	%00001000	; NEWCENTURY
    266  29b0				  -	      .byte	%00001000	; NEWCENTURY
    267  29b0				  -	      .byte	%00001000	; NEWCENTURY
    268  29b0				  -	      .byte	%00001000	; NEWCENTURY
    269  29b0				  -
    270  29b0				  -			;byte %00000000 ; NEWCENTURY
    271  29b0				  -
    272  29b0				  -	      .byte	%01111110	; NEWCENTURY
    273  29b0				  -	      .byte	%01000000	; NEWCENTURY
    274  29b0				  -	      .byte	%01000000	; NEWCENTURY
    275  29b0				  -	      .byte	%00100000	; NEWCENTURY
    276  29b0				  -	      .byte	%00011100	; NEWCENTURY
    277  29b0				  -	      .byte	%00000010	; NEWCENTURY
    278  29b0				  -	      .byte	%00000010	; NEWCENTURY
    279  29b0				  -	      .byte	%00011100	; NEWCENTURY
    280  29b0				  -
    281  29b0				  -			;byte %00000000 ; NEWCENTURY
    282  29b0				  -
    283  29b0				  -	      .byte	%01111100	; NEWCENTURY
    284  29b0				  -	      .byte	%00000010	; NEWCENTURY
    285  29b0				  -	      .byte	%00000010	; NEWCENTURY
    286  29b0				  -	      .byte	%00000010	; NEWCENTURY
    287  29b0				  -	      .byte	%00111100	; NEWCENTURY
    288  29b0				  -	      .byte	%00000010	; NEWCENTURY
    289  29b0				  -	      .byte	%00000010	; NEWCENTURY
    290  29b0				  -	      .byte	%00011100	; NEWCENTURY
    291  29b0				  -
    292  29b0				  -			;byte %00000000 ; NEWCENTURY
    293  29b0				  -
    294  29b0				  -	      .byte	%00000010	; NEWCENTURY
    295  29b0				  -	      .byte	%00000010	; NEWCENTURY
    296  29b0				  -	      .byte	%00000010	; NEWCENTURY
    297  29b0				  -	      .byte	%00111110	; NEWCENTURY
    298  29b0				  -	      .byte	%00100010	; NEWCENTURY
    299  29b0				  -	      .byte	%00100010	; NEWCENTURY
    300  29b0				  -	      .byte	%00010010	; NEWCENTURY
    301  29b0				  -	      .byte	%00010010	; NEWCENTURY
    302  29b0				  -
    303  29b0				  -			;byte %00000000 ; NEWCENTURY
    304  29b0				  -
    305  29b0				  -	      .byte	%01111100	; NEWCENTURY
    306  29b0				  -	      .byte	%00000010	; NEWCENTURY
    307  29b0				  -	      .byte	%00000010	; NEWCENTURY
    308  29b0				  -	      .byte	%00000010	; NEWCENTURY
    309  29b0				  -	      .byte	%01111100	; NEWCENTURY
    310  29b0				  -	      .byte	%01000000	; NEWCENTURY
    311  29b0				  -	      .byte	%01000000	; NEWCENTURY
    312  29b0				  -	      .byte	%01111000	; NEWCENTURY
    313  29b0				  -
    314  29b0				  -			;byte %00000000 ; NEWCENTURY
    315  29b0				  -
    316  29b0				  -	      .byte	%00111100	; NEWCENTURY
    317  29b0				  -	      .byte	%01000010	; NEWCENTURY
    318  29b0				  -	      .byte	%01000010	; NEWCENTURY
    319  29b0				  -	      .byte	%01000010	; NEWCENTURY
    320  29b0				  -	      .byte	%01111100	; NEWCENTURY
    321  29b0				  -	      .byte	%01000000	; NEWCENTURY
    322  29b0				  -	      .byte	%01000000	; NEWCENTURY
    323  29b0				  -	      .byte	%00110000	; NEWCENTURY
    324  29b0				  -
    325  29b0				  -			;byte %00000000 ; NEWCENTURY
    326  29b0				  -
    327  29b0				  -	      .byte	%00010000	; NEWCENTURY
    328  29b0				  -	      .byte	%00010000	; NEWCENTURY
    329  29b0				  -	      .byte	%00001000	; NEWCENTURY
    330  29b0				  -	      .byte	%00001000	; NEWCENTURY
    331  29b0				  -	      .byte	%00000100	; NEWCENTURY
    332  29b0				  -	      .byte	%00000100	; NEWCENTURY
    333  29b0				  -	      .byte	%00000010	; NEWCENTURY
    334  29b0				  -	      .byte	%00011110	; NEWCENTURY
    335  29b0				  -
    336  29b0				  -			;byte %00000000 ; NEWCENTURY
    337  29b0				  -
    338  29b0				  -	      .byte	%00111100	; NEWCENTURY
    339  29b0				  -	      .byte	%01000010	; NEWCENTURY
    340  29b0				  -	      .byte	%01000010	; NEWCENTURY
    341  29b0				  -	      .byte	%01000010	; NEWCENTURY
    342  29b0				  -	      .byte	%00111100	; NEWCENTURY
    343  29b0				  -	      .byte	%00100100	; NEWCENTURY
    344  29b0				  -	      .byte	%00100100	; NEWCENTURY
    345  29b0				  -	      .byte	%00011000	; NEWCENTURY
    346  29b0				  -
    347  29b0				  -			;byte %00000000 ; NEWCENTURY
    348  29b0				  -
    349  29b0				  -	      .byte	%00111100	; NEWCENTURY
    350  29b0				  -	      .byte	%00000010	; NEWCENTURY
    351  29b0				  -	      .byte	%00000010	; NEWCENTURY
    352  29b0				  -	      .byte	%00000010	; NEWCENTURY
    353  29b0				  -	      .byte	%00001110	; NEWCENTURY
    354  29b0				  -	      .byte	%00010010	; NEWCENTURY
    355  29b0				  -	      .byte	%00010010	; NEWCENTURY
    356  29b0				  -	      .byte	%00001100	; NEWCENTURY
    357  29b0				  -
    358  29b0				  -	      ifconst	fontcharsHEX
    359  29b0				  -
    360  29b0				  -			;byte %00000000 ; NEWCENTURY
    361  29b0				  -
    362  29b0				  -	      .byte	%01000010	; NEWCENTURY
    363  29b0				  -	      .byte	%01000010	; NEWCENTURY
    364  29b0				  -	      .byte	%01000010	; NEWCENTURY
    365  29b0				  -	      .byte	%01000010	; NEWCENTURY
    366  29b0				  -	      .byte	%01111100	; NEWCENTURY
    367  29b0				  -	      .byte	%01000100	; NEWCENTURY
    368  29b0				  -	      .byte	%01000100	; NEWCENTURY
    369  29b0				  -	      .byte	%00111000	; NEWCENTURY
    370  29b0				  -
    371  29b0				  -			;byte %00000000 ; NEWCENTURY
    372  29b0				  -
    373  29b0				  -	      .byte	%01111100	; NEWCENTURY
    374  29b0				  -	      .byte	%01000010	; NEWCENTURY
    375  29b0				  -	      .byte	%01000010	; NEWCENTURY
    376  29b0				  -	      .byte	%01000010	; NEWCENTURY
    377  29b0				  -	      .byte	%01111100	; NEWCENTURY
    378  29b0				  -	      .byte	%01000100	; NEWCENTURY
    379  29b0				  -	      .byte	%01000100	; NEWCENTURY
    380  29b0				  -	      .byte	%01111000	; NEWCENTURY
    381  29b0				  -
    382  29b0				  -			;byte %00000000 ; NEWCENTURY
    383  29b0				  -
    384  29b0				  -	      .byte	%00111100	; NEWCENTURY
    385  29b0				  -	      .byte	%01000010	; NEWCENTURY
    386  29b0				  -	      .byte	%01000000	; NEWCENTURY
    387  29b0				  -	      .byte	%01000000	; NEWCENTURY
    388  29b0				  -	      .byte	%01000000	; NEWCENTURY
    389  29b0				  -	      .byte	%01000000	; NEWCENTURY
    390  29b0				  -	      .byte	%01000000	; NEWCENTURY
    391  29b0				  -	      .byte	%00111000	; NEWCENTURY
    392  29b0				  -
    393  29b0				  -			;byte %00000000 ; NEWCENTURY
    394  29b0				  -
    395  29b0				  -	      .byte	%01111100	; NEWCENTURY
    396  29b0				  -	      .byte	%01000010	; NEWCENTURY
    397  29b0				  -	      .byte	%01000010	; NEWCENTURY
    398  29b0				  -	      .byte	%01000010	; NEWCENTURY
    399  29b0				  -	      .byte	%01000010	; NEWCENTURY
    400  29b0				  -	      .byte	%01000100	; NEWCENTURY
    401  29b0				  -	      .byte	%01000100	; NEWCENTURY
    402  29b0				  -	      .byte	%01111000	; NEWCENTURY
    403  29b0				  -
    404  29b0				  -			;byte %00000000 ; NEWCENTURY
    405  29b0				  -
    406  29b0				  -	      .byte	%01111110	; NEWCENTURY
    407  29b0				  -	      .byte	%01000000	; NEWCENTURY
    408  29b0				  -	      .byte	%01000000	; NEWCENTURY
    409  29b0				  -	      .byte	%01000000	; NEWCENTURY
    410  29b0				  -	      .byte	%01111100	; NEWCENTURY
    411  29b0				  -	      .byte	%01000000	; NEWCENTURY
    412  29b0				  -	      .byte	%01000000	; NEWCENTURY
    413  29b0				  -	      .byte	%01111000	; NEWCENTURY
    414  29b0				  -
    415  29b0				  -			;byte %00000000 ; NEWCENTURY
    416  29b0				  -
    417  29b0				  -	      .byte	%01000000	; NEWCENTURY
    418  29b0				  -	      .byte	%01000000	; NEWCENTURY
    419  29b0				  -	      .byte	%01000000	; NEWCENTURY
    420  29b0				  -	      .byte	%01000000	; NEWCENTURY
    421  29b0				  -	      .byte	%01111100	; NEWCENTURY
    422  29b0				  -	      .byte	%01000000	; NEWCENTURY
    423  29b0				  -	      .byte	%01000000	; NEWCENTURY
    424  29b0				  -	      .byte	%01111000	; NEWCENTURY
    425  29b0				  -
    426  29b0				  -			;byte %00000000 ; NEWCENTURY
    427  29b0				  -			;byte %00000000 ; NEWCENTURY
    428  29b0				  -			;byte %00000000 ; NEWCENTURY
    429  29b0				  -			;byte %00000000 ; NEWCENTURY
    430  29b0				  -
    431  29b0				  -	      endif		; fontcharsHEX 
    432  29b0					      endif		; NEWCENTURY
    433  29b0
    434  29b0				  -	      if	fontstyle == WHIMSEY
    435  29b0				  -			;byte %00000000 ; WHIMSEY
    436  29b0				  -
    437  29b0				  -	      .byte	%00111100	; WHIMSEY
    438  29b0				  -	      .byte	%01111110	; WHIMSEY
    439  29b0				  -	      .byte	%01111110	; WHIMSEY
    440  29b0				  -	      .byte	%01111110	; WHIMSEY
    441  29b0				  -	      .byte	%01110110	; WHIMSEY
    442  29b0				  -	      .byte	%01110110	; WHIMSEY
    443  29b0				  -	      .byte	%01110110	; WHIMSEY
    444  29b0				  -	      .byte	%00111100	; WHIMSEY
    445  29b0				  -
    446  29b0				  -			;byte %00000000 ; WHIMSEY
    447  29b0				  -
    448  29b0				  -	      .byte	%01111110	; WHIMSEY
    449  29b0				  -	      .byte	%01111110	; WHIMSEY
    450  29b0				  -	      .byte	%01111110	; WHIMSEY
    451  29b0				  -	      .byte	%00011000	; WHIMSEY
    452  29b0				  -	      .byte	%00011000	; WHIMSEY
    453  29b0				  -	      .byte	%00011000	; WHIMSEY
    454  29b0				  -	      .byte	%01111000	; WHIMSEY
    455  29b0				  -	      .byte	%00011000	; WHIMSEY
    456  29b0				  -
    457  29b0				  -			;byte %00000000 ; WHIMSEY
    458  29b0				  -
    459  29b0				  -	      .byte	%01111110	; WHIMSEY
    460  29b0				  -	      .byte	%01111110	; WHIMSEY
    461  29b0				  -	      .byte	%01111110	; WHIMSEY
    462  29b0				  -	      .byte	%01111000	; WHIMSEY
    463  29b0				  -	      .byte	%00111100	; WHIMSEY
    464  29b0				  -	      .byte	%00001110	; WHIMSEY
    465  29b0				  -	      .byte	%01100110	; WHIMSEY
    466  29b0				  -	      .byte	%00111100	; WHIMSEY
    467  29b0				  -
    468  29b0				  -			;byte %00000000 ; WHIMSEY
    469  29b0				  -
    470  29b0				  -	      .byte	%00111100	; WHIMSEY
    471  29b0				  -	      .byte	%01111110	; WHIMSEY
    472  29b0				  -	      .byte	%01111110	; WHIMSEY
    473  29b0				  -	      .byte	%01101110	; WHIMSEY
    474  29b0				  -	      .byte	%00001110	; WHIMSEY
    475  29b0				  -	      .byte	%00111100	; WHIMSEY
    476  29b0				  -	      .byte	%00011100	; WHIMSEY
    477  29b0				  -	      .byte	%01111110	; WHIMSEY
    478  29b0				  -
    479  29b0				  -			;byte %00000000 ; WHIMSEY
    480  29b0				  -
    481  29b0				  -	      .byte	%00011100	; WHIMSEY
    482  29b0				  -	      .byte	%00011100	; WHIMSEY
    483  29b0				  -	      .byte	%01111110	; WHIMSEY
    484  29b0				  -	      .byte	%01011100	; WHIMSEY
    485  29b0				  -	      .byte	%01011100	; WHIMSEY
    486  29b0				  -	      .byte	%00011100	; WHIMSEY
    487  29b0				  -	      .byte	%00011100	; WHIMSEY
    488  29b0				  -	      .byte	%00011100	; WHIMSEY
    489  29b0				  -
    490  29b0				  -			;byte %00000000 ; WHIMSEY
    491  29b0				  -
    492  29b0				  -	      .byte	%00111100	; WHIMSEY
    493  29b0				  -	      .byte	%01111110	; WHIMSEY
    494  29b0				  -	      .byte	%01111110	; WHIMSEY
    495  29b0				  -	      .byte	%01101110	; WHIMSEY
    496  29b0				  -	      .byte	%00001110	; WHIMSEY
    497  29b0				  -	      .byte	%01111100	; WHIMSEY
    498  29b0				  -	      .byte	%01110000	; WHIMSEY
    499  29b0				  -	      .byte	%01111110	; WHIMSEY
    500  29b0				  -
    501  29b0				  -			;byte %00000000 ; WHIMSEY
    502  29b0				  -
    503  29b0				  -	      .byte	%00111100	; WHIMSEY
    504  29b0				  -	      .byte	%01111110	; WHIMSEY
    505  29b0				  -	      .byte	%01111110	; WHIMSEY
    506  29b0				  -	      .byte	%01110110	; WHIMSEY
    507  29b0				  -	      .byte	%01110110	; WHIMSEY
    508  29b0				  -	      .byte	%01111100	; WHIMSEY
    509  29b0				  -	      .byte	%01110000	; WHIMSEY
    510  29b0				  -	      .byte	%00111110	; WHIMSEY
    511  29b0				  -
    512  29b0				  -			;byte %00000000 ; WHIMSEY
    513  29b0				  -
    514  29b0				  -	      .byte	%01111000	; WHIMSEY
    515  29b0				  -	      .byte	%01111000	; WHIMSEY
    516  29b0				  -	      .byte	%01111000	; WHIMSEY
    517  29b0				  -	      .byte	%00111100	; WHIMSEY
    518  29b0				  -	      .byte	%00011100	; WHIMSEY
    519  29b0				  -	      .byte	%00001110	; WHIMSEY
    520  29b0				  -	      .byte	%00001110	; WHIMSEY
    521  29b0				  -	      .byte	%01111110	; WHIMSEY
    522  29b0				  -
    523  29b0				  -			;byte %00000000 ; WHIMSEY
    524  29b0				  -
    525  29b0				  -	      .byte	%00111100	; WHIMSEY
    526  29b0				  -	      .byte	%01111110	; WHIMSEY
    527  29b0				  -	      .byte	%01111110	; WHIMSEY
    528  29b0				  -	      .byte	%01110110	; WHIMSEY
    529  29b0				  -	      .byte	%01110110	; WHIMSEY
    530  29b0				  -	      .byte	%00111100	; WHIMSEY
    531  29b0				  -	      .byte	%01110110	; WHIMSEY
    532  29b0				  -	      .byte	%00111100	; WHIMSEY
    533  29b0				  -
    534  29b0				  -			;byte %00000000 ; WHIMSEY
    535  29b0				  -
    536  29b0				  -	      .byte	%00111100	; WHIMSEY
    537  29b0				  -	      .byte	%01111110	; WHIMSEY
    538  29b0				  -	      .byte	%01111110	; WHIMSEY
    539  29b0				  -	      .byte	%01110110	; WHIMSEY
    540  29b0				  -	      .byte	%00000110	; WHIMSEY
    541  29b0				  -	      .byte	%00111110	; WHIMSEY
    542  29b0				  -	      .byte	%01110110	; WHIMSEY
    543  29b0				  -	      .byte	%00111100	; WHIMSEY
    544  29b0				  -
    545  29b0				  -	      ifconst	fontcharsHEX
    546  29b0				  -
    547  29b0				  -			;byte %00000000 ; WHIMSEY
    548  29b0				  -
    549  29b0				  -	      .byte	%01110110	; WHIMSEY
    550  29b0				  -	      .byte	%01110110	; WHIMSEY
    551  29b0				  -	      .byte	%01111110	; WHIMSEY
    552  29b0				  -	      .byte	%01111110	; WHIMSEY
    553  29b0				  -	      .byte	%01111110	; WHIMSEY
    554  29b0				  -	      .byte	%01110110	; WHIMSEY
    555  29b0				  -	      .byte	%01110110	; WHIMSEY
    556  29b0				  -	      .byte	%00111100	; WHIMSEY
    557  29b0				  -
    558  29b0				  -			;byte %00000000 ; WHIMSEY
    559  29b0				  -
    560  29b0				  -	      .byte	%01111100	; WHIMSEY
    561  29b0				  -	      .byte	%01111110	; WHIMSEY
    562  29b0				  -	      .byte	%01111110	; WHIMSEY
    563  29b0				  -	      .byte	%01110110	; WHIMSEY
    564  29b0				  -	      .byte	%01110110	; WHIMSEY
    565  29b0				  -	      .byte	%01111100	; WHIMSEY
    566  29b0				  -	      .byte	%01110110	; WHIMSEY
    567  29b0				  -	      .byte	%01111100	; WHIMSEY
    568  29b0				  -
    569  29b0				  -			;byte %00000000 ; WHIMSEY
    570  29b0				  -
    571  29b0				  -	      .byte	%00111100	; WHIMSEY
    572  29b0				  -	      .byte	%01111110	; WHIMSEY
    573  29b0				  -	      .byte	%01111110	; WHIMSEY
    574  29b0				  -	      .byte	%01110110	; WHIMSEY
    575  29b0				  -	      .byte	%01110000	; WHIMSEY
    576  29b0				  -	      .byte	%01110000	; WHIMSEY
    577  29b0				  -	      .byte	%01110110	; WHIMSEY
    578  29b0				  -	      .byte	%00111100	; WHIMSEY
    579  29b0				  -
    580  29b0				  -			;byte %00000000 ; WHIMSEY
    581  29b0				  -
    582  29b0				  -	      .byte	%01111100	; WHIMSEY
    583  29b0				  -	      .byte	%01111110	; WHIMSEY
    584  29b0				  -	      .byte	%01111110	; WHIMSEY
    585  29b0				  -	      .byte	%01111110	; WHIMSEY
    586  29b0				  -	      .byte	%01110110	; WHIMSEY
    587  29b0				  -	      .byte	%01110110	; WHIMSEY
    588  29b0				  -	      .byte	%01110110	; WHIMSEY
    589  29b0				  -	      .byte	%01111100	; WHIMSEY
    590  29b0				  -
    591  29b0				  -			;byte %00000000 ; WHIMSEY
    592  29b0				  -
    593  29b0				  -	      .byte	%01111110	; WHIMSEY
    594  29b0				  -	      .byte	%01111110	; WHIMSEY
    595  29b0				  -	      .byte	%01111110	; WHIMSEY
    596  29b0				  -	      .byte	%01110000	; WHIMSEY
    597  29b0				  -	      .byte	%01110000	; WHIMSEY
    598  29b0				  -	      .byte	%01111100	; WHIMSEY
    599  29b0				  -	      .byte	%01110000	; WHIMSEY
    600  29b0				  -	      .byte	%01111100	; WHIMSEY
    601  29b0				  -
    602  29b0				  -			;byte %00000000 ; WHIMSEY
    603  29b0				  -
    604  29b0				  -	      .byte	%01110000	; WHIMSEY
    605  29b0				  -	      .byte	%01110000	; WHIMSEY
    606  29b0				  -	      .byte	%01110000	; WHIMSEY
    607  29b0				  -	      .byte	%01110000	; WHIMSEY
    608  29b0				  -	      .byte	%01110000	; WHIMSEY
    609  29b0				  -	      .byte	%01111100	; WHIMSEY
    610  29b0				  -	      .byte	%01110000	; WHIMSEY
    611  29b0				  -	      .byte	%01111100	; WHIMSEY
    612  29b0				  -
    613  29b0				  -			;byte %00000000 ; WHIMSEY
    614  29b0				  -			;byte %00000000 ; WHIMSEY
    615  29b0				  -			;byte %00000000 ; WHIMSEY
    616  29b0				  -			;byte %00000000 ; WHIMSEY
    617  29b0				  -
    618  29b0				  -	      endif		; fontcharsHEX
    619  29b0					      endif		; WHIMSEY
    620  29b0
    621  29b0				  -	      if	fontstyle == ALARMCLOCK
    622  29b0				  -
    623  29b0				  -			;byte %00000000 ; ALARMCLOCK
    624  29b0				  -
    625  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    626  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    627  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    628  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    629  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    630  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    631  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    632  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    633  29b0				  -
    634  29b0				  -			;byte %00000000 ; ALARMCLOCK
    635  29b0				  -
    636  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    637  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    638  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    639  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    640  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    641  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    642  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    643  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    644  29b0				  -
    645  29b0				  -			;byte %00000000 ; ALARMCLOCK
    646  29b0				  -
    647  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    648  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    649  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    650  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    651  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    652  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    653  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    654  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    655  29b0				  -
    656  29b0				  -			;byte %00000000 ; ALARMCLOCK
    657  29b0				  -
    658  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    659  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    660  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    661  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    662  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    663  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    664  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    665  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    666  29b0				  -
    667  29b0				  -			;byte %00000000 ; ALARMCLOCK
    668  29b0				  -
    669  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    670  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    671  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    672  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    673  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    674  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    675  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    676  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    677  29b0				  -
    678  29b0				  -			;byte %00000000 ; ALARMCLOCK
    679  29b0				  -
    680  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    681  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    682  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    683  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    684  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    685  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    686  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    687  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    688  29b0				  -
    689  29b0				  -			;byte %00000000 ; ALARMCLOCK
    690  29b0				  -
    691  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    692  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    693  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    694  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    695  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    696  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    697  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    698  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    699  29b0				  -
    700  29b0				  -			;byte %00000000 ; ALARMCLOCK
    701  29b0				  -
    702  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    703  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    704  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    705  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    706  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    707  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    708  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    709  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    710  29b0				  -
    711  29b0				  -			;byte %00000000 ; ALARMCLOCK
    712  29b0				  -
    713  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    714  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    715  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    716  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    717  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    718  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    719  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    720  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    721  29b0				  -
    722  29b0				  -			;byte %00000000 ; ALARMCLOCK
    723  29b0				  -
    724  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    725  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    726  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    727  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    728  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    729  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    730  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    731  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    732  29b0				  -
    733  29b0				  -
    734  29b0				  -	      ifconst	fontcharsHEX
    735  29b0				  -			;byte %00000000 ; ALARMCLOCK
    736  29b0				  -
    737  29b0				  -
    738  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    739  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    740  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    741  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    742  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    743  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    744  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    745  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    746  29b0				  -
    747  29b0				  -			;byte %00000000 ; ALARMCLOCK
    748  29b0				  -
    749  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    750  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    751  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    752  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    753  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    754  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    755  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    756  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    757  29b0				  -
    758  29b0				  -			;byte %00000000 ; ALARMCLOCK
    759  29b0				  -
    760  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    761  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    762  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    763  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    764  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    765  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    766  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    767  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    768  29b0				  -
    769  29b0				  -			;byte %00000000 ; ALARMCLOCK
    770  29b0				  -
    771  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    772  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    773  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    774  29b0				  -	      .byte	%01000010	; ALARMCLOCK
    775  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    776  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    777  29b0				  -	      .byte	%00000010	; ALARMCLOCK
    778  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    779  29b0				  -
    780  29b0				  -			;byte %00000000 ; ALARMCLOCK
    781  29b0				  -
    782  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    783  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    784  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    785  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    786  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    787  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    788  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    789  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    790  29b0				  -
    791  29b0				  -			;byte %00000000 ; ALARMCLOCK
    792  29b0				  -
    793  29b0				  -	      .byte	%00000000	; ALARMCLOCK
    794  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    795  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    796  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    797  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    798  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    799  29b0				  -	      .byte	%01000000	; ALARMCLOCK
    800  29b0				  -	      .byte	%00111100	; ALARMCLOCK
    801  29b0				  -
    802  29b0				  -			;byte %00000000 ; ALARMCLOCK
    803  29b0				  -			;byte %00000000 ; ALARMCLOCK
    804  29b0				  -			;byte %00000000 ; ALARMCLOCK
    805  29b0				  -			;byte %00000000 ; ALARMCLOCK
    806  29b0				  -
    807  29b0				  -	      endif		; fontcharsHEX
    808  29b0					      endif		; ALARMCLOCK
    809  29b0
    810  29b0				  -	      if	fontstyle == HANDWRITTEN
    811  29b0				  -
    812  29b0				  -			;byte %00000000 ; HANDWRITTEN
    813  29b0				  -
    814  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    815  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    816  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    817  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    818  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    819  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    820  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    821  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    822  29b0				  -
    823  29b0				  -			;byte %00000000 ; HANDWRITTEN
    824  29b0				  -
    825  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    826  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    827  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    828  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    829  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    830  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    831  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    832  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    833  29b0				  -
    834  29b0				  -			;byte %00000000 ; HANDWRITTEN
    835  29b0				  -
    836  29b0				  -	      .byte	%01110000	; HANDWRITTEN
    837  29b0				  -	      .byte	%01001100	; HANDWRITTEN
    838  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    839  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    840  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    841  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    842  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    843  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    844  29b0				  -
    845  29b0				  -			;byte %00000000 ; HANDWRITTEN
    846  29b0				  -
    847  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    848  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    849  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    850  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    851  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    852  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    853  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    854  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    855  29b0				  -
    856  29b0				  -			;byte %00000000 ; HANDWRITTEN
    857  29b0				  -
    858  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    859  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    860  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    861  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    862  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    863  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    864  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    865  29b0				  -	      .byte	%00000010	; HANDWRITTEN
    866  29b0				  -
    867  29b0				  -			;byte %00000000 ; HANDWRITTEN
    868  29b0				  -
    869  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    870  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    871  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    872  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    873  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    874  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    875  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    876  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    877  29b0				  -
    878  29b0				  -			;byte %00000000 ; HANDWRITTEN
    879  29b0				  -
    880  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    881  29b0				  -	      .byte	%00101000	; HANDWRITTEN
    882  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    883  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    884  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    885  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    886  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    887  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    888  29b0				  -
    889  29b0				  -			;byte %00000000 ; HANDWRITTEN
    890  29b0				  -
    891  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    892  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    893  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    894  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    895  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    896  29b0				  -	      .byte	%00000100	; HANDWRITTEN
    897  29b0				  -	      .byte	%00110010	; HANDWRITTEN
    898  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    899  29b0				  -
    900  29b0				  -			;byte %00000000 ; HANDWRITTEN
    901  29b0				  -
    902  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    903  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    904  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    905  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    906  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    907  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    908  29b0				  -	      .byte	%00001010	; HANDWRITTEN
    909  29b0				  -	      .byte	%00000110	; HANDWRITTEN
    910  29b0				  -
    911  29b0				  -			;byte %00000000 ; HANDWRITTEN
    912  29b0				  -
    913  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    914  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    915  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    916  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    917  29b0				  -	      .byte	%00011100	; HANDWRITTEN
    918  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    919  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    920  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    921  29b0				  -
    922  29b0				  -	      ifconst	fontcharsHEX
    923  29b0				  -
    924  29b0				  -			;byte %00000000 ; HANDWRITTEN
    925  29b0				  -
    926  29b0				  -	      .byte	%00110110	; HANDWRITTEN
    927  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    928  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    929  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    930  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    931  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    932  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    933  29b0				  -	      .byte	%00001110	; HANDWRITTEN
    934  29b0				  -
    935  29b0				  -			;byte %00000000 ; HANDWRITTEN
    936  29b0				  -
    937  29b0				  -	      .byte	%11110000	; HANDWRITTEN
    938  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    939  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    940  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    941  29b0				  -	      .byte	%00111100	; HANDWRITTEN
    942  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    943  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    944  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    945  29b0				  -
    946  29b0				  -			;byte %00000000 ; HANDWRITTEN
    947  29b0				  -
    948  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    949  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    950  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    951  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    952  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    953  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    954  29b0				  -	      .byte	%00010100	; HANDWRITTEN
    955  29b0				  -	      .byte	%00001000	; HANDWRITTEN
    956  29b0				  -
    957  29b0				  -			;byte %00000000 ; HANDWRITTEN
    958  29b0				  -
    959  29b0				  -	      .byte	%01111000	; HANDWRITTEN
    960  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    961  29b0				  -	      .byte	%01000100	; HANDWRITTEN
    962  29b0				  -	      .byte	%00100100	; HANDWRITTEN
    963  29b0				  -	      .byte	%00100010	; HANDWRITTEN
    964  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    965  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    966  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    967  29b0				  -
    968  29b0				  -			;byte %00000000 ; HANDWRITTEN
    969  29b0				  -
    970  29b0				  -	      .byte	%00110000	; HANDWRITTEN
    971  29b0				  -	      .byte	%01001000	; HANDWRITTEN
    972  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    973  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    974  29b0				  -	      .byte	%00011000	; HANDWRITTEN
    975  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    976  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    977  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    978  29b0				  -
    979  29b0				  -			;byte %00000000 ; HANDWRITTEN
    980  29b0				  -
    981  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    982  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    983  29b0				  -	      .byte	%01000000	; HANDWRITTEN
    984  29b0				  -	      .byte	%00100000	; HANDWRITTEN
    985  29b0				  -	      .byte	%00111000	; HANDWRITTEN
    986  29b0				  -	      .byte	%00010000	; HANDWRITTEN
    987  29b0				  -	      .byte	%00010010	; HANDWRITTEN
    988  29b0				  -	      .byte	%00001100	; HANDWRITTEN
    989  29b0				  -
    990  29b0				  -			;byte %00000000 ; HANDWRITTEN
    991  29b0				  -			;byte %00000000 ; HANDWRITTEN
    992  29b0				  -			;byte %00000000 ; HANDWRITTEN
    993  29b0				  -			;byte %00000000 ; HANDWRITTEN
    994  29b0				  -
    995  29b0				  -	      endif		; fontcharsHEX
    996  29b0					      endif		; HANDWRITTEN
    997  29b0
    998  29b0				  -	      if	fontstyle == INTERRUPTED
    999  29b0				  -
   1000  29b0				  -			;byte %00000000 ; INTERRUPTED
   1001  29b0				  -
   1002  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1003  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1004  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1005  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1006  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1007  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1008  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1009  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1010  29b0				  -
   1011  29b0				  -			;byte %00000000 ; INTERRUPTED
   1012  29b0				  -
   1013  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1014  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1015  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1016  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1017  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1018  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1019  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1020  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1021  29b0				  -
   1022  29b0				  -			;byte %00000000 ; INTERRUPTED
   1023  29b0				  -
   1024  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1025  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1026  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1027  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1028  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1029  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1030  29b0				  -	      .byte	%01000110	; INTERRUPTED
   1031  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1032  29b0				  -
   1033  29b0				  -			;byte %00000000 ; INTERRUPTED
   1034  29b0				  -
   1035  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1036  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1037  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1038  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1039  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1040  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1041  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1042  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1043  29b0				  -
   1044  29b0				  -			;byte %00000000 ; INTERRUPTED
   1045  29b0				  -
   1046  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1047  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1048  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1049  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1050  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1051  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1052  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1053  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1054  29b0				  -
   1055  29b0				  -			;byte %00000000 ; INTERRUPTED
   1056  29b0				  -
   1057  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1058  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1059  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1060  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1061  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1062  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1063  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1064  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1065  29b0				  -
   1066  29b0				  -			;byte %00000000 ; INTERRUPTED
   1067  29b0				  -
   1068  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1069  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1070  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1071  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1072  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1073  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1074  29b0				  -	      .byte	%00110000	; INTERRUPTED
   1075  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1076  29b0				  -
   1077  29b0				  -			;byte %00000000 ; INTERRUPTED
   1078  29b0				  -
   1079  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1080  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1081  29b0				  -	      .byte	%00011000	; INTERRUPTED
   1082  29b0				  -	      .byte	%00011100	; INTERRUPTED
   1083  29b0				  -	      .byte	%00001110	; INTERRUPTED
   1084  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1085  29b0				  -	      .byte	%00000000	; INTERRUPTED
   1086  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1087  29b0				  -
   1088  29b0				  -			;byte %00000000 ; INTERRUPTED
   1089  29b0				  -
   1090  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1091  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1092  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1093  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1094  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1095  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1096  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1097  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1098  29b0				  -
   1099  29b0				  -			;byte %00000000 ; INTERRUPTED
   1100  29b0				  -
   1101  29b0				  -	      .byte	%00111000	; INTERRUPTED
   1102  29b0				  -	      .byte	%00001100	; INTERRUPTED
   1103  29b0				  -	      .byte	%00000110	; INTERRUPTED
   1104  29b0				  -	      .byte	%00110110	; INTERRUPTED
   1105  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1106  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1107  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1108  29b0				  -	      .byte	%00110100	; INTERRUPTED
   1109  29b0				  -
   1110  29b0				  -	      ifconst	fontcharsHEX
   1111  29b0				  -
   1112  29b0				  -			;byte %00000000 ; INTERRUPTED
   1113  29b0				  -
   1114  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1115  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1116  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1117  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1118  29b0				  -	      .byte	%01110110	; INTERRUPTED
   1119  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1120  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1121  29b0				  -	      .byte	%00111100	; INTERRUPTED
   1122  29b0				  -
   1123  29b0				  -			;byte %00000000 ; INTERRUPTED
   1124  29b0				  -
   1125  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1126  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1127  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1128  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1129  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1130  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1131  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1132  29b0				  -	      .byte	%01110100	; INTERRUPTED
   1133  29b0				  -
   1134  29b0				  -			;byte %00000000 ; INTERRUPTED
   1135  29b0				  -
   1136  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1137  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1138  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1139  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1140  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1141  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1142  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1143  29b0				  -	      .byte	%00101100	; INTERRUPTED
   1144  29b0				  -
   1145  29b0				  -			;byte %00000000 ; INTERRUPTED
   1146  29b0				  -
   1147  29b0				  -	      .byte	%01111100	; INTERRUPTED
   1148  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1149  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1150  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1151  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1152  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1153  29b0				  -	      .byte	%01100110	; INTERRUPTED
   1154  29b0				  -	      .byte	%01101100	; INTERRUPTED
   1155  29b0				  -
   1156  29b0				  -			;byte %00000000 ; INTERRUPTED
   1157  29b0				  -
   1158  29b0				  -	      .byte	%01111110	; INTERRUPTED
   1159  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1160  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1161  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1162  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1163  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1164  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1165  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1166  29b0				  -
   1167  29b0				  -			;byte %00000000 ; INTERRUPTED
   1168  29b0				  -
   1169  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1170  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1171  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1172  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1173  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1174  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1175  29b0				  -	      .byte	%01100000	; INTERRUPTED
   1176  29b0				  -	      .byte	%01101110	; INTERRUPTED
   1177  29b0				  -
   1178  29b0				  -			;byte %00000000 ; INTERRUPTED
   1179  29b0				  -			;byte %00000000 ; INTERRUPTED
   1180  29b0				  -			;byte %00000000 ; INTERRUPTED
   1181  29b0				  -			;byte %00000000 ; INTERRUPTED
   1182  29b0				  -
   1183  29b0				  -	      endif		; fontcharsHEX
   1184  29b0					      endif		; INTERRUPTED
   1185  29b0
   1186  29b0
   1187  29b0				  -	      if	fontstyle == TINY
   1188  29b0				  -
   1189  29b0				  -			;byte %00000000 ; TINY
   1190  29b0				  -
   1191  29b0				  -	      .byte	%00000000	; TINY
   1192  29b0				  -	      .byte	%00111000	; TINY
   1193  29b0				  -	      .byte	%00101000	; TINY
   1194  29b0				  -	      .byte	%00101000	; TINY
   1195  29b0				  -	      .byte	%00101000	; TINY
   1196  29b0				  -	      .byte	%00111000	; TINY
   1197  29b0				  -	      .byte	%00000000	; TINY
   1198  29b0				  -	      .byte	%00000000	; TINY
   1199  29b0				  -
   1200  29b0				  -			;byte %00000000 ; TINY
   1201  29b0				  -
   1202  29b0				  -	      .byte	%00000000	; TINY
   1203  29b0				  -	      .byte	%00010000	; TINY
   1204  29b0				  -	      .byte	%00010000	; TINY
   1205  29b0				  -	      .byte	%00010000	; TINY
   1206  29b0				  -	      .byte	%00010000	; TINY
   1207  29b0				  -	      .byte	%00010000	; TINY
   1208  29b0				  -	      .byte	%00000000	; TINY
   1209  29b0				  -	      .byte	%00000000	; TINY
   1210  29b0				  -
   1211  29b0				  -			;byte %00000000 ; TINY
   1212  29b0				  -
   1213  29b0				  -	      .byte	%00000000	; TINY
   1214  29b0				  -	      .byte	%00111000	; TINY
   1215  29b0				  -	      .byte	%00100000	; TINY
   1216  29b0				  -	      .byte	%00111000	; TINY
   1217  29b0				  -	      .byte	%00001000	; TINY
   1218  29b0				  -	      .byte	%00111000	; TINY
   1219  29b0				  -	      .byte	%00000000	; TINY
   1220  29b0				  -	      .byte	%00000000	; TINY
   1221  29b0				  -
   1222  29b0				  -			;byte %00000000 ; TINY
   1223  29b0				  -
   1224  29b0				  -	      .byte	%00000000	; TINY
   1225  29b0				  -	      .byte	%00111000	; TINY
   1226  29b0				  -	      .byte	%00001000	; TINY
   1227  29b0				  -	      .byte	%00111000	; TINY
   1228  29b0				  -	      .byte	%00001000	; TINY
   1229  29b0				  -	      .byte	%00111000	; TINY
   1230  29b0				  -	      .byte	%00000000	; TINY
   1231  29b0				  -	      .byte	%00000000	; TINY
   1232  29b0				  -
   1233  29b0				  -			;byte %00000000 ; TINY
   1234  29b0				  -
   1235  29b0				  -	      .byte	%00000000	; TINY
   1236  29b0				  -	      .byte	%00001000	; TINY
   1237  29b0				  -	      .byte	%00001000	; TINY
   1238  29b0				  -	      .byte	%00111000	; TINY
   1239  29b0				  -	      .byte	%00101000	; TINY
   1240  29b0				  -	      .byte	%00101000	; TINY
   1241  29b0				  -	      .byte	%00000000	; TINY
   1242  29b0				  -	      .byte	%00000000	; TINY
   1243  29b0				  -
   1244  29b0				  -			;byte %00000000 ; TINY
   1245  29b0				  -
   1246  29b0				  -	      .byte	%00000000	; TINY
   1247  29b0				  -	      .byte	%00111000	; TINY
   1248  29b0				  -	      .byte	%00001000	; TINY
   1249  29b0				  -	      .byte	%00111000	; TINY
   1250  29b0				  -	      .byte	%00100000	; TINY
   1251  29b0				  -	      .byte	%00111000	; TINY
   1252  29b0				  -	      .byte	%00000000	; TINY
   1253  29b0				  -	      .byte	%00000000	; TINY
   1254  29b0				  -
   1255  29b0				  -			;byte %00000000 ; TINY
   1256  29b0				  -
   1257  29b0				  -	      .byte	%00000000	; TINY
   1258  29b0				  -	      .byte	%00111000	; TINY
   1259  29b0				  -	      .byte	%00101000	; TINY
   1260  29b0				  -	      .byte	%00111000	; TINY
   1261  29b0				  -	      .byte	%00100000	; TINY
   1262  29b0				  -	      .byte	%00111000	; TINY
   1263  29b0				  -	      .byte	%00000000	; TINY
   1264  29b0				  -	      .byte	%00000000	; TINY
   1265  29b0				  -
   1266  29b0				  -			;byte %00000000 ; TINY
   1267  29b0				  -
   1268  29b0				  -	      .byte	%00000000	; TINY
   1269  29b0				  -	      .byte	%00001000	; TINY
   1270  29b0				  -	      .byte	%00001000	; TINY
   1271  29b0				  -	      .byte	%00001000	; TINY
   1272  29b0				  -	      .byte	%00001000	; TINY
   1273  29b0				  -	      .byte	%00111000	; TINY
   1274  29b0				  -	      .byte	%00000000	; TINY
   1275  29b0				  -	      .byte	%00000000	; TINY
   1276  29b0				  -
   1277  29b0				  -			;byte %00000000 ; TINY
   1278  29b0				  -
   1279  29b0				  -	      .byte	%00000000	; TINY
   1280  29b0				  -	      .byte	%00111000	; TINY
   1281  29b0				  -	      .byte	%00101000	; TINY
   1282  29b0				  -	      .byte	%00111000	; TINY
   1283  29b0				  -	      .byte	%00101000	; TINY
   1284  29b0				  -	      .byte	%00111000	; TINY
   1285  29b0				  -	      .byte	%00000000	; TINY
   1286  29b0				  -	      .byte	%00000000	; TINY
   1287  29b0				  -
   1288  29b0				  -			;byte %00000000 ; TINY
   1289  29b0				  -
   1290  29b0				  -	      .byte	%00000000	; TINY
   1291  29b0				  -	      .byte	%00001000	; TINY
   1292  29b0				  -	      .byte	%00001000	; TINY
   1293  29b0				  -	      .byte	%00111000	; TINY
   1294  29b0				  -	      .byte	%00101000	; TINY
   1295  29b0				  -	      .byte	%00111000	; TINY
   1296  29b0				  -	      .byte	%00000000	; TINY
   1297  29b0				  -	      .byte	%00000000	; TINY
   1298  29b0				  -
   1299  29b0				  -	      ifconst	fontcharsHEX
   1300  29b0				  -
   1301  29b0				  -			;byte %00000000 ; TINY
   1302  29b0				  -
   1303  29b0				  -	      .byte	%00000000	; TINY
   1304  29b0				  -	      .byte	%00101000	; TINY
   1305  29b0				  -	      .byte	%00101000	; TINY
   1306  29b0				  -	      .byte	%00111000	; TINY
   1307  29b0				  -	      .byte	%00101000	; TINY
   1308  29b0				  -	      .byte	%00111000	; TINY
   1309  29b0				  -	      .byte	%00000000	; TINY
   1310  29b0				  -	      .byte	%00000000	; TINY
   1311  29b0				  -
   1312  29b0				  -			;byte %00000000 ; TINY
   1313  29b0				  -
   1314  29b0				  -	      .byte	%00000000	; TINY
   1315  29b0				  -	      .byte	%00110000	; TINY
   1316  29b0				  -	      .byte	%00101000	; TINY
   1317  29b0				  -	      .byte	%00110000	; TINY
   1318  29b0				  -	      .byte	%00101000	; TINY
   1319  29b0				  -	      .byte	%00110000	; TINY
   1320  29b0				  -	      .byte	%00000000	; TINY
   1321  29b0				  -	      .byte	%00000000	; TINY
   1322  29b0				  -
   1323  29b0				  -			;byte %00000000 ; TINY
   1324  29b0				  -
   1325  29b0				  -	      .byte	%00000000	; TINY
   1326  29b0				  -	      .byte	%00111000	; TINY
   1327  29b0				  -	      .byte	%00100000	; TINY
   1328  29b0				  -	      .byte	%00100000	; TINY
   1329  29b0				  -	      .byte	%00100000	; TINY
   1330  29b0				  -	      .byte	%00111000	; TINY
   1331  29b0				  -	      .byte	%00000000	; TINY
   1332  29b0				  -	      .byte	%00000000	; TINY
   1333  29b0				  -
   1334  29b0				  -			;byte %00000000 ; TINY
   1335  29b0				  -
   1336  29b0				  -	      .byte	%00000000	; TINY
   1337  29b0				  -	      .byte	%00110000	; TINY
   1338  29b0				  -	      .byte	%00101000	; TINY
   1339  29b0				  -	      .byte	%00101000	; TINY
   1340  29b0				  -	      .byte	%00101000	; TINY
   1341  29b0				  -	      .byte	%00110000	; TINY
   1342  29b0				  -	      .byte	%00000000	; TINY
   1343  29b0				  -	      .byte	%00000000	; TINY
   1344  29b0				  -
   1345  29b0				  -			;byte %00000000 ; TINY
   1346  29b0				  -
   1347  29b0				  -	      .byte	%00000000	; TINY
   1348  29b0				  -	      .byte	%00111000	; TINY
   1349  29b0				  -	      .byte	%00100000	; TINY
   1350  29b0				  -	      .byte	%00111000	; TINY
   1351  29b0				  -	      .byte	%00100000	; TINY
   1352  29b0				  -	      .byte	%00111000	; TINY
   1353  29b0				  -	      .byte	%00000000	; TINY
   1354  29b0				  -	      .byte	%00000000	; TINY
   1355  29b0				  -
   1356  29b0				  -			;byte %00000000 ; TINY
   1357  29b0				  -
   1358  29b0				  -	      .byte	%00000000	; TINY
   1359  29b0				  -	      .byte	%00100000	; TINY
   1360  29b0				  -	      .byte	%00100000	; TINY
   1361  29b0				  -	      .byte	%00111000	; TINY
   1362  29b0				  -	      .byte	%00100000	; TINY
   1363  29b0				  -	      .byte	%00111000	; TINY
   1364  29b0				  -	      .byte	%00000000	; TINY
   1365  29b0				  -	      .byte	%00000000	; TINY
   1366  29b0				  -
   1367  29b0				  -			;byte %00000000 ; TINY
   1368  29b0				  -			;byte %00000000 ; TINY
   1369  29b0				  -			;byte %00000000 ; TINY
   1370  29b0				  -			;byte %00000000 ; TINY
   1371  29b0				  -
   1372  29b0				  -	      endif		; fontcharsHEX
   1373  29b0					      endif		; TINY
   1374  29b0
   1375  29b0				  -	      if	fontstyle == RETROPUTER
   1376  29b0				  -
   1377  29b0				  -			;byte %00000000 ; RETROPUTER
   1378  29b0				  -
   1379  29b0				  -	      .byte	%01111110	; RETROPUTER
   1380  29b0				  -	      .byte	%01000110	; RETROPUTER
   1381  29b0				  -	      .byte	%01000110	; RETROPUTER
   1382  29b0				  -	      .byte	%01000110	; RETROPUTER
   1383  29b0				  -	      .byte	%01100010	; RETROPUTER
   1384  29b0				  -	      .byte	%01100010	; RETROPUTER
   1385  29b0				  -	      .byte	%01100010	; RETROPUTER
   1386  29b0				  -	      .byte	%01111110	; RETROPUTER
   1387  29b0				  -
   1388  29b0				  -			;byte %00000000 ; RETROPUTER
   1389  29b0				  -
   1390  29b0				  -	      .byte	%00111000	; RETROPUTER
   1391  29b0				  -	      .byte	%00111000	; RETROPUTER
   1392  29b0				  -	      .byte	%00111000	; RETROPUTER
   1393  29b0				  -	      .byte	%00111000	; RETROPUTER
   1394  29b0				  -	      .byte	%00011000	; RETROPUTER
   1395  29b0				  -	      .byte	%00011000	; RETROPUTER
   1396  29b0				  -	      .byte	%00011000	; RETROPUTER
   1397  29b0				  -	      .byte	%00011000	; RETROPUTER
   1398  29b0				  -
   1399  29b0				  -			;byte %00000000 ; RETROPUTER
   1400  29b0				  -
   1401  29b0				  -	      .byte	%01111110	; RETROPUTER
   1402  29b0				  -	      .byte	%01100000	; RETROPUTER
   1403  29b0				  -	      .byte	%01100000	; RETROPUTER
   1404  29b0				  -	      .byte	%01100000	; RETROPUTER
   1405  29b0				  -	      .byte	%00111110	; RETROPUTER
   1406  29b0				  -	      .byte	%00000010	; RETROPUTER
   1407  29b0				  -	      .byte	%01000010	; RETROPUTER
   1408  29b0				  -	      .byte	%01111110	; RETROPUTER
   1409  29b0				  -
   1410  29b0				  -			;byte %00000000 ; RETROPUTER
   1411  29b0				  -
   1412  29b0				  -	      .byte	%01111110	; RETROPUTER
   1413  29b0				  -	      .byte	%01000110	; RETROPUTER
   1414  29b0				  -	      .byte	%00000110	; RETROPUTER
   1415  29b0				  -	      .byte	%00000110	; RETROPUTER
   1416  29b0				  -	      .byte	%00111110	; RETROPUTER
   1417  29b0				  -	      .byte	%00000010	; RETROPUTER
   1418  29b0				  -	      .byte	%01000010	; RETROPUTER
   1419  29b0				  -	      .byte	%01111110	; RETROPUTER
   1420  29b0				  -
   1421  29b0				  -			;byte %00000000 ; RETROPUTER
   1422  29b0				  -
   1423  29b0				  -	      .byte	%00001100	; RETROPUTER
   1424  29b0				  -	      .byte	%00001100	; RETROPUTER
   1425  29b0				  -	      .byte	%00001100	; RETROPUTER
   1426  29b0				  -	      .byte	%01111110	; RETROPUTER
   1427  29b0				  -	      .byte	%01000100	; RETROPUTER
   1428  29b0				  -	      .byte	%01000100	; RETROPUTER
   1429  29b0				  -	      .byte	%01000100	; RETROPUTER
   1430  29b0				  -	      .byte	%00000100	; RETROPUTER
   1431  29b0				  -
   1432  29b0				  -			;byte %00000000 ; RETROPUTER
   1433  29b0				  -
   1434  29b0				  -	      .byte	%01111110	; RETROPUTER
   1435  29b0				  -	      .byte	%01000110	; RETROPUTER
   1436  29b0				  -	      .byte	%00000110	; RETROPUTER
   1437  29b0				  -	      .byte	%00000110	; RETROPUTER
   1438  29b0				  -	      .byte	%01111100	; RETROPUTER
   1439  29b0				  -	      .byte	%01000000	; RETROPUTER
   1440  29b0				  -	      .byte	%01000000	; RETROPUTER
   1441  29b0				  -	      .byte	%01111110	; RETROPUTER
   1442  29b0				  -
   1443  29b0				  -			;byte %00000000 ; RETROPUTER
   1444  29b0				  -
   1445  29b0				  -	      .byte	%01111110	; RETROPUTER
   1446  29b0				  -	      .byte	%01000110	; RETROPUTER
   1447  29b0				  -	      .byte	%01000110	; RETROPUTER
   1448  29b0				  -	      .byte	%01000110	; RETROPUTER
   1449  29b0				  -	      .byte	%01111100	; RETROPUTER
   1450  29b0				  -	      .byte	%01000000	; RETROPUTER
   1451  29b0				  -	      .byte	%01000010	; RETROPUTER
   1452  29b0				  -	      .byte	%01111110	; RETROPUTER
   1453  29b0				  -
   1454  29b0				  -			;byte %00000000 ; RETROPUTER
   1455  29b0				  -
   1456  29b0				  -	      .byte	%00001100	; RETROPUTER
   1457  29b0				  -	      .byte	%00001100	; RETROPUTER
   1458  29b0				  -	      .byte	%00001100	; RETROPUTER
   1459  29b0				  -	      .byte	%00001100	; RETROPUTER
   1460  29b0				  -	      .byte	%00000100	; RETROPUTER
   1461  29b0				  -	      .byte	%00000010	; RETROPUTER
   1462  29b0				  -	      .byte	%01000010	; RETROPUTER
   1463  29b0				  -	      .byte	%01111110	; RETROPUTER
   1464  29b0				  -
   1465  29b0				  -			;byte %00000000 ; RETROPUTER
   1466  29b0				  -
   1467  29b0				  -	      .byte	%01111110	; RETROPUTER
   1468  29b0				  -	      .byte	%01000110	; RETROPUTER
   1469  29b0				  -	      .byte	%01000110	; RETROPUTER
   1470  29b0				  -	      .byte	%01000110	; RETROPUTER
   1471  29b0				  -	      .byte	%01111110	; RETROPUTER
   1472  29b0				  -	      .byte	%01000010	; RETROPUTER
   1473  29b0				  -	      .byte	%01000010	; RETROPUTER
   1474  29b0				  -	      .byte	%01111110	; RETROPUTER
   1475  29b0				  -
   1476  29b0				  -			;byte %00000000 ; RETROPUTER
   1477  29b0				  -
   1478  29b0				  -	      .byte	%00000110	; RETROPUTER
   1479  29b0				  -	      .byte	%00000110	; RETROPUTER
   1480  29b0				  -	      .byte	%00000110	; RETROPUTER
   1481  29b0				  -	      .byte	%00000010	; RETROPUTER
   1482  29b0				  -	      .byte	%01111110	; RETROPUTER
   1483  29b0				  -	      .byte	%01000010	; RETROPUTER
   1484  29b0				  -	      .byte	%01000010	; RETROPUTER
   1485  29b0				  -	      .byte	%01111110	; RETROPUTER
   1486  29b0				  -
   1487  29b0				  -	      ifconst	fontcharsHEX
   1488  29b0				  -
   1489  29b0				  -			;byte %00000000  ; RETROPUTER
   1490  29b0				  -
   1491  29b0				  -	      .byte	%01100010	; RETROPUTER
   1492  29b0				  -	      .byte	%01100010	; RETROPUTER
   1493  29b0				  -	      .byte	%01100010	; RETROPUTER
   1494  29b0				  -	      .byte	%01000010	; RETROPUTER
   1495  29b0				  -	      .byte	%01111110	; RETROPUTER
   1496  29b0				  -	      .byte	%01000010	; RETROPUTER
   1497  29b0				  -	      .byte	%01000010	; RETROPUTER
   1498  29b0				  -	      .byte	%01111110	; RETROPUTER
   1499  29b0				  -
   1500  29b0				  -			;byte %00000000 ; RETROPUTER
   1501  29b0				  -
   1502  29b0				  -	      .byte	%01111110	; RETROPUTER
   1503  29b0				  -	      .byte	%01100010	; RETROPUTER
   1504  29b0				  -	      .byte	%01100010	; RETROPUTER
   1505  29b0				  -	      .byte	%01000010	; RETROPUTER
   1506  29b0				  -	      .byte	%01111100	; RETROPUTER
   1507  29b0				  -	      .byte	%01000010	; RETROPUTER
   1508  29b0				  -	      .byte	%01000010	; RETROPUTER
   1509  29b0				  -	      .byte	%01111110	; RETROPUTER
   1510  29b0				  -
   1511  29b0				  -			;byte %00000000 ; RETROPUTER
   1512  29b0				  -
   1513  29b0				  -	      .byte	%01111110	; RETROPUTER
   1514  29b0				  -	      .byte	%01100010	; RETROPUTER
   1515  29b0				  -	      .byte	%01100010	; RETROPUTER
   1516  29b0				  -	      .byte	%01100000	; RETROPUTER
   1517  29b0				  -	      .byte	%01000000	; RETROPUTER
   1518  29b0				  -	      .byte	%01000000	; RETROPUTER
   1519  29b0				  -	      .byte	%01000010	; RETROPUTER
   1520  29b0				  -	      .byte	%01111110	; RETROPUTER
   1521  29b0				  -
   1522  29b0				  -			;byte %00000000 ; RETROPUTER
   1523  29b0				  -
   1524  29b0				  -	      .byte	%01111100	; RETROPUTER
   1525  29b0				  -	      .byte	%01100010	; RETROPUTER
   1526  29b0				  -	      .byte	%01100010	; RETROPUTER
   1527  29b0				  -	      .byte	%01100010	; RETROPUTER
   1528  29b0				  -	      .byte	%01000010	; RETROPUTER
   1529  29b0				  -	      .byte	%01000010	; RETROPUTER
   1530  29b0				  -	      .byte	%01000010	; RETROPUTER
   1531  29b0				  -	      .byte	%01111100	; RETROPUTER
   1532  29b0				  -
   1533  29b0				  -			;byte %00000000 ; RETROPUTER
   1534  29b0				  -
   1535  29b0				  -	      .byte	%01111110	; RETROPUTER
   1536  29b0				  -	      .byte	%01100010	; RETROPUTER
   1537  29b0				  -	      .byte	%01100000	; RETROPUTER
   1538  29b0				  -	      .byte	%01000000	; RETROPUTER
   1539  29b0				  -	      .byte	%01111100	; RETROPUTER
   1540  29b0				  -	      .byte	%01000000	; RETROPUTER
   1541  29b0				  -	      .byte	%01000010	; RETROPUTER
   1542  29b0				  -	      .byte	%01111110	; RETROPUTER
   1543  29b0				  -
   1544  29b0				  -			;byte %00000000 ; RETROPUTER
   1545  29b0				  -
   1546  29b0				  -	      .byte	%01100000	; RETROPUTER
   1547  29b0				  -	      .byte	%01100000	; RETROPUTER
   1548  29b0				  -	      .byte	%01100000	; RETROPUTER
   1549  29b0				  -	      .byte	%01000000	; RETROPUTER
   1550  29b0				  -	      .byte	%01111100	; RETROPUTER
   1551  29b0				  -	      .byte	%01000000	; RETROPUTER
   1552  29b0				  -	      .byte	%01000010	; RETROPUTER
   1553  29b0				  -	      .byte	%01111110	; RETROPUTER
   1554  29b0				  -
   1555  29b0				  -			;byte %00000000 ; RETROPUTER
   1556  29b0				  -			;byte %00000000 ; RETROPUTER
   1557  29b0				  -			;byte %00000000 ; RETROPUTER
   1558  29b0				  -			;byte %00000000 ; RETROPUTER
   1559  29b0				  -
   1560  29b0				  -	      endif		; fontcharsHEX
   1561  29b0					      endif		; RETROPUTER
   1562  29b0
   1563  29b0				  -	      if	fontstyle == CURVES
   1564  29b0				  -
   1565  29b0				  -			;byte %00000000 ; CURVES
   1566  29b0				  -
   1567  29b0				  -	      .byte	%00111100	; CURVES
   1568  29b0				  -	      .byte	%01111110	; CURVES
   1569  29b0				  -	      .byte	%01100110	; CURVES
   1570  29b0				  -	      .byte	%01100110	; CURVES
   1571  29b0				  -	      .byte	%01100110	; CURVES
   1572  29b0				  -	      .byte	%01100110	; CURVES
   1573  29b0				  -	      .byte	%01111110	; CURVES
   1574  29b0				  -	      .byte	%00111100	; CURVES
   1575  29b0				  -
   1576  29b0				  -			;byte %00000000 ; CURVES
   1577  29b0				  -
   1578  29b0				  -	      .byte	%00011000	; CURVES
   1579  29b0				  -	      .byte	%00011000	; CURVES
   1580  29b0				  -	      .byte	%00011000	; CURVES
   1581  29b0				  -	      .byte	%00011000	; CURVES
   1582  29b0				  -	      .byte	%00011000	; CURVES
   1583  29b0				  -	      .byte	%00011000	; CURVES
   1584  29b0				  -	      .byte	%01111000	; CURVES
   1585  29b0				  -	      .byte	%01110000	; CURVES
   1586  29b0				  -
   1587  29b0				  -			;byte %00000000 ; CURVES
   1588  29b0				  -
   1589  29b0				  -	      .byte	%01111110	; CURVES
   1590  29b0				  -	      .byte	%01111110	; CURVES
   1591  29b0				  -	      .byte	%01100000	; CURVES
   1592  29b0				  -	      .byte	%01111100	; CURVES
   1593  29b0				  -	      .byte	%00111110	; CURVES
   1594  29b0				  -	      .byte	%00000110	; CURVES
   1595  29b0				  -	      .byte	%01111110	; CURVES
   1596  29b0				  -	      .byte	%01111100	; CURVES
   1597  29b0				  -
   1598  29b0				  -			;byte %00000000 ; CURVES
   1599  29b0				  -
   1600  29b0				  -	      .byte	%01111100	; CURVES
   1601  29b0				  -	      .byte	%01111110	; CURVES
   1602  29b0				  -	      .byte	%00001110	; CURVES
   1603  29b0				  -	      .byte	%00111100	; CURVES
   1604  29b0				  -	      .byte	%00111100	; CURVES
   1605  29b0				  -	      .byte	%00001110	; CURVES
   1606  29b0				  -	      .byte	%01111110	; CURVES
   1607  29b0				  -	      .byte	%01111100	; CURVES
   1608  29b0				  -
   1609  29b0				  -			;byte %00000000 ; CURVES
   1610  29b0				  -
   1611  29b0				  -	      .byte	%00000110	; CURVES
   1612  29b0				  -	      .byte	%00000110	; CURVES
   1613  29b0				  -	      .byte	%00111110	; CURVES
   1614  29b0				  -	      .byte	%01111110	; CURVES
   1615  29b0				  -	      .byte	%01100110	; CURVES
   1616  29b0				  -	      .byte	%01100110	; CURVES
   1617  29b0				  -	      .byte	%01100110	; CURVES
   1618  29b0				  -	      .byte	%01100110	; CURVES
   1619  29b0				  -
   1620  29b0				  -			;byte %00000000 ; CURVES
   1621  29b0				  -
   1622  29b0				  -	      .byte	%01111100	; CURVES
   1623  29b0				  -	      .byte	%01111110	; CURVES
   1624  29b0				  -	      .byte	%00000110	; CURVES
   1625  29b0				  -	      .byte	%01111110	; CURVES
   1626  29b0				  -	      .byte	%01111100	; CURVES
   1627  29b0				  -	      .byte	%01100000	; CURVES
   1628  29b0				  -	      .byte	%01111110	; CURVES
   1629  29b0				  -	      .byte	%01111110	; CURVES
   1630  29b0				  -
   1631  29b0				  -			;byte %00000000 ; CURVES
   1632  29b0				  -
   1633  29b0				  -	      .byte	%00111100	; CURVES
   1634  29b0				  -	      .byte	%01111110	; CURVES
   1635  29b0				  -	      .byte	%01100110	; CURVES
   1636  29b0				  -	      .byte	%01111110	; CURVES
   1637  29b0				  -	      .byte	%01111100	; CURVES
   1638  29b0				  -	      .byte	%01100000	; CURVES
   1639  29b0				  -	      .byte	%01111110	; CURVES
   1640  29b0				  -	      .byte	%00111110	; CURVES
   1641  29b0				  -
   1642  29b0				  -			;byte %00000000 ; CURVES
   1643  29b0				  -
   1644  29b0				  -	      .byte	%00000110	; CURVES
   1645  29b0				  -	      .byte	%00000110	; CURVES
   1646  29b0				  -	      .byte	%00000110	; CURVES
   1647  29b0				  -	      .byte	%00000110	; CURVES
   1648  29b0				  -	      .byte	%00000110	; CURVES
   1649  29b0				  -	      .byte	%01100110	; CURVES
   1650  29b0				  -	      .byte	%01111110	; CURVES
   1651  29b0				  -	      .byte	%00111100	; CURVES
   1652  29b0				  -
   1653  29b0				  -			;byte %00000000 ; CURVES
   1654  29b0				  -
   1655  29b0				  -	      .byte	%00111100	; CURVES
   1656  29b0				  -	      .byte	%01111110	; CURVES
   1657  29b0				  -	      .byte	%01100110	; CURVES
   1658  29b0				  -	      .byte	%01111110	; CURVES
   1659  29b0				  -	      .byte	%00111100	; CURVES
   1660  29b0				  -	      .byte	%01100110	; CURVES
   1661  29b0				  -	      .byte	%01111110	; CURVES
   1662  29b0				  -	      .byte	%00111100	; CURVES
   1663  29b0				  -
   1664  29b0				  -			;byte %00000000 ; CURVES
   1665  29b0				  -
   1666  29b0				  -	      .byte	%01111100	; CURVES
   1667  29b0				  -	      .byte	%01111110	; CURVES
   1668  29b0				  -	      .byte	%00000110	; CURVES
   1669  29b0				  -	      .byte	%00111110	; CURVES
   1670  29b0				  -	      .byte	%01111110	; CURVES
   1671  29b0				  -	      .byte	%01100110	; CURVES
   1672  29b0				  -	      .byte	%01111110	; CURVES
   1673  29b0				  -	      .byte	%00111100	; CURVES
   1674  29b0				  -
   1675  29b0				  -	      ifconst	fontcharsHEX
   1676  29b0				  -
   1677  29b0				  -			;byte %00000000 ; CURVES
   1678  29b0				  -
   1679  29b0				  -	      .byte	%01100110	; CURVES
   1680  29b0				  -	      .byte	%01100110	; CURVES
   1681  29b0				  -	      .byte	%01111110	; CURVES
   1682  29b0				  -	      .byte	%01111110	; CURVES
   1683  29b0				  -	      .byte	%01100110	; CURVES
   1684  29b0				  -	      .byte	%01100110	; CURVES
   1685  29b0				  -	      .byte	%01111110	; CURVES
   1686  29b0				  -	      .byte	%00111100	; CURVES
   1687  29b0				  -
   1688  29b0				  -			;byte %00000000 ; CURVES
   1689  29b0				  -
   1690  29b0				  -	      .byte	%01111100	; CURVES
   1691  29b0				  -	      .byte	%01111110	; CURVES
   1692  29b0				  -	      .byte	%01100110	; CURVES
   1693  29b0				  -	      .byte	%01111110	; CURVES
   1694  29b0				  -	      .byte	%01111100	; CURVES
   1695  29b0				  -	      .byte	%01100110	; CURVES
   1696  29b0				  -	      .byte	%01111110	; CURVES
   1697  29b0				  -	      .byte	%01111100	; CURVES
   1698  29b0				  -
   1699  29b0				  -			;byte %00000000 ; CURVES
   1700  29b0				  -
   1701  29b0				  -	      .byte	%00111110	; CURVES
   1702  29b0				  -	      .byte	%01111110	; CURVES
   1703  29b0				  -	      .byte	%01100000	; CURVES
   1704  29b0				  -	      .byte	%01100000	; CURVES
   1705  29b0				  -	      .byte	%01100000	; CURVES
   1706  29b0				  -	      .byte	%01100000	; CURVES
   1707  29b0				  -	      .byte	%01111110	; CURVES
   1708  29b0				  -	      .byte	%00111110	; CURVES
   1709  29b0				  -
   1710  29b0				  -			;byte %00000000 ; CURVES
   1711  29b0				  -
   1712  29b0				  -	      .byte	%01111100	; CURVES
   1713  29b0				  -	      .byte	%01111110	; CURVES
   1714  29b0				  -	      .byte	%01100110	; CURVES
   1715  29b0				  -	      .byte	%01100110	; CURVES
   1716  29b0				  -	      .byte	%01100110	; CURVES
   1717  29b0				  -	      .byte	%01100110	; CURVES
   1718  29b0				  -	      .byte	%01111110	; CURVES
   1719  29b0				  -	      .byte	%01111100	; CURVES
   1720  29b0				  -
   1721  29b0				  -			;byte %00000000 ; CURVES
   1722  29b0				  -
   1723  29b0				  -	      .byte	%00111110	; CURVES
   1724  29b0				  -	      .byte	%01111110	; CURVES
   1725  29b0				  -	      .byte	%01100000	; CURVES
   1726  29b0				  -	      .byte	%01111100	; CURVES
   1727  29b0				  -	      .byte	%01111100	; CURVES
   1728  29b0				  -	      .byte	%01100000	; CURVES
   1729  29b0				  -	      .byte	%01111110	; CURVES
   1730  29b0				  -	      .byte	%00111110	; CURVES
   1731  29b0				  -
   1732  29b0				  -			;byte %00000000 ; CURVES
   1733  29b0				  -
   1734  29b0				  -	      .byte	%01100000	; CURVES
   1735  29b0				  -	      .byte	%01100000	; CURVES
   1736  29b0				  -	      .byte	%01100000	; CURVES
   1737  29b0				  -	      .byte	%01111100	; CURVES
   1738  29b0				  -	      .byte	%01111100	; CURVES
   1739  29b0				  -	      .byte	%01100000	; CURVES
   1740  29b0				  -	      .byte	%01111110	; CURVES
   1741  29b0				  -	      .byte	%00111110	; CURVES
   1742  29b0				  -
   1743  29b0				  -			;byte %00000000 ; CURVES
   1744  29b0				  -			;byte %00000000 ; CURVES
   1745  29b0				  -			;byte %00000000 ; CURVES
   1746  29b0				  -			;byte %00000000 ; CURVES
   1747  29b0				  -
   1748  29b0				  -	      endif		; fontcharsHEX 
   1749  29b0					      endif		; CURVES
   1750  29b0
   1751  29b0
   1752  29b0				  -	      if	fontstyle == HUSKY
   1753  29b0				  -
   1754  29b0				  -			;byte %00000000 ; HUSKY
   1755  29b0				  -
   1756  29b0				  -	      .byte	%01111100	; HUSKY
   1757  29b0				  -	      .byte	%11111110	; HUSKY
   1758  29b0				  -	      .byte	%11101110	; HUSKY
   1759  29b0				  -	      .byte	%11101110	; HUSKY
   1760  29b0				  -	      .byte	%11101110	; HUSKY
   1761  29b0				  -	      .byte	%11101110	; HUSKY
   1762  29b0				  -	      .byte	%11111110	; HUSKY
   1763  29b0				  -	      .byte	%01111100	; HUSKY
   1764  29b0				  -
   1765  29b0				  -			;byte %00000000 ; HUSKY
   1766  29b0				  -
   1767  29b0				  -	      .byte	%00111000	; HUSKY
   1768  29b0				  -	      .byte	%00111000	; HUSKY
   1769  29b0				  -	      .byte	%00111000	; HUSKY
   1770  29b0				  -	      .byte	%00111000	; HUSKY
   1771  29b0				  -	      .byte	%00111000	; HUSKY
   1772  29b0				  -	      .byte	%00111000	; HUSKY
   1773  29b0				  -	      .byte	%00111000	; HUSKY
   1774  29b0				  -	      .byte	%00111000	; HUSKY
   1775  29b0				  -
   1776  29b0				  -			;byte %00000000 ; HUSKY
   1777  29b0				  -
   1778  29b0				  -	      .byte	%11111110	; HUSKY
   1779  29b0				  -	      .byte	%11111110	; HUSKY
   1780  29b0				  -	      .byte	%11100000	; HUSKY
   1781  29b0				  -	      .byte	%11111100	; HUSKY
   1782  29b0				  -	      .byte	%01111110	; HUSKY
   1783  29b0				  -	      .byte	%00001110	; HUSKY
   1784  29b0				  -	      .byte	%11111110	; HUSKY
   1785  29b0				  -	      .byte	%11111100	; HUSKY
   1786  29b0				  -
   1787  29b0				  -			;byte %00000000 ; HUSKY
   1788  29b0				  -
   1789  29b0				  -	      .byte	%11111100	; HUSKY
   1790  29b0				  -	      .byte	%11111110	; HUSKY
   1791  29b0				  -	      .byte	%00001110	; HUSKY
   1792  29b0				  -	      .byte	%11111100	; HUSKY
   1793  29b0				  -	      .byte	%11111100	; HUSKY
   1794  29b0				  -	      .byte	%00001110	; HUSKY
   1795  29b0				  -	      .byte	%11111110	; HUSKY
   1796  29b0				  -	      .byte	%11111100	; HUSKY
   1797  29b0				  -
   1798  29b0				  -			;byte %00000000 ; HUSKY
   1799  29b0				  -
   1800  29b0				  -	      .byte	%00011100	; HUSKY
   1801  29b0				  -	      .byte	%00011100	; HUSKY
   1802  29b0				  -	      .byte	%11111110	; HUSKY
   1803  29b0				  -	      .byte	%11111110	; HUSKY
   1804  29b0				  -	      .byte	%11011100	; HUSKY
   1805  29b0				  -	      .byte	%11011100	; HUSKY
   1806  29b0				  -	      .byte	%00011100	; HUSKY
   1807  29b0				  -	      .byte	%00011100	; HUSKY
   1808  29b0				  -
   1809  29b0				  -			;byte %00000000 ; HUSKY
   1810  29b0				  -
   1811  29b0				  -	      .byte	%11111100	; HUSKY
   1812  29b0				  -	      .byte	%11111110	; HUSKY
   1813  29b0				  -	      .byte	%00001110	; HUSKY
   1814  29b0				  -	      .byte	%11111110	; HUSKY
   1815  29b0				  -	      .byte	%11111100	; HUSKY
   1816  29b0				  -	      .byte	%11100000	; HUSKY
   1817  29b0				  -	      .byte	%11111110	; HUSKY
   1818  29b0				  -	      .byte	%11111110	; HUSKY
   1819  29b0				  -
   1820  29b0				  -			;byte %00000000 ; HUSKY
   1821  29b0				  -
   1822  29b0				  -	      .byte	%01111100	; HUSKY
   1823  29b0				  -	      .byte	%11111110	; HUSKY
   1824  29b0				  -	      .byte	%11101110	; HUSKY
   1825  29b0				  -	      .byte	%11111110	; HUSKY
   1826  29b0				  -	      .byte	%11111100	; HUSKY
   1827  29b0				  -	      .byte	%11100000	; HUSKY
   1828  29b0				  -	      .byte	%11111110	; HUSKY
   1829  29b0				  -	      .byte	%01111110	; HUSKY
   1830  29b0				  -
   1831  29b0				  -			;byte %00000000 ; HUSKY
   1832  29b0				  -
   1833  29b0				  -	      .byte	%00111000	; HUSKY
   1834  29b0				  -	      .byte	%00111000	; HUSKY
   1835  29b0				  -	      .byte	%00111000	; HUSKY
   1836  29b0				  -	      .byte	%00111000	; HUSKY
   1837  29b0				  -	      .byte	%00011100	; HUSKY
   1838  29b0				  -	      .byte	%00001110	; HUSKY
   1839  29b0				  -	      .byte	%11111110	; HUSKY
   1840  29b0				  -	      .byte	%11111110	; HUSKY
   1841  29b0				  -
   1842  29b0				  -			;byte %00000000 ; HUSKY
   1843  29b0				  -
   1844  29b0				  -	      .byte	%01111100	; HUSKY
   1845  29b0				  -	      .byte	%11111110	; HUSKY
   1846  29b0				  -	      .byte	%11101110	; HUSKY
   1847  29b0				  -	      .byte	%11111110	; HUSKY
   1848  29b0				  -	      .byte	%01111100	; HUSKY
   1849  29b0				  -	      .byte	%11101110	; HUSKY
   1850  29b0				  -	      .byte	%11111110	; HUSKY
   1851  29b0				  -	      .byte	%01111100	; HUSKY
   1852  29b0				  -
   1853  29b0				  -			;byte %00000000 ; HUSKY
   1854  29b0				  -
   1855  29b0				  -	      .byte	%11111100	; HUSKY
   1856  29b0				  -	      .byte	%11111110	; HUSKY
   1857  29b0				  -	      .byte	%00001110	; HUSKY
   1858  29b0				  -	      .byte	%01111110	; HUSKY
   1859  29b0				  -	      .byte	%11111110	; HUSKY
   1860  29b0				  -	      .byte	%11101110	; HUSKY
   1861  29b0				  -	      .byte	%11111110	; HUSKY
   1862  29b0				  -	      .byte	%01111100	; HUSKY
   1863  29b0				  -
   1864  29b0				  -	      ifconst	fontcharsHEX
   1865  29b0				  -
   1866  29b0				  -			;byte %00000000 ; HUSKY
   1867  29b0				  -
   1868  29b0				  -	      .byte	%11101110	; HUSKY
   1869  29b0				  -	      .byte	%11101110	; HUSKY
   1870  29b0				  -	      .byte	%11111110	; HUSKY
   1871  29b0				  -	      .byte	%11111110	; HUSKY
   1872  29b0				  -	      .byte	%11101110	; HUSKY
   1873  29b0				  -	      .byte	%11111110	; HUSKY
   1874  29b0				  -	      .byte	%01111100	; HUSKY
   1875  29b0				  -	      .byte	%00111000	; HUSKY
   1876  29b0				  -
   1877  29b0				  -			;byte %00000000 ; HUSKY
   1878  29b0				  -
   1879  29b0				  -	      .byte	%11111100	; HUSKY
   1880  29b0				  -	      .byte	%11111110	; HUSKY
   1881  29b0				  -	      .byte	%11101110	; HUSKY
   1882  29b0				  -	      .byte	%11111110	; HUSKY
   1883  29b0				  -	      .byte	%11111100	; HUSKY
   1884  29b0				  -	      .byte	%11101110	; HUSKY
   1885  29b0				  -	      .byte	%11111110	; HUSKY
   1886  29b0				  -	      .byte	%11111100	; HUSKY
   1887  29b0				  -
   1888  29b0				  -			;byte %00000000 ; HUSKY
   1889  29b0				  -
   1890  29b0				  -	      .byte	%01111110	; HUSKY
   1891  29b0				  -	      .byte	%11111110	; HUSKY
   1892  29b0				  -	      .byte	%11110000	; HUSKY
   1893  29b0				  -	      .byte	%11100000	; HUSKY
   1894  29b0				  -	      .byte	%11100000	; HUSKY
   1895  29b0				  -	      .byte	%11110000	; HUSKY
   1896  29b0				  -	      .byte	%11111110	; HUSKY
   1897  29b0				  -	      .byte	%01111110	; HUSKY
   1898  29b0				  -
   1899  29b0				  -			;byte %00000000 ; HUSKY
   1900  29b0				  -
   1901  29b0				  -	      .byte	%11111000	; HUSKY
   1902  29b0				  -	      .byte	%11111100	; HUSKY
   1903  29b0				  -	      .byte	%11111110	; HUSKY
   1904  29b0				  -	      .byte	%11101110	; HUSKY
   1905  29b0				  -	      .byte	%11101110	; HUSKY
   1906  29b0				  -	      .byte	%11111110	; HUSKY
   1907  29b0				  -	      .byte	%11111100	; HUSKY
   1908  29b0				  -	      .byte	%11111000	; HUSKY
   1909  29b0				  -
   1910  29b0				  -			;byte %00000000 ; HUSKY
   1911  29b0				  -
   1912  29b0				  -	      .byte	%11111110	; HUSKY
   1913  29b0				  -	      .byte	%11111110	; HUSKY
   1914  29b0				  -	      .byte	%11100000	; HUSKY
   1915  29b0				  -	      .byte	%11111110	; HUSKY
   1916  29b0				  -	      .byte	%11111110	; HUSKY
   1917  29b0				  -	      .byte	%11100000	; HUSKY
   1918  29b0				  -	      .byte	%11111110	; HUSKY
   1919  29b0				  -	      .byte	%11111110	; HUSKY
   1920  29b0				  -
   1921  29b0				  -			;byte %00000000 ; HUSKY
   1922  29b0				  -
   1923  29b0				  -	      .byte	%11100000	; HUSKY
   1924  29b0				  -	      .byte	%11100000	; HUSKY
   1925  29b0				  -	      .byte	%11100000	; HUSKY
   1926  29b0				  -	      .byte	%11111110	; HUSKY
   1927  29b0				  -	      .byte	%11111110	; HUSKY
   1928  29b0				  -	      .byte	%11100000	; HUSKY
   1929  29b0				  -	      .byte	%11111110	; HUSKY
   1930  29b0				  -	      .byte	%11111110	; HUSKY
   1931  29b0				  -
   1932  29b0				  -			;byte %00000000 ; HUSKY
   1933  29b0				  -			;byte %00000000 ; HUSKY
   1934  29b0				  -			;byte %00000000 ; HUSKY
   1935  29b0				  -			;byte %00000000 ; HUSKY
   1936  29b0				  -
   1937  29b0				  -	      endif		; fontcharsHEX 
   1938  29b0					      endif		; HUSKY
   1939  29b0
   1940  29b0
   1941  29b0				  -	      if	fontstyle == SNAKE
   1942  29b0				  -
   1943  29b0				  -			;byte %00000000 ; SNAKE
   1944  29b0				  -
   1945  29b0				  -	      .byte	%01111110	; SNAKE
   1946  29b0				  -	      .byte	%01000010	; SNAKE
   1947  29b0				  -	      .byte	%01000010	; SNAKE
   1948  29b0				  -	      .byte	%01000010	; SNAKE
   1949  29b0				  -	      .byte	%01000010	; SNAKE
   1950  29b0				  -	      .byte	%01000010	; SNAKE
   1951  29b0				  -	      .byte	%01000010	; SNAKE
   1952  29b0				  -	      .byte	%01111110	; SNAKE
   1953  29b0				  -
   1954  29b0				  -			;byte %00000000 ; SNAKE
   1955  29b0				  -
   1956  29b0				  -	      .byte	%00111000	; SNAKE
   1957  29b0				  -	      .byte	%00101000	; SNAKE
   1958  29b0				  -	      .byte	%00001000	; SNAKE
   1959  29b0				  -	      .byte	%00001000	; SNAKE
   1960  29b0				  -	      .byte	%00001000	; SNAKE
   1961  29b0				  -	      .byte	%00001000	; SNAKE
   1962  29b0				  -	      .byte	%00001000	; SNAKE
   1963  29b0				  -	      .byte	%00111000	; SNAKE
   1964  29b0				  -
   1965  29b0				  -			;byte %00000000 ; SNAKE
   1966  29b0				  -
   1967  29b0				  -	      .byte	%01111110	; SNAKE
   1968  29b0				  -	      .byte	%01000010	; SNAKE
   1969  29b0				  -	      .byte	%01000110	; SNAKE
   1970  29b0				  -	      .byte	%01000000	; SNAKE
   1971  29b0				  -	      .byte	%01111110	; SNAKE
   1972  29b0				  -	      .byte	%00000010	; SNAKE
   1973  29b0				  -	      .byte	%01000010	; SNAKE
   1974  29b0				  -	      .byte	%01111110	; SNAKE
   1975  29b0				  -
   1976  29b0				  -			;byte %00000000 ; SNAKE
   1977  29b0				  -
   1978  29b0				  -	      .byte	%01111110	; SNAKE
   1979  29b0				  -	      .byte	%01000010	; SNAKE
   1980  29b0				  -	      .byte	%01100010	; SNAKE
   1981  29b0				  -	      .byte	%00000010	; SNAKE
   1982  29b0				  -	      .byte	%01111110	; SNAKE
   1983  29b0				  -	      .byte	%00000010	; SNAKE
   1984  29b0				  -	      .byte	%01000010	; SNAKE
   1985  29b0				  -	      .byte	%01111110	; SNAKE
   1986  29b0				  -
   1987  29b0				  -			;byte %00000000 ; SNAKE
   1988  29b0				  -
   1989  29b0				  -	      .byte	%00001110	; SNAKE
   1990  29b0				  -	      .byte	%00001010	; SNAKE
   1991  29b0				  -	      .byte	%00000010	; SNAKE
   1992  29b0				  -	      .byte	%01111110	; SNAKE
   1993  29b0				  -	      .byte	%01000010	; SNAKE
   1994  29b0				  -	      .byte	%01000010	; SNAKE
   1995  29b0				  -	      .byte	%01000010	; SNAKE
   1996  29b0				  -	      .byte	%01100110	; SNAKE
   1997  29b0				  -
   1998  29b0				  -			;byte %00000000 ; SNAKE
   1999  29b0				  -
   2000  29b0				  -	      .byte	%01111110	; SNAKE
   2001  29b0				  -	      .byte	%01000010	; SNAKE
   2002  29b0				  -	      .byte	%01100010	; SNAKE
   2003  29b0				  -	      .byte	%00000010	; SNAKE
   2004  29b0				  -	      .byte	%01111110	; SNAKE
   2005  29b0				  -	      .byte	%01000000	; SNAKE
   2006  29b0				  -	      .byte	%01000010	; SNAKE
   2007  29b0				  -	      .byte	%01111110	; SNAKE
   2008  29b0				  -
   2009  29b0				  -			;byte %00000000 ; SNAKE
   2010  29b0				  -
   2011  29b0				  -	      .byte	%01111110	; SNAKE
   2012  29b0				  -	      .byte	%01000010	; SNAKE
   2013  29b0				  -	      .byte	%01000010	; SNAKE
   2014  29b0				  -	      .byte	%01111110	; SNAKE
   2015  29b0				  -	      .byte	%01000000	; SNAKE
   2016  29b0				  -	      .byte	%01000110	; SNAKE
   2017  29b0				  -	      .byte	%01000010	; SNAKE
   2018  29b0				  -	      .byte	%01111110	; SNAKE
   2019  29b0				  -
   2020  29b0				  -			;byte %00000000 ; SNAKE
   2021  29b0				  -
   2022  29b0				  -	      .byte	%00000110	; SNAKE
   2023  29b0				  -	      .byte	%00000010	; SNAKE
   2024  29b0				  -	      .byte	%00000010	; SNAKE
   2025  29b0				  -	      .byte	%00000010	; SNAKE
   2026  29b0				  -	      .byte	%00000010	; SNAKE
   2027  29b0				  -	      .byte	%01100010	; SNAKE
   2028  29b0				  -	      .byte	%01000010	; SNAKE
   2029  29b0				  -	      .byte	%01111110	; SNAKE
   2030  29b0				  -
   2031  29b0				  -			;byte %00000000 ; SNAKE
   2032  29b0				  -
   2033  29b0				  -	      .byte	%01111110	; SNAKE
   2034  29b0				  -	      .byte	%01000010	; SNAKE
   2035  29b0				  -	      .byte	%01000010	; SNAKE
   2036  29b0				  -	      .byte	%01000010	; SNAKE
   2037  29b0				  -	      .byte	%01111110	; SNAKE
   2038  29b0				  -	      .byte	%01000010	; SNAKE
   2039  29b0				  -	      .byte	%01000010	; SNAKE
   2040  29b0				  -	      .byte	%01111110	; SNAKE
   2041  29b0				  -
   2042  29b0				  -			;byte %00000000 ; SNAKE
   2043  29b0				  -
   2044  29b0				  -	      .byte	%00001110	; SNAKE
   2045  29b0				  -	      .byte	%00001010	; SNAKE
   2046  29b0				  -	      .byte	%00000010	; SNAKE
   2047  29b0				  -	      .byte	%00000010	; SNAKE
   2048  29b0				  -	      .byte	%01111110	; SNAKE
   2049  29b0				  -	      .byte	%01000010	; SNAKE
   2050  29b0				  -	      .byte	%01000010	; SNAKE
   2051  29b0				  -	      .byte	%01111110	; SNAKE
   2052  29b0				  -
   2053  29b0				  -
   2054  29b0				  -	      ifconst	fontcharsHEX
   2055  29b0				  -
   2056  29b0				  -			;byte %00000000 ; SNAKE
   2057  29b0				  -
   2058  29b0				  -	      .byte	%01100110	; SNAKE
   2059  29b0				  -	      .byte	%01000010	; SNAKE
   2060  29b0				  -	      .byte	%01000010	; SNAKE
   2061  29b0				  -	      .byte	%01000010	; SNAKE
   2062  29b0				  -	      .byte	%01111110	; SNAKE
   2063  29b0				  -	      .byte	%01000010	; SNAKE
   2064  29b0				  -	      .byte	%01000010	; SNAKE
   2065  29b0				  -	      .byte	%01111110	; SNAKE
   2066  29b0				  -
   2067  29b0				  -			;byte %00000000 ; SNAKE
   2068  29b0				  -
   2069  29b0				  -	      .byte	%01111110	; SNAKE
   2070  29b0				  -	      .byte	%01000010	; SNAKE
   2071  29b0				  -	      .byte	%01000010	; SNAKE
   2072  29b0				  -	      .byte	%01000110	; SNAKE
   2073  29b0				  -	      .byte	%01111100	; SNAKE
   2074  29b0				  -	      .byte	%01000110	; SNAKE
   2075  29b0				  -	      .byte	%01000010	; SNAKE
   2076  29b0				  -	      .byte	%01111110	; SNAKE
   2077  29b0				  -
   2078  29b0				  -			;byte %00000000 ; SNAKE
   2079  29b0				  -
   2080  29b0				  -	      .byte	%01111110	; SNAKE
   2081  29b0				  -	      .byte	%01000010	; SNAKE
   2082  29b0				  -	      .byte	%01000110	; SNAKE
   2083  29b0				  -	      .byte	%01000000	; SNAKE
   2084  29b0				  -	      .byte	%01000000	; SNAKE
   2085  29b0				  -	      .byte	%01000110	; SNAKE
   2086  29b0				  -	      .byte	%01000010	; SNAKE
   2087  29b0				  -	      .byte	%01111110	; SNAKE
   2088  29b0				  -
   2089  29b0				  -			;byte %00000000 ; SNAKE
   2090  29b0				  -
   2091  29b0				  -	      .byte	%01111100	; SNAKE
   2092  29b0				  -	      .byte	%01000110	; SNAKE
   2093  29b0				  -	      .byte	%01000010	; SNAKE
   2094  29b0				  -	      .byte	%01000010	; SNAKE
   2095  29b0				  -	      .byte	%01000010	; SNAKE
   2096  29b0				  -	      .byte	%01000010	; SNAKE
   2097  29b0				  -	      .byte	%01000110	; SNAKE
   2098  29b0				  -	      .byte	%01111100	; SNAKE
   2099  29b0				  -
   2100  29b0				  -			;byte %00000000 ; SNAKE
   2101  29b0				  -
   2102  29b0				  -	      .byte	%01111110	; SNAKE
   2103  29b0				  -	      .byte	%01000010	; SNAKE
   2104  29b0				  -	      .byte	%01000110	; SNAKE
   2105  29b0				  -	      .byte	%01000000	; SNAKE
   2106  29b0				  -	      .byte	%01111000	; SNAKE
   2107  29b0				  -	      .byte	%01000000	; SNAKE
   2108  29b0				  -	      .byte	%01000010	; SNAKE
   2109  29b0				  -	      .byte	%01111110	; SNAKE
   2110  29b0				  -
   2111  29b0				  -			;byte %00000000 ; SNAKE
   2112  29b0				  -
   2113  29b0				  -	      .byte	%01000000	; SNAKE
   2114  29b0				  -	      .byte	%01000000	; SNAKE
   2115  29b0				  -	      .byte	%01000000	; SNAKE
   2116  29b0				  -	      .byte	%01000000	; SNAKE
   2117  29b0				  -	      .byte	%01111000	; SNAKE
   2118  29b0				  -	      .byte	%01000000	; SNAKE
   2119  29b0				  -	      .byte	%01000010	; SNAKE
   2120  29b0				  -	      .byte	%01111110	; SNAKE
   2121  29b0				  -
   2122  29b0				  -			;byte %00000000 ; SNAKE
   2123  29b0				  -			;byte %00000000 ; SNAKE
   2124  29b0				  -			;byte %00000000 ; SNAKE
   2125  29b0				  -			;byte %00000000 ; SNAKE
   2126  29b0				  -
   2127  29b0				  -	      endif		; fontcharsHEX 
   2128  29b0					      endif		; SNAKE
   2129  29b0
   2130  29b0				  -	      if	fontstyle == PLOK
   2131  29b0				  -
   2132  29b0				  -			;byte %00000000 ; PLOK
   2133  29b0				  -
   2134  29b0				  -	      .byte	%00000000	; PLOK
   2135  29b0				  -	      .byte	%00111000	; PLOK
   2136  29b0				  -	      .byte	%01100100	; PLOK
   2137  29b0				  -	      .byte	%01100010	; PLOK
   2138  29b0				  -	      .byte	%01100010	; PLOK
   2139  29b0				  -	      .byte	%00110110	; PLOK
   2140  29b0				  -	      .byte	%00011100	; PLOK
   2141  29b0				  -	      .byte	%00000000	; PLOK
   2142  29b0				  -
   2143  29b0				  -			;byte %00000000 ; PLOK
   2144  29b0				  -
   2145  29b0				  -	      .byte	%00000000	; PLOK
   2146  29b0				  -	      .byte	%00010000	; PLOK
   2147  29b0				  -	      .byte	%00011100	; PLOK
   2148  29b0				  -	      .byte	%00011100	; PLOK
   2149  29b0				  -	      .byte	%00011000	; PLOK
   2150  29b0				  -	      .byte	%00111000	; PLOK
   2151  29b0				  -	      .byte	%00011000	; PLOK
   2152  29b0				  -	      .byte	%00000000	; PLOK
   2153  29b0				  -
   2154  29b0				  -			;byte %00000000 ; PLOK
   2155  29b0				  -
   2156  29b0				  -	      .byte	%00000000	; PLOK
   2157  29b0				  -	      .byte	%00001110	; PLOK
   2158  29b0				  -	      .byte	%01111110	; PLOK
   2159  29b0				  -	      .byte	%00011000	; PLOK
   2160  29b0				  -	      .byte	%00001100	; PLOK
   2161  29b0				  -	      .byte	%00000110	; PLOK
   2162  29b0				  -	      .byte	%00111100	; PLOK
   2163  29b0				  -	      .byte	%00000000	; PLOK
   2164  29b0				  -
   2165  29b0				  -			;byte %00000000 ; PLOK
   2166  29b0				  -
   2167  29b0				  -	      .byte	%00000000	; PLOK
   2168  29b0				  -	      .byte	%00111100	; PLOK
   2169  29b0				  -	      .byte	%01101110	; PLOK
   2170  29b0				  -	      .byte	%00001110	; PLOK
   2171  29b0				  -	      .byte	%00011100	; PLOK
   2172  29b0				  -	      .byte	%00000110	; PLOK
   2173  29b0				  -	      .byte	%01111100	; PLOK
   2174  29b0				  -	      .byte	%00000000	; PLOK
   2175  29b0				  -
   2176  29b0				  -			;byte %00000000 ; PLOK
   2177  29b0				  -
   2178  29b0				  -	      .byte	%00000000	; PLOK
   2179  29b0				  -	      .byte	%00011000	; PLOK
   2180  29b0				  -	      .byte	%01111110	; PLOK
   2181  29b0				  -	      .byte	%01101100	; PLOK
   2182  29b0				  -	      .byte	%00100100	; PLOK
   2183  29b0				  -	      .byte	%00110000	; PLOK
   2184  29b0				  -	      .byte	%00110000	; PLOK
   2185  29b0				  -	      .byte	%00000000	; PLOK
   2186  29b0				  -
   2187  29b0				  -			;byte %00000000 ; PLOK
   2188  29b0				  -
   2189  29b0				  -	      .byte	%00000000	; PLOK
   2190  29b0				  -	      .byte	%00111100	; PLOK
   2191  29b0				  -	      .byte	%01001110	; PLOK
   2192  29b0				  -	      .byte	%00011100	; PLOK
   2193  29b0				  -	      .byte	%01100000	; PLOK
   2194  29b0				  -	      .byte	%01111100	; PLOK
   2195  29b0				  -	      .byte	%00011100	; PLOK
   2196  29b0				  -	      .byte	%00000000	; PLOK
   2197  29b0				  -
   2198  29b0				  -			;byte %00000000 ; PLOK
   2199  29b0				  -
   2200  29b0				  -	      .byte	%00000000	; PLOK
   2201  29b0				  -	      .byte	%00111100	; PLOK
   2202  29b0				  -	      .byte	%01000110	; PLOK
   2203  29b0				  -	      .byte	%01101100	; PLOK
   2204  29b0				  -	      .byte	%01110000	; PLOK
   2205  29b0				  -	      .byte	%00111000	; PLOK
   2206  29b0				  -	      .byte	%00010000	; PLOK
   2207  29b0				  -	      .byte	%00000000	; PLOK
   2208  29b0				  -
   2209  29b0				  -			;byte %00000000 ; PLOK
   2210  29b0				  -
   2211  29b0				  -	      .byte	%00000000	; PLOK
   2212  29b0				  -	      .byte	%00111100	; PLOK
   2213  29b0				  -	      .byte	%00011100	; PLOK
   2214  29b0				  -	      .byte	%00001100	; PLOK
   2215  29b0				  -	      .byte	%00000110	; PLOK
   2216  29b0				  -	      .byte	%01111110	; PLOK
   2217  29b0				  -	      .byte	%00110000	; PLOK
   2218  29b0				  -	      .byte	%00000000	; PLOK
   2219  29b0				  -
   2220  29b0				  -			;byte %00000000 ; PLOK
   2221  29b0				  -
   2222  29b0				  -	      .byte	%00000000	; PLOK
   2223  29b0				  -	      .byte	%00111100	; PLOK
   2224  29b0				  -	      .byte	%01001110	; PLOK
   2225  29b0				  -	      .byte	%01101110	; PLOK
   2226  29b0				  -	      .byte	%00111100	; PLOK
   2227  29b0				  -	      .byte	%01100100	; PLOK
   2228  29b0				  -	      .byte	%00111000	; PLOK
   2229  29b0				  -	      .byte	%00000000	; PLOK
   2230  29b0				  -
   2231  29b0				  -			;byte %00000000 ; PLOK
   2232  29b0				  -
   2233  29b0				  -	      .byte	%00000000	; PLOK
   2234  29b0				  -	      .byte	%00011000	; PLOK
   2235  29b0				  -	      .byte	%00001100	; PLOK
   2236  29b0				  -	      .byte	%00011100	; PLOK
   2237  29b0				  -	      .byte	%00100110	; PLOK
   2238  29b0				  -	      .byte	%01001110	; PLOK
   2239  29b0				  -	      .byte	%00111100	; PLOK
   2240  29b0				  -	      .byte	%00000000	; PLOK
   2241  29b0				  -
   2242  29b0				  -	      ifconst	fontcharsHEX
   2243  29b0				  -
   2244  29b0				  -			;byte %00000000 ; PLOK
   2245  29b0				  -
   2246  29b0				  -	      .byte	%00000000	; PLOK
   2247  29b0				  -	      .byte	%01100010	; PLOK
   2248  29b0				  -	      .byte	%01100110	; PLOK
   2249  29b0				  -	      .byte	%01111110	; PLOK
   2250  29b0				  -	      .byte	%00101100	; PLOK
   2251  29b0				  -	      .byte	%00101000	; PLOK
   2252  29b0				  -	      .byte	%00110000	; PLOK
   2253  29b0				  -	      .byte	%00000000	; PLOK
   2254  29b0				  -
   2255  29b0				  -			;byte %00000000 ; PLOK
   2256  29b0				  -
   2257  29b0				  -	      .byte	%00000000	; PLOK
   2258  29b0				  -	      .byte	%01111100	; PLOK
   2259  29b0				  -	      .byte	%00110010	; PLOK
   2260  29b0				  -	      .byte	%00110110	; PLOK
   2261  29b0				  -	      .byte	%00111100	; PLOK
   2262  29b0				  -	      .byte	%00110110	; PLOK
   2263  29b0				  -	      .byte	%01111100	; PLOK
   2264  29b0				  -	      .byte	%00000000	; PLOK
   2265  29b0				  -
   2266  29b0				  -			;byte %00000000 ; PLOK
   2267  29b0				  -
   2268  29b0				  -	      .byte	%00000000	; PLOK
   2269  29b0				  -	      .byte	%00111100	; PLOK
   2270  29b0				  -	      .byte	%01100110	; PLOK
   2271  29b0				  -	      .byte	%01100000	; PLOK
   2272  29b0				  -	      .byte	%01100100	; PLOK
   2273  29b0				  -	      .byte	%00101110	; PLOK
   2274  29b0				  -	      .byte	%00011100	; PLOK
   2275  29b0				  -	      .byte	%00000000	; PLOK
   2276  29b0				  -
   2277  29b0				  -			;byte %00000000 ; PLOK
   2278  29b0				  -
   2279  29b0				  -	      .byte	%00000000	; PLOK
   2280  29b0				  -	      .byte	%01111100	; PLOK
   2281  29b0				  -	      .byte	%00110010	; PLOK
   2282  29b0				  -	      .byte	%00110010	; PLOK
   2283  29b0				  -	      .byte	%00110110	; PLOK
   2284  29b0				  -	      .byte	%01111100	; PLOK
   2285  29b0				  -	      .byte	%01111000	; PLOK
   2286  29b0				  -	      .byte	%00000000	; PLOK
   2287  29b0				  -
   2288  29b0				  -			;byte %00000000 ; PLOK
   2289  29b0				  -
   2290  29b0				  -	      .byte	%00000000	; PLOK
   2291  29b0				  -	      .byte	%01111110	; PLOK
   2292  29b0				  -	      .byte	%00110000	; PLOK
   2293  29b0				  -	      .byte	%00111000	; PLOK
   2294  29b0				  -	      .byte	%00111100	; PLOK
   2295  29b0				  -	      .byte	%00110000	; PLOK
   2296  29b0				  -	      .byte	%01111110	; PLOK
   2297  29b0				  -	      .byte	%00000000	; PLOK
   2298  29b0				  -
   2299  29b0				  -			;byte %00000000 ; PLOK
   2300  29b0				  -
   2301  29b0				  -	      .byte	%00000000	; PLOK
   2302  29b0				  -	      .byte	%01100000	; PLOK
   2303  29b0				  -	      .byte	%01100000	; PLOK
   2304  29b0				  -	      .byte	%00111000	; PLOK
   2305  29b0				  -	      .byte	%00100000	; PLOK
   2306  29b0				  -	      .byte	%01111110	; PLOK
   2307  29b0				  -	      .byte	%00011100	; PLOK
   2308  29b0				  -	      .byte	%00000000	; PLOK
   2309  29b0				  -
   2310  29b0				  -			;byte %00000000 ; PLOK
   2311  29b0				  -			;byte %00000000 ; PLOK
   2312  29b0				  -			;byte %00000000 ; PLOK
   2313  29b0				  -			;byte %00000000 ; PLOK
   2314  29b0				  -
   2315  29b0				  -
   2316  29b0				  -	      endif		; fontcharsHEX
   2317  29b0					      endif		; PLOK
   2318  29b0
   2319  29b0							; ### any characters that aren't font specific follow... 
   2320  29b0
   2321  29b0				  -	      ifconst	fontcharSPACE
   2322  29b0				  -			;byte %00000000 ; SYMBOLS
   2323  29b0				  -
   2324  29b0				  -	      .byte	%00000000	; SYMBOLS
   2325  29b0				  -	      .byte	%00000000	; SYMBOLS
   2326  29b0				  -	      .byte	%00000000	; SYMBOLS
   2327  29b0				  -	      .byte	%00000000	; SYMBOLS
   2328  29b0				  -	      .byte	%00000000	; SYMBOLS
   2329  29b0				  -	      .byte	%00000000	; SYMBOLS
   2330  29b0				  -	      .byte	%00000000	; SYMBOLS
   2331  29b0				  -	      .byte	%00000000	; SYMBOLS
   2332  29b0				  -
   2333  29b0				  -			;byte %00000000 ; SYMBOLS
   2334  29b0					      endif		; fontcharSPACE
   2335  29b0
   2336  29b0				  -	      ifconst	fontcharDOLLAR
   2337  29b0				  -			;byte %00000000 ; SYMBOLS
   2338  29b0				  -
   2339  29b0				  -	      .byte	%00000000	; SYMBOLS
   2340  29b0				  -	      .byte	%00010000	; SYMBOLS
   2341  29b0				  -	      .byte	%01111100	; SYMBOLS
   2342  29b0				  -	      .byte	%00010010	; SYMBOLS
   2343  29b0				  -	      .byte	%01111100	; SYMBOLS
   2344  29b0				  -	      .byte	%10010000	; SYMBOLS
   2345  29b0				  -	      .byte	%01111100	; SYMBOLS
   2346  29b0				  -	      .byte	%00010000	; SYMBOLS
   2347  29b0				  -
   2348  29b0				  -			;byte %00000000 ; SYMBOLS
   2349  29b0				  -
   2350  29b0					      endif		; fontcharDOLLAR
   2351  29b0
   2352  29b0				  -	      ifconst	fontcharPOUND
   2353  29b0				  -			;byte %00000000 ; SYMBOLS
   2354  29b0				  -
   2355  29b0				  -	      .byte	%01111110	; SYMBOLS
   2356  29b0				  -	      .byte	%01000000	; SYMBOLS
   2357  29b0				  -	      .byte	%00100000	; SYMBOLS
   2358  29b0				  -	      .byte	%00100000	; SYMBOLS
   2359  29b0				  -	      .byte	%01111000	; SYMBOLS
   2360  29b0				  -	      .byte	%00100000	; SYMBOLS
   2361  29b0				  -	      .byte	%00100010	; SYMBOLS
   2362  29b0				  -	      .byte	%00011100	; SYMBOLS
   2363  29b0				  -
   2364  29b0				  -			;byte %00000000 ; SYMBOLS
   2365  29b0				  -
   2366  29b0					      endif		; fontcharPOUND
   2367  29b0
   2368  29b0
   2369  29b0				  -	      ifconst	fontcharMRHAPPY
   2370  29b0				  -			;byte %00000000 ; SYMBOLS
   2371  29b0				  -
   2372  29b0				  -	      .byte	%00111100	; SYMBOLS
   2373  29b0				  -	      .byte	%01100110	; SYMBOLS
   2374  29b0				  -	      .byte	%01011010	; SYMBOLS
   2375  29b0				  -	      .byte	%01111110	; SYMBOLS
   2376  29b0				  -	      .byte	%01111110	; SYMBOLS
   2377  29b0				  -	      .byte	%01011010	; SYMBOLS
   2378  29b0				  -	      .byte	%01111110	; SYMBOLS
   2379  29b0				  -	      .byte	%00111100	; SYMBOLS
   2380  29b0				  -
   2381  29b0				  -			;byte %00000000 ; SYMBOLS
   2382  29b0				  -
   2383  29b0					      endif		; fontcharMRHAPPY
   2384  29b0
   2385  29b0				  -	      ifconst	fontcharMRSAD
   2386  29b0				  -			;byte %00000000 ; SYMBOLS
   2387  29b0				  -
   2388  29b0				  -	      .byte	%00111100	; SYMBOLS
   2389  29b0				  -	      .byte	%01011010	; SYMBOLS
   2390  29b0				  -	      .byte	%01100110	; SYMBOLS
   2391  29b0				  -	      .byte	%01111110	; SYMBOLS
   2392  29b0				  -	      .byte	%01111110	; SYMBOLS
   2393  29b0				  -	      .byte	%01011010	; SYMBOLS
   2394  29b0				  -	      .byte	%01111110	; SYMBOLS
   2395  29b0				  -	      .byte	%00111100	; SYMBOLS
   2396  29b0				  -
   2397  29b0				  -			;byte %00000000 ; SYMBOLS
   2398  29b0				  -
   2399  29b0					      endif		; fontcharMRSAD
   2400  29b0
   2401  29b0
   2402  29b0				  -	      ifconst	fontcharCOPYRIGHT
   2403  29b0				  -			;byte %00000000 ; SYMBOLS
   2404  29b0				  -
   2405  29b0				  -	      .byte	%00000000	; SYMBOLS
   2406  29b0				  -	      .byte	%00111000	; SYMBOLS
   2407  29b0				  -	      .byte	%01000100	; SYMBOLS
   2408  29b0				  -	      .byte	%10111010	; SYMBOLS
   2409  29b0				  -	      .byte	%10100010	; SYMBOLS
   2410  29b0				  -	      .byte	%10111010	; SYMBOLS
   2411  29b0				  -	      .byte	%01000100	; SYMBOLS
   2412  29b0				  -	      .byte	%00111000	; SYMBOLS
   2413  29b0				  -
   2414  29b0				  -			;byte %00000000 ; SYMBOLS
   2415  29b0				  -
   2416  29b0					      endif		; fontcharCOPYRIGHT
   2417  29b0
   2418  29b0
   2419  29b0				  -	      ifconst	fontcharFUJI
   2420  29b0				  -
   2421  29b0				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  29b0				  -
   2423  29b0				  -	      .byte	%01110000	; SYMBOLS
   2424  29b0				  -	      .byte	%01111001	; SYMBOLS
   2425  29b0				  -	      .byte	%00011101	; SYMBOLS
   2426  29b0				  -	      .byte	%00001101	; SYMBOLS
   2427  29b0				  -	      .byte	%00001101	; SYMBOLS
   2428  29b0				  -	      .byte	%00001101	; SYMBOLS
   2429  29b0				  -	      .byte	%00001101	; SYMBOLS
   2430  29b0				  -	      .byte	%00000000	; SYMBOLS
   2431  29b0				  -
   2432  29b0				  -			;byte %00000000 ; SYMBOLS
   2433  29b0				  -
   2434  29b0				  -	      .byte	%00001110	; SYMBOLS
   2435  29b0				  -	      .byte	%10011110	; SYMBOLS
   2436  29b0				  -	      .byte	%10111000	; SYMBOLS
   2437  29b0				  -	      .byte	%10110000	; SYMBOLS
   2438  29b0				  -	      .byte	%10110000	; SYMBOLS
   2439  29b0				  -	      .byte	%10110000	; SYMBOLS
   2440  29b0				  -	      .byte	%10110000	; SYMBOLS
   2441  29b0				  -	      .byte	%00000000	; SYMBOLS
   2442  29b0				  -
   2443  29b0				  -			;byte %00000000 ; SYMBOLS
   2444  29b0				  -
   2445  29b0					      endif		; fontcharFUJI
   2446  29b0
   2447  29b0
   2448  29b0				  -	      ifconst	fontcharHEART
   2449  29b0				  -			;byte %00000000 ; SYMBOLS
   2450  29b0				  -
   2451  29b0				  -	      .byte	%00010000	; SYMBOLS
   2452  29b0				  -	      .byte	%00111000	; SYMBOLS
   2453  29b0				  -	      .byte	%01111100	; SYMBOLS
   2454  29b0				  -	      .byte	%01111100	; SYMBOLS
   2455  29b0				  -	      .byte	%11111110	; SYMBOLS
   2456  29b0				  -	      .byte	%11111110	; SYMBOLS
   2457  29b0				  -	      .byte	%11101110	; SYMBOLS
   2458  29b0				  -	      .byte	%01000100	; SYMBOLS
   2459  29b0				  -
   2460  29b0				  -			;byte %00000000 ; SYMBOLS
   2461  29b0				  -
   2462  29b0					      endif		; fontcharHEART
   2463  29b0
   2464  29b0				  -	      ifconst	fontcharDIAMOND
   2465  29b0				  -			;byte %00000000 ; SYMBOLS
   2466  29b0				  -
   2467  29b0				  -	      .byte	%00010000	; SYMBOLS
   2468  29b0				  -	      .byte	%00111000	; SYMBOLS
   2469  29b0				  -	      .byte	%01111100	; SYMBOLS
   2470  29b0				  -	      .byte	%11111110	; SYMBOLS
   2471  29b0				  -	      .byte	%11111110	; SYMBOLS
   2472  29b0				  -	      .byte	%01111100	; SYMBOLS
   2473  29b0				  -	      .byte	%00111000	; SYMBOLS
   2474  29b0				  -	      .byte	%00010000	; SYMBOLS
   2475  29b0				  -
   2476  29b0				  -			;byte %00000000 ; SYMBOLS
   2477  29b0				  -
   2478  29b0					      endif		; fontcharDIAMOND
   2479  29b0
   2480  29b0				  -	      ifconst	fontcharSPADE
   2481  29b0				  -			;byte %00000000 ; SYMBOLS
   2482  29b0				  -
   2483  29b0				  -	      .byte	%00111000	; SYMBOLS
   2484  29b0				  -	      .byte	%00010000	; SYMBOLS
   2485  29b0				  -	      .byte	%01010100	; SYMBOLS
   2486  29b0				  -	      .byte	%11111110	; SYMBOLS
   2487  29b0				  -	      .byte	%11111110	; SYMBOLS
   2488  29b0				  -	      .byte	%01111100	; SYMBOLS
   2489  29b0				  -	      .byte	%00111000	; SYMBOLS
   2490  29b0				  -	      .byte	%00010000	; SYMBOLS
   2491  29b0				  -
   2492  29b0				  -			;byte %00000000 ; SYMBOLS
   2493  29b0				  -
   2494  29b0					      endif		; fontcharSPADE
   2495  29b0
   2496  29b0				  -	      ifconst	fontcharCLUB
   2497  29b0				  -			;byte %00000000 ; SYMBOLS
   2498  29b0				  -
   2499  29b0				  -	      .byte	%00111000	; SYMBOLS
   2500  29b0				  -	      .byte	%00010000	; SYMBOLS
   2501  29b0				  -	      .byte	%11010110	; SYMBOLS
   2502  29b0				  -	      .byte	%11111110	; SYMBOLS
   2503  29b0				  -	      .byte	%11010110	; SYMBOLS
   2504  29b0				  -	      .byte	%00111000	; SYMBOLS
   2505  29b0				  -	      .byte	%00111000	; SYMBOLS
   2506  29b0				  -	      .byte	%00000000	; SYMBOLS
   2507  29b0				  -
   2508  29b0				  -			;byte %00000000 ; SYMBOLS
   2509  29b0				  -
   2510  29b0					      endif		; fontcharCLUB
   2511  29b0
   2512  29b0
   2513  29b0				  -	      ifconst	fontcharCOLON
   2514  29b0				  -			;byte %00000000 ; SYMBOLS
   2515  29b0				  -
   2516  29b0				  -	      .byte	%00000000	; SYMBOLS
   2517  29b0				  -	      .byte	%00011000	; SYMBOLS
   2518  29b0				  -	      .byte	%00011000	; SYMBOLS
   2519  29b0				  -	      .byte	%00000000	; SYMBOLS
   2520  29b0				  -	      .byte	%00000000	; SYMBOLS
   2521  29b0				  -	      .byte	%00011000	; SYMBOLS
   2522  29b0				  -	      .byte	%00011000	; SYMBOLS
   2523  29b0				  -	      .byte	%00000000	; SYMBOLS
   2524  29b0				  -
   2525  29b0				  -			;byte %00000000 ; SYMBOLS
   2526  29b0				  -
   2527  29b0					      endif		; fontcharCOLON
   2528  29b0
   2529  29b0
   2530  29b0				  -	      ifconst	fontcharBLOCK
   2531  29b0				  -
   2532  29b0				  -			;byte %00000000 ; SYMBOLS
   2533  29b0				  -
   2534  29b0				  -	      .byte	%11111111	; SYMBOLS
   2535  29b0				  -	      .byte	%11111111	; SYMBOLS
   2536  29b0				  -	      .byte	%11111111	; SYMBOLS
   2537  29b0				  -	      .byte	%11111111	; SYMBOLS
   2538  29b0				  -	      .byte	%11111111	; SYMBOLS
   2539  29b0				  -	      .byte	%11111111	; SYMBOLS
   2540  29b0				  -	      .byte	%11111111	; SYMBOLS
   2541  29b0				  -	      .byte	%11111111	; SYMBOLS
   2542  29b0				  -
   2543  29b0				  -			;byte %00000000 ; SYMBOLS
   2544  29b0				  -
   2545  29b0					      endif		; fontcharBLOCK
   2546  29b0
   2547  29b0				  -	      ifconst	fontcharUNDERLINE
   2548  29b0				  -
   2549  29b0				  -			;byte %00000000 ; SYMBOLS
   2550  29b0				  -
   2551  29b0				  -	      .byte	%11111111	; SYMBOLS
   2552  29b0				  -	      .byte	%00000000	; SYMBOLS
   2553  29b0				  -	      .byte	%00000000	; SYMBOLS
   2554  29b0				  -	      .byte	%00000000	; SYMBOLS
   2555  29b0				  -	      .byte	%00000000	; SYMBOLS
   2556  29b0				  -	      .byte	%00000000	; SYMBOLS
   2557  29b0				  -	      .byte	%00000000	; SYMBOLS
   2558  29b0				  -	      .byte	%00000000	; SYMBOLS
   2559  29b0				  -
   2560  29b0				  -			;byte %00000000 ; SYMBOLS
   2561  29b0				  -
   2562  29b0					      endif		; fontcharUNDERLINE
   2563  29b0
   2564  29b0				  -	      ifconst	fontcharARISIDE
   2565  29b0				  -			;byte %00000000 ; SYMBOLS
   2566  29b0				  -
   2567  29b0				  -	      .byte	%00000000	; SYMBOLS
   2568  29b0				  -	      .byte	%00101010	; SYMBOLS
   2569  29b0				  -	      .byte	%00101010	; SYMBOLS
   2570  29b0				  -	      .byte	%00101100	; SYMBOLS
   2571  29b0				  -	      .byte	%01111111	; SYMBOLS
   2572  29b0				  -	      .byte	%00110111	; SYMBOLS
   2573  29b0				  -	      .byte	%00000010	; SYMBOLS
   2574  29b0				  -	      .byte	%00000001	; SYMBOLS
   2575  29b0				  -
   2576  29b0				  -			;byte %00000000 ; SYMBOLS
   2577  29b0				  -
   2578  29b0					      endif		; fontcharARISIDE
   2579  29b0
   2580  29b0				  -	      ifconst	fontcharARIFACE
   2581  29b0				  -			;byte %00000000 ; SYMBOLS
   2582  29b0				  -
   2583  29b0				  -	      .byte	%00001000	; SYMBOLS
   2584  29b0				  -	      .byte	%00011100	; SYMBOLS
   2585  29b0				  -	      .byte	%00111110	; SYMBOLS
   2586  29b0				  -	      .byte	%00101010	; SYMBOLS
   2587  29b0				  -	      .byte	%00011100	; SYMBOLS
   2588  29b0				  -	      .byte	%01010100	; SYMBOLS
   2589  29b0				  -	      .byte	%00100100	; SYMBOLS
   2590  29b0				  -	      .byte	%00000010	; SYMBOLS
   2591  29b0				  -
   2592  29b0				  -			;byte %00000000 ; SYMBOLS
   2593  29b0				  -
   2594  29b0				  -
   2595  29b0					      endif		; fontcharARIRACE
   2596  29b0
------- FILE titlescreen/asm/titlescreen.asm
    170  29b0					      endif
    171  29b0
    172  29b0				  -	      ifconst	mk_gameselect_on
    173  29b0				  -	      include	"titlescreen/gameselect_image.asm"
    174  29b0					      endif
    175  29b0
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   4888  29b0
   4889  29b0				   .
   4890  29b0							; 
   4891  29b0
   4892  29b0				   .
   4893  29b0							; 
   4894  29b0
   4895  29b0				   .L0351		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  29b0					      include	6lives_statusbar.asm
      1  29b0							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  29b0
      3  29b0				   minikernel		; display up to 6 lives on screen
      4  29b0		       85 02		      sta	WSYNC
      5  29b2		       a2 20		      ldx	#$20
      6  29b4		       86 21		      stx	HMP1
      7  29b6		       86 25		      stx	VDELP0
      8  29b8		       a5 c2		      lda	lives
      9  29ba		       4a		      lsr
     10  29bb		       4a		      lsr
     11  29bc		       4a		      lsr
     12  29bd		       4a		      lsr
     13  29be		       4a		      lsr
     14  29bf		       85 10		      sta	RESP0
     15  29c1		       85 11		      sta	RESP1
     16  29c3		       86 26		      stx	VDELP1
     17  29c5		       aa		      tax
     18  29c6		       bd 5c fa 	      lda	lifenusiz0table,x
     19  29c9		       85 04		      sta	NUSIZ0
     20  29cb		       bd 5b fa 	      lda	lifenusiz1table,x
     21  29ce		       85 05		      sta	NUSIZ1
     22  29d0		       a5 c0		      lda	lifecolor
     23  29d2		       85 06		      sta	COLUP0
     24  29d4		       85 07		      sta	COLUP1
     25  29d6		       a9 10		      lda	#$10
     26  29d8		       85 20		      sta	HMP0
     27  29da
     28  29da		       a5 bf		      lda	statusbarlength
     29  29dc		       4a		      lsr
     30  29dd		       4a		      lsr
     31  29de		       4a		      lsr		; 0-31
     32  29df							; 3 cases: 0-7, 8-15, 16-24
     33  29df							; if 0-7, temp1=val, temp2=0, temp3=0
     34  29df							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  29df							; if 16-23, temp1=255, temp2=255, temp3=val
     36  29df		       a8		      tay
     37  29e0
     38  29e0		       85 2a		      sta	HMOVE	;cycle 74?
     39  29e2
     40  29e2				  -	      ifconst	statusbarcolor
     41  29e2				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  29e2				  -	      lda	statusbarcolor
     43  29e2				  -	      sta	COLUPF
     44  29e2					      endif
     45  29e2
     46  29e2		       c0 08		      cpy	#8
     47  29e4		       90 17		      bcc	zero_7
     48  29e6		       c0 10		      cpy	#16
     49  29e8		       90 23		      bcc	eight_15
     50  29ea		       a9 ff		      lda	#255
     51  29ec		       85 cb		      sta	temp1
     52  29ee		       85 cc		      sta	temp2
     53  29f0		       b9 54 fa 	      lda	statustable-16,y
     54  29f3		       85 cd		      sta	temp3
     55  29f5		       b9 64 fa 	      lda	statustable,y
     56  29f8		       85 ce		      sta	temp4
     57  29fa		       4c 1c fa 	      jmp	startlifedisplay
     58  29fd
     59  29fd				   zero_7
     60  29fd		       a9 00		      lda	#0
     61  29ff		       85 ce		      sta	temp4
     62  2a01		       85 cd		      sta	temp3
     63  2a03		       85 cc		      sta	temp2
     64  2a05		       b9 64 fa 	      lda	statustable,y
     65  2a08		       85 cb		      sta	temp1
     66  2a0a		       4c 1c fa 	      jmp	startlifedisplay
     67  2a0d				   eight_15
     68  2a0d		       a9 ff		      lda	#255
     69  2a0f		       85 cb		      sta	temp1
     70  2a11		       a9 00		      lda	#0
     71  2a13		       85 ce		      sta	temp4
     72  2a15		       85 cd		      sta	temp3
     73  2a17		       b9 74 fa 	      lda	statustable+16,y
     74  2a1a		       85 cc		      sta	temp2
     75  2a1c				   startlifedisplay
     76  2a1c		       a0 07		      ldy	#7
     77  2a1e				   lifeloop
     78  2a1e		       85 02		      sta	WSYNC
     79  2a20		       86 0d		      stx	PF0
     80  2a22		       b1 c1		      lda	(lifepointer),y
     81  2a24		       e0 00		      cpx	#0
     82  2a26		       d0 01		      bne	onelife
     83  2a28		       0c		      .byte.b	$0C
     84  2a29				   onelife
     85  2a29		       85 1b		      sta	GRP0
     86  2a2b
     87  2a2b		       e0 02		      cpx	#2
     88  2a2d		       b0 01		      bcs	nolives
     89  2a2f		       0c		      .byte.b	$0C
     90  2a30				   nolives
     91  2a30		       85 1c		      sta	GRP1
     92  2a32		       a5 ce		      lda	temp4
     93  2a34		       85 0d		      sta	PF0
     94  2a36		       a5 cb		      lda	temp1
     95  2a38		       85 0f		      sta	PF2
     96  2a3a		       a5 cd		      lda	temp3
     97  2a3c		       85 0e		      sta	PF1
     98  2a3e		       a5 cc		      lda	temp2
     99  2a40		       85 0f		      sta	PF2	;cycle 48!
    100  2a42		       68		      pla		; waste 14 cycles in 4 bytes
    101  2a43		       48		      pha		;
    102  2a44		       68		      pla		;
    103  2a45		       48		      pha		; Shouldn't hurt anything!
    104  2a46		       a9 00		      lda	#0
    105  2a48		       88		      dey
    106  2a49		       85 0e		      sta	PF1
    107  2a4b		       10 d1		      bpl	lifeloop
    108  2a4d		       85 02		      sta	WSYNC
    109  2a4f		       c8		      iny
    110  2a50		       84 0d		      sty	PF0
    111  2a52		       84 0f		      sty	PF2
    112  2a54		       84 0e		      sty	PF1
    113  2a56		       84 1b		      sty	GRP0
    114  2a58		       84 1c		      sty	GRP1
    115  2a5a		       60		      rts
    116  2a5b
    117  2a5b				  -	      if	(<*) > $F5
    118  2a5b				  -	      align	256
    119  2a5b					      endif
    120  2a5b				   lifenusiz1table
    121  2a5b		       00		      .byte.b	0
    122  2a5c				   lifenusiz0table
    123  2a5c		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2a64
    125  2a64				   statustable		; warning: page-wrapping might cause issues
    126  2a64							;0-7 and 16+
    127  2a64		       00		      .byte.b	%00000000
    128  2a65		       01		      .byte.b	%00000001
    129  2a66		       03		      .byte.b	%00000011
    130  2a67		       07		      .byte.b	%00000111
    131  2a68		       0f		      .byte.b	%00001111
    132  2a69		       1f		      .byte.b	%00011111
    133  2a6a		       3f		      .byte.b	%00111111
    134  2a6b		       7f		      .byte.b	%01111111
    135  2a6c		       ff		      .byte.b	255
    136  2a6d		       ff		      .byte.b	255
    137  2a6e		       ff		      .byte.b	255
    138  2a6f		       ff		      .byte.b	255
    139  2a70		       ff		      .byte.b	255
    140  2a71		       ff		      .byte.b	255
    141  2a72		       ff		      .byte.b	255
    142  2a73		       ff		      .byte.b	255
    143  2a74							; 8-15
    144  2a74		       00		      .byte.b	0
    145  2a75		       00		      .byte.b	0
    146  2a76		       00		      .byte.b	0
    147  2a77		       00		      .byte.b	0
    148  2a78		       00		      .byte.b	0
    149  2a79		       00		      .byte.b	0
    150  2a7a		       00		      .byte.b	0
    151  2a7b		       00		      .byte.b	0
    152  2a7c		       00		      .byte.b	%00000000
    153  2a7d		       80		      .byte.b	%10000000
    154  2a7e		       c0		      .byte.b	%11000000
    155  2a7f		       e0		      .byte.b	%11100000
    156  2a80		       f0		      .byte.b	%11110000
    157  2a81		       f8		      .byte.b	%11111000
    158  2a82		       fc		      .byte.b	%11111100
    159  2a83		       fe		      .byte.b	%11111110
    160  2a84
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   4897  2a84				  -	      if	(<*) > (<(*+8))
   4898  2a84				  -	      repeat	($100-<*)
   4899  2a84				  -	      .byte	0
   4900  2a84				  -	      repend
   4901  2a84					      endif
   4902  2a84				   lives__L0119
   4903  2a84		       3c		      .byte.b	%00111100
   4904  2a85		       18		      .byte.b	%00011000
   4905  2a86		       3c		      .byte.b	%00111100
   4906  2a87		       3c		      .byte.b	%00111100
   4907  2a88		       3c		      .byte.b	%00111100
   4908  2a89		       18		      .byte.b	%00011000
   4909  2a8a		       00		      .byte.b	%00000000
   4910  2a8b		       00		      .byte.b	%00000000
   4911  2a8c				  -	      if	(<*) > (<(*+8))
   4912  2a8c				  -	      repeat	($100-<*)
   4913  2a8c				  -	      .byte	0
   4914  2a8c				  -	      repend
   4915  2a8c					      endif
   4916  2a8c				  -	      if	(<*) < 90
   4917  2a8c				  -	      repeat	(90-<*)
   4918  2a8c				  -	      .byte	0
   4919  2a8c				  -	      repend
   4920  2a8c					      endif
   4921  2a8c				   player35then_0
   4922  2a8c		       00		      .byte.b	0
   4923  2a8d		       66		      .byte.b	%01100110
   4924  2a8e		       ff		      .byte.b	%11111111
   4925  2a8f		       bd		      .byte.b	%10111101
   4926  2a90		       a5		      .byte.b	%10100101
   4927  2a91		       3c		      .byte.b	%00111100
   4928  2a92		       18		      .byte.b	%00011000
   4929  2a93		       18		      .byte.b	%00011000
   4930  2a94		       00		      .byte.b	%00000000
   4931  2a95				  -	      if	(<*) > (<(*+8))
   4932  2a95				  -	      repeat	($100-<*)
   4933  2a95				  -	      .byte	0
   4934  2a95				  -	      repend
   4935  2a95					      endif
   4936  2a95				  -	      if	(<*) < 90
   4937  2a95				  -	      repeat	(90-<*)
   4938  2a95				  -	      .byte	0
   4939  2a95				  -	      repend
   4940  2a95					      endif
   4941  2a95				   player36then_0
   4942  2a95		       00		      .byte.b	0
   4943  2a96		       00		      .byte.b	%00000000
   4944  2a97		       ff		      .byte.b	%11111111
   4945  2a98		       bd		      .byte.b	%10111101
   4946  2a99		       a5		      .byte.b	%10100101
   4947  2a9a		       3c		      .byte.b	%00111100
   4948  2a9b		       18		      .byte.b	%00011000
   4949  2a9c		       18		      .byte.b	%00011000
   4950  2a9d		       00		      .byte.b	%00000000
   4951  2a9e				  -	      if	(<*) > (<(*+7))
   4952  2a9e				  -	      repeat	($100-<*)
   4953  2a9e				  -	      .byte	0
   4954  2a9e				  -	      repend
   4955  2a9e					      endif
   4956  2a9e				  -	      if	(<*) < 90
   4957  2a9e				  -	      repeat	(90-<*)
   4958  2a9e				  -	      .byte	0
   4959  2a9e				  -	      repend
   4960  2a9e					      endif
   4961  2a9e				   player37then_1
   4962  2a9e		       3e		      .byte.b	%00111110
   4963  2a9f		       63		      .byte.b	%01100011
   4964  2aa0		       51		      .byte.b	%01010001
   4965  2aa1		       5d		      .byte.b	%01011101
   4966  2aa2		       55		      .byte.b	%01010101
   4967  2aa3		       5d		      .byte.b	%01011101
   4968  2aa4		       63		      .byte.b	%01100011
   4969  2aa5		       3e		      .byte.b	%00111110
   4970  2aa6				  -	      if	(<*) > (<(*+7))
   4971  2aa6				  -	      repeat	($100-<*)
   4972  2aa6				  -	      .byte	0
   4973  2aa6				  -	      repend
   4974  2aa6					      endif
   4975  2aa6				  -	      if	(<*) < 90
   4976  2aa6				  -	      repeat	(90-<*)
   4977  2aa6				  -	      .byte	0
   4978  2aa6				  -	      repend
   4979  2aa6					      endif
   4980  2aa6				   player39then_1
   4981  2aa6		       98		      .byte.b	%10011000
   4982  2aa7		       66		      .byte.b	%01100110
   4983  2aa8		       18		      .byte.b	%00011000
   4984  2aa9		       7c		      .byte.b	%01111100
   4985  2aaa		       18		      .byte.b	%00011000
   4986  2aab		       3c		      .byte.b	%00111100
   4987  2aac		       5a		      .byte.b	%01011010
   4988  2aad		       3c		      .byte.b	%00111100
   4989  2aae				  -	      if	(<*) > (<(*+7))
   4990  2aae				  -	      repeat	($100-<*)
   4991  2aae				  -	      .byte	0
   4992  2aae				  -	      repend
   4993  2aae					      endif
   4994  2aae				  -	      if	(<*) < 90
   4995  2aae				  -	      repeat	(90-<*)
   4996  2aae				  -	      .byte	0
   4997  2aae				  -	      repend
   4998  2aae					      endif
   4999  2aae				   player41then_1
   5000  2aae		       19		      .byte.b	%00011001
   5001  2aaf		       66		      .byte.b	%01100110
   5002  2ab0		       18		      .byte.b	%00011000
   5003  2ab1		       3e		      .byte.b	%00111110
   5004  2ab2		       18		      .byte.b	%00011000
   5005  2ab3		       3c		      .byte.b	%00111100
   5006  2ab4		       5a		      .byte.b	%01011010
   5007  2ab5		       3c		      .byte.b	%00111100
   5008  2ab6				  -	      if	(<*) > (<(*+7))
   5009  2ab6				  -	      repeat	($100-<*)
   5010  2ab6				  -	      .byte	0
   5011  2ab6				  -	      repend
   5012  2ab6					      endif
   5013  2ab6				  -	      if	(<*) < 90
   5014  2ab6				  -	      repeat	(90-<*)
   5015  2ab6				  -	      .byte	0
   5016  2ab6				  -	      repend
   5017  2ab6					      endif
   5018  2ab6				   player42then_2
   5019  2ab6		       01		      .byte.b	%00000001
   5020  2ab7		       99		      .byte.b	%10011001
   5021  2ab8		       ff		      .byte.b	%11111111
   5022  2ab9		       3c		      .byte.b	%00111100
   5023  2aba		       ff		      .byte.b	%11111111
   5024  2abb		       3c		      .byte.b	%00111100
   5025  2abc		       e7		      .byte.b	%11100111
   5026  2abd		       98		      .byte.b	%10011000
   5027  2abe				  -	      if	(<*) > (<(*+7))
   5028  2abe				  -	      repeat	($100-<*)
   5029  2abe				  -	      .byte	0
   5030  2abe				  -	      repend
   5031  2abe					      endif
   5032  2abe				  -	      if	(<*) < 90
   5033  2abe				  -	      repeat	(90-<*)
   5034  2abe				  -	      .byte	0
   5035  2abe				  -	      repend
   5036  2abe					      endif
   5037  2abe				   player43then_2
   5038  2abe		       80		      .byte.b	%10000000
   5039  2abf		       99		      .byte.b	%10011001
   5040  2ac0		       ff		      .byte.b	%11111111
   5041  2ac1		       3c		      .byte.b	%00111100
   5042  2ac2		       ff		      .byte.b	%11111111
   5043  2ac3		       3c		      .byte.b	%00111100
   5044  2ac4		       e7		      .byte.b	%11100111
   5045  2ac5		       19		      .byte.b	%00011001
   5046  2ac6				  -	      if	(<*) > (<(*+7))
   5047  2ac6				  -	      repeat	($100-<*)
   5048  2ac6				  -	      .byte	0
   5049  2ac6				  -	      repend
   5050  2ac6					      endif
   5051  2ac6				  -	      if	(<*) < 90
   5052  2ac6				  -	      repeat	(90-<*)
   5053  2ac6				  -	      .byte	0
   5054  2ac6				  -	      repend
   5055  2ac6					      endif
   5056  2ac6				   player44then_3
   5057  2ac6		       81		      .byte.b	%10000001
   5058  2ac7		       ff		      .byte.b	%11111111
   5059  2ac8		       24		      .byte.b	%00100100
   5060  2ac9		       c3		      .byte.b	%11000011
   5061  2aca		       5a		      .byte.b	%01011010
   5062  2acb		       42		      .byte.b	%01000010
   5063  2acc		       3c		      .byte.b	%00111100
   5064  2acd		       e7		      .byte.b	%11100111
   5065  2ace				  -	      if	(<*) > (<(*+7))
   5066  2ace				  -	      repeat	($100-<*)
   5067  2ace				  -	      .byte	0
   5068  2ace				  -	      repend
   5069  2ace					      endif
   5070  2ace				  -	      if	(<*) < 90
   5071  2ace				  -	      repeat	(90-<*)
   5072  2ace				  -	      .byte	0
   5073  2ace				  -	      repend
   5074  2ace					      endif
   5075  2ace				   player46then_3
   5076  2ace		       00		      .byte.b	%00000000
   5077  2acf		       ff		      .byte.b	%11111111
   5078  2ad0		       24		      .byte.b	%00100100
   5079  2ad1		       42		      .byte.b	%01000010
   5080  2ad2		       db		      .byte.b	%11011011
   5081  2ad3		       42		      .byte.b	%01000010
   5082  2ad4		       3c		      .byte.b	%00111100
   5083  2ad5		       e7		      .byte.b	%11100111
   5084  2ad6				  -	      if	(<*) > (<(*+7))
   5085  2ad6				  -	      repeat	($100-<*)
   5086  2ad6				  -	      .byte	0
   5087  2ad6				  -	      repend
   5088  2ad6					      endif
   5089  2ad6				  -	      if	(<*) < 90
   5090  2ad6				  -	      repeat	(90-<*)
   5091  2ad6				  -	      .byte	0
   5092  2ad6				  -	      repend
   5093  2ad6					      endif
   5094  2ad6				   player47then_3
   5095  2ad6		       00		      .byte.b	%00000000
   5096  2ad7		       7e		      .byte.b	%01111110
   5097  2ad8		       a5		      .byte.b	%10100101
   5098  2ad9		       42		      .byte.b	%01000010
   5099  2ada		       5a		      .byte.b	%01011010
   5100  2adb		       c3		      .byte.b	%11000011
   5101  2adc		       3c		      .byte.b	%00111100
   5102  2add		       e7		      .byte.b	%11100111
   5103  2ade				  -	      if	(<*) > (<(*+7))
   5104  2ade				  -	      repeat	($100-<*)
   5105  2ade				  -	      .byte	0
   5106  2ade				  -	      repend
   5107  2ade					      endif
   5108  2ade				  -	      if	(<*) < 90
   5109  2ade				  -	      repeat	(90-<*)
   5110  2ade				  -	      .byte	0
   5111  2ade				  -	      repend
   5112  2ade					      endif
   5113  2ade				   player49then_2
   5114  2ade		       3c		      .byte.b	%00111100
   5115  2adf		       db		      .byte.b	%11011011
   5116  2ae0		       5a		      .byte.b	%01011010
   5117  2ae1		       ff		      .byte.b	%11111111
   5118  2ae2		       99		      .byte.b	%10011001
   5119  2ae3		       a5		      .byte.b	%10100101
   5120  2ae4		       c3		      .byte.b	%11000011
   5121  2ae5		       7e		      .byte.b	%01111110
   5122  2ae6				  -	      if	(<*) > (<(*+7))
   5123  2ae6				  -	      repeat	($100-<*)
   5124  2ae6				  -	      .byte	0
   5125  2ae6				  -	      repend
   5126  2ae6					      endif
   5127  2ae6				  -	      if	(<*) < 90
   5128  2ae6				  -	      repeat	(90-<*)
   5129  2ae6				  -	      .byte	0
   5130  2ae6				  -	      repend
   5131  2ae6					      endif
   5132  2ae6				   player51then_2
   5133  2ae6		       5a		      .byte.b	%01011010
   5134  2ae7		       5a		      .byte.b	%01011010
   5135  2ae8		       5a		      .byte.b	%01011010
   5136  2ae9		       ff		      .byte.b	%11111111
   5137  2aea		       81		      .byte.b	%10000001
   5138  2aeb		       a5		      .byte.b	%10100101
   5139  2aec		       c3		      .byte.b	%11000011
   5140  2aed		       7e		      .byte.b	%01111110
   5141  2aee				  -	      if	(<*) > (<(*+7))
   5142  2aee				  -	      repeat	($100-<*)
   5143  2aee				  -	      .byte	0
   5144  2aee				  -	      repend
   5145  2aee					      endif
   5146  2aee				  -	      if	(<*) < 90
   5147  2aee				  -	      repeat	(90-<*)
   5148  2aee				  -	      .byte	0
   5149  2aee				  -	      repend
   5150  2aee					      endif
   5151  2aee				   player52then_4
   5152  2aee		       24		      .byte.b	%00100100
   5153  2aef		       a5		      .byte.b	%10100101
   5154  2af0		       5a		      .byte.b	%01011010
   5155  2af1		       3c		      .byte.b	%00111100
   5156  2af2		       7e		      .byte.b	%01111110
   5157  2af3		       99		      .byte.b	%10011001
   5158  2af4		       24		      .byte.b	%00100100
   5159  2af5		       42		      .byte.b	%01000010
   5160  2af6				  -	      if	(<*) > (<(*+7))
   5161  2af6				  -	      repeat	($100-<*)
   5162  2af6				  -	      .byte	0
   5163  2af6				  -	      repend
   5164  2af6					      endif
   5165  2af6				  -	      if	(<*) < 90
   5166  2af6				  -	      repeat	(90-<*)
   5167  2af6				  -	      .byte	0
   5168  2af6				  -	      repend
   5169  2af6					      endif
   5170  2af6				   player53then_4
   5171  2af6		       24		      .byte.b	%00100100
   5172  2af7		       24		      .byte.b	%00100100
   5173  2af8		       db		      .byte.b	%11011011
   5174  2af9		       3c		      .byte.b	%00111100
   5175  2afa		       ff		      .byte.b	%11111111
   5176  2afb		       18		      .byte.b	%00011000
   5177  2afc		       24		      .byte.b	%00100100
   5178  2afd		       24		      .byte.b	%00100100
   5179  2afe					      if	(<*) > (<(*+7))
   5180  2afe					      repeat	($100-<*)
   5181  2afe		       00		      .byte.b	0
   5180  2afe					      repend
   5181  2aff		       00		      .byte.b	0
   5182  2b00					      repend
   5183  2b00					      endif
   5184  2b00					      if	(<*) < 90
   5185  2b00					      repeat	(90-<*)
   5186  2b00		       00		      .byte.b	0
   5185  2b00					      repend
   5186  2b01		       00		      .byte.b	0
   5185  2b01					      repend
   5186  2b02		       00		      .byte.b	0
   5185  2b02					      repend
   5186  2b03		       00		      .byte.b	0
   5185  2b03					      repend
   5186  2b04		       00		      .byte.b	0
   5185  2b04					      repend
   5186  2b05		       00		      .byte.b	0
   5185  2b05					      repend
   5186  2b06		       00		      .byte.b	0
   5185  2b06					      repend
   5186  2b07		       00		      .byte.b	0
   5185  2b07					      repend
   5186  2b08		       00		      .byte.b	0
   5185  2b08					      repend
   5186  2b09		       00		      .byte.b	0
   5185  2b09					      repend
   5186  2b0a		       00		      .byte.b	0
   5185  2b0a					      repend
   5186  2b0b		       00		      .byte.b	0
   5185  2b0b					      repend
   5186  2b0c		       00		      .byte.b	0
   5185  2b0c					      repend
   5186  2b0d		       00		      .byte.b	0
   5185  2b0d					      repend
   5186  2b0e		       00		      .byte.b	0
   5185  2b0e					      repend
   5186  2b0f		       00		      .byte.b	0
   5185  2b0f					      repend
   5186  2b10		       00		      .byte.b	0
   5185  2b10					      repend
   5186  2b11		       00		      .byte.b	0
   5185  2b11					      repend
   5186  2b12		       00		      .byte.b	0
   5185  2b12					      repend
   5186  2b13		       00		      .byte.b	0
   5185  2b13					      repend
   5186  2b14		       00		      .byte.b	0
   5185  2b14					      repend
   5186  2b15		       00		      .byte.b	0
   5185  2b15					      repend
   5186  2b16		       00		      .byte.b	0
   5185  2b16					      repend
   5186  2b17		       00		      .byte.b	0
   5185  2b17					      repend
   5186  2b18		       00		      .byte.b	0
   5185  2b18					      repend
   5186  2b19		       00		      .byte.b	0
   5185  2b19					      repend
   5186  2b1a		       00		      .byte.b	0
   5185  2b1a					      repend
   5186  2b1b		       00		      .byte.b	0
   5185  2b1b					      repend
   5186  2b1c		       00		      .byte.b	0
   5185  2b1c					      repend
   5186  2b1d		       00		      .byte.b	0
   5185  2b1d					      repend
   5186  2b1e		       00		      .byte.b	0
   5185  2b1e					      repend
   5186  2b1f		       00		      .byte.b	0
   5185  2b1f					      repend
   5186  2b20		       00		      .byte.b	0
   5185  2b20					      repend
   5186  2b21		       00		      .byte.b	0
   5185  2b21					      repend
   5186  2b22		       00		      .byte.b	0
   5185  2b22					      repend
   5186  2b23		       00		      .byte.b	0
   5185  2b23					      repend
   5186  2b24		       00		      .byte.b	0
   5185  2b24					      repend
   5186  2b25		       00		      .byte.b	0
   5185  2b25					      repend
   5186  2b26		       00		      .byte.b	0
   5185  2b26					      repend
   5186  2b27		       00		      .byte.b	0
   5185  2b27					      repend
   5186  2b28		       00		      .byte.b	0
   5185  2b28					      repend
   5186  2b29		       00		      .byte.b	0
   5185  2b29					      repend
   5186  2b2a		       00		      .byte.b	0
   5185  2b2a					      repend
   5186  2b2b		       00		      .byte.b	0
   5185  2b2b					      repend
   5186  2b2c		       00		      .byte.b	0
   5185  2b2c					      repend
   5186  2b2d		       00		      .byte.b	0
   5185  2b2d					      repend
   5186  2b2e		       00		      .byte.b	0
   5185  2b2e					      repend
   5186  2b2f		       00		      .byte.b	0
   5185  2b2f					      repend
   5186  2b30		       00		      .byte.b	0
   5185  2b30					      repend
   5186  2b31		       00		      .byte.b	0
   5185  2b31					      repend
   5186  2b32		       00		      .byte.b	0
   5185  2b32					      repend
   5186  2b33		       00		      .byte.b	0
   5185  2b33					      repend
   5186  2b34		       00		      .byte.b	0
   5185  2b34					      repend
   5186  2b35		       00		      .byte.b	0
   5185  2b35					      repend
   5186  2b36		       00		      .byte.b	0
   5185  2b36					      repend
   5186  2b37		       00		      .byte.b	0
   5185  2b37					      repend
   5186  2b38		       00		      .byte.b	0
   5185  2b38					      repend
   5186  2b39		       00		      .byte.b	0
   5185  2b39					      repend
   5186  2b3a		       00		      .byte.b	0
   5185  2b3a					      repend
   5186  2b3b		       00		      .byte.b	0
   5185  2b3b					      repend
   5186  2b3c		       00		      .byte.b	0
   5185  2b3c					      repend
   5186  2b3d		       00		      .byte.b	0
   5185  2b3d					      repend
   5186  2b3e		       00		      .byte.b	0
   5185  2b3e					      repend
   5186  2b3f		       00		      .byte.b	0
   5185  2b3f					      repend
   5186  2b40		       00		      .byte.b	0
   5185  2b40					      repend
   5186  2b41		       00		      .byte.b	0
   5185  2b41					      repend
   5186  2b42		       00		      .byte.b	0
   5185  2b42					      repend
   5186  2b43		       00		      .byte.b	0
   5185  2b43					      repend
   5186  2b44		       00		      .byte.b	0
   5185  2b44					      repend
   5186  2b45		       00		      .byte.b	0
   5185  2b45					      repend
   5186  2b46		       00		      .byte.b	0
   5185  2b46					      repend
   5186  2b47		       00		      .byte.b	0
   5185  2b47					      repend
   5186  2b48		       00		      .byte.b	0
   5185  2b48					      repend
   5186  2b49		       00		      .byte.b	0
   5185  2b49					      repend
   5186  2b4a		       00		      .byte.b	0
   5185  2b4a					      repend
   5186  2b4b		       00		      .byte.b	0
   5185  2b4b					      repend
   5186  2b4c		       00		      .byte.b	0
   5185  2b4c					      repend
   5186  2b4d		       00		      .byte.b	0
   5185  2b4d					      repend
   5186  2b4e		       00		      .byte.b	0
   5185  2b4e					      repend
   5186  2b4f		       00		      .byte.b	0
   5185  2b4f					      repend
   5186  2b50		       00		      .byte.b	0
   5185  2b50					      repend
   5186  2b51		       00		      .byte.b	0
   5185  2b51					      repend
   5186  2b52		       00		      .byte.b	0
   5185  2b52					      repend
   5186  2b53		       00		      .byte.b	0
   5185  2b53					      repend
   5186  2b54		       00		      .byte.b	0
   5185  2b54					      repend
   5186  2b55		       00		      .byte.b	0
   5185  2b55					      repend
   5186  2b56		       00		      .byte.b	0
   5185  2b56					      repend
   5186  2b57		       00		      .byte.b	0
   5185  2b57					      repend
   5186  2b58		       00		      .byte.b	0
   5185  2b58					      repend
   5186  2b59		       00		      .byte.b	0
   5187  2b5a					      repend
   5188  2b5a					      endif
   5189  2b5a				   playerL0142_5
   5190  2b5a		       91		      .byte.b	%10010001
   5191  2b5b		       5a		      .byte.b	%01011010
   5192  2b5c		       24		      .byte.b	%00100100
   5193  2b5d		       db		      .byte.b	%11011011
   5194  2b5e		       5a		      .byte.b	%01011010
   5195  2b5f		       24		      .byte.b	%00100100
   5196  2b60		       5a		      .byte.b	%01011010
   5197  2b61		       89		      .byte.b	%10001001
   5198  2b62				  -	      if	((>(*+11)) > (>*))
   5199  2b62				  -	      ALIGN	256
   5200  2b62					      endif
   5201  2b62				   PF1_data0
   5202  2b62		       7f		      .byte.b	%01111111
   5203  2b63		       7f		      .byte.b	%01111111
   5204  2b64		       6b		      .byte.b	%01101011
   5205  2b65		       3e		      .byte.b	%00111110
   5206  2b66		       00		      .byte.b	%00000000
   5207  2b67		       00		      .byte.b	%00000000
   5208  2b68		       00		      .byte.b	%00000000
   5209  2b69		       00		      .byte.b	%00000000
   5210  2b6a		       00		      .byte.b	%00000000
   5211  2b6b		       00		      .byte.b	%00000000
   5212  2b6c		       00		      .byte.b	%00000000
   5213  2b6d				  -	      if	((>(*+11)) > (>*))
   5214  2b6d				  -	      ALIGN	256
   5215  2b6d					      endif
   5216  2b6d				   PF2_data0
   5217  2b6d		       6c		      .byte.b	%01101100
   5218  2b6e		       7c		      .byte.b	%01111100
   5219  2b6f		       54		      .byte.b	%01010100
   5220  2b70		       7c		      .byte.b	%01111100
   5221  2b71		       00		      .byte.b	%00000000
   5222  2b72		       00		      .byte.b	%00000000
   5223  2b73		       00		      .byte.b	%00000000
   5224  2b74		       00		      .byte.b	%00000000
   5225  2b75		       00		      .byte.b	%00000000
   5226  2b76		       00		      .byte.b	%00000000
   5227  2b77		       00		      .byte.b	%00000000
   5228  2b78					      if	ECHOFIRST
      1020 bytes of ROM space left in bank 2
   5229  2b78					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5230  2b78					      endif
   5231  2b78		       00 01	   ECHOFIRST  =	1
   5232  2b78
   5233  2b78
   5234  2b78							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5235  2b78
   5236  2b78							; feel free to modify the score graphics - just keep each digit 8 high
   5237  2b78							; and keep the conditional compilation stuff intact
   5238  2b78				  -	      ifconst	ROM2k
   5239  2b78				  -	      ORG	$F7AC-8
   5240  2b78					      else
   5241  2b78					      ifconst	bankswitch
   5242  2b78					      if	bankswitch == 8
   5243  2f74					      ORG	$2F94-bscode_length
   5244  2f74					      RORG	$FF94-bscode_length
   5245  2f74					      endif
   5246  2f74				  -	      if	bankswitch == 16
   5247  2f74				  -	      ORG	$4F94-bscode_length
   5248  2f74				  -	      RORG	$FF94-bscode_length
   5249  2f74					      endif
   5250  2f74				  -	      if	bankswitch == 32
   5251  2f74				  -	      ORG	$8F94-bscode_length
   5252  2f74				  -	      RORG	$FF94-bscode_length
   5253  2f74					      endif
   5254  2f74				  -	      if	bankswitch == 64
   5255  2f74				  -	      ORG	$10F80-bscode_length
   5256  2f74				  -	      RORG	$1FF80-bscode_length
   5257  2f74					      endif
   5258  2f74				  -	      else
   5259  2f74				  -	      ORG	$FF9C
   5260  2f74					      endif
   5261  2f74					      endif
   5262  2f74
   5263  2f74							; font equates
   5264  2f74		       00 01	   .21stcentury =	1
   5265  2f74		       00 02	   alarmclock =	2
   5266  2f74		       00 03	   handwritten =	3
   5267  2f74		       00 04	   interrupted =	4
   5268  2f74		       00 05	   retroputer =	5
   5269  2f74		       00 06	   whimsey    =	6
   5270  2f74		       00 07	   tiny       =	7
   5271  2f74		       00 08	   hex	      =	8
   5272  2f74
   5273  2f74				  -	      ifconst	font
   5274  2f74				  -	      if	font == hex
   5275  2f74				  -	      ORG	. - 48
   5276  2f74				  -	      endif
   5277  2f74					      endif
   5278  2f74
   5279  2f74				   scoretable
   5280  2f74
   5281  2f74				  -	      ifconst	font
   5282  2f74				  -	      if	font == .21stcentury
   5283  2f74				  -	      include	"score_graphics.asm.21stcentury"
   5284  2f74				  -	      endif
   5285  2f74				  -	      if	font == alarmclock
   5286  2f74				  -	      include	"score_graphics.asm.alarmclock"
   5287  2f74				  -	      endif
   5288  2f74				  -	      if	font == handwritten
   5289  2f74				  -	      include	"score_graphics.asm.handwritten"
   5290  2f74				  -	      endif
   5291  2f74				  -	      if	font == interrupted
   5292  2f74				  -	      include	"score_graphics.asm.interrupted"
   5293  2f74				  -	      endif
   5294  2f74				  -	      if	font == retroputer
   5295  2f74				  -	      include	"score_graphics.asm.retroputer"
   5296  2f74				  -	      endif
   5297  2f74				  -	      if	font == whimsey
   5298  2f74				  -	      include	"score_graphics.asm.whimsey"
   5299  2f74				  -	      endif
   5300  2f74				  -	      if	font == tiny
   5301  2f74				  -	      include	"score_graphics.asm.tiny"
   5302  2f74				  -	      endif
   5303  2f74				  -	      if	font == hex
   5304  2f74				  -	      include	"score_graphics.asm.hex"
   5305  2f74				  -	      endif
   5306  2f74					      else		; default font
   5307  2f74
   5308  2f74		       3c		      .byte.b	%00111100
   5309  2f75		       66		      .byte.b	%01100110
   5310  2f76		       66		      .byte.b	%01100110
   5311  2f77		       66		      .byte.b	%01100110
   5312  2f78		       66		      .byte.b	%01100110
   5313  2f79		       66		      .byte.b	%01100110
   5314  2f7a		       66		      .byte.b	%01100110
   5315  2f7b		       3c		      .byte.b	%00111100
   5316  2f7c
   5317  2f7c		       7e		      .byte.b	%01111110
   5318  2f7d		       18		      .byte.b	%00011000
   5319  2f7e		       18		      .byte.b	%00011000
   5320  2f7f		       18		      .byte.b	%00011000
   5321  2f80		       18		      .byte.b	%00011000
   5322  2f81		       38		      .byte.b	%00111000
   5323  2f82		       18		      .byte.b	%00011000
   5324  2f83		       08		      .byte.b	%00001000
   5325  2f84
   5326  2f84		       7e		      .byte.b	%01111110
   5327  2f85		       60		      .byte.b	%01100000
   5328  2f86		       60		      .byte.b	%01100000
   5329  2f87		       3c		      .byte.b	%00111100
   5330  2f88		       06		      .byte.b	%00000110
   5331  2f89		       06		      .byte.b	%00000110
   5332  2f8a		       46		      .byte.b	%01000110
   5333  2f8b		       3c		      .byte.b	%00111100
   5334  2f8c
   5335  2f8c		       3c		      .byte.b	%00111100
   5336  2f8d		       46		      .byte.b	%01000110
   5337  2f8e		       06		      .byte.b	%00000110
   5338  2f8f		       06		      .byte.b	%00000110
   5339  2f90		       1c		      .byte.b	%00011100
   5340  2f91		       06		      .byte.b	%00000110
   5341  2f92		       46		      .byte.b	%01000110
   5342  2f93		       3c		      .byte.b	%00111100
   5343  2f94
   5344  2f94		       0c		      .byte.b	%00001100
   5345  2f95		       0c		      .byte.b	%00001100
   5346  2f96		       7e		      .byte.b	%01111110
   5347  2f97		       4c		      .byte.b	%01001100
   5348  2f98		       4c		      .byte.b	%01001100
   5349  2f99		       2c		      .byte.b	%00101100
   5350  2f9a		       1c		      .byte.b	%00011100
   5351  2f9b		       0c		      .byte.b	%00001100
   5352  2f9c
   5353  2f9c		       3c		      .byte.b	%00111100
   5354  2f9d		       46		      .byte.b	%01000110
   5355  2f9e		       06		      .byte.b	%00000110
   5356  2f9f		       06		      .byte.b	%00000110
   5357  2fa0		       3c		      .byte.b	%00111100
   5358  2fa1		       60		      .byte.b	%01100000
   5359  2fa2		       60		      .byte.b	%01100000
   5360  2fa3		       7e		      .byte.b	%01111110
   5361  2fa4
   5362  2fa4		       3c		      .byte.b	%00111100
   5363  2fa5		       66		      .byte.b	%01100110
   5364  2fa6		       66		      .byte.b	%01100110
   5365  2fa7		       66		      .byte.b	%01100110
   5366  2fa8		       7c		      .byte.b	%01111100
   5367  2fa9		       60		      .byte.b	%01100000
   5368  2faa		       62		      .byte.b	%01100010
   5369  2fab		       3c		      .byte.b	%00111100
   5370  2fac
   5371  2fac		       30		      .byte.b	%00110000
   5372  2fad		       30		      .byte.b	%00110000
   5373  2fae		       30		      .byte.b	%00110000
   5374  2faf		       18		      .byte.b	%00011000
   5375  2fb0		       0c		      .byte.b	%00001100
   5376  2fb1		       06		      .byte.b	%00000110
   5377  2fb2		       42		      .byte.b	%01000010
   5378  2fb3		       3e		      .byte.b	%00111110
   5379  2fb4
   5380  2fb4		       3c		      .byte.b	%00111100
   5381  2fb5		       66		      .byte.b	%01100110
   5382  2fb6		       66		      .byte.b	%01100110
   5383  2fb7		       66		      .byte.b	%01100110
   5384  2fb8		       3c		      .byte.b	%00111100
   5385  2fb9		       66		      .byte.b	%01100110
   5386  2fba		       66		      .byte.b	%01100110
   5387  2fbb		       3c		      .byte.b	%00111100
   5388  2fbc
   5389  2fbc		       3c		      .byte.b	%00111100
   5390  2fbd		       46		      .byte.b	%01000110
   5391  2fbe		       06		      .byte.b	%00000110
   5392  2fbf		       3e		      .byte.b	%00111110
   5393  2fc0		       66		      .byte.b	%01100110
   5394  2fc1		       66		      .byte.b	%01100110
   5395  2fc2		       66		      .byte.b	%01100110
   5396  2fc3		       3c		      .byte.b	%00111100
   5397  2fc4
   5398  2fc4					      ifnconst	DPC_kernel_options
   5399  2fc4
   5400  2fc4		       00		      .byte.b	%00000000
   5401  2fc5		       00		      .byte.b	%00000000
   5402  2fc6		       00		      .byte.b	%00000000
   5403  2fc7		       00		      .byte.b	%00000000
   5404  2fc8		       00		      .byte.b	%00000000
   5405  2fc9		       00		      .byte.b	%00000000
   5406  2fca		       00		      .byte.b	%00000000
   5407  2fcb		       00		      .byte.b	%00000000
   5408  2fcc
   5409  2fcc					      endif
   5410  2fcc
   5411  2fcc					      endif
   5412  2fcc
   5413  2fcc				  -	      ifconst	ROM2k
   5414  2fcc				  -	      ORG	$F7FC
   5415  2fcc					      else
   5416  2fcc					      ifconst	bankswitch
   5417  2fcc					      if	bankswitch == 8
   5418  2fd4					      ORG	$2FF4-bscode_length
   5419  2fd4					      RORG	$FFF4-bscode_length
   5420  2fd4					      endif
   5421  2fd4				  -	      if	bankswitch == 16
   5422  2fd4				  -	      ORG	$4FF4-bscode_length
   5423  2fd4				  -	      RORG	$FFF4-bscode_length
   5424  2fd4					      endif
   5425  2fd4				  -	      if	bankswitch == 32
   5426  2fd4				  -	      ORG	$8FF4-bscode_length
   5427  2fd4				  -	      RORG	$FFF4-bscode_length
   5428  2fd4					      endif
   5429  2fd4				  -	      if	bankswitch == 64
   5430  2fd4				  -	      ORG	$10FE0-bscode_length
   5431  2fd4				  -	      RORG	$1FFE0-bscode_length
   5432  2fd4					      endif
   5433  2fd4				  -	      else
   5434  2fd4				  -	      ORG	$FFFC
   5435  2fd4					      endif
   5436  2fd4					      endif
   5437  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5438  2fd4
   5439  2fd4							; every bank has this stuff at the same place
   5440  2fd4							; this code can switch to/from any bank at any entry point
   5441  2fd4							; and can preserve register values
   5442  2fd4							; note: lines not starting with a space are not placed in all banks
   5443  2fd4							;
   5444  2fd4							; line below tells the compiler how long this is - do not remove
   5445  2fd4							;size=32
   5446  2fd4
   5447  2fd4				   begin_bscode
   5448  2fd4		       a2 ff		      ldx	#$ff
   5449  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   5450  2fd6				  -	      stx	FASTFETCH
   5451  2fd6					      endif
   5452  2fd6		       9a		      txs
   5453  2fd7				  -	      if	bankswitch == 64
   5454  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5455  2fd7					      else
   5456  2fd7		       a9 f3		      lda	#>(start-1)
   5457  2fd9					      endif
   5458  2fd9		       48		      pha
   5459  2fda		       a9 f7		      lda	#<(start-1)
   5460  2fdc		       48		      pha
   5461  2fdd
   5462  2fdd				   BS_return
   5463  2fdd		       48		      pha
   5464  2fde		       8a		      txa
   5465  2fdf		       48		      pha
   5466  2fe0		       ba		      tsx
   5467  2fe1
   5468  2fe1					      if	bankswitch != 64
   5469  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   5470  2fe3
   5471  2fe3		       2a		      rol
   5472  2fe4		       2a		      rol
   5473  2fe5		       2a		      rol
   5474  2fe6		       2a		      rol
   5475  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5476  2fe9		       aa		      tax
   5477  2fea		       e8		      inx
   5478  2feb				  -	      else
   5479  2feb				  -	      lda	4,x	; get high byte of return address
   5480  2feb				  -	      tay
   5481  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5482  2feb				  -	      sta	4,x
   5483  2feb				  -	      tya
   5484  2feb				  -	      lsr
   5485  2feb				  -	      lsr
   5486  2feb				  -	      lsr
   5487  2feb				  -	      lsr
   5488  2feb				  -	      tax
   5489  2feb				  -	      inx
   5490  2feb					      endif
   5491  2feb
   5492  2feb				   BS_jsr
   5493  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5494  2fee		       68		      pla
   5495  2fef		       aa		      tax
   5496  2ff0		       68		      pla
   5497  2ff1		       60		      rts
   5498  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5499  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5500  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5501  2ff2					      endif
   5502  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5503  2ff2
   5504  2ff2					      ifconst	bankswitch
   5505  2ff2					      if	bankswitch == 8
   5506  2ffc					      ORG	$2FFC
   5507  2ffc					      RORG	$FFFC
   5508  2ffc					      endif
   5509  2ffc				  -	      if	bankswitch == 16
   5510  2ffc				  -	      ORG	$4FFC
   5511  2ffc				  -	      RORG	$FFFC
   5512  2ffc					      endif
   5513  2ffc				  -	      if	bankswitch == 32
   5514  2ffc				  -	      ORG	$8FFC
   5515  2ffc				  -	      RORG	$FFFC
   5516  2ffc					      endif
   5517  2ffc				  -	      if	bankswitch == 64
   5518  2ffc				  -	      ORG	$10FF0
   5519  2ffc				  -	      RORG	$1FFF0
   5520  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5521  2ffc				  -	      ORG	$10FF8
   5522  2ffc				  -	      RORG	$1FFF8
   5523  2ffc				  -	      ifconst	superchip
   5524  2ffc				  -	      .byte	"E","F","S","C"
   5525  2ffc				  -	      else
   5526  2ffc				  -	      .byte	"E","F","E","F"
   5527  2ffc				  -	      endif
   5528  2ffc				  -	      ORG	$10FFC
   5529  2ffc				  -	      RORG	$1FFFC
   5530  2ffc					      endif
   5531  2ffc				  -	      else
   5532  2ffc				  -	      ifconst	ROM2k
   5533  2ffc				  -	      ORG	$F7FC
   5534  2ffc				  -	      else
   5535  2ffc				  -	      ORG	$FFFC
   5536  2ffc				  -	      endif
   5537  2ffc					      endif
   5538  2ffc		       f8 f3		      .word.w	(start & $ffff)
   5539  2ffe		       f8 f3		      .word.w	(start & $ffff)
