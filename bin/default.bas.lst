------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 d4	   _sc3       =	score + 2
      7  3000 ????
      8  3000 ????	       00 d3	   _sc2       =	score + 1
      9  3000 ????
     10  3000 ????	       00 d2	   _sc1       =	score
     11  3000 ????
     12  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     13  3000 ????
     14  3000 ????	       00 f0	   gameReady  =	z
     15  3000 ????
     16  3000 ????	       00 ee	   _resetTicker =	x
     17  3000 ????
     18  3000 ????	       00 eb	   _High_Score2 =	u
     19  3000 ????
     20  3000 ????	       00 ea	   _High_Score1 =	t
     21  3000 ????
     22  3000 ????	       00 e9	   _High_Score3 =	s
     23  3000 ????
     24  3000 ????	       00 e8	   firstFrame =	r
     25  3000 ????
     26  3000 ????	       00 e6	   altSprite  =	p
     27  3000 ????
     28  3000 ????	       00 e4	   ticker     =	n
     29  3000 ????
     30  3000 ????	       00 e3	   killCount  =	m
     31  3000 ????
     32  3000 ????	       00 e2	   bulletMultiplier =	l
     33  3000 ????
     34  3000 ????	       00 88	   asteroid4x =	player4x
     35  3000 ????	       00 87	   asteroid3x =	player3x
     36  3000 ????	       00 86	   asteroid2x =	player2x
     37  3000 ????	       00 85	   asteroidx  =	player1x
     38  3000 ????	       00 dd	   realLives  =	g
     39  3000 ????
     40  3000 ????	       00 dc	   explosionTicker =	f
     41  3000 ????
     42  3000 ????	       00 91	   asteroid4Y =	player4y
     43  3000 ????	       00 90	   asteroid3Y =	player3y
     44  3000 ????	       00 8f	   asteroid2Y =	player2y
     45  3000 ????	       00 8e	   asteroidY  =	player1y
     46  3000 ????	       00 d7	   _P0_Luminosity =	a
     47  3000 ????	       00 01	   bs_mask    =	1
     48  3000 ????	       00 08	   bankswitch =	8
     49  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     50  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .L08 		;  includesfile multisprite_superchip.inc
     50  1100
     51  1100				   .L09 		;  set kernel multisprite
     52  1100
     53  1100				   .L010		;  set romsize 8k
     54  1100
     55  1100				   .
     56  1100							; 
     57  1100
     58  1100				   .L011		;  pfheight = 7
     59  1100
     60  1100		       a9 07		      LDA	#7
     61  1102		       85 c4		      STA	pfheight
     62  1104				   .
     63  1104							; 
     64  1104
     65  1104				   .L012		;  playfield:
     66  1104
     67  1104		       a9 6a		      LDA	#<PF1_data0
     68  1106		       85 bb		      STA	PF1pointer
     69  1108		       a9 fd		      LDA	#>PF1_data0
     70  110a		       85 bc		      STA	PF1pointer+1
     71  110c		       a9 75		      LDA	#<PF2_data0
     72  110e		       85 bd		      STA	PF2pointer
     73  1110		       a9 fd		      LDA	#>PF2_data0
     74  1112		       85 be		      STA	PF2pointer+1
     75  1114				   .
     76  1114							; 
     77  1114
     78  1114				   .
     79  1114							; 
     80  1114
     81  1114				   .L013		;  COLUBK  =  $0
     82  1114
     83  1114		       a9 00		      LDA	#$0
     84  1116		       85 09		      STA	COLUBK
     85  1118				   .L014		;  _COLUP1  =	$3A
     86  1118
     87  1118		       a9 3a		      LDA	#$3A
     88  111a		       85 98		      STA	_COLUP1
     89  111c				   .L015		;  COLUP2  =  $A4
     90  111c
     91  111c		       a9 a4		      LDA	#$A4
     92  111e		       85 99		      STA	COLUP2
     93  1120				   .L016		;  COLUP3  =  $A4
     94  1120
     95  1120		       a9 a4		      LDA	#$A4
     96  1122		       85 9a		      STA	COLUP3
     97  1124				   .L017		;  COLUP4  =  $76
     98  1124
     99  1124		       a9 76		      LDA	#$76
    100  1126		       85 9b		      STA	COLUP4
    101  1128				   .L018		;  COLUP5  =  $2E
    102  1128
    103  1128		       a9 2e		      LDA	#$2E
    104  112a		       85 9c		      STA	COLUP5
    105  112c				   .
    106  112c							; 
    107  112c
    108  112c				   .
    109  112c							; 
    110  112c
    111  112c				   .L019		;  lifecolor  =  $aa
    112  112c
    113  112c		       a9 aa		      LDA	#$aa
    114  112e		       85 c0		      STA	lifecolor
    115  1130				   .
    116  1130							; 
    117  1130
    118  1130				   .
    119  1130							; 
    120  1130
    121  1130				   .
    122  1130							; 
    123  1130
    124  1130				   .L020		;  player0x = 76
    125  1130
    126  1130		       a9 4c		      LDA	#76
    127  1132		       85 84		      STA	player0x
    128  1134				   .L021		;  player0y = 30
    129  1134
    130  1134		       a9 1e		      LDA	#30
    131  1136		       85 8d		      STA	player0y
    132  1138				   .
    133  1138							; 
    134  1138
    135  1138				   .L022		;  player1x = 76
    136  1138
    137  1138		       a9 4c		      LDA	#76
    138  113a		       85 85		      STA	player1x
    139  113c				   .L023		;  player1y = 99
    140  113c
    141  113c		       a9 63		      LDA	#99
    142  113e		       85 8e		      STA	player1y
    143  1140				   .
    144  1140							; 
    145  1140
    146  1140				   .L024		;  player2x = 86
    147  1140
    148  1140		       a9 56		      LDA	#86
    149  1142		       85 86		      STA	player2x
    150  1144				   .L025		;  player2y = 100
    151  1144
    152  1144		       a9 64		      LDA	#100
    153  1146		       85 8f		      STA	player2y
    154  1148				   .
    155  1148							; 
    156  1148
    157  1148				   .L026		;  player3x = 96
    158  1148
    159  1148		       a9 60		      LDA	#96
    160  114a		       85 87		      STA	player3x
    161  114c				   .L027		;  player3y = 100
    162  114c
    163  114c		       a9 64		      LDA	#100
    164  114e		       85 90		      STA	player3y
    165  1150				   .
    166  1150							; 
    167  1150
    168  1150				   .L028		;  player4x = 116
    169  1150
    170  1150		       a9 74		      LDA	#116
    171  1152		       85 88		      STA	player4x
    172  1154				   .L029		;  player4y = 100
    173  1154
    174  1154		       a9 64		      LDA	#100
    175  1156		       85 91		      STA	player4y
    176  1158				   .
    177  1158							; 
    178  1158
    179  1158				   .L030		;  player5x = 100
    180  1158
    181  1158		       a9 64		      LDA	#100
    182  115a		       85 89		      STA	player5x
    183  115c				   .L031		;  player5y =	200
    184  115c
    185  115c		       a9 c8		      LDA	#200
    186  115e		       85 92		      STA	player5y
    187  1160				   .L032		;  missile0y = 255
    188  1160
    189  1160		       a9 ff		      LDA	#255
    190  1162		       85 8a		      STA	missile0y
    191  1164				   .
    192  1164							; 
    193  1164
    194  1164				   .
    195  1164							; 
    196  1164
    197  1164				   .L033		;  missile1y = 200
    198  1164
    199  1164		       a9 c8		      LDA	#200
    200  1166		       85 8b		      STA	missile1y
    201  1168				   .L034		;  missile1x = 50
    202  1168
    203  1168		       a9 32		      LDA	#50
    204  116a		       85 81		      STA	missile1x
    205  116c				   .
    206  116c							; 
    207  116c
    208  116c				   .
    209  116c							; 
    210  116c
    211  116c				   .
    212  116c							; 
    213  116c
    214  116c				   .
    215  116c							; 
    216  116c
    217  116c				   .L035		;  dim _P0_Luminosity	=  a.b
    218  116c
    219  116c				   .L036		;  dim asteroidY  =  player1y.b
    220  116c
    221  116c				   .L037		;  dim asteroid2Y  =  player2y.c
    222  116c
    223  116c				   .L038		;  dim asteroid3Y  =  player3y.d
    224  116c
    225  116c				   .L039		;  dim asteroid4Y  =  player4y.e
    226  116c
    227  116c				   .L040		;  dim explosionTicker  =  f
    228  116c
    229  116c				   .L041		;  dim realLives  =  g
    230  116c
    231  116c				   .L042		;  dim asteroidx  =  player1x.h
    232  116c
    233  116c				   .L043		;  dim asteroid2x  =  player2x.i
    234  116c
    235  116c				   .L044		;  dim asteroid3x  =  player3x.j
    236  116c
    237  116c				   .L045		;  dim asteroid4x  =  player4x.k
    238  116c
    239  116c				   .L046		;  dim bulletMultiplier  =  l
    240  116c
    241  116c				   .L047		;  dim killCount  =  m
    242  116c
    243  116c				   .L048		;  dim ticker	=  n
    244  116c
    245  116c				   .
    246  116c							; 
    247  116c
    248  116c				   .L049		;  dim altSprite  =  p
    249  116c
    250  116c				   .L050		;  dim firstFrame  =  r
    251  116c
    252  116c				   .L051		;  dim _High_Score3  =  s
    253  116c
    254  116c				   .L052		;  dim _High_Score1  =  t
    255  116c
    256  116c				   .L053		;  dim _High_Score2  =  u
    257  116c
    258  116c				   .L054		;  dim _resetTicker  =  x
    259  116c
    260  116c				   .L055		;  dim gameReady  =  z
    261  116c
    262  116c				   .
    263  116c							; 
    264  116c
    265  116c				   .L056		;  dim _Bit6_Sequence_Switch  =  y
    266  116c
    267  116c				   .
    268  116c							; 
    269  116c
    270  116c				   .L057		;  dim _sc1  =  score
    271  116c
    272  116c				   .L058		;  dim _sc2  =  score + 1
    273  116c
    274  116c				   .L059		;  dim _sc3  =  score + 2
    275  116c
    276  116c				   .L060		;  dim titlescreencolor  =  $F0
    277  116c
    278  116c				   .
    279  116c							; 
    280  116c
    281  116c				   .
    282  116c							; 
    283  116c
    284  116c				   .
    285  116c							; 
    286  116c
    287  116c				   .
    288  116c							; 
    289  116c
    290  116c				   .
    291  116c							; 
    292  116c
    293  116c				   .L061		;  bulletMultiplier  =  0
    294  116c
    295  116c		       a9 00		      LDA	#0
    296  116e		       85 e2		      STA	bulletMultiplier
    297  1170				   .L062		;  _High_Score1  =  _sc1
    298  1170
    299  1170		       a5 d2		      LDA	_sc1
    300  1172		       85 ea		      STA	_High_Score1
    301  1174				   .L063		;  _High_Score2  =  _sc2
    302  1174
    303  1174		       a5 d3		      LDA	_sc2
    304  1176		       85 eb		      STA	_High_Score2
    305  1178				   .L064		;  _High_Score3  =  _sc3
    306  1178
    307  1178		       a5 d4		      LDA	_sc3
    308  117a		       85 e9		      STA	_High_Score3
    309  117c				   .L065		;  lives  =  192
    310  117c
    311  117c		       a9 c0		      LDA	#192
    312  117e		       85 c2		      STA	lives
    313  1180				   .L066		;  ticker  =  0
    314  1180
    315  1180		       a9 00		      LDA	#0
    316  1182		       85 e4		      STA	ticker
    317  1184				   .L067		;  _resetTicker  =  0
    318  1184
    319  1184		       a9 00		      LDA	#0
    320  1186		       85 ee		      STA	_resetTicker
    321  1188				   .L068		;  altSprite  =  0
    322  1188
    323  1188		       a9 00		      LDA	#0
    324  118a		       85 e6		      STA	altSprite
    325  118c				   .L069		;  explosionTicker  =	0
    326  118c
    327  118c		       a9 00		      LDA	#0
    328  118e		       85 dc		      STA	explosionTicker
    329  1190				   .L070		;  scorecolor	=  $1b
    330  1190
    331  1190		       a9 1b		      LDA	#$1b
    332  1192		       85 d5		      STA	scorecolor
    333  1194				   .L071		;  firstFrame	=  0
    334  1194
    335  1194		       a9 00		      LDA	#0
    336  1196		       85 e8		      STA	firstFrame
    337  1198				   .L072		;  realLives  =  3
    338  1198
    339  1198		       a9 03		      LDA	#3
    340  119a		       85 dd		      STA	realLives
    341  119c				   .L073		;  killCount  =  0
    342  119c
    343  119c		       a9 00		      LDA	#0
    344  119e		       85 e3		      STA	killCount
    345  11a0				   .
    346  11a0							; 
    347  11a0
    348  11a0				   .sprites
    349  11a0							; sprites
    350  11a0
    351  11a0				   .L074		;  ticker  =  ticker  +  1
    352  11a0
    353  11a0		       e6 e4		      INC	ticker
    354  11a2				   .L075		;  if ticker  >  10 then ticker  =  0
    355  11a2
    356  11a2		       a9 0a		      LDA	#10
    357  11a4		       c5 e4		      CMP	ticker
    358  11a6		       b0 04		      BCS	.skipL075
    359  11a8				   .condpart0
    360  11a8		       a9 00		      LDA	#0
    361  11aa		       85 e4		      STA	ticker
    362  11ac				   .skipL075
    363  11ac				   .
    364  11ac							; 
    365  11ac
    366  11ac				   .
    367  11ac							; 
    368  11ac
    369  11ac				   .
    370  11ac							; 
    371  11ac
    372  11ac				   .
    373  11ac							; 
    374  11ac
    375  11ac				   .
    376  11ac							; 
    377  11ac
    378  11ac				   .L076		;  if player1y  =  100  ||  player1y  =  0 then goto setPlayer1Color
    379  11ac
    380  11ac		       a5 8e		      LDA	player1y
    381  11ae		       c9 64		      CMP	#100
    382  11b0		       d0 03		      BNE	.skipL076
    383  11b2				   .condpart1
    384  11b2		       4c bb d1 	      jmp	.condpart2
    385  11b5				   .skipL076
    386  11b5		       a5 8e		      LDA	player1y
    387  11b7		       c9 00		      CMP	#0
    388  11b9		       d0 03		      BNE	.skip0OR
    389  11bb				   .condpart2
    390  11bb		       4c 0f dc 	      jmp	.setPlayer1Color
    391  11be
    392  11be				   .skip0OR
    393  11be				   .L077		;  if player2y  =  100  ||  player2y  =  0 then goto setPlayer2Color
    394  11be
    395  11be		       a5 8f		      LDA	player2y
    396  11c0		       c9 64		      CMP	#100
    397  11c2		       d0 03		      BNE	.skipL077
    398  11c4				   .condpart3
    399  11c4		       4c cd d1 	      jmp	.condpart4
    400  11c7				   .skipL077
    401  11c7		       a5 8f		      LDA	player2y
    402  11c9		       c9 00		      CMP	#0
    403  11cb		       d0 03		      BNE	.skip1OR
    404  11cd				   .condpart4
    405  11cd		       4c 58 dc 	      jmp	.setPlayer2Color
    406  11d0
    407  11d0				   .skip1OR
    408  11d0				   .L078		;  if player3y  =  100  ||  player4y  =  0 then goto setPlayer3Color
    409  11d0
    410  11d0		       a5 90		      LDA	player3y
    411  11d2		       c9 64		      CMP	#100
    412  11d4		       d0 03		      BNE	.skipL078
    413  11d6				   .condpart5
    414  11d6		       4c df d1 	      jmp	.condpart6
    415  11d9				   .skipL078
    416  11d9		       a5 91		      LDA	player4y
    417  11db		       c9 00		      CMP	#0
    418  11dd		       d0 03		      BNE	.skip2OR
    419  11df				   .condpart6
    420  11df		       4c dd dc 	      jmp	.setPlayer3Color
    421  11e2
    422  11e2				   .skip2OR
    423  11e2				   .L079		;  if player4y  =  100  ||  player5y  =  0 then goto setPlayer4Color
    424  11e2
    425  11e2		       a5 91		      LDA	player4y
    426  11e4		       c9 64		      CMP	#100
    427  11e6		       d0 03		      BNE	.skipL079
    428  11e8				   .condpart7
    429  11e8		       4c f1 d1 	      jmp	.condpart8
    430  11eb				   .skipL079
    431  11eb		       a5 92		      LDA	player5y
    432  11ed		       c9 00		      CMP	#0
    433  11ef		       d0 03		      BNE	.skip3OR
    434  11f1				   .condpart8
    435  11f1		       4c 4e dd 	      jmp	.setPlayer4Color
    436  11f4
    437  11f4				   .skip3OR
    438  11f4				   .
    439  11f4							; 
    440  11f4
    441  11f4				   .colorSetComplete
    442  11f4							; colorSetComplete
    443  11f4
    444  11f4				   .
    445  11f4							; 
    446  11f4
    447  11f4				   .L080		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    448  11f4
    449  11f4		       a5 92		      LDA	player5y
    450  11f6		       c9 c8		      CMP	#200
    451  11f8		       b0 02		      BCS	.skipL080
    452  11fa				   .condpart9
    453  11fa		       e6 dc		      INC	explosionTicker
    454  11fc				   .skipL080
    455  11fc				   .L081		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    456  11fc
    457  11fc		       a9 01		      LDA	#1
    458  11fe		       c5 dc		      CMP	explosionTicker
    459  1200		       b0 0e		      BCS	.skipL081
    460  1202				   .condpart10
    461  1202		       a9 c8		      LDA	#200
    462  1204		       85 92		      STA	player5y
    463  1206		       a9 00		      LDA	#0
    464  1208		       85 dc		      STA	explosionTicker
    465  120a		       85 19		      STA	AUDV0
    466  120c		       85 15		      STA	AUDC0
    467  120e		       85 17		      STA	AUDF0
    468  1210				   .skipL081
    469  1210				   .
    470  1210							; 
    471  1210
    472  1210				   .L082		;  if player4y  <  85	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    473  1210
    474  1210		       a5 91		      LDA	player4y
    475  1212		       c9 55		      CMP	#85
    476  1214		       b0 11		      BCS	.skipL082
    477  1216				   .condpart11
    478  1216		       a9 96		      LDA	#150
    479  1218		       c5 8b		      CMP	missile1y
    480  121a		       b0 0b		      BCS	.skip11then
    481  121c				   .condpart12
    482  121c		       a5 91		      LDA	player4y
    483  121e		       85 8b		      STA	missile1y
    484  1220		       a5 88		      LDA	player4x
    485  1222		       38		      SEC
    486  1223		       e9 03		      SBC	#3
    487  1225		       85 81		      STA	missile1x
    488  1227				   .skip11then
    489  1227				   .skipL082
    490  1227				   .L083		;  if player3y  <  85	&&  missile1y  >  150 then missile1y  =  player3y :  missile1x	=  player3x  -	3
    491  1227
    492  1227		       a5 90		      LDA	player3y
    493  1229		       c9 55		      CMP	#85
    494  122b		       b0 11		      BCS	.skipL083
    495  122d				   .condpart13
    496  122d		       a9 96		      LDA	#150
    497  122f		       c5 8b		      CMP	missile1y
    498  1231		       b0 0b		      BCS	.skip13then
    499  1233				   .condpart14
    500  1233		       a5 90		      LDA	player3y
    501  1235		       85 8b		      STA	missile1y
    502  1237		       a5 87		      LDA	player3x
    503  1239		       38		      SEC
    504  123a		       e9 03		      SBC	#3
    505  123c		       85 81		      STA	missile1x
    506  123e				   .skip13then
    507  123e				   .skipL083
    508  123e				   .
    509  123e							; 
    510  123e
    511  123e				   .L084		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    512  123e
    513  123e		       a9 1e		      LDA	#30
    514  1240		       c5 8a		      CMP	missile0y
    515  1242		       b0 15		      BCS	.skipL084
    516  1244				   .condpart15
    517  1244		       a5 8a		      LDA	missile0y
    518  1246		       c9 3c		      CMP	#60
    519  1248		       b0 0f		      BCS	.skip15then
    520  124a				   .condpart16
    521  124a		       a9 02		      LDA	#2
    522  124c		       85 1a		      STA	AUDV1
    523  124e		       a9 0c		      LDA	#12
    524  1250		       85 16		      STA	AUDC1
    525  1252		       a9 07		      LDA	#7
    526  1254		       85 18		      STA	AUDF1
    527  1256		       4c 61 d2 	      jmp	.skipelse0
    528  1259				   .skip15then
    529  1259				   .skipL084
    530  1259		       a9 00		      LDA	#0
    531  125b		       85 1a		      STA	AUDV1
    532  125d		       85 16		      STA	AUDC1
    533  125f		       85 17		      STA	AUDF0
    534  1261				   .skipelse0
    535  1261				   .
    536  1261							; 
    537  1261
    538  1261				   .L085		;  if collision(missile1,player0) then goto killPlayer
    539  1261
    540  1261		       24 01		      bit	CXM1P
    541  1263		       10 03		      BPL	.skipL085
    542  1265				   .condpart17
    543  1265		       4c f7 dd 	      jmp	.killPlayer
    544  1268
    545  1268				   .skipL085
    546  1268				   .L086		;  if collision(player0,player1) then goto killPlayer
    547  1268
    548  1268		       24 07		      bit	CXPPMM
    549  126a		       10 03		      BPL	.skipL086
    550  126c				   .condpart18
    551  126c		       4c f7 dd 	      jmp	.killPlayer
    552  126f
    553  126f				   .skipL086
    554  126f				   .L087		;  if _resetTicker  >	0 then goto killPlayer
    555  126f
    556  126f		       a9 00		      LDA	#0
    557  1271		       c5 ee		      CMP	_resetTicker
    558  1273		       b0 03		      BCS	.skipL087
    559  1275				   .condpart19
    560  1275		       4c f7 dd 	      jmp	.killPlayer
    561  1278
    562  1278				   .skipL087
    563  1278				   .
    564  1278							; 
    565  1278
    566  1278				   .L088		;  if missile1y  <  150  &&  _resetTicker  =  0 then missile1y  =  missile1y  - 1
    567  1278
    568  1278		       a5 8b		      LDA	missile1y
    569  127a		       c9 96		      CMP	#150
    570  127c		       b0 08		      BCS	.skipL088
    571  127e				   .condpart20
    572  127e		       a5 ee		      LDA	_resetTicker
    573  1280		       c9 00		      CMP	#0
    574  1282		       d0 02		      BNE	.skip20then
    575  1284				   .condpart21
    576  1284		       c6 8b		      DEC	missile1y
    577  1286				   .skip20then
    578  1286				   .skipL088
    579  1286				   .
    580  1286							; 
    581  1286
    582  1286				   .titlepage
    583  1286							; titlepage
    584  1286
    585  1286				   .L089		;  if joy0fire  ||  switchreset then gameReady  =  1
    586  1286
    587  1286		       24 0c		      bit	INPT4
    588  1288		       30 03		      BMI	.skipL089
    589  128a				   .condpart22
    590  128a		       4c 94 d2 	      jmp	.condpart23
    591  128d				   .skipL089
    592  128d		       a9 01		      lda	#1
    593  128f		       2c 82 02 	      bit	SWCHB
    594  1292		       d0 04		      BNE	.skip8OR
    595  1294				   .condpart23
    596  1294		       a9 01		      LDA	#1
    597  1296		       85 f0		      STA	gameReady
    598  1298				   .skip8OR
    599  1298				   .L090		;  if gameReady  =  1 then COLUBK  =  $0  :  goto gamestart
    600  1298
    601  1298		       a5 f0		      LDA	gameReady
    602  129a		       c9 01		      CMP	#1
    603  129c		       d0 07		      BNE	.skipL090
    604  129e				   .condpart24
    605  129e		       a9 00		      LDA	#$0
    606  12a0		       85 09		      STA	COLUBK
    607  12a2		       4c d8 d2 	      jmp	.gamestart
    608  12a5
    609  12a5				   .skipL090
    610  12a5				   .L091		;  gosub titledrawscreen bank2
    611  12a5
    612  12a5		       85 d1		      sta	temp7
    613  12a7		       a9 d2		      lda	#>(ret_point1-1)
    614  12a9		       48		      pha
    615  12aa		       a9 bc		      lda	#<(ret_point1-1)
    616  12ac		       48		      pha
    617  12ad		       a9 f4		      lda	#>(.titledrawscreen-1)
    618  12af		       48		      pha
    619  12b0		       a9 40		      lda	#<(.titledrawscreen-1)
    620  12b2		       48		      pha
    621  12b3		       a5 d1		      lda	temp7
    622  12b5		       48		      pha
    623  12b6		       8a		      txa
    624  12b7		       48		      pha
    625  12b8		       a2 02		      ldx	#2
    626  12ba		       4c eb ff 	      jmp	BS_jsr
    627  12bd				   ret_point1
    628  12bd				   .L092		;  _sc1  =  0
    629  12bd
    630  12bd		       a9 00		      LDA	#0
    631  12bf		       85 d2		      STA	_sc1
    632  12c1				   .L093		;  _sc2  =  0
    633  12c1
    634  12c1		       a9 00		      LDA	#0
    635  12c3		       85 d3		      STA	_sc2
    636  12c5				   .L094		;  _sc3  =  0
    637  12c5
    638  12c5		       a9 00		      LDA	#0
    639  12c7		       85 d4		      STA	_sc3
    640  12c9				   .L095		;  _sc1  =  _High_Score1
    641  12c9
    642  12c9		       a5 ea		      LDA	_High_Score1
    643  12cb		       85 d2		      STA	_sc1
    644  12cd				   .L096		;  _sc2  =  _High_Score2
    645  12cd
    646  12cd		       a5 eb		      LDA	_High_Score2
    647  12cf		       85 d3		      STA	_sc2
    648  12d1				   .L097		;  _sc3  =  _High_Score3
    649  12d1
    650  12d1		       a5 e9		      LDA	_High_Score3
    651  12d3		       85 d4		      STA	_sc3
    652  12d5				   .
    653  12d5							; 
    654  12d5
    655  12d5				   .L098		;  goto titlepage
    656  12d5
    657  12d5		       4c 86 d2 	      jmp	.titlepage
    658  12d8
    659  12d8				   .
    660  12d8							; 
    661  12d8
    662  12d8				   .gamestart
    663  12d8							; gamestart
    664  12d8
    665  12d8				   .L099		;  CTRLPF  =  1
    666  12d8
    667  12d8		       a9 01		      LDA	#1
    668  12da		       85 0a		      STA	CTRLPF
    669  12dc				   .
    670  12dc							; 
    671  12dc
    672  12dc				   .L0100		;  if firstFrame  =  0 then _sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1 :  lives  =  192 :  bulletMultiplier  =  0 :  killCount  =  0
    673  12dc
    674  12dc		       a5 e8		      LDA	firstFrame
    675  12de		       c9 00		      CMP	#0
    676  12e0		       d0 16		      BNE	.skipL0100
    677  12e2				   .condpart25
    678  12e2		       a9 00		      LDA	#0
    679  12e4		       85 d2		      STA	_sc1
    680  12e6		       85 d3		      STA	_sc2
    681  12e8		       85 d4		      STA	_sc3
    682  12ea		       a9 01		      LDA	#1
    683  12ec		       85 e8		      STA	firstFrame
    684  12ee		       a9 c0		      LDA	#192
    685  12f0		       85 c2		      STA	lives
    686  12f2		       a9 00		      LDA	#0
    687  12f4		       85 e2		      STA	bulletMultiplier
    688  12f6		       85 e3		      STA	killCount
    689  12f8				   .skipL0100
    690  12f8				   .
    691  12f8							; 
    692  12f8
    693  12f8				   .L0101		;  lives:
    694  12f8
    695  12f8		       a9 84		      LDA	#<lives__L0101
    696  12fa		       85 c1		      STA	lifepointer
    697  12fc		       a5 c2		      LDA	lifepointer+1
    698  12fe		       29 e0		      AND	#$E0
    699  1300		       09 1c		      ORA	#(>lives__L0101)&($1F)
    700  1302		       85 c2		      STA	lifepointer+1
    701  1304				   .
    702  1304							; 
    703  1304
    704  1304				   .L0102		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    705  1304
    706  1304		       a5 ea		      LDA	_High_Score1
    707  1306		       c5 d2		      CMP	_sc1
    708  1308		       b0 03		      BCS	.skipL0102
    709  130a				   .condpart26
    710  130a		       4c 3d d3 	      jmp	.__New_High_Score
    711  130d
    712  130d				   .skipL0102
    713  130d				   .L0103		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    714  130d
    715  130d		       a5 d2		      LDA	_sc1
    716  130f		       c5 ea		      CMP	_High_Score1
    717  1311		       b0 03		      BCS	.skipL0103
    718  1313				   .condpart27
    719  1313		       4c 49 d3 	      jmp	.__Skip_High_Score
    720  1316
    721  1316				   .skipL0103
    722  1316				   .L0104		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    723  1316
    724  1316		       a5 eb		      LDA	_High_Score2
    725  1318		       c5 d3		      CMP	_sc2
    726  131a		       b0 03		      BCS	.skipL0104
    727  131c				   .condpart28
    728  131c		       4c 3d d3 	      jmp	.__New_High_Score
    729  131f
    730  131f				   .skipL0104
    731  131f				   .L0105		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    732  131f
    733  131f		       a5 d3		      LDA	_sc2
    734  1321		       c5 eb		      CMP	_High_Score2
    735  1323		       b0 03		      BCS	.skipL0105
    736  1325				   .condpart29
    737  1325		       4c 49 d3 	      jmp	.__Skip_High_Score
    738  1328
    739  1328				   .skipL0105
    740  1328				   .
    741  1328							; 
    742  1328
    743  1328				   .L0106		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    744  1328
    745  1328		       a5 e9		      LDA	_High_Score3
    746  132a		       c5 d4		      CMP	_sc3
    747  132c		       b0 03		      BCS	.skipL0106
    748  132e				   .condpart30
    749  132e		       4c 3d d3 	      jmp	.__New_High_Score
    750  1331
    751  1331				   .skipL0106
    752  1331				   .L0107		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    753  1331
    754  1331		       a5 d4		      LDA	_sc3
    755  1333		       c5 e9		      CMP	_High_Score3
    756  1335		       b0 03		      BCS	.skipL0107
    757  1337				   .condpart31
    758  1337		       4c 49 d3 	      jmp	.__Skip_High_Score
    759  133a
    760  133a				   .skipL0107
    761  133a				   .
    762  133a							; 
    763  133a
    764  133a				   .L0108		;  goto __Skip_High_Score
    765  133a
    766  133a		       4c 49 d3 	      jmp	.__Skip_High_Score
    767  133d
    768  133d				   .
    769  133d							; 
    770  133d
    771  133d				   .
    772  133d							; 
    773  133d
    774  133d				   .__New_High_Score
    775  133d							; __New_High_Score
    776  133d
    777  133d				   .
    778  133d							; 
    779  133d
    780  133d				   .L0109		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    781  133d
    782  133d		       a5 d2		      LDA	_sc1
    783  133f		       85 ea		      STA	_High_Score1
    784  1341		       a5 d3		      LDA	_sc2
    785  1343		       85 eb		      STA	_High_Score2
    786  1345		       a5 d4		      LDA	_sc3
    787  1347		       85 e9		      STA	_High_Score3
    788  1349				   .__Skip_High_Score
    789  1349							; __Skip_High_Score
    790  1349
    791  1349				   .
    792  1349							; 
    793  1349
    794  1349				   .
    795  1349							; 
    796  1349
    797  1349				   .L0110		;  if ticker  <  5 then player0: 
    798  1349
    799  1349		       a5 e4		      LDA	ticker
    800  134b		       c9 05		      CMP	#5
    801  134d		       b0 0c		      BCS	.skipL0110
    802  134f				   .condpart32
    803  134f		       a2 8c		      LDX	#<player32then_0
    804  1351		       86 a2		      STX	player0pointerlo
    805  1353		       a9 fc		      LDA	#>player32then_0
    806  1355		       85 a3		      STA	player0pointerhi
    807  1357		       a9 09		      LDA	#9
    808  1359		       85 b0		      STA	player0height
    809  135b				   .skipL0110
    810  135b				   .
    811  135b							; 
    812  135b
    813  135b				   .L0111		;  if ticker  >=  5 then player0: 
    814  135b
    815  135b		       a5 e4		      LDA	ticker
    816  135d		       c9 05		      CMP	#5
    817  135f		       90 0c		      BCC	.skipL0111
    818  1361				   .condpart33
    819  1361		       a2 95		      LDX	#<player33then_0
    820  1363		       86 a2		      STX	player0pointerlo
    821  1365		       a9 fc		      LDA	#>player33then_0
    822  1367		       85 a3		      STA	player0pointerhi
    823  1369		       a9 09		      LDA	#9
    824  136b		       85 b0		      STA	player0height
    825  136d				   .skipL0111
    826  136d				   .
    827  136d							; 
    828  136d
    829  136d				   .L0112		;  if ticker  <  5 then player1:
    830  136d
    831  136d		       a5 e4		      LDA	ticker
    832  136f		       c9 05		      CMP	#5
    833  1371		       b0 0c		      BCS	.skipL0112
    834  1373				   .condpart34
    835  1373		       a2 9e		      LDX	#<player34then_1
    836  1375		       86 a6		      STX	player1pointerlo
    837  1377		       a9 fc		      LDA	#>player34then_1
    838  1379		       85 ab		      STA	player1pointerhi
    839  137b		       a9 09		      LDA	#9
    840  137d		       85 b1		      STA	player1height
    841  137f				   .skipL0112
    842  137f				   .
    843  137f							; 
    844  137f
    845  137f				   .L0113		;  if ticker  >=  5 then player1:
    846  137f
    847  137f		       a5 e4		      LDA	ticker
    848  1381		       c9 05		      CMP	#5
    849  1383		       90 0c		      BCC	.skipL0113
    850  1385				   .condpart35
    851  1385		       a2 a6		      LDX	#<player35then_1
    852  1387		       86 a6		      STX	player1pointerlo
    853  1389		       a9 fc		      LDA	#>player35then_1
    854  138b		       85 ab		      STA	player1pointerhi
    855  138d		       a9 09		      LDA	#9
    856  138f		       85 b1		      STA	player1height
    857  1391				   .skipL0113
    858  1391				   .L0114		;  if ticker  <  5 then player2:
    859  1391
    860  1391		       a5 e4		      LDA	ticker
    861  1393		       c9 05		      CMP	#5
    862  1395		       b0 0c		      BCS	.skipL0114
    863  1397				   .condpart36
    864  1397		       a2 ae		      LDX	#<player36then_2
    865  1399		       86 a7		      STX	player2pointerlo
    866  139b		       a9 fc		      LDA	#>player36then_2
    867  139d		       85 ac		      STA	player2pointerhi
    868  139f		       a9 09		      LDA	#9
    869  13a1		       85 b2		      STA	player2height
    870  13a3				   .skipL0114
    871  13a3				   .
    872  13a3							; 
    873  13a3
    874  13a3				   .L0115		;  if ticker  >=  5 then player2:
    875  13a3
    876  13a3		       a5 e4		      LDA	ticker
    877  13a5		       c9 05		      CMP	#5
    878  13a7		       90 0c		      BCC	.skipL0115
    879  13a9				   .condpart37
    880  13a9		       a2 b6		      LDX	#<player37then_2
    881  13ab		       86 a7		      STX	player2pointerlo
    882  13ad		       a9 fc		      LDA	#>player37then_2
    883  13af		       85 ac		      STA	player2pointerhi
    884  13b1		       a9 09		      LDA	#9
    885  13b3		       85 b2		      STA	player2height
    886  13b5				   .skipL0115
    887  13b5				   .
    888  13b5							; 
    889  13b5
    890  13b5				   .L0116		;  if ticker  <  3 then player3: 
    891  13b5
    892  13b5		       a5 e4		      LDA	ticker
    893  13b7		       c9 03		      CMP	#3
    894  13b9		       b0 0c		      BCS	.skipL0116
    895  13bb				   .condpart38
    896  13bb		       a2 be		      LDX	#<player38then_3
    897  13bd		       86 a8		      STX	player3pointerlo
    898  13bf		       a9 fc		      LDA	#>player38then_3
    899  13c1		       85 ad		      STA	player3pointerhi
    900  13c3		       a9 09		      LDA	#9
    901  13c5		       85 b3		      STA	player3height
    902  13c7				   .skipL0116
    903  13c7				   .
    904  13c7							; 
    905  13c7
    906  13c7				   .L0117		;  if ticker  >= 3  &&  ticker  <  6 then player3: 
    907  13c7
    908  13c7		       a5 e4		      LDA	ticker
    909  13c9		       c9 03		      CMP	#3
    910  13cb		       90 12		      BCC	.skipL0117
    911  13cd				   .condpart39
    912  13cd		       a5 e4		      LDA	ticker
    913  13cf		       c9 06		      CMP	#6
    914  13d1		       b0 0c		      BCS	.skip39then
    915  13d3				   .condpart40
    916  13d3		       a2 c6		      LDX	#<player40then_3
    917  13d5		       86 a8		      STX	player3pointerlo
    918  13d7		       a9 fc		      LDA	#>player40then_3
    919  13d9		       85 ad		      STA	player3pointerhi
    920  13db		       a9 09		      LDA	#9
    921  13dd		       85 b3		      STA	player3height
    922  13df				   .skip39then
    923  13df				   .skipL0117
    924  13df				   .
    925  13df							; 
    926  13df
    927  13df				   .L0118		;  if ticker  >=  6 then player3: 
    928  13df
    929  13df		       a5 e4		      LDA	ticker
    930  13e1		       c9 06		      CMP	#6
    931  13e3		       90 0c		      BCC	.skipL0118
    932  13e5				   .condpart41
    933  13e5		       a2 ce		      LDX	#<player41then_3
    934  13e7		       86 a8		      STX	player3pointerlo
    935  13e9		       a9 fc		      LDA	#>player41then_3
    936  13eb		       85 ad		      STA	player3pointerhi
    937  13ed		       a9 09		      LDA	#9
    938  13ef		       85 b3		      STA	player3height
    939  13f1				   .skipL0118
    940  13f1				   .
    941  13f1							; 
    942  13f1
    943  13f1				   .
    944  13f1							; 
    945  13f1
    946  13f1				   .L0119		;  if altSprite  >  0	&&  ticker  <  5 then player2:
    947  13f1
    948  13f1		       a9 00		      LDA	#0
    949  13f3		       c5 e6		      CMP	altSprite
    950  13f5		       b0 12		      BCS	.skipL0119
    951  13f7				   .condpart42
    952  13f7		       a5 e4		      LDA	ticker
    953  13f9		       c9 05		      CMP	#5
    954  13fb		       b0 0c		      BCS	.skip42then
    955  13fd				   .condpart43
    956  13fd		       a2 d6		      LDX	#<player43then_2
    957  13ff		       86 a7		      STX	player2pointerlo
    958  1401		       a9 fc		      LDA	#>player43then_2
    959  1403		       85 ac		      STA	player2pointerhi
    960  1405		       a9 09		      LDA	#9
    961  1407		       85 b2		      STA	player2height
    962  1409				   .skip42then
    963  1409				   .skipL0119
    964  1409				   .
    965  1409							; 
    966  1409
    967  1409				   .L0120		;  if altSprite  >  0	&&  ticker  >=	5 then player2:
    968  1409
    969  1409		       a9 00		      LDA	#0
    970  140b		       c5 e6		      CMP	altSprite
    971  140d		       b0 12		      BCS	.skipL0120
    972  140f				   .condpart44
    973  140f		       a5 e4		      LDA	ticker
    974  1411		       c9 05		      CMP	#5
    975  1413		       90 0c		      BCC	.skip44then
    976  1415				   .condpart45
    977  1415		       a2 de		      LDX	#<player45then_2
    978  1417		       86 a7		      STX	player2pointerlo
    979  1419		       a9 fc		      LDA	#>player45then_2
    980  141b		       85 ac		      STA	player2pointerhi
    981  141d		       a9 09		      LDA	#9
    982  141f		       85 b2		      STA	player2height
    983  1421				   .skip44then
    984  1421				   .skipL0120
    985  1421				   .
    986  1421							; 
    987  1421
    988  1421				   .
    989  1421							; 
    990  1421
    991  1421				   .L0121		;  if ticker  <  5 then player4:
    992  1421
    993  1421		       a5 e4		      LDA	ticker
    994  1423		       c9 05		      CMP	#5
    995  1425		       b0 0c		      BCS	.skipL0121
    996  1427				   .condpart46
    997  1427		       a2 e6		      LDX	#<player46then_4
    998  1429		       86 a9		      STX	player4pointerlo
    999  142b		       a9 fc		      LDA	#>player46then_4
   1000  142d		       85 ae		      STA	player4pointerhi
   1001  142f		       a9 09		      LDA	#9
   1002  1431		       85 b4		      STA	player4height
   1003  1433				   .skipL0121
   1004  1433				   .
   1005  1433							; 
   1006  1433
   1007  1433				   .L0122		;  if ticker  >=  5 then player4:
   1008  1433
   1009  1433		       a5 e4		      LDA	ticker
   1010  1435		       c9 05		      CMP	#5
   1011  1437		       90 0c		      BCC	.skipL0122
   1012  1439				   .condpart47
   1013  1439		       a2 ee		      LDX	#<player47then_4
   1014  143b		       86 a9		      STX	player4pointerlo
   1015  143d		       a9 fc		      LDA	#>player47then_4
   1016  143f		       85 ae		      STA	player4pointerhi
   1017  1441		       a9 09		      LDA	#9
   1018  1443		       85 b4		      STA	player4height
   1019  1445				   .skipL0122
   1020  1445				   .
   1021  1445							; 
   1022  1445
   1023  1445				   .L0123		;  if explosionTicker	=  1 then player5:
   1024  1445
   1025  1445		       a5 dc		      LDA	explosionTicker
   1026  1447		       c9 01		      CMP	#1
   1027  1449		       d0 0c		      BNE	.skipL0123
   1028  144b				   .condpart48
   1029  144b		       a2 f6		      LDX	#<player48then_5
   1030  144d		       86 aa		      STX	player5pointerlo
   1031  144f		       a9 fc		      LDA	#>player48then_5
   1032  1451		       85 af		      STA	player5pointerhi
   1033  1453		       a9 09		      LDA	#9
   1034  1455		       85 b5		      STA	player5height
   1035  1457				   .skipL0123
   1036  1457				   .
   1037  1457							; 
   1038  1457
   1039  1457				   .L0124		;  if explosionTicker	=  2 then player5:
   1040  1457
   1041  1457		       a5 dc		      LDA	explosionTicker
   1042  1459		       c9 02		      CMP	#2
   1043  145b		       d0 0c		      BNE	.skipL0124
   1044  145d				   .condpart49
   1045  145d		       a2 5a		      LDX	#<player49then_5
   1046  145f		       86 aa		      STX	player5pointerlo
   1047  1461		       a9 fd		      LDA	#>player49then_5
   1048  1463		       85 af		      STA	player5pointerhi
   1049  1465		       a9 09		      LDA	#9
   1050  1467		       85 b5		      STA	player5height
   1051  1469				   .skipL0124
   1052  1469				   .
   1053  1469							; 
   1054  1469
   1055  1469				   .L0125		;  if explosionTicker	=  3 then player5:
   1056  1469
   1057  1469		       a5 dc		      LDA	explosionTicker
   1058  146b		       c9 03		      CMP	#3
   1059  146d		       d0 0c		      BNE	.skipL0125
   1060  146f				   .condpart50
   1061  146f		       a2 62		      LDX	#<player50then_5
   1062  1471		       86 aa		      STX	player5pointerlo
   1063  1473		       a9 fd		      LDA	#>player50then_5
   1064  1475		       85 af		      STA	player5pointerhi
   1065  1477		       a9 09		      LDA	#9
   1066  1479		       85 b5		      STA	player5height
   1067  147b				   .skipL0125
   1068  147b				   .
   1069  147b							; 
   1070  147b
   1071  147b				   .
   1072  147b							; 
   1073  147b
   1074  147b				   .
   1075  147b							; 
   1076  147b
   1077  147b				   .
   1078  147b							; 
   1079  147b
   1080  147b				   .L0126		;  if _resetTicker  >	0 then goto frameReset
   1081  147b
   1082  147b		       a9 00		      LDA	#0
   1083  147d		       c5 ee		      CMP	_resetTicker
   1084  147f		       b0 03		      BCS	.skipL0126
   1085  1481				   .condpart51
   1086  1481		       4c 53 d6 	      jmp	.frameReset
   1087  1484
   1088  1484				   .skipL0126
   1089  1484				   .
   1090  1484							; 
   1091  1484
   1092  1484				   .L0127		;  if player1y  <  41 then goto killPlayer
   1093  1484
   1094  1484		       a5 8e		      LDA	player1y
   1095  1486		       c9 29		      CMP	#41
   1096  1488		       b0 03		      BCS	.skipL0127
   1097  148a				   .condpart52
   1098  148a		       4c f7 dd 	      jmp	.killPlayer
   1099  148d
   1100  148d				   .skipL0127
   1101  148d				   .L0128		;  if player2y  <  41 then goto killPlayer
   1102  148d
   1103  148d		       a5 8f		      LDA	player2y
   1104  148f		       c9 29		      CMP	#41
   1105  1491		       b0 03		      BCS	.skipL0128
   1106  1493				   .condpart53
   1107  1493		       4c f7 dd 	      jmp	.killPlayer
   1108  1496
   1109  1496				   .skipL0128
   1110  1496				   .L0129		;  if player3y  <  41 then goto killPlayer
   1111  1496
   1112  1496		       a5 90		      LDA	player3y
   1113  1498		       c9 29		      CMP	#41
   1114  149a		       b0 03		      BCS	.skipL0129
   1115  149c				   .condpart54
   1116  149c		       4c f7 dd 	      jmp	.killPlayer
   1117  149f
   1118  149f				   .skipL0129
   1119  149f				   .L0130		;  if player4y  <  41 then goto killPlayer
   1120  149f
   1121  149f		       a5 91		      LDA	player4y
   1122  14a1		       c9 29		      CMP	#41
   1123  14a3		       b0 03		      BCS	.skipL0130
   1124  14a5				   .condpart55
   1125  14a5		       4c f7 dd 	      jmp	.killPlayer
   1126  14a8
   1127  14a8				   .skipL0130
   1128  14a8				   .
   1129  14a8							; 
   1130  14a8
   1131  14a8				   .L0131		;  if missile1y  <  10 then missile1y	=  200
   1132  14a8
   1133  14a8		       a5 8b		      LDA	missile1y
   1134  14aa		       c9 0a		      CMP	#10
   1135  14ac		       b0 04		      BCS	.skipL0131
   1136  14ae				   .condpart56
   1137  14ae		       a9 c8		      LDA	#200
   1138  14b0		       85 8b		      STA	missile1y
   1139  14b2				   .skipL0131
   1140  14b2				   .
   1141  14b2							; 
   1142  14b2
   1143  14b2				   .
   1144  14b2							; 
   1145  14b2
   1146  14b2				   .L0132		;  if missile0y  >  100 then goto skip
   1147  14b2
   1148  14b2		       a9 64		      LDA	#100
   1149  14b4		       c5 8a		      CMP	missile0y
   1150  14b6		       b0 03		      BCS	.skipL0132
   1151  14b8				   .condpart57
   1152  14b8		       4c c5 d4 	      jmp	.skip
   1153  14bb
   1154  14bb				   .skipL0132
   1155  14bb				   .
   1156  14bb							; 
   1157  14bb
   1158  14bb				   .
   1159  14bb							; 
   1160  14bb
   1161  14bb				   .
   1162  14bb							; 
   1163  14bb
   1164  14bb				   .L0133		;  missile0y  =  missile0y + 2 : goto draw_loop
   1165  14bb
   1166  14bb		       a5 8a		      LDA	missile0y
   1167  14bd		       18		      CLC
   1168  14be		       69 02		      ADC	#2
   1169  14c0		       85 8a		      STA	missile0y
   1170  14c2		       4c 16 d5 	      jmp	.draw_loop
   1171  14c5
   1172  14c5				   .
   1173  14c5							; 
   1174  14c5
   1175  14c5				   .skip
   1176  14c5							; skip
   1177  14c5
   1178  14c5				   .L0134		;  if player0y  <  35	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  bulletMultiplier  =	bulletMultiplier  -  1 :  goto draw_loop
   1179  14c5
   1180  14c5		       a5 8d		      LDA	player0y
   1181  14c7		       c9 23		      CMP	#35
   1182  14c9		       b0 18		      BCS	.skipL0134
   1183  14cb				   .condpart58
   1184  14cb		       a5 c2		      LDA	lives
   1185  14cd		       c9 c4		      CMP	#196
   1186  14cf		       b0 12		      BCS	.skip58then
   1187  14d1				   .condpart59
   1188  14d1		       a5 e4		      LDA	ticker
   1189  14d3		       c9 00		      CMP	#0
   1190  14d5		       d0 0c		      BNE	.skip59then
   1191  14d7				   .condpart60
   1192  14d7		       a5 c2		      LDA	lives
   1193  14d9		       18		      CLC
   1194  14da		       69 20		      ADC	#32
   1195  14dc		       85 c2		      STA	lives
   1196  14de		       c6 e2		      DEC	bulletMultiplier
   1197  14e0		       4c 16 d5 	      jmp	.draw_loop
   1198  14e3
   1199  14e3				   .skip59then
   1200  14e3				   .skip58then
   1201  14e3				   .skipL0134
   1202  14e3				   .L0135		;  if player0y  <  35 then goto draw_loop
   1203  14e3
   1204  14e3		       a5 8d		      LDA	player0y
   1205  14e5		       c9 23		      CMP	#35
   1206  14e7		       b0 03		      BCS	.skipL0135
   1207  14e9				   .condpart61
   1208  14e9		       4c 16 d5 	      jmp	.draw_loop
   1209  14ec
   1210  14ec				   .skipL0135
   1211  14ec				   .L0136		;  if lives  <  32 then goto draw_loop
   1212  14ec
   1213  14ec		       a5 c2		      LDA	lives
   1214  14ee		       c9 20		      CMP	#32
   1215  14f0		       b0 03		      BCS	.skipL0136
   1216  14f2				   .condpart62
   1217  14f2		       4c 16 d5 	      jmp	.draw_loop
   1218  14f5
   1219  14f5				   .skipL0136
   1220  14f5				   .L0137		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : bulletMultiplier  =  bulletMultiplier  +  1 :  lives	=  lives  -  32  : missile0x  =  player0x  +  5
   1221  14f5
   1222  14f5		       24 0c		      bit	INPT4
   1223  14f7		       30 1d		      BMI	.skipL0137
   1224  14f9				   .condpart63
   1225  14f9		       a9 96		      LDA	#150
   1226  14fb		       c5 92		      CMP	player5y
   1227  14fd		       b0 17		      BCS	.skip63then
   1228  14ff				   .condpart64
   1229  14ff		       a5 8d		      LDA	player0y
   1230  1501		       38		      SEC
   1231  1502		       e9 04		      SBC	#4
   1232  1504		       85 8a		      STA	missile0y
   1233  1506		       e6 e2		      INC	bulletMultiplier
   1234  1508		       a5 c2		      LDA	lives
   1235  150a		       38		      SEC
   1236  150b		       e9 20		      SBC	#32
   1237  150d		       85 c2		      STA	lives
   1238  150f		       a5 84		      LDA	player0x
   1239  1511		       18		      CLC
   1240  1512		       69 05		      ADC	#5
   1241  1514		       85 80		      STA	missile0x
   1242  1516				   .skip63then
   1243  1516				   .skipL0137
   1244  1516				   .draw_loop
   1245  1516							; draw_loop
   1246  1516
   1247  1516				   .L0138		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x  +  1
   1248  1516
   1249  1516		       2c 80 02 	      bit	SWCHA
   1250  1519		       30 08		      BMI	.skipL0138
   1251  151b				   .condpart65
   1252  151b		       a5 84		      LDA	player0x
   1253  151d		       c9 86		      CMP	#134
   1254  151f		       b0 02		      BCS	.skip65then
   1255  1521				   .condpart66
   1256  1521		       e6 84		      INC	player0x
   1257  1523				   .skip65then
   1258  1523				   .skipL0138
   1259  1523				   .L0139		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x  -  1
   1260  1523
   1261  1523		       2c 80 02 	      bit	SWCHA
   1262  1526		       70 08		      BVS	.skipL0139
   1263  1528				   .condpart67
   1264  1528		       a9 13		      LDA	#19
   1265  152a		       c5 84		      CMP	player0x
   1266  152c		       b0 02		      BCS	.skip67then
   1267  152e				   .condpart68
   1268  152e		       c6 84		      DEC	player0x
   1269  1530				   .skip67then
   1270  1530				   .skipL0139
   1271  1530				   .L0140		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y  -  1
   1272  1530
   1273  1530		       a9 20		      lda	#$20
   1274  1532		       2c 80 02 	      bit	SWCHA
   1275  1535		       d0 08		      BNE	.skipL0140
   1276  1537				   .condpart69
   1277  1537		       a9 0a		      LDA	#10
   1278  1539		       c5 8d		      CMP	player0y
   1279  153b		       b0 02		      BCS	.skip69then
   1280  153d				   .condpart70
   1281  153d		       c6 8d		      DEC	player0y
   1282  153f				   .skip69then
   1283  153f				   .skipL0140
   1284  153f				   .L0141		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y  +  1
   1285  153f
   1286  153f		       a9 10		      lda	#$10
   1287  1541		       2c 80 02 	      bit	SWCHA
   1288  1544		       d0 08		      BNE	.skipL0141
   1289  1546				   .condpart71
   1290  1546		       a5 8d		      LDA	player0y
   1291  1548		       c9 5a		      CMP	#90
   1292  154a		       b0 02		      BCS	.skip71then
   1293  154c				   .condpart72
   1294  154c		       e6 8d		      INC	player0y
   1295  154e				   .skip71then
   1296  154e				   .skipL0141
   1297  154e				   .
   1298  154e							; 
   1299  154e
   1300  154e				   .L0142		;  if player0y  <  35	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1301  154e
   1302  154e		       a5 8d		      LDA	player0y
   1303  1550		       c9 23		      CMP	#35
   1304  1552		       b0 13		      BCS	.skipL0142
   1305  1554				   .condpart73
   1306  1554		       a5 c2		      LDA	lives
   1307  1556		       c9 c4		      CMP	#196
   1308  1558		       b0 0d		      BCS	.skip73then
   1309  155a				   .condpart74
   1310  155a		       a5 e4		      LDA	ticker
   1311  155c		       c9 05		      CMP	#5
   1312  155e		       b0 07		      BCS	.skip74then
   1313  1560				   .condpart75
   1314  1560		       a9 f0		      LDA	#$F0
   1315  1562		       85 06		      STA	COLUP0
   1316  1564		       4c 91 d5 	      jmp	.exitColourSwitch
   1317  1567
   1318  1567				   .skip74then
   1319  1567				   .skip73then
   1320  1567				   .skipL0142
   1321  1567				   .L0143		;  if player0y  <  35	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1322  1567
   1323  1567		       a5 8d		      LDA	player0y
   1324  1569		       c9 23		      CMP	#35
   1325  156b		       b0 13		      BCS	.skipL0143
   1326  156d				   .condpart76
   1327  156d		       a5 c2		      LDA	lives
   1328  156f		       c9 c4		      CMP	#196
   1329  1571		       b0 0d		      BCS	.skip76then
   1330  1573				   .condpart77
   1331  1573		       a9 05		      LDA	#5
   1332  1575		       c5 e4		      CMP	ticker
   1333  1577		       b0 07		      BCS	.skip77then
   1334  1579				   .condpart78
   1335  1579		       a9 02		      LDA	#$02
   1336  157b		       85 06		      STA	COLUP0
   1337  157d		       4c 91 d5 	      jmp	.exitColourSwitch
   1338  1580
   1339  1580				   .skip77then
   1340  1580				   .skip76then
   1341  1580				   .skipL0143
   1342  1580				   .L0144		;  if lives  <  32 then COLUP0  =  $40 else COLUP0  =	$C6
   1343  1580
   1344  1580		       a5 c2		      LDA	lives
   1345  1582		       c9 20		      CMP	#32
   1346  1584		       b0 07		      BCS	.skipL0144
   1347  1586				   .condpart79
   1348  1586		       a9 40		      LDA	#$40
   1349  1588		       85 06		      STA	COLUP0
   1350  158a		       4c 91 d5 	      jmp	.skipelse1
   1351  158d				   .skipL0144
   1352  158d		       a9 c6		      LDA	#$C6
   1353  158f		       85 06		      STA	COLUP0
   1354  1591				   .skipelse1
   1355  1591				   .
   1356  1591							; 
   1357  1591
   1358  1591				   .exitColourSwitch
   1359  1591							; exitColourSwitch
   1360  1591
   1361  1591				   .
   1362  1591							; 
   1363  1591
   1364  1591				   .
   1365  1591							; 
   1366  1591
   1367  1591				   .L0145		;  if missile0y  >  99 then goto frameReset
   1368  1591
   1369  1591		       a9 63		      LDA	#99
   1370  1593		       c5 8a		      CMP	missile0y
   1371  1595		       b0 03		      BCS	.skipL0145
   1372  1597				   .condpart80
   1373  1597		       4c 53 d6 	      jmp	.frameReset
   1374  159a
   1375  159a				   .skipL0145
   1376  159a				   .L0146		;  if missile0x  >   ( player1x  -  10 )   &&	missile0x  <  player1x	&&  missile0y  >  player1y  -  10 then player1x  =  player1x  +   ( ticker  *  12 )  :	player1y  =  100 :  goto collisions
   1377  159a
   1378  159a							; complex condition detected
   1379  159a							; complex statement detected
   1380  159a		       a5 85		      LDA	player1x
   1381  159c		       38		      SEC
   1382  159d		       e9 0a		      SBC	#10
   1383  159f							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1384  159f		       c5 80		      CMP	missile0x
   1385  15a1		       b0 29		      BCS	.skipL0146
   1386  15a3				   .condpart81
   1387  15a3		       a5 80		      LDA	missile0x
   1388  15a5		       c5 85		      CMP	player1x
   1389  15a7		       b0 23		      BCS	.skip81then
   1390  15a9				   .condpart82
   1391  15a9							; complex condition detected
   1392  15a9		       a5 8e		      LDA	player1y
   1393  15ab		       38		      SEC
   1394  15ac		       e9 0a		      SBC	#10
   1395  15ae		       c5 8a		      CMP	missile0y
   1396  15b0		       b0 1a		      BCS	.skip82then
   1397  15b2				   .condpart83
   1398  15b2							; complex statement detected
   1399  15b2		       a5 85		      LDA	player1x
   1400  15b4		       48		      PHA
   1401  15b5		       a5 e4		      LDA	ticker
   1402  15b7		       0a		      asl
   1403  15b8		       18		      clc
   1404  15b9		       65 e4		      adc	ticker
   1405  15bb		       0a		      asl
   1406  15bc		       0a		      asl
   1407  15bd		       ba		      TSX
   1408  15be		       e8		      INX
   1409  15bf		       9a		      TXS
   1410  15c0		       18		      CLC
   1411  15c1		       75 00		      ADC	$00,x
   1412  15c3		       85 85		      STA	player1x
   1413  15c5		       a9 64		      LDA	#100
   1414  15c7		       85 8e		      STA	player1y
   1415  15c9		       4c bf dd 	      jmp	.collisions
   1416  15cc
   1417  15cc				   .skip82then
   1418  15cc				   .skip81then
   1419  15cc				   .skipL0146
   1420  15cc				   .L0147		;  if missile0x  >   ( player2x  -  10 )   &&	missile0x  <  player2x	&&  missile0y  >  player2y  -  10 then player2x  =  player2x  +   ( ticker  *  12 )  :	player2y  =  100 :  goto collisions
   1421  15cc
   1422  15cc							; complex condition detected
   1423  15cc							; complex statement detected
   1424  15cc		       a5 86		      LDA	player2x
   1425  15ce		       38		      SEC
   1426  15cf		       e9 0a		      SBC	#10
   1427  15d1							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1428  15d1		       c5 80		      CMP	missile0x
   1429  15d3		       b0 29		      BCS	.skipL0147
   1430  15d5				   .condpart84
   1431  15d5		       a5 80		      LDA	missile0x
   1432  15d7		       c5 86		      CMP	player2x
   1433  15d9		       b0 23		      BCS	.skip84then
   1434  15db				   .condpart85
   1435  15db							; complex condition detected
   1436  15db		       a5 8f		      LDA	player2y
   1437  15dd		       38		      SEC
   1438  15de		       e9 0a		      SBC	#10
   1439  15e0		       c5 8a		      CMP	missile0y
   1440  15e2		       b0 1a		      BCS	.skip85then
   1441  15e4				   .condpart86
   1442  15e4							; complex statement detected
   1443  15e4		       a5 86		      LDA	player2x
   1444  15e6		       48		      PHA
   1445  15e7		       a5 e4		      LDA	ticker
   1446  15e9		       0a		      asl
   1447  15ea		       18		      clc
   1448  15eb		       65 e4		      adc	ticker
   1449  15ed		       0a		      asl
   1450  15ee		       0a		      asl
   1451  15ef		       ba		      TSX
   1452  15f0		       e8		      INX
   1453  15f1		       9a		      TXS
   1454  15f2		       18		      CLC
   1455  15f3		       75 00		      ADC	$00,x
   1456  15f5		       85 86		      STA	player2x
   1457  15f7		       a9 64		      LDA	#100
   1458  15f9		       85 8f		      STA	player2y
   1459  15fb		       4c bf dd 	      jmp	.collisions
   1460  15fe
   1461  15fe				   .skip85then
   1462  15fe				   .skip84then
   1463  15fe				   .skipL0147
   1464  15fe				   .L0148		;  if missile0x  >   ( player3x  -  10 )   &&	missile0x  <  player3x	&&  missile0y  >  player3y  -  10 then player3x  =  player3x  +   ( ticker  *  12 )  :	player3y  =  100 :  goto collisions
   1465  15fe
   1466  15fe							; complex condition detected
   1467  15fe							; complex statement detected
   1468  15fe		       a5 87		      LDA	player3x
   1469  1600		       38		      SEC
   1470  1601		       e9 0a		      SBC	#10
   1471  1603							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1472  1603		       c5 80		      CMP	missile0x
   1473  1605		       b0 29		      BCS	.skipL0148
   1474  1607				   .condpart87
   1475  1607		       a5 80		      LDA	missile0x
   1476  1609		       c5 87		      CMP	player3x
   1477  160b		       b0 23		      BCS	.skip87then
   1478  160d				   .condpart88
   1479  160d							; complex condition detected
   1480  160d		       a5 90		      LDA	player3y
   1481  160f		       38		      SEC
   1482  1610		       e9 0a		      SBC	#10
   1483  1612		       c5 8a		      CMP	missile0y
   1484  1614		       b0 1a		      BCS	.skip88then
   1485  1616				   .condpart89
   1486  1616							; complex statement detected
   1487  1616		       a5 87		      LDA	player3x
   1488  1618		       48		      PHA
   1489  1619		       a5 e4		      LDA	ticker
   1490  161b		       0a		      asl
   1491  161c		       18		      clc
   1492  161d		       65 e4		      adc	ticker
   1493  161f		       0a		      asl
   1494  1620		       0a		      asl
   1495  1621		       ba		      TSX
   1496  1622		       e8		      INX
   1497  1623		       9a		      TXS
   1498  1624		       18		      CLC
   1499  1625		       75 00		      ADC	$00,x
   1500  1627		       85 87		      STA	player3x
   1501  1629		       a9 64		      LDA	#100
   1502  162b		       85 90		      STA	player3y
   1503  162d		       4c bf dd 	      jmp	.collisions
   1504  1630
   1505  1630				   .skip88then
   1506  1630				   .skip87then
   1507  1630				   .skipL0148
   1508  1630				   .L0149		;  if missile0x  >   ( player4x  -  10 )   &&	missile0x  <  player4x	&&  missile0y  >  player4y  -  10 then player4y  =  100 :  player4x  =	116 :  goto collisions
   1509  1630
   1510  1630							; complex condition detected
   1511  1630							; complex statement detected
   1512  1630		       a5 88		      LDA	player4x
   1513  1632		       38		      SEC
   1514  1633		       e9 0a		      SBC	#10
   1515  1635							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   1516  1635		       c5 80		      CMP	missile0x
   1517  1637		       b0 1a		      BCS	.skipL0149
   1518  1639				   .condpart90
   1519  1639		       a5 80		      LDA	missile0x
   1520  163b		       c5 88		      CMP	player4x
   1521  163d		       b0 14		      BCS	.skip90then
   1522  163f				   .condpart91
   1523  163f							; complex condition detected
   1524  163f		       a5 91		      LDA	player4y
   1525  1641		       38		      SEC
   1526  1642		       e9 0a		      SBC	#10
   1527  1644		       c5 8a		      CMP	missile0y
   1528  1646		       b0 0b		      BCS	.skip91then
   1529  1648				   .condpart92
   1530  1648		       a9 64		      LDA	#100
   1531  164a		       85 91		      STA	player4y
   1532  164c		       a9 74		      LDA	#116
   1533  164e		       85 88		      STA	player4x
   1534  1650		       4c bf dd 	      jmp	.collisions
   1535  1653
   1536  1653				   .skip91then
   1537  1653				   .skip90then
   1538  1653				   .skipL0149
   1539  1653				   .
   1540  1653							; 
   1541  1653
   1542  1653				   .frameReset
   1543  1653							; frameReset
   1544  1653
   1545  1653				   .
   1546  1653							; 
   1547  1653
   1548  1653				   .checkPlayer1Position
   1549  1653							; checkPlayer1Position
   1550  1653
   1551  1653				   .L0150		;  if player1y  <  99 then goto checkPlayer2Position
   1552  1653
   1553  1653		       a5 8e		      LDA	player1y
   1554  1655		       c9 63		      CMP	#99
   1555  1657		       b0 03		      BCS	.skipL0150
   1556  1659				   .condpart93
   1557  1659		       4c 75 d6 	      jmp	.checkPlayer2Position
   1558  165c
   1559  165c				   .skipL0150
   1560  165c				   .L0151		;  if player1x  <  30	||  player1x  >  120 then player1x  =  player1x  +  50	:  goto checkPlayer1Position
   1561  165c
   1562  165c		       a5 85		      LDA	player1x
   1563  165e		       c9 1e		      CMP	#30
   1564  1660		       b0 03		      BCS	.skipL0151
   1565  1662				   .condpart94
   1566  1662		       4c 6b d6 	      jmp	.condpart95
   1567  1665				   .skipL0151
   1568  1665		       a9 78		      LDA	#120
   1569  1667		       c5 85		      CMP	player1x
   1570  1669		       b0 0a		      BCS	.skip31OR
   1571  166b				   .condpart95
   1572  166b		       a5 85		      LDA	player1x
   1573  166d		       18		      CLC
   1574  166e		       69 32		      ADC	#50
   1575  1670		       85 85		      STA	player1x
   1576  1672		       4c 53 d6 	      jmp	.checkPlayer1Position
   1577  1675
   1578  1675				   .skip31OR
   1579  1675				   .
   1580  1675							; 
   1581  1675
   1582  1675				   .checkPlayer2Position
   1583  1675							; checkPlayer2Position
   1584  1675
   1585  1675				   .L0152		;  if player2y  <  99 then goto checkPlayer3Position
   1586  1675
   1587  1675		       a5 8f		      LDA	player2y
   1588  1677		       c9 63		      CMP	#99
   1589  1679		       b0 03		      BCS	.skipL0152
   1590  167b				   .condpart96
   1591  167b		       4c 97 d6 	      jmp	.checkPlayer3Position
   1592  167e
   1593  167e				   .skipL0152
   1594  167e				   .L0153		;  if player2x  <  30	||  player2x  >  120 then player2x  =  player2x  +  50	:  goto checkPlayer2Position
   1595  167e
   1596  167e		       a5 86		      LDA	player2x
   1597  1680		       c9 1e		      CMP	#30
   1598  1682		       b0 03		      BCS	.skipL0153
   1599  1684				   .condpart97
   1600  1684		       4c 8d d6 	      jmp	.condpart98
   1601  1687				   .skipL0153
   1602  1687		       a9 78		      LDA	#120
   1603  1689		       c5 86		      CMP	player2x
   1604  168b		       b0 0a		      BCS	.skip32OR
   1605  168d				   .condpart98
   1606  168d		       a5 86		      LDA	player2x
   1607  168f		       18		      CLC
   1608  1690		       69 32		      ADC	#50
   1609  1692		       85 86		      STA	player2x
   1610  1694		       4c 75 d6 	      jmp	.checkPlayer2Position
   1611  1697
   1612  1697				   .skip32OR
   1613  1697				   .
   1614  1697							; 
   1615  1697
   1616  1697				   .checkPlayer3Position
   1617  1697							; checkPlayer3Position
   1618  1697
   1619  1697				   .L0154		;  if player3y  <  99 then goto exitPositionCheck
   1620  1697
   1621  1697		       a5 90		      LDA	player3y
   1622  1699		       c9 63		      CMP	#99
   1623  169b		       b0 03		      BCS	.skipL0154
   1624  169d				   .condpart99
   1625  169d		       4c b9 d6 	      jmp	.exitPositionCheck
   1626  16a0
   1627  16a0				   .skipL0154
   1628  16a0				   .L0155		;  if player3x  <  30	||  player3x  >  120 then player3x  =  player3x  +  50	:  goto checkPlayer3Position
   1629  16a0
   1630  16a0		       a5 87		      LDA	player3x
   1631  16a2		       c9 1e		      CMP	#30
   1632  16a4		       b0 03		      BCS	.skipL0155
   1633  16a6				   .condpart100
   1634  16a6		       4c af d6 	      jmp	.condpart101
   1635  16a9				   .skipL0155
   1636  16a9		       a9 78		      LDA	#120
   1637  16ab		       c5 87		      CMP	player3x
   1638  16ad		       b0 0a		      BCS	.skip33OR
   1639  16af				   .condpart101
   1640  16af		       a5 87		      LDA	player3x
   1641  16b1		       18		      CLC
   1642  16b2		       69 32		      ADC	#50
   1643  16b4		       85 87		      STA	player3x
   1644  16b6		       4c 97 d6 	      jmp	.checkPlayer3Position
   1645  16b9
   1646  16b9				   .skip33OR
   1647  16b9				   .
   1648  16b9							; 
   1649  16b9
   1650  16b9				   .exitPositionCheck
   1651  16b9							; exitPositionCheck
   1652  16b9
   1653  16b9				   .
   1654  16b9							; 
   1655  16b9
   1656  16b9				   .
   1657  16b9							; 
   1658  16b9
   1659  16b9				   .
   1660  16b9							; 
   1661  16b9
   1662  16b9				   .
   1663  16b9							; 
   1664  16b9
   1665  16b9				   .L0156		;  if _resetTicker  >	0 then goto resetScreen
   1666  16b9
   1667  16b9		       a9 00		      LDA	#0
   1668  16bb		       c5 ee		      CMP	_resetTicker
   1669  16bd		       b0 03		      BCS	.skipL0156
   1670  16bf				   .condpart102
   1671  16bf		       4c e1 da 	      jmp	.resetScreen
   1672  16c2
   1673  16c2				   .skipL0156
   1674  16c2				   .L0157		;  if killCount  <  5 then goto level1
   1675  16c2
   1676  16c2		       a5 e3		      LDA	killCount
   1677  16c4		       c9 05		      CMP	#5
   1678  16c6		       b0 03		      BCS	.skipL0157
   1679  16c8				   .condpart103
   1680  16c8		       4c d0 da 	      jmp	.level1
   1681  16cb
   1682  16cb				   .skipL0157
   1683  16cb				   .L0158		;  if killCount  <  11 then goto level2
   1684  16cb
   1685  16cb		       a5 e3		      LDA	killCount
   1686  16cd		       c9 0b		      CMP	#11
   1687  16cf		       b0 03		      BCS	.skipL0158
   1688  16d1				   .condpart104
   1689  16d1		       4c af da 	      jmp	.level2
   1690  16d4
   1691  16d4				   .skipL0158
   1692  16d4				   .L0159		;  if killCount  <  18 then goto level3
   1693  16d4
   1694  16d4		       a5 e3		      LDA	killCount
   1695  16d6		       c9 12		      CMP	#18
   1696  16d8		       b0 03		      BCS	.skipL0159
   1697  16da				   .condpart105
   1698  16da		       4c 7b da 	      jmp	.level3
   1699  16dd
   1700  16dd				   .skipL0159
   1701  16dd				   .L0160		;  if killCount  <  26 then goto level4
   1702  16dd
   1703  16dd		       a5 e3		      LDA	killCount
   1704  16df		       c9 1a		      CMP	#26
   1705  16e1		       b0 03		      BCS	.skipL0160
   1706  16e3				   .condpart106
   1707  16e3		       4c 4d da 	      jmp	.level4
   1708  16e6
   1709  16e6				   .skipL0160
   1710  16e6				   .L0161		;  if killCount  <  35 then goto level5
   1711  16e6
   1712  16e6		       a5 e3		      LDA	killCount
   1713  16e8		       c9 23		      CMP	#35
   1714  16ea		       b0 03		      BCS	.skipL0161
   1715  16ec				   .condpart107
   1716  16ec		       4c 1f da 	      jmp	.level5
   1717  16ef
   1718  16ef				   .skipL0161
   1719  16ef				   .L0162		;  if killCount  <  45 then goto level6
   1720  16ef
   1721  16ef		       a5 e3		      LDA	killCount
   1722  16f1		       c9 2d		      CMP	#45
   1723  16f3		       b0 03		      BCS	.skipL0162
   1724  16f5				   .condpart108
   1725  16f5		       4c de d9 	      jmp	.level6
   1726  16f8
   1727  16f8				   .skipL0162
   1728  16f8				   .L0163		;  if killCount  <  56 then goto level7
   1729  16f8
   1730  16f8		       a5 e3		      LDA	killCount
   1731  16fa		       c9 38		      CMP	#56
   1732  16fc		       b0 03		      BCS	.skipL0163
   1733  16fe				   .condpart109
   1734  16fe		       4c 9d d9 	      jmp	.level7
   1735  1701
   1736  1701				   .skipL0163
   1737  1701				   .L0164		;  if killCount  <  68 then goto level8
   1738  1701
   1739  1701		       a5 e3		      LDA	killCount
   1740  1703		       c9 44		      CMP	#68
   1741  1705		       b0 03		      BCS	.skipL0164
   1742  1707				   .condpart110
   1743  1707		       4c 62 d9 	      jmp	.level8
   1744  170a
   1745  170a				   .skipL0164
   1746  170a				   .L0165		;  if killCount  <  81 then goto level9
   1747  170a
   1748  170a		       a5 e3		      LDA	killCount
   1749  170c		       c9 51		      CMP	#81
   1750  170e		       b0 03		      BCS	.skipL0165
   1751  1710				   .condpart111
   1752  1710		       4c 27 d9 	      jmp	.level9
   1753  1713
   1754  1713				   .skipL0165
   1755  1713				   .L0166		;  if killCount  <  95 then goto level10
   1756  1713
   1757  1713		       a5 e3		      LDA	killCount
   1758  1715		       c9 5f		      CMP	#95
   1759  1717		       b0 03		      BCS	.skipL0166
   1760  1719				   .condpart112
   1761  1719		       4c ec d8 	      jmp	.level10
   1762  171c
   1763  171c				   .skipL0166
   1764  171c				   .L0167		;  if killCount  <  110 then goto level11
   1765  171c
   1766  171c		       a5 e3		      LDA	killCount
   1767  171e		       c9 6e		      CMP	#110
   1768  1720		       b0 03		      BCS	.skipL0167
   1769  1722				   .condpart113
   1770  1722		       4c b1 d8 	      jmp	.level11
   1771  1725
   1772  1725				   .skipL0167
   1773  1725				   .L0168		;  if killCount  <  126 then goto level12
   1774  1725
   1775  1725		       a5 e3		      LDA	killCount
   1776  1727		       c9 7e		      CMP	#126
   1777  1729		       b0 03		      BCS	.skipL0168
   1778  172b				   .condpart114
   1779  172b		       4c 76 d8 	      jmp	.level12
   1780  172e
   1781  172e				   .skipL0168
   1782  172e				   .L0169		;  if killCount  <  143 then goto level13
   1783  172e
   1784  172e		       a5 e3		      LDA	killCount
   1785  1730		       c9 8f		      CMP	#143
   1786  1732		       b0 03		      BCS	.skipL0169
   1787  1734				   .condpart115
   1788  1734		       4c 3b d8 	      jmp	.level13
   1789  1737
   1790  1737				   .skipL0169
   1791  1737				   .L0170		;  if killCount  <  161 then goto level14
   1792  1737
   1793  1737		       a5 e3		      LDA	killCount
   1794  1739		       c9 a1		      CMP	#161
   1795  173b		       b0 03		      BCS	.skipL0170
   1796  173d				   .condpart116
   1797  173d		       4c 00 d8 	      jmp	.level14
   1798  1740
   1799  1740				   .skipL0170
   1800  1740				   .L0171		;  if killCount  <  180 then goto level15
   1801  1740
   1802  1740		       a5 e3		      LDA	killCount
   1803  1742		       c9 b4		      CMP	#180
   1804  1744		       b0 03		      BCS	.skipL0171
   1805  1746				   .condpart117
   1806  1746		       4c c5 d7 	      jmp	.level15
   1807  1749
   1808  1749				   .skipL0171
   1809  1749				   .L0172		;  if killCount  <  200 then goto level16
   1810  1749
   1811  1749		       a5 e3		      LDA	killCount
   1812  174b		       c9 c8		      CMP	#200
   1813  174d		       b0 03		      BCS	.skipL0172
   1814  174f				   .condpart118
   1815  174f		       4c 8a d7 	      jmp	.level16
   1816  1752
   1817  1752				   .skipL0172
   1818  1752				   .
   1819  1752							; 
   1820  1752
   1821  1752				   .L0173		;  asteroidY  =  asteroidY  -	0.37
   1822  1752
   1823  1752		       a5 d8		      LDA	b
   1824  1754		       38		      SEC
   1825  1755		       e9 5e		      SBC	#94
   1826  1757		       85 d8		      STA	b
   1827  1759		       a5 8e		      LDA	asteroidY
   1828  175b		       e9 00		      SBC	#0
   1829  175d		       85 8e		      STA	asteroidY
   1830  175f				   .L0174		;  asteroid2Y	=  asteroid2Y  -  0.42
   1831  175f
   1832  175f		       a5 d9		      LDA	c
   1833  1761		       38		      SEC
   1834  1762		       e9 6b		      SBC	#107
   1835  1764		       85 d9		      STA	c
   1836  1766		       a5 8f		      LDA	asteroid2Y
   1837  1768		       e9 00		      SBC	#0
   1838  176a		       85 8f		      STA	asteroid2Y
   1839  176c				   .L0175		;  asteroid3Y	=  asteroid3Y  -  0.33
   1840  176c
   1841  176c		       a5 da		      LDA	d
   1842  176e		       38		      SEC
   1843  176f		       e9 54		      SBC	#84
   1844  1771		       85 da		      STA	d
   1845  1773		       a5 90		      LDA	asteroid3Y
   1846  1775		       e9 00		      SBC	#0
   1847  1777		       85 90		      STA	asteroid3Y
   1848  1779				   .L0176		;  asteroid4Y	=  asteroid4Y  -  0.08
   1849  1779
   1850  1779		       a5 db		      LDA	e
   1851  177b		       38		      SEC
   1852  177c		       e9 14		      SBC	#20
   1853  177e		       85 db		      STA	e
   1854  1780		       a5 91		      LDA	asteroid4Y
   1855  1782		       e9 00		      SBC	#0
   1856  1784		       85 91		      STA	asteroid4Y
   1857  1786				   .L0177		;  COLUPF  =  $68
   1858  1786
   1859  1786		       a9 68		      LDA	#$68
   1860  1788		       85 08		      STA	COLUPF
   1861  178a				   .
   1862  178a							; 
   1863  178a
   1864  178a				   .level16
   1865  178a							; level16
   1866  178a
   1867  178a				   .L0178		;  asteroidY  =  asteroidY  -	0.35
   1868  178a
   1869  178a		       a5 d8		      LDA	b
   1870  178c		       38		      SEC
   1871  178d		       e9 59		      SBC	#89
   1872  178f		       85 d8		      STA	b
   1873  1791		       a5 8e		      LDA	asteroidY
   1874  1793		       e9 00		      SBC	#0
   1875  1795		       85 8e		      STA	asteroidY
   1876  1797				   .L0179		;  asteroid2Y	=  asteroid2Y  -  0.40
   1877  1797
   1878  1797		       a5 d9		      LDA	c
   1879  1799		       38		      SEC
   1880  179a		       e9 66		      SBC	#102
   1881  179c		       85 d9		      STA	c
   1882  179e		       a5 8f		      LDA	asteroid2Y
   1883  17a0		       e9 00		      SBC	#0
   1884  17a2		       85 8f		      STA	asteroid2Y
   1885  17a4				   .L0180		;  asteroid3Y	=  asteroid3Y  -  0.31
   1886  17a4
   1887  17a4		       a5 da		      LDA	d
   1888  17a6		       38		      SEC
   1889  17a7		       e9 4f		      SBC	#79
   1890  17a9		       85 da		      STA	d
   1891  17ab		       a5 90		      LDA	asteroid3Y
   1892  17ad		       e9 00		      SBC	#0
   1893  17af		       85 90		      STA	asteroid3Y
   1894  17b1				   .L0181		;  asteroid4Y	=  asteroid4Y  -  0.08
   1895  17b1
   1896  17b1		       a5 db		      LDA	e
   1897  17b3		       38		      SEC
   1898  17b4		       e9 14		      SBC	#20
   1899  17b6		       85 db		      STA	e
   1900  17b8		       a5 91		      LDA	asteroid4Y
   1901  17ba		       e9 00		      SBC	#0
   1902  17bc		       85 91		      STA	asteroid4Y
   1903  17be				   .L0182		;  COLUPF  =  $48
   1904  17be
   1905  17be		       a9 48		      LDA	#$48
   1906  17c0		       85 08		      STA	COLUPF
   1907  17c2				   .L0183		;  goto resetScreen
   1908  17c2
   1909  17c2		       4c e1 da 	      jmp	.resetScreen
   1910  17c5
   1911  17c5				   .
   1912  17c5							; 
   1913  17c5
   1914  17c5				   .level15
   1915  17c5							; level15
   1916  17c5
   1917  17c5				   .L0184		;  asteroidY  =  asteroidY  -	0.33
   1918  17c5
   1919  17c5		       a5 d8		      LDA	b
   1920  17c7		       38		      SEC
   1921  17c8		       e9 54		      SBC	#84
   1922  17ca		       85 d8		      STA	b
   1923  17cc		       a5 8e		      LDA	asteroidY
   1924  17ce		       e9 00		      SBC	#0
   1925  17d0		       85 8e		      STA	asteroidY
   1926  17d2				   .L0185		;  asteroid2Y	=  asteroid2Y  -  0.38
   1927  17d2
   1928  17d2		       a5 d9		      LDA	c
   1929  17d4		       38		      SEC
   1930  17d5		       e9 61		      SBC	#97
   1931  17d7		       85 d9		      STA	c
   1932  17d9		       a5 8f		      LDA	asteroid2Y
   1933  17db		       e9 00		      SBC	#0
   1934  17dd		       85 8f		      STA	asteroid2Y
   1935  17df				   .L0186		;  asteroid3Y	=  asteroid3Y  -  0.29
   1936  17df
   1937  17df		       a5 da		      LDA	d
   1938  17e1		       38		      SEC
   1939  17e2		       e9 4a		      SBC	#74
   1940  17e4		       85 da		      STA	d
   1941  17e6		       a5 90		      LDA	asteroid3Y
   1942  17e8		       e9 00		      SBC	#0
   1943  17ea		       85 90		      STA	asteroid3Y
   1944  17ec				   .L0187		;  asteroid4Y	=  asteroid4Y  -  0.08
   1945  17ec
   1946  17ec		       a5 db		      LDA	e
   1947  17ee		       38		      SEC
   1948  17ef		       e9 14		      SBC	#20
   1949  17f1		       85 db		      STA	e
   1950  17f3		       a5 91		      LDA	asteroid4Y
   1951  17f5		       e9 00		      SBC	#0
   1952  17f7		       85 91		      STA	asteroid4Y
   1953  17f9				   .L0188		;  COLUPF  =  $DC
   1954  17f9
   1955  17f9		       a9 dc		      LDA	#$DC
   1956  17fb		       85 08		      STA	COLUPF
   1957  17fd				   .L0189		;  goto resetScreen
   1958  17fd
   1959  17fd		       4c e1 da 	      jmp	.resetScreen
   1960  1800
   1961  1800				   .
   1962  1800							; 
   1963  1800
   1964  1800				   .level14
   1965  1800							; level14
   1966  1800
   1967  1800				   .L0190		;  asteroidY  =  asteroidY  -	0.31
   1968  1800
   1969  1800		       a5 d8		      LDA	b
   1970  1802		       38		      SEC
   1971  1803		       e9 4f		      SBC	#79
   1972  1805		       85 d8		      STA	b
   1973  1807		       a5 8e		      LDA	asteroidY
   1974  1809		       e9 00		      SBC	#0
   1975  180b		       85 8e		      STA	asteroidY
   1976  180d				   .L0191		;  asteroid2Y	=  asteroid2Y  -  0.35
   1977  180d
   1978  180d		       a5 d9		      LDA	c
   1979  180f		       38		      SEC
   1980  1810		       e9 59		      SBC	#89
   1981  1812		       85 d9		      STA	c
   1982  1814		       a5 8f		      LDA	asteroid2Y
   1983  1816		       e9 00		      SBC	#0
   1984  1818		       85 8f		      STA	asteroid2Y
   1985  181a				   .L0192		;  asteroid3Y	=  asteroid3Y  -  0.27
   1986  181a
   1987  181a		       a5 da		      LDA	d
   1988  181c		       38		      SEC
   1989  181d		       e9 45		      SBC	#69
   1990  181f		       85 da		      STA	d
   1991  1821		       a5 90		      LDA	asteroid3Y
   1992  1823		       e9 00		      SBC	#0
   1993  1825		       85 90		      STA	asteroid3Y
   1994  1827				   .L0193		;  asteroid4Y	=  asteroid4Y  -  0.08
   1995  1827
   1996  1827		       a5 db		      LDA	e
   1997  1829		       38		      SEC
   1998  182a		       e9 14		      SBC	#20
   1999  182c		       85 db		      STA	e
   2000  182e		       a5 91		      LDA	asteroid4Y
   2001  1830		       e9 00		      SBC	#0
   2002  1832		       85 91		      STA	asteroid4Y
   2003  1834				   .L0194		;  COLUPF  =  $3E
   2004  1834
   2005  1834		       a9 3e		      LDA	#$3E
   2006  1836		       85 08		      STA	COLUPF
   2007  1838				   .L0195		;  goto resetScreen
   2008  1838
   2009  1838		       4c e1 da 	      jmp	.resetScreen
   2010  183b
   2011  183b				   .
   2012  183b							; 
   2013  183b
   2014  183b				   .level13
   2015  183b							; level13
   2016  183b
   2017  183b				   .L0196		;  asteroidY  =  asteroidY  -	0.29
   2018  183b
   2019  183b		       a5 d8		      LDA	b
   2020  183d		       38		      SEC
   2021  183e		       e9 4a		      SBC	#74
   2022  1840		       85 d8		      STA	b
   2023  1842		       a5 8e		      LDA	asteroidY
   2024  1844		       e9 00		      SBC	#0
   2025  1846		       85 8e		      STA	asteroidY
   2026  1848				   .L0197		;  asteroid2Y	=  asteroid2Y  -  0.33
   2027  1848
   2028  1848		       a5 d9		      LDA	c
   2029  184a		       38		      SEC
   2030  184b		       e9 54		      SBC	#84
   2031  184d		       85 d9		      STA	c
   2032  184f		       a5 8f		      LDA	asteroid2Y
   2033  1851		       e9 00		      SBC	#0
   2034  1853		       85 8f		      STA	asteroid2Y
   2035  1855				   .L0198		;  asteroid3Y	=  asteroid3Y  -  0.25
   2036  1855
   2037  1855		       a5 da		      LDA	d
   2038  1857		       38		      SEC
   2039  1858		       e9 40		      SBC	#64
   2040  185a		       85 da		      STA	d
   2041  185c		       a5 90		      LDA	asteroid3Y
   2042  185e		       e9 00		      SBC	#0
   2043  1860		       85 90		      STA	asteroid3Y
   2044  1862				   .L0199		;  asteroid4Y	=  asteroid4Y  -  0.08
   2045  1862
   2046  1862		       a5 db		      LDA	e
   2047  1864		       38		      SEC
   2048  1865		       e9 14		      SBC	#20
   2049  1867		       85 db		      STA	e
   2050  1869		       a5 91		      LDA	asteroid4Y
   2051  186b		       e9 00		      SBC	#0
   2052  186d		       85 91		      STA	asteroid4Y
   2053  186f				   .L0200		;  COLUPF  =  $E8
   2054  186f
   2055  186f		       a9 e8		      LDA	#$E8
   2056  1871		       85 08		      STA	COLUPF
   2057  1873				   .L0201		;  goto resetScreen
   2058  1873
   2059  1873		       4c e1 da 	      jmp	.resetScreen
   2060  1876
   2061  1876				   .
   2062  1876							; 
   2063  1876
   2064  1876				   .level12
   2065  1876							; level12
   2066  1876
   2067  1876				   .L0202		;  asteroidY  =  asteroidY  -	0.27
   2068  1876
   2069  1876		       a5 d8		      LDA	b
   2070  1878		       38		      SEC
   2071  1879		       e9 45		      SBC	#69
   2072  187b		       85 d8		      STA	b
   2073  187d		       a5 8e		      LDA	asteroidY
   2074  187f		       e9 00		      SBC	#0
   2075  1881		       85 8e		      STA	asteroidY
   2076  1883				   .L0203		;  asteroid2Y	=  asteroid2Y  -  0.31
   2077  1883
   2078  1883		       a5 d9		      LDA	c
   2079  1885		       38		      SEC
   2080  1886		       e9 4f		      SBC	#79
   2081  1888		       85 d9		      STA	c
   2082  188a		       a5 8f		      LDA	asteroid2Y
   2083  188c		       e9 00		      SBC	#0
   2084  188e		       85 8f		      STA	asteroid2Y
   2085  1890				   .L0204		;  asteroid3Y	=  asteroid3Y  -  0.23
   2086  1890
   2087  1890		       a5 da		      LDA	d
   2088  1892		       38		      SEC
   2089  1893		       e9 3a		      SBC	#58
   2090  1895		       85 da		      STA	d
   2091  1897		       a5 90		      LDA	asteroid3Y
   2092  1899		       e9 00		      SBC	#0
   2093  189b		       85 90		      STA	asteroid3Y
   2094  189d				   .L0205		;  asteroid4Y	=  asteroid4Y  -  0.08
   2095  189d
   2096  189d		       a5 db		      LDA	e
   2097  189f		       38		      SEC
   2098  18a0		       e9 14		      SBC	#20
   2099  18a2		       85 db		      STA	e
   2100  18a4		       a5 91		      LDA	asteroid4Y
   2101  18a6		       e9 00		      SBC	#0
   2102  18a8		       85 91		      STA	asteroid4Y
   2103  18aa				   .L0206		;  COLUPF  =  $D6
   2104  18aa
   2105  18aa		       a9 d6		      LDA	#$D6
   2106  18ac		       85 08		      STA	COLUPF
   2107  18ae				   .L0207		;  goto resetScreen
   2108  18ae
   2109  18ae		       4c e1 da 	      jmp	.resetScreen
   2110  18b1
   2111  18b1				   .
   2112  18b1							; 
   2113  18b1
   2114  18b1				   .level11
   2115  18b1							; level11
   2116  18b1
   2117  18b1				   .L0208		;  asteroidY  =  asteroidY  -	0.24
   2118  18b1
   2119  18b1		       a5 d8		      LDA	b
   2120  18b3		       38		      SEC
   2121  18b4		       e9 3d		      SBC	#61
   2122  18b6		       85 d8		      STA	b
   2123  18b8		       a5 8e		      LDA	asteroidY
   2124  18ba		       e9 00		      SBC	#0
   2125  18bc		       85 8e		      STA	asteroidY
   2126  18be				   .L0209		;  asteroid2Y	=  asteroid2Y  -  0.29
   2127  18be
   2128  18be		       a5 d9		      LDA	c
   2129  18c0		       38		      SEC
   2130  18c1		       e9 4a		      SBC	#74
   2131  18c3		       85 d9		      STA	c
   2132  18c5		       a5 8f		      LDA	asteroid2Y
   2133  18c7		       e9 00		      SBC	#0
   2134  18c9		       85 8f		      STA	asteroid2Y
   2135  18cb				   .L0210		;  asteroid3Y	=  asteroid3Y  -  0.21
   2136  18cb
   2137  18cb		       a5 da		      LDA	d
   2138  18cd		       38		      SEC
   2139  18ce		       e9 35		      SBC	#53
   2140  18d0		       85 da		      STA	d
   2141  18d2		       a5 90		      LDA	asteroid3Y
   2142  18d4		       e9 00		      SBC	#0
   2143  18d6		       85 90		      STA	asteroid3Y
   2144  18d8				   .L0211		;  asteroid4Y	=  asteroid4Y  -  0.08
   2145  18d8
   2146  18d8		       a5 db		      LDA	e
   2147  18da		       38		      SEC
   2148  18db		       e9 14		      SBC	#20
   2149  18dd		       85 db		      STA	e
   2150  18df		       a5 91		      LDA	asteroid4Y
   2151  18e1		       e9 00		      SBC	#0
   2152  18e3		       85 91		      STA	asteroid4Y
   2153  18e5				   .L0212		;  COLUPF  =  $CA
   2154  18e5
   2155  18e5		       a9 ca		      LDA	#$CA
   2156  18e7		       85 08		      STA	COLUPF
   2157  18e9				   .L0213		;  goto resetScreen
   2158  18e9
   2159  18e9		       4c e1 da 	      jmp	.resetScreen
   2160  18ec
   2161  18ec				   .
   2162  18ec							; 
   2163  18ec
   2164  18ec				   .level10
   2165  18ec							; level10
   2166  18ec
   2167  18ec				   .L0214		;  asteroidY  =  asteroidY  -	0.22
   2168  18ec
   2169  18ec		       a5 d8		      LDA	b
   2170  18ee		       38		      SEC
   2171  18ef		       e9 38		      SBC	#56
   2172  18f1		       85 d8		      STA	b
   2173  18f3		       a5 8e		      LDA	asteroidY
   2174  18f5		       e9 00		      SBC	#0
   2175  18f7		       85 8e		      STA	asteroidY
   2176  18f9				   .L0215		;  asteroid2Y	=  asteroid2Y  -  0.27
   2177  18f9
   2178  18f9		       a5 d9		      LDA	c
   2179  18fb		       38		      SEC
   2180  18fc		       e9 45		      SBC	#69
   2181  18fe		       85 d9		      STA	c
   2182  1900		       a5 8f		      LDA	asteroid2Y
   2183  1902		       e9 00		      SBC	#0
   2184  1904		       85 8f		      STA	asteroid2Y
   2185  1906				   .L0216		;  asteroid3Y	=  asteroid3Y  -  0.19
   2186  1906
   2187  1906		       a5 da		      LDA	d
   2188  1908		       38		      SEC
   2189  1909		       e9 30		      SBC	#48
   2190  190b		       85 da		      STA	d
   2191  190d		       a5 90		      LDA	asteroid3Y
   2192  190f		       e9 00		      SBC	#0
   2193  1911		       85 90		      STA	asteroid3Y
   2194  1913				   .L0217		;  asteroid4Y	=  asteroid4Y  -  0.08
   2195  1913
   2196  1913		       a5 db		      LDA	e
   2197  1915		       38		      SEC
   2198  1916		       e9 14		      SBC	#20
   2199  1918		       85 db		      STA	e
   2200  191a		       a5 91		      LDA	asteroid4Y
   2201  191c		       e9 00		      SBC	#0
   2202  191e		       85 91		      STA	asteroid4Y
   2203  1920				   .L0218		;  COLUPF  =  $78
   2204  1920
   2205  1920		       a9 78		      LDA	#$78
   2206  1922		       85 08		      STA	COLUPF
   2207  1924				   .L0219		;  goto resetScreen
   2208  1924
   2209  1924		       4c e1 da 	      jmp	.resetScreen
   2210  1927
   2211  1927				   .
   2212  1927							; 
   2213  1927
   2214  1927				   .level9
   2215  1927							; level9
   2216  1927
   2217  1927				   .L0220		;  asteroidY  =  asteroidY  -	0.20
   2218  1927
   2219  1927		       a5 d8		      LDA	b
   2220  1929		       38		      SEC
   2221  192a		       e9 33		      SBC	#51
   2222  192c		       85 d8		      STA	b
   2223  192e		       a5 8e		      LDA	asteroidY
   2224  1930		       e9 00		      SBC	#0
   2225  1932		       85 8e		      STA	asteroidY
   2226  1934				   .L0221		;  asteroid2Y	=  asteroid2Y  -  0.25
   2227  1934
   2228  1934		       a5 d9		      LDA	c
   2229  1936		       38		      SEC
   2230  1937		       e9 40		      SBC	#64
   2231  1939		       85 d9		      STA	c
   2232  193b		       a5 8f		      LDA	asteroid2Y
   2233  193d		       e9 00		      SBC	#0
   2234  193f		       85 8f		      STA	asteroid2Y
   2235  1941				   .L0222		;  asteroid3Y	=  asteroid3Y  -  0.17
   2236  1941
   2237  1941		       a5 da		      LDA	d
   2238  1943		       38		      SEC
   2239  1944		       e9 2b		      SBC	#43
   2240  1946		       85 da		      STA	d
   2241  1948		       a5 90		      LDA	asteroid3Y
   2242  194a		       e9 00		      SBC	#0
   2243  194c		       85 90		      STA	asteroid3Y
   2244  194e				   .L0223		;  asteroid4Y	=  asteroid4Y  -  0.08
   2245  194e
   2246  194e		       a5 db		      LDA	e
   2247  1950		       38		      SEC
   2248  1951		       e9 14		      SBC	#20
   2249  1953		       85 db		      STA	e
   2250  1955		       a5 91		      LDA	asteroid4Y
   2251  1957		       e9 00		      SBC	#0
   2252  1959		       85 91		      STA	asteroid4Y
   2253  195b				   .L0224		;  COLUPF  =  $66
   2254  195b
   2255  195b		       a9 66		      LDA	#$66
   2256  195d		       85 08		      STA	COLUPF
   2257  195f				   .L0225		;  goto resetScreen
   2258  195f
   2259  195f		       4c e1 da 	      jmp	.resetScreen
   2260  1962
   2261  1962				   .
   2262  1962							; 
   2263  1962
   2264  1962				   .level8
   2265  1962							; level8
   2266  1962
   2267  1962				   .L0226		;  asteroidY  =  asteroidY  -	0.18
   2268  1962
   2269  1962		       a5 d8		      LDA	b
   2270  1964		       38		      SEC
   2271  1965		       e9 2e		      SBC	#46
   2272  1967		       85 d8		      STA	b
   2273  1969		       a5 8e		      LDA	asteroidY
   2274  196b		       e9 00		      SBC	#0
   2275  196d		       85 8e		      STA	asteroidY
   2276  196f				   .L0227		;  asteroid2Y	=  asteroid2Y  -  0.23
   2277  196f
   2278  196f		       a5 d9		      LDA	c
   2279  1971		       38		      SEC
   2280  1972		       e9 3a		      SBC	#58
   2281  1974		       85 d9		      STA	c
   2282  1976		       a5 8f		      LDA	asteroid2Y
   2283  1978		       e9 00		      SBC	#0
   2284  197a		       85 8f		      STA	asteroid2Y
   2285  197c				   .L0228		;  asteroid3Y	=  asteroid3Y  -  0.15
   2286  197c
   2287  197c		       a5 da		      LDA	d
   2288  197e		       38		      SEC
   2289  197f		       e9 26		      SBC	#38
   2290  1981		       85 da		      STA	d
   2291  1983		       a5 90		      LDA	asteroid3Y
   2292  1985		       e9 00		      SBC	#0
   2293  1987		       85 90		      STA	asteroid3Y
   2294  1989				   .L0229		;  asteroid4Y	=  asteroid4Y  -  0.08
   2295  1989
   2296  1989		       a5 db		      LDA	e
   2297  198b		       38		      SEC
   2298  198c		       e9 14		      SBC	#20
   2299  198e		       85 db		      STA	e
   2300  1990		       a5 91		      LDA	asteroid4Y
   2301  1992		       e9 00		      SBC	#0
   2302  1994		       85 91		      STA	asteroid4Y
   2303  1996				   .L0230		;  COLUPF  =  $38
   2304  1996
   2305  1996		       a9 38		      LDA	#$38
   2306  1998		       85 08		      STA	COLUPF
   2307  199a				   .L0231		;  goto resetScreen
   2308  199a
   2309  199a		       4c e1 da 	      jmp	.resetScreen
   2310  199d
   2311  199d				   .
   2312  199d							; 
   2313  199d
   2314  199d				   .level7
   2315  199d							; level7
   2316  199d
   2317  199d				   .L0232		;  asteroidY  =  asteroidY  -	0.18
   2318  199d
   2319  199d		       a5 d8		      LDA	b
   2320  199f		       38		      SEC
   2321  19a0		       e9 2e		      SBC	#46
   2322  19a2		       85 d8		      STA	b
   2323  19a4		       a5 8e		      LDA	asteroidY
   2324  19a6		       e9 00		      SBC	#0
   2325  19a8		       85 8e		      STA	asteroidY
   2326  19aa				   .L0233		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.23
   2327  19aa
   2328  19aa		       a5 8f		      LDA	asteroid2Y
   2329  19ac		       c9 64		      CMP	#100
   2330  19ae		       b0 0d		      BCS	.skipL0233
   2331  19b0				   .condpart119
   2332  19b0		       a5 d9		      LDA	c
   2333  19b2		       38		      SEC
   2334  19b3		       e9 3a		      SBC	#58
   2335  19b5		       85 d9		      STA	c
   2336  19b7		       a5 8f		      LDA	asteroid2Y
   2337  19b9		       e9 00		      SBC	#0
   2338  19bb		       85 8f		      STA	asteroid2Y
   2339  19bd				   .skipL0233
   2340  19bd				   .L0234		;  asteroid3Y	=  asteroid3Y  -  0.15
   2341  19bd
   2342  19bd		       a5 da		      LDA	d
   2343  19bf		       38		      SEC
   2344  19c0		       e9 26		      SBC	#38
   2345  19c2		       85 da		      STA	d
   2346  19c4		       a5 90		      LDA	asteroid3Y
   2347  19c6		       e9 00		      SBC	#0
   2348  19c8		       85 90		      STA	asteroid3Y
   2349  19ca				   .L0235		;  asteroid4Y	=  asteroid4Y  -  0.08
   2350  19ca
   2351  19ca		       a5 db		      LDA	e
   2352  19cc		       38		      SEC
   2353  19cd		       e9 14		      SBC	#20
   2354  19cf		       85 db		      STA	e
   2355  19d1		       a5 91		      LDA	asteroid4Y
   2356  19d3		       e9 00		      SBC	#0
   2357  19d5		       85 91		      STA	asteroid4Y
   2358  19d7				   .L0236		;  COLUPF  =  $22
   2359  19d7
   2360  19d7		       a9 22		      LDA	#$22
   2361  19d9		       85 08		      STA	COLUPF
   2362  19db				   .L0237		;  goto resetScreen
   2363  19db
   2364  19db		       4c e1 da 	      jmp	.resetScreen
   2365  19de
   2366  19de				   .
   2367  19de							; 
   2368  19de
   2369  19de				   .level6
   2370  19de							; level6
   2371  19de
   2372  19de				   .L0238		;  asteroidY  =  asteroidY  -	0.16
   2373  19de
   2374  19de		       a5 d8		      LDA	b
   2375  19e0		       38		      SEC
   2376  19e1		       e9 28		      SBC	#40
   2377  19e3		       85 d8		      STA	b
   2378  19e5		       a5 8e		      LDA	asteroidY
   2379  19e7		       e9 00		      SBC	#0
   2380  19e9		       85 8e		      STA	asteroidY
   2381  19eb				   .L0239		;  if asteroid2Y  <  100 then asteroid2Y  =  asteroid2Y  -  0.21
   2382  19eb
   2383  19eb		       a5 8f		      LDA	asteroid2Y
   2384  19ed		       c9 64		      CMP	#100
   2385  19ef		       b0 0d		      BCS	.skipL0239
   2386  19f1				   .condpart120
   2387  19f1		       a5 d9		      LDA	c
   2388  19f3		       38		      SEC
   2389  19f4		       e9 35		      SBC	#53
   2390  19f6		       85 d9		      STA	c
   2391  19f8		       a5 8f		      LDA	asteroid2Y
   2392  19fa		       e9 00		      SBC	#0
   2393  19fc		       85 8f		      STA	asteroid2Y
   2394  19fe				   .skipL0239
   2395  19fe				   .L0240		;  asteroid3Y	=  asteroid3Y  -  0.13
   2396  19fe
   2397  19fe		       a5 da		      LDA	d
   2398  1a00		       38		      SEC
   2399  1a01		       e9 21		      SBC	#33
   2400  1a03		       85 da		      STA	d
   2401  1a05		       a5 90		      LDA	asteroid3Y
   2402  1a07		       e9 00		      SBC	#0
   2403  1a09		       85 90		      STA	asteroid3Y
   2404  1a0b				   .L0241		;  asteroid4Y	=  asteroid4Y  -  0.08
   2405  1a0b
   2406  1a0b		       a5 db		      LDA	e
   2407  1a0d		       38		      SEC
   2408  1a0e		       e9 14		      SBC	#20
   2409  1a10		       85 db		      STA	e
   2410  1a12		       a5 91		      LDA	asteroid4Y
   2411  1a14		       e9 00		      SBC	#0
   2412  1a16		       85 91		      STA	asteroid4Y
   2413  1a18				   .L0242		;  COLUPF  =  $19
   2414  1a18
   2415  1a18		       a9 19		      LDA	#$19
   2416  1a1a		       85 08		      STA	COLUPF
   2417  1a1c				   .L0243		;  goto resetScreen
   2418  1a1c
   2419  1a1c		       4c e1 da 	      jmp	.resetScreen
   2420  1a1f
   2421  1a1f				   .
   2422  1a1f							; 
   2423  1a1f
   2424  1a1f				   .level5
   2425  1a1f							; level5
   2426  1a1f
   2427  1a1f				   .L0244		;  asteroid2Y	=  asteroid2Y  -  0.22
   2428  1a1f
   2429  1a1f		       a5 d9		      LDA	c
   2430  1a21		       38		      SEC
   2431  1a22		       e9 38		      SBC	#56
   2432  1a24		       85 d9		      STA	c
   2433  1a26		       a5 8f		      LDA	asteroid2Y
   2434  1a28		       e9 00		      SBC	#0
   2435  1a2a		       85 8f		      STA	asteroid2Y
   2436  1a2c				   .L0245		;  asteroid4Y	=  asteroid4Y  -  0.08
   2437  1a2c
   2438  1a2c		       a5 db		      LDA	e
   2439  1a2e		       38		      SEC
   2440  1a2f		       e9 14		      SBC	#20
   2441  1a31		       85 db		      STA	e
   2442  1a33		       a5 91		      LDA	asteroid4Y
   2443  1a35		       e9 00		      SBC	#0
   2444  1a37		       85 91		      STA	asteroid4Y
   2445  1a39				   .L0246		;  asteroidY  =  asteroidY  -	0.18
   2446  1a39
   2447  1a39		       a5 d8		      LDA	b
   2448  1a3b		       38		      SEC
   2449  1a3c		       e9 2e		      SBC	#46
   2450  1a3e		       85 d8		      STA	b
   2451  1a40		       a5 8e		      LDA	asteroidY
   2452  1a42		       e9 00		      SBC	#0
   2453  1a44		       85 8e		      STA	asteroidY
   2454  1a46				   .L0247		;  COLUPF  =  $50
   2455  1a46
   2456  1a46		       a9 50		      LDA	#$50
   2457  1a48		       85 08		      STA	COLUPF
   2458  1a4a				   .L0248		;  goto resetScreen
   2459  1a4a
   2460  1a4a		       4c e1 da 	      jmp	.resetScreen
   2461  1a4d
   2462  1a4d				   .
   2463  1a4d							; 
   2464  1a4d
   2465  1a4d				   .level4
   2466  1a4d							; level4
   2467  1a4d
   2468  1a4d				   .L0249		;  asteroid2Y	=  asteroid2Y  -  0.21
   2469  1a4d
   2470  1a4d		       a5 d9		      LDA	c
   2471  1a4f		       38		      SEC
   2472  1a50		       e9 35		      SBC	#53
   2473  1a52		       85 d9		      STA	c
   2474  1a54		       a5 8f		      LDA	asteroid2Y
   2475  1a56		       e9 00		      SBC	#0
   2476  1a58		       85 8f		      STA	asteroid2Y
   2477  1a5a				   .L0250		;  asteroid4Y	=  asteroid4Y  -  0.08
   2478  1a5a
   2479  1a5a		       a5 db		      LDA	e
   2480  1a5c		       38		      SEC
   2481  1a5d		       e9 14		      SBC	#20
   2482  1a5f		       85 db		      STA	e
   2483  1a61		       a5 91		      LDA	asteroid4Y
   2484  1a63		       e9 00		      SBC	#0
   2485  1a65		       85 91		      STA	asteroid4Y
   2486  1a67				   .L0251		;  asteroidY  =  asteroidY  -	0.15
   2487  1a67
   2488  1a67		       a5 d8		      LDA	b
   2489  1a69		       38		      SEC
   2490  1a6a		       e9 26		      SBC	#38
   2491  1a6c		       85 d8		      STA	b
   2492  1a6e		       a5 8e		      LDA	asteroidY
   2493  1a70		       e9 00		      SBC	#0
   2494  1a72		       85 8e		      STA	asteroidY
   2495  1a74				   .L0252		;  COLUPF  =  $60
   2496  1a74
   2497  1a74		       a9 60		      LDA	#$60
   2498  1a76		       85 08		      STA	COLUPF
   2499  1a78				   .L0253		;  goto resetScreen
   2500  1a78
   2501  1a78		       4c e1 da 	      jmp	.resetScreen
   2502  1a7b
   2503  1a7b				   .
   2504  1a7b							; 
   2505  1a7b
   2506  1a7b				   .level3
   2507  1a7b							; level3
   2508  1a7b
   2509  1a7b				   .L0254		;  if asteroidY  <  100 then asteroidY  =  asteroidY  -  0.15
   2510  1a7b
   2511  1a7b		       a5 8e		      LDA	asteroidY
   2512  1a7d		       c9 64		      CMP	#100
   2513  1a7f		       b0 0d		      BCS	.skipL0254
   2514  1a81				   .condpart121
   2515  1a81		       a5 d8		      LDA	b
   2516  1a83		       38		      SEC
   2517  1a84		       e9 26		      SBC	#38
   2518  1a86		       85 d8		      STA	b
   2519  1a88		       a5 8e		      LDA	asteroidY
   2520  1a8a		       e9 00		      SBC	#0
   2521  1a8c		       85 8e		      STA	asteroidY
   2522  1a8e				   .skipL0254
   2523  1a8e				   .L0255		;  asteroid2Y	=  asteroid2Y  -  0.21
   2524  1a8e
   2525  1a8e		       a5 d9		      LDA	c
   2526  1a90		       38		      SEC
   2527  1a91		       e9 35		      SBC	#53
   2528  1a93		       85 d9		      STA	c
   2529  1a95		       a5 8f		      LDA	asteroid2Y
   2530  1a97		       e9 00		      SBC	#0
   2531  1a99		       85 8f		      STA	asteroid2Y
   2532  1a9b				   .L0256		;  asteroid4Y	=  asteroid4Y  -  0.08
   2533  1a9b
   2534  1a9b		       a5 db		      LDA	e
   2535  1a9d		       38		      SEC
   2536  1a9e		       e9 14		      SBC	#20
   2537  1aa0		       85 db		      STA	e
   2538  1aa2		       a5 91		      LDA	asteroid4Y
   2539  1aa4		       e9 00		      SBC	#0
   2540  1aa6		       85 91		      STA	asteroid4Y
   2541  1aa8				   .L0257		;  COLUPF  =  $02
   2542  1aa8
   2543  1aa8		       a9 02		      LDA	#$02
   2544  1aaa		       85 08		      STA	COLUPF
   2545  1aac				   .L0258		;  goto resetScreen
   2546  1aac
   2547  1aac		       4c e1 da 	      jmp	.resetScreen
   2548  1aaf
   2549  1aaf				   .
   2550  1aaf							; 
   2551  1aaf
   2552  1aaf				   .level2
   2553  1aaf							; level2
   2554  1aaf
   2555  1aaf				   .L0259		;  asteroid2Y	=  asteroid2Y  -  0.21
   2556  1aaf
   2557  1aaf		       a5 d9		      LDA	c
   2558  1ab1		       38		      SEC
   2559  1ab2		       e9 35		      SBC	#53
   2560  1ab4		       85 d9		      STA	c
   2561  1ab6		       a5 8f		      LDA	asteroid2Y
   2562  1ab8		       e9 00		      SBC	#0
   2563  1aba		       85 8f		      STA	asteroid2Y
   2564  1abc				   .L0260		;  asteroidY  =  asteroidY  -	0.15
   2565  1abc
   2566  1abc		       a5 d8		      LDA	b
   2567  1abe		       38		      SEC
   2568  1abf		       e9 26		      SBC	#38
   2569  1ac1		       85 d8		      STA	b
   2570  1ac3		       a5 8e		      LDA	asteroidY
   2571  1ac5		       e9 00		      SBC	#0
   2572  1ac7		       85 8e		      STA	asteroidY
   2573  1ac9				   .L0261		;  COLUPF  =  $40
   2574  1ac9
   2575  1ac9		       a9 40		      LDA	#$40
   2576  1acb		       85 08		      STA	COLUPF
   2577  1acd				   .L0262		;  goto resetScreen
   2578  1acd
   2579  1acd		       4c e1 da 	      jmp	.resetScreen
   2580  1ad0
   2581  1ad0				   .
   2582  1ad0							; 
   2583  1ad0
   2584  1ad0				   .level1
   2585  1ad0							; level1
   2586  1ad0
   2587  1ad0				   .L0263		;  asteroid2Y	=  asteroid2Y  -  0.21
   2588  1ad0
   2589  1ad0		       a5 d9		      LDA	c
   2590  1ad2		       38		      SEC
   2591  1ad3		       e9 35		      SBC	#53
   2592  1ad5		       85 d9		      STA	c
   2593  1ad7		       a5 8f		      LDA	asteroid2Y
   2594  1ad9		       e9 00		      SBC	#0
   2595  1adb		       85 8f		      STA	asteroid2Y
   2596  1add				   .
   2597  1add							; 
   2598  1add
   2599  1add				   .L0264		;  COLUPF  =  $70
   2600  1add
   2601  1add		       a9 70		      LDA	#$70
   2602  1adf		       85 08		      STA	COLUPF
   2603  1ae1				   .
   2604  1ae1							; 
   2605  1ae1
   2606  1ae1				   .resetScreen
   2607  1ae1							; resetScreen
   2608  1ae1
   2609  1ae1				   .L0265		;  drawscreen
   2610  1ae1
   2611  1ae1		       85 d1		      sta	temp7
   2612  1ae3		       a9 da		      lda	#>(ret_point2-1)
   2613  1ae5		       48		      pha
   2614  1ae6		       a9 f8		      lda	#<(ret_point2-1)
   2615  1ae8		       48		      pha
   2616  1ae9		       a9 f0		      lda	#>(drawscreen-1)
   2617  1aeb		       48		      pha
   2618  1aec		       a9 39		      lda	#<(drawscreen-1)
   2619  1aee		       48		      pha
   2620  1aef		       a5 d1		      lda	temp7
   2621  1af1		       48		      pha
   2622  1af2		       8a		      txa
   2623  1af3		       48		      pha
   2624  1af4		       a2 02		      ldx	#2
   2625  1af6		       4c eb ff 	      jmp	BS_jsr
   2626  1af9				   ret_point2
   2627  1af9				   .
   2628  1af9							; 
   2629  1af9
   2630  1af9				   .
   2631  1af9							; 
   2632  1af9
   2633  1af9				   .L0266		;  if asteroidY  >  70 then asteroidx	=  asteroidx  +  0.15
   2634  1af9
   2635  1af9		       a9 46		      LDA	#70
   2636  1afb		       c5 8e		      CMP	asteroidY
   2637  1afd		       b0 0d		      BCS	.skipL0266
   2638  1aff				   .condpart122
   2639  1aff		       a5 de		      LDA	h
   2640  1b01		       18		      CLC
   2641  1b02		       69 26		      ADC	#38
   2642  1b04		       85 de		      STA	h
   2643  1b06		       a5 85		      LDA	asteroidx
   2644  1b08		       69 00		      ADC	#0
   2645  1b0a		       85 85		      STA	asteroidx
   2646  1b0c				   .skipL0266
   2647  1b0c				   .L0267		;  if asteroidY  <  70  &&  asteroidY	>  50 then asteroidx  =  asteroidx  -  0.15
   2648  1b0c
   2649  1b0c		       a5 8e		      LDA	asteroidY
   2650  1b0e		       c9 46		      CMP	#70
   2651  1b10		       b0 13		      BCS	.skipL0267
   2652  1b12				   .condpart123
   2653  1b12		       a9 32		      LDA	#50
   2654  1b14		       c5 8e		      CMP	asteroidY
   2655  1b16		       b0 0d		      BCS	.skip123then
   2656  1b18				   .condpart124
   2657  1b18		       a5 de		      LDA	h
   2658  1b1a		       38		      SEC
   2659  1b1b		       e9 26		      SBC	#38
   2660  1b1d		       85 de		      STA	h
   2661  1b1f		       a5 85		      LDA	asteroidx
   2662  1b21		       e9 00		      SBC	#0
   2663  1b23		       85 85		      STA	asteroidx
   2664  1b25				   .skip123then
   2665  1b25				   .skipL0267
   2666  1b25				   .L0268		;  if asteroidY  <  50  &&  asteroidY	>  42 then asteroidx  =  asteroidx  +  0.15
   2667  1b25
   2668  1b25		       a5 8e		      LDA	asteroidY
   2669  1b27		       c9 32		      CMP	#50
   2670  1b29		       b0 13		      BCS	.skipL0268
   2671  1b2b				   .condpart125
   2672  1b2b		       a9 2a		      LDA	#42
   2673  1b2d		       c5 8e		      CMP	asteroidY
   2674  1b2f		       b0 0d		      BCS	.skip125then
   2675  1b31				   .condpart126
   2676  1b31		       a5 de		      LDA	h
   2677  1b33		       18		      CLC
   2678  1b34		       69 26		      ADC	#38
   2679  1b36		       85 de		      STA	h
   2680  1b38		       a5 85		      LDA	asteroidx
   2681  1b3a		       69 00		      ADC	#0
   2682  1b3c		       85 85		      STA	asteroidx
   2683  1b3e				   .skip125then
   2684  1b3e				   .skipL0268
   2685  1b3e				   .
   2686  1b3e							; 
   2687  1b3e
   2688  1b3e				   .L0269		;  if asteroid4Y  >  100 then asteroid4x  =  116
   2689  1b3e
   2690  1b3e		       a9 64		      LDA	#100
   2691  1b40		       c5 91		      CMP	asteroid4Y
   2692  1b42		       b0 08		      BCS	.skipL0269
   2693  1b44				   .condpart127
   2694  1b44		       a9 00		      LDA	#0
   2695  1b46		       85 e1		      STA	k
   2696  1b48		       a9 74		      LDA	#116
   2697  1b4a		       85 88		      STA	asteroid4x
   2698  1b4c				   .skipL0269
   2699  1b4c				   .L0270		;  if asteroid4Y  <  90  &&  asteroid4Y  >  82 then asteroid4x  =  asteroid4x	-  0.75
   2700  1b4c
   2701  1b4c		       a5 91		      LDA	asteroid4Y
   2702  1b4e		       c9 5a		      CMP	#90
   2703  1b50		       b0 13		      BCS	.skipL0270
   2704  1b52				   .condpart128
   2705  1b52		       a9 52		      LDA	#82
   2706  1b54		       c5 91		      CMP	asteroid4Y
   2707  1b56		       b0 0d		      BCS	.skip128then
   2708  1b58				   .condpart129
   2709  1b58		       a5 e1		      LDA	k
   2710  1b5a		       38		      SEC
   2711  1b5b		       e9 c0		      SBC	#192
   2712  1b5d		       85 e1		      STA	k
   2713  1b5f		       a5 88		      LDA	asteroid4x
   2714  1b61		       e9 00		      SBC	#0
   2715  1b63		       85 88		      STA	asteroid4x
   2716  1b65				   .skip128then
   2717  1b65				   .skipL0270
   2718  1b65				   .L0271		;  if asteroid4Y  <  80  &&  asteroid4Y  >  72 then asteroid4x  =  asteroid4x	+  0.75
   2719  1b65
   2720  1b65		       a5 91		      LDA	asteroid4Y
   2721  1b67		       c9 50		      CMP	#80
   2722  1b69		       b0 13		      BCS	.skipL0271
   2723  1b6b				   .condpart130
   2724  1b6b		       a9 48		      LDA	#72
   2725  1b6d		       c5 91		      CMP	asteroid4Y
   2726  1b6f		       b0 0d		      BCS	.skip130then
   2727  1b71				   .condpart131
   2728  1b71		       a5 e1		      LDA	k
   2729  1b73		       18		      CLC
   2730  1b74		       69 c0		      ADC	#192
   2731  1b76		       85 e1		      STA	k
   2732  1b78		       a5 88		      LDA	asteroid4x
   2733  1b7a		       69 00		      ADC	#0
   2734  1b7c		       85 88		      STA	asteroid4x
   2735  1b7e				   .skip130then
   2736  1b7e				   .skipL0271
   2737  1b7e				   .L0272		;  if asteroid4Y  <  70  &&  asteroid4Y  >  62 then asteroid4x  =  asteroid4x	-  0.75
   2738  1b7e
   2739  1b7e		       a5 91		      LDA	asteroid4Y
   2740  1b80		       c9 46		      CMP	#70
   2741  1b82		       b0 13		      BCS	.skipL0272
   2742  1b84				   .condpart132
   2743  1b84		       a9 3e		      LDA	#62
   2744  1b86		       c5 91		      CMP	asteroid4Y
   2745  1b88		       b0 0d		      BCS	.skip132then
   2746  1b8a				   .condpart133
   2747  1b8a		       a5 e1		      LDA	k
   2748  1b8c		       38		      SEC
   2749  1b8d		       e9 c0		      SBC	#192
   2750  1b8f		       85 e1		      STA	k
   2751  1b91		       a5 88		      LDA	asteroid4x
   2752  1b93		       e9 00		      SBC	#0
   2753  1b95		       85 88		      STA	asteroid4x
   2754  1b97				   .skip132then
   2755  1b97				   .skipL0272
   2756  1b97				   .L0273		;  if asteroid4Y  <  60  &&  asteroid4Y  >  52 then asteroid4x  =  asteroid4x	+  0.75
   2757  1b97
   2758  1b97		       a5 91		      LDA	asteroid4Y
   2759  1b99		       c9 3c		      CMP	#60
   2760  1b9b		       b0 13		      BCS	.skipL0273
   2761  1b9d				   .condpart134
   2762  1b9d		       a9 34		      LDA	#52
   2763  1b9f		       c5 91		      CMP	asteroid4Y
   2764  1ba1		       b0 0d		      BCS	.skip134then
   2765  1ba3				   .condpart135
   2766  1ba3		       a5 e1		      LDA	k
   2767  1ba5		       18		      CLC
   2768  1ba6		       69 c0		      ADC	#192
   2769  1ba8		       85 e1		      STA	k
   2770  1baa		       a5 88		      LDA	asteroid4x
   2771  1bac		       69 00		      ADC	#0
   2772  1bae		       85 88		      STA	asteroid4x
   2773  1bb0				   .skip134then
   2774  1bb0				   .skipL0273
   2775  1bb0				   .L0274		;  if asteroid4Y  <  50  &&  asteroid4Y  >  42 then asteroid4x  =  asteroid4x	-  0.75
   2776  1bb0
   2777  1bb0		       a5 91		      LDA	asteroid4Y
   2778  1bb2		       c9 32		      CMP	#50
   2779  1bb4		       b0 13		      BCS	.skipL0274
   2780  1bb6				   .condpart136
   2781  1bb6		       a9 2a		      LDA	#42
   2782  1bb8		       c5 91		      CMP	asteroid4Y
   2783  1bba		       b0 0d		      BCS	.skip136then
   2784  1bbc				   .condpart137
   2785  1bbc		       a5 e1		      LDA	k
   2786  1bbe		       38		      SEC
   2787  1bbf		       e9 c0		      SBC	#192
   2788  1bc1		       85 e1		      STA	k
   2789  1bc3		       a5 88		      LDA	asteroid4x
   2790  1bc5		       e9 00		      SBC	#0
   2791  1bc7		       85 88		      STA	asteroid4x
   2792  1bc9				   .skip136then
   2793  1bc9				   .skipL0274
   2794  1bc9				   .
   2795  1bc9							; 
   2796  1bc9
   2797  1bc9				   .L0275		;  if altSprite  =  0	||  player2y  >  90 then goto sprites
   2798  1bc9
   2799  1bc9		       a5 e6		      LDA	altSprite
   2800  1bcb		       c9 00		      CMP	#0
   2801  1bcd		       d0 03		      BNE	.skipL0275
   2802  1bcf				   .condpart138
   2803  1bcf		       4c d8 db 	      jmp	.condpart139
   2804  1bd2				   .skipL0275
   2805  1bd2		       a9 5a		      LDA	#90
   2806  1bd4		       c5 8f		      CMP	player2y
   2807  1bd6		       b0 03		      BCS	.skip41OR
   2808  1bd8				   .condpart139
   2809  1bd8		       4c a0 d1 	      jmp	.sprites
   2810  1bdb
   2811  1bdb				   .skip41OR
   2812  1bdb				   .L0276		;  if player2x  -  7  >  player0x then asteroid2x  =  asteroid2x  -  0.5
   2813  1bdb
   2814  1bdb							; complex condition detected
   2815  1bdb		       a5 86		      LDA	player2x
   2816  1bdd		       38		      SEC
   2817  1bde		       e9 07		      SBC	#7
   2818  1be0		       48		      PHA
   2819  1be1		       ba		      TSX
   2820  1be2		       68		      PLA
   2821  1be3		       a5 84		      LDA	player0x
   2822  1be5		       d5 01		      CMP	1,x
   2823  1be7		       b0 0d		      BCS	.skipL0276
   2824  1be9				   .condpart140
   2825  1be9		       a5 df		      LDA	i
   2826  1beb		       38		      SEC
   2827  1bec		       e9 80		      SBC	#128
   2828  1bee		       85 df		      STA	i
   2829  1bf0		       a5 86		      LDA	asteroid2x
   2830  1bf2		       e9 00		      SBC	#0
   2831  1bf4		       85 86		      STA	asteroid2x
   2832  1bf6				   .skipL0276
   2833  1bf6				   .L0277		;  if player2x  -  7  <  player0x then asteroid2x  =  asteroid2x  +  0.5
   2834  1bf6
   2835  1bf6							; complex condition detected
   2836  1bf6		       a5 86		      LDA	player2x
   2837  1bf8		       38		      SEC
   2838  1bf9		       e9 07		      SBC	#7
   2839  1bfb		       c5 84		      CMP	player0x
   2840  1bfd		       b0 0d		      BCS	.skipL0277
   2841  1bff				   .condpart141
   2842  1bff		       a5 df		      LDA	i
   2843  1c01		       18		      CLC
   2844  1c02		       69 80		      ADC	#128
   2845  1c04		       85 df		      STA	i
   2846  1c06		       a5 86		      LDA	asteroid2x
   2847  1c08		       69 00		      ADC	#0
   2848  1c0a		       85 86		      STA	asteroid2x
   2849  1c0c				   .skipL0277
   2850  1c0c				   .
   2851  1c0c							; 
   2852  1c0c
   2853  1c0c				   .L0278		;  goto sprites
   2854  1c0c
   2855  1c0c		       4c a0 d1 	      jmp	.sprites
   2856  1c0f
   2857  1c0f				   .
   2858  1c0f							; 
   2859  1c0f
   2860  1c0f				   .setPlayer1Color
   2861  1c0f							; setPlayer1Color
   2862  1c0f
   2863  1c0f				   .L0279		;  if ticker  =  0 then _COLUP1  =  $22
   2864  1c0f
   2865  1c0f		       a5 e4		      LDA	ticker
   2866  1c11		       c9 00		      CMP	#0
   2867  1c13		       d0 04		      BNE	.skipL0279
   2868  1c15				   .condpart142
   2869  1c15		       a9 22		      LDA	#$22
   2870  1c17		       85 98		      STA	_COLUP1
   2871  1c19				   .skipL0279
   2872  1c19				   .L0280		;  if ticker  =  1 then _COLUP1  =  $38
   2873  1c19
   2874  1c19		       a5 e4		      LDA	ticker
   2875  1c1b		       c9 01		      CMP	#1
   2876  1c1d		       d0 04		      BNE	.skipL0280
   2877  1c1f				   .condpart143
   2878  1c1f		       a9 38		      LDA	#$38
   2879  1c21		       85 98		      STA	_COLUP1
   2880  1c23				   .skipL0280
   2881  1c23				   .L0281		;  if ticker  =  2 then _COLUP1  =  $66
   2882  1c23
   2883  1c23		       a5 e4		      LDA	ticker
   2884  1c25		       c9 02		      CMP	#2
   2885  1c27		       d0 04		      BNE	.skipL0281
   2886  1c29				   .condpart144
   2887  1c29		       a9 66		      LDA	#$66
   2888  1c2b		       85 98		      STA	_COLUP1
   2889  1c2d				   .skipL0281
   2890  1c2d				   .L0282		;  if ticker  =  3 then _COLUP1  =  $78
   2891  1c2d
   2892  1c2d		       a5 e4		      LDA	ticker
   2893  1c2f		       c9 03		      CMP	#3
   2894  1c31		       d0 04		      BNE	.skipL0282
   2895  1c33				   .condpart145
   2896  1c33		       a9 78		      LDA	#$78
   2897  1c35		       85 98		      STA	_COLUP1
   2898  1c37				   .skipL0282
   2899  1c37				   .L0283		;  if ticker  =  4 then _COLUP1  =  $CA
   2900  1c37
   2901  1c37		       a5 e4		      LDA	ticker
   2902  1c39		       c9 04		      CMP	#4
   2903  1c3b		       d0 04		      BNE	.skipL0283
   2904  1c3d				   .condpart146
   2905  1c3d		       a9 ca		      LDA	#$CA
   2906  1c3f		       85 98		      STA	_COLUP1
   2907  1c41				   .skipL0283
   2908  1c41				   .L0284		;  if ticker  =  5 then _COLUP1  =  $D6
   2909  1c41
   2910  1c41		       a5 e4		      LDA	ticker
   2911  1c43		       c9 05		      CMP	#5
   2912  1c45		       d0 04		      BNE	.skipL0284
   2913  1c47				   .condpart147
   2914  1c47		       a9 d6		      LDA	#$D6
   2915  1c49		       85 98		      STA	_COLUP1
   2916  1c4b				   .skipL0284
   2917  1c4b				   .L0285		;  if ticker  =  6 then _COLUP1  =  $E8
   2918  1c4b
   2919  1c4b		       a5 e4		      LDA	ticker
   2920  1c4d		       c9 06		      CMP	#6
   2921  1c4f		       d0 04		      BNE	.skipL0285
   2922  1c51				   .condpart148
   2923  1c51		       a9 e8		      LDA	#$E8
   2924  1c53		       85 98		      STA	_COLUP1
   2925  1c55				   .skipL0285
   2926  1c55				   .
   2927  1c55							; 
   2928  1c55
   2929  1c55				   .L0286		;  goto colorSetComplete
   2930  1c55
   2931  1c55		       4c f4 d1 	      jmp	.colorSetComplete
   2932  1c58
   2933  1c58				   .
   2934  1c58							; 
   2935  1c58
   2936  1c58				   .setPlayer2Color
   2937  1c58							; setPlayer2Color
   2938  1c58
   2939  1c58				   .L0287		;  if ticker  =  0 then COLUP2  =  $22
   2940  1c58
   2941  1c58		       a5 e4		      LDA	ticker
   2942  1c5a		       c9 00		      CMP	#0
   2943  1c5c		       d0 04		      BNE	.skipL0287
   2944  1c5e				   .condpart149
   2945  1c5e		       a9 22		      LDA	#$22
   2946  1c60		       85 99		      STA	COLUP2
   2947  1c62				   .skipL0287
   2948  1c62				   .L0288		;  if ticker  =  1 then COLUP2  =  $38
   2949  1c62
   2950  1c62		       a5 e4		      LDA	ticker
   2951  1c64		       c9 01		      CMP	#1
   2952  1c66		       d0 04		      BNE	.skipL0288
   2953  1c68				   .condpart150
   2954  1c68		       a9 38		      LDA	#$38
   2955  1c6a		       85 99		      STA	COLUP2
   2956  1c6c				   .skipL0288
   2957  1c6c				   .L0289		;  if ticker  =  2 then COLUP2  =  $66
   2958  1c6c
   2959  1c6c		       a5 e4		      LDA	ticker
   2960  1c6e		       c9 02		      CMP	#2
   2961  1c70		       d0 04		      BNE	.skipL0289
   2962  1c72				   .condpart151
   2963  1c72		       a9 66		      LDA	#$66
   2964  1c74		       85 99		      STA	COLUP2
   2965  1c76				   .skipL0289
   2966  1c76				   .L0290		;  if ticker  =  3 then COLUP2  =  $78
   2967  1c76
   2968  1c76		       a5 e4		      LDA	ticker
   2969  1c78		       c9 03		      CMP	#3
   2970  1c7a		       d0 04		      BNE	.skipL0290
   2971  1c7c				   .condpart152
   2972  1c7c		       a9 78		      LDA	#$78
   2973  1c7e		       85 99		      STA	COLUP2
   2974  1c80				   .skipL0290
   2975  1c80				   .L0291		;  if ticker  =  4 then COLUP2  =  $CA
   2976  1c80
   2977  1c80		       a5 e4		      LDA	ticker
   2978  1c82		       c9 04		      CMP	#4
   2979  1c84		       d0 04		      BNE	.skipL0291
   2980  1c86				   .condpart153
   2981  1c86		       a9 ca		      LDA	#$CA
   2982  1c88		       85 99		      STA	COLUP2
   2983  1c8a				   .skipL0291
   2984  1c8a				   .L0292		;  if ticker  =  5 then COLUP2  =  $D6
   2985  1c8a
   2986  1c8a		       a5 e4		      LDA	ticker
   2987  1c8c		       c9 05		      CMP	#5
   2988  1c8e		       d0 04		      BNE	.skipL0292
   2989  1c90				   .condpart154
   2990  1c90		       a9 d6		      LDA	#$D6
   2991  1c92		       85 99		      STA	COLUP2
   2992  1c94				   .skipL0292
   2993  1c94				   .L0293		;  if ticker  =  6 then COLUP2  =  $E8
   2994  1c94
   2995  1c94		       a5 e4		      LDA	ticker
   2996  1c96		       c9 06		      CMP	#6
   2997  1c98		       d0 04		      BNE	.skipL0293
   2998  1c9a				   .condpart155
   2999  1c9a		       a9 e8		      LDA	#$E8
   3000  1c9c		       85 99		      STA	COLUP2
   3001  1c9e				   .skipL0293
   3002  1c9e				   .L0294		;  if ticker  =  7 then COLUP2  =  $3E
   3003  1c9e
   3004  1c9e		       a5 e4		      LDA	ticker
   3005  1ca0		       c9 07		      CMP	#7
   3006  1ca2		       d0 04		      BNE	.skipL0294
   3007  1ca4				   .condpart156
   3008  1ca4		       a9 3e		      LDA	#$3E
   3009  1ca6		       85 99		      STA	COLUP2
   3010  1ca8				   .skipL0294
   3011  1ca8				   .L0295		;  if ticker  =  8 then COLUP2  =  $DC
   3012  1ca8
   3013  1ca8		       a5 e4		      LDA	ticker
   3014  1caa		       c9 08		      CMP	#8
   3015  1cac		       d0 04		      BNE	.skipL0295
   3016  1cae				   .condpart157
   3017  1cae		       a9 dc		      LDA	#$DC
   3018  1cb0		       85 99		      STA	COLUP2
   3019  1cb2				   .skipL0295
   3020  1cb2				   .L0296		;  if ticker  =  9 then COLUP2  =  $48
   3021  1cb2
   3022  1cb2		       a5 e4		      LDA	ticker
   3023  1cb4		       c9 09		      CMP	#9
   3024  1cb6		       d0 04		      BNE	.skipL0296
   3025  1cb8				   .condpart158
   3026  1cb8		       a9 48		      LDA	#$48
   3027  1cba		       85 99		      STA	COLUP2
   3028  1cbc				   .skipL0296
   3029  1cbc				   .L0297		;  if ticker  =  10 then COLUP2  =  $68
   3030  1cbc
   3031  1cbc		       a5 e4		      LDA	ticker
   3032  1cbe		       c9 0a		      CMP	#10
   3033  1cc0		       d0 04		      BNE	.skipL0297
   3034  1cc2				   .condpart159
   3035  1cc2		       a9 68		      LDA	#$68
   3036  1cc4		       85 99		      STA	COLUP2
   3037  1cc6				   .skipL0297
   3038  1cc6				   .L0298		;  if ticker  <  4 then altSprite  =  0
   3039  1cc6
   3040  1cc6		       a5 e4		      LDA	ticker
   3041  1cc8		       c9 04		      CMP	#4
   3042  1cca		       b0 04		      BCS	.skipL0298
   3043  1ccc				   .condpart160
   3044  1ccc		       a9 00		      LDA	#0
   3045  1cce		       85 e6		      STA	altSprite
   3046  1cd0				   .skipL0298
   3047  1cd0				   .L0299		;  if ticker  >=  4 then altSprite  =	1
   3048  1cd0
   3049  1cd0		       a5 e4		      LDA	ticker
   3050  1cd2		       c9 04		      CMP	#4
   3051  1cd4		       90 04		      BCC	.skipL0299
   3052  1cd6				   .condpart161
   3053  1cd6		       a9 01		      LDA	#1
   3054  1cd8		       85 e6		      STA	altSprite
   3055  1cda				   .skipL0299
   3056  1cda				   .
   3057  1cda							; 
   3058  1cda
   3059  1cda				   .L0300		;  goto colorSetComplete
   3060  1cda
   3061  1cda		       4c f4 d1 	      jmp	.colorSetComplete
   3062  1cdd
   3063  1cdd				   .
   3064  1cdd							; 
   3065  1cdd
   3066  1cdd				   .setPlayer3Color
   3067  1cdd							; setPlayer3Color
   3068  1cdd
   3069  1cdd				   .L0301		;  if ticker  =  0 then COLUP3  =  $22
   3070  1cdd
   3071  1cdd		       a5 e4		      LDA	ticker
   3072  1cdf		       c9 00		      CMP	#0
   3073  1ce1		       d0 04		      BNE	.skipL0301
   3074  1ce3				   .condpart162
   3075  1ce3		       a9 22		      LDA	#$22
   3076  1ce5		       85 9a		      STA	COLUP3
   3077  1ce7				   .skipL0301
   3078  1ce7				   .L0302		;  if ticker  =  1 then COLUP3  =  $38
   3079  1ce7
   3080  1ce7		       a5 e4		      LDA	ticker
   3081  1ce9		       c9 01		      CMP	#1
   3082  1ceb		       d0 04		      BNE	.skipL0302
   3083  1ced				   .condpart163
   3084  1ced		       a9 38		      LDA	#$38
   3085  1cef		       85 9a		      STA	COLUP3
   3086  1cf1				   .skipL0302
   3087  1cf1				   .L0303		;  if ticker  =  2 then COLUP3  =  $66
   3088  1cf1
   3089  1cf1		       a5 e4		      LDA	ticker
   3090  1cf3		       c9 02		      CMP	#2
   3091  1cf5		       d0 04		      BNE	.skipL0303
   3092  1cf7				   .condpart164
   3093  1cf7		       a9 66		      LDA	#$66
   3094  1cf9		       85 9a		      STA	COLUP3
   3095  1cfb				   .skipL0303
   3096  1cfb				   .L0304		;  if ticker  =  3 then COLUP3  =  $78
   3097  1cfb
   3098  1cfb		       a5 e4		      LDA	ticker
   3099  1cfd		       c9 03		      CMP	#3
   3100  1cff		       d0 04		      BNE	.skipL0304
   3101  1d01				   .condpart165
   3102  1d01		       a9 78		      LDA	#$78
   3103  1d03		       85 9a		      STA	COLUP3
   3104  1d05				   .skipL0304
   3105  1d05				   .L0305		;  if ticker  =  4 then COLUP3  =  $CA
   3106  1d05
   3107  1d05		       a5 e4		      LDA	ticker
   3108  1d07		       c9 04		      CMP	#4
   3109  1d09		       d0 04		      BNE	.skipL0305
   3110  1d0b				   .condpart166
   3111  1d0b		       a9 ca		      LDA	#$CA
   3112  1d0d		       85 9a		      STA	COLUP3
   3113  1d0f				   .skipL0305
   3114  1d0f				   .L0306		;  if ticker  =  5 then COLUP3  =  $D6
   3115  1d0f
   3116  1d0f		       a5 e4		      LDA	ticker
   3117  1d11		       c9 05		      CMP	#5
   3118  1d13		       d0 04		      BNE	.skipL0306
   3119  1d15				   .condpart167
   3120  1d15		       a9 d6		      LDA	#$D6
   3121  1d17		       85 9a		      STA	COLUP3
   3122  1d19				   .skipL0306
   3123  1d19				   .L0307		;  if ticker  =  6 then COLUP3  =  $E8
   3124  1d19
   3125  1d19		       a5 e4		      LDA	ticker
   3126  1d1b		       c9 06		      CMP	#6
   3127  1d1d		       d0 04		      BNE	.skipL0307
   3128  1d1f				   .condpart168
   3129  1d1f		       a9 e8		      LDA	#$E8
   3130  1d21		       85 9a		      STA	COLUP3
   3131  1d23				   .skipL0307
   3132  1d23				   .L0308		;  if ticker  =  7 then COLUP3  =  $3E
   3133  1d23
   3134  1d23		       a5 e4		      LDA	ticker
   3135  1d25		       c9 07		      CMP	#7
   3136  1d27		       d0 04		      BNE	.skipL0308
   3137  1d29				   .condpart169
   3138  1d29		       a9 3e		      LDA	#$3E
   3139  1d2b		       85 9a		      STA	COLUP3
   3140  1d2d				   .skipL0308
   3141  1d2d				   .L0309		;  if ticker  =  8 then COLUP3  =  $DC
   3142  1d2d
   3143  1d2d		       a5 e4		      LDA	ticker
   3144  1d2f		       c9 08		      CMP	#8
   3145  1d31		       d0 04		      BNE	.skipL0309
   3146  1d33				   .condpart170
   3147  1d33		       a9 dc		      LDA	#$DC
   3148  1d35		       85 9a		      STA	COLUP3
   3149  1d37				   .skipL0309
   3150  1d37				   .L0310		;  if ticker  =  9 then COLUP3  =  $48
   3151  1d37
   3152  1d37		       a5 e4		      LDA	ticker
   3153  1d39		       c9 09		      CMP	#9
   3154  1d3b		       d0 04		      BNE	.skipL0310
   3155  1d3d				   .condpart171
   3156  1d3d		       a9 48		      LDA	#$48
   3157  1d3f		       85 9a		      STA	COLUP3
   3158  1d41				   .skipL0310
   3159  1d41				   .L0311		;  if ticker  =  10 then COLUP3  =  $68
   3160  1d41
   3161  1d41		       a5 e4		      LDA	ticker
   3162  1d43		       c9 0a		      CMP	#10
   3163  1d45		       d0 04		      BNE	.skipL0311
   3164  1d47				   .condpart172
   3165  1d47		       a9 68		      LDA	#$68
   3166  1d49		       85 9a		      STA	COLUP3
   3167  1d4b				   .skipL0311
   3168  1d4b				   .L0312		;  goto colorSetComplete
   3169  1d4b
   3170  1d4b		       4c f4 d1 	      jmp	.colorSetComplete
   3171  1d4e
   3172  1d4e				   .
   3173  1d4e							; 
   3174  1d4e
   3175  1d4e				   .setPlayer4Color
   3176  1d4e							; setPlayer4Color
   3177  1d4e
   3178  1d4e				   .L0313		;  if ticker  =  0 then COLUP4  =  $22
   3179  1d4e
   3180  1d4e		       a5 e4		      LDA	ticker
   3181  1d50		       c9 00		      CMP	#0
   3182  1d52		       d0 04		      BNE	.skipL0313
   3183  1d54				   .condpart173
   3184  1d54		       a9 22		      LDA	#$22
   3185  1d56		       85 9b		      STA	COLUP4
   3186  1d58				   .skipL0313
   3187  1d58				   .L0314		;  if ticker  =  1 then COLUP4  =  $38
   3188  1d58
   3189  1d58		       a5 e4		      LDA	ticker
   3190  1d5a		       c9 01		      CMP	#1
   3191  1d5c		       d0 04		      BNE	.skipL0314
   3192  1d5e				   .condpart174
   3193  1d5e		       a9 38		      LDA	#$38
   3194  1d60		       85 9b		      STA	COLUP4
   3195  1d62				   .skipL0314
   3196  1d62				   .L0315		;  if ticker  =  2 then COLUP4  =  $66
   3197  1d62
   3198  1d62		       a5 e4		      LDA	ticker
   3199  1d64		       c9 02		      CMP	#2
   3200  1d66		       d0 04		      BNE	.skipL0315
   3201  1d68				   .condpart175
   3202  1d68		       a9 66		      LDA	#$66
   3203  1d6a		       85 9b		      STA	COLUP4
   3204  1d6c				   .skipL0315
   3205  1d6c				   .L0316		;  if ticker  =  3 then COLUP4  =  $78
   3206  1d6c
   3207  1d6c		       a5 e4		      LDA	ticker
   3208  1d6e		       c9 03		      CMP	#3
   3209  1d70		       d0 04		      BNE	.skipL0316
   3210  1d72				   .condpart176
   3211  1d72		       a9 78		      LDA	#$78
   3212  1d74		       85 9b		      STA	COLUP4
   3213  1d76				   .skipL0316
   3214  1d76				   .L0317		;  if ticker  =  4 then COLUP4  =  $CA
   3215  1d76
   3216  1d76		       a5 e4		      LDA	ticker
   3217  1d78		       c9 04		      CMP	#4
   3218  1d7a		       d0 04		      BNE	.skipL0317
   3219  1d7c				   .condpart177
   3220  1d7c		       a9 ca		      LDA	#$CA
   3221  1d7e		       85 9b		      STA	COLUP4
   3222  1d80				   .skipL0317
   3223  1d80				   .L0318		;  if ticker  =  5 then COLUP4  =  $D6
   3224  1d80
   3225  1d80		       a5 e4		      LDA	ticker
   3226  1d82		       c9 05		      CMP	#5
   3227  1d84		       d0 04		      BNE	.skipL0318
   3228  1d86				   .condpart178
   3229  1d86		       a9 d6		      LDA	#$D6
   3230  1d88		       85 9b		      STA	COLUP4
   3231  1d8a				   .skipL0318
   3232  1d8a				   .L0319		;  if ticker  =  6 then COLUP4  =  $E8
   3233  1d8a
   3234  1d8a		       a5 e4		      LDA	ticker
   3235  1d8c		       c9 06		      CMP	#6
   3236  1d8e		       d0 04		      BNE	.skipL0319
   3237  1d90				   .condpart179
   3238  1d90		       a9 e8		      LDA	#$E8
   3239  1d92		       85 9b		      STA	COLUP4
   3240  1d94				   .skipL0319
   3241  1d94				   .L0320		;  if ticker  =  7 then COLUP4  =  $3E
   3242  1d94
   3243  1d94		       a5 e4		      LDA	ticker
   3244  1d96		       c9 07		      CMP	#7
   3245  1d98		       d0 04		      BNE	.skipL0320
   3246  1d9a				   .condpart180
   3247  1d9a		       a9 3e		      LDA	#$3E
   3248  1d9c		       85 9b		      STA	COLUP4
   3249  1d9e				   .skipL0320
   3250  1d9e				   .L0321		;  if ticker  =  8 then COLUP4  =  $DC
   3251  1d9e
   3252  1d9e		       a5 e4		      LDA	ticker
   3253  1da0		       c9 08		      CMP	#8
   3254  1da2		       d0 04		      BNE	.skipL0321
   3255  1da4				   .condpart181
   3256  1da4		       a9 dc		      LDA	#$DC
   3257  1da6		       85 9b		      STA	COLUP4
   3258  1da8				   .skipL0321
   3259  1da8				   .L0322		;  if ticker  =  9 then COLUP4  =  $48
   3260  1da8
   3261  1da8		       a5 e4		      LDA	ticker
   3262  1daa		       c9 09		      CMP	#9
   3263  1dac		       d0 04		      BNE	.skipL0322
   3264  1dae				   .condpart182
   3265  1dae		       a9 48		      LDA	#$48
   3266  1db0		       85 9b		      STA	COLUP4
   3267  1db2				   .skipL0322
   3268  1db2				   .L0323		;  if ticker  =  10 then COLUP4  =  $68
   3269  1db2
   3270  1db2		       a5 e4		      LDA	ticker
   3271  1db4		       c9 0a		      CMP	#10
   3272  1db6		       d0 04		      BNE	.skipL0323
   3273  1db8				   .condpart183
   3274  1db8		       a9 68		      LDA	#$68
   3275  1dba		       85 9b		      STA	COLUP4
   3276  1dbc				   .skipL0323
   3277  1dbc				   .
   3278  1dbc							; 
   3279  1dbc
   3280  1dbc				   .L0324		;  goto colorSetComplete
   3281  1dbc
   3282  1dbc		       4c f4 d1 	      jmp	.colorSetComplete
   3283  1dbf
   3284  1dbf				   .
   3285  1dbf							; 
   3286  1dbf
   3287  1dbf				   .
   3288  1dbf							; 
   3289  1dbf
   3290  1dbf				   .
   3291  1dbf							; 
   3292  1dbf
   3293  1dbf				   .
   3294  1dbf							; 
   3295  1dbf
   3296  1dbf				   .
   3297  1dbf							; 
   3298  1dbf
   3299  1dbf				   .
   3300  1dbf							; 
   3301  1dbf
   3302  1dbf				   .collisions
   3303  1dbf							; collisions
   3304  1dbf
   3305  1dbf				   .L0325		;  player5x  =  missile0x  +  4
   3306  1dbf
   3307  1dbf		       a5 80		      LDA	missile0x
   3308  1dc1		       18		      CLC
   3309  1dc2		       69 04		      ADC	#4
   3310  1dc4		       85 89		      STA	player5x
   3311  1dc6				   .L0326		;  player5y  =  missile0y  +  2
   3312  1dc6
   3313  1dc6		       a5 8a		      LDA	missile0y
   3314  1dc8		       18		      CLC
   3315  1dc9		       69 02		      ADC	#2
   3316  1dcb		       85 92		      STA	player5y
   3317  1dcd				   .L0327		;  missile0y  =  200
   3318  1dcd
   3319  1dcd		       a9 c8		      LDA	#200
   3320  1dcf		       85 8a		      STA	missile0y
   3321  1dd1				   .L0328		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   3322  1dd1
   3323  1dd1		       a9 0c		      LDA	#12
   3324  1dd3		       85 19		      STA	AUDV0
   3325  1dd5		       a9 08		      LDA	#8
   3326  1dd7		       85 15		      STA	AUDC0
   3327  1dd9		       a9 1c		      LDA	#28
   3328  1ddb		       85 17		      STA	AUDF0
   3329  1ddd				   .L0329		;  score  =  score  +	bulletMultiplier
   3330  1ddd
   3331  1ddd		       f8		      SED
   3332  1dde		       18		      CLC
   3333  1ddf		       a5 d4		      LDA	score+2
   3334  1de1		       65 e2		      ADC	bulletMultiplier
   3335  1de3
   3336  1de3		       85 d4		      STA	score+2
   3337  1de5		       a5 d3		      LDA	score+1
   3338  1de7		       69 00		      ADC	#0
   3339  1de9		       85 d3		      STA	score+1
   3340  1deb		       a5 d2		      LDA	score
   3341  1ded		       69 00		      ADC	#0
   3342  1def		       85 d2		      STA	score
   3343  1df1		       d8		      CLD
   3344  1df2				   .L0330		;  killCount  =  killCount  +	1
   3345  1df2
   3346  1df2		       e6 e3		      INC	killCount
   3347  1df4				   .L0331		;  goto frameReset
   3348  1df4
   3349  1df4		       4c 53 d6 	      jmp	.frameReset
   3350  1df7
   3351  1df7				   .
   3352  1df7							; 
   3353  1df7
   3354  1df7				   .killPlayer
   3355  1df7							; killPlayer
   3356  1df7
   3357  1df7				   .L0332		;  if _resetTicker  <	1 then _resetTicker  =	1
   3358  1df7
   3359  1df7		       a5 ee		      LDA	_resetTicker
   3360  1df9		       c9 01		      CMP	#1
   3361  1dfb		       b0 04		      BCS	.skipL0332
   3362  1dfd				   .condpart184
   3363  1dfd		       a9 01		      LDA	#1
   3364  1dff		       85 ee		      STA	_resetTicker
   3365  1e01				   .skipL0332
   3366  1e01				   .L0333		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   3367  1e01
   3368  1e01		       24 ef		      BIT	_Bit6_Sequence_Switch
   3369  1e03		       70 10		      BVS	.skipL0333
   3370  1e05				   .condpart185
   3371  1e05		       e6 d7		      INC	_P0_Luminosity
   3372  1e07		       a5 d7		      LDA	_P0_Luminosity
   3373  1e09		       c9 20		      CMP	#$20
   3374  1e0b		       90 08		      BCC	.skip185then
   3375  1e0d				   .condpart186
   3376  1e0d		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3377  1e0f		       09 40		      ORA	#64
   3378  1e11		       85 ef		      STA	_Bit6_Sequence_Switch
   3379  1e13		       e6 ee		      INC	_resetTicker
   3380  1e15				   .skip185then
   3381  1e15				   .skipL0333
   3382  1e15				   .L0334		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   3383  1e15
   3384  1e15		       24 ef		      BIT	_Bit6_Sequence_Switch
   3385  1e17		       50 16		      BVC	.skipL0334
   3386  1e19				   .condpart187
   3387  1e19		       c6 d7		      DEC	_P0_Luminosity
   3388  1e1b		       a9 12		      LDA	#$12
   3389  1e1d		       c5 d7		      CMP	_P0_Luminosity
   3390  1e1f		       90 0e		      BCC	.skip187then
   3391  1e21				   .condpart188
   3392  1e21		       a9 00		      LDA	#0
   3393  1e23		       85 d8		      STA	b
   3394  1e25		       a9 10		      LDA	#$10
   3395  1e27		       85 d7		      STA	_P0_Luminosity
   3396  1e29		       a5 ef		      LDA	_Bit6_Sequence_Switch
   3397  1e2b		       29 bf		      AND	#191
   3398  1e2d		       85 ef		      STA	_Bit6_Sequence_Switch
   3399  1e2f				   .skip187then
   3400  1e2f				   .skipL0334
   3401  1e2f				   .L0335		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   3402  1e2f
   3403  1e2f		       a9 0a		      LDA	#10
   3404  1e31		       85 1a		      STA	AUDV1
   3405  1e33		       a9 08		      LDA	#8
   3406  1e35		       85 16		      STA	AUDC1
   3407  1e37		       a9 19		      LDA	#25
   3408  1e39		       85 18		      STA	AUDF1
   3409  1e3b				   .L0336		;  COLUBK  =  _P0_Luminosity
   3410  1e3b
   3411  1e3b		       a5 d7		      LDA	_P0_Luminosity
   3412  1e3d		       85 09		      STA	COLUBK
   3413  1e3f				   .
   3414  1e3f							; 
   3415  1e3f
   3416  1e3f				   .L0337		;  if _resetTicker  >	3 then goto resetGame
   3417  1e3f
   3418  1e3f		       a9 03		      LDA	#3
   3419  1e41		       c5 ee		      CMP	_resetTicker
   3420  1e43		       b0 03		      BCS	.skipL0337
   3421  1e45				   .condpart189
   3422  1e45		       4c 4b de 	      jmp	.resetGame
   3423  1e48
   3424  1e48				   .skipL0337
   3425  1e48				   .
   3426  1e48							; 
   3427  1e48
   3428  1e48				   .L0338		;  goto resetScreen
   3429  1e48
   3430  1e48		       4c e1 da 	      jmp	.resetScreen
   3431  1e4b
   3432  1e4b				   .
   3433  1e4b							; 
   3434  1e4b
   3435  1e4b				   .resetGame
   3436  1e4b							; resetGame
   3437  1e4b
   3438  1e4b				   .
   3439  1e4b							; 
   3440  1e4b
   3441  1e4b				   .L0339		;  player0x = 75
   3442  1e4b
   3443  1e4b		       a9 4b		      LDA	#75
   3444  1e4d		       85 84		      STA	player0x
   3445  1e4f				   .L0340		;  player0y = 30
   3446  1e4f
   3447  1e4f		       a9 1e		      LDA	#30
   3448  1e51		       85 8d		      STA	player0y
   3449  1e53				   .
   3450  1e53							; 
   3451  1e53
   3452  1e53				   .L0341		;  player1x = 76
   3453  1e53
   3454  1e53		       a9 4c		      LDA	#76
   3455  1e55		       85 85		      STA	player1x
   3456  1e57				   .L0342		;  player1y = 100
   3457  1e57
   3458  1e57		       a9 64		      LDA	#100
   3459  1e59		       85 8e		      STA	player1y
   3460  1e5b				   .
   3461  1e5b							; 
   3462  1e5b
   3463  1e5b				   .L0343		;  player2x = 86
   3464  1e5b
   3465  1e5b		       a9 56		      LDA	#86
   3466  1e5d		       85 86		      STA	player2x
   3467  1e5f				   .L0344		;  player2y = 110
   3468  1e5f
   3469  1e5f		       a9 6e		      LDA	#110
   3470  1e61		       85 8f		      STA	player2y
   3471  1e63				   .
   3472  1e63							; 
   3473  1e63
   3474  1e63				   .L0345		;  player3x = 96
   3475  1e63
   3476  1e63		       a9 60		      LDA	#96
   3477  1e65		       85 87		      STA	player3x
   3478  1e67				   .L0346		;  player3y = 120
   3479  1e67
   3480  1e67		       a9 78		      LDA	#120
   3481  1e69		       85 90		      STA	player3y
   3482  1e6b				   .
   3483  1e6b							; 
   3484  1e6b
   3485  1e6b				   .L0347		;  player4x  =  116
   3486  1e6b
   3487  1e6b		       a9 74		      LDA	#116
   3488  1e6d		       85 88		      STA	player4x
   3489  1e6f				   .L0348		;  player4y  =  100
   3490  1e6f
   3491  1e6f		       a9 64		      LDA	#100
   3492  1e71		       85 91		      STA	player4y
   3493  1e73				   .
   3494  1e73							; 
   3495  1e73
   3496  1e73				   .L0349		;  missile0y = 255
   3497  1e73
   3498  1e73		       a9 ff		      LDA	#255
   3499  1e75		       85 8a		      STA	missile0y
   3500  1e77				   .L0350		;  missile0y = 255
   3501  1e77
   3502  1e77		       a9 ff		      LDA	#255
   3503  1e79		       85 8a		      STA	missile0y
   3504  1e7b				   .
   3505  1e7b							; 
   3506  1e7b
   3507  1e7b				   .L0351		;  _resetTicker  =  0
   3508  1e7b
   3509  1e7b		       a9 00		      LDA	#0
   3510  1e7d		       85 ee		      STA	_resetTicker
   3511  1e7f				   .L0352		;  missile1y =  200
   3512  1e7f
   3513  1e7f		       a9 c8		      LDA	#200
   3514  1e81		       85 8b		      STA	missile1y
   3515  1e83				   .L0353		;  COLUBK  =  $0
   3516  1e83
   3517  1e83		       a9 00		      LDA	#$0
   3518  1e85		       85 09		      STA	COLUBK
   3519  1e87				   .L0354		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   3520  1e87
   3521  1e87		       a9 00		      LDA	#0
   3522  1e89		       85 1a		      STA	AUDV1
   3523  1e8b		       85 16		      STA	AUDC1
   3524  1e8d		       85 18		      STA	AUDF1
   3525  1e8f				   .L0355		;  realLives  =  realLives  -	1
   3526  1e8f
   3527  1e8f		       c6 dd		      DEC	realLives
   3528  1e91				   .L0356		;  if realLives  <  1 then gameReady  =  0 :  firstFrame  =  0 :  realLives  =  3
   3529  1e91
   3530  1e91		       a5 dd		      LDA	realLives
   3531  1e93		       c9 01		      CMP	#1
   3532  1e95		       b0 0a		      BCS	.skipL0356
   3533  1e97				   .condpart190
   3534  1e97		       a9 00		      LDA	#0
   3535  1e99		       85 f0		      STA	gameReady
   3536  1e9b		       85 e8		      STA	firstFrame
   3537  1e9d		       a9 03		      LDA	#3
   3538  1e9f		       85 dd		      STA	realLives
   3539  1ea1				   .skipL0356
   3540  1ea1				   .L0357		;  goto resetScreen
   3541  1ea1
   3542  1ea1		       4c e1 da 	      jmp	.resetScreen
   3543  1ea4
   3544  1ea4				   .
   3545  1ea4							; 
   3546  1ea4
   3547  1ea4				   .
   3548  1ea4							; 
   3549  1ea4
   3550  1ea4				   .L0358		;  bank 2
   3551  1ea4
   3552  1ea4					      if	ECHO1
      304 bytes of ROM space left in bank 1
   3553  1ea4					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3554  1ea4					      endif
   3555  1ea4		       00 01	   ECHO1      =	1
   3556  1fd4					      ORG	$1FF4-bscode_length
   3557  1fd4					      RORG	$DFF4-bscode_length
   3558  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   3559  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   3560  1fd6				  -	      stx	FASTFETCH
   3561  1fd6					      endif
   3562  1fd6		       9a		      txs
   3563  1fd7				  -	      if	bankswitch == 64
   3564  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3565  1fd7					      else
   3566  1fd7		       a9 f3		      lda	#>(start-1)
   3567  1fd9					      endif
   3568  1fd9		       48		      pha
   3569  1fda		       a9 f7		      lda	#<(start-1)
   3570  1fdc		       48		      pha
   3571  1fdd		       48		      pha
   3572  1fde		       8a		      txa
   3573  1fdf		       48		      pha
   3574  1fe0		       ba		      tsx
   3575  1fe1					      if	bankswitch != 64
   3576  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   3577  1fe3		       2a		      rol
   3578  1fe4		       2a		      rol
   3579  1fe5		       2a		      rol
   3580  1fe6		       2a		      rol
   3581  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3582  1fe9		       aa		      tax
   3583  1fea		       e8		      inx
   3584  1feb				  -	      else
   3585  1feb				  -	      lda	4,x	; get high byte of return address
   3586  1feb				  -	      tay
   3587  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3588  1feb				  -	      sta	4,x
   3589  1feb				  -	      tya
   3590  1feb				  -	      lsr
   3591  1feb				  -	      lsr
   3592  1feb				  -	      lsr
   3593  1feb				  -	      lsr
   3594  1feb				  -	      tax
   3595  1feb				  -	      inx
   3596  1feb					      endif
   3597  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3598  1fee		       68		      pla
   3599  1fef		       aa		      tax
   3600  1ff0		       68		      pla
   3601  1ff1		       60		      rts
   3602  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3603  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3604  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3605  1ff2					      endif
   3606  1ffc					      ORG	$1FFC
   3607  1ffc					      RORG	$DFFC
   3608  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   3609  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   3610  2000					      ORG	$2000
   3611  2000					      RORG	$F000
   3612  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3613  2000
   3614  2000				   FineAdjustTableBegin
   3615  2000		       60		      .byte.b	%01100000	;left 6
   3616  2001		       50		      .byte.b	%01010000
   3617  2002		       40		      .byte.b	%01000000
   3618  2003		       30		      .byte.b	%00110000
   3619  2004		       20		      .byte.b	%00100000
   3620  2005		       10		      .byte.b	%00010000
   3621  2006		       00		      .byte.b	%00000000	;left 0
   3622  2007		       f0		      .byte.b	%11110000
   3623  2008		       e0		      .byte.b	%11100000
   3624  2009		       d0		      .byte.b	%11010000
   3625  200a		       c0		      .byte.b	%11000000
   3626  200b		       b0		      .byte.b	%10110000
   3627  200c		       a0		      .byte.b	%10100000
   3628  200d		       90		      .byte.b	%10010000
   3629  200e		       80		      .byte.b	%10000000	;right 8
   3630  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   3631  200f
   3632  200f				   PFStart
   3633  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   3634  2017				   blank_pf
   3635  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   3636  201f							; .byte 43,21,0,10,0,0,0,5
   3637  201f				  -	      ifconst	screenheight
   3638  201f				  -pfsub
   3639  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   3640  201f					      endif
   3641  201f							;--set initial P1 positions
   3642  201f				   multisprite_setup
   3643  201f		       a9 0f		      lda	#15
   3644  2021		       85 c4		      sta	pfheight
   3645  2023
   3646  2023		       a2 04		      ldx	#4
   3647  2025							; stx temp3
   3648  2025				   SetCopyHeight
   3649  2025							;	lda #76
   3650  2025							;	sta NewSpriteX,X
   3651  2025							;	lda CopyColorData,X
   3652  2025							;	sta NewCOLUP1,X
   3653  2025							;lda SpriteHeightTable,X
   3654  2025							; sta spriteheight,x
   3655  2025		       8a		      txa
   3656  2026		       95 9d		      sta	SpriteGfxIndex,X
   3657  2028		       95 f1		      sta	spritesort,X
   3658  202a		       ca		      dex
   3659  202b		       10 f8		      bpl	SetCopyHeight
   3660  202d
   3661  202d
   3662  202d
   3663  202d							; since we can't turn off pf, point PF to zeros here
   3664  202d		       a9 f0		      lda	#>blank_pf
   3665  202f		       85 be		      sta	PF2pointer+1
   3666  2031		       85 bc		      sta	PF1pointer+1
   3667  2033		       a9 17		      lda	#<blank_pf
   3668  2035		       85 bd		      sta	PF2pointer
   3669  2037		       85 bb		      sta	PF1pointer
   3670  2039		       60		      rts
   3671  203a
   3672  203a				   drawscreen
   3673  203a				  -	      ifconst	debugscore
   3674  203a				  -	      jsr	debugcycles
   3675  203a					      endif
   3676  203a
   3677  203a				   WaitForOverscanEnd
   3678  203a		       ad 84 02 	      lda	INTIM
   3679  203d		       30 fb		      bmi	WaitForOverscanEnd
   3680  203f
   3681  203f		       a9 02		      lda	#2
   3682  2041		       85 02		      sta	WSYNC
   3683  2043		       85 00		      sta	VSYNC
   3684  2045		       85 02		      sta	WSYNC
   3685  2047		       85 02		      sta	WSYNC
   3686  2049		       4a		      lsr
   3687  204a		       85 27		      sta	VDELBL
   3688  204c		       85 25		      sta	VDELP0
   3689  204e		       85 02		      sta	WSYNC
   3690  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   3691  2052				  -	      ifconst	overscan_time
   3692  2052				  -	      lda	#overscan_time+5+128
   3693  2052					      else
   3694  2052		       a9 aa		      lda	#42+128
   3695  2054					      endif
   3696  2054		       8d 96 02 	      sta	TIM64T
   3697  2057
   3698  2057							; run possible vblank bB code
   3699  2057				  -	      ifconst	vblank_bB_code
   3700  2057				  -	      jsr	vblank_bB_code
   3701  2057					      endif
   3702  2057
   3703  2057		       20 df f1 	      jsr	setscorepointers
   3704  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   3705  205d
   3706  205d							;-------------
   3707  205d
   3708  205d
   3709  205d
   3710  205d
   3711  205d
   3712  205d							;--position P0, M0, M1, BL
   3713  205d
   3714  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   3715  2060
   3716  2060							;--set up player 0 pointer
   3717  2060
   3718  2060		       c6 8d		      dec	player0y
   3719  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   3720  2064		       38		      sec
   3721  2065		       e5 8d		      sbc	player0y
   3722  2067		       18		      clc
   3723  2068		       65 b0		      adc	player0height
   3724  206a		       85 a2		      sta	player0pointer
   3725  206c
   3726  206c		       a5 8d		      lda	player0y
   3727  206e		       85 cf		      sta	P0Top
   3728  2070		       38		      sec
   3729  2071		       e5 b0		      sbc	player0height
   3730  2073		       18		      clc
   3731  2074		       69 80		      adc	#$80
   3732  2076		       85 a4		      sta	P0Bottom
   3733  2078
   3734  2078
   3735  2078							;--some final setup
   3736  2078
   3737  2078		       a2 04		      ldx	#4
   3738  207a		       a9 80		      lda	#$80
   3739  207c				   cycle74_HMCLR
   3740  207c		       95 20		      sta	HMP0,X
   3741  207e		       ca		      dex
   3742  207f		       10 fb		      bpl	cycle74_HMCLR
   3743  2081							;	sta HMCLR
   3744  2081
   3745  2081
   3746  2081		       a9 00		      lda	#0
   3747  2083		       85 0e		      sta	PF1
   3748  2085		       85 0f		      sta	PF2
   3749  2087		       85 1b		      sta	GRP0
   3750  2089		       85 1c		      sta	GRP1
   3751  208b
   3752  208b
   3753  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   3754  208e
   3755  208e				   WaitForVblankEnd
   3756  208e		       ad 84 02 	      lda	INTIM
   3757  2091		       30 fb		      bmi	WaitForVblankEnd
   3758  2093		       a9 00		      lda	#0
   3759  2095		       85 02		      sta	WSYNC
   3760  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   3761  2099		       85 2c		      sta	CXCLR
   3762  209b
   3763  209b
   3764  209b		       4c 60 f1 	      jmp	KernelRoutine
   3765  209e
   3766  209e
   3767  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   3768  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   3769  209e							;if you do not wish to write to P1 during this function, make
   3770  209e							;sure Y==0 before you call it.  This function will change Y, and A
   3771  209e							;will be the value put into HMxx when returned.
   3772  209e							;Call this function with at least 11 cycles left in the scanline 
   3773  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   3774  209e							;into the second scanline
   3775  209e		       38		      sec
   3776  209f		       85 02		      sta	WSYNC	;begin line 1
   3777  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   3778  20a4				   DivideBy15Loop
   3779  20a4		       e9 0f		      sbc	#15
   3780  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   3781  20a8
   3782  20a8		       a8		      tay		;+2	10/15/...60
   3783  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   3784  20ac
   3785  20ac							;	15
   3786  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   3787  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   3788  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3789  20b2		       85 2a		      sta	HMOVE	;+3
   3790  20b4		       60		      rts		;+6	 9
   3791  20b5
   3792  20b5							;-------------------------------------------------------------------------
   3793  20b5
   3794  20b5				   PrePositionAllObjects
   3795  20b5
   3796  20b5		       a2 04		      ldx	#4
   3797  20b7		       a5 82		      lda	ballx
   3798  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3799  20bc
   3800  20bc		       ca		      dex
   3801  20bd		       a5 81		      lda	missile1x
   3802  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3803  20c2
   3804  20c2		       ca		      dex
   3805  20c3		       a5 80		      lda	missile0x
   3806  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3807  20c8
   3808  20c8		       ca		      dex
   3809  20c9		       ca		      dex
   3810  20ca		       a5 84		      lda	player0x
   3811  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3812  20cf
   3813  20cf		       60		      rts
   3814  20d0
   3815  20d0
   3816  20d0							;-------------------------------------------------------------------------
   3817  20d0
   3818  20d0
   3819  20d0
   3820  20d0
   3821  20d0
   3822  20d0
   3823  20d0
   3824  20d0
   3825  20d0							;-------------------------------------------------------------------------
   3826  20d0
   3827  20d0
   3828  20d0				   KernelSetupSubroutine
   3829  20d0
   3830  20d0		       a2 04		      ldx	#4
   3831  20d2				   AdjustYValuesUpLoop
   3832  20d2		       b5 8e		      lda	NewSpriteY,X
   3833  20d4		       18		      clc
   3834  20d5		       69 02		      adc	#2
   3835  20d7		       95 8e		      sta	NewSpriteY,X
   3836  20d9		       ca		      dex
   3837  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   3838  20dc
   3839  20dc
   3840  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   3841  20de
   3842  20de		       b5 9d		      lda	SpriteGfxIndex,x
   3843  20e0		       a8		      tay
   3844  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   3845  20e4		       85 ce		      sta	RepoLine
   3846  20e6
   3847  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   3848  20e8		       a8		      tay
   3849  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   3850  20ec		       85 d0		      sta	temp6
   3851  20ee
   3852  20ee		       86 83		      stx	SpriteIndex
   3853  20f0
   3854  20f0
   3855  20f0
   3856  20f0		       a9 ff		      lda	#255
   3857  20f2		       85 a5		      sta	P1Bottom
   3858  20f4
   3859  20f4		       a5 8d		      lda	player0y
   3860  20f6				  -	      ifconst	screenheight
   3861  20f6				  -	      cmp	#screenheight+1
   3862  20f6					      else
   3863  20f6		       c9 59		      cmp	#$59
   3864  20f8					      endif
   3865  20f8		       90 04		      bcc	nottoohigh
   3866  20fa		       a5 a4		      lda	P0Bottom
   3867  20fc		       85 cf		      sta	P0Top
   3868  20fe
   3869  20fe
   3870  20fe
   3871  20fe				   nottoohigh
   3872  20fe		       60		      rts
   3873  20ff
   3874  20ff							;-------------------------------------------------------------------------
   3875  20ff
   3876  20ff
   3877  20ff
   3878  20ff
   3879  20ff
   3880  20ff							;*************************************************************************
   3881  20ff
   3882  20ff							;-------------------------------------------------------------------------
   3883  20ff							;-------------------------Data Below--------------------------------------
   3884  20ff							;-------------------------------------------------------------------------
   3885  20ff
   3886  20ff				   MaskTable
   3887  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   3888  2104
   3889  2104							; shove 6-digit score routine here
   3890  2104
   3891  2104				   sixdigscore
   3892  2104		       a9 00		      lda	#0
   3893  2106							;	sta COLUBK
   3894  2106		       85 0d		      sta	PF0
   3895  2108		       85 0e		      sta	PF1
   3896  210a		       85 0f		      sta	PF2
   3897  210c		       85 1f		      sta	ENABL
   3898  210e		       85 1d		      sta	ENAM0
   3899  2110		       85 1e		      sta	ENAM1
   3900  2112							;end of kernel here
   3901  2112
   3902  2112
   3903  2112							; 6 digit score routine
   3904  2112							; lda #0
   3905  2112							; sta PF1
   3906  2112							; sta PF2
   3907  2112							; tax
   3908  2112
   3909  2112		       85 02		      sta	WSYNC	;,x
   3910  2114
   3911  2114							;		  STA WSYNC ;first one, need one more
   3912  2114		       85 0b		      sta	REFP0
   3913  2116		       85 0c		      sta	REFP1
   3914  2118		       85 1b		      STA	GRP0
   3915  211a		       85 1c		      STA	GRP1
   3916  211c		       85 2b		      sta	HMCLR
   3917  211e
   3918  211e							; restore P0pointer
   3919  211e
   3920  211e		       a5 a2		      lda	player0pointer
   3921  2120		       18		      clc
   3922  2121		       65 8d		      adc	player0y
   3923  2123		       38		      sec
   3924  2124		       e5 b0		      sbc	player0height
   3925  2126		       85 a2		      sta	player0pointer
   3926  2128		       e6 8d		      inc	player0y
   3927  212a
   3928  212a				  -	      ifconst	vblank_time
   3929  212a				  -	      ifconst	screenheight
   3930  212a				  -	      if	screenheight == 84
   3931  212a				  -	      lda	#vblank_time+9+128+10
   3932  212a				  -	      else
   3933  212a				  -	      lda	#vblank_time+9+128+19
   3934  212a				  -	      endif
   3935  212a				  -	      else
   3936  212a				  -	      lda	#vblank_time+9+128
   3937  212a				  -	      endif
   3938  212a					      else
   3939  212a				  -	      ifconst	screenheight
   3940  212a				  -	      if	screenheight == 84
   3941  212a				  -	      lda	#52+128+10
   3942  212a				  -	      else
   3943  212a				  -	      lda	#52+128+19
   3944  212a				  -	      endif
   3945  212a					      else
   3946  212a		       a9 b4		      lda	#52+128
   3947  212c					      endif
   3948  212c					      endif
   3949  212c
   3950  212c		       8d 96 02 	      sta	TIM64T
   3951  212f					      ifconst	minikernel
   3952  212f		       20 b0 fb 	      jsr	minikernel
   3953  2132					      endif
   3954  2132				  -	      ifconst	noscore
   3955  2132				  -	      pla
   3956  2132				  -	      pla
   3957  2132				  -	      jmp	skipscore
   3958  2132					      endif
   3959  2132
   3960  2132							; score pointers contain:
   3961  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   3962  2132							; swap lo2->temp1
   3963  2132							; swap lo4->temp3
   3964  2132							; swap lo6->temp5
   3965  2132
   3966  2132		       a5 ca		      lda	scorepointers+5
   3967  2134		       85 cf		      sta	temp5
   3968  2136		       a5 c6		      lda	scorepointers+1
   3969  2138		       85 cb		      sta	temp1
   3970  213a		       a5 c8		      lda	scorepointers+3
   3971  213c		       85 cd		      sta	temp3
   3972  213e
   3973  213e		       a9 ff		      lda	#>scoretable
   3974  2140		       85 c6		      sta	scorepointers+1
   3975  2142		       85 c8		      sta	scorepointers+3
   3976  2144		       85 ca		      sta	scorepointers+5
   3977  2146		       85 cc		      sta	temp2
   3978  2148		       85 ce		      sta	temp4
   3979  214a		       85 d0		      sta	temp6
   3980  214c
   3981  214c		       60		      rts
   3982  214d
   3983  214d
   3984  214d
   3985  214d							;-------------------------------------------------------------------------
   3986  214d							;----------------------Kernel Routine-------------------------------------
   3987  214d							;-------------------------------------------------------------------------
   3988  214d
   3989  214d
   3990  214d							;-------------------------------------------------------------------------
   3991  214d							; repeat $f147-*
   3992  214d							; brk
   3993  214d							; repend
   3994  214d							;	org $F240
   3995  214d
   3996  214d				   SwitchDrawP0K1		;	72
   3997  214d		       a5 a4		      lda	P0Bottom
   3998  214f		       85 cf		      sta	P0Top	;+6	 2
   3999  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4000  2154
   4001  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   4003  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   4004  2159
   4005  2159				   SkipDrawP1K1 		;	11
   4006  2159		       a9 00		      lda	#0
   4007  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   4008  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   4009  2160
   4010  2160							;-------------------------------------------------------------------------
   4011  2160
   4012  2160				   KernelRoutine
   4013  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   4015  2166							; jsr wastetime ; waste 12 cycles
   4016  2166				  -	      else
   4017  2166				  -	      sleep	6
   4018  2166					      endif
   4019  2166		       ba		      tsx
   4020  2167		       86 f6		      stx	stack1
   4021  2169		       a2 1f		      ldx	#ENABL
   4022  216b		       9a		      txs		;+9	 9
   4023  216c
   4024  216c		       a2 00		      ldx	#0
   4025  216e		       a5 c4		      lda	pfheight
   4026  2170		       10 01		      bpl	asdhj
   4027  2172		       24		      .byte.b	$24
   4028  2173				   asdhj
   4029  2173		       aa		      tax
   4030  2174
   4031  2174							; ldx pfheight
   4032  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   4033  2177
   4034  2177				  -	      ifconst	screenheight
   4035  2177				  -	      sec
   4036  2177				  -	      if	screenheight == 84
   4037  2177				  -	      sbc	pfsub+1,x
   4038  2177				  -	      else
   4039  2177				  -	      sbc	pfsub,x
   4040  2177				  -	      endif
   4041  2177					      endif
   4042  2177
   4043  2177		       85 ba		      sta	pfpixelheight
   4044  2179
   4045  2179				  -	      ifconst	screenheight
   4046  2179				  -	      ldy	#screenheight
   4047  2179					      else
   4048  2179		       a0 58		      ldy	#88
   4049  217b					      endif
   4050  217b
   4051  217b							;	lda #$02
   4052  217b							;	sta COLUBK		;+5	18
   4053  217b
   4054  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   4056  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   4058  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   4060  2181		       c4 cf		      cpy	P0Top	;+3	69
   4061  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   4062  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   4063  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   4064  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   4065  218b				   BackFromSwitchDrawP0K1
   4066  218b
   4067  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   4068  218d							;		to a value greater than maximum Y value initially
   4069  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   4070  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   4071  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   4072  2194				   BackFromSkipDrawP1
   4073  2194
   4074  2194							;fuck	
   4075  2194		       84 cb		      sty	temp1
   4076  2196		       a4 ba		      ldy	pfpixelheight
   4077  2198		       b3 bb		      lax	(PF1pointer),y
   4078  219a		       86 0e		      stx	PF1	;+7	26
   4079  219c		       b1 bd		      lda	(PF2pointer),y
   4080  219e		       85 0f		      sta	PF2	;+7	33
   4081  21a0							;sleep 6
   4082  21a0		       86 b7		      stx	PF1temp2
   4083  21a2		       85 b9		      sta	PF2temp2
   4084  21a4		       88		      dey
   4085  21a5		       30 35		      bmi	pagewraphandler
   4086  21a7		       b1 bb		      lda	(PF1pointer),y
   4087  21a9				   cyclebalance
   4088  21a9		       85 b6		      sta	PF1temp1
   4089  21ab		       b1 bd		      lda	(PF2pointer),y
   4090  21ad		       85 b8		      sta	PF2temp1
   4091  21af		       a4 cb		      ldy	temp1
   4092  21b1
   4093  21b1		       a2 1f		      ldx	#ENABL
   4094  21b3		       9a		      txs
   4095  21b4		       c4 8c		      cpy	bally
   4096  21b6		       08		      php		;+6	39	VDEL ball
   4097  21b7
   4098  21b7
   4099  21b7		       c4 8b		      cpy	missile1y
   4100  21b9		       08		      php		;+6	71
   4101  21ba
   4102  21ba		       c4 8a		      cpy	missile0y
   4103  21bc		       08		      php		;+6	 1
   4104  21bd
   4105  21bd
   4106  21bd		       88		      dey		;+2	15
   4107  21be
   4108  21be		       c4 ce		      cpy	RepoLine	;+3	18
   4109  21c0		       f0 62		      beq	RepoKernel	;+2	20
   4110  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   4112  21c5
   4113  21c5				   newrepo		; since we have time here, store next repoline
   4114  21c5		       a6 83		      ldx	SpriteIndex
   4115  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   4116  21c9		       aa		      tax
   4117  21ca		       b5 8e		      lda	NewSpriteY,x
   4118  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   4120  21d0
   4121  21d0				   BackFromRepoKernel
   4122  21d0		       98		      tya		;+2	45
   4123  21d1		       25 c4		      and	pfheight	;+2	47
   4124  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   4125  21d5		       c6 ba		      dec	pfpixelheight
   4126  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   4127  21d9							;	bmi donewkernel		;+3	54
   4128  21d9							;	bne KernelLoopb+1		;+3	54
   4129  21d9
   4130  21d9				   donewkernel
   4131  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   4132  21dc
   4133  21dc				   pagewraphandler
   4134  21dc		       4c a9 f1 	      jmp	cyclebalance
   4135  21df
   4136  21df							;-------------------------------------------------------------------------
   4137  21df
   4138  21df							; room here for score?
   4139  21df
   4140  21df				   setscorepointers
   4141  21df		       a7 d4		      lax	score+2
   4142  21e1		       20 fb f1 	      jsr	scorepointerset
   4143  21e4		       84 ca		      sty	scorepointers+5
   4144  21e6		       86 c7		      stx	scorepointers+2
   4145  21e8		       a7 d3		      lax	score+1
   4146  21ea		       20 fb f1 	      jsr	scorepointerset
   4147  21ed		       84 c9		      sty	scorepointers+4
   4148  21ef		       86 c6		      stx	scorepointers+1
   4149  21f1		       a7 d2		      lax	score
   4150  21f3		       20 fb f1 	      jsr	scorepointerset
   4151  21f6		       84 c8		      sty	scorepointers+3
   4152  21f8		       86 c5		      stx	scorepointers
   4153  21fa				   wastetime
   4154  21fa		       60		      rts
   4155  21fb
   4156  21fb				   scorepointerset
   4157  21fb		       29 0f		      and	#$0F
   4158  21fd		       0a		      asl
   4159  21fe		       0a		      asl
   4160  21ff		       0a		      asl
   4161  2200		       69 74		      adc	#<scoretable
   4162  2202		       a8		      tay
   4163  2203		       8a		      txa
   4164  2204		       29 f0		      and	#$F0
   4165  2206		       4a		      lsr
   4166  2207		       69 74		      adc	#<scoretable
   4167  2209		       aa		      tax
   4168  220a		       60		      rts
   4169  220b							;	align 256
   4170  220b
   4171  220b				   SwitchDrawP0KR		;	45
   4172  220b		       a5 a4		      lda	P0Bottom
   4173  220d		       85 cf		      sta	P0Top	;+6	51
   4174  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4175  2212
   4176  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   4178  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   4179  2217
   4180  2217							;-----------------------------------------------------------
   4181  2217
   4182  2217				   noUpdateXKR
   4183  2217		       a2 01		      ldx	#1
   4184  2219		       cc cf 00 	      cpy.w	P0Top
   4185  221c		       4c 2e f2 	      JMP	retXKR
   4186  221f
   4187  221f				   skipthis
   4188  221f		       a2 01		      ldx	#1
   4189  2221		       4c 70 f2 	      jmp	goback
   4190  2224
   4191  2224				   RepoKernel		;	22	crosses page boundary
   4192  2224		       98		      tya
   4193  2225		       25 c4		      and	pfheight	;+2	26
   4194  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   4195  2229		       aa		      tax
   4196  222a							;	dex			;+2	30
   4197  222a		       c6 ba		      dec	pfpixelheight
   4198  222c							;	stx Temp		;+3	35
   4199  222c							;	SLEEP 3
   4200  222c
   4201  222c		       c4 cf		      cpy	P0Top	;+3	42
   4202  222e				   retXKR
   4203  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   4204  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   4205  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   4206  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   4207  2236				   BackFromSwitchDrawP0KR
   4208  2236		       38		      sec		;+2	56
   4209  2237
   4210  2237
   4211  2237
   4212  2237		       b5 b8		      lda	PF2temp1,X
   4213  2239		       b4 b6		      ldy	PF1temp1,X
   4214  223b
   4215  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   4216  223d
   4217  223d		       85 0f		      sta	PF2	;+7	63
   4218  223f
   4219  223f		       b5 9d		      lda	SpriteGfxIndex,x
   4220  2241		       84 0e		      sty	PF1	;+7	70	too early?
   4221  2243		       aa		      tax
   4222  2244		       a9 00		      lda	#0
   4223  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   4224  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   4225  224a
   4226  224a				   DivideBy15LoopK		;	 6	(carry set above)
   4227  224a		       e9 0f		      sbc	#15
   4228  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   4229  224e
   4230  224e		       aa		      tax		;+2	12/17/...62
   4231  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   4232  2252
   4233  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   4234  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   4235  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   4236  2258							;sta HMOVE			;+3	 3
   4237  2258
   4238  2258		       a2 1f		      ldx	#ENABL
   4239  225a		       9a		      txs		;+4	25
   4240  225b		       a4 ce		      ldy	RepoLine	; restore y
   4241  225d		       c4 8c		      cpy	bally
   4242  225f		       08		      php		;+6	 9	VDEL ball
   4243  2260
   4244  2260		       c4 8b		      cpy	missile1y
   4245  2262		       08		      php		;+6	15
   4246  2263
   4247  2263		       c4 8a		      cpy	missile0y
   4248  2265		       08		      php		;+6	21
   4249  2266
   4250  2266
   4251  2266
   4252  2266
   4253  2266
   4254  2266							;15 cycles
   4255  2266		       98		      tya
   4256  2267		       25 c4		      and	pfheight
   4257  2269							;eor #1
   4258  2269		       29 fe		      and	#$FE
   4259  226b		       d0 b2		      bne	skipthis
   4260  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   4262  2270							;	sleep 2
   4263  2270				   goback
   4264  2270
   4265  2270		       88		      dey
   4266  2271		       c4 cf		      cpy	P0Top	;+3	52
   4267  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   4268  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   4269  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   4270  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   4271  227b				   BackFromSwitchDrawP0KV
   4272  227b
   4273  227b							; sleep 3
   4274  227b
   4275  227b		       b5 b8		      lda	PF2temp1,X
   4276  227d		       85 0f		      sta	PF2	;+7	 5
   4277  227f		       b5 b6		      lda	PF1temp1,X
   4278  2281		       85 0e		      sta	PF1	;+7	74 
   4279  2283		       85 2a		      sta	HMOVE
   4280  2285
   4281  2285		       a9 00		      lda	#0
   4282  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   4283  2289
   4284  2289		       a2 1f		      ldx	#ENABL
   4285  228b		       9a		      txs		;+4	 8
   4286  228c
   4287  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   4288  228e							;--now, set all new variables and return to main kernel loop
   4289  228e
   4290  228e
   4291  228e							;
   4292  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   4293  2290		       aa		      tax		;+2	33
   4294  2291							;
   4295  2291
   4296  2291
   4297  2291
   4298  2291		       b5 93		      lda	NewNUSIZ,X
   4299  2293		       85 05		      sta	NUSIZ1	;+7	20
   4300  2295		       85 0c		      sta	REFP1
   4301  2297		       b5 98		      lda	NewCOLUP1,X
   4302  2299		       85 07		      sta	COLUP1	;+7	27
   4303  229b
   4304  229b							;	lda SpriteGfxIndex,X	;+4	31
   4305  229b							;	tax				;+2	33
   4306  229b							;fuck2
   4307  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   4308  229d		       38		      sec		;+2	38
   4309  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   4310  22a0		       85 a5		      sta	P1Bottom	;+3	45
   4311  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   4313  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   4314  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   4315  22a9		       85 cc		      sta	P1display	;+3	55
   4316  22ab		       b5 ab		      lda	player1pointerhi,X
   4317  22ad		       85 cd		      sta	P1display+1	;+7	62
   4318  22af
   4319  22af
   4320  22af		       c4 8c		      cpy	bally
   4321  22b1		       08		      php		;+6	68	VDELed
   4322  22b2
   4323  22b2		       c4 8b		      cpy	missile1y
   4324  22b4		       08		      php		;+6	74
   4325  22b5
   4326  22b5		       c4 8a		      cpy	missile0y
   4327  22b7		       08		      php		;+6	 4
   4328  22b8
   4329  22b8
   4330  22b8
   4331  22b8							; lda SpriteGfxIndex-1,x
   4332  22b8							; sleep 3
   4333  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   4334  22ba							; tax
   4335  22ba							; lda NewSpriteY,x
   4336  22ba							; sta RepoLine
   4337  22ba
   4338  22ba							; 10 cycles below...
   4339  22ba		       10 05		      bpl	SetNextLine
   4340  22bc		       a9 ff		      lda	#255
   4341  22be		       4c c4 f2 	      jmp	SetLastLine
   4342  22c1				   SetNextLine
   4343  22c1							;	lda NewSpriteY-1,x
   4344  22c1		       ad d0 00 	      lda.w	temp6
   4345  22c4				   SetLastLine
   4346  22c4		       85 ce		      sta	RepoLine
   4347  22c6
   4348  22c6		       98		      tya
   4349  22c7		       25 c4		      and	pfheight
   4350  22c9		       d0 06		      bne	nodec
   4351  22cb		       c6 ba		      dec	pfpixelheight
   4352  22cd		       88		      dey		;+2	30
   4353  22ce
   4354  22ce							; 10 cycles 
   4355  22ce
   4356  22ce
   4357  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   4358  22d1
   4359  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   4361  22d3		       88		      dey
   4362  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   4363  22d7
   4364  22d7							;-------------------------------------------------------------------------
   4365  22d7
   4366  22d7
   4367  22d7				   SwitchDrawP0KV		;	69
   4368  22d7		       a5 a4		      lda	P0Bottom
   4369  22d9		       85 cf		      sta	P0Top	;+6	75
   4370  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4371  22de
   4372  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   4374  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   4375  22e3
   4376  22e3							;-------------------------------------------------------------------------
   4377  22e3
   4378  22e3				   DoneWithKernel
   4379  22e3
   4380  22e3				   BottomOfKernelLoop
   4381  22e3
   4382  22e3		       85 02		      sta	WSYNC
   4383  22e5		       a6 f6		      ldx	stack1
   4384  22e7		       9a		      txs
   4385  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   4386  22eb
   4387  22eb
   4388  22eb		       85 02		      sta	WSYNC
   4389  22ed		       a2 00		      ldx	#0
   4390  22ef		       85 2b		      sta	HMCLR
   4391  22f1		       86 1b		      STx	GRP0
   4392  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4393  22f5
   4394  22f5		       a0 07		      LDY	#7
   4395  22f7		       84 25		      STy	VDELP0
   4396  22f9		       84 26		      STy	VDELP1
   4397  22fb		       a9 10		      LDA	#$10
   4398  22fd		       85 21		      STA	HMP1
   4399  22ff		       a5 d5		      LDA	scorecolor
   4400  2301		       85 06		      STA	COLUP0
   4401  2303		       85 07		      STA	COLUP1
   4402  2305
   4403  2305		       a9 03		      LDA	#$03
   4404  2307		       85 04		      STA	NUSIZ0
   4405  2309		       85 05		      STA	NUSIZ1
   4406  230b
   4407  230b		       85 10		      STA	RESP0
   4408  230d		       85 11		      STA	RESP1
   4409  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   4411  2314		       b1 c5		      lda	(scorepointers),y
   4412  2316		       85 1b		      sta	GRP0
   4413  2318				  -	      ifconst	pfscore
   4414  2318				  -	      lda	pfscorecolor
   4415  2318				  -	      sta	COLUPF
   4416  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   4418  231b					      endif
   4419  231b
   4420  231b		       85 2a		      STA	HMOVE
   4421  231d		       b1 cd		      lda	(scorepointers+8),y
   4422  231f							; sta WSYNC
   4423  231f							;sleep 2
   4424  231f		       4c 2c f3 	      jmp	beginscore
   4425  2322
   4426  2322
   4427  2322				   loop2
   4428  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   4429  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   4430  2326				  -	      ifconst	pfscore
   4431  2326				  -	      lda.w	pfscore1
   4432  2326				  -	      sta	PF1
   4433  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   4435  232a					      endif
   4436  232a							; cycle 0
   4437  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   4438  232c				   beginscore
   4439  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   4440  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   4441  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   4442  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   4443  2334		       9a		      txs
   4444  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   4446  2339				  -	      ifconst	pfscore
   4447  2339				  -	      lda	pfscore2
   4448  2339				  -	      sta	PF1
   4449  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   4451  233c					      endif
   4452  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   4453  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   4454  2340		       ba		      tsx
   4455  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   4456  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   4457  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   4458  2347		       88		      dey
   4459  2348		       10 d8		      bpl	loop2	;+2  60  180
   4460  234a		       a6 f6		      ldx	stack1
   4461  234c		       9a		      txs
   4462  234d
   4463  234d
   4464  234d							; lda scorepointers+1
   4465  234d		       a4 cb		      ldy	temp1
   4466  234f							; sta temp1
   4467  234f		       84 c6		      sty	scorepointers+1
   4468  2351
   4469  2351		       a9 00		      LDA	#0
   4470  2353		       85 1b		      STA	GRP0
   4471  2355		       85 1c		      STA	GRP1
   4472  2357		       85 0e		      sta	PF1
   4473  2359		       85 25		      STA	VDELP0
   4474  235b		       85 26		      STA	VDELP1	;do we need these
   4475  235d		       85 04		      STA	NUSIZ0
   4476  235f		       85 05		      STA	NUSIZ1
   4477  2361
   4478  2361							; lda scorepointers+3
   4479  2361		       a4 cd		      ldy	temp3
   4480  2363							; sta temp3
   4481  2363		       84 c8		      sty	scorepointers+3
   4482  2365
   4483  2365							; lda scorepointers+5
   4484  2365		       a4 cf		      ldy	temp5
   4485  2367							; sta temp5
   4486  2367		       84 ca		      sty	scorepointers+5
   4487  2369
   4488  2369
   4489  2369							;-------------------------------------------------------------------------
   4490  2369							;------------------------Overscan Routine---------------------------------
   4491  2369							;-------------------------------------------------------------------------
   4492  2369
   4493  2369				   OverscanRoutine
   4494  2369
   4495  2369
   4496  2369
   4497  2369				   skipscore
   4498  2369				  -	      ifconst	qtcontroller
   4499  2369				  -	      lda	qtcontroller
   4500  2369				  -	      lsr		; bit 0 in carry
   4501  2369				  -	      lda	#4
   4502  2369				  -	      ror		; carry into top of A
   4503  2369					      else
   4504  2369		       a9 02		      lda	#2
   4505  236b					      endif		; qtcontroller
   4506  236b		       85 02		      sta	WSYNC
   4507  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   4508  236f
   4509  236f
   4510  236f
   4511  236f
   4512  236f
   4513  236f							;-------------------------------------------------------------------------
   4514  236f							;----------------------------End Main Routines----------------------------
   4515  236f							;-------------------------------------------------------------------------
   4516  236f
   4517  236f
   4518  236f							;*************************************************************************
   4519  236f
   4520  236f							;-------------------------------------------------------------------------
   4521  236f							;----------------------Begin Subroutines----------------------------------
   4522  236f							;-------------------------------------------------------------------------
   4523  236f
   4524  236f
   4525  236f
   4526  236f
   4527  236f				   KernelCleanupSubroutine
   4528  236f
   4529  236f		       a2 04		      ldx	#4
   4530  2371				   AdjustYValuesDownLoop
   4531  2371		       b5 8e		      lda	NewSpriteY,X
   4532  2373		       38		      sec
   4533  2374		       e9 02		      sbc	#2
   4534  2376		       95 8e		      sta	NewSpriteY,X
   4535  2378		       ca		      dex
   4536  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   4537  237b
   4538  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   4540  237e							;rts
   4541  237e
   4542  237e				   SetupP1Subroutine
   4543  237e							; flickersort algorithm
   4544  237e							; count 4-0
   4545  237e							; table2=table1 (?)
   4546  237e							; detect overlap of sprites in table 2
   4547  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   4548  237e							; if no overlap, do regular sort in table 2 and table 1
   4549  237e				   fsstart
   4550  237e		       a2 ff		      ldx	#255
   4551  2380				   copytable
   4552  2380		       e8		      inx
   4553  2381		       b5 f1		      lda	spritesort,x
   4554  2383		       95 9d		      sta	SpriteGfxIndex,x
   4555  2385		       e0 04		      cpx	#4
   4556  2387		       d0 f7		      bne	copytable
   4557  2389
   4558  2389		       86 cd		      stx	temp3	; highest displayed sprite
   4559  238b		       ca		      dex
   4560  238c		       86 cc		      stx	temp2
   4561  238e				   sortloop
   4562  238e		       a6 cc		      ldx	temp2
   4563  2390		       b5 f1		      lda	spritesort,x
   4564  2392		       aa		      tax
   4565  2393		       b5 8e		      lda	NewSpriteY,x
   4566  2395		       85 cb		      sta	temp1
   4567  2397
   4568  2397		       a6 cc		      ldx	temp2
   4569  2399		       b5 f2		      lda	spritesort+1,x
   4570  239b		       aa		      tax
   4571  239c		       b5 8e		      lda	NewSpriteY,x
   4572  239e		       38		      sec
   4573  239f		       18		      clc
   4574  23a0		       e5 cb		      sbc	temp1
   4575  23a2		       90 0e		      bcc	largerXislower
   4576  23a4
   4577  23a4							; larger x is higher (A>=temp1)
   4578  23a4		       d5 b1		      cmp	spriteheight,x
   4579  23a6		       b0 2f		      bcs	countdown
   4580  23a8							; overlap with x+1>x
   4581  23a8							; 
   4582  23a8							; stick x at end of gfxtable, dec counter
   4583  23a8				   overlapping
   4584  23a8		       c6 cd		      dec	temp3
   4585  23aa		       a6 cc		      ldx	temp2
   4586  23ac							; inx
   4587  23ac		       20 eb f3 	      jsr	shiftnumbers
   4588  23af		       4c cd f3 	      jmp	skipswapGfxtable
   4589  23b2
   4590  23b2				   largerXislower		; (temp1>A)
   4591  23b2		       a8		      tay
   4592  23b3		       a6 cc		      ldx	temp2
   4593  23b5		       b5 f1		      lda	spritesort,x
   4594  23b7		       aa		      tax
   4595  23b8		       98		      tya
   4596  23b9		       49 ff		      eor	#$FF
   4597  23bb		       e9 01		      sbc	#1
   4598  23bd		       90 e9		      bcc	overlapping
   4599  23bf		       d5 b1		      cmp	spriteheight,x
   4600  23c1		       b0 0a		      bcs	notoverlapping
   4601  23c3
   4602  23c3		       c6 cd		      dec	temp3
   4603  23c5		       a6 cc		      ldx	temp2
   4604  23c7							; inx
   4605  23c7		       20 eb f3 	      jsr	shiftnumbers
   4606  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   4607  23cd				   notoverlapping
   4608  23cd							; ldx temp2 ; swap display table
   4609  23cd							; ldy SpriteGfxIndex+1,x
   4610  23cd							; lda SpriteGfxIndex,x
   4611  23cd							; sty SpriteGfxIndex,x
   4612  23cd							; sta SpriteGfxIndex+1,x 
   4613  23cd
   4614  23cd				   skipswapGfxtable
   4615  23cd		       a6 cc		      ldx	temp2	; swap sort table
   4616  23cf		       b4 f2		      ldy	spritesort+1,x
   4617  23d1		       b5 f1		      lda	spritesort,x
   4618  23d3		       94 f1		      sty	spritesort,x
   4619  23d5		       95 f2		      sta	spritesort+1,x
   4620  23d7
   4621  23d7				   countdown
   4622  23d7		       c6 cc		      dec	temp2
   4623  23d9		       10 b3		      bpl	sortloop
   4624  23db
   4625  23db				   checktoohigh
   4626  23db		       a6 cd		      ldx	temp3
   4627  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   4628  23df		       aa		      tax
   4629  23e0		       b5 8e		      lda	NewSpriteY,x
   4630  23e2				  -	      ifconst	screenheight
   4631  23e2				  -	      cmp	#screenheight-3
   4632  23e2					      else
   4633  23e2		       c9 55		      cmp	#$55
   4634  23e4					      endif
   4635  23e4		       90 04		      bcc	nonetoohigh
   4636  23e6		       c6 cd		      dec	temp3
   4637  23e8		       d0 f1		      bne	checktoohigh
   4638  23ea
   4639  23ea				   nonetoohigh
   4640  23ea		       60		      rts
   4641  23eb
   4642  23eb
   4643  23eb				   shiftnumbers
   4644  23eb							; stick current x at end, shift others down
   4645  23eb							; if x=4: don't do anything
   4646  23eb							; if x=3: swap 3 and 4
   4647  23eb							; if x=2: 2=3, 3=4, 4=2
   4648  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   4649  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   4650  23eb							; ldy SpriteGfxIndex,x
   4651  23eb				   swaploop
   4652  23eb		       e0 04		      cpx	#4
   4653  23ed		       f0 08		      beq	shiftdone
   4654  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   4655  23f1		       95 9d		      sta	SpriteGfxIndex,x
   4656  23f3		       e8		      inx
   4657  23f4		       4c eb f3 	      jmp	swaploop
   4658  23f7				   shiftdone
   4659  23f7							; sty SpriteGfxIndex,x
   4660  23f7		       60		      rts
   4661  23f8
   4662  23f8				  -	      ifconst	debugscore
   4663  23f8				  -debugcycles
   4664  23f8				  -	      ldx	#14
   4665  23f8				  -	      lda	INTIM	; display # cycles left in the score
   4666  23f8				  -
   4667  23f8				  -	      ifconst	mincycles
   4668  23f8				  -	      lda	mincycles
   4669  23f8				  -	      cmp	INTIM
   4670  23f8				  -	      lda	mincycles
   4671  23f8				  -	      bcc	nochange
   4672  23f8				  -	      lda	INTIM
   4673  23f8				  -	      sta	mincycles
   4674  23f8				  -nochange
   4675  23f8				  -	      endif
   4676  23f8				  -
   4677  23f8				  -			;   cmp #$2B
   4678  23f8				  -			;   bcs no_cycles_left
   4679  23f8				  -	      bmi	cycles_left
   4680  23f8				  -	      ldx	#64
   4681  23f8				  -	      eor	#$ff	;make negative
   4682  23f8				  -cycles_left
   4683  23f8				  -	      stx	scorecolor
   4684  23f8				  -	      and	#$7f	; clear sign bit
   4685  23f8				  -	      tax
   4686  23f8				  -	      lda	scorebcd,x
   4687  23f8				  -	      sta	score+2
   4688  23f8				  -	      lda	scorebcd1,x
   4689  23f8				  -	      sta	score+1
   4690  23f8				  -	      rts
   4691  23f8				  -scorebcd
   4692  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4693  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4694  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4695  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4696  23f8				  -scorebcd1
   4697  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4698  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4699  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4700  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4701  23f8					      endif
   4702  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4703  23f8
   4704  23f8				   start
   4705  23f8		       78		      sei
   4706  23f9		       d8		      cld
   4707  23fa		       a0 00		      ldy	#0
   4708  23fc		       a5 d0		      lda	$D0
   4709  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   4710  2400		       d0 07		      bne	MachineIs2600
   4711  2402		       a5 d1		      lda	$D1
   4712  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   4713  2406		       d0 01		      bne	MachineIs2600
   4714  2408		       88		      dey
   4715  2409				   MachineIs2600
   4716  2409		       a2 00		      ldx	#0
   4717  240b		       8a		      txa
   4718  240c				   clearmem
   4719  240c		       e8		      inx
   4720  240d		       9a		      txs
   4721  240e		       48		      pha
   4722  240f		       d0 fb		      bne	clearmem
   4723  2411		       84 cb		      sty	temp1
   4724  2413				  -	      ifnconst	multisprite
   4725  2413				  -	      ifconst	pfrowheight
   4726  2413				  -	      lda	#pfrowheight
   4727  2413				  -	      else
   4728  2413				  -	      ifconst	pfres
   4729  2413				  -	      lda	#(96/pfres)
   4730  2413				  -	      else
   4731  2413				  -	      lda	#8
   4732  2413				  -	      endif
   4733  2413				  -	      endif
   4734  2413				  -	      sta	playfieldpos
   4735  2413					      endif
   4736  2413		       a2 05		      ldx	#5
   4737  2415				   initscore
   4738  2415		       a9 74		      lda	#<scoretable
   4739  2417		       95 c5		      sta	scorepointers,x
   4740  2419		       ca		      dex
   4741  241a		       10 f9		      bpl	initscore
   4742  241c		       a9 01		      lda	#1
   4743  241e		       85 0a		      sta	CTRLPF
   4744  2420		       0d 84 02 	      ora	INTIM
   4745  2423		       85 d6		      sta	rand
   4746  2425
   4747  2425					      ifconst	multisprite
   4748  2425		       20 1f f0 	      jsr	multisprite_setup
   4749  2428					      endif
   4750  2428
   4751  2428				  -	      ifnconst	bankswitch
   4752  2428				  -	      jmp	game
   4753  2428					      else
   4754  2428		       a9 d0		      lda	#>(game-1)
   4755  242a		       48		      pha
   4756  242b		       a9 ff		      lda	#<(game-1)
   4757  242d		       48		      pha
   4758  242e		       48		      pha
   4759  242f		       48		      pha
   4760  2430		       a2 01		      ldx	#1
   4761  2432		       4c eb ff 	      jmp	BS_jsr
   4762  2435					      endif
   4763  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4764  2435
   4765  2435							;standard routines needed for pretty much all games
   4766  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   4767  2435							; repositioning code and score pointer setup moved to overscan
   4768  2435							; read switches, joysticks now compiler generated (more efficient)
   4769  2435
   4770  2435				   randomize
   4771  2435		       a5 d6		      lda	rand
   4772  2437		       4a		      lsr
   4773  2438				  -	      ifconst	rand16
   4774  2438				  -	      rol	rand16
   4775  2438					      endif
   4776  2438		       90 02		      bcc	noeor
   4777  243a		       49 b4		      eor	#$B4
   4778  243c				   noeor
   4779  243c		       85 d6		      sta	rand
   4780  243e				  -	      ifconst	rand16
   4781  243e				  -	      eor	rand16
   4782  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   4784  2441							;bB.asm
   4785  2441							; bB.asm file is split here
   4786  2441				   .L0359		;  asm
   4787  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_48x1_1
     10  2441					      draw_48x1_2
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_48x1_1
      1  2482		       00 01	   mk_48x1_on =	1
      2  2482		       00 01	   mk_48x1_1_on =	1
      3  2482		       20 9e f5 	      jsr	draw_bmp_48x1_1
      0  2485					      draw_48x1_2
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x1_2_on =	1
      3  2485		       20 f8 f5 	      jsr	draw_bmp_48x1_2
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 52 f6 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 18 f7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x1_1
      3  259e
      4  259e		       a9 00		      lda	#0
      5  25a0		       85 1b		      sta	GRP0
      6  25a2		       85 1c		      sta	GRP1
      7  25a4
      8  25a4		       a0 2f		      ldy	#(bmp_48x1_1_window-1)
      9  25a6
     10  25a6							;setup score pointers to point at my bitmap slices instead
     11  25a6		       a9 2c		      lda	#<bmp_48x1_1_00
     12  25a8		       18		      clc
     13  25a9		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  25ab				  -	      ifconst	bmp_48x1_1_index
     15  25ab				  -	      sec
     16  25ab				  -	      sbc	bmp_48x1_1_index
     17  25ab					      endif
     18  25ab		       85 c5		      sta	scorepointers+0
     19  25ad		       a9 f7		      lda	#>bmp_48x1_1_00
     20  25af		       85 c6		      sta	scorepointers+1
     21  25b1
     22  25b1
     23  25b1		       a9 5c		      lda	#<bmp_48x1_1_01
     24  25b3		       18		      clc
     25  25b4		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  25b6				  -	      ifconst	bmp_48x1_1_index
     27  25b6				  -	      sec
     28  25b6				  -	      sbc	bmp_48x1_1_index
     29  25b6					      endif
     30  25b6		       85 c7		      sta	scorepointers+2
     31  25b8		       a9 f7		      lda	#>bmp_48x1_1_01
     32  25ba		       85 c8		      sta	scorepointers+3
     33  25bc
     34  25bc
     35  25bc		       a9 8c		      lda	#<bmp_48x1_1_02
     36  25be		       18		      clc
     37  25bf		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  25c1				  -	      ifconst	bmp_48x1_1_index
     39  25c1				  -	      sec
     40  25c1				  -	      sbc	bmp_48x1_1_index
     41  25c1					      endif
     42  25c1		       85 c9		      sta	scorepointers+4
     43  25c3		       a9 f7		      lda	#>bmp_48x1_1_02
     44  25c5		       85 ca		      sta	scorepointers+5
     45  25c7
     46  25c7
     47  25c7		       a9 bc		      lda	#<bmp_48x1_1_03
     48  25c9		       18		      clc
     49  25ca		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  25cc				  -	      ifconst	bmp_48x1_1_index
     51  25cc				  -	      sec
     52  25cc				  -	      sbc	bmp_48x1_1_index
     53  25cc					      endif
     54  25cc		       85 cb		      sta	scorepointers+6
     55  25ce		       a9 f7		      lda	#>bmp_48x1_1_03
     56  25d0		       85 cc		      sta	scorepointers+7
     57  25d2
     58  25d2
     59  25d2		       a9 00		      lda	#<bmp_48x1_1_04
     60  25d4		       18		      clc
     61  25d5		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  25d7				  -	      ifconst	bmp_48x1_1_index
     63  25d7				  -	      sec
     64  25d7				  -	      sbc	bmp_48x1_1_index
     65  25d7					      endif
     66  25d7		       85 cd		      sta	scorepointers+8
     67  25d9		       a9 f8		      lda	#>bmp_48x1_1_04
     68  25db		       85 ce		      sta	scorepointers+9
     69  25dd
     70  25dd
     71  25dd		       a9 30		      lda	#<bmp_48x1_1_05
     72  25df		       18		      clc
     73  25e0		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  25e2				  -	      ifconst	bmp_48x1_1_index
     75  25e2				  -	      sec
     76  25e2				  -	      sbc	bmp_48x1_1_index
     77  25e2					      endif
     78  25e2		       85 cf		      sta	scorepointers+10
     79  25e4		       a9 f8		      lda	#>bmp_48x1_1_05
     80  25e6		       85 d0		      sta	scorepointers+11
     81  25e8
     82  25e8		       a9 01		      lda	#1	;single line kernel
     83  25ea		       85 bf		      sta	aux3
     84  25ec
     85  25ec		       ad 28 f7 	      lda	bmp_48x1_1_color
     86  25ef		       85 06		      sta	COLUP0	;3
     87  25f1		       85 07		      sta	COLUP1	;3
     88  25f3		       85 2b		      sta	HMCLR	;3
     89  25f5
     90  25f5
     91  25f5		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  25f8
------- FILE titlescreen/asm/titlescreen.asm
     76  25f8					      endif		;mk_48x1_1_on
     77  25f8
     78  25f8					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 3
      0  25f8					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  25f8
      2  25f8				   draw_bmp_48x1_2
      3  25f8
      4  25f8		       a9 00		      lda	#0
      5  25fa		       85 1b		      sta	GRP0
      6  25fc		       85 1c		      sta	GRP1
      7  25fe
      8  25fe		       a0 5f		      ldy	#(bmp_48x1_2_window-1)
      9  2600
     10  2600							;setup score pointers to point at my bitmap slices instead
     11  2600		       a9 61		      lda	#<bmp_48x1_2_00
     12  2602		       18		      clc
     13  2603		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     14  2605				  -	      ifconst	bmp_48x1_2_index
     15  2605				  -	      sec
     16  2605				  -	      sbc	bmp_48x1_2_index
     17  2605					      endif
     18  2605		       85 c5		      sta	scorepointers+0
     19  2607		       a9 f8		      lda	#>bmp_48x1_2_00
     20  2609		       85 c6		      sta	scorepointers+1
     21  260b
     22  260b
     23  260b		       a9 00		      lda	#<bmp_48x1_2_01
     24  260d		       18		      clc
     25  260e		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     26  2610				  -	      ifconst	bmp_48x1_2_index
     27  2610				  -	      sec
     28  2610				  -	      sbc	bmp_48x1_2_index
     29  2610					      endif
     30  2610		       85 c7		      sta	scorepointers+2
     31  2612		       a9 f9		      lda	#>bmp_48x1_2_01
     32  2614		       85 c8		      sta	scorepointers+3
     33  2616
     34  2616
     35  2616		       a9 60		      lda	#<bmp_48x1_2_02
     36  2618		       18		      clc
     37  2619		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     38  261b				  -	      ifconst	bmp_48x1_2_index
     39  261b				  -	      sec
     40  261b				  -	      sbc	bmp_48x1_2_index
     41  261b					      endif
     42  261b		       85 c9		      sta	scorepointers+4
     43  261d		       a9 f9		      lda	#>bmp_48x1_2_02
     44  261f		       85 ca		      sta	scorepointers+5
     45  2621
     46  2621
     47  2621		       a9 00		      lda	#<bmp_48x1_2_03
     48  2623		       18		      clc
     49  2624		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     50  2626				  -	      ifconst	bmp_48x1_2_index
     51  2626				  -	      sec
     52  2626				  -	      sbc	bmp_48x1_2_index
     53  2626					      endif
     54  2626		       85 cb		      sta	scorepointers+6
     55  2628		       a9 fa		      lda	#>bmp_48x1_2_03
     56  262a		       85 cc		      sta	scorepointers+7
     57  262c
     58  262c
     59  262c		       a9 60		      lda	#<bmp_48x1_2_04
     60  262e		       18		      clc
     61  262f		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2631				  -	      ifconst	bmp_48x1_2_index
     63  2631				  -	      sec
     64  2631				  -	      sbc	bmp_48x1_2_index
     65  2631					      endif
     66  2631		       85 cd		      sta	scorepointers+8
     67  2633		       a9 fa		      lda	#>bmp_48x1_2_04
     68  2635		       85 ce		      sta	scorepointers+9
     69  2637
     70  2637
     71  2637		       a9 00		      lda	#<bmp_48x1_2_05
     72  2639		       18		      clc
     73  263a		       69 00		      adc	#(#bmp_48x1_2_height-#bmp_48x1_2_window)
     74  263c				  -	      ifconst	bmp_48x1_2_index
     75  263c				  -	      sec
     76  263c				  -	      sbc	bmp_48x1_2_index
     77  263c					      endif
     78  263c		       85 cf		      sta	scorepointers+10
     79  263e		       a9 fb		      lda	#>bmp_48x1_2_05
     80  2640		       85 d0		      sta	scorepointers+11
     81  2642
     82  2642		       a9 01		      lda	#1	;single line kernel
     83  2644		       85 bf		      sta	aux3
     84  2646
     85  2646		       ad 60 f8 	      lda	bmp_48x1_2_color
     86  2649		       85 06		      sta	COLUP0	;3
     87  264b		       85 07		      sta	COLUP1	;3
     88  264d		       85 2b		      sta	HMCLR	;3
     89  264f
     90  264f
     91  264f		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  2652
------- FILE titlescreen/asm/titlescreen.asm
     80  2652					      endif		;mk_48x1_2_on
     81  2652
     82  2652				  -	      ifconst	mk_48x1_3_on
     83  2652				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2652					      endif		;mk_48x1_3_on
     85  2652
     86  2652				  -	      ifconst	mk_48x2_1_on
     87  2652				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  2652					      endif		;mk_48x2_1_on
     89  2652
     90  2652				  -	      ifconst	mk_48x2_2_on
     91  2652				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  2652					      endif		;mk_48x2_2_on
     93  2652
     94  2652				  -	      ifconst	mk_48x2_3_on
     95  2652				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  2652					      endif		;mk_48x2_3_on
     97  2652
     98  2652				  -	      ifconst	mk_96x2_1_on
     99  2652				  -	      include	"titlescreen/asm/96x2_1_kernel.asm"
    100  2652					      endif		;mk_96x2_1_on
    101  2652
    102  2652				  -	      ifconst	mk_96x2_2_on
    103  2652				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2652					      endif		;mk_96x2_2_on
    105  2652
    106  2652				  -	      ifconst	mk_96x2_3_on
    107  2652				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2652					      endif		;mk_96x2_3_on
    109  2652
    110  2652					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2652					      include	"titlescreen/asm/score_kernel.asm"
      1  2652							; The batari Basic score kernel
      2  2652							; This minikernel is not under the same license as the rest of the 
      3  2652							; titlescreen code. Refer to the bB license before you use this in
      4  2652							; a non-bB program.
      5  2652
      6  2652				   draw_score_display
      7  2652
      8  2652		       a7 d4		      lax	score+2
      9  2654		       20 08 f7 	      jsr	miniscorepointerset
     10  2657		       84 ca		      sty	scorepointers+5
     11  2659		       86 c7		      stx	scorepointers+2
     12  265b		       a7 d3		      lax	score+1
     13  265d		       20 08 f7 	      jsr	miniscorepointerset
     14  2660		       84 c9		      sty	scorepointers+4
     15  2662		       86 c6		      stx	scorepointers+1
     16  2664		       a7 d2		      lax	score
     17  2666		       20 08 f7 	      jsr	miniscorepointerset
     18  2669		       84 c8		      sty	scorepointers+3
     19  266b		       86 c5		      stx	scorepointers
     20  266d
     21  266d		       a5 c6		      lda	scorepointers+1
     22  266f		       85 cb		      sta	temp1
     23  2671
     24  2671		       a5 c8		      lda	scorepointers+3
     25  2673		       85 cd		      sta	temp3
     26  2675
     27  2675
     28  2675		       85 2b		      sta	HMCLR
     29  2677		       ba		      tsx
     30  2678		       86 f6		      stx	stack1
     31  267a							;ldx #$10
     32  267a		       a2 20		      ldx	#$20
     33  267c		       86 20		      stx	HMP0
     34  267e
     35  267e		       a2 00		      ldx	#0
     36  2680		       85 02		      sta	WSYNC
     37  2682		       86 1b		      STx	GRP0
     38  2684		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  2686
     40  2686		       a5 ca		      lda	scorepointers+5
     41  2688		       95 cf		      sta	temp5,x
     42  268a		       a9 fb		      lda	#>miniscoretable
     43  268c		       85 c6		      sta	scorepointers+1
     44  268e		       85 c8		      sta	scorepointers+3
     45  2690		       95 ca		      sta	scorepointers+5,x
     46  2692		       95 cc		      sta	temp2,x
     47  2694		       95 ce		      sta	temp4,x
     48  2696		       95 d0		      sta	temp6,x
     49  2698
     50  2698
     51  2698		       a0 07		      LDY	#7
     52  269a		       85 10		      STA	RESP0
     53  269c		       85 11		      STA	RESP1
     54  269e
     55  269e
     56  269e		       a9 03		      LDA	#$03
     57  26a0		       85 04		      STA	NUSIZ0
     58  26a2		       95 05		      STA	NUSIZ1,x
     59  26a4		       85 25		      STA	VDELP0
     60  26a6		       85 26		      STA	VDELP1
     61  26a8							;LDA #$20
     62  26a8		       a9 30		      LDA	#$30
     63  26aa		       85 21		      STA	HMP1
     64  26ac		       a5 d5		      LDA	scorecolor
     65  26ae		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  26b0				  -	      ifconst	score_kernel_fade
     67  26b0				  -	      and	score_kernel_fade
     68  26b0					      endif
     69  26b0
     70  26b0		       85 06		      STA	COLUP0
     71  26b2		       85 07		      STA	COLUP1
     72  26b4				  -	      ifconst	scorefade
     73  26b4				  -	      STA	stack2	; scorefade
     74  26b4					      endif
     75  26b4		       b1 c5		      lda	(scorepointers),y
     76  26b6		       85 1b		      sta	GRP0
     77  26b8		       b1 cd		      lda	(scorepointers+8),y
     78  26ba		       85 02		      sta	WSYNC
      0  26bc					      sleep	2
      1  26bc				   .CYCLES    SET	2
      2  26bc
      3  26bc				  -	      IF	.CYCLES < 2
      4  26bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26bc				  -	      ERR
      6  26bc					      ENDIF
      7  26bc
      8  26bc				  -	      IF	.CYCLES & 1
      9  26bc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26bc				  -	      nop	0
     11  26bc				  -	      ELSE
     12  26bc				  -	      bit	VSYNC
     13  26bc				  -	      ENDIF
     14  26bc				  -.CYCLES    SET	.CYCLES - 3
     15  26bc					      ENDIF
     16  26bc
     17  26bc					      REPEAT	.CYCLES / 2
     18  26bc		       ea		      nop
     19  26bd					      REPEND
     80  26bd		       4c cb f6 	      jmp	beginscoreloop
     81  26c0
     82  26c0				  -	      if	((<*)>$d4)
     83  26c0				  -	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  26c0					      endif
     85  26c0
     86  26c0				   scoreloop2
     87  26c0				  -	      ifconst	scorefade
     88  26c0				  -	      lda	stack2
     89  26c0				  -	      sta	COLUP0
     90  26c0				  -	      sta	COLUP1
     91  26c0					      else
      0  26c0					      sleep	9
      1  26c0				   .CYCLES    SET	9
      2  26c0
      3  26c0				  -	      IF	.CYCLES < 2
      4  26c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26c0				  -	      ERR
      6  26c0					      ENDIF
      7  26c0
      8  26c0					      IF	.CYCLES & 1
      9  26c0					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26c0		       04 00		      nop	0
     11  26c2				  -	      ELSE
     12  26c2				  -	      bit	VSYNC
     13  26c2					      ENDIF
     14  26c2				   .CYCLES    SET	.CYCLES - 3
     15  26c2					      ENDIF
     16  26c2
     17  26c2					      REPEAT	.CYCLES / 2
     18  26c2		       ea		      nop
     17  26c2					      REPEND
     18  26c3		       ea		      nop
     17  26c3					      REPEND
     18  26c4		       ea		      nop
     19  26c5					      REPEND
     93  26c5					      endif
     94  26c5		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  26c7		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  26c9		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  26cb							; cycle 0
     98  26cb				   beginscoreloop
     99  26cb		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  26cd		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  26cf		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  26d1		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  26d3		       9a		      txs
    104  26d4		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  26d6
    106  26d6				  -	      ifconst	scorefade
    107  26d6				  -	      dec	stack2
    108  26d6					      else
      0  26d6					      sleep	5
      1  26d6				   .CYCLES    SET	5
      2  26d6
      3  26d6				  -	      IF	.CYCLES < 2
      4  26d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d6				  -	      ERR
      6  26d6					      ENDIF
      7  26d6
      8  26d6					      IF	.CYCLES & 1
      9  26d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d6		       04 00		      nop	0
     11  26d8				  -	      ELSE
     12  26d8				  -	      bit	VSYNC
     13  26d8					      ENDIF
     14  26d8				   .CYCLES    SET	.CYCLES - 3
     15  26d8					      ENDIF
     16  26d8
     17  26d8					      REPEAT	.CYCLES / 2
     18  26d8		       ea		      nop
     19  26d9					      REPEND
    110  26d9					      endif
      0  26d9					      sleep	2
      1  26d9				   .CYCLES    SET	2
      2  26d9
      3  26d9				  -	      IF	.CYCLES < 2
      4  26d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d9				  -	      ERR
      6  26d9					      ENDIF
      7  26d9
      8  26d9				  -	      IF	.CYCLES & 1
      9  26d9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d9				  -	      nop	0
     11  26d9				  -	      ELSE
     12  26d9				  -	      bit	VSYNC
     13  26d9				  -	      ENDIF
     14  26d9				  -.CYCLES    SET	.CYCLES - 3
     15  26d9					      ENDIF
     16  26d9
     17  26d9					      REPEAT	.CYCLES / 2
     18  26d9		       ea		      nop
     19  26da					      REPEND
    112  26da
    113  26da		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  26dc		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  26de		       ba		      tsx
    116  26df		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  26e1		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  26e3
    119  26e3		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  26e5		       88		      dey
    121  26e6		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  26e8
    123  26e8
    124  26e8		       a6 f6		      ldx	stack1
    125  26ea		       9a		      txs
    126  26eb		       a4 cb		      ldy	temp1
    127  26ed		       84 c6		      sty	scorepointers+1
    128  26ef
    129  26ef		       a9 00		      LDA	#0
    130  26f1		       85 0e		      sta	PF1
    131  26f3		       85 1b		      STA	GRP0
    132  26f5		       85 1c		      STA	GRP1
    133  26f7		       85 25		      STA	VDELP0
    134  26f9		       85 26		      STA	VDELP1
    135  26fb		       85 04		      STA	NUSIZ0
    136  26fd		       85 05		      STA	NUSIZ1
    137  26ff
    138  26ff		       a4 cd		      ldy	temp3
    139  2701		       84 c8		      sty	scorepointers+3
    140  2703
    141  2703		       a4 cf		      ldy	temp5
    142  2705		       84 ca		      sty	scorepointers+5
    143  2707		       60		      rts
    144  2708
    145  2708				   miniscorepointerset
    146  2708		       29 0f		      and	#$0F
    147  270a		       0a		      asl
    148  270b		       0a		      asl
    149  270c		       0a		      asl
    150  270d		       69 60		      adc	#<miniscoretable
    151  270f		       a8		      tay
    152  2710		       8a		      txa
    153  2711		       29 f0		      and	#$F0
    154  2713		       4a		      lsr
    155  2714		       69 60		      adc	#<miniscoretable
    156  2716		       aa		      tax
    157  2717		       60		      rts
    158  2718
------- FILE titlescreen/asm/titlescreen.asm
    112  2718					      endif		;mk_score_on
    113  2718
    114  2718				  -	      ifconst	mk_gameselect_on
    115  2718				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2718					      endif		;mk_gameselect_on
    117  2718
    118  2718				   PFWAIT
    119  2718		       ad 84 02 	      lda	INTIM
    120  271b		       d0 fb		      bne	PFWAIT
    121  271d
    122  271d				   OVERSCAN
    123  271d							;lda #35+128 
    124  271d
    125  271d					      ifnconst	overscan_time
    126  271d		       a9 a3		      lda	#35+128
    127  271f				  -	      else
    128  271f				  -	      lda	#overscan_time+128-3-1
    129  271f					      endif
    130  271f
    131  271f
    132  271f		       8d 96 02 	      sta	TIM64T
    133  2722		       a9 c2		      lda	#%11000010
    134  2724		       85 02		      sta	WSYNC
    135  2726		       85 01		      sta	VBLANK
      0  2728					      RETURN
      1  2728				  -	      ifnconst	bankswitch
      2  2728				  -	      rts
      3  2728					      else
      4  2728		       4c dd ff 	      jmp	BS_return
      5  272b					      endif
    137  272b
    138  272b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  272b					      include	"titlescreen/48x1_1_image.asm"
      1  272b
      2  272b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  272b							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  272b							; *** color.
      5  272b
      6  272b							;*** The height of the displayed data...
      7  272b		       00 30	   bmp_48x1_1_window =	48
      8  272b
      9  272b							;*** The height of the bitmap data. This can be larger than
     10  272b							;*** the displayed data height, if you are scrolling or animating
     11  272b							;*** the data...
     12  272b		       00 30	   bmp_48x1_1_height =	48
     13  272b
     14  272b				  -	      ifnconst	bmp_48x1_1_color
     15  272b				  -bmp_48x1_1_color
     16  272b					      endif
     17  272b							; *** this is the bitmap color. If you want to change it in a 
     18  272b							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  272b		       0c		      .byte.b	$0c
     20  272c
     21  272c
     22  272c				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  272c				  -	      align	256
     24  272c					      endif
     25  272c
     26  272c				   bmp_48x1_1_00
     27  272c
     28  272c		       00		      BYTE.b	%00000000
     29  272d		       00		      BYTE.b	%00000000
     30  272e		       7f		      BYTE.b	%01111111
     31  272f		       00		      BYTE.b	%00000000
     32  2730		       3c		      BYTE.b	%00111100
     33  2731		       3c		      BYTE.b	%00111100
     34  2732		       3c		      BYTE.b	%00111100
     35  2733		       4e		      BYTE.b	%01001110
     36  2734		       4e		      BYTE.b	%01001110
     37  2735		       0e		      BYTE.b	%00001110
     38  2736		       0e		      BYTE.b	%00001110
     39  2737		       0e		      BYTE.b	%00001110
     40  2738		       3c		      BYTE.b	%00111100
     41  2739		       3c		      BYTE.b	%00111100
     42  273a		       60		      BYTE.b	%01100000
     43  273b		       60		      BYTE.b	%01100000
     44  273c		       60		      BYTE.b	%01100000
     45  273d		       3c		      BYTE.b	%00111100
     46  273e		       3c		      BYTE.b	%00111100
     47  273f		       00		      BYTE.b	%00000000
     48  2740		       00		      BYTE.b	%00000000
     49  2741		       00		      BYTE.b	%00000000
     50  2742		       00		      BYTE.b	%00000000
     51  2743		       00		      BYTE.b	%00000000
     52  2744		       00		      BYTE.b	%00000000
     53  2745		       00		      BYTE.b	%00000000
     54  2746		       00		      BYTE.b	%00000000
     55  2747		       00		      BYTE.b	%00000000
     56  2748		       00		      BYTE.b	%00000000
     57  2749		       00		      BYTE.b	%00000000
     58  274a		       00		      BYTE.b	%00000000
     59  274b		       00		      BYTE.b	%00000000
     60  274c		       01		      BYTE.b	%00000001
     61  274d		       01		      BYTE.b	%00000001
     62  274e		       03		      BYTE.b	%00000011
     63  274f		       03		      BYTE.b	%00000011
     64  2750		       03		      BYTE.b	%00000011
     65  2751		       07		      BYTE.b	%00000111
     66  2752		       0f		      BYTE.b	%00001111
     67  2753		       0f		      BYTE.b	%00001111
     68  2754		       0f		      BYTE.b	%00001111
     69  2755		       1f		      BYTE.b	%00011111
     70  2756		       3f		      BYTE.b	%00111111
     71  2757		       3f		      BYTE.b	%00111111
     72  2758		       7f		      BYTE.b	%01111111
     73  2759		       7f		      BYTE.b	%01111111
     74  275a		       00		      BYTE.b	%00000000
     75  275b		       00		      BYTE.b	%00000000
     76  275c
     77  275c				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     78  275c				  -	      align	256
     79  275c					      endif
     80  275c
     81  275c				   bmp_48x1_1_01
     82  275c
     83  275c		       00		      BYTE.b	%00000000
     84  275d		       00		      BYTE.b	%00000000
     85  275e		       ff		      BYTE.b	%11111111
     86  275f		       00		      BYTE.b	%00000000
     87  2760		       4e		      BYTE.b	%01001110
     88  2761		       4e		      BYTE.b	%01001110
     89  2762		       4e		      BYTE.b	%01001110
     90  2763		       4e		      BYTE.b	%01001110
     91  2764		       4e		      BYTE.b	%01001110
     92  2765		       7e		      BYTE.b	%01111110
     93  2766		       7e		      BYTE.b	%01111110
     94  2767		       7e		      BYTE.b	%01111110
     95  2768		       4e		      BYTE.b	%01001110
     96  2769		       4e		      BYTE.b	%01001110
     97  276a		       4e		      BYTE.b	%01001110
     98  276b		       4e		      BYTE.b	%01001110
     99  276c		       4e		      BYTE.b	%01001110
    100  276d		       3c		      BYTE.b	%00111100
    101  276e		       3c		      BYTE.b	%00111100
    102  276f		       00		      BYTE.b	%00000000
    103  2770		       00		      BYTE.b	%00000000
    104  2771		       00		      BYTE.b	%00000000
    105  2772		       00		      BYTE.b	%00000000
    106  2773		       00		      BYTE.b	%00000000
    107  2774		       00		      BYTE.b	%00000000
    108  2775		       00		      BYTE.b	%00000000
    109  2776		       00		      BYTE.b	%00000000
    110  2777		       30		      BYTE.b	%00110000
    111  2778		       73		      BYTE.b	%01110011
    112  2779		       73		      BYTE.b	%01110011
    113  277a		       73		      BYTE.b	%01110011
    114  277b		       f4		      BYTE.b	%11110100
    115  277c		       f4		      BYTE.b	%11110100
    116  277d		       f0		      BYTE.b	%11110000
    117  277e		       f0		      BYTE.b	%11110000
    118  277f		       f0		      BYTE.b	%11110000
    119  2780		       f3		      BYTE.b	%11110011
    120  2781		       f3		      BYTE.b	%11110011
    121  2782		       f6		      BYTE.b	%11110110
    122  2783		       f6		      BYTE.b	%11110110
    123  2784		       f6		      BYTE.b	%11110110
    124  2785		       f3		      BYTE.b	%11110011
    125  2786		       f3		      BYTE.b	%11110011
    126  2787		       f0		      BYTE.b	%11110000
    127  2788		       f0		      BYTE.b	%11110000
    128  2789		       f0		      BYTE.b	%11110000
    129  278a		       00		      BYTE.b	%00000000
    130  278b		       00		      BYTE.b	%00000000
    131  278c
    132  278c				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    133  278c				  -	      align	256
    134  278c					      endif
    135  278c
    136  278c				   bmp_48x1_1_02
    137  278c
    138  278c		       00		      BYTE.b	%00000000
    139  278d		       00		      BYTE.b	%00000000
    140  278e		       ff		      BYTE.b	%11111111
    141  278f		       00		      BYTE.b	%00000000
    142  2790		       18		      BYTE.b	%00011000
    143  2791		       18		      BYTE.b	%00011000
    144  2792		       18		      BYTE.b	%00011000
    145  2793		       2c		      BYTE.b	%00101100
    146  2794		       2c		      BYTE.b	%00101100
    147  2795		       46		      BYTE.b	%01000110
    148  2796		       46		      BYTE.b	%01000110
    149  2797		       46		      BYTE.b	%01000110
    150  2798		       46		      BYTE.b	%01000110
    151  2799		       46		      BYTE.b	%01000110
    152  279a		       46		      BYTE.b	%01000110
    153  279b		       46		      BYTE.b	%01000110
    154  279c		       46		      BYTE.b	%01000110
    155  279d		       46		      BYTE.b	%01000110
    156  279e		       46		      BYTE.b	%01000110
    157  279f		       00		      BYTE.b	%00000000
    158  27a0		       00		      BYTE.b	%00000000
    159  27a1		       00		      BYTE.b	%00000000
    160  27a2		       00		      BYTE.b	%00000000
    161  27a3		       00		      BYTE.b	%00000000
    162  27a4		       00		      BYTE.b	%00000000
    163  27a5		       00		      BYTE.b	%00000000
    164  27a6		       00		      BYTE.b	%00000000
    165  27a7		       00		      BYTE.b	%00000000
    166  27a8		       c6		      BYTE.b	%11000110
    167  27a9		       c6		      BYTE.b	%11000110
    168  27aa		       c6		      BYTE.b	%11000110
    169  27ab		       e6		      BYTE.b	%11100110
    170  27ac		       e6		      BYTE.b	%11100110
    171  27ad		       e7		      BYTE.b	%11100111
    172  27ae		       e7		      BYTE.b	%11100111
    173  27af		       e7		      BYTE.b	%11100111
    174  27b0		       c7		      BYTE.b	%11000111
    175  27b1		       c7		      BYTE.b	%11000111
    176  27b2		       06		      BYTE.b	%00000110
    177  27b3		       06		      BYTE.b	%00000110
    178  27b4		       06		      BYTE.b	%00000110
    179  27b5		       c6		      BYTE.b	%11000110
    180  27b6		       c6		      BYTE.b	%11000110
    181  27b7		       00		      BYTE.b	%00000000
    182  27b8		       00		      BYTE.b	%00000000
    183  27b9		       00		      BYTE.b	%00000000
    184  27ba		       00		      BYTE.b	%00000000
    185  27bb		       00		      BYTE.b	%00000000
    186  27bc
    187  27bc				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    188  27bc				  -	      align	256
    189  27bc					      endif
    190  27bc
    191  27bc				   bmp_48x1_1_03
    192  27bc
    193  27bc		       00		      BYTE.b	%00000000
    194  27bd		       00		      BYTE.b	%00000000
    195  27be		       ff		      BYTE.b	%11111111
    196  27bf		       00		      BYTE.b	%00000000
    197  27c0		       3c		      BYTE.b	%00111100
    198  27c1		       3c		      BYTE.b	%00111100
    199  27c2		       3c		      BYTE.b	%00111100
    200  27c3		       18		      BYTE.b	%00011000
    201  27c4		       18		      BYTE.b	%00011000
    202  27c5		       18		      BYTE.b	%00011000
    203  27c6		       18		      BYTE.b	%00011000
    204  27c7		       18		      BYTE.b	%00011000
    205  27c8		       18		      BYTE.b	%00011000
    206  27c9		       18		      BYTE.b	%00011000
    207  27ca		       18		      BYTE.b	%00011000
    208  27cb		       18		      BYTE.b	%00011000
    209  27cc		       18		      BYTE.b	%00011000
    210  27cd		       3c		      BYTE.b	%00111100
    211  27ce		       3c		      BYTE.b	%00111100
    212  27cf		       00		      BYTE.b	%00000000
    213  27d0		       00		      BYTE.b	%00000000
    214  27d1		       00		      BYTE.b	%00000000
    215  27d2		       00		      BYTE.b	%00000000
    216  27d3		       00		      BYTE.b	%00000000
    217  27d4		       00		      BYTE.b	%00000000
    218  27d5		       00		      BYTE.b	%00000000
    219  27d6		       00		      BYTE.b	%00000000
    220  27d7		       00		      BYTE.b	%00000000
    221  27d8		       61		      BYTE.b	%01100001
    222  27d9		       61		      BYTE.b	%01100001
    223  27da		       61		      BYTE.b	%01100001
    224  27db		       c1		      BYTE.b	%11000001
    225  27dc		       c1		      BYTE.b	%11000001
    226  27dd		       81		      BYTE.b	%10000001
    227  27de		       81		      BYTE.b	%10000001
    228  27df		       81		      BYTE.b	%10000001
    229  27e0		       83		      BYTE.b	%10000011
    230  27e1		       83		      BYTE.b	%10000011
    231  27e2		       c6		      BYTE.b	%11000110
    232  27e3		       c6		      BYTE.b	%11000110
    233  27e4		       c6		      BYTE.b	%11000110
    234  27e5		       66		      BYTE.b	%01100110
    235  27e6		       66		      BYTE.b	%01100110
    236  27e7		       00		      BYTE.b	%00000000
    237  27e8		       00		      BYTE.b	%00000000
    238  27e9		       00		      BYTE.b	%00000000
    239  27ea		       00		      BYTE.b	%00000000
    240  27eb		       00		      BYTE.b	%00000000
    241  27ec
    242  27ec					      if	>. != >[.+(bmp_48x1_1_height)]
    243  2800		       00 00 00 00*	      align	256
    244  2800					      endif
    245  2800
    246  2800				   bmp_48x1_1_04
    247  2800
    248  2800		       00		      BYTE.b	%00000000
    249  2801		       00		      BYTE.b	%00000000
    250  2802		       ff		      BYTE.b	%11111111
    251  2803		       00		      BYTE.b	%00000000
    252  2804		       3c		      BYTE.b	%00111100
    253  2805		       3c		      BYTE.b	%00111100
    254  2806		       3c		      BYTE.b	%00111100
    255  2807		       66		      BYTE.b	%01100110
    256  2808		       66		      BYTE.b	%01100110
    257  2809		       66		      BYTE.b	%01100110
    258  280a		       66		      BYTE.b	%01100110
    259  280b		       66		      BYTE.b	%01100110
    260  280c		       66		      BYTE.b	%01100110
    261  280d		       66		      BYTE.b	%01100110
    262  280e		       66		      BYTE.b	%01100110
    263  280f		       66		      BYTE.b	%01100110
    264  2810		       66		      BYTE.b	%01100110
    265  2811		       3c		      BYTE.b	%00111100
    266  2812		       3c		      BYTE.b	%00111100
    267  2813		       00		      BYTE.b	%00000000
    268  2814		       00		      BYTE.b	%00000000
    269  2815		       00		      BYTE.b	%00000000
    270  2816		       00		      BYTE.b	%00000000
    271  2817		       00		      BYTE.b	%00000000
    272  2818		       00		      BYTE.b	%00000000
    273  2819		       00		      BYTE.b	%00000000
    274  281a		       00		      BYTE.b	%00000000
    275  281b		       0c		      BYTE.b	%00001100
    276  281c		       8e		      BYTE.b	%10001110
    277  281d		       8e		      BYTE.b	%10001110
    278  281e		       8e		      BYTE.b	%10001110
    279  281f		       8f		      BYTE.b	%10001111
    280  2820		       8f		      BYTE.b	%10001111
    281  2821		       8f		      BYTE.b	%10001111
    282  2822		       8f		      BYTE.b	%10001111
    283  2823		       8f		      BYTE.b	%10001111
    284  2824		       cf		      BYTE.b	%11001111
    285  2825		       cf		      BYTE.b	%11001111
    286  2826		       6f		      BYTE.b	%01101111
    287  2827		       6f		      BYTE.b	%01101111
    288  2828		       6f		      BYTE.b	%01101111
    289  2829		       6f		      BYTE.b	%01101111
    290  282a		       6f		      BYTE.b	%01101111
    291  282b		       0f		      BYTE.b	%00001111
    292  282c		       0f		      BYTE.b	%00001111
    293  282d		       0f		      BYTE.b	%00001111
    294  282e		       00		      BYTE.b	%00000000
    295  282f		       00		      BYTE.b	%00000000
    296  2830
    297  2830				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    298  2830				  -	      align	256
    299  2830					      endif
    300  2830
    301  2830				   bmp_48x1_1_05
    302  2830
    303  2830		       00		      BYTE.b	%00000000
    304  2831		       00		      BYTE.b	%00000000
    305  2832		       fe		      BYTE.b	%11111110
    306  2833		       00		      BYTE.b	%00000000
    307  2834		       66		      BYTE.b	%01100110
    308  2835		       66		      BYTE.b	%01100110
    309  2836		       66		      BYTE.b	%01100110
    310  2837		       68		      BYTE.b	%01101000
    311  2838		       68		      BYTE.b	%01101000
    312  2839		       7c		      BYTE.b	%01111100
    313  283a		       7c		      BYTE.b	%01111100
    314  283b		       7c		      BYTE.b	%01111100
    315  283c		       66		      BYTE.b	%01100110
    316  283d		       66		      BYTE.b	%01100110
    317  283e		       66		      BYTE.b	%01100110
    318  283f		       66		      BYTE.b	%01100110
    319  2840		       66		      BYTE.b	%01100110
    320  2841		       7c		      BYTE.b	%01111100
    321  2842		       7c		      BYTE.b	%01111100
    322  2843		       00		      BYTE.b	%00000000
    323  2844		       00		      BYTE.b	%00000000
    324  2845		       00		      BYTE.b	%00000000
    325  2846		       00		      BYTE.b	%00000000
    326  2847		       00		      BYTE.b	%00000000
    327  2848		       00		      BYTE.b	%00000000
    328  2849		       00		      BYTE.b	%00000000
    329  284a		       00		      BYTE.b	%00000000
    330  284b		       00		      BYTE.b	%00000000
    331  284c		       00		      BYTE.b	%00000000
    332  284d		       00		      BYTE.b	%00000000
    333  284e		       00		      BYTE.b	%00000000
    334  284f		       00		      BYTE.b	%00000000
    335  2850		       00		      BYTE.b	%00000000
    336  2851		       80		      BYTE.b	%10000000
    337  2852		       c0		      BYTE.b	%11000000
    338  2853		       c0		      BYTE.b	%11000000
    339  2854		       e0		      BYTE.b	%11100000
    340  2855		       e0		      BYTE.b	%11100000
    341  2856		       f0		      BYTE.b	%11110000
    342  2857		       f0		      BYTE.b	%11110000
    343  2858		       f0		      BYTE.b	%11110000
    344  2859		       f8		      BYTE.b	%11111000
    345  285a		       fc		      BYTE.b	%11111100
    346  285b		       fc		      BYTE.b	%11111100
    347  285c		       fc		      BYTE.b	%11111100
    348  285d		       fc		      BYTE.b	%11111100
    349  285e		       00		      BYTE.b	%00000000
    350  285f		       00		      BYTE.b	%00000000
    351  2860
------- FILE titlescreen/asm/titlescreen.asm
    140  2860					      endif
    141  2860					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 3
      0  2860					      include	"titlescreen/48x1_2_image.asm"
      1  2860
      2  2860							; *** if you want to modify the bitmap color on the fly, just dim a
      3  2860							; *** variable in bB called 'bmp_48x1_2_color' , and use it to set the
      4  2860							; *** color.
      5  2860
      6  2860							;*** The height of the displayed data...
      7  2860		       00 60	   bmp_48x1_2_window =	96
      8  2860
      9  2860							;*** The height of the bitmap data. This can be larger than
     10  2860							;*** the displayed data height, if you are scrolling or animating
     11  2860							;*** the data...
     12  2860		       00 60	   bmp_48x1_2_height =	96
     13  2860
     14  2860				  -	      ifnconst	bmp_48x1_2_color
     15  2860				  -bmp_48x1_2_color
     16  2860					      endif
     17  2860							; *** this is the bitmap color. If you want to change it in a 
     18  2860							; *** variable instead, dim one in bB called bmp_48x1_2_color
     19  2860		       0c		      .byte.b	$0c
     20  2861
     21  2861
     22  2861				  -	      if	>. != >[.+bmp_48x1_2_height]
     23  2861				  -	      align	256
     24  2861					      endif
     25  2861
     26  2861				   bmp_48x1_2_00
     27  2861
     28  2861		       00		      BYTE.b	%00000000
     29  2862		       00		      BYTE.b	%00000000
     30  2863		       00		      BYTE.b	%00000000
     31  2864		       00		      BYTE.b	%00000000
     32  2865		       00		      BYTE.b	%00000000
     33  2866		       00		      BYTE.b	%00000000
     34  2867		       03		      BYTE.b	%00000011
     35  2868		       03		      BYTE.b	%00000011
     36  2869		       03		      BYTE.b	%00000011
     37  286a		       03		      BYTE.b	%00000011
     38  286b		       03		      BYTE.b	%00000011
     39  286c		       03		      BYTE.b	%00000011
     40  286d		       03		      BYTE.b	%00000011
     41  286e		       03		      BYTE.b	%00000011
     42  286f		       03		      BYTE.b	%00000011
     43  2870		       03		      BYTE.b	%00000011
     44  2871		       03		      BYTE.b	%00000011
     45  2872		       03		      BYTE.b	%00000011
     46  2873		       03		      BYTE.b	%00000011
     47  2874		       03		      BYTE.b	%00000011
     48  2875		       ff		      BYTE.b	%11111111
     49  2876		       ff		      BYTE.b	%11111111
     50  2877		       ff		      BYTE.b	%11111111
     51  2878		       ff		      BYTE.b	%11111111
     52  2879		       ff		      BYTE.b	%11111111
     53  287a		       ff		      BYTE.b	%11111111
     54  287b		       ff		      BYTE.b	%11111111
     55  287c		       ff		      BYTE.b	%11111111
     56  287d		       ff		      BYTE.b	%11111111
     57  287e		       ff		      BYTE.b	%11111111
     58  287f		       fc		      BYTE.b	%11111100
     59  2880		       fc		      BYTE.b	%11111100
     60  2881		       fc		      BYTE.b	%11111100
     61  2882		       fc		      BYTE.b	%11111100
     62  2883		       fc		      BYTE.b	%11111100
     63  2884		       fc		      BYTE.b	%11111100
     64  2885		       fc		      BYTE.b	%11111100
     65  2886		       fc		      BYTE.b	%11111100
     66  2887		       fc		      BYTE.b	%11111100
     67  2888		       fc		      BYTE.b	%11111100
     68  2889		       fc		      BYTE.b	%11111100
     69  288a		       fc		      BYTE.b	%11111100
     70  288b		       fc		      BYTE.b	%11111100
     71  288c		       fc		      BYTE.b	%11111100
     72  288d		       fc		      BYTE.b	%11111100
     73  288e		       fc		      BYTE.b	%11111100
     74  288f		       fc		      BYTE.b	%11111100
     75  2890		       fc		      BYTE.b	%11111100
     76  2891		       fc		      BYTE.b	%11111100
     77  2892		       fc		      BYTE.b	%11111100
     78  2893		       fc		      BYTE.b	%11111100
     79  2894		       fc		      BYTE.b	%11111100
     80  2895		       fc		      BYTE.b	%11111100
     81  2896		       fc		      BYTE.b	%11111100
     82  2897		       fc		      BYTE.b	%11111100
     83  2898		       fc		      BYTE.b	%11111100
     84  2899		       00		      BYTE.b	%00000000
     85  289a		       00		      BYTE.b	%00000000
     86  289b		       00		      BYTE.b	%00000000
     87  289c		       00		      BYTE.b	%00000000
     88  289d		       00		      BYTE.b	%00000000
     89  289e		       00		      BYTE.b	%00000000
     90  289f		       00		      BYTE.b	%00000000
     91  28a0		       00		      BYTE.b	%00000000
     92  28a1		       00		      BYTE.b	%00000000
     93  28a2		       00		      BYTE.b	%00000000
     94  28a3		       00		      BYTE.b	%00000000
     95  28a4		       00		      BYTE.b	%00000000
     96  28a5		       00		      BYTE.b	%00000000
     97  28a6		       00		      BYTE.b	%00000000
     98  28a7		       00		      BYTE.b	%00000000
     99  28a8		       00		      BYTE.b	%00000000
    100  28a9		       00		      BYTE.b	%00000000
    101  28aa		       00		      BYTE.b	%00000000
    102  28ab		       00		      BYTE.b	%00000000
    103  28ac		       00		      BYTE.b	%00000000
    104  28ad		       00		      BYTE.b	%00000000
    105  28ae		       00		      BYTE.b	%00000000
    106  28af		       00		      BYTE.b	%00000000
    107  28b0		       00		      BYTE.b	%00000000
    108  28b1		       00		      BYTE.b	%00000000
    109  28b2		       00		      BYTE.b	%00000000
    110  28b3		       00		      BYTE.b	%00000000
    111  28b4		       00		      BYTE.b	%00000000
    112  28b5		       00		      BYTE.b	%00000000
    113  28b6		       00		      BYTE.b	%00000000
    114  28b7		       00		      BYTE.b	%00000000
    115  28b8		       00		      BYTE.b	%00000000
    116  28b9		       00		      BYTE.b	%00000000
    117  28ba		       00		      BYTE.b	%00000000
    118  28bb		       00		      BYTE.b	%00000000
    119  28bc		       00		      BYTE.b	%00000000
    120  28bd		       00		      BYTE.b	%00000000
    121  28be		       00		      BYTE.b	%00000000
    122  28bf		       00		      BYTE.b	%00000000
    123  28c0		       00		      BYTE.b	%00000000
    124  28c1
    125  28c1					      if	>. != >[.+(bmp_48x1_2_height)]
    126  2900		       00 00 00 00*	      align	256
    127  2900					      endif
    128  2900
    129  2900				   bmp_48x1_2_01
    130  2900
    131  2900		       00		      BYTE.b	%00000000
    132  2901		       00		      BYTE.b	%00000000
    133  2902		       00		      BYTE.b	%00000000
    134  2903		       00		      BYTE.b	%00000000
    135  2904		       00		      BYTE.b	%00000000
    136  2905		       00		      BYTE.b	%00000000
    137  2906		       ff		      BYTE.b	%11111111
    138  2907		       ff		      BYTE.b	%11111111
    139  2908		       ff		      BYTE.b	%11111111
    140  2909		       ff		      BYTE.b	%11111111
    141  290a		       ff		      BYTE.b	%11111111
    142  290b		       ff		      BYTE.b	%11111111
    143  290c		       ff		      BYTE.b	%11111111
    144  290d		       ff		      BYTE.b	%11111111
    145  290e		       ff		      BYTE.b	%11111111
    146  290f		       ff		      BYTE.b	%11111111
    147  2910		       ff		      BYTE.b	%11111111
    148  2911		       ff		      BYTE.b	%11111111
    149  2912		       ff		      BYTE.b	%11111111
    150  2913		       ff		      BYTE.b	%11111111
    151  2914		       ff		      BYTE.b	%11111111
    152  2915		       ff		      BYTE.b	%11111111
    153  2916		       ff		      BYTE.b	%11111111
    154  2917		       ff		      BYTE.b	%11111111
    155  2918		       ff		      BYTE.b	%11111111
    156  2919		       ff		      BYTE.b	%11111111
    157  291a		       ff		      BYTE.b	%11111111
    158  291b		       ff		      BYTE.b	%11111111
    159  291c		       ff		      BYTE.b	%11111111
    160  291d		       ff		      BYTE.b	%11111111
    161  291e		       0f		      BYTE.b	%00001111
    162  291f		       0f		      BYTE.b	%00001111
    163  2920		       0f		      BYTE.b	%00001111
    164  2921		       0f		      BYTE.b	%00001111
    165  2922		       0f		      BYTE.b	%00001111
    166  2923		       0f		      BYTE.b	%00001111
    167  2924		       0f		      BYTE.b	%00001111
    168  2925		       0f		      BYTE.b	%00001111
    169  2926		       0f		      BYTE.b	%00001111
    170  2927		       0f		      BYTE.b	%00001111
    171  2928		       0f		      BYTE.b	%00001111
    172  2929		       0f		      BYTE.b	%00001111
    173  292a		       0f		      BYTE.b	%00001111
    174  292b		       0f		      BYTE.b	%00001111
    175  292c		       0f		      BYTE.b	%00001111
    176  292d		       0f		      BYTE.b	%00001111
    177  292e		       0f		      BYTE.b	%00001111
    178  292f		       0f		      BYTE.b	%00001111
    179  2930		       0f		      BYTE.b	%00001111
    180  2931		       0f		      BYTE.b	%00001111
    181  2932		       0f		      BYTE.b	%00001111
    182  2933		       0f		      BYTE.b	%00001111
    183  2934		       0f		      BYTE.b	%00001111
    184  2935		       0f		      BYTE.b	%00001111
    185  2936		       0f		      BYTE.b	%00001111
    186  2937		       0f		      BYTE.b	%00001111
    187  2938		       0f		      BYTE.b	%00001111
    188  2939		       0f		      BYTE.b	%00001111
    189  293a		       0f		      BYTE.b	%00001111
    190  293b		       0f		      BYTE.b	%00001111
    191  293c		       0f		      BYTE.b	%00001111
    192  293d		       0f		      BYTE.b	%00001111
    193  293e		       0f		      BYTE.b	%00001111
    194  293f		       0f		      BYTE.b	%00001111
    195  2940		       0f		      BYTE.b	%00001111
    196  2941		       0f		      BYTE.b	%00001111
    197  2942		       0f		      BYTE.b	%00001111
    198  2943		       0f		      BYTE.b	%00001111
    199  2944		       00		      BYTE.b	%00000000
    200  2945		       00		      BYTE.b	%00000000
    201  2946		       00		      BYTE.b	%00000000
    202  2947		       00		      BYTE.b	%00000000
    203  2948		       00		      BYTE.b	%00000000
    204  2949		       00		      BYTE.b	%00000000
    205  294a		       00		      BYTE.b	%00000000
    206  294b		       00		      BYTE.b	%00000000
    207  294c		       00		      BYTE.b	%00000000
    208  294d		       00		      BYTE.b	%00000000
    209  294e		       00		      BYTE.b	%00000000
    210  294f		       00		      BYTE.b	%00000000
    211  2950		       00		      BYTE.b	%00000000
    212  2951		       00		      BYTE.b	%00000000
    213  2952		       00		      BYTE.b	%00000000
    214  2953		       00		      BYTE.b	%00000000
    215  2954		       00		      BYTE.b	%00000000
    216  2955		       00		      BYTE.b	%00000000
    217  2956		       00		      BYTE.b	%00000000
    218  2957		       00		      BYTE.b	%00000000
    219  2958		       00		      BYTE.b	%00000000
    220  2959		       00		      BYTE.b	%00000000
    221  295a		       00		      BYTE.b	%00000000
    222  295b		       00		      BYTE.b	%00000000
    223  295c		       00		      BYTE.b	%00000000
    224  295d		       00		      BYTE.b	%00000000
    225  295e		       00		      BYTE.b	%00000000
    226  295f		       00		      BYTE.b	%00000000
    227  2960
    228  2960				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    229  2960				  -	      align	256
    230  2960					      endif
    231  2960
    232  2960				   bmp_48x1_2_02
    233  2960
    234  2960		       00		      BYTE.b	%00000000
    235  2961		       00		      BYTE.b	%00000000
    236  2962		       00		      BYTE.b	%00000000
    237  2963		       00		      BYTE.b	%00000000
    238  2964		       00		      BYTE.b	%00000000
    239  2965		       00		      BYTE.b	%00000000
    240  2966		       c0		      BYTE.b	%11000000
    241  2967		       c0		      BYTE.b	%11000000
    242  2968		       c0		      BYTE.b	%11000000
    243  2969		       c0		      BYTE.b	%11000000
    244  296a		       c0		      BYTE.b	%11000000
    245  296b		       c0		      BYTE.b	%11000000
    246  296c		       c0		      BYTE.b	%11000000
    247  296d		       c0		      BYTE.b	%11000000
    248  296e		       c0		      BYTE.b	%11000000
    249  296f		       c0		      BYTE.b	%11000000
    250  2970		       c0		      BYTE.b	%11000000
    251  2971		       c0		      BYTE.b	%11000000
    252  2972		       c0		      BYTE.b	%11000000
    253  2973		       c0		      BYTE.b	%11000000
    254  2974		       ff		      BYTE.b	%11111111
    255  2975		       ff		      BYTE.b	%11111111
    256  2976		       ff		      BYTE.b	%11111111
    257  2977		       ff		      BYTE.b	%11111111
    258  2978		       ff		      BYTE.b	%11111111
    259  2979		       ff		      BYTE.b	%11111111
    260  297a		       ff		      BYTE.b	%11111111
    261  297b		       ff		      BYTE.b	%11111111
    262  297c		       ff		      BYTE.b	%11111111
    263  297d		       ff		      BYTE.b	%11111111
    264  297e		       ff		      BYTE.b	%11111111
    265  297f		       ff		      BYTE.b	%11111111
    266  2980		       ff		      BYTE.b	%11111111
    267  2981		       ff		      BYTE.b	%11111111
    268  2982		       ff		      BYTE.b	%11111111
    269  2983		       ff		      BYTE.b	%11111111
    270  2984		       ff		      BYTE.b	%11111111
    271  2985		       ff		      BYTE.b	%11111111
    272  2986		       ff		      BYTE.b	%11111111
    273  2987		       ff		      BYTE.b	%11111111
    274  2988		       ff		      BYTE.b	%11111111
    275  2989		       ff		      BYTE.b	%11111111
    276  298a		       c0		      BYTE.b	%11000000
    277  298b		       c0		      BYTE.b	%11000000
    278  298c		       c0		      BYTE.b	%11000000
    279  298d		       c0		      BYTE.b	%11000000
    280  298e		       c0		      BYTE.b	%11000000
    281  298f		       c0		      BYTE.b	%11000000
    282  2990		       c0		      BYTE.b	%11000000
    283  2991		       c0		      BYTE.b	%11000000
    284  2992		       c0		      BYTE.b	%11000000
    285  2993		       c0		      BYTE.b	%11000000
    286  2994		       c0		      BYTE.b	%11000000
    287  2995		       c0		      BYTE.b	%11000000
    288  2996		       c0		      BYTE.b	%11000000
    289  2997		       c0		      BYTE.b	%11000000
    290  2998		       c0		      BYTE.b	%11000000
    291  2999		       c0		      BYTE.b	%11000000
    292  299a		       ff		      BYTE.b	%11111111
    293  299b		       ff		      BYTE.b	%11111111
    294  299c		       ff		      BYTE.b	%11111111
    295  299d		       ff		      BYTE.b	%11111111
    296  299e		       ff		      BYTE.b	%11111111
    297  299f		       ff		      BYTE.b	%11111111
    298  29a0		       ff		      BYTE.b	%11111111
    299  29a1		       ff		      BYTE.b	%11111111
    300  29a2		       ff		      BYTE.b	%11111111
    301  29a3		       ff		      BYTE.b	%11111111
    302  29a4		       3f		      BYTE.b	%00111111
    303  29a5		       3f		      BYTE.b	%00111111
    304  29a6		       3f		      BYTE.b	%00111111
    305  29a7		       3f		      BYTE.b	%00111111
    306  29a8		       3f		      BYTE.b	%00111111
    307  29a9		       3f		      BYTE.b	%00111111
    308  29aa		       3f		      BYTE.b	%00111111
    309  29ab		       3f		      BYTE.b	%00111111
    310  29ac		       3f		      BYTE.b	%00111111
    311  29ad		       3f		      BYTE.b	%00111111
    312  29ae		       3f		      BYTE.b	%00111111
    313  29af		       3f		      BYTE.b	%00111111
    314  29b0		       3f		      BYTE.b	%00111111
    315  29b1		       3f		      BYTE.b	%00111111
    316  29b2		       3f		      BYTE.b	%00111111
    317  29b3		       3f		      BYTE.b	%00111111
    318  29b4		       3f		      BYTE.b	%00111111
    319  29b5		       3f		      BYTE.b	%00111111
    320  29b6		       3f		      BYTE.b	%00111111
    321  29b7		       3f		      BYTE.b	%00111111
    322  29b8		       3f		      BYTE.b	%00111111
    323  29b9		       3f		      BYTE.b	%00111111
    324  29ba		       3f		      BYTE.b	%00111111
    325  29bb		       3f		      BYTE.b	%00111111
    326  29bc		       3f		      BYTE.b	%00111111
    327  29bd		       3f		      BYTE.b	%00111111
    328  29be		       00		      BYTE.b	%00000000
    329  29bf		       00		      BYTE.b	%00000000
    330  29c0
    331  29c0					      if	>. != >[.+(bmp_48x1_2_height)]
    332  2a00		       00 00 00 00*	      align	256
    333  2a00					      endif
    334  2a00
    335  2a00				   bmp_48x1_2_03
    336  2a00
    337  2a00		       00		      BYTE.b	%00000000
    338  2a01		       00		      BYTE.b	%00000000
    339  2a02		       00		      BYTE.b	%00000000
    340  2a03		       00		      BYTE.b	%00000000
    341  2a04		       00		      BYTE.b	%00000000
    342  2a05		       00		      BYTE.b	%00000000
    343  2a06		       03		      BYTE.b	%00000011
    344  2a07		       03		      BYTE.b	%00000011
    345  2a08		       03		      BYTE.b	%00000011
    346  2a09		       03		      BYTE.b	%00000011
    347  2a0a		       03		      BYTE.b	%00000011
    348  2a0b		       03		      BYTE.b	%00000011
    349  2a0c		       03		      BYTE.b	%00000011
    350  2a0d		       03		      BYTE.b	%00000011
    351  2a0e		       03		      BYTE.b	%00000011
    352  2a0f		       03		      BYTE.b	%00000011
    353  2a10		       03		      BYTE.b	%00000011
    354  2a11		       03		      BYTE.b	%00000011
    355  2a12		       03		      BYTE.b	%00000011
    356  2a13		       03		      BYTE.b	%00000011
    357  2a14		       ff		      BYTE.b	%11111111
    358  2a15		       ff		      BYTE.b	%11111111
    359  2a16		       ff		      BYTE.b	%11111111
    360  2a17		       ff		      BYTE.b	%11111111
    361  2a18		       ff		      BYTE.b	%11111111
    362  2a19		       ff		      BYTE.b	%11111111
    363  2a1a		       ff		      BYTE.b	%11111111
    364  2a1b		       ff		      BYTE.b	%11111111
    365  2a1c		       ff		      BYTE.b	%11111111
    366  2a1d		       ff		      BYTE.b	%11111111
    367  2a1e		       ff		      BYTE.b	%11111111
    368  2a1f		       ff		      BYTE.b	%11111111
    369  2a20		       ff		      BYTE.b	%11111111
    370  2a21		       ff		      BYTE.b	%11111111
    371  2a22		       ff		      BYTE.b	%11111111
    372  2a23		       ff		      BYTE.b	%11111111
    373  2a24		       ff		      BYTE.b	%11111111
    374  2a25		       ff		      BYTE.b	%11111111
    375  2a26		       ff		      BYTE.b	%11111111
    376  2a27		       ff		      BYTE.b	%11111111
    377  2a28		       ff		      BYTE.b	%11111111
    378  2a29		       ff		      BYTE.b	%11111111
    379  2a2a		       03		      BYTE.b	%00000011
    380  2a2b		       03		      BYTE.b	%00000011
    381  2a2c		       03		      BYTE.b	%00000011
    382  2a2d		       03		      BYTE.b	%00000011
    383  2a2e		       03		      BYTE.b	%00000011
    384  2a2f		       03		      BYTE.b	%00000011
    385  2a30		       03		      BYTE.b	%00000011
    386  2a31		       03		      BYTE.b	%00000011
    387  2a32		       03		      BYTE.b	%00000011
    388  2a33		       03		      BYTE.b	%00000011
    389  2a34		       03		      BYTE.b	%00000011
    390  2a35		       03		      BYTE.b	%00000011
    391  2a36		       03		      BYTE.b	%00000011
    392  2a37		       03		      BYTE.b	%00000011
    393  2a38		       03		      BYTE.b	%00000011
    394  2a39		       03		      BYTE.b	%00000011
    395  2a3a		       ff		      BYTE.b	%11111111
    396  2a3b		       ff		      BYTE.b	%11111111
    397  2a3c		       ff		      BYTE.b	%11111111
    398  2a3d		       ff		      BYTE.b	%11111111
    399  2a3e		       ff		      BYTE.b	%11111111
    400  2a3f		       ff		      BYTE.b	%11111111
    401  2a40		       ff		      BYTE.b	%11111111
    402  2a41		       ff		      BYTE.b	%11111111
    403  2a42		       ff		      BYTE.b	%11111111
    404  2a43		       ff		      BYTE.b	%11111111
    405  2a44		       fc		      BYTE.b	%11111100
    406  2a45		       fc		      BYTE.b	%11111100
    407  2a46		       fc		      BYTE.b	%11111100
    408  2a47		       fc		      BYTE.b	%11111100
    409  2a48		       fc		      BYTE.b	%11111100
    410  2a49		       fc		      BYTE.b	%11111100
    411  2a4a		       fc		      BYTE.b	%11111100
    412  2a4b		       fc		      BYTE.b	%11111100
    413  2a4c		       fc		      BYTE.b	%11111100
    414  2a4d		       fc		      BYTE.b	%11111100
    415  2a4e		       fc		      BYTE.b	%11111100
    416  2a4f		       fc		      BYTE.b	%11111100
    417  2a50		       fc		      BYTE.b	%11111100
    418  2a51		       fc		      BYTE.b	%11111100
    419  2a52		       fc		      BYTE.b	%11111100
    420  2a53		       fc		      BYTE.b	%11111100
    421  2a54		       fc		      BYTE.b	%11111100
    422  2a55		       fc		      BYTE.b	%11111100
    423  2a56		       fc		      BYTE.b	%11111100
    424  2a57		       fc		      BYTE.b	%11111100
    425  2a58		       fc		      BYTE.b	%11111100
    426  2a59		       fc		      BYTE.b	%11111100
    427  2a5a		       fc		      BYTE.b	%11111100
    428  2a5b		       fc		      BYTE.b	%11111100
    429  2a5c		       fc		      BYTE.b	%11111100
    430  2a5d		       fc		      BYTE.b	%11111100
    431  2a5e		       00		      BYTE.b	%00000000
    432  2a5f		       00		      BYTE.b	%00000000
    433  2a60
    434  2a60				  -	      if	>. != >[.+(bmp_48x1_2_height)]
    435  2a60				  -	      align	256
    436  2a60					      endif
    437  2a60
    438  2a60				   bmp_48x1_2_04
    439  2a60
    440  2a60		       00		      BYTE.b	%00000000
    441  2a61		       00		      BYTE.b	%00000000
    442  2a62		       00		      BYTE.b	%00000000
    443  2a63		       00		      BYTE.b	%00000000
    444  2a64		       00		      BYTE.b	%00000000
    445  2a65		       00		      BYTE.b	%00000000
    446  2a66		       ff		      BYTE.b	%11111111
    447  2a67		       ff		      BYTE.b	%11111111
    448  2a68		       ff		      BYTE.b	%11111111
    449  2a69		       ff		      BYTE.b	%11111111
    450  2a6a		       ff		      BYTE.b	%11111111
    451  2a6b		       ff		      BYTE.b	%11111111
    452  2a6c		       ff		      BYTE.b	%11111111
    453  2a6d		       ff		      BYTE.b	%11111111
    454  2a6e		       ff		      BYTE.b	%11111111
    455  2a6f		       ff		      BYTE.b	%11111111
    456  2a70		       ff		      BYTE.b	%11111111
    457  2a71		       ff		      BYTE.b	%11111111
    458  2a72		       ff		      BYTE.b	%11111111
    459  2a73		       ff		      BYTE.b	%11111111
    460  2a74		       ff		      BYTE.b	%11111111
    461  2a75		       ff		      BYTE.b	%11111111
    462  2a76		       ff		      BYTE.b	%11111111
    463  2a77		       ff		      BYTE.b	%11111111
    464  2a78		       ff		      BYTE.b	%11111111
    465  2a79		       ff		      BYTE.b	%11111111
    466  2a7a		       ff		      BYTE.b	%11111111
    467  2a7b		       ff		      BYTE.b	%11111111
    468  2a7c		       ff		      BYTE.b	%11111111
    469  2a7d		       ff		      BYTE.b	%11111111
    470  2a7e		       f0		      BYTE.b	%11110000
    471  2a7f		       f0		      BYTE.b	%11110000
    472  2a80		       f0		      BYTE.b	%11110000
    473  2a81		       f0		      BYTE.b	%11110000
    474  2a82		       f0		      BYTE.b	%11110000
    475  2a83		       f0		      BYTE.b	%11110000
    476  2a84		       f0		      BYTE.b	%11110000
    477  2a85		       f0		      BYTE.b	%11110000
    478  2a86		       f0		      BYTE.b	%11110000
    479  2a87		       f0		      BYTE.b	%11110000
    480  2a88		       f0		      BYTE.b	%11110000
    481  2a89		       f0		      BYTE.b	%11110000
    482  2a8a		       f0		      BYTE.b	%11110000
    483  2a8b		       f0		      BYTE.b	%11110000
    484  2a8c		       f0		      BYTE.b	%11110000
    485  2a8d		       f0		      BYTE.b	%11110000
    486  2a8e		       f0		      BYTE.b	%11110000
    487  2a8f		       f0		      BYTE.b	%11110000
    488  2a90		       f0		      BYTE.b	%11110000
    489  2a91		       f0		      BYTE.b	%11110000
    490  2a92		       f0		      BYTE.b	%11110000
    491  2a93		       f0		      BYTE.b	%11110000
    492  2a94		       f0		      BYTE.b	%11110000
    493  2a95		       f0		      BYTE.b	%11110000
    494  2a96		       f0		      BYTE.b	%11110000
    495  2a97		       f0		      BYTE.b	%11110000
    496  2a98		       f0		      BYTE.b	%11110000
    497  2a99		       f0		      BYTE.b	%11110000
    498  2a9a		       f0		      BYTE.b	%11110000
    499  2a9b		       f0		      BYTE.b	%11110000
    500  2a9c		       f0		      BYTE.b	%11110000
    501  2a9d		       f0		      BYTE.b	%11110000
    502  2a9e		       f0		      BYTE.b	%11110000
    503  2a9f		       f0		      BYTE.b	%11110000
    504  2aa0		       f0		      BYTE.b	%11110000
    505  2aa1		       f0		      BYTE.b	%11110000
    506  2aa2		       f0		      BYTE.b	%11110000
    507  2aa3		       f0		      BYTE.b	%11110000
    508  2aa4		       00		      BYTE.b	%00000000
    509  2aa5		       00		      BYTE.b	%00000000
    510  2aa6		       00		      BYTE.b	%00000000
    511  2aa7		       00		      BYTE.b	%00000000
    512  2aa8		       00		      BYTE.b	%00000000
    513  2aa9		       00		      BYTE.b	%00000000
    514  2aaa		       00		      BYTE.b	%00000000
    515  2aab		       00		      BYTE.b	%00000000
    516  2aac		       00		      BYTE.b	%00000000
    517  2aad		       00		      BYTE.b	%00000000
    518  2aae		       00		      BYTE.b	%00000000
    519  2aaf		       00		      BYTE.b	%00000000
    520  2ab0		       00		      BYTE.b	%00000000
    521  2ab1		       00		      BYTE.b	%00000000
    522  2ab2		       00		      BYTE.b	%00000000
    523  2ab3		       00		      BYTE.b	%00000000
    524  2ab4		       00		      BYTE.b	%00000000
    525  2ab5		       00		      BYTE.b	%00000000
    526  2ab6		       00		      BYTE.b	%00000000
    527  2ab7		       00		      BYTE.b	%00000000
    528  2ab8		       00		      BYTE.b	%00000000
    529  2ab9		       00		      BYTE.b	%00000000
    530  2aba		       00		      BYTE.b	%00000000
    531  2abb		       00		      BYTE.b	%00000000
    532  2abc		       00		      BYTE.b	%00000000
    533  2abd		       00		      BYTE.b	%00000000
    534  2abe		       00		      BYTE.b	%00000000
    535  2abf		       00		      BYTE.b	%00000000
    536  2ac0
    537  2ac0					      if	>. != >[.+(bmp_48x1_2_height)]
    538  2b00		       00 00 00 00*	      align	256
    539  2b00					      endif
    540  2b00
    541  2b00				   bmp_48x1_2_05
    542  2b00
    543  2b00		       00		      BYTE.b	%00000000
    544  2b01		       00		      BYTE.b	%00000000
    545  2b02		       00		      BYTE.b	%00000000
    546  2b03		       00		      BYTE.b	%00000000
    547  2b04		       00		      BYTE.b	%00000000
    548  2b05		       00		      BYTE.b	%00000000
    549  2b06		       c0		      BYTE.b	%11000000
    550  2b07		       c0		      BYTE.b	%11000000
    551  2b08		       c0		      BYTE.b	%11000000
    552  2b09		       c0		      BYTE.b	%11000000
    553  2b0a		       c0		      BYTE.b	%11000000
    554  2b0b		       c0		      BYTE.b	%11000000
    555  2b0c		       c0		      BYTE.b	%11000000
    556  2b0d		       c0		      BYTE.b	%11000000
    557  2b0e		       c0		      BYTE.b	%11000000
    558  2b0f		       c0		      BYTE.b	%11000000
    559  2b10		       c0		      BYTE.b	%11000000
    560  2b11		       c0		      BYTE.b	%11000000
    561  2b12		       c0		      BYTE.b	%11000000
    562  2b13		       c0		      BYTE.b	%11000000
    563  2b14		       ff		      BYTE.b	%11111111
    564  2b15		       ff		      BYTE.b	%11111111
    565  2b16		       ff		      BYTE.b	%11111111
    566  2b17		       ff		      BYTE.b	%11111111
    567  2b18		       ff		      BYTE.b	%11111111
    568  2b19		       ff		      BYTE.b	%11111111
    569  2b1a		       ff		      BYTE.b	%11111111
    570  2b1b		       ff		      BYTE.b	%11111111
    571  2b1c		       ff		      BYTE.b	%11111111
    572  2b1d		       ff		      BYTE.b	%11111111
    573  2b1e		       3f		      BYTE.b	%00111111
    574  2b1f		       3f		      BYTE.b	%00111111
    575  2b20		       3f		      BYTE.b	%00111111
    576  2b21		       3f		      BYTE.b	%00111111
    577  2b22		       3f		      BYTE.b	%00111111
    578  2b23		       3f		      BYTE.b	%00111111
    579  2b24		       3f		      BYTE.b	%00111111
    580  2b25		       3f		      BYTE.b	%00111111
    581  2b26		       3f		      BYTE.b	%00111111
    582  2b27		       3f		      BYTE.b	%00111111
    583  2b28		       3f		      BYTE.b	%00111111
    584  2b29		       3f		      BYTE.b	%00111111
    585  2b2a		       3f		      BYTE.b	%00111111
    586  2b2b		       3f		      BYTE.b	%00111111
    587  2b2c		       3f		      BYTE.b	%00111111
    588  2b2d		       3f		      BYTE.b	%00111111
    589  2b2e		       3f		      BYTE.b	%00111111
    590  2b2f		       3f		      BYTE.b	%00111111
    591  2b30		       3f		      BYTE.b	%00111111
    592  2b31		       3f		      BYTE.b	%00111111
    593  2b32		       3f		      BYTE.b	%00111111
    594  2b33		       3f		      BYTE.b	%00111111
    595  2b34		       3f		      BYTE.b	%00111111
    596  2b35		       3f		      BYTE.b	%00111111
    597  2b36		       3f		      BYTE.b	%00111111
    598  2b37		       3f		      BYTE.b	%00111111
    599  2b38		       00		      BYTE.b	%00000000
    600  2b39		       00		      BYTE.b	%00000000
    601  2b3a		       00		      BYTE.b	%00000000
    602  2b3b		       00		      BYTE.b	%00000000
    603  2b3c		       00		      BYTE.b	%00000000
    604  2b3d		       00		      BYTE.b	%00000000
    605  2b3e		       00		      BYTE.b	%00000000
    606  2b3f		       00		      BYTE.b	%00000000
    607  2b40		       00		      BYTE.b	%00000000
    608  2b41		       00		      BYTE.b	%00000000
    609  2b42		       00		      BYTE.b	%00000000
    610  2b43		       00		      BYTE.b	%00000000
    611  2b44		       00		      BYTE.b	%00000000
    612  2b45		       00		      BYTE.b	%00000000
    613  2b46		       00		      BYTE.b	%00000000
    614  2b47		       00		      BYTE.b	%00000000
    615  2b48		       00		      BYTE.b	%00000000
    616  2b49		       00		      BYTE.b	%00000000
    617  2b4a		       00		      BYTE.b	%00000000
    618  2b4b		       00		      BYTE.b	%00000000
    619  2b4c		       00		      BYTE.b	%00000000
    620  2b4d		       00		      BYTE.b	%00000000
    621  2b4e		       00		      BYTE.b	%00000000
    622  2b4f		       00		      BYTE.b	%00000000
    623  2b50		       00		      BYTE.b	%00000000
    624  2b51		       00		      BYTE.b	%00000000
    625  2b52		       00		      BYTE.b	%00000000
    626  2b53		       00		      BYTE.b	%00000000
    627  2b54		       00		      BYTE.b	%00000000
    628  2b55		       00		      BYTE.b	%00000000
    629  2b56		       00		      BYTE.b	%00000000
    630  2b57		       00		      BYTE.b	%00000000
    631  2b58		       00		      BYTE.b	%00000000
    632  2b59		       00		      BYTE.b	%00000000
    633  2b5a		       00		      BYTE.b	%00000000
    634  2b5b		       00		      BYTE.b	%00000000
    635  2b5c		       00		      BYTE.b	%00000000
    636  2b5d		       00		      BYTE.b	%00000000
    637  2b5e		       00		      BYTE.b	%00000000
    638  2b5f		       00		      BYTE.b	%00000000
    639  2b60
------- FILE titlescreen/asm/titlescreen.asm
    143  2b60					      endif
    144  2b60				  -	      ifconst	mk_48x1_3_on
    145  2b60				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2b60					      endif
    147  2b60
    148  2b60				  -	      ifconst	mk_48x2_1_on
    149  2b60				  -	      include	"titlescreen/48x2_1_image.asm"
    150  2b60					      endif
    151  2b60				  -	      ifconst	mk_48x2_2_on
    152  2b60				  -	      include	"titlescreen/48x2_2_image.asm"
    153  2b60					      endif
    154  2b60				  -	      ifconst	mk_48x2_3_on
    155  2b60				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2b60					      endif
    157  2b60
    158  2b60				  -	      ifconst	mk_96x2_1_on
    159  2b60				  -	      include	"titlescreen/96x2_1_image.asm"
    160  2b60					      endif
    161  2b60				  -	      ifconst	mk_96x2_2_on
    162  2b60				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2b60					      endif
    164  2b60				  -	      ifconst	mk_96x2_3_on
    165  2b60				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2b60					      endif
    167  2b60
    168  2b60					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b60					      include	"titlescreen/score_image.asm"
      1  2b60							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b60							; if you're looking to want to modify any one font, pick on the 
      3  2b60
      4  2b60				  -	      ifnconst	NOFONT
      5  2b60				  -NOFONT     =	0
      6  2b60					      endif
      7  2b60				  -	      ifnconst	STOCK
      8  2b60				  -STOCK      =	1	;_FONTNAME
      9  2b60					      endif
     10  2b60				  -	      ifnconst	NEWCENTURY
     11  2b60				  -NEWCENTURY =	2	;_FONTNAME
     12  2b60					      endif
     13  2b60				  -	      ifnconst	WHIMSEY
     14  2b60				  -WHIMSEY    =	3	;_FONTNAME
     15  2b60					      endif
     16  2b60				  -	      ifnconst	ALARMCLOCK
     17  2b60				  -ALARMCLOCK =	4	;_FONTNAME
     18  2b60					      endif
     19  2b60				  -	      ifnconst	HANDWRITTEN
     20  2b60				  -HANDWRITTEN =	5	;_FONTNAME
     21  2b60					      endif
     22  2b60				  -	      ifnconst	INTERRUPTED
     23  2b60				  -INTERRUPTED =	6	;_FONTNAME
     24  2b60					      endif
     25  2b60				  -	      ifnconst	TINY
     26  2b60				  -TINY       =	7	;_FONTNAME
     27  2b60					      endif
     28  2b60				  -	      ifnconst	RETROPUTER
     29  2b60				  -RETROPUTER =	8	;_FONTNAME
     30  2b60					      endif
     31  2b60				  -	      ifnconst	CURVES
     32  2b60				  -CURVES     =	9	;_FONTNAME
     33  2b60					      endif
     34  2b60				  -	      ifnconst	HUSKY
     35  2b60				  -HUSKY      =	10	;_FONTNAME
     36  2b60					      endif
     37  2b60				  -	      ifnconst	SNAKE
     38  2b60				  -SNAKE      =	11	;_FONTNAME
     39  2b60					      endif
     40  2b60				  -	      ifnconst	PLOK
     41  2b60				  -PLOK       =	13	;_FONTNAME
     42  2b60					      endif
     43  2b60
     44  2b60				  -	      ifnconst	SYMBOLS
     45  2b60				  -SYMBOLS    =	0	;_FONTNAME 
     46  2b60					      endif
     47  2b60
     48  2b60							; ### setup some defaults
     49  2b60				  -	      ifnconst	fontstyle
     50  2b60				  -fontstyle  =	STOCK
     51  2b60					      endif
     52  2b60
     53  2b60							;fix up the table alignment, if necessary
     54  2b60				  -	      if	>. != >[.+128]
     55  2b60				  -	      align	256
     56  2b60					      endif
     57  2b60
     58  2b60				   miniscoretable
     59  2b60
     60  2b60					      if	fontstyle == STOCK
     61  2b60
     62  2b60							;byte %00000000 ; STOCK
     63  2b60
     64  2b60		       3c		      .byte.b	%00111100	; STOCK
     65  2b61		       66		      .byte.b	%01100110	; STOCK
     66  2b62		       66		      .byte.b	%01100110	; STOCK
     67  2b63		       66		      .byte.b	%01100110	; STOCK
     68  2b64		       66		      .byte.b	%01100110	; STOCK
     69  2b65		       66		      .byte.b	%01100110	; STOCK
     70  2b66		       66		      .byte.b	%01100110	; STOCK
     71  2b67		       3c		      .byte.b	%00111100	; STOCK
     72  2b68
     73  2b68							;byte %00000000 ; STOCK
     74  2b68
     75  2b68		       7e		      .byte.b	%01111110	; STOCK
     76  2b69		       18		      .byte.b	%00011000	; STOCK
     77  2b6a		       18		      .byte.b	%00011000	; STOCK
     78  2b6b		       18		      .byte.b	%00011000	; STOCK
     79  2b6c		       18		      .byte.b	%00011000	; STOCK
     80  2b6d		       38		      .byte.b	%00111000	; STOCK
     81  2b6e		       18		      .byte.b	%00011000	; STOCK
     82  2b6f		       08		      .byte.b	%00001000	; STOCK
     83  2b70
     84  2b70							;byte %00000000 ; STOCK
     85  2b70
     86  2b70		       7e		      .byte.b	%01111110	; STOCK
     87  2b71		       60		      .byte.b	%01100000	; STOCK
     88  2b72		       60		      .byte.b	%01100000	; STOCK
     89  2b73		       3c		      .byte.b	%00111100	; STOCK
     90  2b74		       06		      .byte.b	%00000110	; STOCK
     91  2b75		       06		      .byte.b	%00000110	; STOCK
     92  2b76		       46		      .byte.b	%01000110	; STOCK
     93  2b77		       3c		      .byte.b	%00111100	; STOCK
     94  2b78
     95  2b78							;byte %00000000 ; STOCK
     96  2b78
     97  2b78		       3c		      .byte.b	%00111100	; STOCK
     98  2b79		       46		      .byte.b	%01000110	; STOCK
     99  2b7a		       06		      .byte.b	%00000110	; STOCK
    100  2b7b		       06		      .byte.b	%00000110	; STOCK
    101  2b7c		       1c		      .byte.b	%00011100	; STOCK
    102  2b7d		       06		      .byte.b	%00000110	; STOCK
    103  2b7e		       46		      .byte.b	%01000110	; STOCK
    104  2b7f		       3c		      .byte.b	%00111100	; STOCK
    105  2b80
    106  2b80							;byte %00000000 ; STOCK
    107  2b80
    108  2b80		       0c		      .byte.b	%00001100	; STOCK
    109  2b81		       0c		      .byte.b	%00001100	; STOCK
    110  2b82		       7e		      .byte.b	%01111110	; STOCK
    111  2b83		       4c		      .byte.b	%01001100	; STOCK
    112  2b84		       4c		      .byte.b	%01001100	; STOCK
    113  2b85		       2c		      .byte.b	%00101100	; STOCK
    114  2b86		       1c		      .byte.b	%00011100	; STOCK
    115  2b87		       0c		      .byte.b	%00001100	; STOCK
    116  2b88
    117  2b88							;byte %00000000 ; STOCK
    118  2b88
    119  2b88		       3c		      .byte.b	%00111100	; STOCK
    120  2b89		       46		      .byte.b	%01000110	; STOCK
    121  2b8a		       06		      .byte.b	%00000110	; STOCK
    122  2b8b		       06		      .byte.b	%00000110	; STOCK
    123  2b8c		       3c		      .byte.b	%00111100	; STOCK
    124  2b8d		       60		      .byte.b	%01100000	; STOCK
    125  2b8e		       60		      .byte.b	%01100000	; STOCK
    126  2b8f		       7e		      .byte.b	%01111110	; STOCK
    127  2b90
    128  2b90							;byte %00000000 ; STOCK
    129  2b90
    130  2b90		       3c		      .byte.b	%00111100	; STOCK
    131  2b91		       66		      .byte.b	%01100110	; STOCK
    132  2b92		       66		      .byte.b	%01100110	; STOCK
    133  2b93		       66		      .byte.b	%01100110	; STOCK
    134  2b94		       7c		      .byte.b	%01111100	; STOCK
    135  2b95		       60		      .byte.b	%01100000	; STOCK
    136  2b96		       62		      .byte.b	%01100010	; STOCK
    137  2b97		       3c		      .byte.b	%00111100	; STOCK
    138  2b98
    139  2b98							;byte %00000000 ; STOCK
    140  2b98
    141  2b98		       30		      .byte.b	%00110000	; STOCK
    142  2b99		       30		      .byte.b	%00110000	; STOCK
    143  2b9a		       30		      .byte.b	%00110000	; STOCK
    144  2b9b		       18		      .byte.b	%00011000	; STOCK
    145  2b9c		       0c		      .byte.b	%00001100	; STOCK
    146  2b9d		       06		      .byte.b	%00000110	; STOCK
    147  2b9e		       42		      .byte.b	%01000010	; STOCK
    148  2b9f		       3e		      .byte.b	%00111110	; STOCK
    149  2ba0
    150  2ba0							;byte %00000000 ; STOCK
    151  2ba0
    152  2ba0		       3c		      .byte.b	%00111100	; STOCK
    153  2ba1		       66		      .byte.b	%01100110	; STOCK
    154  2ba2		       66		      .byte.b	%01100110	; STOCK
    155  2ba3		       66		      .byte.b	%01100110	; STOCK
    156  2ba4		       3c		      .byte.b	%00111100	; STOCK
    157  2ba5		       66		      .byte.b	%01100110	; STOCK
    158  2ba6		       66		      .byte.b	%01100110	; STOCK
    159  2ba7		       3c		      .byte.b	%00111100	; STOCK
    160  2ba8
    161  2ba8							;byte %00000000 ; STOCK
    162  2ba8
    163  2ba8		       3c		      .byte.b	%00111100	; STOCK
    164  2ba9		       46		      .byte.b	%01000110	; STOCK
    165  2baa		       06		      .byte.b	%00000110	; STOCK
    166  2bab		       3e		      .byte.b	%00111110	; STOCK
    167  2bac		       66		      .byte.b	%01100110	; STOCK
    168  2bad		       66		      .byte.b	%01100110	; STOCK
    169  2bae		       66		      .byte.b	%01100110	; STOCK
    170  2baf		       3c		      .byte.b	%00111100	; STOCK
    171  2bb0
    172  2bb0							;byte %00000000 ; STOCK
    173  2bb0
    174  2bb0				  -	      ifconst	fontcharsHEX
    175  2bb0				  -
    176  2bb0				  -	      .byte	%01100110	; STOCK
    177  2bb0				  -	      .byte	%01100110	; STOCK
    178  2bb0				  -	      .byte	%01100110	; STOCK
    179  2bb0				  -	      .byte	%01111110	; STOCK
    180  2bb0				  -	      .byte	%01100110	; STOCK
    181  2bb0				  -	      .byte	%01100110	; STOCK
    182  2bb0				  -	      .byte	%01100110	; STOCK
    183  2bb0				  -	      .byte	%00111100	; STOCK
    184  2bb0				  -
    185  2bb0				  -			;byte %00000000 ; STOCK
    186  2bb0				  -
    187  2bb0				  -	      .byte	%01111100	; STOCK
    188  2bb0				  -	      .byte	%01100110	; STOCK
    189  2bb0				  -	      .byte	%01100110	; STOCK
    190  2bb0				  -	      .byte	%01100110	; STOCK
    191  2bb0				  -	      .byte	%01111100	; STOCK
    192  2bb0				  -	      .byte	%01100110	; STOCK
    193  2bb0				  -	      .byte	%01100110	; STOCK
    194  2bb0				  -	      .byte	%01111100	; STOCK
    195  2bb0				  -
    196  2bb0				  -			;byte %00000000 ; STOCK
    197  2bb0				  -
    198  2bb0				  -	      .byte	%00111100	; STOCK
    199  2bb0				  -	      .byte	%01100110	; STOCK
    200  2bb0				  -	      .byte	%01100000	; STOCK
    201  2bb0				  -	      .byte	%01100000	; STOCK
    202  2bb0				  -	      .byte	%01100000	; STOCK
    203  2bb0				  -	      .byte	%01100000	; STOCK
    204  2bb0				  -	      .byte	%01100110	; STOCK
    205  2bb0				  -	      .byte	%00111100	; STOCK
    206  2bb0				  -
    207  2bb0				  -			;byte %00000000 ; STOCK
    208  2bb0				  -
    209  2bb0				  -	      .byte	%01111100	; STOCK
    210  2bb0				  -	      .byte	%01100110	; STOCK
    211  2bb0				  -	      .byte	%01100110	; STOCK
    212  2bb0				  -	      .byte	%01100110	; STOCK
    213  2bb0				  -	      .byte	%01100110	; STOCK
    214  2bb0				  -	      .byte	%01100110	; STOCK
    215  2bb0				  -	      .byte	%01100110	; STOCK
    216  2bb0				  -	      .byte	%01111100	; STOCK
    217  2bb0				  -
    218  2bb0				  -			;byte %00000000 ; STOCK
    219  2bb0				  -
    220  2bb0				  -	      .byte	%01111110	; STOCK
    221  2bb0				  -	      .byte	%01100000	; STOCK
    222  2bb0				  -	      .byte	%01100000	; STOCK
    223  2bb0				  -	      .byte	%01100000	; STOCK
    224  2bb0				  -	      .byte	%01111100	; STOCK
    225  2bb0				  -	      .byte	%01100000	; STOCK
    226  2bb0				  -	      .byte	%01100000	; STOCK
    227  2bb0				  -	      .byte	%01111110	; STOCK
    228  2bb0				  -
    229  2bb0				  -			;byte %00000000 ; STOCK
    230  2bb0				  -
    231  2bb0				  -	      .byte	%01100000	; STOCK
    232  2bb0				  -	      .byte	%01100000	; STOCK
    233  2bb0				  -	      .byte	%01100000	; STOCK
    234  2bb0				  -	      .byte	%01100000	; STOCK
    235  2bb0				  -	      .byte	%01111100	; STOCK
    236  2bb0				  -	      .byte	%01100000	; STOCK
    237  2bb0				  -	      .byte	%01100000	; STOCK
    238  2bb0				  -	      .byte	%01111110	; STOCK
    239  2bb0				  -
    240  2bb0				  -			;byte %00000000 ; STOCK
    241  2bb0				  -			;byte %00000000 ; STOCK
    242  2bb0				  -			;byte %00000000 ; STOCK
    243  2bb0				  -			;byte %00000000 ; STOCK
    244  2bb0					      endif		; fontcharsHEX 
    245  2bb0					      endif		; STOCK
    246  2bb0
    247  2bb0				  -	      if	fontstyle == NEWCENTURY
    248  2bb0				  -			;byte %00000000 ; NEWCENTURY
    249  2bb0				  -
    250  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    251  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    252  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    253  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    254  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    255  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    256  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    257  2bb0				  -	      .byte	%00011000	; NEWCENTURY
    258  2bb0				  -
    259  2bb0				  -			;byte %00000000 ; NEWCENTURY
    260  2bb0				  -
    261  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    262  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    263  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    264  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    265  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    266  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    267  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    268  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    269  2bb0				  -
    270  2bb0				  -			;byte %00000000 ; NEWCENTURY
    271  2bb0				  -
    272  2bb0				  -	      .byte	%01111110	; NEWCENTURY
    273  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    274  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    275  2bb0				  -	      .byte	%00100000	; NEWCENTURY
    276  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    277  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    278  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    279  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    280  2bb0				  -
    281  2bb0				  -			;byte %00000000 ; NEWCENTURY
    282  2bb0				  -
    283  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    284  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    285  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    286  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    287  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    288  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    289  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    290  2bb0				  -	      .byte	%00011100	; NEWCENTURY
    291  2bb0				  -
    292  2bb0				  -			;byte %00000000 ; NEWCENTURY
    293  2bb0				  -
    294  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    295  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    296  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    297  2bb0				  -	      .byte	%00111110	; NEWCENTURY
    298  2bb0				  -	      .byte	%00100010	; NEWCENTURY
    299  2bb0				  -	      .byte	%00100010	; NEWCENTURY
    300  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    301  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    302  2bb0				  -
    303  2bb0				  -			;byte %00000000 ; NEWCENTURY
    304  2bb0				  -
    305  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    306  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    307  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    308  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    309  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    310  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    311  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    312  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    313  2bb0				  -
    314  2bb0				  -			;byte %00000000 ; NEWCENTURY
    315  2bb0				  -
    316  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    317  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    318  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    319  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    320  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    321  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    322  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    323  2bb0				  -	      .byte	%00110000	; NEWCENTURY
    324  2bb0				  -
    325  2bb0				  -			;byte %00000000 ; NEWCENTURY
    326  2bb0				  -
    327  2bb0				  -	      .byte	%00010000	; NEWCENTURY
    328  2bb0				  -	      .byte	%00010000	; NEWCENTURY
    329  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    330  2bb0				  -	      .byte	%00001000	; NEWCENTURY
    331  2bb0				  -	      .byte	%00000100	; NEWCENTURY
    332  2bb0				  -	      .byte	%00000100	; NEWCENTURY
    333  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    334  2bb0				  -	      .byte	%00011110	; NEWCENTURY
    335  2bb0				  -
    336  2bb0				  -			;byte %00000000 ; NEWCENTURY
    337  2bb0				  -
    338  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    339  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    340  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    341  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    342  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    343  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    344  2bb0				  -	      .byte	%00100100	; NEWCENTURY
    345  2bb0				  -	      .byte	%00011000	; NEWCENTURY
    346  2bb0				  -
    347  2bb0				  -			;byte %00000000 ; NEWCENTURY
    348  2bb0				  -
    349  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    350  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    351  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    352  2bb0				  -	      .byte	%00000010	; NEWCENTURY
    353  2bb0				  -	      .byte	%00001110	; NEWCENTURY
    354  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    355  2bb0				  -	      .byte	%00010010	; NEWCENTURY
    356  2bb0				  -	      .byte	%00001100	; NEWCENTURY
    357  2bb0				  -
    358  2bb0				  -	      ifconst	fontcharsHEX
    359  2bb0				  -
    360  2bb0				  -			;byte %00000000 ; NEWCENTURY
    361  2bb0				  -
    362  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    363  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    364  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    365  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    366  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    367  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    368  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    369  2bb0				  -	      .byte	%00111000	; NEWCENTURY
    370  2bb0				  -
    371  2bb0				  -			;byte %00000000 ; NEWCENTURY
    372  2bb0				  -
    373  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    374  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    375  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    376  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    377  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    378  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    379  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    380  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    381  2bb0				  -
    382  2bb0				  -			;byte %00000000 ; NEWCENTURY
    383  2bb0				  -
    384  2bb0				  -	      .byte	%00111100	; NEWCENTURY
    385  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    386  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    387  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    388  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    389  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    390  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    391  2bb0				  -	      .byte	%00111000	; NEWCENTURY
    392  2bb0				  -
    393  2bb0				  -			;byte %00000000 ; NEWCENTURY
    394  2bb0				  -
    395  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    396  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    397  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    398  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    399  2bb0				  -	      .byte	%01000010	; NEWCENTURY
    400  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    401  2bb0				  -	      .byte	%01000100	; NEWCENTURY
    402  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    403  2bb0				  -
    404  2bb0				  -			;byte %00000000 ; NEWCENTURY
    405  2bb0				  -
    406  2bb0				  -	      .byte	%01111110	; NEWCENTURY
    407  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    408  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    409  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    410  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    411  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    412  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    413  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    414  2bb0				  -
    415  2bb0				  -			;byte %00000000 ; NEWCENTURY
    416  2bb0				  -
    417  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    418  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    419  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    420  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    421  2bb0				  -	      .byte	%01111100	; NEWCENTURY
    422  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    423  2bb0				  -	      .byte	%01000000	; NEWCENTURY
    424  2bb0				  -	      .byte	%01111000	; NEWCENTURY
    425  2bb0				  -
    426  2bb0				  -			;byte %00000000 ; NEWCENTURY
    427  2bb0				  -			;byte %00000000 ; NEWCENTURY
    428  2bb0				  -			;byte %00000000 ; NEWCENTURY
    429  2bb0				  -			;byte %00000000 ; NEWCENTURY
    430  2bb0				  -
    431  2bb0				  -	      endif		; fontcharsHEX 
    432  2bb0					      endif		; NEWCENTURY
    433  2bb0
    434  2bb0				  -	      if	fontstyle == WHIMSEY
    435  2bb0				  -			;byte %00000000 ; WHIMSEY
    436  2bb0				  -
    437  2bb0				  -	      .byte	%00111100	; WHIMSEY
    438  2bb0				  -	      .byte	%01111110	; WHIMSEY
    439  2bb0				  -	      .byte	%01111110	; WHIMSEY
    440  2bb0				  -	      .byte	%01111110	; WHIMSEY
    441  2bb0				  -	      .byte	%01110110	; WHIMSEY
    442  2bb0				  -	      .byte	%01110110	; WHIMSEY
    443  2bb0				  -	      .byte	%01110110	; WHIMSEY
    444  2bb0				  -	      .byte	%00111100	; WHIMSEY
    445  2bb0				  -
    446  2bb0				  -			;byte %00000000 ; WHIMSEY
    447  2bb0				  -
    448  2bb0				  -	      .byte	%01111110	; WHIMSEY
    449  2bb0				  -	      .byte	%01111110	; WHIMSEY
    450  2bb0				  -	      .byte	%01111110	; WHIMSEY
    451  2bb0				  -	      .byte	%00011000	; WHIMSEY
    452  2bb0				  -	      .byte	%00011000	; WHIMSEY
    453  2bb0				  -	      .byte	%00011000	; WHIMSEY
    454  2bb0				  -	      .byte	%01111000	; WHIMSEY
    455  2bb0				  -	      .byte	%00011000	; WHIMSEY
    456  2bb0				  -
    457  2bb0				  -			;byte %00000000 ; WHIMSEY
    458  2bb0				  -
    459  2bb0				  -	      .byte	%01111110	; WHIMSEY
    460  2bb0				  -	      .byte	%01111110	; WHIMSEY
    461  2bb0				  -	      .byte	%01111110	; WHIMSEY
    462  2bb0				  -	      .byte	%01111000	; WHIMSEY
    463  2bb0				  -	      .byte	%00111100	; WHIMSEY
    464  2bb0				  -	      .byte	%00001110	; WHIMSEY
    465  2bb0				  -	      .byte	%01100110	; WHIMSEY
    466  2bb0				  -	      .byte	%00111100	; WHIMSEY
    467  2bb0				  -
    468  2bb0				  -			;byte %00000000 ; WHIMSEY
    469  2bb0				  -
    470  2bb0				  -	      .byte	%00111100	; WHIMSEY
    471  2bb0				  -	      .byte	%01111110	; WHIMSEY
    472  2bb0				  -	      .byte	%01111110	; WHIMSEY
    473  2bb0				  -	      .byte	%01101110	; WHIMSEY
    474  2bb0				  -	      .byte	%00001110	; WHIMSEY
    475  2bb0				  -	      .byte	%00111100	; WHIMSEY
    476  2bb0				  -	      .byte	%00011100	; WHIMSEY
    477  2bb0				  -	      .byte	%01111110	; WHIMSEY
    478  2bb0				  -
    479  2bb0				  -			;byte %00000000 ; WHIMSEY
    480  2bb0				  -
    481  2bb0				  -	      .byte	%00011100	; WHIMSEY
    482  2bb0				  -	      .byte	%00011100	; WHIMSEY
    483  2bb0				  -	      .byte	%01111110	; WHIMSEY
    484  2bb0				  -	      .byte	%01011100	; WHIMSEY
    485  2bb0				  -	      .byte	%01011100	; WHIMSEY
    486  2bb0				  -	      .byte	%00011100	; WHIMSEY
    487  2bb0				  -	      .byte	%00011100	; WHIMSEY
    488  2bb0				  -	      .byte	%00011100	; WHIMSEY
    489  2bb0				  -
    490  2bb0				  -			;byte %00000000 ; WHIMSEY
    491  2bb0				  -
    492  2bb0				  -	      .byte	%00111100	; WHIMSEY
    493  2bb0				  -	      .byte	%01111110	; WHIMSEY
    494  2bb0				  -	      .byte	%01111110	; WHIMSEY
    495  2bb0				  -	      .byte	%01101110	; WHIMSEY
    496  2bb0				  -	      .byte	%00001110	; WHIMSEY
    497  2bb0				  -	      .byte	%01111100	; WHIMSEY
    498  2bb0				  -	      .byte	%01110000	; WHIMSEY
    499  2bb0				  -	      .byte	%01111110	; WHIMSEY
    500  2bb0				  -
    501  2bb0				  -			;byte %00000000 ; WHIMSEY
    502  2bb0				  -
    503  2bb0				  -	      .byte	%00111100	; WHIMSEY
    504  2bb0				  -	      .byte	%01111110	; WHIMSEY
    505  2bb0				  -	      .byte	%01111110	; WHIMSEY
    506  2bb0				  -	      .byte	%01110110	; WHIMSEY
    507  2bb0				  -	      .byte	%01110110	; WHIMSEY
    508  2bb0				  -	      .byte	%01111100	; WHIMSEY
    509  2bb0				  -	      .byte	%01110000	; WHIMSEY
    510  2bb0				  -	      .byte	%00111110	; WHIMSEY
    511  2bb0				  -
    512  2bb0				  -			;byte %00000000 ; WHIMSEY
    513  2bb0				  -
    514  2bb0				  -	      .byte	%01111000	; WHIMSEY
    515  2bb0				  -	      .byte	%01111000	; WHIMSEY
    516  2bb0				  -	      .byte	%01111000	; WHIMSEY
    517  2bb0				  -	      .byte	%00111100	; WHIMSEY
    518  2bb0				  -	      .byte	%00011100	; WHIMSEY
    519  2bb0				  -	      .byte	%00001110	; WHIMSEY
    520  2bb0				  -	      .byte	%00001110	; WHIMSEY
    521  2bb0				  -	      .byte	%01111110	; WHIMSEY
    522  2bb0				  -
    523  2bb0				  -			;byte %00000000 ; WHIMSEY
    524  2bb0				  -
    525  2bb0				  -	      .byte	%00111100	; WHIMSEY
    526  2bb0				  -	      .byte	%01111110	; WHIMSEY
    527  2bb0				  -	      .byte	%01111110	; WHIMSEY
    528  2bb0				  -	      .byte	%01110110	; WHIMSEY
    529  2bb0				  -	      .byte	%01110110	; WHIMSEY
    530  2bb0				  -	      .byte	%00111100	; WHIMSEY
    531  2bb0				  -	      .byte	%01110110	; WHIMSEY
    532  2bb0				  -	      .byte	%00111100	; WHIMSEY
    533  2bb0				  -
    534  2bb0				  -			;byte %00000000 ; WHIMSEY
    535  2bb0				  -
    536  2bb0				  -	      .byte	%00111100	; WHIMSEY
    537  2bb0				  -	      .byte	%01111110	; WHIMSEY
    538  2bb0				  -	      .byte	%01111110	; WHIMSEY
    539  2bb0				  -	      .byte	%01110110	; WHIMSEY
    540  2bb0				  -	      .byte	%00000110	; WHIMSEY
    541  2bb0				  -	      .byte	%00111110	; WHIMSEY
    542  2bb0				  -	      .byte	%01110110	; WHIMSEY
    543  2bb0				  -	      .byte	%00111100	; WHIMSEY
    544  2bb0				  -
    545  2bb0				  -	      ifconst	fontcharsHEX
    546  2bb0				  -
    547  2bb0				  -			;byte %00000000 ; WHIMSEY
    548  2bb0				  -
    549  2bb0				  -	      .byte	%01110110	; WHIMSEY
    550  2bb0				  -	      .byte	%01110110	; WHIMSEY
    551  2bb0				  -	      .byte	%01111110	; WHIMSEY
    552  2bb0				  -	      .byte	%01111110	; WHIMSEY
    553  2bb0				  -	      .byte	%01111110	; WHIMSEY
    554  2bb0				  -	      .byte	%01110110	; WHIMSEY
    555  2bb0				  -	      .byte	%01110110	; WHIMSEY
    556  2bb0				  -	      .byte	%00111100	; WHIMSEY
    557  2bb0				  -
    558  2bb0				  -			;byte %00000000 ; WHIMSEY
    559  2bb0				  -
    560  2bb0				  -	      .byte	%01111100	; WHIMSEY
    561  2bb0				  -	      .byte	%01111110	; WHIMSEY
    562  2bb0				  -	      .byte	%01111110	; WHIMSEY
    563  2bb0				  -	      .byte	%01110110	; WHIMSEY
    564  2bb0				  -	      .byte	%01110110	; WHIMSEY
    565  2bb0				  -	      .byte	%01111100	; WHIMSEY
    566  2bb0				  -	      .byte	%01110110	; WHIMSEY
    567  2bb0				  -	      .byte	%01111100	; WHIMSEY
    568  2bb0				  -
    569  2bb0				  -			;byte %00000000 ; WHIMSEY
    570  2bb0				  -
    571  2bb0				  -	      .byte	%00111100	; WHIMSEY
    572  2bb0				  -	      .byte	%01111110	; WHIMSEY
    573  2bb0				  -	      .byte	%01111110	; WHIMSEY
    574  2bb0				  -	      .byte	%01110110	; WHIMSEY
    575  2bb0				  -	      .byte	%01110000	; WHIMSEY
    576  2bb0				  -	      .byte	%01110000	; WHIMSEY
    577  2bb0				  -	      .byte	%01110110	; WHIMSEY
    578  2bb0				  -	      .byte	%00111100	; WHIMSEY
    579  2bb0				  -
    580  2bb0				  -			;byte %00000000 ; WHIMSEY
    581  2bb0				  -
    582  2bb0				  -	      .byte	%01111100	; WHIMSEY
    583  2bb0				  -	      .byte	%01111110	; WHIMSEY
    584  2bb0				  -	      .byte	%01111110	; WHIMSEY
    585  2bb0				  -	      .byte	%01111110	; WHIMSEY
    586  2bb0				  -	      .byte	%01110110	; WHIMSEY
    587  2bb0				  -	      .byte	%01110110	; WHIMSEY
    588  2bb0				  -	      .byte	%01110110	; WHIMSEY
    589  2bb0				  -	      .byte	%01111100	; WHIMSEY
    590  2bb0				  -
    591  2bb0				  -			;byte %00000000 ; WHIMSEY
    592  2bb0				  -
    593  2bb0				  -	      .byte	%01111110	; WHIMSEY
    594  2bb0				  -	      .byte	%01111110	; WHIMSEY
    595  2bb0				  -	      .byte	%01111110	; WHIMSEY
    596  2bb0				  -	      .byte	%01110000	; WHIMSEY
    597  2bb0				  -	      .byte	%01110000	; WHIMSEY
    598  2bb0				  -	      .byte	%01111100	; WHIMSEY
    599  2bb0				  -	      .byte	%01110000	; WHIMSEY
    600  2bb0				  -	      .byte	%01111100	; WHIMSEY
    601  2bb0				  -
    602  2bb0				  -			;byte %00000000 ; WHIMSEY
    603  2bb0				  -
    604  2bb0				  -	      .byte	%01110000	; WHIMSEY
    605  2bb0				  -	      .byte	%01110000	; WHIMSEY
    606  2bb0				  -	      .byte	%01110000	; WHIMSEY
    607  2bb0				  -	      .byte	%01110000	; WHIMSEY
    608  2bb0				  -	      .byte	%01110000	; WHIMSEY
    609  2bb0				  -	      .byte	%01111100	; WHIMSEY
    610  2bb0				  -	      .byte	%01110000	; WHIMSEY
    611  2bb0				  -	      .byte	%01111100	; WHIMSEY
    612  2bb0				  -
    613  2bb0				  -			;byte %00000000 ; WHIMSEY
    614  2bb0				  -			;byte %00000000 ; WHIMSEY
    615  2bb0				  -			;byte %00000000 ; WHIMSEY
    616  2bb0				  -			;byte %00000000 ; WHIMSEY
    617  2bb0				  -
    618  2bb0				  -	      endif		; fontcharsHEX
    619  2bb0					      endif		; WHIMSEY
    620  2bb0
    621  2bb0				  -	      if	fontstyle == ALARMCLOCK
    622  2bb0				  -
    623  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    624  2bb0				  -
    625  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    626  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    627  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    628  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    629  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    630  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    631  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    632  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    633  2bb0				  -
    634  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    635  2bb0				  -
    636  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    637  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    638  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    639  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    640  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    641  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    642  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    643  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    644  2bb0				  -
    645  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    646  2bb0				  -
    647  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    648  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    649  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    650  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    651  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    652  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    653  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    654  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    655  2bb0				  -
    656  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    657  2bb0				  -
    658  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    659  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    660  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    661  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    662  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    663  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    664  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    665  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    666  2bb0				  -
    667  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    668  2bb0				  -
    669  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    670  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    671  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    672  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    673  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    674  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    675  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    676  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    677  2bb0				  -
    678  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    679  2bb0				  -
    680  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    681  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    682  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    683  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    684  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    685  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    686  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    687  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    688  2bb0				  -
    689  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    690  2bb0				  -
    691  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    692  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    693  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    694  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    695  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    696  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    697  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    698  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    699  2bb0				  -
    700  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    701  2bb0				  -
    702  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    703  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    704  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    705  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    706  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    707  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    708  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    709  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    710  2bb0				  -
    711  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    712  2bb0				  -
    713  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    714  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    715  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    716  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    717  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    718  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    719  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    720  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    721  2bb0				  -
    722  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    723  2bb0				  -
    724  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    725  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    726  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    727  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    728  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    729  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    730  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    731  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    732  2bb0				  -
    733  2bb0				  -
    734  2bb0				  -	      ifconst	fontcharsHEX
    735  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    736  2bb0				  -
    737  2bb0				  -
    738  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    739  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    740  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    741  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    742  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    743  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    744  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    745  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    746  2bb0				  -
    747  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    748  2bb0				  -
    749  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    750  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    751  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    752  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    753  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    754  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    755  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    756  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    757  2bb0				  -
    758  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    759  2bb0				  -
    760  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    761  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    762  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    763  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    764  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    765  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    766  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    767  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    768  2bb0				  -
    769  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    770  2bb0				  -
    771  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    772  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    773  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    774  2bb0				  -	      .byte	%01000010	; ALARMCLOCK
    775  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    776  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    777  2bb0				  -	      .byte	%00000010	; ALARMCLOCK
    778  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    779  2bb0				  -
    780  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    781  2bb0				  -
    782  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    783  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    784  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    785  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    786  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    787  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    788  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    789  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    790  2bb0				  -
    791  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    792  2bb0				  -
    793  2bb0				  -	      .byte	%00000000	; ALARMCLOCK
    794  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    795  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    796  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    797  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    798  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    799  2bb0				  -	      .byte	%01000000	; ALARMCLOCK
    800  2bb0				  -	      .byte	%00111100	; ALARMCLOCK
    801  2bb0				  -
    802  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    803  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    804  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    805  2bb0				  -			;byte %00000000 ; ALARMCLOCK
    806  2bb0				  -
    807  2bb0				  -	      endif		; fontcharsHEX
    808  2bb0					      endif		; ALARMCLOCK
    809  2bb0
    810  2bb0				  -	      if	fontstyle == HANDWRITTEN
    811  2bb0				  -
    812  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    813  2bb0				  -
    814  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    815  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    816  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    817  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    818  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    819  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    820  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    821  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    822  2bb0				  -
    823  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    824  2bb0				  -
    825  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    826  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    827  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    828  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    829  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    830  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    831  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    832  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    833  2bb0				  -
    834  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    835  2bb0				  -
    836  2bb0				  -	      .byte	%01110000	; HANDWRITTEN
    837  2bb0				  -	      .byte	%01001100	; HANDWRITTEN
    838  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    839  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    840  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    841  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    842  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    843  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    844  2bb0				  -
    845  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    846  2bb0				  -
    847  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    848  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    849  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    850  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    851  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    852  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    853  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    854  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    855  2bb0				  -
    856  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    857  2bb0				  -
    858  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    859  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    860  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    861  2bb0				  -	      .byte	%01111000	; HANDWRITTEN
    862  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    863  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    864  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    865  2bb0				  -	      .byte	%00000010	; HANDWRITTEN
    866  2bb0				  -
    867  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    868  2bb0				  -
    869  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    870  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    871  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    872  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    873  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    874  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    875  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    876  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    877  2bb0				  -
    878  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    879  2bb0				  -
    880  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    881  2bb0				  -	      .byte	%00101000	; HANDWRITTEN
    882  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    883  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    884  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    885  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    886  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    887  2bb0				  -	      .byte	%00000110	; HANDWRITTEN
    888  2bb0				  -
    889  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    890  2bb0				  -
    891  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    892  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    893  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    894  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    895  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    896  2bb0				  -	      .byte	%00000100	; HANDWRITTEN
    897  2bb0				  -	      .byte	%00110010	; HANDWRITTEN
    898  2bb0				  -	      .byte	%00001110	; HANDWRITTEN
    899  2bb0				  -
    900  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    901  2bb0				  -
    902  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    903  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    904  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    905  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    906  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    907  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    908  2bb0				  -	      .byte	%00001010	; HANDWRITTEN
    909  2bb0				  -	      .byte	%00000110	; HANDWRITTEN
    910  2bb0				  -
    911  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    912  2bb0				  -
    913  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    914  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    915  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    916  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    917  2bb0				  -	      .byte	%00011100	; HANDWRITTEN
    918  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    919  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    920  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    921  2bb0				  -
    922  2bb0				  -	      ifconst	fontcharsHEX
    923  2bb0				  -
    924  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    925  2bb0				  -
    926  2bb0				  -	      .byte	%00110110	; HANDWRITTEN
    927  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    928  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    929  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    930  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    931  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    932  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    933  2bb0				  -	      .byte	%00001110	; HANDWRITTEN
    934  2bb0				  -
    935  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    936  2bb0				  -
    937  2bb0				  -	      .byte	%11110000	; HANDWRITTEN
    938  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    939  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    940  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    941  2bb0				  -	      .byte	%00111100	; HANDWRITTEN
    942  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    943  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    944  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    945  2bb0				  -
    946  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    947  2bb0				  -
    948  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    949  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    950  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    951  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    952  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    953  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    954  2bb0				  -	      .byte	%00010100	; HANDWRITTEN
    955  2bb0				  -	      .byte	%00001000	; HANDWRITTEN
    956  2bb0				  -
    957  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    958  2bb0				  -
    959  2bb0				  -	      .byte	%01111000	; HANDWRITTEN
    960  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    961  2bb0				  -	      .byte	%01000100	; HANDWRITTEN
    962  2bb0				  -	      .byte	%00100100	; HANDWRITTEN
    963  2bb0				  -	      .byte	%00100010	; HANDWRITTEN
    964  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    965  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    966  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    967  2bb0				  -
    968  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    969  2bb0				  -
    970  2bb0				  -	      .byte	%00110000	; HANDWRITTEN
    971  2bb0				  -	      .byte	%01001000	; HANDWRITTEN
    972  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    973  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    974  2bb0				  -	      .byte	%00011000	; HANDWRITTEN
    975  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    976  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    977  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    978  2bb0				  -
    979  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    980  2bb0				  -
    981  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    982  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    983  2bb0				  -	      .byte	%01000000	; HANDWRITTEN
    984  2bb0				  -	      .byte	%00100000	; HANDWRITTEN
    985  2bb0				  -	      .byte	%00111000	; HANDWRITTEN
    986  2bb0				  -	      .byte	%00010000	; HANDWRITTEN
    987  2bb0				  -	      .byte	%00010010	; HANDWRITTEN
    988  2bb0				  -	      .byte	%00001100	; HANDWRITTEN
    989  2bb0				  -
    990  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    991  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    992  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    993  2bb0				  -			;byte %00000000 ; HANDWRITTEN
    994  2bb0				  -
    995  2bb0				  -	      endif		; fontcharsHEX
    996  2bb0					      endif		; HANDWRITTEN
    997  2bb0
    998  2bb0				  -	      if	fontstyle == INTERRUPTED
    999  2bb0				  -
   1000  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1001  2bb0				  -
   1002  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1003  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1004  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1005  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1006  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1007  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1008  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1009  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1010  2bb0				  -
   1011  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1012  2bb0				  -
   1013  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1014  2bb0				  -	      .byte	%00000000	; INTERRUPTED
   1015  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1016  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1017  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1018  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1019  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1020  2bb0				  -	      .byte	%00111000	; INTERRUPTED
   1021  2bb0				  -
   1022  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1023  2bb0				  -
   1024  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1025  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1026  2bb0				  -	      .byte	%00110000	; INTERRUPTED
   1027  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1028  2bb0				  -	      .byte	%00001100	; INTERRUPTED
   1029  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1030  2bb0				  -	      .byte	%01000110	; INTERRUPTED
   1031  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1032  2bb0				  -
   1033  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1034  2bb0				  -
   1035  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1036  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1037  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1038  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1039  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1040  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1041  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1042  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1043  2bb0				  -
   1044  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1045  2bb0				  -
   1046  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1047  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1048  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1049  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1050  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1051  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1052  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1053  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1054  2bb0				  -
   1055  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1056  2bb0				  -
   1057  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1058  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1059  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1060  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1061  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1062  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1063  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1064  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1065  2bb0				  -
   1066  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1067  2bb0				  -
   1068  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1069  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1070  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1071  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1072  2bb0				  -	      .byte	%01101100	; INTERRUPTED
   1073  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1074  2bb0				  -	      .byte	%00110000	; INTERRUPTED
   1075  2bb0				  -	      .byte	%00011100	; INTERRUPTED
   1076  2bb0				  -
   1077  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1078  2bb0				  -
   1079  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1080  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1081  2bb0				  -	      .byte	%00011000	; INTERRUPTED
   1082  2bb0				  -	      .byte	%00011100	; INTERRUPTED
   1083  2bb0				  -	      .byte	%00001110	; INTERRUPTED
   1084  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1085  2bb0				  -	      .byte	%00000000	; INTERRUPTED
   1086  2bb0				  -	      .byte	%01111110	; INTERRUPTED
   1087  2bb0				  -
   1088  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1089  2bb0				  -
   1090  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1091  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1092  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1093  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1094  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1095  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1096  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1097  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1098  2bb0				  -
   1099  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1100  2bb0				  -
   1101  2bb0				  -	      .byte	%00111000	; INTERRUPTED
   1102  2bb0				  -	      .byte	%00001100	; INTERRUPTED
   1103  2bb0				  -	      .byte	%00000110	; INTERRUPTED
   1104  2bb0				  -	      .byte	%00110110	; INTERRUPTED
   1105  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1106  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1107  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1108  2bb0				  -	      .byte	%00110100	; INTERRUPTED
   1109  2bb0				  -
   1110  2bb0				  -	      ifconst	fontcharsHEX
   1111  2bb0				  -
   1112  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1113  2bb0				  -
   1114  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1115  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1116  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1117  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1118  2bb0				  -	      .byte	%01110110	; INTERRUPTED
   1119  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1120  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1121  2bb0				  -	      .byte	%00111100	; INTERRUPTED
   1122  2bb0				  -
   1123  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1124  2bb0				  -
   1125  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1126  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1127  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1128  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1129  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1130  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1131  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1132  2bb0				  -	      .byte	%01110100	; INTERRUPTED
   1133  2bb0				  -
   1134  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1135  2bb0				  -
   1136  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1137  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1138  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1139  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1140  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1141  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1142  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1143  2bb0				  -	      .byte	%00101100	; INTERRUPTED
   1144  2bb0				  -
   1145  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1146  2bb0				  -
   1147  2bb0				  -	      .byte	%01111100	; INTERRUPTED
   1148  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1149  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1150  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1151  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1152  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1153  2bb0				  -	      .byte	%01100110	; INTERRUPTED
   1154  2bb0				  -	      .byte	%01101100	; INTERRUPTED
   1155  2bb0				  -
   1156  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1157  2bb0				  -
   1158  2bb0				  -	      .byte	%01111110	; INTERRUPTED
   1159  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1160  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1161  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1162  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1163  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1164  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1165  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1166  2bb0				  -
   1167  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1168  2bb0				  -
   1169  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1170  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1171  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1172  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1173  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1174  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1175  2bb0				  -	      .byte	%01100000	; INTERRUPTED
   1176  2bb0				  -	      .byte	%01101110	; INTERRUPTED
   1177  2bb0				  -
   1178  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1179  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1180  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1181  2bb0				  -			;byte %00000000 ; INTERRUPTED
   1182  2bb0				  -
   1183  2bb0				  -	      endif		; fontcharsHEX
   1184  2bb0					      endif		; INTERRUPTED
   1185  2bb0
   1186  2bb0
   1187  2bb0				  -	      if	fontstyle == TINY
   1188  2bb0				  -
   1189  2bb0				  -			;byte %00000000 ; TINY
   1190  2bb0				  -
   1191  2bb0				  -	      .byte	%00000000	; TINY
   1192  2bb0				  -	      .byte	%00111000	; TINY
   1193  2bb0				  -	      .byte	%00101000	; TINY
   1194  2bb0				  -	      .byte	%00101000	; TINY
   1195  2bb0				  -	      .byte	%00101000	; TINY
   1196  2bb0				  -	      .byte	%00111000	; TINY
   1197  2bb0				  -	      .byte	%00000000	; TINY
   1198  2bb0				  -	      .byte	%00000000	; TINY
   1199  2bb0				  -
   1200  2bb0				  -			;byte %00000000 ; TINY
   1201  2bb0				  -
   1202  2bb0				  -	      .byte	%00000000	; TINY
   1203  2bb0				  -	      .byte	%00010000	; TINY
   1204  2bb0				  -	      .byte	%00010000	; TINY
   1205  2bb0				  -	      .byte	%00010000	; TINY
   1206  2bb0				  -	      .byte	%00010000	; TINY
   1207  2bb0				  -	      .byte	%00010000	; TINY
   1208  2bb0				  -	      .byte	%00000000	; TINY
   1209  2bb0				  -	      .byte	%00000000	; TINY
   1210  2bb0				  -
   1211  2bb0				  -			;byte %00000000 ; TINY
   1212  2bb0				  -
   1213  2bb0				  -	      .byte	%00000000	; TINY
   1214  2bb0				  -	      .byte	%00111000	; TINY
   1215  2bb0				  -	      .byte	%00100000	; TINY
   1216  2bb0				  -	      .byte	%00111000	; TINY
   1217  2bb0				  -	      .byte	%00001000	; TINY
   1218  2bb0				  -	      .byte	%00111000	; TINY
   1219  2bb0				  -	      .byte	%00000000	; TINY
   1220  2bb0				  -	      .byte	%00000000	; TINY
   1221  2bb0				  -
   1222  2bb0				  -			;byte %00000000 ; TINY
   1223  2bb0				  -
   1224  2bb0				  -	      .byte	%00000000	; TINY
   1225  2bb0				  -	      .byte	%00111000	; TINY
   1226  2bb0				  -	      .byte	%00001000	; TINY
   1227  2bb0				  -	      .byte	%00111000	; TINY
   1228  2bb0				  -	      .byte	%00001000	; TINY
   1229  2bb0				  -	      .byte	%00111000	; TINY
   1230  2bb0				  -	      .byte	%00000000	; TINY
   1231  2bb0				  -	      .byte	%00000000	; TINY
   1232  2bb0				  -
   1233  2bb0				  -			;byte %00000000 ; TINY
   1234  2bb0				  -
   1235  2bb0				  -	      .byte	%00000000	; TINY
   1236  2bb0				  -	      .byte	%00001000	; TINY
   1237  2bb0				  -	      .byte	%00001000	; TINY
   1238  2bb0				  -	      .byte	%00111000	; TINY
   1239  2bb0				  -	      .byte	%00101000	; TINY
   1240  2bb0				  -	      .byte	%00101000	; TINY
   1241  2bb0				  -	      .byte	%00000000	; TINY
   1242  2bb0				  -	      .byte	%00000000	; TINY
   1243  2bb0				  -
   1244  2bb0				  -			;byte %00000000 ; TINY
   1245  2bb0				  -
   1246  2bb0				  -	      .byte	%00000000	; TINY
   1247  2bb0				  -	      .byte	%00111000	; TINY
   1248  2bb0				  -	      .byte	%00001000	; TINY
   1249  2bb0				  -	      .byte	%00111000	; TINY
   1250  2bb0				  -	      .byte	%00100000	; TINY
   1251  2bb0				  -	      .byte	%00111000	; TINY
   1252  2bb0				  -	      .byte	%00000000	; TINY
   1253  2bb0				  -	      .byte	%00000000	; TINY
   1254  2bb0				  -
   1255  2bb0				  -			;byte %00000000 ; TINY
   1256  2bb0				  -
   1257  2bb0				  -	      .byte	%00000000	; TINY
   1258  2bb0				  -	      .byte	%00111000	; TINY
   1259  2bb0				  -	      .byte	%00101000	; TINY
   1260  2bb0				  -	      .byte	%00111000	; TINY
   1261  2bb0				  -	      .byte	%00100000	; TINY
   1262  2bb0				  -	      .byte	%00111000	; TINY
   1263  2bb0				  -	      .byte	%00000000	; TINY
   1264  2bb0				  -	      .byte	%00000000	; TINY
   1265  2bb0				  -
   1266  2bb0				  -			;byte %00000000 ; TINY
   1267  2bb0				  -
   1268  2bb0				  -	      .byte	%00000000	; TINY
   1269  2bb0				  -	      .byte	%00001000	; TINY
   1270  2bb0				  -	      .byte	%00001000	; TINY
   1271  2bb0				  -	      .byte	%00001000	; TINY
   1272  2bb0				  -	      .byte	%00001000	; TINY
   1273  2bb0				  -	      .byte	%00111000	; TINY
   1274  2bb0				  -	      .byte	%00000000	; TINY
   1275  2bb0				  -	      .byte	%00000000	; TINY
   1276  2bb0				  -
   1277  2bb0				  -			;byte %00000000 ; TINY
   1278  2bb0				  -
   1279  2bb0				  -	      .byte	%00000000	; TINY
   1280  2bb0				  -	      .byte	%00111000	; TINY
   1281  2bb0				  -	      .byte	%00101000	; TINY
   1282  2bb0				  -	      .byte	%00111000	; TINY
   1283  2bb0				  -	      .byte	%00101000	; TINY
   1284  2bb0				  -	      .byte	%00111000	; TINY
   1285  2bb0				  -	      .byte	%00000000	; TINY
   1286  2bb0				  -	      .byte	%00000000	; TINY
   1287  2bb0				  -
   1288  2bb0				  -			;byte %00000000 ; TINY
   1289  2bb0				  -
   1290  2bb0				  -	      .byte	%00000000	; TINY
   1291  2bb0				  -	      .byte	%00001000	; TINY
   1292  2bb0				  -	      .byte	%00001000	; TINY
   1293  2bb0				  -	      .byte	%00111000	; TINY
   1294  2bb0				  -	      .byte	%00101000	; TINY
   1295  2bb0				  -	      .byte	%00111000	; TINY
   1296  2bb0				  -	      .byte	%00000000	; TINY
   1297  2bb0				  -	      .byte	%00000000	; TINY
   1298  2bb0				  -
   1299  2bb0				  -	      ifconst	fontcharsHEX
   1300  2bb0				  -
   1301  2bb0				  -			;byte %00000000 ; TINY
   1302  2bb0				  -
   1303  2bb0				  -	      .byte	%00000000	; TINY
   1304  2bb0				  -	      .byte	%00101000	; TINY
   1305  2bb0				  -	      .byte	%00101000	; TINY
   1306  2bb0				  -	      .byte	%00111000	; TINY
   1307  2bb0				  -	      .byte	%00101000	; TINY
   1308  2bb0				  -	      .byte	%00111000	; TINY
   1309  2bb0				  -	      .byte	%00000000	; TINY
   1310  2bb0				  -	      .byte	%00000000	; TINY
   1311  2bb0				  -
   1312  2bb0				  -			;byte %00000000 ; TINY
   1313  2bb0				  -
   1314  2bb0				  -	      .byte	%00000000	; TINY
   1315  2bb0				  -	      .byte	%00110000	; TINY
   1316  2bb0				  -	      .byte	%00101000	; TINY
   1317  2bb0				  -	      .byte	%00110000	; TINY
   1318  2bb0				  -	      .byte	%00101000	; TINY
   1319  2bb0				  -	      .byte	%00110000	; TINY
   1320  2bb0				  -	      .byte	%00000000	; TINY
   1321  2bb0				  -	      .byte	%00000000	; TINY
   1322  2bb0				  -
   1323  2bb0				  -			;byte %00000000 ; TINY
   1324  2bb0				  -
   1325  2bb0				  -	      .byte	%00000000	; TINY
   1326  2bb0				  -	      .byte	%00111000	; TINY
   1327  2bb0				  -	      .byte	%00100000	; TINY
   1328  2bb0				  -	      .byte	%00100000	; TINY
   1329  2bb0				  -	      .byte	%00100000	; TINY
   1330  2bb0				  -	      .byte	%00111000	; TINY
   1331  2bb0				  -	      .byte	%00000000	; TINY
   1332  2bb0				  -	      .byte	%00000000	; TINY
   1333  2bb0				  -
   1334  2bb0				  -			;byte %00000000 ; TINY
   1335  2bb0				  -
   1336  2bb0				  -	      .byte	%00000000	; TINY
   1337  2bb0				  -	      .byte	%00110000	; TINY
   1338  2bb0				  -	      .byte	%00101000	; TINY
   1339  2bb0				  -	      .byte	%00101000	; TINY
   1340  2bb0				  -	      .byte	%00101000	; TINY
   1341  2bb0				  -	      .byte	%00110000	; TINY
   1342  2bb0				  -	      .byte	%00000000	; TINY
   1343  2bb0				  -	      .byte	%00000000	; TINY
   1344  2bb0				  -
   1345  2bb0				  -			;byte %00000000 ; TINY
   1346  2bb0				  -
   1347  2bb0				  -	      .byte	%00000000	; TINY
   1348  2bb0				  -	      .byte	%00111000	; TINY
   1349  2bb0				  -	      .byte	%00100000	; TINY
   1350  2bb0				  -	      .byte	%00111000	; TINY
   1351  2bb0				  -	      .byte	%00100000	; TINY
   1352  2bb0				  -	      .byte	%00111000	; TINY
   1353  2bb0				  -	      .byte	%00000000	; TINY
   1354  2bb0				  -	      .byte	%00000000	; TINY
   1355  2bb0				  -
   1356  2bb0				  -			;byte %00000000 ; TINY
   1357  2bb0				  -
   1358  2bb0				  -	      .byte	%00000000	; TINY
   1359  2bb0				  -	      .byte	%00100000	; TINY
   1360  2bb0				  -	      .byte	%00100000	; TINY
   1361  2bb0				  -	      .byte	%00111000	; TINY
   1362  2bb0				  -	      .byte	%00100000	; TINY
   1363  2bb0				  -	      .byte	%00111000	; TINY
   1364  2bb0				  -	      .byte	%00000000	; TINY
   1365  2bb0				  -	      .byte	%00000000	; TINY
   1366  2bb0				  -
   1367  2bb0				  -			;byte %00000000 ; TINY
   1368  2bb0				  -			;byte %00000000 ; TINY
   1369  2bb0				  -			;byte %00000000 ; TINY
   1370  2bb0				  -			;byte %00000000 ; TINY
   1371  2bb0				  -
   1372  2bb0				  -	      endif		; fontcharsHEX
   1373  2bb0					      endif		; TINY
   1374  2bb0
   1375  2bb0				  -	      if	fontstyle == RETROPUTER
   1376  2bb0				  -
   1377  2bb0				  -			;byte %00000000 ; RETROPUTER
   1378  2bb0				  -
   1379  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1380  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1381  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1382  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1383  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1384  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1385  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1386  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1387  2bb0				  -
   1388  2bb0				  -			;byte %00000000 ; RETROPUTER
   1389  2bb0				  -
   1390  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1391  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1392  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1393  2bb0				  -	      .byte	%00111000	; RETROPUTER
   1394  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1395  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1396  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1397  2bb0				  -	      .byte	%00011000	; RETROPUTER
   1398  2bb0				  -
   1399  2bb0				  -			;byte %00000000 ; RETROPUTER
   1400  2bb0				  -
   1401  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1402  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1403  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1404  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1405  2bb0				  -	      .byte	%00111110	; RETROPUTER
   1406  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1407  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1408  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1409  2bb0				  -
   1410  2bb0				  -			;byte %00000000 ; RETROPUTER
   1411  2bb0				  -
   1412  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1413  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1414  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1415  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1416  2bb0				  -	      .byte	%00111110	; RETROPUTER
   1417  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1418  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1419  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1420  2bb0				  -
   1421  2bb0				  -			;byte %00000000 ; RETROPUTER
   1422  2bb0				  -
   1423  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1424  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1425  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1426  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1427  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1428  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1429  2bb0				  -	      .byte	%01000100	; RETROPUTER
   1430  2bb0				  -	      .byte	%00000100	; RETROPUTER
   1431  2bb0				  -
   1432  2bb0				  -			;byte %00000000 ; RETROPUTER
   1433  2bb0				  -
   1434  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1435  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1436  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1437  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1438  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1439  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1440  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1441  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1442  2bb0				  -
   1443  2bb0				  -			;byte %00000000 ; RETROPUTER
   1444  2bb0				  -
   1445  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1446  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1447  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1448  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1449  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1450  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1451  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1452  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1453  2bb0				  -
   1454  2bb0				  -			;byte %00000000 ; RETROPUTER
   1455  2bb0				  -
   1456  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1457  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1458  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1459  2bb0				  -	      .byte	%00001100	; RETROPUTER
   1460  2bb0				  -	      .byte	%00000100	; RETROPUTER
   1461  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1462  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1463  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1464  2bb0				  -
   1465  2bb0				  -			;byte %00000000 ; RETROPUTER
   1466  2bb0				  -
   1467  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1468  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1469  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1470  2bb0				  -	      .byte	%01000110	; RETROPUTER
   1471  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1472  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1473  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1474  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1475  2bb0				  -
   1476  2bb0				  -			;byte %00000000 ; RETROPUTER
   1477  2bb0				  -
   1478  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1479  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1480  2bb0				  -	      .byte	%00000110	; RETROPUTER
   1481  2bb0				  -	      .byte	%00000010	; RETROPUTER
   1482  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1483  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1484  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1485  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1486  2bb0				  -
   1487  2bb0				  -	      ifconst	fontcharsHEX
   1488  2bb0				  -
   1489  2bb0				  -			;byte %00000000  ; RETROPUTER
   1490  2bb0				  -
   1491  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1492  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1493  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1494  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1495  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1496  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1497  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1498  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1499  2bb0				  -
   1500  2bb0				  -			;byte %00000000 ; RETROPUTER
   1501  2bb0				  -
   1502  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1503  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1504  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1505  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1506  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1507  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1508  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1509  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1510  2bb0				  -
   1511  2bb0				  -			;byte %00000000 ; RETROPUTER
   1512  2bb0				  -
   1513  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1514  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1515  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1516  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1517  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1518  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1519  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1520  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1521  2bb0				  -
   1522  2bb0				  -			;byte %00000000 ; RETROPUTER
   1523  2bb0				  -
   1524  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1525  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1526  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1527  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1528  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1529  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1530  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1531  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1532  2bb0				  -
   1533  2bb0				  -			;byte %00000000 ; RETROPUTER
   1534  2bb0				  -
   1535  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1536  2bb0				  -	      .byte	%01100010	; RETROPUTER
   1537  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1538  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1539  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1540  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1541  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1542  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1543  2bb0				  -
   1544  2bb0				  -			;byte %00000000 ; RETROPUTER
   1545  2bb0				  -
   1546  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1547  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1548  2bb0				  -	      .byte	%01100000	; RETROPUTER
   1549  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1550  2bb0				  -	      .byte	%01111100	; RETROPUTER
   1551  2bb0				  -	      .byte	%01000000	; RETROPUTER
   1552  2bb0				  -	      .byte	%01000010	; RETROPUTER
   1553  2bb0				  -	      .byte	%01111110	; RETROPUTER
   1554  2bb0				  -
   1555  2bb0				  -			;byte %00000000 ; RETROPUTER
   1556  2bb0				  -			;byte %00000000 ; RETROPUTER
   1557  2bb0				  -			;byte %00000000 ; RETROPUTER
   1558  2bb0				  -			;byte %00000000 ; RETROPUTER
   1559  2bb0				  -
   1560  2bb0				  -	      endif		; fontcharsHEX
   1561  2bb0					      endif		; RETROPUTER
   1562  2bb0
   1563  2bb0				  -	      if	fontstyle == CURVES
   1564  2bb0				  -
   1565  2bb0				  -			;byte %00000000 ; CURVES
   1566  2bb0				  -
   1567  2bb0				  -	      .byte	%00111100	; CURVES
   1568  2bb0				  -	      .byte	%01111110	; CURVES
   1569  2bb0				  -	      .byte	%01100110	; CURVES
   1570  2bb0				  -	      .byte	%01100110	; CURVES
   1571  2bb0				  -	      .byte	%01100110	; CURVES
   1572  2bb0				  -	      .byte	%01100110	; CURVES
   1573  2bb0				  -	      .byte	%01111110	; CURVES
   1574  2bb0				  -	      .byte	%00111100	; CURVES
   1575  2bb0				  -
   1576  2bb0				  -			;byte %00000000 ; CURVES
   1577  2bb0				  -
   1578  2bb0				  -	      .byte	%00011000	; CURVES
   1579  2bb0				  -	      .byte	%00011000	; CURVES
   1580  2bb0				  -	      .byte	%00011000	; CURVES
   1581  2bb0				  -	      .byte	%00011000	; CURVES
   1582  2bb0				  -	      .byte	%00011000	; CURVES
   1583  2bb0				  -	      .byte	%00011000	; CURVES
   1584  2bb0				  -	      .byte	%01111000	; CURVES
   1585  2bb0				  -	      .byte	%01110000	; CURVES
   1586  2bb0				  -
   1587  2bb0				  -			;byte %00000000 ; CURVES
   1588  2bb0				  -
   1589  2bb0				  -	      .byte	%01111110	; CURVES
   1590  2bb0				  -	      .byte	%01111110	; CURVES
   1591  2bb0				  -	      .byte	%01100000	; CURVES
   1592  2bb0				  -	      .byte	%01111100	; CURVES
   1593  2bb0				  -	      .byte	%00111110	; CURVES
   1594  2bb0				  -	      .byte	%00000110	; CURVES
   1595  2bb0				  -	      .byte	%01111110	; CURVES
   1596  2bb0				  -	      .byte	%01111100	; CURVES
   1597  2bb0				  -
   1598  2bb0				  -			;byte %00000000 ; CURVES
   1599  2bb0				  -
   1600  2bb0				  -	      .byte	%01111100	; CURVES
   1601  2bb0				  -	      .byte	%01111110	; CURVES
   1602  2bb0				  -	      .byte	%00001110	; CURVES
   1603  2bb0				  -	      .byte	%00111100	; CURVES
   1604  2bb0				  -	      .byte	%00111100	; CURVES
   1605  2bb0				  -	      .byte	%00001110	; CURVES
   1606  2bb0				  -	      .byte	%01111110	; CURVES
   1607  2bb0				  -	      .byte	%01111100	; CURVES
   1608  2bb0				  -
   1609  2bb0				  -			;byte %00000000 ; CURVES
   1610  2bb0				  -
   1611  2bb0				  -	      .byte	%00000110	; CURVES
   1612  2bb0				  -	      .byte	%00000110	; CURVES
   1613  2bb0				  -	      .byte	%00111110	; CURVES
   1614  2bb0				  -	      .byte	%01111110	; CURVES
   1615  2bb0				  -	      .byte	%01100110	; CURVES
   1616  2bb0				  -	      .byte	%01100110	; CURVES
   1617  2bb0				  -	      .byte	%01100110	; CURVES
   1618  2bb0				  -	      .byte	%01100110	; CURVES
   1619  2bb0				  -
   1620  2bb0				  -			;byte %00000000 ; CURVES
   1621  2bb0				  -
   1622  2bb0				  -	      .byte	%01111100	; CURVES
   1623  2bb0				  -	      .byte	%01111110	; CURVES
   1624  2bb0				  -	      .byte	%00000110	; CURVES
   1625  2bb0				  -	      .byte	%01111110	; CURVES
   1626  2bb0				  -	      .byte	%01111100	; CURVES
   1627  2bb0				  -	      .byte	%01100000	; CURVES
   1628  2bb0				  -	      .byte	%01111110	; CURVES
   1629  2bb0				  -	      .byte	%01111110	; CURVES
   1630  2bb0				  -
   1631  2bb0				  -			;byte %00000000 ; CURVES
   1632  2bb0				  -
   1633  2bb0				  -	      .byte	%00111100	; CURVES
   1634  2bb0				  -	      .byte	%01111110	; CURVES
   1635  2bb0				  -	      .byte	%01100110	; CURVES
   1636  2bb0				  -	      .byte	%01111110	; CURVES
   1637  2bb0				  -	      .byte	%01111100	; CURVES
   1638  2bb0				  -	      .byte	%01100000	; CURVES
   1639  2bb0				  -	      .byte	%01111110	; CURVES
   1640  2bb0				  -	      .byte	%00111110	; CURVES
   1641  2bb0				  -
   1642  2bb0				  -			;byte %00000000 ; CURVES
   1643  2bb0				  -
   1644  2bb0				  -	      .byte	%00000110	; CURVES
   1645  2bb0				  -	      .byte	%00000110	; CURVES
   1646  2bb0				  -	      .byte	%00000110	; CURVES
   1647  2bb0				  -	      .byte	%00000110	; CURVES
   1648  2bb0				  -	      .byte	%00000110	; CURVES
   1649  2bb0				  -	      .byte	%01100110	; CURVES
   1650  2bb0				  -	      .byte	%01111110	; CURVES
   1651  2bb0				  -	      .byte	%00111100	; CURVES
   1652  2bb0				  -
   1653  2bb0				  -			;byte %00000000 ; CURVES
   1654  2bb0				  -
   1655  2bb0				  -	      .byte	%00111100	; CURVES
   1656  2bb0				  -	      .byte	%01111110	; CURVES
   1657  2bb0				  -	      .byte	%01100110	; CURVES
   1658  2bb0				  -	      .byte	%01111110	; CURVES
   1659  2bb0				  -	      .byte	%00111100	; CURVES
   1660  2bb0				  -	      .byte	%01100110	; CURVES
   1661  2bb0				  -	      .byte	%01111110	; CURVES
   1662  2bb0				  -	      .byte	%00111100	; CURVES
   1663  2bb0				  -
   1664  2bb0				  -			;byte %00000000 ; CURVES
   1665  2bb0				  -
   1666  2bb0				  -	      .byte	%01111100	; CURVES
   1667  2bb0				  -	      .byte	%01111110	; CURVES
   1668  2bb0				  -	      .byte	%00000110	; CURVES
   1669  2bb0				  -	      .byte	%00111110	; CURVES
   1670  2bb0				  -	      .byte	%01111110	; CURVES
   1671  2bb0				  -	      .byte	%01100110	; CURVES
   1672  2bb0				  -	      .byte	%01111110	; CURVES
   1673  2bb0				  -	      .byte	%00111100	; CURVES
   1674  2bb0				  -
   1675  2bb0				  -	      ifconst	fontcharsHEX
   1676  2bb0				  -
   1677  2bb0				  -			;byte %00000000 ; CURVES
   1678  2bb0				  -
   1679  2bb0				  -	      .byte	%01100110	; CURVES
   1680  2bb0				  -	      .byte	%01100110	; CURVES
   1681  2bb0				  -	      .byte	%01111110	; CURVES
   1682  2bb0				  -	      .byte	%01111110	; CURVES
   1683  2bb0				  -	      .byte	%01100110	; CURVES
   1684  2bb0				  -	      .byte	%01100110	; CURVES
   1685  2bb0				  -	      .byte	%01111110	; CURVES
   1686  2bb0				  -	      .byte	%00111100	; CURVES
   1687  2bb0				  -
   1688  2bb0				  -			;byte %00000000 ; CURVES
   1689  2bb0				  -
   1690  2bb0				  -	      .byte	%01111100	; CURVES
   1691  2bb0				  -	      .byte	%01111110	; CURVES
   1692  2bb0				  -	      .byte	%01100110	; CURVES
   1693  2bb0				  -	      .byte	%01111110	; CURVES
   1694  2bb0				  -	      .byte	%01111100	; CURVES
   1695  2bb0				  -	      .byte	%01100110	; CURVES
   1696  2bb0				  -	      .byte	%01111110	; CURVES
   1697  2bb0				  -	      .byte	%01111100	; CURVES
   1698  2bb0				  -
   1699  2bb0				  -			;byte %00000000 ; CURVES
   1700  2bb0				  -
   1701  2bb0				  -	      .byte	%00111110	; CURVES
   1702  2bb0				  -	      .byte	%01111110	; CURVES
   1703  2bb0				  -	      .byte	%01100000	; CURVES
   1704  2bb0				  -	      .byte	%01100000	; CURVES
   1705  2bb0				  -	      .byte	%01100000	; CURVES
   1706  2bb0				  -	      .byte	%01100000	; CURVES
   1707  2bb0				  -	      .byte	%01111110	; CURVES
   1708  2bb0				  -	      .byte	%00111110	; CURVES
   1709  2bb0				  -
   1710  2bb0				  -			;byte %00000000 ; CURVES
   1711  2bb0				  -
   1712  2bb0				  -	      .byte	%01111100	; CURVES
   1713  2bb0				  -	      .byte	%01111110	; CURVES
   1714  2bb0				  -	      .byte	%01100110	; CURVES
   1715  2bb0				  -	      .byte	%01100110	; CURVES
   1716  2bb0				  -	      .byte	%01100110	; CURVES
   1717  2bb0				  -	      .byte	%01100110	; CURVES
   1718  2bb0				  -	      .byte	%01111110	; CURVES
   1719  2bb0				  -	      .byte	%01111100	; CURVES
   1720  2bb0				  -
   1721  2bb0				  -			;byte %00000000 ; CURVES
   1722  2bb0				  -
   1723  2bb0				  -	      .byte	%00111110	; CURVES
   1724  2bb0				  -	      .byte	%01111110	; CURVES
   1725  2bb0				  -	      .byte	%01100000	; CURVES
   1726  2bb0				  -	      .byte	%01111100	; CURVES
   1727  2bb0				  -	      .byte	%01111100	; CURVES
   1728  2bb0				  -	      .byte	%01100000	; CURVES
   1729  2bb0				  -	      .byte	%01111110	; CURVES
   1730  2bb0				  -	      .byte	%00111110	; CURVES
   1731  2bb0				  -
   1732  2bb0				  -			;byte %00000000 ; CURVES
   1733  2bb0				  -
   1734  2bb0				  -	      .byte	%01100000	; CURVES
   1735  2bb0				  -	      .byte	%01100000	; CURVES
   1736  2bb0				  -	      .byte	%01100000	; CURVES
   1737  2bb0				  -	      .byte	%01111100	; CURVES
   1738  2bb0				  -	      .byte	%01111100	; CURVES
   1739  2bb0				  -	      .byte	%01100000	; CURVES
   1740  2bb0				  -	      .byte	%01111110	; CURVES
   1741  2bb0				  -	      .byte	%00111110	; CURVES
   1742  2bb0				  -
   1743  2bb0				  -			;byte %00000000 ; CURVES
   1744  2bb0				  -			;byte %00000000 ; CURVES
   1745  2bb0				  -			;byte %00000000 ; CURVES
   1746  2bb0				  -			;byte %00000000 ; CURVES
   1747  2bb0				  -
   1748  2bb0				  -	      endif		; fontcharsHEX 
   1749  2bb0					      endif		; CURVES
   1750  2bb0
   1751  2bb0
   1752  2bb0				  -	      if	fontstyle == HUSKY
   1753  2bb0				  -
   1754  2bb0				  -			;byte %00000000 ; HUSKY
   1755  2bb0				  -
   1756  2bb0				  -	      .byte	%01111100	; HUSKY
   1757  2bb0				  -	      .byte	%11111110	; HUSKY
   1758  2bb0				  -	      .byte	%11101110	; HUSKY
   1759  2bb0				  -	      .byte	%11101110	; HUSKY
   1760  2bb0				  -	      .byte	%11101110	; HUSKY
   1761  2bb0				  -	      .byte	%11101110	; HUSKY
   1762  2bb0				  -	      .byte	%11111110	; HUSKY
   1763  2bb0				  -	      .byte	%01111100	; HUSKY
   1764  2bb0				  -
   1765  2bb0				  -			;byte %00000000 ; HUSKY
   1766  2bb0				  -
   1767  2bb0				  -	      .byte	%00111000	; HUSKY
   1768  2bb0				  -	      .byte	%00111000	; HUSKY
   1769  2bb0				  -	      .byte	%00111000	; HUSKY
   1770  2bb0				  -	      .byte	%00111000	; HUSKY
   1771  2bb0				  -	      .byte	%00111000	; HUSKY
   1772  2bb0				  -	      .byte	%00111000	; HUSKY
   1773  2bb0				  -	      .byte	%00111000	; HUSKY
   1774  2bb0				  -	      .byte	%00111000	; HUSKY
   1775  2bb0				  -
   1776  2bb0				  -			;byte %00000000 ; HUSKY
   1777  2bb0				  -
   1778  2bb0				  -	      .byte	%11111110	; HUSKY
   1779  2bb0				  -	      .byte	%11111110	; HUSKY
   1780  2bb0				  -	      .byte	%11100000	; HUSKY
   1781  2bb0				  -	      .byte	%11111100	; HUSKY
   1782  2bb0				  -	      .byte	%01111110	; HUSKY
   1783  2bb0				  -	      .byte	%00001110	; HUSKY
   1784  2bb0				  -	      .byte	%11111110	; HUSKY
   1785  2bb0				  -	      .byte	%11111100	; HUSKY
   1786  2bb0				  -
   1787  2bb0				  -			;byte %00000000 ; HUSKY
   1788  2bb0				  -
   1789  2bb0				  -	      .byte	%11111100	; HUSKY
   1790  2bb0				  -	      .byte	%11111110	; HUSKY
   1791  2bb0				  -	      .byte	%00001110	; HUSKY
   1792  2bb0				  -	      .byte	%11111100	; HUSKY
   1793  2bb0				  -	      .byte	%11111100	; HUSKY
   1794  2bb0				  -	      .byte	%00001110	; HUSKY
   1795  2bb0				  -	      .byte	%11111110	; HUSKY
   1796  2bb0				  -	      .byte	%11111100	; HUSKY
   1797  2bb0				  -
   1798  2bb0				  -			;byte %00000000 ; HUSKY
   1799  2bb0				  -
   1800  2bb0				  -	      .byte	%00011100	; HUSKY
   1801  2bb0				  -	      .byte	%00011100	; HUSKY
   1802  2bb0				  -	      .byte	%11111110	; HUSKY
   1803  2bb0				  -	      .byte	%11111110	; HUSKY
   1804  2bb0				  -	      .byte	%11011100	; HUSKY
   1805  2bb0				  -	      .byte	%11011100	; HUSKY
   1806  2bb0				  -	      .byte	%00011100	; HUSKY
   1807  2bb0				  -	      .byte	%00011100	; HUSKY
   1808  2bb0				  -
   1809  2bb0				  -			;byte %00000000 ; HUSKY
   1810  2bb0				  -
   1811  2bb0				  -	      .byte	%11111100	; HUSKY
   1812  2bb0				  -	      .byte	%11111110	; HUSKY
   1813  2bb0				  -	      .byte	%00001110	; HUSKY
   1814  2bb0				  -	      .byte	%11111110	; HUSKY
   1815  2bb0				  -	      .byte	%11111100	; HUSKY
   1816  2bb0				  -	      .byte	%11100000	; HUSKY
   1817  2bb0				  -	      .byte	%11111110	; HUSKY
   1818  2bb0				  -	      .byte	%11111110	; HUSKY
   1819  2bb0				  -
   1820  2bb0				  -			;byte %00000000 ; HUSKY
   1821  2bb0				  -
   1822  2bb0				  -	      .byte	%01111100	; HUSKY
   1823  2bb0				  -	      .byte	%11111110	; HUSKY
   1824  2bb0				  -	      .byte	%11101110	; HUSKY
   1825  2bb0				  -	      .byte	%11111110	; HUSKY
   1826  2bb0				  -	      .byte	%11111100	; HUSKY
   1827  2bb0				  -	      .byte	%11100000	; HUSKY
   1828  2bb0				  -	      .byte	%11111110	; HUSKY
   1829  2bb0				  -	      .byte	%01111110	; HUSKY
   1830  2bb0				  -
   1831  2bb0				  -			;byte %00000000 ; HUSKY
   1832  2bb0				  -
   1833  2bb0				  -	      .byte	%00111000	; HUSKY
   1834  2bb0				  -	      .byte	%00111000	; HUSKY
   1835  2bb0				  -	      .byte	%00111000	; HUSKY
   1836  2bb0				  -	      .byte	%00111000	; HUSKY
   1837  2bb0				  -	      .byte	%00011100	; HUSKY
   1838  2bb0				  -	      .byte	%00001110	; HUSKY
   1839  2bb0				  -	      .byte	%11111110	; HUSKY
   1840  2bb0				  -	      .byte	%11111110	; HUSKY
   1841  2bb0				  -
   1842  2bb0				  -			;byte %00000000 ; HUSKY
   1843  2bb0				  -
   1844  2bb0				  -	      .byte	%01111100	; HUSKY
   1845  2bb0				  -	      .byte	%11111110	; HUSKY
   1846  2bb0				  -	      .byte	%11101110	; HUSKY
   1847  2bb0				  -	      .byte	%11111110	; HUSKY
   1848  2bb0				  -	      .byte	%01111100	; HUSKY
   1849  2bb0				  -	      .byte	%11101110	; HUSKY
   1850  2bb0				  -	      .byte	%11111110	; HUSKY
   1851  2bb0				  -	      .byte	%01111100	; HUSKY
   1852  2bb0				  -
   1853  2bb0				  -			;byte %00000000 ; HUSKY
   1854  2bb0				  -
   1855  2bb0				  -	      .byte	%11111100	; HUSKY
   1856  2bb0				  -	      .byte	%11111110	; HUSKY
   1857  2bb0				  -	      .byte	%00001110	; HUSKY
   1858  2bb0				  -	      .byte	%01111110	; HUSKY
   1859  2bb0				  -	      .byte	%11111110	; HUSKY
   1860  2bb0				  -	      .byte	%11101110	; HUSKY
   1861  2bb0				  -	      .byte	%11111110	; HUSKY
   1862  2bb0				  -	      .byte	%01111100	; HUSKY
   1863  2bb0				  -
   1864  2bb0				  -	      ifconst	fontcharsHEX
   1865  2bb0				  -
   1866  2bb0				  -			;byte %00000000 ; HUSKY
   1867  2bb0				  -
   1868  2bb0				  -	      .byte	%11101110	; HUSKY
   1869  2bb0				  -	      .byte	%11101110	; HUSKY
   1870  2bb0				  -	      .byte	%11111110	; HUSKY
   1871  2bb0				  -	      .byte	%11111110	; HUSKY
   1872  2bb0				  -	      .byte	%11101110	; HUSKY
   1873  2bb0				  -	      .byte	%11111110	; HUSKY
   1874  2bb0				  -	      .byte	%01111100	; HUSKY
   1875  2bb0				  -	      .byte	%00111000	; HUSKY
   1876  2bb0				  -
   1877  2bb0				  -			;byte %00000000 ; HUSKY
   1878  2bb0				  -
   1879  2bb0				  -	      .byte	%11111100	; HUSKY
   1880  2bb0				  -	      .byte	%11111110	; HUSKY
   1881  2bb0				  -	      .byte	%11101110	; HUSKY
   1882  2bb0				  -	      .byte	%11111110	; HUSKY
   1883  2bb0				  -	      .byte	%11111100	; HUSKY
   1884  2bb0				  -	      .byte	%11101110	; HUSKY
   1885  2bb0				  -	      .byte	%11111110	; HUSKY
   1886  2bb0				  -	      .byte	%11111100	; HUSKY
   1887  2bb0				  -
   1888  2bb0				  -			;byte %00000000 ; HUSKY
   1889  2bb0				  -
   1890  2bb0				  -	      .byte	%01111110	; HUSKY
   1891  2bb0				  -	      .byte	%11111110	; HUSKY
   1892  2bb0				  -	      .byte	%11110000	; HUSKY
   1893  2bb0				  -	      .byte	%11100000	; HUSKY
   1894  2bb0				  -	      .byte	%11100000	; HUSKY
   1895  2bb0				  -	      .byte	%11110000	; HUSKY
   1896  2bb0				  -	      .byte	%11111110	; HUSKY
   1897  2bb0				  -	      .byte	%01111110	; HUSKY
   1898  2bb0				  -
   1899  2bb0				  -			;byte %00000000 ; HUSKY
   1900  2bb0				  -
   1901  2bb0				  -	      .byte	%11111000	; HUSKY
   1902  2bb0				  -	      .byte	%11111100	; HUSKY
   1903  2bb0				  -	      .byte	%11111110	; HUSKY
   1904  2bb0				  -	      .byte	%11101110	; HUSKY
   1905  2bb0				  -	      .byte	%11101110	; HUSKY
   1906  2bb0				  -	      .byte	%11111110	; HUSKY
   1907  2bb0				  -	      .byte	%11111100	; HUSKY
   1908  2bb0				  -	      .byte	%11111000	; HUSKY
   1909  2bb0				  -
   1910  2bb0				  -			;byte %00000000 ; HUSKY
   1911  2bb0				  -
   1912  2bb0				  -	      .byte	%11111110	; HUSKY
   1913  2bb0				  -	      .byte	%11111110	; HUSKY
   1914  2bb0				  -	      .byte	%11100000	; HUSKY
   1915  2bb0				  -	      .byte	%11111110	; HUSKY
   1916  2bb0				  -	      .byte	%11111110	; HUSKY
   1917  2bb0				  -	      .byte	%11100000	; HUSKY
   1918  2bb0				  -	      .byte	%11111110	; HUSKY
   1919  2bb0				  -	      .byte	%11111110	; HUSKY
   1920  2bb0				  -
   1921  2bb0				  -			;byte %00000000 ; HUSKY
   1922  2bb0				  -
   1923  2bb0				  -	      .byte	%11100000	; HUSKY
   1924  2bb0				  -	      .byte	%11100000	; HUSKY
   1925  2bb0				  -	      .byte	%11100000	; HUSKY
   1926  2bb0				  -	      .byte	%11111110	; HUSKY
   1927  2bb0				  -	      .byte	%11111110	; HUSKY
   1928  2bb0				  -	      .byte	%11100000	; HUSKY
   1929  2bb0				  -	      .byte	%11111110	; HUSKY
   1930  2bb0				  -	      .byte	%11111110	; HUSKY
   1931  2bb0				  -
   1932  2bb0				  -			;byte %00000000 ; HUSKY
   1933  2bb0				  -			;byte %00000000 ; HUSKY
   1934  2bb0				  -			;byte %00000000 ; HUSKY
   1935  2bb0				  -			;byte %00000000 ; HUSKY
   1936  2bb0				  -
   1937  2bb0				  -	      endif		; fontcharsHEX 
   1938  2bb0					      endif		; HUSKY
   1939  2bb0
   1940  2bb0
   1941  2bb0				  -	      if	fontstyle == SNAKE
   1942  2bb0				  -
   1943  2bb0				  -			;byte %00000000 ; SNAKE
   1944  2bb0				  -
   1945  2bb0				  -	      .byte	%01111110	; SNAKE
   1946  2bb0				  -	      .byte	%01000010	; SNAKE
   1947  2bb0				  -	      .byte	%01000010	; SNAKE
   1948  2bb0				  -	      .byte	%01000010	; SNAKE
   1949  2bb0				  -	      .byte	%01000010	; SNAKE
   1950  2bb0				  -	      .byte	%01000010	; SNAKE
   1951  2bb0				  -	      .byte	%01000010	; SNAKE
   1952  2bb0				  -	      .byte	%01111110	; SNAKE
   1953  2bb0				  -
   1954  2bb0				  -			;byte %00000000 ; SNAKE
   1955  2bb0				  -
   1956  2bb0				  -	      .byte	%00111000	; SNAKE
   1957  2bb0				  -	      .byte	%00101000	; SNAKE
   1958  2bb0				  -	      .byte	%00001000	; SNAKE
   1959  2bb0				  -	      .byte	%00001000	; SNAKE
   1960  2bb0				  -	      .byte	%00001000	; SNAKE
   1961  2bb0				  -	      .byte	%00001000	; SNAKE
   1962  2bb0				  -	      .byte	%00001000	; SNAKE
   1963  2bb0				  -	      .byte	%00111000	; SNAKE
   1964  2bb0				  -
   1965  2bb0				  -			;byte %00000000 ; SNAKE
   1966  2bb0				  -
   1967  2bb0				  -	      .byte	%01111110	; SNAKE
   1968  2bb0				  -	      .byte	%01000010	; SNAKE
   1969  2bb0				  -	      .byte	%01000110	; SNAKE
   1970  2bb0				  -	      .byte	%01000000	; SNAKE
   1971  2bb0				  -	      .byte	%01111110	; SNAKE
   1972  2bb0				  -	      .byte	%00000010	; SNAKE
   1973  2bb0				  -	      .byte	%01000010	; SNAKE
   1974  2bb0				  -	      .byte	%01111110	; SNAKE
   1975  2bb0				  -
   1976  2bb0				  -			;byte %00000000 ; SNAKE
   1977  2bb0				  -
   1978  2bb0				  -	      .byte	%01111110	; SNAKE
   1979  2bb0				  -	      .byte	%01000010	; SNAKE
   1980  2bb0				  -	      .byte	%01100010	; SNAKE
   1981  2bb0				  -	      .byte	%00000010	; SNAKE
   1982  2bb0				  -	      .byte	%01111110	; SNAKE
   1983  2bb0				  -	      .byte	%00000010	; SNAKE
   1984  2bb0				  -	      .byte	%01000010	; SNAKE
   1985  2bb0				  -	      .byte	%01111110	; SNAKE
   1986  2bb0				  -
   1987  2bb0				  -			;byte %00000000 ; SNAKE
   1988  2bb0				  -
   1989  2bb0				  -	      .byte	%00001110	; SNAKE
   1990  2bb0				  -	      .byte	%00001010	; SNAKE
   1991  2bb0				  -	      .byte	%00000010	; SNAKE
   1992  2bb0				  -	      .byte	%01111110	; SNAKE
   1993  2bb0				  -	      .byte	%01000010	; SNAKE
   1994  2bb0				  -	      .byte	%01000010	; SNAKE
   1995  2bb0				  -	      .byte	%01000010	; SNAKE
   1996  2bb0				  -	      .byte	%01100110	; SNAKE
   1997  2bb0				  -
   1998  2bb0				  -			;byte %00000000 ; SNAKE
   1999  2bb0				  -
   2000  2bb0				  -	      .byte	%01111110	; SNAKE
   2001  2bb0				  -	      .byte	%01000010	; SNAKE
   2002  2bb0				  -	      .byte	%01100010	; SNAKE
   2003  2bb0				  -	      .byte	%00000010	; SNAKE
   2004  2bb0				  -	      .byte	%01111110	; SNAKE
   2005  2bb0				  -	      .byte	%01000000	; SNAKE
   2006  2bb0				  -	      .byte	%01000010	; SNAKE
   2007  2bb0				  -	      .byte	%01111110	; SNAKE
   2008  2bb0				  -
   2009  2bb0				  -			;byte %00000000 ; SNAKE
   2010  2bb0				  -
   2011  2bb0				  -	      .byte	%01111110	; SNAKE
   2012  2bb0				  -	      .byte	%01000010	; SNAKE
   2013  2bb0				  -	      .byte	%01000010	; SNAKE
   2014  2bb0				  -	      .byte	%01111110	; SNAKE
   2015  2bb0				  -	      .byte	%01000000	; SNAKE
   2016  2bb0				  -	      .byte	%01000110	; SNAKE
   2017  2bb0				  -	      .byte	%01000010	; SNAKE
   2018  2bb0				  -	      .byte	%01111110	; SNAKE
   2019  2bb0				  -
   2020  2bb0				  -			;byte %00000000 ; SNAKE
   2021  2bb0				  -
   2022  2bb0				  -	      .byte	%00000110	; SNAKE
   2023  2bb0				  -	      .byte	%00000010	; SNAKE
   2024  2bb0				  -	      .byte	%00000010	; SNAKE
   2025  2bb0				  -	      .byte	%00000010	; SNAKE
   2026  2bb0				  -	      .byte	%00000010	; SNAKE
   2027  2bb0				  -	      .byte	%01100010	; SNAKE
   2028  2bb0				  -	      .byte	%01000010	; SNAKE
   2029  2bb0				  -	      .byte	%01111110	; SNAKE
   2030  2bb0				  -
   2031  2bb0				  -			;byte %00000000 ; SNAKE
   2032  2bb0				  -
   2033  2bb0				  -	      .byte	%01111110	; SNAKE
   2034  2bb0				  -	      .byte	%01000010	; SNAKE
   2035  2bb0				  -	      .byte	%01000010	; SNAKE
   2036  2bb0				  -	      .byte	%01000010	; SNAKE
   2037  2bb0				  -	      .byte	%01111110	; SNAKE
   2038  2bb0				  -	      .byte	%01000010	; SNAKE
   2039  2bb0				  -	      .byte	%01000010	; SNAKE
   2040  2bb0				  -	      .byte	%01111110	; SNAKE
   2041  2bb0				  -
   2042  2bb0				  -			;byte %00000000 ; SNAKE
   2043  2bb0				  -
   2044  2bb0				  -	      .byte	%00001110	; SNAKE
   2045  2bb0				  -	      .byte	%00001010	; SNAKE
   2046  2bb0				  -	      .byte	%00000010	; SNAKE
   2047  2bb0				  -	      .byte	%00000010	; SNAKE
   2048  2bb0				  -	      .byte	%01111110	; SNAKE
   2049  2bb0				  -	      .byte	%01000010	; SNAKE
   2050  2bb0				  -	      .byte	%01000010	; SNAKE
   2051  2bb0				  -	      .byte	%01111110	; SNAKE
   2052  2bb0				  -
   2053  2bb0				  -
   2054  2bb0				  -	      ifconst	fontcharsHEX
   2055  2bb0				  -
   2056  2bb0				  -			;byte %00000000 ; SNAKE
   2057  2bb0				  -
   2058  2bb0				  -	      .byte	%01100110	; SNAKE
   2059  2bb0				  -	      .byte	%01000010	; SNAKE
   2060  2bb0				  -	      .byte	%01000010	; SNAKE
   2061  2bb0				  -	      .byte	%01000010	; SNAKE
   2062  2bb0				  -	      .byte	%01111110	; SNAKE
   2063  2bb0				  -	      .byte	%01000010	; SNAKE
   2064  2bb0				  -	      .byte	%01000010	; SNAKE
   2065  2bb0				  -	      .byte	%01111110	; SNAKE
   2066  2bb0				  -
   2067  2bb0				  -			;byte %00000000 ; SNAKE
   2068  2bb0				  -
   2069  2bb0				  -	      .byte	%01111110	; SNAKE
   2070  2bb0				  -	      .byte	%01000010	; SNAKE
   2071  2bb0				  -	      .byte	%01000010	; SNAKE
   2072  2bb0				  -	      .byte	%01000110	; SNAKE
   2073  2bb0				  -	      .byte	%01111100	; SNAKE
   2074  2bb0				  -	      .byte	%01000110	; SNAKE
   2075  2bb0				  -	      .byte	%01000010	; SNAKE
   2076  2bb0				  -	      .byte	%01111110	; SNAKE
   2077  2bb0				  -
   2078  2bb0				  -			;byte %00000000 ; SNAKE
   2079  2bb0				  -
   2080  2bb0				  -	      .byte	%01111110	; SNAKE
   2081  2bb0				  -	      .byte	%01000010	; SNAKE
   2082  2bb0				  -	      .byte	%01000110	; SNAKE
   2083  2bb0				  -	      .byte	%01000000	; SNAKE
   2084  2bb0				  -	      .byte	%01000000	; SNAKE
   2085  2bb0				  -	      .byte	%01000110	; SNAKE
   2086  2bb0				  -	      .byte	%01000010	; SNAKE
   2087  2bb0				  -	      .byte	%01111110	; SNAKE
   2088  2bb0				  -
   2089  2bb0				  -			;byte %00000000 ; SNAKE
   2090  2bb0				  -
   2091  2bb0				  -	      .byte	%01111100	; SNAKE
   2092  2bb0				  -	      .byte	%01000110	; SNAKE
   2093  2bb0				  -	      .byte	%01000010	; SNAKE
   2094  2bb0				  -	      .byte	%01000010	; SNAKE
   2095  2bb0				  -	      .byte	%01000010	; SNAKE
   2096  2bb0				  -	      .byte	%01000010	; SNAKE
   2097  2bb0				  -	      .byte	%01000110	; SNAKE
   2098  2bb0				  -	      .byte	%01111100	; SNAKE
   2099  2bb0				  -
   2100  2bb0				  -			;byte %00000000 ; SNAKE
   2101  2bb0				  -
   2102  2bb0				  -	      .byte	%01111110	; SNAKE
   2103  2bb0				  -	      .byte	%01000010	; SNAKE
   2104  2bb0				  -	      .byte	%01000110	; SNAKE
   2105  2bb0				  -	      .byte	%01000000	; SNAKE
   2106  2bb0				  -	      .byte	%01111000	; SNAKE
   2107  2bb0				  -	      .byte	%01000000	; SNAKE
   2108  2bb0				  -	      .byte	%01000010	; SNAKE
   2109  2bb0				  -	      .byte	%01111110	; SNAKE
   2110  2bb0				  -
   2111  2bb0				  -			;byte %00000000 ; SNAKE
   2112  2bb0				  -
   2113  2bb0				  -	      .byte	%01000000	; SNAKE
   2114  2bb0				  -	      .byte	%01000000	; SNAKE
   2115  2bb0				  -	      .byte	%01000000	; SNAKE
   2116  2bb0				  -	      .byte	%01000000	; SNAKE
   2117  2bb0				  -	      .byte	%01111000	; SNAKE
   2118  2bb0				  -	      .byte	%01000000	; SNAKE
   2119  2bb0				  -	      .byte	%01000010	; SNAKE
   2120  2bb0				  -	      .byte	%01111110	; SNAKE
   2121  2bb0				  -
   2122  2bb0				  -			;byte %00000000 ; SNAKE
   2123  2bb0				  -			;byte %00000000 ; SNAKE
   2124  2bb0				  -			;byte %00000000 ; SNAKE
   2125  2bb0				  -			;byte %00000000 ; SNAKE
   2126  2bb0				  -
   2127  2bb0				  -	      endif		; fontcharsHEX 
   2128  2bb0					      endif		; SNAKE
   2129  2bb0
   2130  2bb0				  -	      if	fontstyle == PLOK
   2131  2bb0				  -
   2132  2bb0				  -			;byte %00000000 ; PLOK
   2133  2bb0				  -
   2134  2bb0				  -	      .byte	%00000000	; PLOK
   2135  2bb0				  -	      .byte	%00111000	; PLOK
   2136  2bb0				  -	      .byte	%01100100	; PLOK
   2137  2bb0				  -	      .byte	%01100010	; PLOK
   2138  2bb0				  -	      .byte	%01100010	; PLOK
   2139  2bb0				  -	      .byte	%00110110	; PLOK
   2140  2bb0				  -	      .byte	%00011100	; PLOK
   2141  2bb0				  -	      .byte	%00000000	; PLOK
   2142  2bb0				  -
   2143  2bb0				  -			;byte %00000000 ; PLOK
   2144  2bb0				  -
   2145  2bb0				  -	      .byte	%00000000	; PLOK
   2146  2bb0				  -	      .byte	%00010000	; PLOK
   2147  2bb0				  -	      .byte	%00011100	; PLOK
   2148  2bb0				  -	      .byte	%00011100	; PLOK
   2149  2bb0				  -	      .byte	%00011000	; PLOK
   2150  2bb0				  -	      .byte	%00111000	; PLOK
   2151  2bb0				  -	      .byte	%00011000	; PLOK
   2152  2bb0				  -	      .byte	%00000000	; PLOK
   2153  2bb0				  -
   2154  2bb0				  -			;byte %00000000 ; PLOK
   2155  2bb0				  -
   2156  2bb0				  -	      .byte	%00000000	; PLOK
   2157  2bb0				  -	      .byte	%00001110	; PLOK
   2158  2bb0				  -	      .byte	%01111110	; PLOK
   2159  2bb0				  -	      .byte	%00011000	; PLOK
   2160  2bb0				  -	      .byte	%00001100	; PLOK
   2161  2bb0				  -	      .byte	%00000110	; PLOK
   2162  2bb0				  -	      .byte	%00111100	; PLOK
   2163  2bb0				  -	      .byte	%00000000	; PLOK
   2164  2bb0				  -
   2165  2bb0				  -			;byte %00000000 ; PLOK
   2166  2bb0				  -
   2167  2bb0				  -	      .byte	%00000000	; PLOK
   2168  2bb0				  -	      .byte	%00111100	; PLOK
   2169  2bb0				  -	      .byte	%01101110	; PLOK
   2170  2bb0				  -	      .byte	%00001110	; PLOK
   2171  2bb0				  -	      .byte	%00011100	; PLOK
   2172  2bb0				  -	      .byte	%00000110	; PLOK
   2173  2bb0				  -	      .byte	%01111100	; PLOK
   2174  2bb0				  -	      .byte	%00000000	; PLOK
   2175  2bb0				  -
   2176  2bb0				  -			;byte %00000000 ; PLOK
   2177  2bb0				  -
   2178  2bb0				  -	      .byte	%00000000	; PLOK
   2179  2bb0				  -	      .byte	%00011000	; PLOK
   2180  2bb0				  -	      .byte	%01111110	; PLOK
   2181  2bb0				  -	      .byte	%01101100	; PLOK
   2182  2bb0				  -	      .byte	%00100100	; PLOK
   2183  2bb0				  -	      .byte	%00110000	; PLOK
   2184  2bb0				  -	      .byte	%00110000	; PLOK
   2185  2bb0				  -	      .byte	%00000000	; PLOK
   2186  2bb0				  -
   2187  2bb0				  -			;byte %00000000 ; PLOK
   2188  2bb0				  -
   2189  2bb0				  -	      .byte	%00000000	; PLOK
   2190  2bb0				  -	      .byte	%00111100	; PLOK
   2191  2bb0				  -	      .byte	%01001110	; PLOK
   2192  2bb0				  -	      .byte	%00011100	; PLOK
   2193  2bb0				  -	      .byte	%01100000	; PLOK
   2194  2bb0				  -	      .byte	%01111100	; PLOK
   2195  2bb0				  -	      .byte	%00011100	; PLOK
   2196  2bb0				  -	      .byte	%00000000	; PLOK
   2197  2bb0				  -
   2198  2bb0				  -			;byte %00000000 ; PLOK
   2199  2bb0				  -
   2200  2bb0				  -	      .byte	%00000000	; PLOK
   2201  2bb0				  -	      .byte	%00111100	; PLOK
   2202  2bb0				  -	      .byte	%01000110	; PLOK
   2203  2bb0				  -	      .byte	%01101100	; PLOK
   2204  2bb0				  -	      .byte	%01110000	; PLOK
   2205  2bb0				  -	      .byte	%00111000	; PLOK
   2206  2bb0				  -	      .byte	%00010000	; PLOK
   2207  2bb0				  -	      .byte	%00000000	; PLOK
   2208  2bb0				  -
   2209  2bb0				  -			;byte %00000000 ; PLOK
   2210  2bb0				  -
   2211  2bb0				  -	      .byte	%00000000	; PLOK
   2212  2bb0				  -	      .byte	%00111100	; PLOK
   2213  2bb0				  -	      .byte	%00011100	; PLOK
   2214  2bb0				  -	      .byte	%00001100	; PLOK
   2215  2bb0				  -	      .byte	%00000110	; PLOK
   2216  2bb0				  -	      .byte	%01111110	; PLOK
   2217  2bb0				  -	      .byte	%00110000	; PLOK
   2218  2bb0				  -	      .byte	%00000000	; PLOK
   2219  2bb0				  -
   2220  2bb0				  -			;byte %00000000 ; PLOK
   2221  2bb0				  -
   2222  2bb0				  -	      .byte	%00000000	; PLOK
   2223  2bb0				  -	      .byte	%00111100	; PLOK
   2224  2bb0				  -	      .byte	%01001110	; PLOK
   2225  2bb0				  -	      .byte	%01101110	; PLOK
   2226  2bb0				  -	      .byte	%00111100	; PLOK
   2227  2bb0				  -	      .byte	%01100100	; PLOK
   2228  2bb0				  -	      .byte	%00111000	; PLOK
   2229  2bb0				  -	      .byte	%00000000	; PLOK
   2230  2bb0				  -
   2231  2bb0				  -			;byte %00000000 ; PLOK
   2232  2bb0				  -
   2233  2bb0				  -	      .byte	%00000000	; PLOK
   2234  2bb0				  -	      .byte	%00011000	; PLOK
   2235  2bb0				  -	      .byte	%00001100	; PLOK
   2236  2bb0				  -	      .byte	%00011100	; PLOK
   2237  2bb0				  -	      .byte	%00100110	; PLOK
   2238  2bb0				  -	      .byte	%01001110	; PLOK
   2239  2bb0				  -	      .byte	%00111100	; PLOK
   2240  2bb0				  -	      .byte	%00000000	; PLOK
   2241  2bb0				  -
   2242  2bb0				  -	      ifconst	fontcharsHEX
   2243  2bb0				  -
   2244  2bb0				  -			;byte %00000000 ; PLOK
   2245  2bb0				  -
   2246  2bb0				  -	      .byte	%00000000	; PLOK
   2247  2bb0				  -	      .byte	%01100010	; PLOK
   2248  2bb0				  -	      .byte	%01100110	; PLOK
   2249  2bb0				  -	      .byte	%01111110	; PLOK
   2250  2bb0				  -	      .byte	%00101100	; PLOK
   2251  2bb0				  -	      .byte	%00101000	; PLOK
   2252  2bb0				  -	      .byte	%00110000	; PLOK
   2253  2bb0				  -	      .byte	%00000000	; PLOK
   2254  2bb0				  -
   2255  2bb0				  -			;byte %00000000 ; PLOK
   2256  2bb0				  -
   2257  2bb0				  -	      .byte	%00000000	; PLOK
   2258  2bb0				  -	      .byte	%01111100	; PLOK
   2259  2bb0				  -	      .byte	%00110010	; PLOK
   2260  2bb0				  -	      .byte	%00110110	; PLOK
   2261  2bb0				  -	      .byte	%00111100	; PLOK
   2262  2bb0				  -	      .byte	%00110110	; PLOK
   2263  2bb0				  -	      .byte	%01111100	; PLOK
   2264  2bb0				  -	      .byte	%00000000	; PLOK
   2265  2bb0				  -
   2266  2bb0				  -			;byte %00000000 ; PLOK
   2267  2bb0				  -
   2268  2bb0				  -	      .byte	%00000000	; PLOK
   2269  2bb0				  -	      .byte	%00111100	; PLOK
   2270  2bb0				  -	      .byte	%01100110	; PLOK
   2271  2bb0				  -	      .byte	%01100000	; PLOK
   2272  2bb0				  -	      .byte	%01100100	; PLOK
   2273  2bb0				  -	      .byte	%00101110	; PLOK
   2274  2bb0				  -	      .byte	%00011100	; PLOK
   2275  2bb0				  -	      .byte	%00000000	; PLOK
   2276  2bb0				  -
   2277  2bb0				  -			;byte %00000000 ; PLOK
   2278  2bb0				  -
   2279  2bb0				  -	      .byte	%00000000	; PLOK
   2280  2bb0				  -	      .byte	%01111100	; PLOK
   2281  2bb0				  -	      .byte	%00110010	; PLOK
   2282  2bb0				  -	      .byte	%00110010	; PLOK
   2283  2bb0				  -	      .byte	%00110110	; PLOK
   2284  2bb0				  -	      .byte	%01111100	; PLOK
   2285  2bb0				  -	      .byte	%01111000	; PLOK
   2286  2bb0				  -	      .byte	%00000000	; PLOK
   2287  2bb0				  -
   2288  2bb0				  -			;byte %00000000 ; PLOK
   2289  2bb0				  -
   2290  2bb0				  -	      .byte	%00000000	; PLOK
   2291  2bb0				  -	      .byte	%01111110	; PLOK
   2292  2bb0				  -	      .byte	%00110000	; PLOK
   2293  2bb0				  -	      .byte	%00111000	; PLOK
   2294  2bb0				  -	      .byte	%00111100	; PLOK
   2295  2bb0				  -	      .byte	%00110000	; PLOK
   2296  2bb0				  -	      .byte	%01111110	; PLOK
   2297  2bb0				  -	      .byte	%00000000	; PLOK
   2298  2bb0				  -
   2299  2bb0				  -			;byte %00000000 ; PLOK
   2300  2bb0				  -
   2301  2bb0				  -	      .byte	%00000000	; PLOK
   2302  2bb0				  -	      .byte	%01100000	; PLOK
   2303  2bb0				  -	      .byte	%01100000	; PLOK
   2304  2bb0				  -	      .byte	%00111000	; PLOK
   2305  2bb0				  -	      .byte	%00100000	; PLOK
   2306  2bb0				  -	      .byte	%01111110	; PLOK
   2307  2bb0				  -	      .byte	%00011100	; PLOK
   2308  2bb0				  -	      .byte	%00000000	; PLOK
   2309  2bb0				  -
   2310  2bb0				  -			;byte %00000000 ; PLOK
   2311  2bb0				  -			;byte %00000000 ; PLOK
   2312  2bb0				  -			;byte %00000000 ; PLOK
   2313  2bb0				  -			;byte %00000000 ; PLOK
   2314  2bb0				  -
   2315  2bb0				  -
   2316  2bb0				  -	      endif		; fontcharsHEX
   2317  2bb0					      endif		; PLOK
   2318  2bb0
   2319  2bb0							; ### any characters that aren't font specific follow... 
   2320  2bb0
   2321  2bb0				  -	      ifconst	fontcharSPACE
   2322  2bb0				  -			;byte %00000000 ; SYMBOLS
   2323  2bb0				  -
   2324  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2325  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2326  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2327  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2328  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2329  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2330  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2331  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2332  2bb0				  -
   2333  2bb0				  -			;byte %00000000 ; SYMBOLS
   2334  2bb0					      endif		; fontcharSPACE
   2335  2bb0
   2336  2bb0				  -	      ifconst	fontcharDOLLAR
   2337  2bb0				  -			;byte %00000000 ; SYMBOLS
   2338  2bb0				  -
   2339  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2340  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2341  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2342  2bb0				  -	      .byte	%00010010	; SYMBOLS
   2343  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2344  2bb0				  -	      .byte	%10010000	; SYMBOLS
   2345  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2346  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2347  2bb0				  -
   2348  2bb0				  -			;byte %00000000 ; SYMBOLS
   2349  2bb0				  -
   2350  2bb0					      endif		; fontcharDOLLAR
   2351  2bb0
   2352  2bb0				  -	      ifconst	fontcharPOUND
   2353  2bb0				  -			;byte %00000000 ; SYMBOLS
   2354  2bb0				  -
   2355  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2356  2bb0				  -	      .byte	%01000000	; SYMBOLS
   2357  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2358  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2359  2bb0				  -	      .byte	%01111000	; SYMBOLS
   2360  2bb0				  -	      .byte	%00100000	; SYMBOLS
   2361  2bb0				  -	      .byte	%00100010	; SYMBOLS
   2362  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2363  2bb0				  -
   2364  2bb0				  -			;byte %00000000 ; SYMBOLS
   2365  2bb0				  -
   2366  2bb0					      endif		; fontcharPOUND
   2367  2bb0
   2368  2bb0
   2369  2bb0				  -	      ifconst	fontcharMRHAPPY
   2370  2bb0				  -			;byte %00000000 ; SYMBOLS
   2371  2bb0				  -
   2372  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2373  2bb0				  -	      .byte	%01100110	; SYMBOLS
   2374  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2375  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2376  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2377  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2378  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2379  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2380  2bb0				  -
   2381  2bb0				  -			;byte %00000000 ; SYMBOLS
   2382  2bb0				  -
   2383  2bb0					      endif		; fontcharMRHAPPY
   2384  2bb0
   2385  2bb0				  -	      ifconst	fontcharMRSAD
   2386  2bb0				  -			;byte %00000000 ; SYMBOLS
   2387  2bb0				  -
   2388  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2389  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2390  2bb0				  -	      .byte	%01100110	; SYMBOLS
   2391  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2392  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2393  2bb0				  -	      .byte	%01011010	; SYMBOLS
   2394  2bb0				  -	      .byte	%01111110	; SYMBOLS
   2395  2bb0				  -	      .byte	%00111100	; SYMBOLS
   2396  2bb0				  -
   2397  2bb0				  -			;byte %00000000 ; SYMBOLS
   2398  2bb0				  -
   2399  2bb0					      endif		; fontcharMRSAD
   2400  2bb0
   2401  2bb0
   2402  2bb0				  -	      ifconst	fontcharCOPYRIGHT
   2403  2bb0				  -			;byte %00000000 ; SYMBOLS
   2404  2bb0				  -
   2405  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2406  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2407  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2408  2bb0				  -	      .byte	%10111010	; SYMBOLS
   2409  2bb0				  -	      .byte	%10100010	; SYMBOLS
   2410  2bb0				  -	      .byte	%10111010	; SYMBOLS
   2411  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2412  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2413  2bb0				  -
   2414  2bb0				  -			;byte %00000000 ; SYMBOLS
   2415  2bb0				  -
   2416  2bb0					      endif		; fontcharCOPYRIGHT
   2417  2bb0
   2418  2bb0
   2419  2bb0				  -	      ifconst	fontcharFUJI
   2420  2bb0				  -
   2421  2bb0				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  2bb0				  -
   2423  2bb0				  -	      .byte	%01110000	; SYMBOLS
   2424  2bb0				  -	      .byte	%01111001	; SYMBOLS
   2425  2bb0				  -	      .byte	%00011101	; SYMBOLS
   2426  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2427  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2428  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2429  2bb0				  -	      .byte	%00001101	; SYMBOLS
   2430  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2431  2bb0				  -
   2432  2bb0				  -			;byte %00000000 ; SYMBOLS
   2433  2bb0				  -
   2434  2bb0				  -	      .byte	%00001110	; SYMBOLS
   2435  2bb0				  -	      .byte	%10011110	; SYMBOLS
   2436  2bb0				  -	      .byte	%10111000	; SYMBOLS
   2437  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2438  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2439  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2440  2bb0				  -	      .byte	%10110000	; SYMBOLS
   2441  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2442  2bb0				  -
   2443  2bb0				  -			;byte %00000000 ; SYMBOLS
   2444  2bb0				  -
   2445  2bb0					      endif		; fontcharFUJI
   2446  2bb0
   2447  2bb0
   2448  2bb0				  -	      ifconst	fontcharHEART
   2449  2bb0				  -			;byte %00000000 ; SYMBOLS
   2450  2bb0				  -
   2451  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2452  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2453  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2454  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2455  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2456  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2457  2bb0				  -	      .byte	%11101110	; SYMBOLS
   2458  2bb0				  -	      .byte	%01000100	; SYMBOLS
   2459  2bb0				  -
   2460  2bb0				  -			;byte %00000000 ; SYMBOLS
   2461  2bb0				  -
   2462  2bb0					      endif		; fontcharHEART
   2463  2bb0
   2464  2bb0				  -	      ifconst	fontcharDIAMOND
   2465  2bb0				  -			;byte %00000000 ; SYMBOLS
   2466  2bb0				  -
   2467  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2468  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2469  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2470  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2471  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2472  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2473  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2474  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2475  2bb0				  -
   2476  2bb0				  -			;byte %00000000 ; SYMBOLS
   2477  2bb0				  -
   2478  2bb0					      endif		; fontcharDIAMOND
   2479  2bb0
   2480  2bb0				  -	      ifconst	fontcharSPADE
   2481  2bb0				  -			;byte %00000000 ; SYMBOLS
   2482  2bb0				  -
   2483  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2484  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2485  2bb0				  -	      .byte	%01010100	; SYMBOLS
   2486  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2487  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2488  2bb0				  -	      .byte	%01111100	; SYMBOLS
   2489  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2490  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2491  2bb0				  -
   2492  2bb0				  -			;byte %00000000 ; SYMBOLS
   2493  2bb0				  -
   2494  2bb0					      endif		; fontcharSPADE
   2495  2bb0
   2496  2bb0				  -	      ifconst	fontcharCLUB
   2497  2bb0				  -			;byte %00000000 ; SYMBOLS
   2498  2bb0				  -
   2499  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2500  2bb0				  -	      .byte	%00010000	; SYMBOLS
   2501  2bb0				  -	      .byte	%11010110	; SYMBOLS
   2502  2bb0				  -	      .byte	%11111110	; SYMBOLS
   2503  2bb0				  -	      .byte	%11010110	; SYMBOLS
   2504  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2505  2bb0				  -	      .byte	%00111000	; SYMBOLS
   2506  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2507  2bb0				  -
   2508  2bb0				  -			;byte %00000000 ; SYMBOLS
   2509  2bb0				  -
   2510  2bb0					      endif		; fontcharCLUB
   2511  2bb0
   2512  2bb0
   2513  2bb0				  -	      ifconst	fontcharCOLON
   2514  2bb0				  -			;byte %00000000 ; SYMBOLS
   2515  2bb0				  -
   2516  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2517  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2518  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2519  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2520  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2521  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2522  2bb0				  -	      .byte	%00011000	; SYMBOLS
   2523  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2524  2bb0				  -
   2525  2bb0				  -			;byte %00000000 ; SYMBOLS
   2526  2bb0				  -
   2527  2bb0					      endif		; fontcharCOLON
   2528  2bb0
   2529  2bb0
   2530  2bb0				  -	      ifconst	fontcharBLOCK
   2531  2bb0				  -
   2532  2bb0				  -			;byte %00000000 ; SYMBOLS
   2533  2bb0				  -
   2534  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2535  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2536  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2537  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2538  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2539  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2540  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2541  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2542  2bb0				  -
   2543  2bb0				  -			;byte %00000000 ; SYMBOLS
   2544  2bb0				  -
   2545  2bb0					      endif		; fontcharBLOCK
   2546  2bb0
   2547  2bb0				  -	      ifconst	fontcharUNDERLINE
   2548  2bb0				  -
   2549  2bb0				  -			;byte %00000000 ; SYMBOLS
   2550  2bb0				  -
   2551  2bb0				  -	      .byte	%11111111	; SYMBOLS
   2552  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2553  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2554  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2555  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2556  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2557  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2558  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2559  2bb0				  -
   2560  2bb0				  -			;byte %00000000 ; SYMBOLS
   2561  2bb0				  -
   2562  2bb0					      endif		; fontcharUNDERLINE
   2563  2bb0
   2564  2bb0				  -	      ifconst	fontcharARISIDE
   2565  2bb0				  -			;byte %00000000 ; SYMBOLS
   2566  2bb0				  -
   2567  2bb0				  -	      .byte	%00000000	; SYMBOLS
   2568  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2569  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2570  2bb0				  -	      .byte	%00101100	; SYMBOLS
   2571  2bb0				  -	      .byte	%01111111	; SYMBOLS
   2572  2bb0				  -	      .byte	%00110111	; SYMBOLS
   2573  2bb0				  -	      .byte	%00000010	; SYMBOLS
   2574  2bb0				  -	      .byte	%00000001	; SYMBOLS
   2575  2bb0				  -
   2576  2bb0				  -			;byte %00000000 ; SYMBOLS
   2577  2bb0				  -
   2578  2bb0					      endif		; fontcharARISIDE
   2579  2bb0
   2580  2bb0				  -	      ifconst	fontcharARIFACE
   2581  2bb0				  -			;byte %00000000 ; SYMBOLS
   2582  2bb0				  -
   2583  2bb0				  -	      .byte	%00001000	; SYMBOLS
   2584  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2585  2bb0				  -	      .byte	%00111110	; SYMBOLS
   2586  2bb0				  -	      .byte	%00101010	; SYMBOLS
   2587  2bb0				  -	      .byte	%00011100	; SYMBOLS
   2588  2bb0				  -	      .byte	%01010100	; SYMBOLS
   2589  2bb0				  -	      .byte	%00100100	; SYMBOLS
   2590  2bb0				  -	      .byte	%00000010	; SYMBOLS
   2591  2bb0				  -
   2592  2bb0				  -			;byte %00000000 ; SYMBOLS
   2593  2bb0				  -
   2594  2bb0				  -
   2595  2bb0					      endif		; fontcharARIRACE
   2596  2bb0
------- FILE titlescreen/asm/titlescreen.asm
    170  2bb0					      endif
    171  2bb0
    172  2bb0				  -	      ifconst	mk_gameselect_on
    173  2bb0				  -	      include	"titlescreen/gameselect_image.asm"
    174  2bb0					      endif
    175  2bb0
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   4789  2bb0
   4790  2bb0				   .
   4791  2bb0							; 
   4792  2bb0
   4793  2bb0				   .
   4794  2bb0							; 
   4795  2bb0
   4796  2bb0				   .L0360		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  2bb0					      include	6lives_statusbar.asm
      1  2bb0							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  2bb0
      3  2bb0				   minikernel		; display up to 6 lives on screen
      4  2bb0		       85 02		      sta	WSYNC
      5  2bb2		       a2 20		      ldx	#$20
      6  2bb4		       86 21		      stx	HMP1
      7  2bb6		       86 25		      stx	VDELP0
      8  2bb8		       a5 c2		      lda	lives
      9  2bba		       4a		      lsr
     10  2bbb		       4a		      lsr
     11  2bbc		       4a		      lsr
     12  2bbd		       4a		      lsr
     13  2bbe		       4a		      lsr
     14  2bbf		       85 10		      sta	RESP0
     15  2bc1		       85 11		      sta	RESP1
     16  2bc3		       86 26		      stx	VDELP1
     17  2bc5		       aa		      tax
     18  2bc6		       bd 5c fc 	      lda	lifenusiz0table,x
     19  2bc9		       85 04		      sta	NUSIZ0
     20  2bcb		       bd 5b fc 	      lda	lifenusiz1table,x
     21  2bce		       85 05		      sta	NUSIZ1
     22  2bd0		       a5 c0		      lda	lifecolor
     23  2bd2		       85 06		      sta	COLUP0
     24  2bd4		       85 07		      sta	COLUP1
     25  2bd6		       a9 10		      lda	#$10
     26  2bd8		       85 20		      sta	HMP0
     27  2bda
     28  2bda		       a5 bf		      lda	statusbarlength
     29  2bdc		       4a		      lsr
     30  2bdd		       4a		      lsr
     31  2bde		       4a		      lsr		; 0-31
     32  2bdf							; 3 cases: 0-7, 8-15, 16-24
     33  2bdf							; if 0-7, temp1=val, temp2=0, temp3=0
     34  2bdf							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  2bdf							; if 16-23, temp1=255, temp2=255, temp3=val
     36  2bdf		       a8		      tay
     37  2be0
     38  2be0		       85 2a		      sta	HMOVE	;cycle 74?
     39  2be2
     40  2be2				  -	      ifconst	statusbarcolor
     41  2be2				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  2be2				  -	      lda	statusbarcolor
     43  2be2				  -	      sta	COLUPF
     44  2be2					      endif
     45  2be2
     46  2be2		       c0 08		      cpy	#8
     47  2be4		       90 17		      bcc	zero_7
     48  2be6		       c0 10		      cpy	#16
     49  2be8		       90 23		      bcc	eight_15
     50  2bea		       a9 ff		      lda	#255
     51  2bec		       85 cb		      sta	temp1
     52  2bee		       85 cc		      sta	temp2
     53  2bf0		       b9 54 fc 	      lda	statustable-16,y
     54  2bf3		       85 cd		      sta	temp3
     55  2bf5		       b9 64 fc 	      lda	statustable,y
     56  2bf8		       85 ce		      sta	temp4
     57  2bfa		       4c 1c fc 	      jmp	startlifedisplay
     58  2bfd
     59  2bfd				   zero_7
     60  2bfd		       a9 00		      lda	#0
     61  2bff		       85 ce		      sta	temp4
     62  2c01		       85 cd		      sta	temp3
     63  2c03		       85 cc		      sta	temp2
     64  2c05		       b9 64 fc 	      lda	statustable,y
     65  2c08		       85 cb		      sta	temp1
     66  2c0a		       4c 1c fc 	      jmp	startlifedisplay
     67  2c0d				   eight_15
     68  2c0d		       a9 ff		      lda	#255
     69  2c0f		       85 cb		      sta	temp1
     70  2c11		       a9 00		      lda	#0
     71  2c13		       85 ce		      sta	temp4
     72  2c15		       85 cd		      sta	temp3
     73  2c17		       b9 74 fc 	      lda	statustable+16,y
     74  2c1a		       85 cc		      sta	temp2
     75  2c1c				   startlifedisplay
     76  2c1c		       a0 07		      ldy	#7
     77  2c1e				   lifeloop
     78  2c1e		       85 02		      sta	WSYNC
     79  2c20		       86 0d		      stx	PF0
     80  2c22		       b1 c1		      lda	(lifepointer),y
     81  2c24		       e0 00		      cpx	#0
     82  2c26		       d0 01		      bne	onelife
     83  2c28		       0c		      .byte.b	$0C
     84  2c29				   onelife
     85  2c29		       85 1b		      sta	GRP0
     86  2c2b
     87  2c2b		       e0 02		      cpx	#2
     88  2c2d		       b0 01		      bcs	nolives
     89  2c2f		       0c		      .byte.b	$0C
     90  2c30				   nolives
     91  2c30		       85 1c		      sta	GRP1
     92  2c32		       a5 ce		      lda	temp4
     93  2c34		       85 0d		      sta	PF0
     94  2c36		       a5 cb		      lda	temp1
     95  2c38		       85 0f		      sta	PF2
     96  2c3a		       a5 cd		      lda	temp3
     97  2c3c		       85 0e		      sta	PF1
     98  2c3e		       a5 cc		      lda	temp2
     99  2c40		       85 0f		      sta	PF2	;cycle 48!
    100  2c42		       68		      pla		; waste 14 cycles in 4 bytes
    101  2c43		       48		      pha		;
    102  2c44		       68		      pla		;
    103  2c45		       48		      pha		; Shouldn't hurt anything!
    104  2c46		       a9 00		      lda	#0
    105  2c48		       88		      dey
    106  2c49		       85 0e		      sta	PF1
    107  2c4b		       10 d1		      bpl	lifeloop
    108  2c4d		       85 02		      sta	WSYNC
    109  2c4f		       c8		      iny
    110  2c50		       84 0d		      sty	PF0
    111  2c52		       84 0f		      sty	PF2
    112  2c54		       84 0e		      sty	PF1
    113  2c56		       84 1b		      sty	GRP0
    114  2c58		       84 1c		      sty	GRP1
    115  2c5a		       60		      rts
    116  2c5b
    117  2c5b				  -	      if	(<*) > $F5
    118  2c5b				  -	      align	256
    119  2c5b					      endif
    120  2c5b				   lifenusiz1table
    121  2c5b		       00		      .byte.b	0
    122  2c5c				   lifenusiz0table
    123  2c5c		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2c64
    125  2c64				   statustable		; warning: page-wrapping might cause issues
    126  2c64							;0-7 and 16+
    127  2c64		       00		      .byte.b	%00000000
    128  2c65		       01		      .byte.b	%00000001
    129  2c66		       03		      .byte.b	%00000011
    130  2c67		       07		      .byte.b	%00000111
    131  2c68		       0f		      .byte.b	%00001111
    132  2c69		       1f		      .byte.b	%00011111
    133  2c6a		       3f		      .byte.b	%00111111
    134  2c6b		       7f		      .byte.b	%01111111
    135  2c6c		       ff		      .byte.b	255
    136  2c6d		       ff		      .byte.b	255
    137  2c6e		       ff		      .byte.b	255
    138  2c6f		       ff		      .byte.b	255
    139  2c70		       ff		      .byte.b	255
    140  2c71		       ff		      .byte.b	255
    141  2c72		       ff		      .byte.b	255
    142  2c73		       ff		      .byte.b	255
    143  2c74							; 8-15
    144  2c74		       00		      .byte.b	0
    145  2c75		       00		      .byte.b	0
    146  2c76		       00		      .byte.b	0
    147  2c77		       00		      .byte.b	0
    148  2c78		       00		      .byte.b	0
    149  2c79		       00		      .byte.b	0
    150  2c7a		       00		      .byte.b	0
    151  2c7b		       00		      .byte.b	0
    152  2c7c		       00		      .byte.b	%00000000
    153  2c7d		       80		      .byte.b	%10000000
    154  2c7e		       c0		      .byte.b	%11000000
    155  2c7f		       e0		      .byte.b	%11100000
    156  2c80		       f0		      .byte.b	%11110000
    157  2c81		       f8		      .byte.b	%11111000
    158  2c82		       fc		      .byte.b	%11111100
    159  2c83		       fe		      .byte.b	%11111110
    160  2c84
------- FILE c:\Projects\SkySaviour_Atari2600\default.bas.asm
   4798  2c84				  -	      if	(<*) > (<(*+8))
   4799  2c84				  -	      repeat	($100-<*)
   4800  2c84				  -	      .byte	0
   4801  2c84				  -	      repend
   4802  2c84					      endif
   4803  2c84				   lives__L0101
   4804  2c84		       3c		      .byte.b	%00111100
   4805  2c85		       18		      .byte.b	%00011000
   4806  2c86		       3c		      .byte.b	%00111100
   4807  2c87		       3c		      .byte.b	%00111100
   4808  2c88		       3c		      .byte.b	%00111100
   4809  2c89		       18		      .byte.b	%00011000
   4810  2c8a		       00		      .byte.b	%00000000
   4811  2c8b		       00		      .byte.b	%00000000
   4812  2c8c				  -	      if	(<*) > (<(*+8))
   4813  2c8c				  -	      repeat	($100-<*)
   4814  2c8c				  -	      .byte	0
   4815  2c8c				  -	      repend
   4816  2c8c					      endif
   4817  2c8c				  -	      if	(<*) < 90
   4818  2c8c				  -	      repeat	(90-<*)
   4819  2c8c				  -	      .byte	0
   4820  2c8c				  -	      repend
   4821  2c8c					      endif
   4822  2c8c				   player32then_0
   4823  2c8c		       00		      .byte.b	0
   4824  2c8d		       66		      .byte.b	%01100110
   4825  2c8e		       ff		      .byte.b	%11111111
   4826  2c8f		       bd		      .byte.b	%10111101
   4827  2c90		       a5		      .byte.b	%10100101
   4828  2c91		       3c		      .byte.b	%00111100
   4829  2c92		       18		      .byte.b	%00011000
   4830  2c93		       18		      .byte.b	%00011000
   4831  2c94		       00		      .byte.b	%00000000
   4832  2c95				  -	      if	(<*) > (<(*+8))
   4833  2c95				  -	      repeat	($100-<*)
   4834  2c95				  -	      .byte	0
   4835  2c95				  -	      repend
   4836  2c95					      endif
   4837  2c95				  -	      if	(<*) < 90
   4838  2c95				  -	      repeat	(90-<*)
   4839  2c95				  -	      .byte	0
   4840  2c95				  -	      repend
   4841  2c95					      endif
   4842  2c95				   player33then_0
   4843  2c95		       00		      .byte.b	0
   4844  2c96		       00		      .byte.b	%00000000
   4845  2c97		       ff		      .byte.b	%11111111
   4846  2c98		       bd		      .byte.b	%10111101
   4847  2c99		       a5		      .byte.b	%10100101
   4848  2c9a		       3c		      .byte.b	%00111100
   4849  2c9b		       18		      .byte.b	%00011000
   4850  2c9c		       18		      .byte.b	%00011000
   4851  2c9d		       00		      .byte.b	%00000000
   4852  2c9e				  -	      if	(<*) > (<(*+7))
   4853  2c9e				  -	      repeat	($100-<*)
   4854  2c9e				  -	      .byte	0
   4855  2c9e				  -	      repend
   4856  2c9e					      endif
   4857  2c9e				  -	      if	(<*) < 90
   4858  2c9e				  -	      repeat	(90-<*)
   4859  2c9e				  -	      .byte	0
   4860  2c9e				  -	      repend
   4861  2c9e					      endif
   4862  2c9e				   player34then_1
   4863  2c9e		       98		      .byte.b	%10011000
   4864  2c9f		       66		      .byte.b	%01100110
   4865  2ca0		       18		      .byte.b	%00011000
   4866  2ca1		       7c		      .byte.b	%01111100
   4867  2ca2		       18		      .byte.b	%00011000
   4868  2ca3		       3c		      .byte.b	%00111100
   4869  2ca4		       5a		      .byte.b	%01011010
   4870  2ca5		       3c		      .byte.b	%00111100
   4871  2ca6				  -	      if	(<*) > (<(*+7))
   4872  2ca6				  -	      repeat	($100-<*)
   4873  2ca6				  -	      .byte	0
   4874  2ca6				  -	      repend
   4875  2ca6					      endif
   4876  2ca6				  -	      if	(<*) < 90
   4877  2ca6				  -	      repeat	(90-<*)
   4878  2ca6				  -	      .byte	0
   4879  2ca6				  -	      repend
   4880  2ca6					      endif
   4881  2ca6				   player35then_1
   4882  2ca6		       19		      .byte.b	%00011001
   4883  2ca7		       66		      .byte.b	%01100110
   4884  2ca8		       18		      .byte.b	%00011000
   4885  2ca9		       3e		      .byte.b	%00111110
   4886  2caa		       18		      .byte.b	%00011000
   4887  2cab		       3c		      .byte.b	%00111100
   4888  2cac		       5a		      .byte.b	%01011010
   4889  2cad		       3c		      .byte.b	%00111100
   4890  2cae				  -	      if	(<*) > (<(*+7))
   4891  2cae				  -	      repeat	($100-<*)
   4892  2cae				  -	      .byte	0
   4893  2cae				  -	      repend
   4894  2cae					      endif
   4895  2cae				  -	      if	(<*) < 90
   4896  2cae				  -	      repeat	(90-<*)
   4897  2cae				  -	      .byte	0
   4898  2cae				  -	      repend
   4899  2cae					      endif
   4900  2cae				   player36then_2
   4901  2cae		       01		      .byte.b	%00000001
   4902  2caf		       99		      .byte.b	%10011001
   4903  2cb0		       ff		      .byte.b	%11111111
   4904  2cb1		       3c		      .byte.b	%00111100
   4905  2cb2		       ff		      .byte.b	%11111111
   4906  2cb3		       3c		      .byte.b	%00111100
   4907  2cb4		       e7		      .byte.b	%11100111
   4908  2cb5		       98		      .byte.b	%10011000
   4909  2cb6				  -	      if	(<*) > (<(*+7))
   4910  2cb6				  -	      repeat	($100-<*)
   4911  2cb6				  -	      .byte	0
   4912  2cb6				  -	      repend
   4913  2cb6					      endif
   4914  2cb6				  -	      if	(<*) < 90
   4915  2cb6				  -	      repeat	(90-<*)
   4916  2cb6				  -	      .byte	0
   4917  2cb6				  -	      repend
   4918  2cb6					      endif
   4919  2cb6				   player37then_2
   4920  2cb6		       80		      .byte.b	%10000000
   4921  2cb7		       99		      .byte.b	%10011001
   4922  2cb8		       ff		      .byte.b	%11111111
   4923  2cb9		       3c		      .byte.b	%00111100
   4924  2cba		       ff		      .byte.b	%11111111
   4925  2cbb		       3c		      .byte.b	%00111100
   4926  2cbc		       e7		      .byte.b	%11100111
   4927  2cbd		       19		      .byte.b	%00011001
   4928  2cbe				  -	      if	(<*) > (<(*+7))
   4929  2cbe				  -	      repeat	($100-<*)
   4930  2cbe				  -	      .byte	0
   4931  2cbe				  -	      repend
   4932  2cbe					      endif
   4933  2cbe				  -	      if	(<*) < 90
   4934  2cbe				  -	      repeat	(90-<*)
   4935  2cbe				  -	      .byte	0
   4936  2cbe				  -	      repend
   4937  2cbe					      endif
   4938  2cbe				   player38then_3
   4939  2cbe		       81		      .byte.b	%10000001
   4940  2cbf		       ff		      .byte.b	%11111111
   4941  2cc0		       24		      .byte.b	%00100100
   4942  2cc1		       c3		      .byte.b	%11000011
   4943  2cc2		       5a		      .byte.b	%01011010
   4944  2cc3		       42		      .byte.b	%01000010
   4945  2cc4		       3c		      .byte.b	%00111100
   4946  2cc5		       e7		      .byte.b	%11100111
   4947  2cc6				  -	      if	(<*) > (<(*+7))
   4948  2cc6				  -	      repeat	($100-<*)
   4949  2cc6				  -	      .byte	0
   4950  2cc6				  -	      repend
   4951  2cc6					      endif
   4952  2cc6				  -	      if	(<*) < 90
   4953  2cc6				  -	      repeat	(90-<*)
   4954  2cc6				  -	      .byte	0
   4955  2cc6				  -	      repend
   4956  2cc6					      endif
   4957  2cc6				   player40then_3
   4958  2cc6		       00		      .byte.b	%00000000
   4959  2cc7		       ff		      .byte.b	%11111111
   4960  2cc8		       24		      .byte.b	%00100100
   4961  2cc9		       42		      .byte.b	%01000010
   4962  2cca		       db		      .byte.b	%11011011
   4963  2ccb		       42		      .byte.b	%01000010
   4964  2ccc		       3c		      .byte.b	%00111100
   4965  2ccd		       e7		      .byte.b	%11100111
   4966  2cce				  -	      if	(<*) > (<(*+7))
   4967  2cce				  -	      repeat	($100-<*)
   4968  2cce				  -	      .byte	0
   4969  2cce				  -	      repend
   4970  2cce					      endif
   4971  2cce				  -	      if	(<*) < 90
   4972  2cce				  -	      repeat	(90-<*)
   4973  2cce				  -	      .byte	0
   4974  2cce				  -	      repend
   4975  2cce					      endif
   4976  2cce				   player41then_3
   4977  2cce		       00		      .byte.b	%00000000
   4978  2ccf		       7e		      .byte.b	%01111110
   4979  2cd0		       a5		      .byte.b	%10100101
   4980  2cd1		       42		      .byte.b	%01000010
   4981  2cd2		       5a		      .byte.b	%01011010
   4982  2cd3		       c3		      .byte.b	%11000011
   4983  2cd4		       3c		      .byte.b	%00111100
   4984  2cd5		       e7		      .byte.b	%11100111
   4985  2cd6				  -	      if	(<*) > (<(*+7))
   4986  2cd6				  -	      repeat	($100-<*)
   4987  2cd6				  -	      .byte	0
   4988  2cd6				  -	      repend
   4989  2cd6					      endif
   4990  2cd6				  -	      if	(<*) < 90
   4991  2cd6				  -	      repeat	(90-<*)
   4992  2cd6				  -	      .byte	0
   4993  2cd6				  -	      repend
   4994  2cd6					      endif
   4995  2cd6				   player43then_2
   4996  2cd6		       3c		      .byte.b	%00111100
   4997  2cd7		       db		      .byte.b	%11011011
   4998  2cd8		       5a		      .byte.b	%01011010
   4999  2cd9		       ff		      .byte.b	%11111111
   5000  2cda		       99		      .byte.b	%10011001
   5001  2cdb		       a5		      .byte.b	%10100101
   5002  2cdc		       c3		      .byte.b	%11000011
   5003  2cdd		       7e		      .byte.b	%01111110
   5004  2cde				  -	      if	(<*) > (<(*+7))
   5005  2cde				  -	      repeat	($100-<*)
   5006  2cde				  -	      .byte	0
   5007  2cde				  -	      repend
   5008  2cde					      endif
   5009  2cde				  -	      if	(<*) < 90
   5010  2cde				  -	      repeat	(90-<*)
   5011  2cde				  -	      .byte	0
   5012  2cde				  -	      repend
   5013  2cde					      endif
   5014  2cde				   player45then_2
   5015  2cde		       5a		      .byte.b	%01011010
   5016  2cdf		       5a		      .byte.b	%01011010
   5017  2ce0		       5a		      .byte.b	%01011010
   5018  2ce1		       ff		      .byte.b	%11111111
   5019  2ce2		       81		      .byte.b	%10000001
   5020  2ce3		       a5		      .byte.b	%10100101
   5021  2ce4		       c3		      .byte.b	%11000011
   5022  2ce5		       7e		      .byte.b	%01111110
   5023  2ce6				  -	      if	(<*) > (<(*+7))
   5024  2ce6				  -	      repeat	($100-<*)
   5025  2ce6				  -	      .byte	0
   5026  2ce6				  -	      repend
   5027  2ce6					      endif
   5028  2ce6				  -	      if	(<*) < 90
   5029  2ce6				  -	      repeat	(90-<*)
   5030  2ce6				  -	      .byte	0
   5031  2ce6				  -	      repend
   5032  2ce6					      endif
   5033  2ce6				   player46then_4
   5034  2ce6		       24		      .byte.b	%00100100
   5035  2ce7		       a5		      .byte.b	%10100101
   5036  2ce8		       5a		      .byte.b	%01011010
   5037  2ce9		       3c		      .byte.b	%00111100
   5038  2cea		       7e		      .byte.b	%01111110
   5039  2ceb		       99		      .byte.b	%10011001
   5040  2cec		       24		      .byte.b	%00100100
   5041  2ced		       42		      .byte.b	%01000010
   5042  2cee				  -	      if	(<*) > (<(*+7))
   5043  2cee				  -	      repeat	($100-<*)
   5044  2cee				  -	      .byte	0
   5045  2cee				  -	      repend
   5046  2cee					      endif
   5047  2cee				  -	      if	(<*) < 90
   5048  2cee				  -	      repeat	(90-<*)
   5049  2cee				  -	      .byte	0
   5050  2cee				  -	      repend
   5051  2cee					      endif
   5052  2cee				   player47then_4
   5053  2cee		       24		      .byte.b	%00100100
   5054  2cef		       24		      .byte.b	%00100100
   5055  2cf0		       db		      .byte.b	%11011011
   5056  2cf1		       3c		      .byte.b	%00111100
   5057  2cf2		       ff		      .byte.b	%11111111
   5058  2cf3		       18		      .byte.b	%00011000
   5059  2cf4		       24		      .byte.b	%00100100
   5060  2cf5		       24		      .byte.b	%00100100
   5061  2cf6				  -	      if	(<*) > (<(*+7))
   5062  2cf6				  -	      repeat	($100-<*)
   5063  2cf6				  -	      .byte	0
   5064  2cf6				  -	      repend
   5065  2cf6					      endif
   5066  2cf6				  -	      if	(<*) < 90
   5067  2cf6				  -	      repeat	(90-<*)
   5068  2cf6				  -	      .byte	0
   5069  2cf6				  -	      repend
   5070  2cf6					      endif
   5071  2cf6				   player48then_5
   5072  2cf6		       91		      .byte.b	%10010001
   5073  2cf7		       5a		      .byte.b	%01011010
   5074  2cf8		       24		      .byte.b	%00100100
   5075  2cf9		       db		      .byte.b	%11011011
   5076  2cfa		       5a		      .byte.b	%01011010
   5077  2cfb		       24		      .byte.b	%00100100
   5078  2cfc		       5a		      .byte.b	%01011010
   5079  2cfd		       89		      .byte.b	%10001001
   5080  2cfe					      if	(<*) > (<(*+7))
   5081  2cfe					      repeat	($100-<*)
   5082  2cfe		       00		      .byte.b	0
   5081  2cfe					      repend
   5082  2cff		       00		      .byte.b	0
   5083  2d00					      repend
   5084  2d00					      endif
   5085  2d00					      if	(<*) < 90
   5086  2d00					      repeat	(90-<*)
   5087  2d00		       00		      .byte.b	0
   5086  2d00					      repend
   5087  2d01		       00		      .byte.b	0
   5086  2d01					      repend
   5087  2d02		       00		      .byte.b	0
   5086  2d02					      repend
   5087  2d03		       00		      .byte.b	0
   5086  2d03					      repend
   5087  2d04		       00		      .byte.b	0
   5086  2d04					      repend
   5087  2d05		       00		      .byte.b	0
   5086  2d05					      repend
   5087  2d06		       00		      .byte.b	0
   5086  2d06					      repend
   5087  2d07		       00		      .byte.b	0
   5086  2d07					      repend
   5087  2d08		       00		      .byte.b	0
   5086  2d08					      repend
   5087  2d09		       00		      .byte.b	0
   5086  2d09					      repend
   5087  2d0a		       00		      .byte.b	0
   5086  2d0a					      repend
   5087  2d0b		       00		      .byte.b	0
   5086  2d0b					      repend
   5087  2d0c		       00		      .byte.b	0
   5086  2d0c					      repend
   5087  2d0d		       00		      .byte.b	0
   5086  2d0d					      repend
   5087  2d0e		       00		      .byte.b	0
   5086  2d0e					      repend
   5087  2d0f		       00		      .byte.b	0
   5086  2d0f					      repend
   5087  2d10		       00		      .byte.b	0
   5086  2d10					      repend
   5087  2d11		       00		      .byte.b	0
   5086  2d11					      repend
   5087  2d12		       00		      .byte.b	0
   5086  2d12					      repend
   5087  2d13		       00		      .byte.b	0
   5086  2d13					      repend
   5087  2d14		       00		      .byte.b	0
   5086  2d14					      repend
   5087  2d15		       00		      .byte.b	0
   5086  2d15					      repend
   5087  2d16		       00		      .byte.b	0
   5086  2d16					      repend
   5087  2d17		       00		      .byte.b	0
   5086  2d17					      repend
   5087  2d18		       00		      .byte.b	0
   5086  2d18					      repend
   5087  2d19		       00		      .byte.b	0
   5086  2d19					      repend
   5087  2d1a		       00		      .byte.b	0
   5086  2d1a					      repend
   5087  2d1b		       00		      .byte.b	0
   5086  2d1b					      repend
   5087  2d1c		       00		      .byte.b	0
   5086  2d1c					      repend
   5087  2d1d		       00		      .byte.b	0
   5086  2d1d					      repend
   5087  2d1e		       00		      .byte.b	0
   5086  2d1e					      repend
   5087  2d1f		       00		      .byte.b	0
   5086  2d1f					      repend
   5087  2d20		       00		      .byte.b	0
   5086  2d20					      repend
   5087  2d21		       00		      .byte.b	0
   5086  2d21					      repend
   5087  2d22		       00		      .byte.b	0
   5086  2d22					      repend
   5087  2d23		       00		      .byte.b	0
   5086  2d23					      repend
   5087  2d24		       00		      .byte.b	0
   5086  2d24					      repend
   5087  2d25		       00		      .byte.b	0
   5086  2d25					      repend
   5087  2d26		       00		      .byte.b	0
   5086  2d26					      repend
   5087  2d27		       00		      .byte.b	0
   5086  2d27					      repend
   5087  2d28		       00		      .byte.b	0
   5086  2d28					      repend
   5087  2d29		       00		      .byte.b	0
   5086  2d29					      repend
   5087  2d2a		       00		      .byte.b	0
   5086  2d2a					      repend
   5087  2d2b		       00		      .byte.b	0
   5086  2d2b					      repend
   5087  2d2c		       00		      .byte.b	0
   5086  2d2c					      repend
   5087  2d2d		       00		      .byte.b	0
   5086  2d2d					      repend
   5087  2d2e		       00		      .byte.b	0
   5086  2d2e					      repend
   5087  2d2f		       00		      .byte.b	0
   5086  2d2f					      repend
   5087  2d30		       00		      .byte.b	0
   5086  2d30					      repend
   5087  2d31		       00		      .byte.b	0
   5086  2d31					      repend
   5087  2d32		       00		      .byte.b	0
   5086  2d32					      repend
   5087  2d33		       00		      .byte.b	0
   5086  2d33					      repend
   5087  2d34		       00		      .byte.b	0
   5086  2d34					      repend
   5087  2d35		       00		      .byte.b	0
   5086  2d35					      repend
   5087  2d36		       00		      .byte.b	0
   5086  2d36					      repend
   5087  2d37		       00		      .byte.b	0
   5086  2d37					      repend
   5087  2d38		       00		      .byte.b	0
   5086  2d38					      repend
   5087  2d39		       00		      .byte.b	0
   5086  2d39					      repend
   5087  2d3a		       00		      .byte.b	0
   5086  2d3a					      repend
   5087  2d3b		       00		      .byte.b	0
   5086  2d3b					      repend
   5087  2d3c		       00		      .byte.b	0
   5086  2d3c					      repend
   5087  2d3d		       00		      .byte.b	0
   5086  2d3d					      repend
   5087  2d3e		       00		      .byte.b	0
   5086  2d3e					      repend
   5087  2d3f		       00		      .byte.b	0
   5086  2d3f					      repend
   5087  2d40		       00		      .byte.b	0
   5086  2d40					      repend
   5087  2d41		       00		      .byte.b	0
   5086  2d41					      repend
   5087  2d42		       00		      .byte.b	0
   5086  2d42					      repend
   5087  2d43		       00		      .byte.b	0
   5086  2d43					      repend
   5087  2d44		       00		      .byte.b	0
   5086  2d44					      repend
   5087  2d45		       00		      .byte.b	0
   5086  2d45					      repend
   5087  2d46		       00		      .byte.b	0
   5086  2d46					      repend
   5087  2d47		       00		      .byte.b	0
   5086  2d47					      repend
   5087  2d48		       00		      .byte.b	0
   5086  2d48					      repend
   5087  2d49		       00		      .byte.b	0
   5086  2d49					      repend
   5087  2d4a		       00		      .byte.b	0
   5086  2d4a					      repend
   5087  2d4b		       00		      .byte.b	0
   5086  2d4b					      repend
   5087  2d4c		       00		      .byte.b	0
   5086  2d4c					      repend
   5087  2d4d		       00		      .byte.b	0
   5086  2d4d					      repend
   5087  2d4e		       00		      .byte.b	0
   5086  2d4e					      repend
   5087  2d4f		       00		      .byte.b	0
   5086  2d4f					      repend
   5087  2d50		       00		      .byte.b	0
   5086  2d50					      repend
   5087  2d51		       00		      .byte.b	0
   5086  2d51					      repend
   5087  2d52		       00		      .byte.b	0
   5086  2d52					      repend
   5087  2d53		       00		      .byte.b	0
   5086  2d53					      repend
   5087  2d54		       00		      .byte.b	0
   5086  2d54					      repend
   5087  2d55		       00		      .byte.b	0
   5086  2d55					      repend
   5087  2d56		       00		      .byte.b	0
   5086  2d56					      repend
   5087  2d57		       00		      .byte.b	0
   5086  2d57					      repend
   5087  2d58		       00		      .byte.b	0
   5086  2d58					      repend
   5087  2d59		       00		      .byte.b	0
   5088  2d5a					      repend
   5089  2d5a					      endif
   5090  2d5a				   player49then_5
   5091  2d5a		       91		      .byte.b	%10010001
   5092  2d5b		       5a		      .byte.b	%01011010
   5093  2d5c		       24		      .byte.b	%00100100
   5094  2d5d		       42		      .byte.b	%01000010
   5095  2d5e		       43		      .byte.b	%01000011
   5096  2d5f		       24		      .byte.b	%00100100
   5097  2d60		       5a		      .byte.b	%01011010
   5098  2d61		       89		      .byte.b	%10001001
   5099  2d62				  -	      if	(<*) > (<(*+7))
   5100  2d62				  -	      repeat	($100-<*)
   5101  2d62				  -	      .byte	0
   5102  2d62				  -	      repend
   5103  2d62					      endif
   5104  2d62				  -	      if	(<*) < 90
   5105  2d62				  -	      repeat	(90-<*)
   5106  2d62				  -	      .byte	0
   5107  2d62				  -	      repend
   5108  2d62					      endif
   5109  2d62				   player50then_5
   5110  2d62		       91		      .byte.b	%10010001
   5111  2d63		       5a		      .byte.b	%01011010
   5112  2d64		       24		      .byte.b	%00100100
   5113  2d65		       db		      .byte.b	%11011011
   5114  2d66		       5a		      .byte.b	%01011010
   5115  2d67		       24		      .byte.b	%00100100
   5116  2d68		       5a		      .byte.b	%01011010
   5117  2d69		       89		      .byte.b	%10001001
   5118  2d6a				  -	      if	((>(*+11)) > (>*))
   5119  2d6a				  -	      ALIGN	256
   5120  2d6a					      endif
   5121  2d6a				   PF1_data0
   5122  2d6a		       7f		      .byte.b	%01111111
   5123  2d6b		       7f		      .byte.b	%01111111
   5124  2d6c		       6b		      .byte.b	%01101011
   5125  2d6d		       3e		      .byte.b	%00111110
   5126  2d6e		       00		      .byte.b	%00000000
   5127  2d6f		       00		      .byte.b	%00000000
   5128  2d70		       00		      .byte.b	%00000000
   5129  2d71		       00		      .byte.b	%00000000
   5130  2d72		       00		      .byte.b	%00000000
   5131  2d73		       00		      .byte.b	%00000000
   5132  2d74		       00		      .byte.b	%00000000
   5133  2d75				  -	      if	((>(*+11)) > (>*))
   5134  2d75				  -	      ALIGN	256
   5135  2d75					      endif
   5136  2d75				   PF2_data0
   5137  2d75		       6c		      .byte.b	%01101100
   5138  2d76		       7c		      .byte.b	%01111100
   5139  2d77		       54		      .byte.b	%01010100
   5140  2d78		       7c		      .byte.b	%01111100
   5141  2d79		       00		      .byte.b	%00000000
   5142  2d7a		       00		      .byte.b	%00000000
   5143  2d7b		       00		      .byte.b	%00000000
   5144  2d7c		       00		      .byte.b	%00000000
   5145  2d7d		       00		      .byte.b	%00000000
   5146  2d7e		       00		      .byte.b	%00000000
   5147  2d7f		       00		      .byte.b	%00000000
   5148  2d80					      if	ECHOFIRST
      500 bytes of ROM space left in bank 2
   5149  2d80					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5150  2d80					      endif
   5151  2d80		       00 01	   ECHOFIRST  =	1
   5152  2d80
   5153  2d80
   5154  2d80							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5155  2d80
   5156  2d80							; feel free to modify the score graphics - just keep each digit 8 high
   5157  2d80							; and keep the conditional compilation stuff intact
   5158  2d80				  -	      ifconst	ROM2k
   5159  2d80				  -	      ORG	$F7AC-8
   5160  2d80					      else
   5161  2d80					      ifconst	bankswitch
   5162  2d80					      if	bankswitch == 8
   5163  2f74					      ORG	$2F94-bscode_length
   5164  2f74					      RORG	$FF94-bscode_length
   5165  2f74					      endif
   5166  2f74				  -	      if	bankswitch == 16
   5167  2f74				  -	      ORG	$4F94-bscode_length
   5168  2f74				  -	      RORG	$FF94-bscode_length
   5169  2f74					      endif
   5170  2f74				  -	      if	bankswitch == 32
   5171  2f74				  -	      ORG	$8F94-bscode_length
   5172  2f74				  -	      RORG	$FF94-bscode_length
   5173  2f74					      endif
   5174  2f74				  -	      if	bankswitch == 64
   5175  2f74				  -	      ORG	$10F80-bscode_length
   5176  2f74				  -	      RORG	$1FF80-bscode_length
   5177  2f74					      endif
   5178  2f74				  -	      else
   5179  2f74				  -	      ORG	$FF9C
   5180  2f74					      endif
   5181  2f74					      endif
   5182  2f74
   5183  2f74							; font equates
   5184  2f74		       00 01	   .21stcentury =	1
   5185  2f74		       00 02	   alarmclock =	2
   5186  2f74		       00 03	   handwritten =	3
   5187  2f74		       00 04	   interrupted =	4
   5188  2f74		       00 05	   retroputer =	5
   5189  2f74		       00 06	   whimsey    =	6
   5190  2f74		       00 07	   tiny       =	7
   5191  2f74		       00 08	   hex	      =	8
   5192  2f74
   5193  2f74				  -	      ifconst	font
   5194  2f74				  -	      if	font == hex
   5195  2f74				  -	      ORG	. - 48
   5196  2f74				  -	      endif
   5197  2f74					      endif
   5198  2f74
   5199  2f74				   scoretable
   5200  2f74
   5201  2f74				  -	      ifconst	font
   5202  2f74				  -	      if	font == .21stcentury
   5203  2f74				  -	      include	"score_graphics.asm.21stcentury"
   5204  2f74				  -	      endif
   5205  2f74				  -	      if	font == alarmclock
   5206  2f74				  -	      include	"score_graphics.asm.alarmclock"
   5207  2f74				  -	      endif
   5208  2f74				  -	      if	font == handwritten
   5209  2f74				  -	      include	"score_graphics.asm.handwritten"
   5210  2f74				  -	      endif
   5211  2f74				  -	      if	font == interrupted
   5212  2f74				  -	      include	"score_graphics.asm.interrupted"
   5213  2f74				  -	      endif
   5214  2f74				  -	      if	font == retroputer
   5215  2f74				  -	      include	"score_graphics.asm.retroputer"
   5216  2f74				  -	      endif
   5217  2f74				  -	      if	font == whimsey
   5218  2f74				  -	      include	"score_graphics.asm.whimsey"
   5219  2f74				  -	      endif
   5220  2f74				  -	      if	font == tiny
   5221  2f74				  -	      include	"score_graphics.asm.tiny"
   5222  2f74				  -	      endif
   5223  2f74				  -	      if	font == hex
   5224  2f74				  -	      include	"score_graphics.asm.hex"
   5225  2f74				  -	      endif
   5226  2f74					      else		; default font
   5227  2f74
   5228  2f74		       3c		      .byte.b	%00111100
   5229  2f75		       66		      .byte.b	%01100110
   5230  2f76		       66		      .byte.b	%01100110
   5231  2f77		       66		      .byte.b	%01100110
   5232  2f78		       66		      .byte.b	%01100110
   5233  2f79		       66		      .byte.b	%01100110
   5234  2f7a		       66		      .byte.b	%01100110
   5235  2f7b		       3c		      .byte.b	%00111100
   5236  2f7c
   5237  2f7c		       7e		      .byte.b	%01111110
   5238  2f7d		       18		      .byte.b	%00011000
   5239  2f7e		       18		      .byte.b	%00011000
   5240  2f7f		       18		      .byte.b	%00011000
   5241  2f80		       18		      .byte.b	%00011000
   5242  2f81		       38		      .byte.b	%00111000
   5243  2f82		       18		      .byte.b	%00011000
   5244  2f83		       08		      .byte.b	%00001000
   5245  2f84
   5246  2f84		       7e		      .byte.b	%01111110
   5247  2f85		       60		      .byte.b	%01100000
   5248  2f86		       60		      .byte.b	%01100000
   5249  2f87		       3c		      .byte.b	%00111100
   5250  2f88		       06		      .byte.b	%00000110
   5251  2f89		       06		      .byte.b	%00000110
   5252  2f8a		       46		      .byte.b	%01000110
   5253  2f8b		       3c		      .byte.b	%00111100
   5254  2f8c
   5255  2f8c		       3c		      .byte.b	%00111100
   5256  2f8d		       46		      .byte.b	%01000110
   5257  2f8e		       06		      .byte.b	%00000110
   5258  2f8f		       06		      .byte.b	%00000110
   5259  2f90		       1c		      .byte.b	%00011100
   5260  2f91		       06		      .byte.b	%00000110
   5261  2f92		       46		      .byte.b	%01000110
   5262  2f93		       3c		      .byte.b	%00111100
   5263  2f94
   5264  2f94		       0c		      .byte.b	%00001100
   5265  2f95		       0c		      .byte.b	%00001100
   5266  2f96		       7e		      .byte.b	%01111110
   5267  2f97		       4c		      .byte.b	%01001100
   5268  2f98		       4c		      .byte.b	%01001100
   5269  2f99		       2c		      .byte.b	%00101100
   5270  2f9a		       1c		      .byte.b	%00011100
   5271  2f9b		       0c		      .byte.b	%00001100
   5272  2f9c
   5273  2f9c		       3c		      .byte.b	%00111100
   5274  2f9d		       46		      .byte.b	%01000110
   5275  2f9e		       06		      .byte.b	%00000110
   5276  2f9f		       06		      .byte.b	%00000110
   5277  2fa0		       3c		      .byte.b	%00111100
   5278  2fa1		       60		      .byte.b	%01100000
   5279  2fa2		       60		      .byte.b	%01100000
   5280  2fa3		       7e		      .byte.b	%01111110
   5281  2fa4
   5282  2fa4		       3c		      .byte.b	%00111100
   5283  2fa5		       66		      .byte.b	%01100110
   5284  2fa6		       66		      .byte.b	%01100110
   5285  2fa7		       66		      .byte.b	%01100110
   5286  2fa8		       7c		      .byte.b	%01111100
   5287  2fa9		       60		      .byte.b	%01100000
   5288  2faa		       62		      .byte.b	%01100010
   5289  2fab		       3c		      .byte.b	%00111100
   5290  2fac
   5291  2fac		       30		      .byte.b	%00110000
   5292  2fad		       30		      .byte.b	%00110000
   5293  2fae		       30		      .byte.b	%00110000
   5294  2faf		       18		      .byte.b	%00011000
   5295  2fb0		       0c		      .byte.b	%00001100
   5296  2fb1		       06		      .byte.b	%00000110
   5297  2fb2		       42		      .byte.b	%01000010
   5298  2fb3		       3e		      .byte.b	%00111110
   5299  2fb4
   5300  2fb4		       3c		      .byte.b	%00111100
   5301  2fb5		       66		      .byte.b	%01100110
   5302  2fb6		       66		      .byte.b	%01100110
   5303  2fb7		       66		      .byte.b	%01100110
   5304  2fb8		       3c		      .byte.b	%00111100
   5305  2fb9		       66		      .byte.b	%01100110
   5306  2fba		       66		      .byte.b	%01100110
   5307  2fbb		       3c		      .byte.b	%00111100
   5308  2fbc
   5309  2fbc		       3c		      .byte.b	%00111100
   5310  2fbd		       46		      .byte.b	%01000110
   5311  2fbe		       06		      .byte.b	%00000110
   5312  2fbf		       3e		      .byte.b	%00111110
   5313  2fc0		       66		      .byte.b	%01100110
   5314  2fc1		       66		      .byte.b	%01100110
   5315  2fc2		       66		      .byte.b	%01100110
   5316  2fc3		       3c		      .byte.b	%00111100
   5317  2fc4
   5318  2fc4					      ifnconst	DPC_kernel_options
   5319  2fc4
   5320  2fc4		       00		      .byte.b	%00000000
   5321  2fc5		       00		      .byte.b	%00000000
   5322  2fc6		       00		      .byte.b	%00000000
   5323  2fc7		       00		      .byte.b	%00000000
   5324  2fc8		       00		      .byte.b	%00000000
   5325  2fc9		       00		      .byte.b	%00000000
   5326  2fca		       00		      .byte.b	%00000000
   5327  2fcb		       00		      .byte.b	%00000000
   5328  2fcc
   5329  2fcc					      endif
   5330  2fcc
   5331  2fcc					      endif
   5332  2fcc
   5333  2fcc				  -	      ifconst	ROM2k
   5334  2fcc				  -	      ORG	$F7FC
   5335  2fcc					      else
   5336  2fcc					      ifconst	bankswitch
   5337  2fcc					      if	bankswitch == 8
   5338  2fd4					      ORG	$2FF4-bscode_length
   5339  2fd4					      RORG	$FFF4-bscode_length
   5340  2fd4					      endif
   5341  2fd4				  -	      if	bankswitch == 16
   5342  2fd4				  -	      ORG	$4FF4-bscode_length
   5343  2fd4				  -	      RORG	$FFF4-bscode_length
   5344  2fd4					      endif
   5345  2fd4				  -	      if	bankswitch == 32
   5346  2fd4				  -	      ORG	$8FF4-bscode_length
   5347  2fd4				  -	      RORG	$FFF4-bscode_length
   5348  2fd4					      endif
   5349  2fd4				  -	      if	bankswitch == 64
   5350  2fd4				  -	      ORG	$10FE0-bscode_length
   5351  2fd4				  -	      RORG	$1FFE0-bscode_length
   5352  2fd4					      endif
   5353  2fd4				  -	      else
   5354  2fd4				  -	      ORG	$FFFC
   5355  2fd4					      endif
   5356  2fd4					      endif
   5357  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5358  2fd4
   5359  2fd4							; every bank has this stuff at the same place
   5360  2fd4							; this code can switch to/from any bank at any entry point
   5361  2fd4							; and can preserve register values
   5362  2fd4							; note: lines not starting with a space are not placed in all banks
   5363  2fd4							;
   5364  2fd4							; line below tells the compiler how long this is - do not remove
   5365  2fd4							;size=32
   5366  2fd4
   5367  2fd4				   begin_bscode
   5368  2fd4		       a2 ff		      ldx	#$ff
   5369  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   5370  2fd6				  -	      stx	FASTFETCH
   5371  2fd6					      endif
   5372  2fd6		       9a		      txs
   5373  2fd7				  -	      if	bankswitch == 64
   5374  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5375  2fd7					      else
   5376  2fd7		       a9 f3		      lda	#>(start-1)
   5377  2fd9					      endif
   5378  2fd9		       48		      pha
   5379  2fda		       a9 f7		      lda	#<(start-1)
   5380  2fdc		       48		      pha
   5381  2fdd
   5382  2fdd				   BS_return
   5383  2fdd		       48		      pha
   5384  2fde		       8a		      txa
   5385  2fdf		       48		      pha
   5386  2fe0		       ba		      tsx
   5387  2fe1
   5388  2fe1					      if	bankswitch != 64
   5389  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   5390  2fe3
   5391  2fe3		       2a		      rol
   5392  2fe4		       2a		      rol
   5393  2fe5		       2a		      rol
   5394  2fe6		       2a		      rol
   5395  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5396  2fe9		       aa		      tax
   5397  2fea		       e8		      inx
   5398  2feb				  -	      else
   5399  2feb				  -	      lda	4,x	; get high byte of return address
   5400  2feb				  -	      tay
   5401  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5402  2feb				  -	      sta	4,x
   5403  2feb				  -	      tya
   5404  2feb				  -	      lsr
   5405  2feb				  -	      lsr
   5406  2feb				  -	      lsr
   5407  2feb				  -	      lsr
   5408  2feb				  -	      tax
   5409  2feb				  -	      inx
   5410  2feb					      endif
   5411  2feb
   5412  2feb				   BS_jsr
   5413  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5414  2fee		       68		      pla
   5415  2fef		       aa		      tax
   5416  2ff0		       68		      pla
   5417  2ff1		       60		      rts
   5418  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5419  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5420  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5421  2ff2					      endif
   5422  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5423  2ff2
   5424  2ff2					      ifconst	bankswitch
   5425  2ff2					      if	bankswitch == 8
   5426  2ffc					      ORG	$2FFC
   5427  2ffc					      RORG	$FFFC
   5428  2ffc					      endif
   5429  2ffc				  -	      if	bankswitch == 16
   5430  2ffc				  -	      ORG	$4FFC
   5431  2ffc				  -	      RORG	$FFFC
   5432  2ffc					      endif
   5433  2ffc				  -	      if	bankswitch == 32
   5434  2ffc				  -	      ORG	$8FFC
   5435  2ffc				  -	      RORG	$FFFC
   5436  2ffc					      endif
   5437  2ffc				  -	      if	bankswitch == 64
   5438  2ffc				  -	      ORG	$10FF0
   5439  2ffc				  -	      RORG	$1FFF0
   5440  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5441  2ffc				  -	      ORG	$10FF8
   5442  2ffc				  -	      RORG	$1FFF8
   5443  2ffc				  -	      ifconst	superchip
   5444  2ffc				  -	      .byte	"E","F","S","C"
   5445  2ffc				  -	      else
   5446  2ffc				  -	      .byte	"E","F","E","F"
   5447  2ffc				  -	      endif
   5448  2ffc				  -	      ORG	$10FFC
   5449  2ffc				  -	      RORG	$1FFFC
   5450  2ffc					      endif
   5451  2ffc				  -	      else
   5452  2ffc				  -	      ifconst	ROM2k
   5453  2ffc				  -	      ORG	$F7FC
   5454  2ffc				  -	      else
   5455  2ffc				  -	      ORG	$FFFC
   5456  2ffc				  -	      endif
   5457  2ffc					      endif
   5458  2ffc		       f8 f3		      .word.w	(start & $ffff)
   5459  2ffe		       f8 f3		      .word.w	(start & $ffff)
