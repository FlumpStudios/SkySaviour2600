------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       00 80	   missile0x  =	$80
      4  3000 ????	       00 81	   missile1x  =	$81
      5  3000 ????	       00 82	   ballx      =	$82
      6  3000 ????
      7  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      8  3000 ????
      9  3000 ????	       00 83	   SpriteIndex =	$83
     10  3000 ????
     11  3000 ????	       00 84	   player0x   =	$84
     12  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     13  3000 ????	       00 85	   player1x   =	$85
     14  3000 ????	       00 86	   player2x   =	$86
     15  3000 ????	       00 87	   player3x   =	$87
     16  3000 ????	       00 88	   player4x   =	$88
     17  3000 ????	       00 89	   player5x   =	$89
     18  3000 ????
     19  3000 ????	       00 8a	   objecty    =	$8A
     20  3000 ????	       00 8a	   missile0y  =	$8A
     21  3000 ????	       00 8b	   missile1y  =	$8B
     22  3000 ????	       00 8c	   bally      =	$8C
     23  3000 ????
     24  3000 ????	       00 8d	   player0y   =	$8D
     25  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     26  3000 ????	       00 8e	   player1y   =	$8E
     27  3000 ????	       00 8f	   player2y   =	$8F
     28  3000 ????	       00 90	   player3y   =	$90
     29  3000 ????	       00 91	   player4y   =	$91
     30  3000 ????	       00 92	   player5y   =	$92
     31  3000 ????
     32  3000 ????	       00 93	   NewNUSIZ   =	$93
     33  3000 ????	       00 93	   _NUSIZ1    =	$93
     34  3000 ????	       00 94	   NUSIZ2     =	$94
     35  3000 ????	       00 95	   NUSIZ3     =	$95
     36  3000 ????	       00 96	   NUSIZ4     =	$96
     37  3000 ????	       00 97	   NUSIZ5     =	$97
     38  3000 ????
     39  3000 ????	       00 98	   NewCOLUP1  =	$98
     40  3000 ????	       00 98	   _COLUP1    =	$98
     41  3000 ????	       00 99	   COLUP2     =	$99
     42  3000 ????	       00 9a	   COLUP3     =	$9A
     43  3000 ????	       00 9b	   COLUP4     =	$9B
     44  3000 ????	       00 9c	   COLUP5     =	$9C
     45  3000 ????
     46  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     47  3000 ????
     48  3000 ????	       00 a2	   player0pointer =	$A2
     49  3000 ????	       00 a2	   player0pointerlo =	$A2
     50  3000 ????	       00 a3	   player0pointerhi =	$A3
     51  3000 ????
     52  3000 ????						;P0Top = temp5
     53  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     54  3000 ????	       00 a4	   P0Bottom   =	$A4
     55  3000 ????	       00 a5	   P1Bottom   =	$A5
     56  3000 ????
     57  3000 ????	       00 a6	   player1pointerlo =	$A6
     58  3000 ????	       00 a7	   player2pointerlo =	$A7
     59  3000 ????	       00 a8	   player3pointerlo =	$A8
     60  3000 ????	       00 a9	   player4pointerlo =	$A9
     61  3000 ????	       00 aa	   player5pointerlo =	$AA
     62  3000 ????
     63  3000 ????	       00 ab	   player1pointerhi =	$AB
     64  3000 ????	       00 ac	   player2pointerhi =	$AC
     65  3000 ????	       00 ad	   player3pointerhi =	$AD
     66  3000 ????	       00 ae	   player4pointerhi =	$AE
     67  3000 ????	       00 af	   player5pointerhi =	$AF
     68  3000 ????
     69  3000 ????	       00 b0	   player0height =	$B0
     70  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     71  3000 ????	       00 b1	   player1height =	$B1
     72  3000 ????	       00 b2	   player2height =	$B2
     73  3000 ????	       00 b3	   player3height =	$B3
     74  3000 ????	       00 b4	   player4height =	$B4
     75  3000 ????	       00 b5	   player5height =	$B5
     76  3000 ????
     77  3000 ????	       00 b6	   PF1temp1   =	$B6
     78  3000 ????	       00 b7	   PF1temp2   =	$B7
     79  3000 ????	       00 b8	   PF2temp1   =	$B8
     80  3000 ????	       00 b9	   PF2temp2   =	$B9
     81  3000 ????
     82  3000 ????	       00 ba	   pfpixelheight =	$BA
     83  3000 ????
     84  3000 ????						; playfield is now a pointer to graphics
     85  3000 ????	       00 bb	   playfield  =	$BB
     86  3000 ????	       00 bb	   PF1pointer =	$BB
     87  3000 ????
     88  3000 ????	       00 bd	   PF2pointer =	$BD
     89  3000 ????
     90  3000 ????	       00 bf	   statusbarlength =	$BF
     91  3000 ????	       00 bf	   aux3       =	$BF
     92  3000 ????
     93  3000 ????	       00 c0	   lifecolor  =	$C0
     94  3000 ????	       00 c0	   pfscorecolor =	$C0
     95  3000 ????	       00 c0	   aux4       =	$C0
     96  3000 ????
     97  3000 ????						;P1display = temp2 ; temp2 and temp3
     98  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     99  3000 ????	       00 c1	   lifepointer =	$c1
    100  3000 ????	       00 c2	   lives      =	$c2
    101  3000 ????	       00 c1	   pfscore1   =	$c1
    102  3000 ????	       00 c2	   pfscore2   =	$c2
    103  3000 ????	       00 c1	   aux5       =	$c1
    104  3000 ????	       00 c2	   aux6       =	$c2
    105  3000 ????
    106  3000 ????	       00 c3	   playfieldpos =	$C3
    107  3000 ????
    108  3000 ????						;RepoLine = temp4
    109  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    110  3000 ????
    111  3000 ????	       00 c4	   pfheight   =	$C4
    112  3000 ????	       00 c5	   scorepointers =	$C5
    113  3000 ????
    114  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    115  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    116  3000 ????	       00 cd	   temp3      =	$CD
    117  3000 ????	       00 ce	   temp4      =	$CE
    118  3000 ????	       00 cf	   temp5      =	$CF
    119  3000 ????	       00 d0	   temp6      =	$D0
    120  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    121  3000 ????
    122  3000 ????	       00 d2	   score      =	$D2
    123  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    124  3000 ????	       00 d6	   rand       =	$D6
    125  3000 ????
    126  3000 ????
    127  3000 ????
    128  3000 ????	       00 d7	   A	      =	$d7
    129  3000 ????	       00 d7	   a	      =	$d7
    130  3000 ????	       00 d8	   B	      =	$d8
    131  3000 ????	       00 d8	   b	      =	$d8
    132  3000 ????	       00 d9	   C	      =	$d9
    133  3000 ????	       00 d9	   c	      =	$d9
    134  3000 ????	       00 da	   D	      =	$da
    135  3000 ????	       00 da	   d	      =	$da
    136  3000 ????	       00 db	   E	      =	$db
    137  3000 ????	       00 db	   e	      =	$db
    138  3000 ????	       00 dc	   F	      =	$dc
    139  3000 ????	       00 dc	   f	      =	$dc
    140  3000 ????	       00 dd	   G	      =	$dd
    141  3000 ????	       00 dd	   g	      =	$dd
    142  3000 ????	       00 de	   H	      =	$de
    143  3000 ????	       00 de	   h	      =	$de
    144  3000 ????	       00 df	   I	      =	$df
    145  3000 ????	       00 df	   i	      =	$df
    146  3000 ????	       00 e0	   J	      =	$e0
    147  3000 ????	       00 e0	   j	      =	$e0
    148  3000 ????	       00 e1	   K	      =	$e1
    149  3000 ????	       00 e1	   k	      =	$e1
    150  3000 ????	       00 e2	   L	      =	$e2
    151  3000 ????	       00 e2	   l	      =	$e2
    152  3000 ????	       00 e3	   M	      =	$e3
    153  3000 ????	       00 e3	   m	      =	$e3
    154  3000 ????	       00 e4	   N	      =	$e4
    155  3000 ????	       00 e4	   n	      =	$e4
    156  3000 ????	       00 e5	   O	      =	$e5
    157  3000 ????	       00 e5	   o	      =	$e5
    158  3000 ????	       00 e6	   P	      =	$e6
    159  3000 ????	       00 e6	   p	      =	$e6
    160  3000 ????	       00 e7	   Q	      =	$e7
    161  3000 ????	       00 e7	   q	      =	$e7
    162  3000 ????	       00 e8	   R	      =	$e8
    163  3000 ????	       00 e8	   r	      =	$e8
    164  3000 ????	       00 e9	   S	      =	$e9
    165  3000 ????	       00 e9	   s	      =	$e9
    166  3000 ????	       00 ea	   T	      =	$ea
    167  3000 ????	       00 ea	   t	      =	$ea
    168  3000 ????	       00 eb	   U	      =	$eb
    169  3000 ????	       00 eb	   u	      =	$eb
    170  3000 ????	       00 ec	   V	      =	$ec
    171  3000 ????	       00 ec	   v	      =	$ec
    172  3000 ????	       00 ed	   W	      =	$ed
    173  3000 ????	       00 ed	   w	      =	$ed
    174  3000 ????	       00 ee	   X	      =	$ee
    175  3000 ????	       00 ee	   x	      =	$ee
    176  3000 ????	       00 ef	   Y	      =	$ef
    177  3000 ????	       00 ef	   y	      =	$ef
    178  3000 ????	       00 f0	   Z	      =	$f0
    179  3000 ????	       00 f0	   z	      =	$f0
    180  3000 ????
    181  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    182  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    183  3000 ????	       00 f3	   spritesort3 =	$f3
    184  3000 ????	       00 f4	   spritesort4 =	$f4
    185  3000 ????	       00 f5	   spritesort5 =	$f5
    186  3000 ????
    187  3000 ????	       00 f6	   stack1     =	$f6
    188  3000 ????	       00 f7	   stack2     =	$f7
    189  3000 ????	       00 f8	   stack3     =	$f8
    190  3000 ????	       00 f9	   stack4     =	$f9
    191  3000 ????						; the stack bytes above may be used in the kernel
    192  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    193  3000 ????
    194  3000 ????				      MAC	return
    195  3000 ????				      ifnconst	bankswitch
    196  3000 ????				      rts
    197  3000 ????				      else
    198  3000 ????				      jmp	BS_return
    199  3000 ????				      endif
    200  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 e2	   ticker     =	l
      7  3000 ????
      8  3000 ????	       00 e6	   switchSprite =	p
      9  3000 ????
     10  3000 ????	       00 e8	   firstFrame =	r
     11  3000 ????
     12  3000 ????	       00 e9	   _High_Score3 =	s
     13  3000 ????
     14  3000 ????	       00 eb	   _High_Score2 =	u
     15  3000 ????
     16  3000 ????	       00 ea	   _High_Score1 =	t
     17  3000 ????
     18  3000 ????	       00 f0	   gameReady  =	z
     19  3000 ????
     20  3000 ????	       00 ee	   _resetTicker =	x
     21  3000 ????
     22  3000 ????	       00 dc	   explosionTicker =	f
     23  3000 ????
     24  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     25  3000 ????
     26  3000 ????	       00 ef	   _Bit0_Reset_Restrainer =	y
     27  3000 ????
     28  3000 ????	       00 d4	   _sc3       =	score + 2
     29  3000 ????
     30  3000 ????	       00 d3	   _sc2       =	score + 1
     31  3000 ????
     32  3000 ????	       00 d2	   _sc1       =	score
     33  3000 ????
     34  3000 ????	       00 d7	   _P0_Luminosity =	a
     35  3000 ????	       00 8b	   misy       =	missile1y
     36  3000 ????	       00 81	   misx       =	missile1x
     37  3000 ????	       00 91	   asteroid4Y =	player4y
     38  3000 ????	       00 90	   asteroid3Y =	player3y
     39  3000 ????	       00 8f	   asteroid2Y =	player2y
     40  3000 ????	       00 8e	   asteroidY  =	player1y
     41  3000 ????	       00 01	   bs_mask    =	1
     42  3000 ????	       00 08	   bankswitch =	8
     43  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     44  3000 ????	       00 01	   multisprite =	1
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
      9  3000 ????				      ifconst	bankswitch
     10  3000 ????				      if	bankswitch == 8
     11  1000					      ORG	$1000
     12  1000					      RORG	$D000
     13  1000					      endif
     14  1000				  -	      if	bankswitch == 16
     15  1000				  -	      ORG	$1000
     16  1000				  -	      RORG	$9000
     17  1000					      endif
     18  1000				  -	      if	bankswitch == 32
     19  1000				  -	      ORG	$1000
     20  1000				  -	      RORG	$1000
     21  1000					      endif
     22  1000				  -	      if	bankswitch == 64
     23  1000				  -	      ORG	$1000
     24  1000				  -	      RORG	$1000
     25  1000					      endif
     26  1000				  -	      else
     27  1000				  -	      ORG	$F000
     28  1000					      endif
     29  1000					      repeat	256
     30  1000		       ff		      .byte.b	$ff
     29  1000					      repend
     30  1001		       ff		      .byte.b	$ff
     29  1001					      repend
     30  1002		       ff		      .byte.b	$ff
     29  1002					      repend
     30  1003		       ff		      .byte.b	$ff
     29  1003					      repend
     30  1004		       ff		      .byte.b	$ff
     29  1004					      repend
     30  1005		       ff		      .byte.b	$ff
     29  1005					      repend
     30  1006		       ff		      .byte.b	$ff
     29  1006					      repend
     30  1007		       ff		      .byte.b	$ff
     29  1007					      repend
     30  1008		       ff		      .byte.b	$ff
     29  1008					      repend
     30  1009		       ff		      .byte.b	$ff
     29  1009					      repend
     30  100a		       ff		      .byte.b	$ff
     29  100a					      repend
     30  100b		       ff		      .byte.b	$ff
     29  100b					      repend
     30  100c		       ff		      .byte.b	$ff
     29  100c					      repend
     30  100d		       ff		      .byte.b	$ff
     29  100d					      repend
     30  100e		       ff		      .byte.b	$ff
     29  100e					      repend
     30  100f		       ff		      .byte.b	$ff
     29  100f					      repend
     30  1010		       ff		      .byte.b	$ff
     29  1010					      repend
     30  1011		       ff		      .byte.b	$ff
     29  1011					      repend
     30  1012		       ff		      .byte.b	$ff
     29  1012					      repend
     30  1013		       ff		      .byte.b	$ff
     29  1013					      repend
     30  1014		       ff		      .byte.b	$ff
     29  1014					      repend
     30  1015		       ff		      .byte.b	$ff
     29  1015					      repend
     30  1016		       ff		      .byte.b	$ff
     29  1016					      repend
     30  1017		       ff		      .byte.b	$ff
     29  1017					      repend
     30  1018		       ff		      .byte.b	$ff
     29  1018					      repend
     30  1019		       ff		      .byte.b	$ff
     29  1019					      repend
     30  101a		       ff		      .byte.b	$ff
     29  101a					      repend
     30  101b		       ff		      .byte.b	$ff
     29  101b					      repend
     30  101c		       ff		      .byte.b	$ff
     29  101c					      repend
     30  101d		       ff		      .byte.b	$ff
     29  101d					      repend
     30  101e		       ff		      .byte.b	$ff
     29  101e					      repend
     30  101f		       ff		      .byte.b	$ff
     29  101f					      repend
     30  1020		       ff		      .byte.b	$ff
     29  1020					      repend
     30  1021		       ff		      .byte.b	$ff
     29  1021					      repend
     30  1022		       ff		      .byte.b	$ff
     29  1022					      repend
     30  1023		       ff		      .byte.b	$ff
     29  1023					      repend
     30  1024		       ff		      .byte.b	$ff
     29  1024					      repend
     30  1025		       ff		      .byte.b	$ff
     29  1025					      repend
     30  1026		       ff		      .byte.b	$ff
     29  1026					      repend
     30  1027		       ff		      .byte.b	$ff
     29  1027					      repend
     30  1028		       ff		      .byte.b	$ff
     29  1028					      repend
     30  1029		       ff		      .byte.b	$ff
     29  1029					      repend
     30  102a		       ff		      .byte.b	$ff
     29  102a					      repend
     30  102b		       ff		      .byte.b	$ff
     29  102b					      repend
     30  102c		       ff		      .byte.b	$ff
     29  102c					      repend
     30  102d		       ff		      .byte.b	$ff
     29  102d					      repend
     30  102e		       ff		      .byte.b	$ff
     29  102e					      repend
     30  102f		       ff		      .byte.b	$ff
     29  102f					      repend
     30  1030		       ff		      .byte.b	$ff
     29  1030					      repend
     30  1031		       ff		      .byte.b	$ff
     29  1031					      repend
     30  1032		       ff		      .byte.b	$ff
     29  1032					      repend
     30  1033		       ff		      .byte.b	$ff
     29  1033					      repend
     30  1034		       ff		      .byte.b	$ff
     29  1034					      repend
     30  1035		       ff		      .byte.b	$ff
     29  1035					      repend
     30  1036		       ff		      .byte.b	$ff
     29  1036					      repend
     30  1037		       ff		      .byte.b	$ff
     29  1037					      repend
     30  1038		       ff		      .byte.b	$ff
     29  1038					      repend
     30  1039		       ff		      .byte.b	$ff
     29  1039					      repend
     30  103a		       ff		      .byte.b	$ff
     29  103a					      repend
     30  103b		       ff		      .byte.b	$ff
     29  103b					      repend
     30  103c		       ff		      .byte.b	$ff
     29  103c					      repend
     30  103d		       ff		      .byte.b	$ff
     29  103d					      repend
     30  103e		       ff		      .byte.b	$ff
     29  103e					      repend
     30  103f		       ff		      .byte.b	$ff
     29  103f					      repend
     30  1040		       ff		      .byte.b	$ff
     29  1040					      repend
     30  1041		       ff		      .byte.b	$ff
     29  1041					      repend
     30  1042		       ff		      .byte.b	$ff
     29  1042					      repend
     30  1043		       ff		      .byte.b	$ff
     29  1043					      repend
     30  1044		       ff		      .byte.b	$ff
     29  1044					      repend
     30  1045		       ff		      .byte.b	$ff
     29  1045					      repend
     30  1046		       ff		      .byte.b	$ff
     29  1046					      repend
     30  1047		       ff		      .byte.b	$ff
     29  1047					      repend
     30  1048		       ff		      .byte.b	$ff
     29  1048					      repend
     30  1049		       ff		      .byte.b	$ff
     29  1049					      repend
     30  104a		       ff		      .byte.b	$ff
     29  104a					      repend
     30  104b		       ff		      .byte.b	$ff
     29  104b					      repend
     30  104c		       ff		      .byte.b	$ff
     29  104c					      repend
     30  104d		       ff		      .byte.b	$ff
     29  104d					      repend
     30  104e		       ff		      .byte.b	$ff
     29  104e					      repend
     30  104f		       ff		      .byte.b	$ff
     29  104f					      repend
     30  1050		       ff		      .byte.b	$ff
     29  1050					      repend
     30  1051		       ff		      .byte.b	$ff
     29  1051					      repend
     30  1052		       ff		      .byte.b	$ff
     29  1052					      repend
     30  1053		       ff		      .byte.b	$ff
     29  1053					      repend
     30  1054		       ff		      .byte.b	$ff
     29  1054					      repend
     30  1055		       ff		      .byte.b	$ff
     29  1055					      repend
     30  1056		       ff		      .byte.b	$ff
     29  1056					      repend
     30  1057		       ff		      .byte.b	$ff
     29  1057					      repend
     30  1058		       ff		      .byte.b	$ff
     29  1058					      repend
     30  1059		       ff		      .byte.b	$ff
     29  1059					      repend
     30  105a		       ff		      .byte.b	$ff
     29  105a					      repend
     30  105b		       ff		      .byte.b	$ff
     29  105b					      repend
     30  105c		       ff		      .byte.b	$ff
     29  105c					      repend
     30  105d		       ff		      .byte.b	$ff
     29  105d					      repend
     30  105e		       ff		      .byte.b	$ff
     29  105e					      repend
     30  105f		       ff		      .byte.b	$ff
     29  105f					      repend
     30  1060		       ff		      .byte.b	$ff
     29  1060					      repend
     30  1061		       ff		      .byte.b	$ff
     29  1061					      repend
     30  1062		       ff		      .byte.b	$ff
     29  1062					      repend
     30  1063		       ff		      .byte.b	$ff
     29  1063					      repend
     30  1064		       ff		      .byte.b	$ff
     29  1064					      repend
     30  1065		       ff		      .byte.b	$ff
     29  1065					      repend
     30  1066		       ff		      .byte.b	$ff
     29  1066					      repend
     30  1067		       ff		      .byte.b	$ff
     29  1067					      repend
     30  1068		       ff		      .byte.b	$ff
     29  1068					      repend
     30  1069		       ff		      .byte.b	$ff
     29  1069					      repend
     30  106a		       ff		      .byte.b	$ff
     29  106a					      repend
     30  106b		       ff		      .byte.b	$ff
     29  106b					      repend
     30  106c		       ff		      .byte.b	$ff
     29  106c					      repend
     30  106d		       ff		      .byte.b	$ff
     29  106d					      repend
     30  106e		       ff		      .byte.b	$ff
     29  106e					      repend
     30  106f		       ff		      .byte.b	$ff
     29  106f					      repend
     30  1070		       ff		      .byte.b	$ff
     29  1070					      repend
     30  1071		       ff		      .byte.b	$ff
     29  1071					      repend
     30  1072		       ff		      .byte.b	$ff
     29  1072					      repend
     30  1073		       ff		      .byte.b	$ff
     29  1073					      repend
     30  1074		       ff		      .byte.b	$ff
     29  1074					      repend
     30  1075		       ff		      .byte.b	$ff
     29  1075					      repend
     30  1076		       ff		      .byte.b	$ff
     29  1076					      repend
     30  1077		       ff		      .byte.b	$ff
     29  1077					      repend
     30  1078		       ff		      .byte.b	$ff
     29  1078					      repend
     30  1079		       ff		      .byte.b	$ff
     29  1079					      repend
     30  107a		       ff		      .byte.b	$ff
     29  107a					      repend
     30  107b		       ff		      .byte.b	$ff
     29  107b					      repend
     30  107c		       ff		      .byte.b	$ff
     29  107c					      repend
     30  107d		       ff		      .byte.b	$ff
     29  107d					      repend
     30  107e		       ff		      .byte.b	$ff
     29  107e					      repend
     30  107f		       ff		      .byte.b	$ff
     29  107f					      repend
     30  1080		       ff		      .byte.b	$ff
     29  1080					      repend
     30  1081		       ff		      .byte.b	$ff
     29  1081					      repend
     30  1082		       ff		      .byte.b	$ff
     29  1082					      repend
     30  1083		       ff		      .byte.b	$ff
     29  1083					      repend
     30  1084		       ff		      .byte.b	$ff
     29  1084					      repend
     30  1085		       ff		      .byte.b	$ff
     29  1085					      repend
     30  1086		       ff		      .byte.b	$ff
     29  1086					      repend
     30  1087		       ff		      .byte.b	$ff
     29  1087					      repend
     30  1088		       ff		      .byte.b	$ff
     29  1088					      repend
     30  1089		       ff		      .byte.b	$ff
     29  1089					      repend
     30  108a		       ff		      .byte.b	$ff
     29  108a					      repend
     30  108b		       ff		      .byte.b	$ff
     29  108b					      repend
     30  108c		       ff		      .byte.b	$ff
     29  108c					      repend
     30  108d		       ff		      .byte.b	$ff
     29  108d					      repend
     30  108e		       ff		      .byte.b	$ff
     29  108e					      repend
     30  108f		       ff		      .byte.b	$ff
     29  108f					      repend
     30  1090		       ff		      .byte.b	$ff
     29  1090					      repend
     30  1091		       ff		      .byte.b	$ff
     29  1091					      repend
     30  1092		       ff		      .byte.b	$ff
     29  1092					      repend
     30  1093		       ff		      .byte.b	$ff
     29  1093					      repend
     30  1094		       ff		      .byte.b	$ff
     29  1094					      repend
     30  1095		       ff		      .byte.b	$ff
     29  1095					      repend
     30  1096		       ff		      .byte.b	$ff
     29  1096					      repend
     30  1097		       ff		      .byte.b	$ff
     29  1097					      repend
     30  1098		       ff		      .byte.b	$ff
     29  1098					      repend
     30  1099		       ff		      .byte.b	$ff
     29  1099					      repend
     30  109a		       ff		      .byte.b	$ff
     29  109a					      repend
     30  109b		       ff		      .byte.b	$ff
     29  109b					      repend
     30  109c		       ff		      .byte.b	$ff
     29  109c					      repend
     30  109d		       ff		      .byte.b	$ff
     29  109d					      repend
     30  109e		       ff		      .byte.b	$ff
     29  109e					      repend
     30  109f		       ff		      .byte.b	$ff
     29  109f					      repend
     30  10a0		       ff		      .byte.b	$ff
     29  10a0					      repend
     30  10a1		       ff		      .byte.b	$ff
     29  10a1					      repend
     30  10a2		       ff		      .byte.b	$ff
     29  10a2					      repend
     30  10a3		       ff		      .byte.b	$ff
     29  10a3					      repend
     30  10a4		       ff		      .byte.b	$ff
     29  10a4					      repend
     30  10a5		       ff		      .byte.b	$ff
     29  10a5					      repend
     30  10a6		       ff		      .byte.b	$ff
     29  10a6					      repend
     30  10a7		       ff		      .byte.b	$ff
     29  10a7					      repend
     30  10a8		       ff		      .byte.b	$ff
     29  10a8					      repend
     30  10a9		       ff		      .byte.b	$ff
     29  10a9					      repend
     30  10aa		       ff		      .byte.b	$ff
     29  10aa					      repend
     30  10ab		       ff		      .byte.b	$ff
     29  10ab					      repend
     30  10ac		       ff		      .byte.b	$ff
     29  10ac					      repend
     30  10ad		       ff		      .byte.b	$ff
     29  10ad					      repend
     30  10ae		       ff		      .byte.b	$ff
     29  10ae					      repend
     30  10af		       ff		      .byte.b	$ff
     29  10af					      repend
     30  10b0		       ff		      .byte.b	$ff
     29  10b0					      repend
     30  10b1		       ff		      .byte.b	$ff
     29  10b1					      repend
     30  10b2		       ff		      .byte.b	$ff
     29  10b2					      repend
     30  10b3		       ff		      .byte.b	$ff
     29  10b3					      repend
     30  10b4		       ff		      .byte.b	$ff
     29  10b4					      repend
     30  10b5		       ff		      .byte.b	$ff
     29  10b5					      repend
     30  10b6		       ff		      .byte.b	$ff
     29  10b6					      repend
     30  10b7		       ff		      .byte.b	$ff
     29  10b7					      repend
     30  10b8		       ff		      .byte.b	$ff
     29  10b8					      repend
     30  10b9		       ff		      .byte.b	$ff
     29  10b9					      repend
     30  10ba		       ff		      .byte.b	$ff
     29  10ba					      repend
     30  10bb		       ff		      .byte.b	$ff
     29  10bb					      repend
     30  10bc		       ff		      .byte.b	$ff
     29  10bc					      repend
     30  10bd		       ff		      .byte.b	$ff
     29  10bd					      repend
     30  10be		       ff		      .byte.b	$ff
     29  10be					      repend
     30  10bf		       ff		      .byte.b	$ff
     29  10bf					      repend
     30  10c0		       ff		      .byte.b	$ff
     29  10c0					      repend
     30  10c1		       ff		      .byte.b	$ff
     29  10c1					      repend
     30  10c2		       ff		      .byte.b	$ff
     29  10c2					      repend
     30  10c3		       ff		      .byte.b	$ff
     29  10c3					      repend
     30  10c4		       ff		      .byte.b	$ff
     29  10c4					      repend
     30  10c5		       ff		      .byte.b	$ff
     29  10c5					      repend
     30  10c6		       ff		      .byte.b	$ff
     29  10c6					      repend
     30  10c7		       ff		      .byte.b	$ff
     29  10c7					      repend
     30  10c8		       ff		      .byte.b	$ff
     29  10c8					      repend
     30  10c9		       ff		      .byte.b	$ff
     29  10c9					      repend
     30  10ca		       ff		      .byte.b	$ff
     29  10ca					      repend
     30  10cb		       ff		      .byte.b	$ff
     29  10cb					      repend
     30  10cc		       ff		      .byte.b	$ff
     29  10cc					      repend
     30  10cd		       ff		      .byte.b	$ff
     29  10cd					      repend
     30  10ce		       ff		      .byte.b	$ff
     29  10ce					      repend
     30  10cf		       ff		      .byte.b	$ff
     29  10cf					      repend
     30  10d0		       ff		      .byte.b	$ff
     29  10d0					      repend
     30  10d1		       ff		      .byte.b	$ff
     29  10d1					      repend
     30  10d2		       ff		      .byte.b	$ff
     29  10d2					      repend
     30  10d3		       ff		      .byte.b	$ff
     29  10d3					      repend
     30  10d4		       ff		      .byte.b	$ff
     29  10d4					      repend
     30  10d5		       ff		      .byte.b	$ff
     29  10d5					      repend
     30  10d6		       ff		      .byte.b	$ff
     29  10d6					      repend
     30  10d7		       ff		      .byte.b	$ff
     29  10d7					      repend
     30  10d8		       ff		      .byte.b	$ff
     29  10d8					      repend
     30  10d9		       ff		      .byte.b	$ff
     29  10d9					      repend
     30  10da		       ff		      .byte.b	$ff
     29  10da					      repend
     30  10db		       ff		      .byte.b	$ff
     29  10db					      repend
     30  10dc		       ff		      .byte.b	$ff
     29  10dc					      repend
     30  10dd		       ff		      .byte.b	$ff
     29  10dd					      repend
     30  10de		       ff		      .byte.b	$ff
     29  10de					      repend
     30  10df		       ff		      .byte.b	$ff
     29  10df					      repend
     30  10e0		       ff		      .byte.b	$ff
     29  10e0					      repend
     30  10e1		       ff		      .byte.b	$ff
     29  10e1					      repend
     30  10e2		       ff		      .byte.b	$ff
     29  10e2					      repend
     30  10e3		       ff		      .byte.b	$ff
     29  10e3					      repend
     30  10e4		       ff		      .byte.b	$ff
     29  10e4					      repend
     30  10e5		       ff		      .byte.b	$ff
     29  10e5					      repend
     30  10e6		       ff		      .byte.b	$ff
     29  10e6					      repend
     30  10e7		       ff		      .byte.b	$ff
     29  10e7					      repend
     30  10e8		       ff		      .byte.b	$ff
     29  10e8					      repend
     30  10e9		       ff		      .byte.b	$ff
     29  10e9					      repend
     30  10ea		       ff		      .byte.b	$ff
     29  10ea					      repend
     30  10eb		       ff		      .byte.b	$ff
     29  10eb					      repend
     30  10ec		       ff		      .byte.b	$ff
     29  10ec					      repend
     30  10ed		       ff		      .byte.b	$ff
     29  10ed					      repend
     30  10ee		       ff		      .byte.b	$ff
     29  10ee					      repend
     30  10ef		       ff		      .byte.b	$ff
     29  10ef					      repend
     30  10f0		       ff		      .byte.b	$ff
     29  10f0					      repend
     30  10f1		       ff		      .byte.b	$ff
     29  10f1					      repend
     30  10f2		       ff		      .byte.b	$ff
     29  10f2					      repend
     30  10f3		       ff		      .byte.b	$ff
     29  10f3					      repend
     30  10f4		       ff		      .byte.b	$ff
     29  10f4					      repend
     30  10f5		       ff		      .byte.b	$ff
     29  10f5					      repend
     30  10f6		       ff		      .byte.b	$ff
     29  10f6					      repend
     30  10f7		       ff		      .byte.b	$ff
     29  10f7					      repend
     30  10f8		       ff		      .byte.b	$ff
     29  10f8					      repend
     30  10f9		       ff		      .byte.b	$ff
     29  10f9					      repend
     30  10fa		       ff		      .byte.b	$ff
     29  10fa					      repend
     30  10fb		       ff		      .byte.b	$ff
     29  10fb					      repend
     30  10fc		       ff		      .byte.b	$ff
     29  10fc					      repend
     30  10fd		       ff		      .byte.b	$ff
     29  10fd					      repend
     30  10fe		       ff		      .byte.b	$ff
     29  10fe					      repend
     30  10ff		       ff		      .byte.b	$ff
     31  1100					      repend
     32  1100				   game
     33  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     34  1100
     35  1100				   .L01 		;  rem **********************************
     36  1100
     37  1100				   .L02 		;  rem *Sky Savior			 *
     38  1100
     39  1100				   .L03 		;  rem *<description>			 *
     40  1100
     41  1100				   .L04 		;  rem *<author>			 *
     42  1100
     43  1100				   .L05 		;  rem *<contact info> 		 *
     44  1100
     45  1100				   .L06 		;  rem *<license>			 *
     46  1100
     47  1100				   .L07 		;  rem ********************************** 
     48  1100
     49  1100				   .L08 		;  includesfile multisprite_superchip.inc
     50  1100
     51  1100				   .L09 		;  set kernel multisprite
     52  1100
     53  1100				   .L010		;  set romsize 8k
     54  1100
     55  1100				   .L011		;  pfheight = 7
     56  1100
     57  1100		       a9 07		      LDA	#7
     58  1102		       85 c4		      STA	pfheight
     59  1104				   .
     60  1104							; 
     61  1104
     62  1104				   .L012		;  playfield:
     63  1104
     64  1104		       a9 b3		      LDA	#<PF1_data0
     65  1106		       85 bb		      STA	PF1pointer
     66  1108		       a9 fe		      LDA	#>PF1_data0
     67  110a		       85 bc		      STA	PF1pointer+1
     68  110c		       a9 be		      LDA	#<PF2_data0
     69  110e		       85 bd		      STA	PF2pointer
     70  1110		       a9 fe		      LDA	#>PF2_data0
     71  1112		       85 be		      STA	PF2pointer+1
     72  1114				   .
     73  1114							; 
     74  1114
     75  1114				   .
     76  1114							; 
     77  1114
     78  1114				   .L013		;  COLUBK  =  $0
     79  1114
     80  1114		       a9 00		      LDA	#$0
     81  1116		       85 09		      STA	COLUBK
     82  1118				   .L014		;  _COLUP1  =	$3A
     83  1118
     84  1118		       a9 3a		      LDA	#$3A
     85  111a		       85 98		      STA	_COLUP1
     86  111c				   .L015		;  COLUP2  =  $A4
     87  111c
     88  111c		       a9 a4		      LDA	#$A4
     89  111e		       85 99		      STA	COLUP2
     90  1120				   .L016		;  COLUP3  =  $A4
     91  1120
     92  1120		       a9 a4		      LDA	#$A4
     93  1122		       85 9a		      STA	COLUP3
     94  1124				   .L017		;  COLUP4  =  $76
     95  1124
     96  1124		       a9 76		      LDA	#$76
     97  1126		       85 9b		      STA	COLUP4
     98  1128				   .L018		;  COLUP5  =  $2E
     99  1128
    100  1128		       a9 2e		      LDA	#$2E
    101  112a		       85 9c		      STA	COLUP5
    102  112c				   .
    103  112c							; 
    104  112c
    105  112c				   .
    106  112c							; 
    107  112c
    108  112c				   .L019		;  lifecolor  =  $aa
    109  112c
    110  112c		       a9 aa		      LDA	#$aa
    111  112e		       85 c0		      STA	lifecolor
    112  1130				   .
    113  1130							; 
    114  1130
    115  1130				   .
    116  1130							; 
    117  1130
    118  1130				   .
    119  1130							; 
    120  1130
    121  1130				   .L020		;  player0x = 66
    122  1130
    123  1130		       a9 42		      LDA	#66
    124  1132		       85 84		      STA	player0x
    125  1134				   .L021		;  player0y = 57
    126  1134
    127  1134		       a9 39		      LDA	#57
    128  1136		       85 8d		      STA	player0y
    129  1138				   .
    130  1138							; 
    131  1138
    132  1138				   .L022		;  player1x = 76
    133  1138
    134  1138		       a9 4c		      LDA	#76
    135  113a		       85 85		      STA	player1x
    136  113c				   .L023		;  player1y = 99
    137  113c
    138  113c		       a9 63		      LDA	#99
    139  113e		       85 8e		      STA	player1y
    140  1140				   .
    141  1140							; 
    142  1140
    143  1140				   .L024		;  player2x = 86
    144  1140
    145  1140		       a9 56		      LDA	#86
    146  1142		       85 86		      STA	player2x
    147  1144				   .L025		;  player2y = 100
    148  1144
    149  1144		       a9 64		      LDA	#100
    150  1146		       85 8f		      STA	player2y
    151  1148				   .
    152  1148							; 
    153  1148
    154  1148				   .L026		;  player3x = 96
    155  1148
    156  1148		       a9 60		      LDA	#96
    157  114a		       85 87		      STA	player3x
    158  114c				   .L027		;  player3y = 100
    159  114c
    160  114c		       a9 64		      LDA	#100
    161  114e		       85 90		      STA	player3y
    162  1150				   .
    163  1150							; 
    164  1150
    165  1150				   .L028		;  player4x = 106
    166  1150
    167  1150		       a9 6a		      LDA	#106
    168  1152		       85 88		      STA	player4x
    169  1154				   .L029		;  player4y = 100
    170  1154
    171  1154		       a9 64		      LDA	#100
    172  1156		       85 91		      STA	player4y
    173  1158				   .
    174  1158							; 
    175  1158
    176  1158				   .L030		;  player5x = 100
    177  1158
    178  1158		       a9 64		      LDA	#100
    179  115a		       85 89		      STA	player5x
    180  115c				   .L031		;  player5y =	200
    181  115c
    182  115c		       a9 c8		      LDA	#200
    183  115e		       85 92		      STA	player5y
    184  1160				   .L032		;  missile0y = 255
    185  1160
    186  1160		       a9 ff		      LDA	#255
    187  1162		       85 8a		      STA	missile0y
    188  1164				   .
    189  1164							; 
    190  1164
    191  1164				   .
    192  1164							; 
    193  1164
    194  1164				   .L033		;  missile1y = 200
    195  1164
    196  1164		       a9 c8		      LDA	#200
    197  1166		       85 8b		      STA	missile1y
    198  1168				   .L034		;  missile1x = 50
    199  1168
    200  1168		       a9 32		      LDA	#50
    201  116a		       85 81		      STA	missile1x
    202  116c				   .
    203  116c							; 
    204  116c
    205  116c				   .
    206  116c							; 
    207  116c
    208  116c				   .
    209  116c							; 
    210  116c
    211  116c				   .
    212  116c							; 
    213  116c
    214  116c				   .
    215  116c							; 
    216  116c
    217  116c				   .
    218  116c							; 
    219  116c
    220  116c				   .L035		;  dim asteroidY  =  player1y.b
    221  116c
    222  116c				   .L036		;  dim asteroid2Y  =  player2y.c
    223  116c
    224  116c				   .L037		;  dim asteroid3Y  =  player3y.d
    225  116c
    226  116c				   .L038		;  dim asteroid4Y  =  player4y.e
    227  116c
    228  116c				   .
    229  116c							; 
    230  116c
    231  116c				   .L039		;  dim misx  =  missile1x.h
    232  116c
    233  116c				   .L040		;  dim misy  =  missile1y.i
    234  116c
    235  116c				   .
    236  116c							; 
    237  116c
    238  116c				   .L041		;  dim _P0_Luminosity	=  a.b
    239  116c
    240  116c				   .
    241  116c							; 
    242  116c
    243  116c				   .L042		;  dim _sc1  =  score
    244  116c
    245  116c				   .L043		;  dim _sc2  =  score + 1
    246  116c
    247  116c				   .L044		;  dim _sc3  =  score + 2
    248  116c
    249  116c				   .
    250  116c							; 
    251  116c
    252  116c				   .L045		;  dim _Bit0_Reset_Restrainer	=  y
    253  116c
    254  116c				   .L046		;  dim _Bit6_Sequence_Switch  =  y
    255  116c
    256  116c				   .
    257  116c							; 
    258  116c
    259  116c				   .L047		;  dim explosionTicker  =  f
    260  116c
    261  116c				   .L048		;  dim _resetTicker  =  x
    262  116c
    263  116c				   .L049		;  dim gameReady  =  z
    264  116c
    265  116c				   .L050		;  dim _High_Score1  =  t
    266  116c
    267  116c				   .L051		;  dim _High_Score2  =  u
    268  116c
    269  116c				   .L052		;  dim _High_Score3  =  s
    270  116c
    271  116c				   .L053		;  dim firstFrame  =  r
    272  116c
    273  116c				   .L054		;  dim switchSprite  =  p
    274  116c
    275  116c				   .
    276  116c							; 
    277  116c
    278  116c				   .L055		;  dim ticker	=  l
    279  116c
    280  116c				   .L056		;  dim titlescreencolor  =  $F0
    281  116c
    282  116c				   .
    283  116c							; 
    284  116c
    285  116c				   .
    286  116c							; 
    287  116c
    288  116c				   .
    289  116c							; 
    290  116c
    291  116c				   .
    292  116c							; 
    293  116c
    294  116c				   .
    295  116c							; 
    296  116c
    297  116c				   .
    298  116c							; 
    299  116c
    300  116c				   .L057		;  _High_Score1  =  _sc1
    301  116c
    302  116c		       a5 d2		      LDA	_sc1
    303  116e		       85 ea		      STA	_High_Score1
    304  1170				   .L058		;  _High_Score2  =  _sc2
    305  1170
    306  1170		       a5 d3		      LDA	_sc2
    307  1172		       85 eb		      STA	_High_Score2
    308  1174				   .L059		;  _High_Score3  =  _sc3
    309  1174
    310  1174		       a5 d4		      LDA	_sc3
    311  1176		       85 e9		      STA	_High_Score3
    312  1178				   .L060		;  lives  =  192
    313  1178
    314  1178		       a9 c0		      LDA	#192
    315  117a		       85 c2		      STA	lives
    316  117c				   .L061		;  ticker  =  0
    317  117c
    318  117c		       a9 00		      LDA	#0
    319  117e		       85 e2		      STA	ticker
    320  1180				   .L062		;  _resetTicker  =  0
    321  1180
    322  1180		       a9 00		      LDA	#0
    323  1182		       85 ee		      STA	_resetTicker
    324  1184				   .L063		;  switchSprite  =  0
    325  1184
    326  1184		       a9 00		      LDA	#0
    327  1186		       85 e6		      STA	switchSprite
    328  1188				   .L064		;  explosionTicker  =	0
    329  1188
    330  1188		       a9 00		      LDA	#0
    331  118a		       85 dc		      STA	explosionTicker
    332  118c				   .L065		;  scorecolor = $1a
    333  118c
    334  118c		       a9 1a		      LDA	#$1a
    335  118e		       85 d5		      STA	scorecolor
    336  1190				   .L066		;  firstFrame	=  0
    337  1190
    338  1190		       a9 00		      LDA	#0
    339  1192		       85 e8		      STA	firstFrame
    340  1194				   .
    341  1194							; 
    342  1194
    343  1194				   .L067		;  NUSIZ0  =  16
    344  1194
    345  1194		       a9 10		      LDA	#16
    346  1196		       85 04		      STA	NUSIZ0
    347  1198				   .
    348  1198							; 
    349  1198
    350  1198				   .L068		;  lives:
    351  1198
    352  1198		       a9 29		      LDA	#<lives__L068
    353  119a		       85 c1		      STA	lifepointer
    354  119c		       a5 c2		      LDA	lifepointer+1
    355  119e		       29 e0		      AND	#$E0
    356  11a0		       09 1e		      ORA	#(>lives__L068)&($1F)
    357  11a2		       85 c2		      STA	lifepointer+1
    358  11a4				   .
    359  11a4							; 
    360  11a4
    361  11a4				   .L069		;  player1:
    362  11a4
    363  11a4		       a2 5a		      LDX	#<playerL069_1
    364  11a6		       86 a6		      STX	player1pointerlo
    365  11a8		       a9 fe		      LDA	#>playerL069_1
    366  11aa		       85 ab		      STA	player1pointerhi
    367  11ac		       a9 09		      LDA	#9
    368  11ae		       85 b1		      STA	player1height
    369  11b0				   .
    370  11b0							; 
    371  11b0
    372  11b0				   .L070		;  player3:
    373  11b0
    374  11b0		       a2 62		      LDX	#<playerL070_3
    375  11b2		       86 a8		      STX	player3pointerlo
    376  11b4		       a9 fe		      LDA	#>playerL070_3
    377  11b6		       85 ad		      STA	player3pointerhi
    378  11b8		       a9 09		      LDA	#9
    379  11ba		       85 b3		      STA	player3height
    380  11bc				   .
    381  11bc							; 
    382  11bc
    383  11bc				   .sprites
    384  11bc							; sprites
    385  11bc
    386  11bc				   .L071		;  ticker  =  ticker  +  1
    387  11bc
    388  11bc		       e6 e2		      INC	ticker
    389  11be				   .L072		;  if ticker  >  10 then ticker  =  0
    390  11be
    391  11be		       a9 0a		      LDA	#10
    392  11c0		       c5 e2		      CMP	ticker
    393  11c2		       b0 04		      BCS	.skipL072
    394  11c4				   .condpart0
    395  11c4		       a9 00		      LDA	#0
    396  11c6		       85 e2		      STA	ticker
    397  11c8				   .skipL072
    398  11c8				   .
    399  11c8							; 
    400  11c8
    401  11c8				   .
    402  11c8							; 
    403  11c8
    404  11c8				   .
    405  11c8							; 
    406  11c8
    407  11c8				   .
    408  11c8							; 
    409  11c8
    410  11c8				   .
    411  11c8							; 
    412  11c8
    413  11c8				   .L073		;  if player1y  =  100  ||  player1y  =  0 then goto setPlayer1Color
    414  11c8
    415  11c8		       a5 8e		      LDA	player1y
    416  11ca		       c9 64		      CMP	#100
    417  11cc		       d0 03		      BNE	.skipL073
    418  11ce				   .condpart1
    419  11ce		       4c d7 d1 	      jmp	.condpart2
    420  11d1				   .skipL073
    421  11d1		       a5 8e		      LDA	player1y
    422  11d3		       c9 00		      CMP	#0
    423  11d5		       d0 03		      BNE	.skip0OR
    424  11d7				   .condpart2
    425  11d7		       4c 0f d6 	      jmp	.setPlayer1Color
    426  11da
    427  11da				   .skip0OR
    428  11da				   .L074		;  if player2y  =  100  ||  player2y  =  0 then goto setPlayer2Color
    429  11da
    430  11da		       a5 8f		      LDA	player2y
    431  11dc		       c9 64		      CMP	#100
    432  11de		       d0 03		      BNE	.skipL074
    433  11e0				   .condpart3
    434  11e0		       4c e9 d1 	      jmp	.condpart4
    435  11e3				   .skipL074
    436  11e3		       a5 8f		      LDA	player2y
    437  11e5		       c9 00		      CMP	#0
    438  11e7		       d0 03		      BNE	.skip1OR
    439  11e9				   .condpart4
    440  11e9		       4c 58 d6 	      jmp	.setPlayer2Color
    441  11ec
    442  11ec				   .skip1OR
    443  11ec				   .L075		;  if player3y  =  100  ||  player4y  =  0 then goto setPlayer3Color
    444  11ec
    445  11ec		       a5 90		      LDA	player3y
    446  11ee		       c9 64		      CMP	#100
    447  11f0		       d0 03		      BNE	.skipL075
    448  11f2				   .condpart5
    449  11f2		       4c fb d1 	      jmp	.condpart6
    450  11f5				   .skipL075
    451  11f5		       a5 91		      LDA	player4y
    452  11f7		       c9 00		      CMP	#0
    453  11f9		       d0 03		      BNE	.skip2OR
    454  11fb				   .condpart6
    455  11fb		       4c dd d6 	      jmp	.setPlayer3Color
    456  11fe
    457  11fe				   .skip2OR
    458  11fe				   .L076		;  if player4y  =  100  ||  player5y  =  0 then goto setPlayer4Color
    459  11fe
    460  11fe		       a5 91		      LDA	player4y
    461  1200		       c9 64		      CMP	#100
    462  1202		       d0 03		      BNE	.skipL076
    463  1204				   .condpart7
    464  1204		       4c 0d d2 	      jmp	.condpart8
    465  1207				   .skipL076
    466  1207		       a5 92		      LDA	player5y
    467  1209		       c9 00		      CMP	#0
    468  120b		       d0 03		      BNE	.skip3OR
    469  120d				   .condpart8
    470  120d		       4c 4e d7 	      jmp	.setPlayer4Color
    471  1210
    472  1210				   .skip3OR
    473  1210				   .
    474  1210							; 
    475  1210
    476  1210				   .colorSetComplete
    477  1210							; colorSetComplete
    478  1210
    479  1210				   .
    480  1210							; 
    481  1210
    482  1210				   .L077		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    483  1210
    484  1210		       a5 92		      LDA	player5y
    485  1212		       c9 c8		      CMP	#200
    486  1214		       b0 02		      BCS	.skipL077
    487  1216				   .condpart9
    488  1216		       e6 dc		      INC	explosionTicker
    489  1218				   .skipL077
    490  1218				   .L078		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    491  1218
    492  1218		       a9 01		      LDA	#1
    493  121a		       c5 dc		      CMP	explosionTicker
    494  121c		       b0 0e		      BCS	.skipL078
    495  121e				   .condpart10
    496  121e		       a9 c8		      LDA	#200
    497  1220		       85 92		      STA	player5y
    498  1222		       a9 00		      LDA	#0
    499  1224		       85 dc		      STA	explosionTicker
    500  1226		       85 19		      STA	AUDV0
    501  1228		       85 15		      STA	AUDC0
    502  122a		       85 17		      STA	AUDF0
    503  122c				   .skipL078
    504  122c				   .
    505  122c							; 
    506  122c
    507  122c				   .L079		;  if player4y  =  80	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    508  122c
    509  122c		       a5 91		      LDA	player4y
    510  122e		       c9 50		      CMP	#80
    511  1230		       d0 11		      BNE	.skipL079
    512  1232				   .condpart11
    513  1232		       a9 96		      LDA	#150
    514  1234		       c5 8b		      CMP	missile1y
    515  1236		       b0 0b		      BCS	.skip11then
    516  1238				   .condpart12
    517  1238		       a5 91		      LDA	player4y
    518  123a		       85 8b		      STA	missile1y
    519  123c		       a5 88		      LDA	player4x
    520  123e		       38		      SEC
    521  123f		       e9 03		      SBC	#3
    522  1241		       85 81		      STA	missile1x
    523  1243				   .skip11then
    524  1243				   .skipL079
    525  1243				   .L080		;  if player4y  =  10	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    526  1243
    527  1243		       a5 91		      LDA	player4y
    528  1245		       c9 0a		      CMP	#10
    529  1247		       d0 11		      BNE	.skipL080
    530  1249				   .condpart13
    531  1249		       a9 96		      LDA	#150
    532  124b		       c5 8b		      CMP	missile1y
    533  124d		       b0 0b		      BCS	.skip13then
    534  124f				   .condpart14
    535  124f		       a5 91		      LDA	player4y
    536  1251		       85 8b		      STA	missile1y
    537  1253		       a5 88		      LDA	player4x
    538  1255		       38		      SEC
    539  1256		       e9 03		      SBC	#3
    540  1258		       85 81		      STA	missile1x
    541  125a				   .skip13then
    542  125a				   .skipL080
    543  125a				   .
    544  125a							; 
    545  125a
    546  125a				   .L081		;  if player4y  =  70	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    547  125a
    548  125a		       a5 91		      LDA	player4y
    549  125c		       c9 46		      CMP	#70
    550  125e		       d0 11		      BNE	.skipL081
    551  1260				   .condpart15
    552  1260		       a9 96		      LDA	#150
    553  1262		       c5 8b		      CMP	missile1y
    554  1264		       b0 0b		      BCS	.skip15then
    555  1266				   .condpart16
    556  1266		       a5 91		      LDA	player4y
    557  1268		       85 8b		      STA	missile1y
    558  126a		       a5 88		      LDA	player4x
    559  126c		       38		      SEC
    560  126d		       e9 03		      SBC	#3
    561  126f		       85 81		      STA	missile1x
    562  1271				   .skip15then
    563  1271				   .skipL081
    564  1271				   .L082		;  if player4y  =  20	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    565  1271
    566  1271		       a5 91		      LDA	player4y
    567  1273		       c9 14		      CMP	#20
    568  1275		       d0 11		      BNE	.skipL082
    569  1277				   .condpart17
    570  1277		       a9 96		      LDA	#150
    571  1279		       c5 8b		      CMP	missile1y
    572  127b		       b0 0b		      BCS	.skip17then
    573  127d				   .condpart18
    574  127d		       a5 91		      LDA	player4y
    575  127f		       85 8b		      STA	missile1y
    576  1281		       a5 88		      LDA	player4x
    577  1283		       38		      SEC
    578  1284		       e9 03		      SBC	#3
    579  1286		       85 81		      STA	missile1x
    580  1288				   .skip17then
    581  1288				   .skipL082
    582  1288				   .
    583  1288							; 
    584  1288
    585  1288				   .L083		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    586  1288
    587  1288		       a9 1e		      LDA	#30
    588  128a		       c5 8a		      CMP	missile0y
    589  128c		       b0 15		      BCS	.skipL083
    590  128e				   .condpart19
    591  128e		       a5 8a		      LDA	missile0y
    592  1290		       c9 3c		      CMP	#60
    593  1292		       b0 0f		      BCS	.skip19then
    594  1294				   .condpart20
    595  1294		       a9 02		      LDA	#2
    596  1296		       85 1a		      STA	AUDV1
    597  1298		       a9 0c		      LDA	#12
    598  129a		       85 16		      STA	AUDC1
    599  129c		       a9 07		      LDA	#7
    600  129e		       85 18		      STA	AUDF1
    601  12a0		       4c ab d2 	      jmp	.skipelse0
    602  12a3				   .skip19then
    603  12a3				   .skipL083
    604  12a3		       a9 00		      LDA	#0
    605  12a5		       85 1a		      STA	AUDV1
    606  12a7		       85 16		      STA	AUDC1
    607  12a9		       85 17		      STA	AUDF0
    608  12ab				   .skipelse0
    609  12ab				   .
    610  12ab							; 
    611  12ab
    612  12ab				   .L084		;  if collision(missile1,player0) then goto gameOver
    613  12ab
    614  12ab		       24 01		      bit	CXM1P
    615  12ad		       10 03		      BPL	.skipL084
    616  12af				   .condpart21
    617  12af		       4c e5 d8 	      jmp	.gameOver
    618  12b2
    619  12b2				   .skipL084
    620  12b2				   .
    621  12b2							; 
    622  12b2
    623  12b2				   .
    624  12b2							; 
    625  12b2
    626  12b2				   .L085		;  if misy  <	150  &&  _resetTicker  =  0 then misy  =  misy	- 0.4
    627  12b2
    628  12b2		       a5 8b		      LDA	misy
    629  12b4		       c9 96		      CMP	#150
    630  12b6		       b0 13		      BCS	.skipL085
    631  12b8				   .condpart22
    632  12b8		       a5 ee		      LDA	_resetTicker
    633  12ba		       c9 00		      CMP	#0
    634  12bc		       d0 0d		      BNE	.skip22then
    635  12be				   .condpart23
    636  12be		       a5 df		      LDA	i
    637  12c0		       38		      SEC
    638  12c1		       e9 66		      SBC	#102
    639  12c3		       85 df		      STA	i
    640  12c5		       a5 8b		      LDA	misy
    641  12c7		       e9 00		      SBC	#0
    642  12c9		       85 8b		      STA	misy
    643  12cb				   .skip22then
    644  12cb				   .skipL085
    645  12cb				   .
    646  12cb							; 
    647  12cb
    648  12cb				   .
    649  12cb							; 
    650  12cb
    651  12cb				   .titlepage
    652  12cb							; titlepage
    653  12cb
    654  12cb				   .L086		;  if joy0fire  ||  switchreset then gameReady  =  1
    655  12cb
    656  12cb		       24 0c		      bit	INPT4
    657  12cd		       30 03		      BMI	.skipL086
    658  12cf				   .condpart24
    659  12cf		       4c d9 d2 	      jmp	.condpart25
    660  12d2				   .skipL086
    661  12d2		       a9 01		      lda	#1
    662  12d4		       2c 82 02 	      bit	SWCHB
    663  12d7		       d0 04		      BNE	.skip10OR
    664  12d9				   .condpart25
    665  12d9		       a9 01		      LDA	#1
    666  12db		       85 f0		      STA	gameReady
    667  12dd				   .skip10OR
    668  12dd				   .L087		;  if gameReady  =  1 then COLUBK  =  $0  :  goto gamestart
    669  12dd
    670  12dd		       a5 f0		      LDA	gameReady
    671  12df		       c9 01		      CMP	#1
    672  12e1		       d0 07		      BNE	.skipL087
    673  12e3				   .condpart26
    674  12e3		       a9 00		      LDA	#$0
    675  12e5		       85 09		      STA	COLUBK
    676  12e7		       4c 1d d3 	      jmp	.gamestart
    677  12ea
    678  12ea				   .skipL087
    679  12ea				   .L088		;  gosub titledrawscreen bank2
    680  12ea
    681  12ea		       85 d1		      sta	temp7
    682  12ec		       a9 d3		      lda	#>(ret_point1-1)
    683  12ee		       48		      pha
    684  12ef		       a9 01		      lda	#<(ret_point1-1)
    685  12f1		       48		      pha
    686  12f2		       a9 f4		      lda	#>(.titledrawscreen-1)
    687  12f4		       48		      pha
    688  12f5		       a9 40		      lda	#<(.titledrawscreen-1)
    689  12f7		       48		      pha
    690  12f8		       a5 d1		      lda	temp7
    691  12fa		       48		      pha
    692  12fb		       8a		      txa
    693  12fc		       48		      pha
    694  12fd		       a2 02		      ldx	#2
    695  12ff		       4c eb ff 	      jmp	BS_jsr
    696  1302				   ret_point1
    697  1302				   .L089		;  _sc1  =  0
    698  1302
    699  1302		       a9 00		      LDA	#0
    700  1304		       85 d2		      STA	_sc1
    701  1306				   .L090		;  _sc2  =  0
    702  1306
    703  1306		       a9 00		      LDA	#0
    704  1308		       85 d3		      STA	_sc2
    705  130a				   .L091		;  _sc3  =  0
    706  130a
    707  130a		       a9 00		      LDA	#0
    708  130c		       85 d4		      STA	_sc3
    709  130e				   .L092		;  _sc1  =  _High_Score1
    710  130e
    711  130e		       a5 ea		      LDA	_High_Score1
    712  1310		       85 d2		      STA	_sc1
    713  1312				   .L093		;  _sc2  =  _High_Score2
    714  1312
    715  1312		       a5 eb		      LDA	_High_Score2
    716  1314		       85 d3		      STA	_sc2
    717  1316				   .L094		;  _sc3  =  _High_Score3
    718  1316
    719  1316		       a5 e9		      LDA	_High_Score3
    720  1318		       85 d4		      STA	_sc3
    721  131a				   .
    722  131a							; 
    723  131a
    724  131a				   .L095		;  goto titlepage
    725  131a
    726  131a		       4c cb d2 	      jmp	.titlepage
    727  131d
    728  131d				   .
    729  131d							; 
    730  131d
    731  131d				   .gamestart
    732  131d							; gamestart
    733  131d
    734  131d				   .L096		;  CTRLPF  =  1
    735  131d
    736  131d		       a9 01		      LDA	#1
    737  131f		       85 0a		      STA	CTRLPF
    738  1321				   .
    739  1321							; 
    740  1321
    741  1321				   .L097		;  if firstFrame  =  0 then _sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1
    742  1321
    743  1321		       a5 e8		      LDA	firstFrame
    744  1323		       c9 00		      CMP	#0
    745  1325		       d0 0c		      BNE	.skipL097
    746  1327				   .condpart27
    747  1327		       a9 00		      LDA	#0
    748  1329		       85 d2		      STA	_sc1
    749  132b		       85 d3		      STA	_sc2
    750  132d		       85 d4		      STA	_sc3
    751  132f		       a9 01		      LDA	#1
    752  1331		       85 e8		      STA	firstFrame
    753  1333				   .skipL097
    754  1333				   .
    755  1333							; 
    756  1333
    757  1333				   .L098		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    758  1333
    759  1333		       a5 ea		      LDA	_High_Score1
    760  1335		       c5 d2		      CMP	_sc1
    761  1337		       b0 03		      BCS	.skipL098
    762  1339				   .condpart28
    763  1339		       4c 6c d3 	      jmp	.__New_High_Score
    764  133c
    765  133c				   .skipL098
    766  133c				   .L099		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    767  133c
    768  133c		       a5 d2		      LDA	_sc1
    769  133e		       c5 ea		      CMP	_High_Score1
    770  1340		       b0 03		      BCS	.skipL099
    771  1342				   .condpart29
    772  1342		       4c 78 d3 	      jmp	.__Skip_High_Score
    773  1345
    774  1345				   .skipL099
    775  1345				   .L0100		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    776  1345
    777  1345		       a5 eb		      LDA	_High_Score2
    778  1347		       c5 d3		      CMP	_sc2
    779  1349		       b0 03		      BCS	.skipL0100
    780  134b				   .condpart30
    781  134b		       4c 6c d3 	      jmp	.__New_High_Score
    782  134e
    783  134e				   .skipL0100
    784  134e				   .L0101		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    785  134e
    786  134e		       a5 d3		      LDA	_sc2
    787  1350		       c5 eb		      CMP	_High_Score2
    788  1352		       b0 03		      BCS	.skipL0101
    789  1354				   .condpart31
    790  1354		       4c 78 d3 	      jmp	.__Skip_High_Score
    791  1357
    792  1357				   .skipL0101
    793  1357				   .
    794  1357							; 
    795  1357
    796  1357				   .L0102		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    797  1357
    798  1357		       a5 e9		      LDA	_High_Score3
    799  1359		       c5 d4		      CMP	_sc3
    800  135b		       b0 03		      BCS	.skipL0102
    801  135d				   .condpart32
    802  135d		       4c 6c d3 	      jmp	.__New_High_Score
    803  1360
    804  1360				   .skipL0102
    805  1360				   .L0103		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    806  1360
    807  1360		       a5 d4		      LDA	_sc3
    808  1362		       c5 e9		      CMP	_High_Score3
    809  1364		       b0 03		      BCS	.skipL0103
    810  1366				   .condpart33
    811  1366		       4c 78 d3 	      jmp	.__Skip_High_Score
    812  1369
    813  1369				   .skipL0103
    814  1369				   .
    815  1369							; 
    816  1369
    817  1369				   .L0104		;  goto __Skip_High_Score
    818  1369
    819  1369		       4c 78 d3 	      jmp	.__Skip_High_Score
    820  136c
    821  136c				   .
    822  136c							; 
    823  136c
    824  136c				   .
    825  136c							; 
    826  136c
    827  136c				   .__New_High_Score
    828  136c							; __New_High_Score
    829  136c
    830  136c				   .
    831  136c							; 
    832  136c
    833  136c				   .L0105		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    834  136c
    835  136c		       a5 d2		      LDA	_sc1
    836  136e		       85 ea		      STA	_High_Score1
    837  1370		       a5 d3		      LDA	_sc2
    838  1372		       85 eb		      STA	_High_Score2
    839  1374		       a5 d4		      LDA	_sc3
    840  1376		       85 e9		      STA	_High_Score3
    841  1378				   .__Skip_High_Score
    842  1378							; __Skip_High_Score
    843  1378
    844  1378				   .
    845  1378							; 
    846  1378
    847  1378				   .
    848  1378							; 
    849  1378
    850  1378				   .
    851  1378							; 
    852  1378
    853  1378				   .L0106		;  player0:
    854  1378
    855  1378		       a2 6a		      LDX	#<playerL0106_0
    856  137a		       86 a2		      STX	player0pointerlo
    857  137c		       a9 fe		      LDA	#>playerL0106_0
    858  137e		       85 a3		      STA	player0pointerhi
    859  1380		       a9 09		      LDA	#9
    860  1382		       85 b0		      STA	player0height
    861  1384				   .
    862  1384							; 
    863  1384
    864  1384				   .L0107		;  if ticker  <  5 then player2:
    865  1384
    866  1384		       a5 e2		      LDA	ticker
    867  1386		       c9 05		      CMP	#5
    868  1388		       b0 0c		      BCS	.skipL0107
    869  138a				   .condpart34
    870  138a		       a2 73		      LDX	#<player34then_2
    871  138c		       86 a7		      STX	player2pointerlo
    872  138e		       a9 fe		      LDA	#>player34then_2
    873  1390		       85 ac		      STA	player2pointerhi
    874  1392		       a9 09		      LDA	#9
    875  1394		       85 b2		      STA	player2height
    876  1396				   .skipL0107
    877  1396				   .
    878  1396							; 
    879  1396
    880  1396				   .L0108		;  if ticker  >=  5 then player2:
    881  1396
    882  1396		       a5 e2		      LDA	ticker
    883  1398		       c9 05		      CMP	#5
    884  139a		       90 0c		      BCC	.skipL0108
    885  139c				   .condpart35
    886  139c		       a2 7b		      LDX	#<player35then_2
    887  139e		       86 a7		      STX	player2pointerlo
    888  13a0		       a9 fe		      LDA	#>player35then_2
    889  13a2		       85 ac		      STA	player2pointerhi
    890  13a4		       a9 09		      LDA	#9
    891  13a6		       85 b2		      STA	player2height
    892  13a8				   .skipL0108
    893  13a8				   .
    894  13a8							; 
    895  13a8
    896  13a8				   .
    897  13a8							; 
    898  13a8
    899  13a8				   .L0109		;  if switchSprite  >	0 then player2:
    900  13a8
    901  13a8		       a9 00		      LDA	#0
    902  13aa		       c5 e6		      CMP	switchSprite
    903  13ac		       b0 0c		      BCS	.skipL0109
    904  13ae				   .condpart36
    905  13ae		       a2 83		      LDX	#<player36then_2
    906  13b0		       86 a7		      STX	player2pointerlo
    907  13b2		       a9 fe		      LDA	#>player36then_2
    908  13b4		       85 ac		      STA	player2pointerhi
    909  13b6		       a9 09		      LDA	#9
    910  13b8		       85 b2		      STA	player2height
    911  13ba				   .skipL0109
    912  13ba				   .
    913  13ba							; 
    914  13ba
    915  13ba				   .
    916  13ba							; 
    917  13ba
    918  13ba				   .L0110		;  if ticker  <  5 then player4:
    919  13ba
    920  13ba		       a5 e2		      LDA	ticker
    921  13bc		       c9 05		      CMP	#5
    922  13be		       b0 0c		      BCS	.skipL0110
    923  13c0				   .condpart37
    924  13c0		       a2 8b		      LDX	#<player37then_4
    925  13c2		       86 a9		      STX	player4pointerlo
    926  13c4		       a9 fe		      LDA	#>player37then_4
    927  13c6		       85 ae		      STA	player4pointerhi
    928  13c8		       a9 09		      LDA	#9
    929  13ca		       85 b4		      STA	player4height
    930  13cc				   .skipL0110
    931  13cc				   .
    932  13cc							; 
    933  13cc
    934  13cc				   .L0111		;  if ticker  >=  5 then player4:
    935  13cc
    936  13cc		       a5 e2		      LDA	ticker
    937  13ce		       c9 05		      CMP	#5
    938  13d0		       90 0c		      BCC	.skipL0111
    939  13d2				   .condpart38
    940  13d2		       a2 93		      LDX	#<player38then_4
    941  13d4		       86 a9		      STX	player4pointerlo
    942  13d6		       a9 fe		      LDA	#>player38then_4
    943  13d8		       85 ae		      STA	player4pointerhi
    944  13da		       a9 09		      LDA	#9
    945  13dc		       85 b4		      STA	player4height
    946  13de				   .skipL0111
    947  13de				   .
    948  13de							; 
    949  13de
    950  13de				   .L0112		;  if explosionTicker	=  1 then player5:
    951  13de
    952  13de		       a5 dc		      LDA	explosionTicker
    953  13e0		       c9 01		      CMP	#1
    954  13e2		       d0 0c		      BNE	.skipL0112
    955  13e4				   .condpart39
    956  13e4		       a2 9b		      LDX	#<player39then_5
    957  13e6		       86 aa		      STX	player5pointerlo
    958  13e8		       a9 fe		      LDA	#>player39then_5
    959  13ea		       85 af		      STA	player5pointerhi
    960  13ec		       a9 09		      LDA	#9
    961  13ee		       85 b5		      STA	player5height
    962  13f0				   .skipL0112
    963  13f0				   .
    964  13f0							; 
    965  13f0
    966  13f0				   .L0113		;  if explosionTicker	=  2 then player5:
    967  13f0
    968  13f0		       a5 dc		      LDA	explosionTicker
    969  13f2		       c9 02		      CMP	#2
    970  13f4		       d0 0c		      BNE	.skipL0113
    971  13f6				   .condpart40
    972  13f6		       a2 a3		      LDX	#<player40then_5
    973  13f8		       86 aa		      STX	player5pointerlo
    974  13fa		       a9 fe		      LDA	#>player40then_5
    975  13fc		       85 af		      STA	player5pointerhi
    976  13fe		       a9 09		      LDA	#9
    977  1400		       85 b5		      STA	player5height
    978  1402				   .skipL0113
    979  1402				   .
    980  1402							; 
    981  1402
    982  1402				   .L0114		;  if explosionTicker	=  3 then player5:
    983  1402
    984  1402		       a5 dc		      LDA	explosionTicker
    985  1404		       c9 03		      CMP	#3
    986  1406		       d0 0c		      BNE	.skipL0114
    987  1408				   .condpart41
    988  1408		       a2 ab		      LDX	#<player41then_5
    989  140a		       86 aa		      STX	player5pointerlo
    990  140c		       a9 fe		      LDA	#>player41then_5
    991  140e		       85 af		      STA	player5pointerhi
    992  1410		       a9 09		      LDA	#9
    993  1412		       85 b5		      STA	player5height
    994  1414				   .skipL0114
    995  1414				   .
    996  1414							; 
    997  1414
    998  1414				   .
    999  1414							; 
   1000  1414
   1001  1414				   .
   1002  1414							; 
   1003  1414
   1004  1414				   .
   1005  1414							; 
   1006  1414
   1007  1414				   .L0115		;  if player1y  <  49 then goto gameOver
   1008  1414
   1009  1414		       a5 8e		      LDA	player1y
   1010  1416		       c9 31		      CMP	#49
   1011  1418		       b0 03		      BCS	.skipL0115
   1012  141a				   .condpart42
   1013  141a		       4c e5 d8 	      jmp	.gameOver
   1014  141d
   1015  141d				   .skipL0115
   1016  141d				   .L0116		;  if player2y  <  49 then goto gameOver
   1017  141d
   1018  141d		       a5 8f		      LDA	player2y
   1019  141f		       c9 31		      CMP	#49
   1020  1421		       b0 03		      BCS	.skipL0116
   1021  1423				   .condpart43
   1022  1423		       4c e5 d8 	      jmp	.gameOver
   1023  1426
   1024  1426				   .skipL0116
   1025  1426				   .L0117		;  if player3y  <  49 then goto gameOver
   1026  1426
   1027  1426		       a5 90		      LDA	player3y
   1028  1428		       c9 31		      CMP	#49
   1029  142a		       b0 03		      BCS	.skipL0117
   1030  142c				   .condpart44
   1031  142c		       4c e5 d8 	      jmp	.gameOver
   1032  142f
   1033  142f				   .skipL0117
   1034  142f				   .L0118		;  if player4y  <  49 then goto gameOver
   1035  142f
   1036  142f		       a5 91		      LDA	player4y
   1037  1431		       c9 31		      CMP	#49
   1038  1433		       b0 03		      BCS	.skipL0118
   1039  1435				   .condpart45
   1040  1435		       4c e5 d8 	      jmp	.gameOver
   1041  1438
   1042  1438				   .skipL0118
   1043  1438				   .
   1044  1438							; 
   1045  1438
   1046  1438				   .L0119		;  if missile1y  <  10 then missile1y	=  200
   1047  1438
   1048  1438		       a5 8b		      LDA	missile1y
   1049  143a		       c9 0a		      CMP	#10
   1050  143c		       b0 04		      BCS	.skipL0119
   1051  143e				   .condpart46
   1052  143e		       a9 c8		      LDA	#200
   1053  1440		       85 8b		      STA	missile1y
   1054  1442				   .skipL0119
   1055  1442				   .
   1056  1442							; 
   1057  1442
   1058  1442				   .
   1059  1442							; 
   1060  1442
   1061  1442				   .
   1062  1442							; 
   1063  1442
   1064  1442				   .L0120		;  if missile0y  >  100 then goto skip
   1065  1442
   1066  1442		       a9 64		      LDA	#100
   1067  1444		       c5 8a		      CMP	missile0y
   1068  1446		       b0 03		      BCS	.skipL0120
   1069  1448				   .condpart47
   1070  1448		       4c 55 d4 	      jmp	.skip
   1071  144b
   1072  144b				   .skipL0120
   1073  144b				   .
   1074  144b							; 
   1075  144b
   1076  144b				   .
   1077  144b							; 
   1078  144b
   1079  144b				   .
   1080  144b							; 
   1081  144b
   1082  144b				   .
   1083  144b							; 
   1084  144b
   1085  144b				   .L0121		;  missile0y  =  missile0y + 2 : goto draw_loop
   1086  144b
   1087  144b		       a5 8a		      LDA	missile0y
   1088  144d		       18		      CLC
   1089  144e		       69 02		      ADC	#2
   1090  1450		       85 8a		      STA	missile0y
   1091  1452		       4c a2 d4 	      jmp	.draw_loop
   1092  1455
   1093  1455				   .
   1094  1455							; 
   1095  1455
   1096  1455				   .
   1097  1455							; 
   1098  1455
   1099  1455				   .skip
   1100  1455							; skip
   1101  1455
   1102  1455				   .L0122		;  if player0y  <  49	&&  lives  <  196  &&  ticker  =  0 then lives	=  lives  +  32 :  goto draw_loop
   1103  1455
   1104  1455		       a5 8d		      LDA	player0y
   1105  1457		       c9 31		      CMP	#49
   1106  1459		       b0 16		      BCS	.skipL0122
   1107  145b				   .condpart48
   1108  145b		       a5 c2		      LDA	lives
   1109  145d		       c9 c4		      CMP	#196
   1110  145f		       b0 10		      BCS	.skip48then
   1111  1461				   .condpart49
   1112  1461		       a5 e2		      LDA	ticker
   1113  1463		       c9 00		      CMP	#0
   1114  1465		       d0 0a		      BNE	.skip49then
   1115  1467				   .condpart50
   1116  1467		       a5 c2		      LDA	lives
   1117  1469		       18		      CLC
   1118  146a		       69 20		      ADC	#32
   1119  146c		       85 c2		      STA	lives
   1120  146e		       4c a2 d4 	      jmp	.draw_loop
   1121  1471
   1122  1471				   .skip49then
   1123  1471				   .skip48then
   1124  1471				   .skipL0122
   1125  1471				   .L0123		;  if player0y  <  49 then goto draw_loop
   1126  1471
   1127  1471		       a5 8d		      LDA	player0y
   1128  1473		       c9 31		      CMP	#49
   1129  1475		       b0 03		      BCS	.skipL0123
   1130  1477				   .condpart51
   1131  1477		       4c a2 d4 	      jmp	.draw_loop
   1132  147a
   1133  147a				   .skipL0123
   1134  147a				   .L0124		;  if lives  <  32 then goto draw_loop
   1135  147a
   1136  147a		       a5 c2		      LDA	lives
   1137  147c		       c9 20		      CMP	#32
   1138  147e		       b0 03		      BCS	.skipL0124
   1139  1480				   .condpart52
   1140  1480		       4c a2 d4 	      jmp	.draw_loop
   1141  1483
   1142  1483				   .skipL0124
   1143  1483				   .L0125		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 :  lives  =  lives  -  32  : missile0x	=  player0x  +	5
   1144  1483
   1145  1483		       24 0c		      bit	INPT4
   1146  1485		       30 1b		      BMI	.skipL0125
   1147  1487				   .condpart53
   1148  1487		       a9 96		      LDA	#150
   1149  1489		       c5 92		      CMP	player5y
   1150  148b		       b0 15		      BCS	.skip53then
   1151  148d				   .condpart54
   1152  148d		       a5 8d		      LDA	player0y
   1153  148f		       38		      SEC
   1154  1490		       e9 04		      SBC	#4
   1155  1492		       85 8a		      STA	missile0y
   1156  1494		       a5 c2		      LDA	lives
   1157  1496		       38		      SEC
   1158  1497		       e9 20		      SBC	#32
   1159  1499		       85 c2		      STA	lives
   1160  149b		       a5 84		      LDA	player0x
   1161  149d		       18		      CLC
   1162  149e		       69 05		      ADC	#5
   1163  14a0		       85 80		      STA	missile0x
   1164  14a2				   .skip53then
   1165  14a2				   .skipL0125
   1166  14a2				   .draw_loop
   1167  14a2							; draw_loop
   1168  14a2
   1169  14a2				   .L0126		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x + 1
   1170  14a2
   1171  14a2		       2c 80 02 	      bit	SWCHA
   1172  14a5		       30 08		      BMI	.skipL0126
   1173  14a7				   .condpart55
   1174  14a7		       a5 84		      LDA	player0x
   1175  14a9		       c9 86		      CMP	#134
   1176  14ab		       b0 02		      BCS	.skip55then
   1177  14ad				   .condpart56
   1178  14ad		       e6 84		      INC	player0x
   1179  14af				   .skip55then
   1180  14af				   .skipL0126
   1181  14af				   .L0127		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x - 1
   1182  14af
   1183  14af		       2c 80 02 	      bit	SWCHA
   1184  14b2		       70 08		      BVS	.skipL0127
   1185  14b4				   .condpart57
   1186  14b4		       a9 13		      LDA	#19
   1187  14b6		       c5 84		      CMP	player0x
   1188  14b8		       b0 02		      BCS	.skip57then
   1189  14ba				   .condpart58
   1190  14ba		       c6 84		      DEC	player0x
   1191  14bc				   .skip57then
   1192  14bc				   .skipL0127
   1193  14bc				   .L0128		;  if joy0down  &&  player0y  >  10 then player0y  =  player0y - 1
   1194  14bc
   1195  14bc		       a9 20		      lda	#$20
   1196  14be		       2c 80 02 	      bit	SWCHA
   1197  14c1		       d0 08		      BNE	.skipL0128
   1198  14c3				   .condpart59
   1199  14c3		       a9 0a		      LDA	#10
   1200  14c5		       c5 8d		      CMP	player0y
   1201  14c7		       b0 02		      BCS	.skip59then
   1202  14c9				   .condpart60
   1203  14c9		       c6 8d		      DEC	player0y
   1204  14cb				   .skip59then
   1205  14cb				   .skipL0128
   1206  14cb				   .L0129		;  if joy0up  &&  player0y  <	90 then player0y  =  player0y + 1
   1207  14cb
   1208  14cb		       a9 10		      lda	#$10
   1209  14cd		       2c 80 02 	      bit	SWCHA
   1210  14d0		       d0 08		      BNE	.skipL0129
   1211  14d2				   .condpart61
   1212  14d2		       a5 8d		      LDA	player0y
   1213  14d4		       c9 5a		      CMP	#90
   1214  14d6		       b0 02		      BCS	.skip61then
   1215  14d8				   .condpart62
   1216  14d8		       e6 8d		      INC	player0y
   1217  14da				   .skip61then
   1218  14da				   .skipL0129
   1219  14da				   .
   1220  14da							; 
   1221  14da
   1222  14da				   .
   1223  14da							; 
   1224  14da
   1225  14da				   .L0130		;  if player0y  <  49	&&  lives  <  196  &&  ticker  <  5 then COLUP0  =  $F0  :  goto exitColourSwitch
   1226  14da
   1227  14da		       a5 8d		      LDA	player0y
   1228  14dc		       c9 31		      CMP	#49
   1229  14de		       b0 13		      BCS	.skipL0130
   1230  14e0				   .condpart63
   1231  14e0		       a5 c2		      LDA	lives
   1232  14e2		       c9 c4		      CMP	#196
   1233  14e4		       b0 0d		      BCS	.skip63then
   1234  14e6				   .condpart64
   1235  14e6		       a5 e2		      LDA	ticker
   1236  14e8		       c9 05		      CMP	#5
   1237  14ea		       b0 07		      BCS	.skip64then
   1238  14ec				   .condpart65
   1239  14ec		       a9 f0		      LDA	#$F0
   1240  14ee		       85 06		      STA	COLUP0
   1241  14f0		       4c 1d d5 	      jmp	.exitColourSwitch
   1242  14f3
   1243  14f3				   .skip64then
   1244  14f3				   .skip63then
   1245  14f3				   .skipL0130
   1246  14f3				   .L0131		;  if player0y  <  49	&&  lives  <  196  &&  ticker  >  5 then COLUP0  =  $02  :  goto exitColourSwitch
   1247  14f3
   1248  14f3		       a5 8d		      LDA	player0y
   1249  14f5		       c9 31		      CMP	#49
   1250  14f7		       b0 13		      BCS	.skipL0131
   1251  14f9				   .condpart66
   1252  14f9		       a5 c2		      LDA	lives
   1253  14fb		       c9 c4		      CMP	#196
   1254  14fd		       b0 0d		      BCS	.skip66then
   1255  14ff				   .condpart67
   1256  14ff		       a9 05		      LDA	#5
   1257  1501		       c5 e2		      CMP	ticker
   1258  1503		       b0 07		      BCS	.skip67then
   1259  1505				   .condpart68
   1260  1505		       a9 02		      LDA	#$02
   1261  1507		       85 06		      STA	COLUP0
   1262  1509		       4c 1d d5 	      jmp	.exitColourSwitch
   1263  150c
   1264  150c				   .skip67then
   1265  150c				   .skip66then
   1266  150c				   .skipL0131
   1267  150c				   .L0132		;  if lives  <  32 then COLUP0  =  $62 else COLUP0  =	$C6
   1268  150c
   1269  150c		       a5 c2		      LDA	lives
   1270  150e		       c9 20		      CMP	#32
   1271  1510		       b0 07		      BCS	.skipL0132
   1272  1512				   .condpart69
   1273  1512		       a9 62		      LDA	#$62
   1274  1514		       85 06		      STA	COLUP0
   1275  1516		       4c 1d d5 	      jmp	.skipelse1
   1276  1519				   .skipL0132
   1277  1519		       a9 c6		      LDA	#$C6
   1278  151b		       85 06		      STA	COLUP0
   1279  151d				   .skipelse1
   1280  151d				   .
   1281  151d							; 
   1282  151d
   1283  151d				   .exitColourSwitch
   1284  151d							; exitColourSwitch
   1285  151d
   1286  151d				   .
   1287  151d							; 
   1288  151d
   1289  151d				   .
   1290  151d							; 
   1291  151d
   1292  151d				   .
   1293  151d							; 
   1294  151d
   1295  151d				   .
   1296  151d							; 
   1297  151d
   1298  151d				   .L0133		;  if collision(missile0,player1) then goto collisions
   1299  151d
   1300  151d		       24 00		      bit	CXM0P
   1301  151f		       10 03		      BPL	.skipL0133
   1302  1521				   .condpart70
   1303  1521		       4c bf d7 	      jmp	.collisions
   1304  1524
   1305  1524				   .skipL0133
   1306  1524				   .
   1307  1524							; 
   1308  1524
   1309  1524				   .
   1310  1524							; 
   1311  1524
   1312  1524				   .
   1313  1524							; 
   1314  1524
   1315  1524				   .
   1316  1524							; 
   1317  1524
   1318  1524				   .
   1319  1524							; 
   1320  1524
   1321  1524				   .
   1322  1524							; 
   1323  1524
   1324  1524				   .
   1325  1524							; 
   1326  1524
   1327  1524				   .
   1328  1524							; 
   1329  1524
   1330  1524				   .frameReset
   1331  1524							; frameReset
   1332  1524
   1333  1524				   .
   1334  1524							; 
   1335  1524
   1336  1524				   .
   1337  1524							; 
   1338  1524
   1339  1524				   .
   1340  1524							; 
   1341  1524
   1342  1524				   .
   1343  1524							; 
   1344  1524
   1345  1524				   .
   1346  1524							; 
   1347  1524
   1348  1524				   .
   1349  1524							; 
   1350  1524
   1351  1524				   .L0134		;  if _sc3  <	60  &&	_sc2  <  1 then goto slow
   1352  1524
   1353  1524		       a5 d4		      LDA	_sc3
   1354  1526		       c9 3c		      CMP	#60
   1355  1528		       b0 09		      BCS	.skipL0134
   1356  152a				   .condpart71
   1357  152a		       a5 d3		      LDA	_sc2
   1358  152c		       c9 01		      CMP	#1
   1359  152e		       b0 03		      BCS	.skip71then
   1360  1530				   .condpart72
   1361  1530		       4c aa d5 	      jmp	.slow
   1362  1533
   1363  1533				   .skip71then
   1364  1533				   .skipL0134
   1365  1533				   .
   1366  1533							; 
   1367  1533
   1368  1533				   .L0135		;  if _sc2  <	1 then goto fast
   1369  1533
   1370  1533		       a5 d3		      LDA	_sc2
   1371  1535		       c9 01		      CMP	#1
   1372  1537		       b0 03		      BCS	.skipL0135
   1373  1539				   .condpart73
   1374  1539		       4c 73 d5 	      jmp	.fast
   1375  153c
   1376  153c				   .skipL0135
   1377  153c				   .
   1378  153c							; 
   1379  153c
   1380  153c				   .
   1381  153c							; 
   1382  153c
   1383  153c				   .L0136		;  asteroidY  =  asteroidY  -	0.19
   1384  153c
   1385  153c		       a5 d8		      LDA	b
   1386  153e		       38		      SEC
   1387  153f		       e9 30		      SBC	#48
   1388  1541		       85 d8		      STA	b
   1389  1543		       a5 8e		      LDA	asteroidY
   1390  1545		       e9 00		      SBC	#0
   1391  1547		       85 8e		      STA	asteroidY
   1392  1549				   .L0137		;  asteroid2Y	=  asteroid2Y  -  0.21
   1393  1549
   1394  1549		       a5 d9		      LDA	c
   1395  154b		       38		      SEC
   1396  154c		       e9 35		      SBC	#53
   1397  154e		       85 d9		      STA	c
   1398  1550		       a5 8f		      LDA	asteroid2Y
   1399  1552		       e9 00		      SBC	#0
   1400  1554		       85 8f		      STA	asteroid2Y
   1401  1556				   .L0138		;  asteroid3Y	=  asteroid3Y  -  0.22
   1402  1556
   1403  1556		       a5 da		      LDA	d
   1404  1558		       38		      SEC
   1405  1559		       e9 38		      SBC	#56
   1406  155b		       85 da		      STA	d
   1407  155d		       a5 90		      LDA	asteroid3Y
   1408  155f		       e9 00		      SBC	#0
   1409  1561		       85 90		      STA	asteroid3Y
   1410  1563				   .
   1411  1563							; 
   1412  1563
   1413  1563				   .L0139		;  asteroid4Y	=  asteroid4Y  -  0.16
   1414  1563
   1415  1563		       a5 db		      LDA	e
   1416  1565		       38		      SEC
   1417  1566		       e9 28		      SBC	#40
   1418  1568		       85 db		      STA	e
   1419  156a		       a5 91		      LDA	asteroid4Y
   1420  156c		       e9 00		      SBC	#0
   1421  156e		       85 91		      STA	asteroid4Y
   1422  1570				   .
   1423  1570							; 
   1424  1570
   1425  1570				   .L0140		;  goto resetScreen
   1426  1570
   1427  1570		       4c f0 d5 	      jmp	.resetScreen
   1428  1573
   1429  1573				   .
   1430  1573							; 
   1431  1573
   1432  1573				   .fast
   1433  1573							; fast
   1434  1573
   1435  1573				   .L0141		;  asteroidY  =  asteroidY  -	0.15
   1436  1573
   1437  1573		       a5 d8		      LDA	b
   1438  1575		       38		      SEC
   1439  1576		       e9 26		      SBC	#38
   1440  1578		       85 d8		      STA	b
   1441  157a		       a5 8e		      LDA	asteroidY
   1442  157c		       e9 00		      SBC	#0
   1443  157e		       85 8e		      STA	asteroidY
   1444  1580				   .L0142		;  asteroid2Y	=  asteroid2Y  -  0.17
   1445  1580
   1446  1580		       a5 d9		      LDA	c
   1447  1582		       38		      SEC
   1448  1583		       e9 2b		      SBC	#43
   1449  1585		       85 d9		      STA	c
   1450  1587		       a5 8f		      LDA	asteroid2Y
   1451  1589		       e9 00		      SBC	#0
   1452  158b		       85 8f		      STA	asteroid2Y
   1453  158d				   .L0143		;  asteroid3Y	=  asteroid3Y  -  0.19
   1454  158d
   1455  158d		       a5 da		      LDA	d
   1456  158f		       38		      SEC
   1457  1590		       e9 30		      SBC	#48
   1458  1592		       85 da		      STA	d
   1459  1594		       a5 90		      LDA	asteroid3Y
   1460  1596		       e9 00		      SBC	#0
   1461  1598		       85 90		      STA	asteroid3Y
   1462  159a				   .L0144		;  asteroid4Y	=  asteroid4Y  -  0.13
   1463  159a
   1464  159a		       a5 db		      LDA	e
   1465  159c		       38		      SEC
   1466  159d		       e9 21		      SBC	#33
   1467  159f		       85 db		      STA	e
   1468  15a1		       a5 91		      LDA	asteroid4Y
   1469  15a3		       e9 00		      SBC	#0
   1470  15a5		       85 91		      STA	asteroid4Y
   1471  15a7				   .L0145		;  goto resetScreen
   1472  15a7
   1473  15a7		       4c f0 d5 	      jmp	.resetScreen
   1474  15aa
   1475  15aa				   .
   1476  15aa							; 
   1477  15aa
   1478  15aa				   .
   1479  15aa							; 
   1480  15aa
   1481  15aa				   .slow
   1482  15aa							; slow
   1483  15aa
   1484  15aa				   .L0146		;  asteroidY  =  asteroidY  -	0.13
   1485  15aa
   1486  15aa		       a5 d8		      LDA	b
   1487  15ac		       38		      SEC
   1488  15ad		       e9 21		      SBC	#33
   1489  15af		       85 d8		      STA	b
   1490  15b1		       a5 8e		      LDA	asteroidY
   1491  15b3		       e9 00		      SBC	#0
   1492  15b5		       85 8e		      STA	asteroidY
   1493  15b7				   .L0147		;  if _sc3  >	$03 then asteroid2Y  =	asteroid2Y  -  0.15
   1494  15b7
   1495  15b7		       a9 03		      LDA	#$03
   1496  15b9		       c5 d4		      CMP	_sc3
   1497  15bb		       b0 0d		      BCS	.skipL0147
   1498  15bd				   .condpart74
   1499  15bd		       a5 d9		      LDA	c
   1500  15bf		       38		      SEC
   1501  15c0		       e9 26		      SBC	#38
   1502  15c2		       85 d9		      STA	c
   1503  15c4		       a5 8f		      LDA	asteroid2Y
   1504  15c6		       e9 00		      SBC	#0
   1505  15c8		       85 8f		      STA	asteroid2Y
   1506  15ca				   .skipL0147
   1507  15ca				   .L0148		;  if _sc3  >	$15 then asteroid3Y  =	asteroid3Y  -  0.17
   1508  15ca
   1509  15ca		       a9 15		      LDA	#$15
   1510  15cc		       c5 d4		      CMP	_sc3
   1511  15ce		       b0 0d		      BCS	.skipL0148
   1512  15d0				   .condpart75
   1513  15d0		       a5 da		      LDA	d
   1514  15d2		       38		      SEC
   1515  15d3		       e9 2b		      SBC	#43
   1516  15d5		       85 da		      STA	d
   1517  15d7		       a5 90		      LDA	asteroid3Y
   1518  15d9		       e9 00		      SBC	#0
   1519  15db		       85 90		      STA	asteroid3Y
   1520  15dd				   .skipL0148
   1521  15dd				   .L0149		;  if _sc3  >	$20 then asteroid4Y  =	asteroid4Y  -  0.1
   1522  15dd
   1523  15dd		       a9 20		      LDA	#$20
   1524  15df		       c5 d4		      CMP	_sc3
   1525  15e1		       b0 0d		      BCS	.skipL0149
   1526  15e3				   .condpart76
   1527  15e3		       a5 db		      LDA	e
   1528  15e5		       38		      SEC
   1529  15e6		       e9 19		      SBC	#25
   1530  15e8		       85 db		      STA	e
   1531  15ea		       a5 91		      LDA	asteroid4Y
   1532  15ec		       e9 00		      SBC	#0
   1533  15ee		       85 91		      STA	asteroid4Y
   1534  15f0				   .skipL0149
   1535  15f0				   .
   1536  15f0							; 
   1537  15f0
   1538  15f0				   .resetScreen
   1539  15f0							; resetScreen
   1540  15f0
   1541  15f0				   .
   1542  15f0							; 
   1543  15f0
   1544  15f0				   .L0150		;  COLUPF  =  $40
   1545  15f0
   1546  15f0		       a9 40		      LDA	#$40
   1547  15f2		       85 08		      STA	COLUPF
   1548  15f4				   .L0151		;  drawscreen
   1549  15f4
   1550  15f4		       85 d1		      sta	temp7
   1551  15f6		       a9 d6		      lda	#>(ret_point2-1)
   1552  15f8		       48		      pha
   1553  15f9		       a9 0b		      lda	#<(ret_point2-1)
   1554  15fb		       48		      pha
   1555  15fc		       a9 f0		      lda	#>(drawscreen-1)
   1556  15fe		       48		      pha
   1557  15ff		       a9 39		      lda	#<(drawscreen-1)
   1558  1601		       48		      pha
   1559  1602		       a5 d1		      lda	temp7
   1560  1604		       48		      pha
   1561  1605		       8a		      txa
   1562  1606		       48		      pha
   1563  1607		       a2 02		      ldx	#2
   1564  1609		       4c eb ff 	      jmp	BS_jsr
   1565  160c				   ret_point2
   1566  160c				   .
   1567  160c							; 
   1568  160c
   1569  160c				   .L0152		;  goto sprites
   1570  160c
   1571  160c		       4c bc d1 	      jmp	.sprites
   1572  160f
   1573  160f				   .
   1574  160f							; 
   1575  160f
   1576  160f				   .setPlayer1Color
   1577  160f							; setPlayer1Color
   1578  160f
   1579  160f				   .L0153		;  if ticker  =  0 then _COLUP1  =  $22
   1580  160f
   1581  160f		       a5 e2		      LDA	ticker
   1582  1611		       c9 00		      CMP	#0
   1583  1613		       d0 04		      BNE	.skipL0153
   1584  1615				   .condpart77
   1585  1615		       a9 22		      LDA	#$22
   1586  1617		       85 98		      STA	_COLUP1
   1587  1619				   .skipL0153
   1588  1619				   .L0154		;  if ticker  =  1 then _COLUP1  =  $38
   1589  1619
   1590  1619		       a5 e2		      LDA	ticker
   1591  161b		       c9 01		      CMP	#1
   1592  161d		       d0 04		      BNE	.skipL0154
   1593  161f				   .condpart78
   1594  161f		       a9 38		      LDA	#$38
   1595  1621		       85 98		      STA	_COLUP1
   1596  1623				   .skipL0154
   1597  1623				   .L0155		;  if ticker  =  2 then _COLUP1  =  $66
   1598  1623
   1599  1623		       a5 e2		      LDA	ticker
   1600  1625		       c9 02		      CMP	#2
   1601  1627		       d0 04		      BNE	.skipL0155
   1602  1629				   .condpart79
   1603  1629		       a9 66		      LDA	#$66
   1604  162b		       85 98		      STA	_COLUP1
   1605  162d				   .skipL0155
   1606  162d				   .L0156		;  if ticker  =  3 then _COLUP1  =  $78
   1607  162d
   1608  162d		       a5 e2		      LDA	ticker
   1609  162f		       c9 03		      CMP	#3
   1610  1631		       d0 04		      BNE	.skipL0156
   1611  1633				   .condpart80
   1612  1633		       a9 78		      LDA	#$78
   1613  1635		       85 98		      STA	_COLUP1
   1614  1637				   .skipL0156
   1615  1637				   .L0157		;  if ticker  =  4 then _COLUP1  =  $CA
   1616  1637
   1617  1637		       a5 e2		      LDA	ticker
   1618  1639		       c9 04		      CMP	#4
   1619  163b		       d0 04		      BNE	.skipL0157
   1620  163d				   .condpart81
   1621  163d		       a9 ca		      LDA	#$CA
   1622  163f		       85 98		      STA	_COLUP1
   1623  1641				   .skipL0157
   1624  1641				   .L0158		;  if ticker  =  5 then _COLUP1  =  $D6
   1625  1641
   1626  1641		       a5 e2		      LDA	ticker
   1627  1643		       c9 05		      CMP	#5
   1628  1645		       d0 04		      BNE	.skipL0158
   1629  1647				   .condpart82
   1630  1647		       a9 d6		      LDA	#$D6
   1631  1649		       85 98		      STA	_COLUP1
   1632  164b				   .skipL0158
   1633  164b				   .L0159		;  if ticker  =  6 then _COLUP1  =  $E8
   1634  164b
   1635  164b		       a5 e2		      LDA	ticker
   1636  164d		       c9 06		      CMP	#6
   1637  164f		       d0 04		      BNE	.skipL0159
   1638  1651				   .condpart83
   1639  1651		       a9 e8		      LDA	#$E8
   1640  1653		       85 98		      STA	_COLUP1
   1641  1655				   .skipL0159
   1642  1655				   .
   1643  1655							; 
   1644  1655
   1645  1655				   .L0160		;  goto colorSetComplete
   1646  1655
   1647  1655		       4c 10 d2 	      jmp	.colorSetComplete
   1648  1658
   1649  1658				   .
   1650  1658							; 
   1651  1658
   1652  1658				   .setPlayer2Color
   1653  1658							; setPlayer2Color
   1654  1658
   1655  1658				   .L0161		;  if ticker  =  0 then COLUP2  =  $22
   1656  1658
   1657  1658		       a5 e2		      LDA	ticker
   1658  165a		       c9 00		      CMP	#0
   1659  165c		       d0 04		      BNE	.skipL0161
   1660  165e				   .condpart84
   1661  165e		       a9 22		      LDA	#$22
   1662  1660		       85 99		      STA	COLUP2
   1663  1662				   .skipL0161
   1664  1662				   .L0162		;  if ticker  =  1 then COLUP2  =  $38
   1665  1662
   1666  1662		       a5 e2		      LDA	ticker
   1667  1664		       c9 01		      CMP	#1
   1668  1666		       d0 04		      BNE	.skipL0162
   1669  1668				   .condpart85
   1670  1668		       a9 38		      LDA	#$38
   1671  166a		       85 99		      STA	COLUP2
   1672  166c				   .skipL0162
   1673  166c				   .L0163		;  if ticker  =  2 then COLUP2  =  $66
   1674  166c
   1675  166c		       a5 e2		      LDA	ticker
   1676  166e		       c9 02		      CMP	#2
   1677  1670		       d0 04		      BNE	.skipL0163
   1678  1672				   .condpart86
   1679  1672		       a9 66		      LDA	#$66
   1680  1674		       85 99		      STA	COLUP2
   1681  1676				   .skipL0163
   1682  1676				   .L0164		;  if ticker  =  3 then COLUP2  =  $78
   1683  1676
   1684  1676		       a5 e2		      LDA	ticker
   1685  1678		       c9 03		      CMP	#3
   1686  167a		       d0 04		      BNE	.skipL0164
   1687  167c				   .condpart87
   1688  167c		       a9 78		      LDA	#$78
   1689  167e		       85 99		      STA	COLUP2
   1690  1680				   .skipL0164
   1691  1680				   .L0165		;  if ticker  =  4 then COLUP2  =  $CA
   1692  1680
   1693  1680		       a5 e2		      LDA	ticker
   1694  1682		       c9 04		      CMP	#4
   1695  1684		       d0 04		      BNE	.skipL0165
   1696  1686				   .condpart88
   1697  1686		       a9 ca		      LDA	#$CA
   1698  1688		       85 99		      STA	COLUP2
   1699  168a				   .skipL0165
   1700  168a				   .L0166		;  if ticker  =  5 then COLUP2  =  $D6
   1701  168a
   1702  168a		       a5 e2		      LDA	ticker
   1703  168c		       c9 05		      CMP	#5
   1704  168e		       d0 04		      BNE	.skipL0166
   1705  1690				   .condpart89
   1706  1690		       a9 d6		      LDA	#$D6
   1707  1692		       85 99		      STA	COLUP2
   1708  1694				   .skipL0166
   1709  1694				   .L0167		;  if ticker  =  6 then COLUP2  =  $E8
   1710  1694
   1711  1694		       a5 e2		      LDA	ticker
   1712  1696		       c9 06		      CMP	#6
   1713  1698		       d0 04		      BNE	.skipL0167
   1714  169a				   .condpart90
   1715  169a		       a9 e8		      LDA	#$E8
   1716  169c		       85 99		      STA	COLUP2
   1717  169e				   .skipL0167
   1718  169e				   .L0168		;  if ticker  =  7 then COLUP2  =  $3E
   1719  169e
   1720  169e		       a5 e2		      LDA	ticker
   1721  16a0		       c9 07		      CMP	#7
   1722  16a2		       d0 04		      BNE	.skipL0168
   1723  16a4				   .condpart91
   1724  16a4		       a9 3e		      LDA	#$3E
   1725  16a6		       85 99		      STA	COLUP2
   1726  16a8				   .skipL0168
   1727  16a8				   .L0169		;  if ticker  =  8 then COLUP2  =  $DC
   1728  16a8
   1729  16a8		       a5 e2		      LDA	ticker
   1730  16aa		       c9 08		      CMP	#8
   1731  16ac		       d0 04		      BNE	.skipL0169
   1732  16ae				   .condpart92
   1733  16ae		       a9 dc		      LDA	#$DC
   1734  16b0		       85 99		      STA	COLUP2
   1735  16b2				   .skipL0169
   1736  16b2				   .L0170		;  if ticker  =  9 then COLUP2  =  $48
   1737  16b2
   1738  16b2		       a5 e2		      LDA	ticker
   1739  16b4		       c9 09		      CMP	#9
   1740  16b6		       d0 04		      BNE	.skipL0170
   1741  16b8				   .condpart93
   1742  16b8		       a9 48		      LDA	#$48
   1743  16ba		       85 99		      STA	COLUP2
   1744  16bc				   .skipL0170
   1745  16bc				   .L0171		;  if ticker  =  10 then COLUP2  =  $68
   1746  16bc
   1747  16bc		       a5 e2		      LDA	ticker
   1748  16be		       c9 0a		      CMP	#10
   1749  16c0		       d0 04		      BNE	.skipL0171
   1750  16c2				   .condpart94
   1751  16c2		       a9 68		      LDA	#$68
   1752  16c4		       85 99		      STA	COLUP2
   1753  16c6				   .skipL0171
   1754  16c6				   .
   1755  16c6							; 
   1756  16c6
   1757  16c6				   .L0172		;  if ticker  <  4 then switchSprite  =  0
   1758  16c6
   1759  16c6		       a5 e2		      LDA	ticker
   1760  16c8		       c9 04		      CMP	#4
   1761  16ca		       b0 04		      BCS	.skipL0172
   1762  16cc				   .condpart95
   1763  16cc		       a9 00		      LDA	#0
   1764  16ce		       85 e6		      STA	switchSprite
   1765  16d0				   .skipL0172
   1766  16d0				   .L0173		;  if ticker  >=  4 then switchSprite	=  1
   1767  16d0
   1768  16d0		       a5 e2		      LDA	ticker
   1769  16d2		       c9 04		      CMP	#4
   1770  16d4		       90 04		      BCC	.skipL0173
   1771  16d6				   .condpart96
   1772  16d6		       a9 01		      LDA	#1
   1773  16d8		       85 e6		      STA	switchSprite
   1774  16da				   .skipL0173
   1775  16da				   .
   1776  16da							; 
   1777  16da
   1778  16da				   .
   1779  16da							; 
   1780  16da
   1781  16da				   .L0174		;  goto colorSetComplete
   1782  16da
   1783  16da		       4c 10 d2 	      jmp	.colorSetComplete
   1784  16dd
   1785  16dd				   .
   1786  16dd							; 
   1787  16dd
   1788  16dd				   .setPlayer3Color
   1789  16dd							; setPlayer3Color
   1790  16dd
   1791  16dd				   .L0175		;  if ticker  =  0 then COLUP3  =  $22
   1792  16dd
   1793  16dd		       a5 e2		      LDA	ticker
   1794  16df		       c9 00		      CMP	#0
   1795  16e1		       d0 04		      BNE	.skipL0175
   1796  16e3				   .condpart97
   1797  16e3		       a9 22		      LDA	#$22
   1798  16e5		       85 9a		      STA	COLUP3
   1799  16e7				   .skipL0175
   1800  16e7				   .L0176		;  if ticker  =  1 then COLUP3  =  $38
   1801  16e7
   1802  16e7		       a5 e2		      LDA	ticker
   1803  16e9		       c9 01		      CMP	#1
   1804  16eb		       d0 04		      BNE	.skipL0176
   1805  16ed				   .condpart98
   1806  16ed		       a9 38		      LDA	#$38
   1807  16ef		       85 9a		      STA	COLUP3
   1808  16f1				   .skipL0176
   1809  16f1				   .L0177		;  if ticker  =  2 then COLUP3  =  $66
   1810  16f1
   1811  16f1		       a5 e2		      LDA	ticker
   1812  16f3		       c9 02		      CMP	#2
   1813  16f5		       d0 04		      BNE	.skipL0177
   1814  16f7				   .condpart99
   1815  16f7		       a9 66		      LDA	#$66
   1816  16f9		       85 9a		      STA	COLUP3
   1817  16fb				   .skipL0177
   1818  16fb				   .L0178		;  if ticker  =  3 then COLUP3  =  $78
   1819  16fb
   1820  16fb		       a5 e2		      LDA	ticker
   1821  16fd		       c9 03		      CMP	#3
   1822  16ff		       d0 04		      BNE	.skipL0178
   1823  1701				   .condpart100
   1824  1701		       a9 78		      LDA	#$78
   1825  1703		       85 9a		      STA	COLUP3
   1826  1705				   .skipL0178
   1827  1705				   .L0179		;  if ticker  =  4 then COLUP3  =  $CA
   1828  1705
   1829  1705		       a5 e2		      LDA	ticker
   1830  1707		       c9 04		      CMP	#4
   1831  1709		       d0 04		      BNE	.skipL0179
   1832  170b				   .condpart101
   1833  170b		       a9 ca		      LDA	#$CA
   1834  170d		       85 9a		      STA	COLUP3
   1835  170f				   .skipL0179
   1836  170f				   .L0180		;  if ticker  =  5 then COLUP3  =  $D6
   1837  170f
   1838  170f		       a5 e2		      LDA	ticker
   1839  1711		       c9 05		      CMP	#5
   1840  1713		       d0 04		      BNE	.skipL0180
   1841  1715				   .condpart102
   1842  1715		       a9 d6		      LDA	#$D6
   1843  1717		       85 9a		      STA	COLUP3
   1844  1719				   .skipL0180
   1845  1719				   .L0181		;  if ticker  =  6 then COLUP3  =  $E8
   1846  1719
   1847  1719		       a5 e2		      LDA	ticker
   1848  171b		       c9 06		      CMP	#6
   1849  171d		       d0 04		      BNE	.skipL0181
   1850  171f				   .condpart103
   1851  171f		       a9 e8		      LDA	#$E8
   1852  1721		       85 9a		      STA	COLUP3
   1853  1723				   .skipL0181
   1854  1723				   .L0182		;  if ticker  =  7 then COLUP3  =  $3E
   1855  1723
   1856  1723		       a5 e2		      LDA	ticker
   1857  1725		       c9 07		      CMP	#7
   1858  1727		       d0 04		      BNE	.skipL0182
   1859  1729				   .condpart104
   1860  1729		       a9 3e		      LDA	#$3E
   1861  172b		       85 9a		      STA	COLUP3
   1862  172d				   .skipL0182
   1863  172d				   .L0183		;  if ticker  =  8 then COLUP3  =  $DC
   1864  172d
   1865  172d		       a5 e2		      LDA	ticker
   1866  172f		       c9 08		      CMP	#8
   1867  1731		       d0 04		      BNE	.skipL0183
   1868  1733				   .condpart105
   1869  1733		       a9 dc		      LDA	#$DC
   1870  1735		       85 9a		      STA	COLUP3
   1871  1737				   .skipL0183
   1872  1737				   .L0184		;  if ticker  =  9 then COLUP3  =  $48
   1873  1737
   1874  1737		       a5 e2		      LDA	ticker
   1875  1739		       c9 09		      CMP	#9
   1876  173b		       d0 04		      BNE	.skipL0184
   1877  173d				   .condpart106
   1878  173d		       a9 48		      LDA	#$48
   1879  173f		       85 9a		      STA	COLUP3
   1880  1741				   .skipL0184
   1881  1741				   .L0185		;  if ticker  =  10 then COLUP3  =  $68
   1882  1741
   1883  1741		       a5 e2		      LDA	ticker
   1884  1743		       c9 0a		      CMP	#10
   1885  1745		       d0 04		      BNE	.skipL0185
   1886  1747				   .condpart107
   1887  1747		       a9 68		      LDA	#$68
   1888  1749		       85 9a		      STA	COLUP3
   1889  174b				   .skipL0185
   1890  174b				   .L0186		;  goto colorSetComplete
   1891  174b
   1892  174b		       4c 10 d2 	      jmp	.colorSetComplete
   1893  174e
   1894  174e				   .
   1895  174e							; 
   1896  174e
   1897  174e				   .setPlayer4Color
   1898  174e							; setPlayer4Color
   1899  174e
   1900  174e				   .L0187		;  if ticker  =  0 then COLUP4  =  $22
   1901  174e
   1902  174e		       a5 e2		      LDA	ticker
   1903  1750		       c9 00		      CMP	#0
   1904  1752		       d0 04		      BNE	.skipL0187
   1905  1754				   .condpart108
   1906  1754		       a9 22		      LDA	#$22
   1907  1756		       85 9b		      STA	COLUP4
   1908  1758				   .skipL0187
   1909  1758				   .L0188		;  if ticker  =  1 then COLUP4  =  $38
   1910  1758
   1911  1758		       a5 e2		      LDA	ticker
   1912  175a		       c9 01		      CMP	#1
   1913  175c		       d0 04		      BNE	.skipL0188
   1914  175e				   .condpart109
   1915  175e		       a9 38		      LDA	#$38
   1916  1760		       85 9b		      STA	COLUP4
   1917  1762				   .skipL0188
   1918  1762				   .L0189		;  if ticker  =  2 then COLUP4  =  $66
   1919  1762
   1920  1762		       a5 e2		      LDA	ticker
   1921  1764		       c9 02		      CMP	#2
   1922  1766		       d0 04		      BNE	.skipL0189
   1923  1768				   .condpart110
   1924  1768		       a9 66		      LDA	#$66
   1925  176a		       85 9b		      STA	COLUP4
   1926  176c				   .skipL0189
   1927  176c				   .L0190		;  if ticker  =  3 then COLUP4  =  $78
   1928  176c
   1929  176c		       a5 e2		      LDA	ticker
   1930  176e		       c9 03		      CMP	#3
   1931  1770		       d0 04		      BNE	.skipL0190
   1932  1772				   .condpart111
   1933  1772		       a9 78		      LDA	#$78
   1934  1774		       85 9b		      STA	COLUP4
   1935  1776				   .skipL0190
   1936  1776				   .L0191		;  if ticker  =  4 then COLUP4  =  $CA
   1937  1776
   1938  1776		       a5 e2		      LDA	ticker
   1939  1778		       c9 04		      CMP	#4
   1940  177a		       d0 04		      BNE	.skipL0191
   1941  177c				   .condpart112
   1942  177c		       a9 ca		      LDA	#$CA
   1943  177e		       85 9b		      STA	COLUP4
   1944  1780				   .skipL0191
   1945  1780				   .L0192		;  if ticker  =  5 then COLUP4  =  $D6
   1946  1780
   1947  1780		       a5 e2		      LDA	ticker
   1948  1782		       c9 05		      CMP	#5
   1949  1784		       d0 04		      BNE	.skipL0192
   1950  1786				   .condpart113
   1951  1786		       a9 d6		      LDA	#$D6
   1952  1788		       85 9b		      STA	COLUP4
   1953  178a				   .skipL0192
   1954  178a				   .L0193		;  if ticker  =  6 then COLUP4  =  $E8
   1955  178a
   1956  178a		       a5 e2		      LDA	ticker
   1957  178c		       c9 06		      CMP	#6
   1958  178e		       d0 04		      BNE	.skipL0193
   1959  1790				   .condpart114
   1960  1790		       a9 e8		      LDA	#$E8
   1961  1792		       85 9b		      STA	COLUP4
   1962  1794				   .skipL0193
   1963  1794				   .L0194		;  if ticker  =  7 then COLUP4  =  $3E
   1964  1794
   1965  1794		       a5 e2		      LDA	ticker
   1966  1796		       c9 07		      CMP	#7
   1967  1798		       d0 04		      BNE	.skipL0194
   1968  179a				   .condpart115
   1969  179a		       a9 3e		      LDA	#$3E
   1970  179c		       85 9b		      STA	COLUP4
   1971  179e				   .skipL0194
   1972  179e				   .L0195		;  if ticker  =  8 then COLUP4  =  $DC
   1973  179e
   1974  179e		       a5 e2		      LDA	ticker
   1975  17a0		       c9 08		      CMP	#8
   1976  17a2		       d0 04		      BNE	.skipL0195
   1977  17a4				   .condpart116
   1978  17a4		       a9 dc		      LDA	#$DC
   1979  17a6		       85 9b		      STA	COLUP4
   1980  17a8				   .skipL0195
   1981  17a8				   .L0196		;  if ticker  =  9 then COLUP4  =  $48
   1982  17a8
   1983  17a8		       a5 e2		      LDA	ticker
   1984  17aa		       c9 09		      CMP	#9
   1985  17ac		       d0 04		      BNE	.skipL0196
   1986  17ae				   .condpart117
   1987  17ae		       a9 48		      LDA	#$48
   1988  17b0		       85 9b		      STA	COLUP4
   1989  17b2				   .skipL0196
   1990  17b2				   .L0197		;  if ticker  =  10 then COLUP4  =  $68
   1991  17b2
   1992  17b2		       a5 e2		      LDA	ticker
   1993  17b4		       c9 0a		      CMP	#10
   1994  17b6		       d0 04		      BNE	.skipL0197
   1995  17b8				   .condpart118
   1996  17b8		       a9 68		      LDA	#$68
   1997  17ba		       85 9b		      STA	COLUP4
   1998  17bc				   .skipL0197
   1999  17bc				   .
   2000  17bc							; 
   2001  17bc
   2002  17bc				   .L0198		;  goto colorSetComplete
   2003  17bc
   2004  17bc		       4c 10 d2 	      jmp	.colorSetComplete
   2005  17bf
   2006  17bf				   .
   2007  17bf							; 
   2008  17bf
   2009  17bf				   .
   2010  17bf							; 
   2011  17bf
   2012  17bf				   .
   2013  17bf							; 
   2014  17bf
   2015  17bf				   .
   2016  17bf							; 
   2017  17bf
   2018  17bf				   .
   2019  17bf							; 
   2020  17bf
   2021  17bf				   .
   2022  17bf							; 
   2023  17bf
   2024  17bf				   .
   2025  17bf							; 
   2026  17bf
   2027  17bf				   .collisions
   2028  17bf							; collisions
   2029  17bf
   2030  17bf				   .
   2031  17bf							; 
   2032  17bf
   2033  17bf				   .L0199		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   2034  17bf
   2035  17bf		       a9 0c		      LDA	#12
   2036  17c1		       85 19		      STA	AUDV0
   2037  17c3		       a9 08		      LDA	#8
   2038  17c5		       85 15		      STA	AUDC0
   2039  17c7		       a9 1c		      LDA	#28
   2040  17c9		       85 17		      STA	AUDF0
   2041  17cb				   .L0200		;  score  =  score  +	1
   2042  17cb
   2043  17cb		       f8		      SED
   2044  17cc		       18		      CLC
   2045  17cd		       a5 d4		      LDA	score+2
   2046  17cf		       69 01		      ADC	#$01
   2047  17d1		       85 d4		      STA	score+2
   2048  17d3		       a5 d3		      LDA	score+1
   2049  17d5		       69 00		      ADC	#$00
   2050  17d7		       85 d3		      STA	score+1
   2051  17d9		       a5 d2		      LDA	score
   2052  17db		       69 00		      ADC	#$00
   2053  17dd		       85 d2		      STA	score
   2054  17df		       d8		      CLD
   2055  17e0				   .
   2056  17e0							; 
   2057  17e0
   2058  17e0				   .
   2059  17e0							; 
   2060  17e0
   2061  17e0				   .
   2062  17e0							; 
   2063  17e0
   2064  17e0				   .
   2065  17e0							; 
   2066  17e0
   2067  17e0				   .
   2068  17e0							; 
   2069  17e0
   2070  17e0				   .L0201		;  player5x  =  missile0x  +  4
   2071  17e0
   2072  17e0		       a5 80		      LDA	missile0x
   2073  17e2		       18		      CLC
   2074  17e3		       69 04		      ADC	#4
   2075  17e5		       85 89		      STA	player5x
   2076  17e7				   .L0202		;  player5y  =  missile0y  +  2
   2077  17e7
   2078  17e7		       a5 8a		      LDA	missile0y
   2079  17e9		       18		      CLC
   2080  17ea		       69 02		      ADC	#2
   2081  17ec		       85 92		      STA	player5y
   2082  17ee				   .
   2083  17ee							; 
   2084  17ee
   2085  17ee				   .L0203		;  missile0y  =  200
   2086  17ee
   2087  17ee		       a9 c8		      LDA	#200
   2088  17f0		       85 8a		      STA	missile0y
   2089  17f2				   .
   2090  17f2							; 
   2091  17f2
   2092  17f2				   .L0204		;  if missile0x  >  27  &&  missile0x	<  37 then player1x  =	76 :  player1y	=  100
   2093  17f2
   2094  17f2		       a9 1b		      LDA	#27
   2095  17f4		       c5 80		      CMP	missile0x
   2096  17f6		       b0 0e		      BCS	.skipL0204
   2097  17f8				   .condpart119
   2098  17f8		       a5 80		      LDA	missile0x
   2099  17fa		       c9 25		      CMP	#37
   2100  17fc		       b0 08		      BCS	.skip119then
   2101  17fe				   .condpart120
   2102  17fe		       a9 4c		      LDA	#76
   2103  1800		       85 85		      STA	player1x
   2104  1802		       a9 64		      LDA	#100
   2105  1804		       85 8e		      STA	player1y
   2106  1806				   .skip119then
   2107  1806				   .skipL0204
   2108  1806				   .L0205		;  if missile0x  >  37  &&  missile0x	<  47 then player2x  =	86 :  player2y	=  100
   2109  1806
   2110  1806		       a9 25		      LDA	#37
   2111  1808		       c5 80		      CMP	missile0x
   2112  180a		       b0 0e		      BCS	.skipL0205
   2113  180c				   .condpart121
   2114  180c		       a5 80		      LDA	missile0x
   2115  180e		       c9 2f		      CMP	#47
   2116  1810		       b0 08		      BCS	.skip121then
   2117  1812				   .condpart122
   2118  1812		       a9 56		      LDA	#86
   2119  1814		       85 86		      STA	player2x
   2120  1816		       a9 64		      LDA	#100
   2121  1818		       85 8f		      STA	player2y
   2122  181a				   .skip121then
   2123  181a				   .skipL0205
   2124  181a				   .L0206		;  if missile0x  >  47  &&  missile0x	<  57 then player3x  =	96 :  player3y	=  100
   2125  181a
   2126  181a		       a9 2f		      LDA	#47
   2127  181c		       c5 80		      CMP	missile0x
   2128  181e		       b0 0e		      BCS	.skipL0206
   2129  1820				   .condpart123
   2130  1820		       a5 80		      LDA	missile0x
   2131  1822		       c9 39		      CMP	#57
   2132  1824		       b0 08		      BCS	.skip123then
   2133  1826				   .condpart124
   2134  1826		       a9 60		      LDA	#96
   2135  1828		       85 87		      STA	player3x
   2136  182a		       a9 64		      LDA	#100
   2137  182c		       85 90		      STA	player3y
   2138  182e				   .skip123then
   2139  182e				   .skipL0206
   2140  182e				   .L0207		;  if missile0x  >  57  &&  missile0x	<  67 then player4x  =	106 :  player4y  =  100
   2141  182e
   2142  182e		       a9 39		      LDA	#57
   2143  1830		       c5 80		      CMP	missile0x
   2144  1832		       b0 0e		      BCS	.skipL0207
   2145  1834				   .condpart125
   2146  1834		       a5 80		      LDA	missile0x
   2147  1836		       c9 43		      CMP	#67
   2148  1838		       b0 08		      BCS	.skip125then
   2149  183a				   .condpart126
   2150  183a		       a9 6a		      LDA	#106
   2151  183c		       85 88		      STA	player4x
   2152  183e		       a9 64		      LDA	#100
   2153  1840		       85 91		      STA	player4y
   2154  1842				   .skip125then
   2155  1842				   .skipL0207
   2156  1842				   .
   2157  1842							; 
   2158  1842
   2159  1842				   .L0208		;  if missile0x  >  67  &&  missile0x	<  77 then player1x  =	116 :  player1y  =  100
   2160  1842
   2161  1842		       a9 43		      LDA	#67
   2162  1844		       c5 80		      CMP	missile0x
   2163  1846		       b0 0e		      BCS	.skipL0208
   2164  1848				   .condpart127
   2165  1848		       a5 80		      LDA	missile0x
   2166  184a		       c9 4d		      CMP	#77
   2167  184c		       b0 08		      BCS	.skip127then
   2168  184e				   .condpart128
   2169  184e		       a9 74		      LDA	#116
   2170  1850		       85 85		      STA	player1x
   2171  1852		       a9 64		      LDA	#100
   2172  1854		       85 8e		      STA	player1y
   2173  1856				   .skip127then
   2174  1856				   .skipL0208
   2175  1856				   .L0209		;  if missile0x  >  77  &&  missile0x	<  87 then player2x  =	126 :  player2y  =  100
   2176  1856
   2177  1856		       a9 4d		      LDA	#77
   2178  1858		       c5 80		      CMP	missile0x
   2179  185a		       b0 0e		      BCS	.skipL0209
   2180  185c				   .condpart129
   2181  185c		       a5 80		      LDA	missile0x
   2182  185e		       c9 57		      CMP	#87
   2183  1860		       b0 08		      BCS	.skip129then
   2184  1862				   .condpart130
   2185  1862		       a9 7e		      LDA	#126
   2186  1864		       85 86		      STA	player2x
   2187  1866		       a9 64		      LDA	#100
   2188  1868		       85 8f		      STA	player2y
   2189  186a				   .skip129then
   2190  186a				   .skipL0209
   2191  186a				   .L0210		;  if missile0x  >  87  &&  missile0x	<  97 then player3x  =	136 :  player3y  =  100
   2192  186a
   2193  186a		       a9 57		      LDA	#87
   2194  186c		       c5 80		      CMP	missile0x
   2195  186e		       b0 0e		      BCS	.skipL0210
   2196  1870				   .condpart131
   2197  1870		       a5 80		      LDA	missile0x
   2198  1872		       c9 61		      CMP	#97
   2199  1874		       b0 08		      BCS	.skip131then
   2200  1876				   .condpart132
   2201  1876		       a9 88		      LDA	#136
   2202  1878		       85 87		      STA	player3x
   2203  187a		       a9 64		      LDA	#100
   2204  187c		       85 90		      STA	player3y
   2205  187e				   .skip131then
   2206  187e				   .skipL0210
   2207  187e				   .L0211		;  if missile0x  >  97  &&  missile0x	<  107 then player4x  =  66 :  player4y  =  100
   2208  187e
   2209  187e		       a9 61		      LDA	#97
   2210  1880		       c5 80		      CMP	missile0x
   2211  1882		       b0 0e		      BCS	.skipL0211
   2212  1884				   .condpart133
   2213  1884		       a5 80		      LDA	missile0x
   2214  1886		       c9 6b		      CMP	#107
   2215  1888		       b0 08		      BCS	.skip133then
   2216  188a				   .condpart134
   2217  188a		       a9 42		      LDA	#66
   2218  188c		       85 88		      STA	player4x
   2219  188e		       a9 64		      LDA	#100
   2220  1890		       85 91		      STA	player4y
   2221  1892				   .skip133then
   2222  1892				   .skipL0211
   2223  1892				   .
   2224  1892							; 
   2225  1892
   2226  1892				   .L0212		;  if missile0x  >  107  &&  missile0x  <  117 then player1x  =  36 :	player1y  =  100
   2227  1892
   2228  1892		       a9 6b		      LDA	#107
   2229  1894		       c5 80		      CMP	missile0x
   2230  1896		       b0 0e		      BCS	.skipL0212
   2231  1898				   .condpart135
   2232  1898		       a5 80		      LDA	missile0x
   2233  189a		       c9 75		      CMP	#117
   2234  189c		       b0 08		      BCS	.skip135then
   2235  189e				   .condpart136
   2236  189e		       a9 24		      LDA	#36
   2237  18a0		       85 85		      STA	player1x
   2238  18a2		       a9 64		      LDA	#100
   2239  18a4		       85 8e		      STA	player1y
   2240  18a6				   .skip135then
   2241  18a6				   .skipL0212
   2242  18a6				   .L0213		;  if missile0x  >  117  &&  missile0x  <  127 then player2x  =  46 :	player2y  =  100
   2243  18a6
   2244  18a6		       a9 75		      LDA	#117
   2245  18a8		       c5 80		      CMP	missile0x
   2246  18aa		       b0 0e		      BCS	.skipL0213
   2247  18ac				   .condpart137
   2248  18ac		       a5 80		      LDA	missile0x
   2249  18ae		       c9 7f		      CMP	#127
   2250  18b0		       b0 08		      BCS	.skip137then
   2251  18b2				   .condpart138
   2252  18b2		       a9 2e		      LDA	#46
   2253  18b4		       85 86		      STA	player2x
   2254  18b6		       a9 64		      LDA	#100
   2255  18b8		       85 8f		      STA	player2y
   2256  18ba				   .skip137then
   2257  18ba				   .skipL0213
   2258  18ba				   .L0214		;  if missile0x  >  127  &&  missile0x  <  137 then player3x  =  56 :	player3y  =  100
   2259  18ba
   2260  18ba		       a9 7f		      LDA	#127
   2261  18bc		       c5 80		      CMP	missile0x
   2262  18be		       b0 0e		      BCS	.skipL0214
   2263  18c0				   .condpart139
   2264  18c0		       a5 80		      LDA	missile0x
   2265  18c2		       c9 89		      CMP	#137
   2266  18c4		       b0 08		      BCS	.skip139then
   2267  18c6				   .condpart140
   2268  18c6		       a9 38		      LDA	#56
   2269  18c8		       85 87		      STA	player3x
   2270  18ca		       a9 64		      LDA	#100
   2271  18cc		       85 90		      STA	player3y
   2272  18ce				   .skip139then
   2273  18ce				   .skipL0214
   2274  18ce				   .L0215		;  if missile0x  >  137  &&  missile0x  <  147 then player4x  =  66 :	player4y  =  100
   2275  18ce
   2276  18ce		       a9 89		      LDA	#137
   2277  18d0		       c5 80		      CMP	missile0x
   2278  18d2		       b0 0e		      BCS	.skipL0215
   2279  18d4				   .condpart141
   2280  18d4		       a5 80		      LDA	missile0x
   2281  18d6		       c9 93		      CMP	#147
   2282  18d8		       b0 08		      BCS	.skip141then
   2283  18da				   .condpart142
   2284  18da		       a9 42		      LDA	#66
   2285  18dc		       85 88		      STA	player4x
   2286  18de		       a9 64		      LDA	#100
   2287  18e0		       85 91		      STA	player4y
   2288  18e2				   .skip141then
   2289  18e2				   .skipL0215
   2290  18e2				   .
   2291  18e2							; 
   2292  18e2
   2293  18e2				   .L0216		;  goto frameReset
   2294  18e2
   2295  18e2		       4c 24 d5 	      jmp	.frameReset
   2296  18e5
   2297  18e5				   .
   2298  18e5							; 
   2299  18e5
   2300  18e5				   .gameOver
   2301  18e5							; gameOver
   2302  18e5
   2303  18e5				   .L0217		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   2304  18e5
   2305  18e5		       24 ef		      BIT	_Bit6_Sequence_Switch
   2306  18e7		       70 10		      BVS	.skipL0217
   2307  18e9				   .condpart143
   2308  18e9		       e6 d7		      INC	_P0_Luminosity
   2309  18eb		       a5 d7		      LDA	_P0_Luminosity
   2310  18ed		       c9 20		      CMP	#$20
   2311  18ef		       90 08		      BCC	.skip143then
   2312  18f1				   .condpart144
   2313  18f1		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2314  18f3		       09 40		      ORA	#64
   2315  18f5		       85 ef		      STA	_Bit6_Sequence_Switch
   2316  18f7		       e6 ee		      INC	_resetTicker
   2317  18f9				   .skip143then
   2318  18f9				   .skipL0217
   2319  18f9				   .L0218		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   2320  18f9
   2321  18f9		       24 ef		      BIT	_Bit6_Sequence_Switch
   2322  18fb		       50 16		      BVC	.skipL0218
   2323  18fd				   .condpart145
   2324  18fd		       c6 d7		      DEC	_P0_Luminosity
   2325  18ff		       a9 12		      LDA	#$12
   2326  1901		       c5 d7		      CMP	_P0_Luminosity
   2327  1903		       90 0e		      BCC	.skip145then
   2328  1905				   .condpart146
   2329  1905		       a9 00		      LDA	#0
   2330  1907		       85 d8		      STA	b
   2331  1909		       a9 10		      LDA	#$10
   2332  190b		       85 d7		      STA	_P0_Luminosity
   2333  190d		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2334  190f		       29 bf		      AND	#191
   2335  1911		       85 ef		      STA	_Bit6_Sequence_Switch
   2336  1913				   .skip145then
   2337  1913				   .skipL0218
   2338  1913				   .L0219		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   2339  1913
   2340  1913		       a9 0a		      LDA	#10
   2341  1915		       85 1a		      STA	AUDV1
   2342  1917		       a9 08		      LDA	#8
   2343  1919		       85 16		      STA	AUDC1
   2344  191b		       a9 19		      LDA	#25
   2345  191d		       85 18		      STA	AUDF1
   2346  191f				   .L0220		;  COLUBK  =  _P0_Luminosity
   2347  191f
   2348  191f		       a5 d7		      LDA	_P0_Luminosity
   2349  1921		       85 09		      STA	COLUBK
   2350  1923				   .
   2351  1923							; 
   2352  1923
   2353  1923				   .L0221		;  if _resetTicker  >	3 then goto resetGame
   2354  1923
   2355  1923		       a9 03		      LDA	#3
   2356  1925		       c5 ee		      CMP	_resetTicker
   2357  1927		       b0 03		      BCS	.skipL0221
   2358  1929				   .condpart147
   2359  1929		       4c 2f d9 	      jmp	.resetGame
   2360  192c
   2361  192c				   .skipL0221
   2362  192c				   .
   2363  192c							; 
   2364  192c
   2365  192c				   .L0222		;  goto resetScreen
   2366  192c
   2367  192c		       4c f0 d5 	      jmp	.resetScreen
   2368  192f
   2369  192f				   .
   2370  192f							; 
   2371  192f
   2372  192f				   .resetGame
   2373  192f							; resetGame
   2374  192f
   2375  192f				   .
   2376  192f							; 
   2377  192f
   2378  192f				   .L0223		;  player0x = 66
   2379  192f
   2380  192f		       a9 42		      LDA	#66
   2381  1931		       85 84		      STA	player0x
   2382  1933				   .L0224		;  player0y = 57
   2383  1933
   2384  1933		       a9 39		      LDA	#57
   2385  1935		       85 8d		      STA	player0y
   2386  1937				   .
   2387  1937							; 
   2388  1937
   2389  1937				   .L0225		;  player1x = 76
   2390  1937
   2391  1937		       a9 4c		      LDA	#76
   2392  1939		       85 85		      STA	player1x
   2393  193b				   .L0226		;  player1y = 100
   2394  193b
   2395  193b		       a9 64		      LDA	#100
   2396  193d		       85 8e		      STA	player1y
   2397  193f				   .
   2398  193f							; 
   2399  193f
   2400  193f				   .L0227		;  player2x = 86
   2401  193f
   2402  193f		       a9 56		      LDA	#86
   2403  1941		       85 86		      STA	player2x
   2404  1943				   .L0228		;  player2y = 110
   2405  1943
   2406  1943		       a9 6e		      LDA	#110
   2407  1945		       85 8f		      STA	player2y
   2408  1947				   .
   2409  1947							; 
   2410  1947
   2411  1947				   .L0229		;  player3x = 96
   2412  1947
   2413  1947		       a9 60		      LDA	#96
   2414  1949		       85 87		      STA	player3x
   2415  194b				   .L0230		;  player3y = 120
   2416  194b
   2417  194b		       a9 78		      LDA	#120
   2418  194d		       85 90		      STA	player3y
   2419  194f				   .
   2420  194f							; 
   2421  194f
   2422  194f				   .L0231		;  player4x = 106
   2423  194f
   2424  194f		       a9 6a		      LDA	#106
   2425  1951		       85 88		      STA	player4x
   2426  1953				   .L0232		;  player4y =	100
   2427  1953
   2428  1953		       a9 64		      LDA	#100
   2429  1955		       85 91		      STA	player4y
   2430  1957				   .
   2431  1957							; 
   2432  1957
   2433  1957				   .L0233		;  missile0y = 255
   2434  1957
   2435  1957		       a9 ff		      LDA	#255
   2436  1959		       85 8a		      STA	missile0y
   2437  195b				   .L0234		;  missile0y = 255
   2438  195b
   2439  195b		       a9 ff		      LDA	#255
   2440  195d		       85 8a		      STA	missile0y
   2441  195f				   .
   2442  195f							; 
   2443  195f
   2444  195f				   .L0235		;  _resetTicker  =  0
   2445  195f
   2446  195f		       a9 00		      LDA	#0
   2447  1961		       85 ee		      STA	_resetTicker
   2448  1963				   .L0236		;  missile1y =  200
   2449  1963
   2450  1963		       a9 c8		      LDA	#200
   2451  1965		       85 8b		      STA	missile1y
   2452  1967				   .L0237		;  COLUBK  =  $0
   2453  1967
   2454  1967		       a9 00		      LDA	#$0
   2455  1969		       85 09		      STA	COLUBK
   2456  196b				   .L0238		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   2457  196b
   2458  196b		       a9 00		      LDA	#0
   2459  196d		       85 1a		      STA	AUDV1
   2460  196f		       85 16		      STA	AUDC1
   2461  1971		       85 18		      STA	AUDF1
   2462  1973				   .
   2463  1973							; 
   2464  1973
   2465  1973				   .
   2466  1973							; 
   2467  1973
   2468  1973				   .
   2469  1973							; 
   2470  1973
   2471  1973				   .
   2472  1973							; 
   2473  1973
   2474  1973				   .L0239		;  gameReady  =  0
   2475  1973
   2476  1973		       a9 00		      LDA	#0
   2477  1975		       85 f0		      STA	gameReady
   2478  1977				   .L0240		;  firstFrame	=  0
   2479  1977
   2480  1977		       a9 00		      LDA	#0
   2481  1979		       85 e8		      STA	firstFrame
   2482  197b				   .L0241		;  lives  =  lives  +	192
   2483  197b
   2484  197b		       a5 c2		      LDA	lives
   2485  197d		       18		      CLC
   2486  197e		       69 c0		      ADC	#192
   2487  1980		       85 c2		      STA	lives
   2488  1982				   .
   2489  1982							; 
   2490  1982
   2491  1982				   .L0242		;  goto resetScreen
   2492  1982
   2493  1982		       4c f0 d5 	      jmp	.resetScreen
   2494  1985
   2495  1985				   .
   2496  1985							; 
   2497  1985
   2498  1985				   .
   2499  1985							; 
   2500  1985
   2501  1985				   .L0243		;  bank 2
   2502  1985
   2503  1985					      if	ECHO1
      1615 bytes of ROM space left in bank 1
   2504  1985					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   2505  1985					      endif
   2506  1985		       00 01	   ECHO1      =	1
   2507  1fd4					      ORG	$1FF4-bscode_length
   2508  1fd4					      RORG	$DFF4-bscode_length
   2509  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   2510  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2511  1fd6				  -	      stx	FASTFETCH
   2512  1fd6					      endif
   2513  1fd6		       9a		      txs
   2514  1fd7				  -	      if	bankswitch == 64
   2515  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2516  1fd7					      else
   2517  1fd7		       a9 f3		      lda	#>(start-1)
   2518  1fd9					      endif
   2519  1fd9		       48		      pha
   2520  1fda		       a9 f7		      lda	#<(start-1)
   2521  1fdc		       48		      pha
   2522  1fdd		       48		      pha
   2523  1fde		       8a		      txa
   2524  1fdf		       48		      pha
   2525  1fe0		       ba		      tsx
   2526  1fe1					      if	bankswitch != 64
   2527  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   2528  1fe3		       2a		      rol
   2529  1fe4		       2a		      rol
   2530  1fe5		       2a		      rol
   2531  1fe6		       2a		      rol
   2532  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2533  1fe9		       aa		      tax
   2534  1fea		       e8		      inx
   2535  1feb				  -	      else
   2536  1feb				  -	      lda	4,x	; get high byte of return address
   2537  1feb				  -	      tay
   2538  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2539  1feb				  -	      sta	4,x
   2540  1feb				  -	      tya
   2541  1feb				  -	      lsr
   2542  1feb				  -	      lsr
   2543  1feb				  -	      lsr
   2544  1feb				  -	      lsr
   2545  1feb				  -	      tax
   2546  1feb				  -	      inx
   2547  1feb					      endif
   2548  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   2549  1fee		       68		      pla
   2550  1fef		       aa		      tax
   2551  1ff0		       68		      pla
   2552  1ff1		       60		      rts
   2553  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2554  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2555  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2556  1ff2					      endif
   2557  1ffc					      ORG	$1FFC
   2558  1ffc					      RORG	$DFFC
   2559  1ffc		       d4 df		      .word.w	(start_bank1 & $ffff)
   2560  1ffe		       d4 df		      .word.w	(start_bank1 & $ffff)
   2561  2000					      ORG	$2000
   2562  2000					      RORG	$F000
   2563  2000							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2564  2000
   2565  2000				   FineAdjustTableBegin
   2566  2000		       60		      .byte.b	%01100000	;left 6
   2567  2001		       50		      .byte.b	%01010000
   2568  2002		       40		      .byte.b	%01000000
   2569  2003		       30		      .byte.b	%00110000
   2570  2004		       20		      .byte.b	%00100000
   2571  2005		       10		      .byte.b	%00010000
   2572  2006		       00		      .byte.b	%00000000	;left 0
   2573  2007		       f0		      .byte.b	%11110000
   2574  2008		       e0		      .byte.b	%11100000
   2575  2009		       d0		      .byte.b	%11010000
   2576  200a		       c0		      .byte.b	%11000000
   2577  200b		       b0		      .byte.b	%10110000
   2578  200c		       a0		      .byte.b	%10100000
   2579  200d		       90		      .byte.b	%10010000
   2580  200e		       80		      .byte.b	%10000000	;right 8
   2581  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   2582  200f
   2583  200f				   PFStart
   2584  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   2585  2017				   blank_pf
   2586  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   2587  201f							; .byte 43,21,0,10,0,0,0,5
   2588  201f				  -	      ifconst	screenheight
   2589  201f				  -pfsub
   2590  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   2591  201f					      endif
   2592  201f							;--set initial P1 positions
   2593  201f				   multisprite_setup
   2594  201f		       a9 0f		      lda	#15
   2595  2021		       85 c4		      sta	pfheight
   2596  2023
   2597  2023		       a2 04		      ldx	#4
   2598  2025							; stx temp3
   2599  2025				   SetCopyHeight
   2600  2025							;	lda #76
   2601  2025							;	sta NewSpriteX,X
   2602  2025							;	lda CopyColorData,X
   2603  2025							;	sta NewCOLUP1,X
   2604  2025							;lda SpriteHeightTable,X
   2605  2025							; sta spriteheight,x
   2606  2025		       8a		      txa
   2607  2026		       95 9d		      sta	SpriteGfxIndex,X
   2608  2028		       95 f1		      sta	spritesort,X
   2609  202a		       ca		      dex
   2610  202b		       10 f8		      bpl	SetCopyHeight
   2611  202d
   2612  202d
   2613  202d
   2614  202d							; since we can't turn off pf, point PF to zeros here
   2615  202d		       a9 f0		      lda	#>blank_pf
   2616  202f		       85 be		      sta	PF2pointer+1
   2617  2031		       85 bc		      sta	PF1pointer+1
   2618  2033		       a9 17		      lda	#<blank_pf
   2619  2035		       85 bd		      sta	PF2pointer
   2620  2037		       85 bb		      sta	PF1pointer
   2621  2039		       60		      rts
   2622  203a
   2623  203a				   drawscreen
   2624  203a				  -	      ifconst	debugscore
   2625  203a				  -	      jsr	debugcycles
   2626  203a					      endif
   2627  203a
   2628  203a				   WaitForOverscanEnd
   2629  203a		       ad 84 02 	      lda	INTIM
   2630  203d		       30 fb		      bmi	WaitForOverscanEnd
   2631  203f
   2632  203f		       a9 02		      lda	#2
   2633  2041		       85 02		      sta	WSYNC
   2634  2043		       85 00		      sta	VSYNC
   2635  2045		       85 02		      sta	WSYNC
   2636  2047		       85 02		      sta	WSYNC
   2637  2049		       4a		      lsr
   2638  204a		       85 27		      sta	VDELBL
   2639  204c		       85 25		      sta	VDELP0
   2640  204e		       85 02		      sta	WSYNC
   2641  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   2642  2052				  -	      ifconst	overscan_time
   2643  2052				  -	      lda	#overscan_time+5+128
   2644  2052					      else
   2645  2052		       a9 aa		      lda	#42+128
   2646  2054					      endif
   2647  2054		       8d 96 02 	      sta	TIM64T
   2648  2057
   2649  2057							; run possible vblank bB code
   2650  2057				  -	      ifconst	vblank_bB_code
   2651  2057				  -	      jsr	vblank_bB_code
   2652  2057					      endif
   2653  2057
   2654  2057		       20 df f1 	      jsr	setscorepointers
   2655  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   2656  205d
   2657  205d							;-------------
   2658  205d
   2659  205d
   2660  205d
   2661  205d
   2662  205d
   2663  205d							;--position P0, M0, M1, BL
   2664  205d
   2665  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   2666  2060
   2667  2060							;--set up player 0 pointer
   2668  2060
   2669  2060		       c6 8d		      dec	player0y
   2670  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   2671  2064		       38		      sec
   2672  2065		       e5 8d		      sbc	player0y
   2673  2067		       18		      clc
   2674  2068		       65 b0		      adc	player0height
   2675  206a		       85 a2		      sta	player0pointer
   2676  206c
   2677  206c		       a5 8d		      lda	player0y
   2678  206e		       85 cf		      sta	P0Top
   2679  2070		       38		      sec
   2680  2071		       e5 b0		      sbc	player0height
   2681  2073		       18		      clc
   2682  2074		       69 80		      adc	#$80
   2683  2076		       85 a4		      sta	P0Bottom
   2684  2078
   2685  2078
   2686  2078							;--some final setup
   2687  2078
   2688  2078		       a2 04		      ldx	#4
   2689  207a		       a9 80		      lda	#$80
   2690  207c				   cycle74_HMCLR
   2691  207c		       95 20		      sta	HMP0,X
   2692  207e		       ca		      dex
   2693  207f		       10 fb		      bpl	cycle74_HMCLR
   2694  2081							;	sta HMCLR
   2695  2081
   2696  2081
   2697  2081		       a9 00		      lda	#0
   2698  2083		       85 0e		      sta	PF1
   2699  2085		       85 0f		      sta	PF2
   2700  2087		       85 1b		      sta	GRP0
   2701  2089		       85 1c		      sta	GRP1
   2702  208b
   2703  208b
   2704  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   2705  208e
   2706  208e				   WaitForVblankEnd
   2707  208e		       ad 84 02 	      lda	INTIM
   2708  2091		       30 fb		      bmi	WaitForVblankEnd
   2709  2093		       a9 00		      lda	#0
   2710  2095		       85 02		      sta	WSYNC
   2711  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   2712  2099		       85 2c		      sta	CXCLR
   2713  209b
   2714  209b
   2715  209b		       4c 60 f1 	      jmp	KernelRoutine
   2716  209e
   2717  209e
   2718  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   2719  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   2720  209e							;if you do not wish to write to P1 during this function, make
   2721  209e							;sure Y==0 before you call it.  This function will change Y, and A
   2722  209e							;will be the value put into HMxx when returned.
   2723  209e							;Call this function with at least 11 cycles left in the scanline 
   2724  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   2725  209e							;into the second scanline
   2726  209e		       38		      sec
   2727  209f		       85 02		      sta	WSYNC	;begin line 1
   2728  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   2729  20a4				   DivideBy15Loop
   2730  20a4		       e9 0f		      sbc	#15
   2731  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   2732  20a8
   2733  20a8		       a8		      tay		;+2	10/15/...60
   2734  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   2735  20ac
   2736  20ac							;	15
   2737  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   2738  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   2739  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   2740  20b2		       85 2a		      sta	HMOVE	;+3
   2741  20b4		       60		      rts		;+6	 9
   2742  20b5
   2743  20b5							;-------------------------------------------------------------------------
   2744  20b5
   2745  20b5				   PrePositionAllObjects
   2746  20b5
   2747  20b5		       a2 04		      ldx	#4
   2748  20b7		       a5 82		      lda	ballx
   2749  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2750  20bc
   2751  20bc		       ca		      dex
   2752  20bd		       a5 81		      lda	missile1x
   2753  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2754  20c2
   2755  20c2		       ca		      dex
   2756  20c3		       a5 80		      lda	missile0x
   2757  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2758  20c8
   2759  20c8		       ca		      dex
   2760  20c9		       ca		      dex
   2761  20ca		       a5 84		      lda	player0x
   2762  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   2763  20cf
   2764  20cf		       60		      rts
   2765  20d0
   2766  20d0
   2767  20d0							;-------------------------------------------------------------------------
   2768  20d0
   2769  20d0
   2770  20d0
   2771  20d0
   2772  20d0
   2773  20d0
   2774  20d0
   2775  20d0
   2776  20d0							;-------------------------------------------------------------------------
   2777  20d0
   2778  20d0
   2779  20d0				   KernelSetupSubroutine
   2780  20d0
   2781  20d0		       a2 04		      ldx	#4
   2782  20d2				   AdjustYValuesUpLoop
   2783  20d2		       b5 8e		      lda	NewSpriteY,X
   2784  20d4		       18		      clc
   2785  20d5		       69 02		      adc	#2
   2786  20d7		       95 8e		      sta	NewSpriteY,X
   2787  20d9		       ca		      dex
   2788  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   2789  20dc
   2790  20dc
   2791  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   2792  20de
   2793  20de		       b5 9d		      lda	SpriteGfxIndex,x
   2794  20e0		       a8		      tay
   2795  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   2796  20e4		       85 ce		      sta	RepoLine
   2797  20e6
   2798  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   2799  20e8		       a8		      tay
   2800  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   2801  20ec		       85 d0		      sta	temp6
   2802  20ee
   2803  20ee		       86 83		      stx	SpriteIndex
   2804  20f0
   2805  20f0
   2806  20f0
   2807  20f0		       a9 ff		      lda	#255
   2808  20f2		       85 a5		      sta	P1Bottom
   2809  20f4
   2810  20f4		       a5 8d		      lda	player0y
   2811  20f6				  -	      ifconst	screenheight
   2812  20f6				  -	      cmp	#screenheight+1
   2813  20f6					      else
   2814  20f6		       c9 59		      cmp	#$59
   2815  20f8					      endif
   2816  20f8		       90 04		      bcc	nottoohigh
   2817  20fa		       a5 a4		      lda	P0Bottom
   2818  20fc		       85 cf		      sta	P0Top
   2819  20fe
   2820  20fe
   2821  20fe
   2822  20fe				   nottoohigh
   2823  20fe		       60		      rts
   2824  20ff
   2825  20ff							;-------------------------------------------------------------------------
   2826  20ff
   2827  20ff
   2828  20ff
   2829  20ff
   2830  20ff
   2831  20ff							;*************************************************************************
   2832  20ff
   2833  20ff							;-------------------------------------------------------------------------
   2834  20ff							;-------------------------Data Below--------------------------------------
   2835  20ff							;-------------------------------------------------------------------------
   2836  20ff
   2837  20ff				   MaskTable
   2838  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   2839  2104
   2840  2104							; shove 6-digit score routine here
   2841  2104
   2842  2104				   sixdigscore
   2843  2104		       a9 00		      lda	#0
   2844  2106							;	sta COLUBK
   2845  2106		       85 0d		      sta	PF0
   2846  2108		       85 0e		      sta	PF1
   2847  210a		       85 0f		      sta	PF2
   2848  210c		       85 1f		      sta	ENABL
   2849  210e		       85 1d		      sta	ENAM0
   2850  2110		       85 1e		      sta	ENAM1
   2851  2112							;end of kernel here
   2852  2112
   2853  2112
   2854  2112							; 6 digit score routine
   2855  2112							; lda #0
   2856  2112							; sta PF1
   2857  2112							; sta PF2
   2858  2112							; tax
   2859  2112
   2860  2112		       85 02		      sta	WSYNC	;,x
   2861  2114
   2862  2114							;		  STA WSYNC ;first one, need one more
   2863  2114		       85 0b		      sta	REFP0
   2864  2116		       85 0c		      sta	REFP1
   2865  2118		       85 1b		      STA	GRP0
   2866  211a		       85 1c		      STA	GRP1
   2867  211c		       85 2b		      sta	HMCLR
   2868  211e
   2869  211e							; restore P0pointer
   2870  211e
   2871  211e		       a5 a2		      lda	player0pointer
   2872  2120		       18		      clc
   2873  2121		       65 8d		      adc	player0y
   2874  2123		       38		      sec
   2875  2124		       e5 b0		      sbc	player0height
   2876  2126		       85 a2		      sta	player0pointer
   2877  2128		       e6 8d		      inc	player0y
   2878  212a
   2879  212a				  -	      ifconst	vblank_time
   2880  212a				  -	      ifconst	screenheight
   2881  212a				  -	      if	screenheight == 84
   2882  212a				  -	      lda	#vblank_time+9+128+10
   2883  212a				  -	      else
   2884  212a				  -	      lda	#vblank_time+9+128+19
   2885  212a				  -	      endif
   2886  212a				  -	      else
   2887  212a				  -	      lda	#vblank_time+9+128
   2888  212a				  -	      endif
   2889  212a					      else
   2890  212a				  -	      ifconst	screenheight
   2891  212a				  -	      if	screenheight == 84
   2892  212a				  -	      lda	#52+128+10
   2893  212a				  -	      else
   2894  212a				  -	      lda	#52+128+19
   2895  212a				  -	      endif
   2896  212a					      else
   2897  212a		       a9 b4		      lda	#52+128
   2898  212c					      endif
   2899  212c					      endif
   2900  212c
   2901  212c		       8d 96 02 	      sta	TIM64T
   2902  212f					      ifconst	minikernel
   2903  212f		       20 50 fd 	      jsr	minikernel
   2904  2132					      endif
   2905  2132				  -	      ifconst	noscore
   2906  2132				  -	      pla
   2907  2132				  -	      pla
   2908  2132				  -	      jmp	skipscore
   2909  2132					      endif
   2910  2132
   2911  2132							; score pointers contain:
   2912  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   2913  2132							; swap lo2->temp1
   2914  2132							; swap lo4->temp3
   2915  2132							; swap lo6->temp5
   2916  2132
   2917  2132		       a5 ca		      lda	scorepointers+5
   2918  2134		       85 cf		      sta	temp5
   2919  2136		       a5 c6		      lda	scorepointers+1
   2920  2138		       85 cb		      sta	temp1
   2921  213a		       a5 c8		      lda	scorepointers+3
   2922  213c		       85 cd		      sta	temp3
   2923  213e
   2924  213e		       a9 ff		      lda	#>scoretable
   2925  2140		       85 c6		      sta	scorepointers+1
   2926  2142		       85 c8		      sta	scorepointers+3
   2927  2144		       85 ca		      sta	scorepointers+5
   2928  2146		       85 cc		      sta	temp2
   2929  2148		       85 ce		      sta	temp4
   2930  214a		       85 d0		      sta	temp6
   2931  214c
   2932  214c		       60		      rts
   2933  214d
   2934  214d
   2935  214d
   2936  214d							;-------------------------------------------------------------------------
   2937  214d							;----------------------Kernel Routine-------------------------------------
   2938  214d							;-------------------------------------------------------------------------
   2939  214d
   2940  214d
   2941  214d							;-------------------------------------------------------------------------
   2942  214d							; repeat $f147-*
   2943  214d							; brk
   2944  214d							; repend
   2945  214d							;	org $F240
   2946  214d
   2947  214d				   SwitchDrawP0K1		;	72
   2948  214d		       a5 a4		      lda	P0Bottom
   2949  214f		       85 cf		      sta	P0Top	;+6	 2
   2950  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   2951  2154
   2952  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   2954  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   2955  2159
   2956  2159				   SkipDrawP1K1 		;	11
   2957  2159		       a9 00		      lda	#0
   2958  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   2959  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   2960  2160
   2961  2160							;-------------------------------------------------------------------------
   2962  2160
   2963  2160				   KernelRoutine
   2964  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   2966  2166							; jsr wastetime ; waste 12 cycles
   2967  2166				  -	      else
   2968  2166				  -	      sleep	6
   2969  2166					      endif
   2970  2166		       ba		      tsx
   2971  2167		       86 f6		      stx	stack1
   2972  2169		       a2 1f		      ldx	#ENABL
   2973  216b		       9a		      txs		;+9	 9
   2974  216c
   2975  216c		       a2 00		      ldx	#0
   2976  216e		       a5 c4		      lda	pfheight
   2977  2170		       10 01		      bpl	asdhj
   2978  2172		       24		      .byte.b	$24
   2979  2173				   asdhj
   2980  2173		       aa		      tax
   2981  2174
   2982  2174							; ldx pfheight
   2983  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   2984  2177
   2985  2177				  -	      ifconst	screenheight
   2986  2177				  -	      sec
   2987  2177				  -	      if	screenheight == 84
   2988  2177				  -	      sbc	pfsub+1,x
   2989  2177				  -	      else
   2990  2177				  -	      sbc	pfsub,x
   2991  2177				  -	      endif
   2992  2177					      endif
   2993  2177
   2994  2177		       85 ba		      sta	pfpixelheight
   2995  2179
   2996  2179				  -	      ifconst	screenheight
   2997  2179				  -	      ldy	#screenheight
   2998  2179					      else
   2999  2179		       a0 58		      ldy	#88
   3000  217b					      endif
   3001  217b
   3002  217b							;	lda #$02
   3003  217b							;	sta COLUBK		;+5	18
   3004  217b
   3005  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   3007  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   3009  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   3011  2181		       c4 cf		      cpy	P0Top	;+3	69
   3012  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   3013  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   3014  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   3015  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   3016  218b				   BackFromSwitchDrawP0K1
   3017  218b
   3018  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   3019  218d							;		to a value greater than maximum Y value initially
   3020  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   3021  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   3022  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   3023  2194				   BackFromSkipDrawP1
   3024  2194
   3025  2194							;fuck	
   3026  2194		       84 cb		      sty	temp1
   3027  2196		       a4 ba		      ldy	pfpixelheight
   3028  2198		       b3 bb		      lax	(PF1pointer),y
   3029  219a		       86 0e		      stx	PF1	;+7	26
   3030  219c		       b1 bd		      lda	(PF2pointer),y
   3031  219e		       85 0f		      sta	PF2	;+7	33
   3032  21a0							;sleep 6
   3033  21a0		       86 b7		      stx	PF1temp2
   3034  21a2		       85 b9		      sta	PF2temp2
   3035  21a4		       88		      dey
   3036  21a5		       30 35		      bmi	pagewraphandler
   3037  21a7		       b1 bb		      lda	(PF1pointer),y
   3038  21a9				   cyclebalance
   3039  21a9		       85 b6		      sta	PF1temp1
   3040  21ab		       b1 bd		      lda	(PF2pointer),y
   3041  21ad		       85 b8		      sta	PF2temp1
   3042  21af		       a4 cb		      ldy	temp1
   3043  21b1
   3044  21b1		       a2 1f		      ldx	#ENABL
   3045  21b3		       9a		      txs
   3046  21b4		       c4 8c		      cpy	bally
   3047  21b6		       08		      php		;+6	39	VDEL ball
   3048  21b7
   3049  21b7
   3050  21b7		       c4 8b		      cpy	missile1y
   3051  21b9		       08		      php		;+6	71
   3052  21ba
   3053  21ba		       c4 8a		      cpy	missile0y
   3054  21bc		       08		      php		;+6	 1
   3055  21bd
   3056  21bd
   3057  21bd		       88		      dey		;+2	15
   3058  21be
   3059  21be		       c4 ce		      cpy	RepoLine	;+3	18
   3060  21c0		       f0 62		      beq	RepoKernel	;+2	20
   3061  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   3063  21c5
   3064  21c5				   newrepo		; since we have time here, store next repoline
   3065  21c5		       a6 83		      ldx	SpriteIndex
   3066  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   3067  21c9		       aa		      tax
   3068  21ca		       b5 8e		      lda	NewSpriteY,x
   3069  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   3071  21d0
   3072  21d0				   BackFromRepoKernel
   3073  21d0		       98		      tya		;+2	45
   3074  21d1		       25 c4		      and	pfheight	;+2	47
   3075  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   3076  21d5		       c6 ba		      dec	pfpixelheight
   3077  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   3078  21d9							;	bmi donewkernel		;+3	54
   3079  21d9							;	bne KernelLoopb+1		;+3	54
   3080  21d9
   3081  21d9				   donewkernel
   3082  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   3083  21dc
   3084  21dc				   pagewraphandler
   3085  21dc		       4c a9 f1 	      jmp	cyclebalance
   3086  21df
   3087  21df							;-------------------------------------------------------------------------
   3088  21df
   3089  21df							; room here for score?
   3090  21df
   3091  21df				   setscorepointers
   3092  21df		       a7 d4		      lax	score+2
   3093  21e1		       20 fb f1 	      jsr	scorepointerset
   3094  21e4		       84 ca		      sty	scorepointers+5
   3095  21e6		       86 c7		      stx	scorepointers+2
   3096  21e8		       a7 d3		      lax	score+1
   3097  21ea		       20 fb f1 	      jsr	scorepointerset
   3098  21ed		       84 c9		      sty	scorepointers+4
   3099  21ef		       86 c6		      stx	scorepointers+1
   3100  21f1		       a7 d2		      lax	score
   3101  21f3		       20 fb f1 	      jsr	scorepointerset
   3102  21f6		       84 c8		      sty	scorepointers+3
   3103  21f8		       86 c5		      stx	scorepointers
   3104  21fa				   wastetime
   3105  21fa		       60		      rts
   3106  21fb
   3107  21fb				   scorepointerset
   3108  21fb		       29 0f		      and	#$0F
   3109  21fd		       0a		      asl
   3110  21fe		       0a		      asl
   3111  21ff		       0a		      asl
   3112  2200		       69 74		      adc	#<scoretable
   3113  2202		       a8		      tay
   3114  2203		       8a		      txa
   3115  2204		       29 f0		      and	#$F0
   3116  2206		       4a		      lsr
   3117  2207		       69 74		      adc	#<scoretable
   3118  2209		       aa		      tax
   3119  220a		       60		      rts
   3120  220b							;	align 256
   3121  220b
   3122  220b				   SwitchDrawP0KR		;	45
   3123  220b		       a5 a4		      lda	P0Bottom
   3124  220d		       85 cf		      sta	P0Top	;+6	51
   3125  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3126  2212
   3127  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   3129  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3130  2217
   3131  2217							;-----------------------------------------------------------
   3132  2217
   3133  2217				   noUpdateXKR
   3134  2217		       a2 01		      ldx	#1
   3135  2219		       cc cf 00 	      cpy.w	P0Top
   3136  221c		       4c 2e f2 	      JMP	retXKR
   3137  221f
   3138  221f				   skipthis
   3139  221f		       a2 01		      ldx	#1
   3140  2221		       4c 70 f2 	      jmp	goback
   3141  2224
   3142  2224				   RepoKernel		;	22	crosses page boundary
   3143  2224		       98		      tya
   3144  2225		       25 c4		      and	pfheight	;+2	26
   3145  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   3146  2229		       aa		      tax
   3147  222a							;	dex			;+2	30
   3148  222a		       c6 ba		      dec	pfpixelheight
   3149  222c							;	stx Temp		;+3	35
   3150  222c							;	SLEEP 3
   3151  222c
   3152  222c		       c4 cf		      cpy	P0Top	;+3	42
   3153  222e				   retXKR
   3154  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   3155  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   3156  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   3157  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   3158  2236				   BackFromSwitchDrawP0KR
   3159  2236		       38		      sec		;+2	56
   3160  2237
   3161  2237
   3162  2237
   3163  2237		       b5 b8		      lda	PF2temp1,X
   3164  2239		       b4 b6		      ldy	PF1temp1,X
   3165  223b
   3166  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   3167  223d
   3168  223d		       85 0f		      sta	PF2	;+7	63
   3169  223f
   3170  223f		       b5 9d		      lda	SpriteGfxIndex,x
   3171  2241		       84 0e		      sty	PF1	;+7	70	too early?
   3172  2243		       aa		      tax
   3173  2244		       a9 00		      lda	#0
   3174  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   3175  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   3176  224a
   3177  224a				   DivideBy15LoopK		;	 6	(carry set above)
   3178  224a		       e9 0f		      sbc	#15
   3179  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   3180  224e
   3181  224e		       aa		      tax		;+2	12/17/...62
   3182  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   3183  2252
   3184  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   3185  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   3186  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3187  2258							;sta HMOVE			;+3	 3
   3188  2258
   3189  2258		       a2 1f		      ldx	#ENABL
   3190  225a		       9a		      txs		;+4	25
   3191  225b		       a4 ce		      ldy	RepoLine	; restore y
   3192  225d		       c4 8c		      cpy	bally
   3193  225f		       08		      php		;+6	 9	VDEL ball
   3194  2260
   3195  2260		       c4 8b		      cpy	missile1y
   3196  2262		       08		      php		;+6	15
   3197  2263
   3198  2263		       c4 8a		      cpy	missile0y
   3199  2265		       08		      php		;+6	21
   3200  2266
   3201  2266
   3202  2266
   3203  2266
   3204  2266
   3205  2266							;15 cycles
   3206  2266		       98		      tya
   3207  2267		       25 c4		      and	pfheight
   3208  2269							;eor #1
   3209  2269		       29 fe		      and	#$FE
   3210  226b		       d0 b2		      bne	skipthis
   3211  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   3213  2270							;	sleep 2
   3214  2270				   goback
   3215  2270
   3216  2270		       88		      dey
   3217  2271		       c4 cf		      cpy	P0Top	;+3	52
   3218  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   3219  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   3220  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   3221  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   3222  227b				   BackFromSwitchDrawP0KV
   3223  227b
   3224  227b							; sleep 3
   3225  227b
   3226  227b		       b5 b8		      lda	PF2temp1,X
   3227  227d		       85 0f		      sta	PF2	;+7	 5
   3228  227f		       b5 b6		      lda	PF1temp1,X
   3229  2281		       85 0e		      sta	PF1	;+7	74 
   3230  2283		       85 2a		      sta	HMOVE
   3231  2285
   3232  2285		       a9 00		      lda	#0
   3233  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   3234  2289
   3235  2289		       a2 1f		      ldx	#ENABL
   3236  228b		       9a		      txs		;+4	 8
   3237  228c
   3238  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   3239  228e							;--now, set all new variables and return to main kernel loop
   3240  228e
   3241  228e
   3242  228e							;
   3243  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   3244  2290		       aa		      tax		;+2	33
   3245  2291							;
   3246  2291
   3247  2291
   3248  2291
   3249  2291		       b5 93		      lda	NewNUSIZ,X
   3250  2293		       85 05		      sta	NUSIZ1	;+7	20
   3251  2295		       85 0c		      sta	REFP1
   3252  2297		       b5 98		      lda	NewCOLUP1,X
   3253  2299		       85 07		      sta	COLUP1	;+7	27
   3254  229b
   3255  229b							;	lda SpriteGfxIndex,X	;+4	31
   3256  229b							;	tax				;+2	33
   3257  229b							;fuck2
   3258  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   3259  229d		       38		      sec		;+2	38
   3260  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   3261  22a0		       85 a5		      sta	P1Bottom	;+3	45
   3262  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   3264  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   3265  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   3266  22a9		       85 cc		      sta	P1display	;+3	55
   3267  22ab		       b5 ab		      lda	player1pointerhi,X
   3268  22ad		       85 cd		      sta	P1display+1	;+7	62
   3269  22af
   3270  22af
   3271  22af		       c4 8c		      cpy	bally
   3272  22b1		       08		      php		;+6	68	VDELed
   3273  22b2
   3274  22b2		       c4 8b		      cpy	missile1y
   3275  22b4		       08		      php		;+6	74
   3276  22b5
   3277  22b5		       c4 8a		      cpy	missile0y
   3278  22b7		       08		      php		;+6	 4
   3279  22b8
   3280  22b8
   3281  22b8
   3282  22b8							; lda SpriteGfxIndex-1,x
   3283  22b8							; sleep 3
   3284  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   3285  22ba							; tax
   3286  22ba							; lda NewSpriteY,x
   3287  22ba							; sta RepoLine
   3288  22ba
   3289  22ba							; 10 cycles below...
   3290  22ba		       10 05		      bpl	SetNextLine
   3291  22bc		       a9 ff		      lda	#255
   3292  22be		       4c c4 f2 	      jmp	SetLastLine
   3293  22c1				   SetNextLine
   3294  22c1							;	lda NewSpriteY-1,x
   3295  22c1		       ad d0 00 	      lda.w	temp6
   3296  22c4				   SetLastLine
   3297  22c4		       85 ce		      sta	RepoLine
   3298  22c6
   3299  22c6		       98		      tya
   3300  22c7		       25 c4		      and	pfheight
   3301  22c9		       d0 06		      bne	nodec
   3302  22cb		       c6 ba		      dec	pfpixelheight
   3303  22cd		       88		      dey		;+2	30
   3304  22ce
   3305  22ce							; 10 cycles 
   3306  22ce
   3307  22ce
   3308  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   3309  22d1
   3310  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   3312  22d3		       88		      dey
   3313  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   3314  22d7
   3315  22d7							;-------------------------------------------------------------------------
   3316  22d7
   3317  22d7
   3318  22d7				   SwitchDrawP0KV		;	69
   3319  22d7		       a5 a4		      lda	P0Bottom
   3320  22d9		       85 cf		      sta	P0Top	;+6	75
   3321  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3322  22de
   3323  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   3325  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3326  22e3
   3327  22e3							;-------------------------------------------------------------------------
   3328  22e3
   3329  22e3				   DoneWithKernel
   3330  22e3
   3331  22e3				   BottomOfKernelLoop
   3332  22e3
   3333  22e3		       85 02		      sta	WSYNC
   3334  22e5		       a6 f6		      ldx	stack1
   3335  22e7		       9a		      txs
   3336  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   3337  22eb
   3338  22eb
   3339  22eb		       85 02		      sta	WSYNC
   3340  22ed		       a2 00		      ldx	#0
   3341  22ef		       85 2b		      sta	HMCLR
   3342  22f1		       86 1b		      STx	GRP0
   3343  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   3344  22f5
   3345  22f5		       a0 07		      LDY	#7
   3346  22f7		       84 25		      STy	VDELP0
   3347  22f9		       84 26		      STy	VDELP1
   3348  22fb		       a9 10		      LDA	#$10
   3349  22fd		       85 21		      STA	HMP1
   3350  22ff		       a5 d5		      LDA	scorecolor
   3351  2301		       85 06		      STA	COLUP0
   3352  2303		       85 07		      STA	COLUP1
   3353  2305
   3354  2305		       a9 03		      LDA	#$03
   3355  2307		       85 04		      STA	NUSIZ0
   3356  2309		       85 05		      STA	NUSIZ1
   3357  230b
   3358  230b		       85 10		      STA	RESP0
   3359  230d		       85 11		      STA	RESP1
   3360  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   3362  2314		       b1 c5		      lda	(scorepointers),y
   3363  2316		       85 1b		      sta	GRP0
   3364  2318				  -	      ifconst	pfscore
   3365  2318				  -	      lda	pfscorecolor
   3366  2318				  -	      sta	COLUPF
   3367  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   3369  231b					      endif
   3370  231b
   3371  231b		       85 2a		      STA	HMOVE
   3372  231d		       b1 cd		      lda	(scorepointers+8),y
   3373  231f							; sta WSYNC
   3374  231f							;sleep 2
   3375  231f		       4c 2c f3 	      jmp	beginscore
   3376  2322
   3377  2322
   3378  2322				   loop2
   3379  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   3380  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   3381  2326				  -	      ifconst	pfscore
   3382  2326				  -	      lda.w	pfscore1
   3383  2326				  -	      sta	PF1
   3384  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   3386  232a					      endif
   3387  232a							; cycle 0
   3388  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   3389  232c				   beginscore
   3390  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   3391  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   3392  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   3393  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   3394  2334		       9a		      txs
   3395  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   3397  2339				  -	      ifconst	pfscore
   3398  2339				  -	      lda	pfscore2
   3399  2339				  -	      sta	PF1
   3400  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   3402  233c					      endif
   3403  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   3404  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   3405  2340		       ba		      tsx
   3406  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   3407  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   3408  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   3409  2347		       88		      dey
   3410  2348		       10 d8		      bpl	loop2	;+2  60  180
   3411  234a		       a6 f6		      ldx	stack1
   3412  234c		       9a		      txs
   3413  234d
   3414  234d
   3415  234d							; lda scorepointers+1
   3416  234d		       a4 cb		      ldy	temp1
   3417  234f							; sta temp1
   3418  234f		       84 c6		      sty	scorepointers+1
   3419  2351
   3420  2351		       a9 00		      LDA	#0
   3421  2353		       85 1b		      STA	GRP0
   3422  2355		       85 1c		      STA	GRP1
   3423  2357		       85 0e		      sta	PF1
   3424  2359		       85 25		      STA	VDELP0
   3425  235b		       85 26		      STA	VDELP1	;do we need these
   3426  235d		       85 04		      STA	NUSIZ0
   3427  235f		       85 05		      STA	NUSIZ1
   3428  2361
   3429  2361							; lda scorepointers+3
   3430  2361		       a4 cd		      ldy	temp3
   3431  2363							; sta temp3
   3432  2363		       84 c8		      sty	scorepointers+3
   3433  2365
   3434  2365							; lda scorepointers+5
   3435  2365		       a4 cf		      ldy	temp5
   3436  2367							; sta temp5
   3437  2367		       84 ca		      sty	scorepointers+5
   3438  2369
   3439  2369
   3440  2369							;-------------------------------------------------------------------------
   3441  2369							;------------------------Overscan Routine---------------------------------
   3442  2369							;-------------------------------------------------------------------------
   3443  2369
   3444  2369				   OverscanRoutine
   3445  2369
   3446  2369
   3447  2369
   3448  2369				   skipscore
   3449  2369				  -	      ifconst	qtcontroller
   3450  2369				  -	      lda	qtcontroller
   3451  2369				  -	      lsr		; bit 0 in carry
   3452  2369				  -	      lda	#4
   3453  2369				  -	      ror		; carry into top of A
   3454  2369					      else
   3455  2369		       a9 02		      lda	#2
   3456  236b					      endif		; qtcontroller
   3457  236b		       85 02		      sta	WSYNC
   3458  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   3459  236f
   3460  236f
   3461  236f
   3462  236f
   3463  236f
   3464  236f							;-------------------------------------------------------------------------
   3465  236f							;----------------------------End Main Routines----------------------------
   3466  236f							;-------------------------------------------------------------------------
   3467  236f
   3468  236f
   3469  236f							;*************************************************************************
   3470  236f
   3471  236f							;-------------------------------------------------------------------------
   3472  236f							;----------------------Begin Subroutines----------------------------------
   3473  236f							;-------------------------------------------------------------------------
   3474  236f
   3475  236f
   3476  236f
   3477  236f
   3478  236f				   KernelCleanupSubroutine
   3479  236f
   3480  236f		       a2 04		      ldx	#4
   3481  2371				   AdjustYValuesDownLoop
   3482  2371		       b5 8e		      lda	NewSpriteY,X
   3483  2373		       38		      sec
   3484  2374		       e9 02		      sbc	#2
   3485  2376		       95 8e		      sta	NewSpriteY,X
   3486  2378		       ca		      dex
   3487  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   3488  237b
   3489  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   3491  237e							;rts
   3492  237e
   3493  237e				   SetupP1Subroutine
   3494  237e							; flickersort algorithm
   3495  237e							; count 4-0
   3496  237e							; table2=table1 (?)
   3497  237e							; detect overlap of sprites in table 2
   3498  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   3499  237e							; if no overlap, do regular sort in table 2 and table 1
   3500  237e				   fsstart
   3501  237e		       a2 ff		      ldx	#255
   3502  2380				   copytable
   3503  2380		       e8		      inx
   3504  2381		       b5 f1		      lda	spritesort,x
   3505  2383		       95 9d		      sta	SpriteGfxIndex,x
   3506  2385		       e0 04		      cpx	#4
   3507  2387		       d0 f7		      bne	copytable
   3508  2389
   3509  2389		       86 cd		      stx	temp3	; highest displayed sprite
   3510  238b		       ca		      dex
   3511  238c		       86 cc		      stx	temp2
   3512  238e				   sortloop
   3513  238e		       a6 cc		      ldx	temp2
   3514  2390		       b5 f1		      lda	spritesort,x
   3515  2392		       aa		      tax
   3516  2393		       b5 8e		      lda	NewSpriteY,x
   3517  2395		       85 cb		      sta	temp1
   3518  2397
   3519  2397		       a6 cc		      ldx	temp2
   3520  2399		       b5 f2		      lda	spritesort+1,x
   3521  239b		       aa		      tax
   3522  239c		       b5 8e		      lda	NewSpriteY,x
   3523  239e		       38		      sec
   3524  239f		       18		      clc
   3525  23a0		       e5 cb		      sbc	temp1
   3526  23a2		       90 0e		      bcc	largerXislower
   3527  23a4
   3528  23a4							; larger x is higher (A>=temp1)
   3529  23a4		       d5 b1		      cmp	spriteheight,x
   3530  23a6		       b0 2f		      bcs	countdown
   3531  23a8							; overlap with x+1>x
   3532  23a8							; 
   3533  23a8							; stick x at end of gfxtable, dec counter
   3534  23a8				   overlapping
   3535  23a8		       c6 cd		      dec	temp3
   3536  23aa		       a6 cc		      ldx	temp2
   3537  23ac							; inx
   3538  23ac		       20 eb f3 	      jsr	shiftnumbers
   3539  23af		       4c cd f3 	      jmp	skipswapGfxtable
   3540  23b2
   3541  23b2				   largerXislower		; (temp1>A)
   3542  23b2		       a8		      tay
   3543  23b3		       a6 cc		      ldx	temp2
   3544  23b5		       b5 f1		      lda	spritesort,x
   3545  23b7		       aa		      tax
   3546  23b8		       98		      tya
   3547  23b9		       49 ff		      eor	#$FF
   3548  23bb		       e9 01		      sbc	#1
   3549  23bd		       90 e9		      bcc	overlapping
   3550  23bf		       d5 b1		      cmp	spriteheight,x
   3551  23c1		       b0 0a		      bcs	notoverlapping
   3552  23c3
   3553  23c3		       c6 cd		      dec	temp3
   3554  23c5		       a6 cc		      ldx	temp2
   3555  23c7							; inx
   3556  23c7		       20 eb f3 	      jsr	shiftnumbers
   3557  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   3558  23cd				   notoverlapping
   3559  23cd							; ldx temp2 ; swap display table
   3560  23cd							; ldy SpriteGfxIndex+1,x
   3561  23cd							; lda SpriteGfxIndex,x
   3562  23cd							; sty SpriteGfxIndex,x
   3563  23cd							; sta SpriteGfxIndex+1,x 
   3564  23cd
   3565  23cd				   skipswapGfxtable
   3566  23cd		       a6 cc		      ldx	temp2	; swap sort table
   3567  23cf		       b4 f2		      ldy	spritesort+1,x
   3568  23d1		       b5 f1		      lda	spritesort,x
   3569  23d3		       94 f1		      sty	spritesort,x
   3570  23d5		       95 f2		      sta	spritesort+1,x
   3571  23d7
   3572  23d7				   countdown
   3573  23d7		       c6 cc		      dec	temp2
   3574  23d9		       10 b3		      bpl	sortloop
   3575  23db
   3576  23db				   checktoohigh
   3577  23db		       a6 cd		      ldx	temp3
   3578  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   3579  23df		       aa		      tax
   3580  23e0		       b5 8e		      lda	NewSpriteY,x
   3581  23e2				  -	      ifconst	screenheight
   3582  23e2				  -	      cmp	#screenheight-3
   3583  23e2					      else
   3584  23e2		       c9 55		      cmp	#$55
   3585  23e4					      endif
   3586  23e4		       90 04		      bcc	nonetoohigh
   3587  23e6		       c6 cd		      dec	temp3
   3588  23e8		       d0 f1		      bne	checktoohigh
   3589  23ea
   3590  23ea				   nonetoohigh
   3591  23ea		       60		      rts
   3592  23eb
   3593  23eb
   3594  23eb				   shiftnumbers
   3595  23eb							; stick current x at end, shift others down
   3596  23eb							; if x=4: don't do anything
   3597  23eb							; if x=3: swap 3 and 4
   3598  23eb							; if x=2: 2=3, 3=4, 4=2
   3599  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   3600  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   3601  23eb							; ldy SpriteGfxIndex,x
   3602  23eb				   swaploop
   3603  23eb		       e0 04		      cpx	#4
   3604  23ed		       f0 08		      beq	shiftdone
   3605  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   3606  23f1		       95 9d		      sta	SpriteGfxIndex,x
   3607  23f3		       e8		      inx
   3608  23f4		       4c eb f3 	      jmp	swaploop
   3609  23f7				   shiftdone
   3610  23f7							; sty SpriteGfxIndex,x
   3611  23f7		       60		      rts
   3612  23f8
   3613  23f8				  -	      ifconst	debugscore
   3614  23f8				  -debugcycles
   3615  23f8				  -	      ldx	#14
   3616  23f8				  -	      lda	INTIM	; display # cycles left in the score
   3617  23f8				  -
   3618  23f8				  -	      ifconst	mincycles
   3619  23f8				  -	      lda	mincycles
   3620  23f8				  -	      cmp	INTIM
   3621  23f8				  -	      lda	mincycles
   3622  23f8				  -	      bcc	nochange
   3623  23f8				  -	      lda	INTIM
   3624  23f8				  -	      sta	mincycles
   3625  23f8				  -nochange
   3626  23f8				  -	      endif
   3627  23f8				  -
   3628  23f8				  -			;   cmp #$2B
   3629  23f8				  -			;   bcs no_cycles_left
   3630  23f8				  -	      bmi	cycles_left
   3631  23f8				  -	      ldx	#64
   3632  23f8				  -	      eor	#$ff	;make negative
   3633  23f8				  -cycles_left
   3634  23f8				  -	      stx	scorecolor
   3635  23f8				  -	      and	#$7f	; clear sign bit
   3636  23f8				  -	      tax
   3637  23f8				  -	      lda	scorebcd,x
   3638  23f8				  -	      sta	score+2
   3639  23f8				  -	      lda	scorebcd1,x
   3640  23f8				  -	      sta	score+1
   3641  23f8				  -	      rts
   3642  23f8				  -scorebcd
   3643  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   3644  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   3645  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   3646  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   3647  23f8				  -scorebcd1
   3648  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   3649  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   3650  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   3651  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   3652  23f8					      endif
   3653  23f8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3654  23f8
   3655  23f8				   start
   3656  23f8		       78		      sei
   3657  23f9		       d8		      cld
   3658  23fa		       a0 00		      ldy	#0
   3659  23fc		       a5 d0		      lda	$D0
   3660  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   3661  2400		       d0 07		      bne	MachineIs2600
   3662  2402		       a5 d1		      lda	$D1
   3663  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   3664  2406		       d0 01		      bne	MachineIs2600
   3665  2408		       88		      dey
   3666  2409				   MachineIs2600
   3667  2409		       a2 00		      ldx	#0
   3668  240b		       8a		      txa
   3669  240c				   clearmem
   3670  240c		       e8		      inx
   3671  240d		       9a		      txs
   3672  240e		       48		      pha
   3673  240f		       d0 fb		      bne	clearmem
   3674  2411		       84 cb		      sty	temp1
   3675  2413				  -	      ifnconst	multisprite
   3676  2413				  -	      ifconst	pfrowheight
   3677  2413				  -	      lda	#pfrowheight
   3678  2413				  -	      else
   3679  2413				  -	      ifconst	pfres
   3680  2413				  -	      lda	#(96/pfres)
   3681  2413				  -	      else
   3682  2413				  -	      lda	#8
   3683  2413				  -	      endif
   3684  2413				  -	      endif
   3685  2413				  -	      sta	playfieldpos
   3686  2413					      endif
   3687  2413		       a2 05		      ldx	#5
   3688  2415				   initscore
   3689  2415		       a9 74		      lda	#<scoretable
   3690  2417		       95 c5		      sta	scorepointers,x
   3691  2419		       ca		      dex
   3692  241a		       10 f9		      bpl	initscore
   3693  241c		       a9 01		      lda	#1
   3694  241e		       85 0a		      sta	CTRLPF
   3695  2420		       0d 84 02 	      ora	INTIM
   3696  2423		       85 d6		      sta	rand
   3697  2425
   3698  2425					      ifconst	multisprite
   3699  2425		       20 1f f0 	      jsr	multisprite_setup
   3700  2428					      endif
   3701  2428
   3702  2428				  -	      ifnconst	bankswitch
   3703  2428				  -	      jmp	game
   3704  2428					      else
   3705  2428		       a9 d0		      lda	#>(game-1)
   3706  242a		       48		      pha
   3707  242b		       a9 ff		      lda	#<(game-1)
   3708  242d		       48		      pha
   3709  242e		       48		      pha
   3710  242f		       48		      pha
   3711  2430		       a2 01		      ldx	#1
   3712  2432		       4c eb ff 	      jmp	BS_jsr
   3713  2435					      endif
   3714  2435							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3715  2435
   3716  2435							;standard routines needed for pretty much all games
   3717  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   3718  2435							; repositioning code and score pointer setup moved to overscan
   3719  2435							; read switches, joysticks now compiler generated (more efficient)
   3720  2435
   3721  2435				   randomize
   3722  2435		       a5 d6		      lda	rand
   3723  2437		       4a		      lsr
   3724  2438				  -	      ifconst	rand16
   3725  2438				  -	      rol	rand16
   3726  2438					      endif
   3727  2438		       90 02		      bcc	noeor
   3728  243a		       49 b4		      eor	#$B4
   3729  243c				   noeor
   3730  243c		       85 d6		      sta	rand
   3731  243e				  -	      ifconst	rand16
   3732  243e				  -	      eor	rand16
   3733  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   3735  2441							;bB.asm
   3736  2441							; bB.asm file is split here
   3737  2441				   .L0244		;  asm
   3738  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_96x2_1
     10  2441					      draw_48x1_1
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_96x2_1
      1  2482		       00 01	   mk_96x2_1_on =	1
      2  2482		       20 f8 f5 	      jsr	draw_bmp_96x2_1
      0  2485					      draw_48x1_1
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x1_1_on =	1
      3  2485		       20 9e f5 	      jsr	draw_bmp_48x1_1
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 71 f7 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 58 f8 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x1_1
      3  259e
      4  259e		       a9 00		      lda	#0
      5  25a0		       85 1b		      sta	GRP0
      6  25a2		       85 1c		      sta	GRP1
      7  25a4
      8  25a4		       a0 59		      ldy	#(bmp_48x1_1_window-1)
      9  25a6
     10  25a6							;setup score pointers to point at my bitmap slices instead
     11  25a6		       a9 6c		      lda	#<bmp_48x1_1_00
     12  25a8		       18		      clc
     13  25a9		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  25ab				  -	      ifconst	bmp_48x1_1_index
     15  25ab				  -	      sec
     16  25ab				  -	      sbc	bmp_48x1_1_index
     17  25ab					      endif
     18  25ab		       85 c5		      sta	scorepointers+0
     19  25ad		       a9 f8		      lda	#>bmp_48x1_1_00
     20  25af		       85 c6		      sta	scorepointers+1
     21  25b1
     22  25b1
     23  25b1		       a9 00		      lda	#<bmp_48x1_1_01
     24  25b3		       18		      clc
     25  25b4		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  25b6				  -	      ifconst	bmp_48x1_1_index
     27  25b6				  -	      sec
     28  25b6				  -	      sbc	bmp_48x1_1_index
     29  25b6					      endif
     30  25b6		       85 c7		      sta	scorepointers+2
     31  25b8		       a9 f9		      lda	#>bmp_48x1_1_01
     32  25ba		       85 c8		      sta	scorepointers+3
     33  25bc
     34  25bc
     35  25bc		       a9 63		      lda	#<bmp_48x1_1_02
     36  25be		       18		      clc
     37  25bf		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  25c1				  -	      ifconst	bmp_48x1_1_index
     39  25c1				  -	      sec
     40  25c1				  -	      sbc	bmp_48x1_1_index
     41  25c1					      endif
     42  25c1		       85 c9		      sta	scorepointers+4
     43  25c3		       a9 f9		      lda	#>bmp_48x1_1_02
     44  25c5		       85 ca		      sta	scorepointers+5
     45  25c7
     46  25c7
     47  25c7		       a9 00		      lda	#<bmp_48x1_1_03
     48  25c9		       18		      clc
     49  25ca		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  25cc				  -	      ifconst	bmp_48x1_1_index
     51  25cc				  -	      sec
     52  25cc				  -	      sbc	bmp_48x1_1_index
     53  25cc					      endif
     54  25cc		       85 cb		      sta	scorepointers+6
     55  25ce		       a9 fa		      lda	#>bmp_48x1_1_03
     56  25d0		       85 cc		      sta	scorepointers+7
     57  25d2
     58  25d2
     59  25d2		       a9 63		      lda	#<bmp_48x1_1_04
     60  25d4		       18		      clc
     61  25d5		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  25d7				  -	      ifconst	bmp_48x1_1_index
     63  25d7				  -	      sec
     64  25d7				  -	      sbc	bmp_48x1_1_index
     65  25d7					      endif
     66  25d7		       85 cd		      sta	scorepointers+8
     67  25d9		       a9 fa		      lda	#>bmp_48x1_1_04
     68  25db		       85 ce		      sta	scorepointers+9
     69  25dd
     70  25dd
     71  25dd		       a9 00		      lda	#<bmp_48x1_1_05
     72  25df		       18		      clc
     73  25e0		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  25e2				  -	      ifconst	bmp_48x1_1_index
     75  25e2				  -	      sec
     76  25e2				  -	      sbc	bmp_48x1_1_index
     77  25e2					      endif
     78  25e2		       85 cf		      sta	scorepointers+10
     79  25e4		       a9 fb		      lda	#>bmp_48x1_1_05
     80  25e6		       85 d0		      sta	scorepointers+11
     81  25e8
     82  25e8		       a9 01		      lda	#1	;single line kernel
     83  25ea		       85 bf		      sta	aux3
     84  25ec
     85  25ec		       ad 6b f8 	      lda	bmp_48x1_1_color
     86  25ef		       85 06		      sta	COLUP0	;3
     87  25f1		       85 07		      sta	COLUP1	;3
     88  25f3		       85 2b		      sta	HMCLR	;3
     89  25f5
     90  25f5
     91  25f5		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  25f8
------- FILE titlescreen/asm/titlescreen.asm
     76  25f8					      endif		;mk_48x1_1_on
     77  25f8
     78  25f8				  -	      ifconst	mk_48x1_2_on
     79  25f8				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  25f8					      endif		;mk_48x1_2_on
     81  25f8
     82  25f8				  -	      ifconst	mk_48x1_3_on
     83  25f8				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  25f8					      endif		;mk_48x1_3_on
     85  25f8
     86  25f8				  -	      ifconst	mk_48x2_1_on
     87  25f8				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  25f8					      endif		;mk_48x2_1_on
     89  25f8
     90  25f8				  -	      ifconst	mk_48x2_2_on
     91  25f8				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  25f8					      endif		;mk_48x2_2_on
     93  25f8
     94  25f8				  -	      ifconst	mk_48x2_3_on
     95  25f8				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  25f8					      endif		;mk_48x2_3_on
     97  25f8
     98  25f8					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  25f8					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  25f8				   draw_bmp_96x2_1
      2  25f8
      3  25f8				  -	      ifconst	bmp_96x2_1_index
      4  25f8				  -	      lda	#(bmp_96x2_1_height-1)
      5  25f8				  -	      sec
      6  25f8				  -	      sbc	bmp_96x2_1_index
      7  25f8				  -	      tay
      8  25f8				  -	      sbc	#bmp_96x2_1_window
      9  25f8				  -	      sta	temp1
     10  25f8					      else
     11  25f8		       a0 1b		      ldy	#(bmp_96x2_1_window-1)
     12  25fa		       a9 ff		      lda	#255
     13  25fc		       85 cb		      sta	temp1
     14  25fe					      endif
     15  25fe
     16  25fe		       a9 03		      lda	#3
     17  2600		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
     18  2602		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     19  2604		       a9 00		      lda	#0
     20  2606
     21  2606		       b9 64 fb 	      lda	bmp_96x2_1_colors,y	;4
     22  2609				  -	      ifconst	bmp_96x2_1_fade
     23  2609				  -	      and	bmp_96x2_1_fade
     24  2609					      endif
     25  2609		       85 06		      sta	COLUP0	;3
     26  260b		       85 07		      sta	COLUP1	;3
     27  260d		       85 2b		      sta	HMCLR	;3
     28  260f
     29  260f		       a5 80		      lda	titleframe
     30  2611		       29 01		      and	#1
     31  2613		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  2615		       4c bf f6 	      jmp	pf96x2_1_frame1
     33  2618				   jmp_pf96x2_1_frame0
     34  2618		       4c 1b f6 	      jmp	pf96x2_1_frame0
     35  261b
     36  261b				   pf96x2_1_frame0
     37  261b							;postion P0 and P1
     38  261b		       85 02		      sta	WSYNC
     39  261d		       a9 e0		      lda	#%11100000
     40  261f		       85 20		      sta	HMP0
     41  2621		       a9 10		      lda	#%00010000
     42  2623		       85 21		      sta	HMP1
     43  2625		       85 02		      sta	WSYNC
      0  2627					      sleep	28
      1  2627				   .CYCLES    SET	28
      2  2627
      3  2627				  -	      IF	.CYCLES < 2
      4  2627				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2627				  -	      ERR
      6  2627					      ENDIF
      7  2627
      8  2627				  -	      IF	.CYCLES & 1
      9  2627				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2627				  -	      nop	0
     11  2627				  -	      ELSE
     12  2627				  -	      bit	VSYNC
     13  2627				  -	      ENDIF
     14  2627				  -.CYCLES    SET	.CYCLES - 3
     15  2627					      ENDIF
     16  2627
     17  2627					      REPEAT	.CYCLES / 2
     18  2627		       ea		      nop
     17  2627					      REPEND
     18  2628		       ea		      nop
     17  2628					      REPEND
     18  2629		       ea		      nop
     17  2629					      REPEND
     18  262a		       ea		      nop
     17  262a					      REPEND
     18  262b		       ea		      nop
     17  262b					      REPEND
     18  262c		       ea		      nop
     17  262c					      REPEND
     18  262d		       ea		      nop
     17  262d					      REPEND
     18  262e		       ea		      nop
     17  262e					      REPEND
     18  262f		       ea		      nop
     17  262f					      REPEND
     18  2630		       ea		      nop
     17  2630					      REPEND
     18  2631		       ea		      nop
     17  2631					      REPEND
     18  2632		       ea		      nop
     17  2632					      REPEND
     18  2633		       ea		      nop
     17  2633					      REPEND
     18  2634		       ea		      nop
     19  2635					      REPEND
     45  2635		       85 10		      sta	RESP0
      0  2637					      sleep	14
      1  2637				   .CYCLES    SET	14
      2  2637
      3  2637				  -	      IF	.CYCLES < 2
      4  2637				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2637				  -	      ERR
      6  2637					      ENDIF
      7  2637
      8  2637				  -	      IF	.CYCLES & 1
      9  2637				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2637				  -	      nop	0
     11  2637				  -	      ELSE
     12  2637				  -	      bit	VSYNC
     13  2637				  -	      ENDIF
     14  2637				  -.CYCLES    SET	.CYCLES - 3
     15  2637					      ENDIF
     16  2637
     17  2637					      REPEAT	.CYCLES / 2
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     17  2638					      REPEND
     18  2639		       ea		      nop
     17  2639					      REPEND
     18  263a		       ea		      nop
     17  263a					      REPEND
     18  263b		       ea		      nop
     17  263b					      REPEND
     18  263c		       ea		      nop
     17  263c					      REPEND
     18  263d		       ea		      nop
     19  263e					      REPEND
     47  263e		       85 11		      sta	RESP1
     48  2640		       85 02		      sta	WSYNC
     49  2642		       85 2a		      sta	HMOVE
     50  2644
     51  2644		       85 02		      sta	WSYNC
     52  2646		       85 2b		      sta	HMCLR
     53  2648		       85 02		      sta	WSYNC
     54  264a
      0  264a					      sleep	4
      1  264a				   .CYCLES    SET	4
      2  264a
      3  264a				  -	      IF	.CYCLES < 2
      4  264a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264a				  -	      ERR
      6  264a					      ENDIF
      7  264a
      8  264a				  -	      IF	.CYCLES & 1
      9  264a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264a				  -	      nop	0
     11  264a				  -	      ELSE
     12  264a				  -	      bit	VSYNC
     13  264a				  -	      ENDIF
     14  264a				  -.CYCLES    SET	.CYCLES - 3
     15  264a					      ENDIF
     16  264a
     17  264a					      REPEAT	.CYCLES / 2
     18  264a		       ea		      nop
     17  264a					      REPEND
     18  264b		       ea		      nop
     19  264c					      REPEND
     56  264c		       4c 4f f6 	      jmp	pfline_96x2_1_frame0
     57  264f							;align so our branch doesn't unexpectedly cross a page...
     58  264f				  -	      if	>. != >[.+$70]
     59  264f				  -	      align	256
     60  264f					      endif
     61  264f
     62  264f				   pfline_96x2_1_frame0
     63  264f		       a9 80		      lda	#$80	;2
     64  2651		       85 20		      sta	HMP0	;3
     65  2653		       85 21		      sta	HMP1	;3
     66  2655
     67  2655		       b9 3c fc 	      lda	bmp_96x2_1_06,y	;4
     68  2658		       85 1c		      sta	GRP1	;3
     69  265a
     70  265a		       b9 82 fb 	      lda	bmp_96x2_1_00,y
     71  265d		       85 1b		      sta	GRP0
     72  265f		       b9 be fb 	      lda	bmp_96x2_1_02,y
     73  2662		       85 1b		      sta	GRP0
     74  2664		       b9 00 fc 	      lda	bmp_96x2_1_04,y
     75  2667		       85 1b		      sta	GRP0
     76  2669
      0  2669					      sleep	2
      1  2669				   .CYCLES    SET	2
      2  2669
      3  2669				  -	      IF	.CYCLES < 2
      4  2669				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2669				  -	      ERR
      6  2669					      ENDIF
      7  2669
      8  2669				  -	      IF	.CYCLES & 1
      9  2669				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2669				  -	      nop	0
     11  2669				  -	      ELSE
     12  2669				  -	      bit	VSYNC
     13  2669				  -	      ENDIF
     14  2669				  -.CYCLES    SET	.CYCLES - 3
     15  2669					      ENDIF
     16  2669
     17  2669					      REPEAT	.CYCLES / 2
     18  2669		       ea		      nop
     19  266a					      REPEND
     78  266a
     79  266a		       b9 78 fc 	      lda	bmp_96x2_1_08,y
     80  266d		       85 1c		      sta	GRP1
     81  266f		       b9 b4 fc 	      lda	bmp_96x2_1_10,y
     82  2672		       85 1c		      sta	GRP1
     83  2674
     84  2674		       b9 a0 fb 	      lda	bmp_96x2_1_01,y
     85  2677		       85 1b		      sta	GRP0
     86  2679
      0  2679					      sleep	8
      1  2679				   .CYCLES    SET	8
      2  2679
      3  2679				  -	      IF	.CYCLES < 2
      4  2679				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2679				  -	      ERR
      6  2679					      ENDIF
      7  2679
      8  2679				  -	      IF	.CYCLES & 1
      9  2679				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2679				  -	      nop	0
     11  2679				  -	      ELSE
     12  2679				  -	      bit	VSYNC
     13  2679				  -	      ENDIF
     14  2679				  -.CYCLES    SET	.CYCLES - 3
     15  2679					      ENDIF
     16  2679
     17  2679					      REPEAT	.CYCLES / 2
     18  2679		       ea		      nop
     17  2679					      REPEND
     18  267a		       ea		      nop
     17  267a					      REPEND
     18  267b		       ea		      nop
     17  267b					      REPEND
     18  267c		       ea		      nop
     19  267d					      REPEND
     88  267d
     89  267d							;sta WSYNC	;=0
     90  267d		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  267f
     92  267f		       b9 63 fb 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2682				  -	      ifconst	bmp_96x2_1_fade
     94  2682				  -	      and	bmp_96x2_1_fade
     95  2682					      else
      0  2682					      sleep	3
      1  2682				   .CYCLES    SET	3
      2  2682
      3  2682				  -	      IF	.CYCLES < 2
      4  2682				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2682				  -	      ERR
      6  2682					      ENDIF
      7  2682
      8  2682					      IF	.CYCLES & 1
      9  2682					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2682		       04 00		      nop	0
     11  2684				  -	      ELSE
     12  2684				  -	      bit	VSYNC
     13  2684					      ENDIF
     14  2684				   .CYCLES    SET	.CYCLES - 3
     15  2684					      ENDIF
     16  2684
     17  2684				  -	      REPEAT	.CYCLES / 2
     18  2684				  -	      nop
     19  2684					      REPEND
     97  2684					      endif
     98  2684		       aa		      tax
     99  2685
    100  2685		       a9 00		      lda	#0	;2
    101  2687		       85 20		      sta	HMP0	;3
    102  2689		       85 21		      sta	HMP1	;3
    103  268b
      0  268b					      sleep	7
      1  268b				   .CYCLES    SET	7
      2  268b
      3  268b				  -	      IF	.CYCLES < 2
      4  268b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  268b				  -	      ERR
      6  268b					      ENDIF
      7  268b
      8  268b					      IF	.CYCLES & 1
      9  268b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  268b		       04 00		      nop	0
     11  268d				  -	      ELSE
     12  268d				  -	      bit	VSYNC
     13  268d					      ENDIF
     14  268d				   .CYCLES    SET	.CYCLES - 3
     15  268d					      ENDIF
     16  268d
     17  268d					      REPEAT	.CYCLES / 2
     18  268d		       ea		      nop
     17  268d					      REPEND
     18  268e		       ea		      nop
     19  268f					      REPEND
    105  268f
    106  268f		       b9 5a fc 	      lda	bmp_96x2_1_07,y
    107  2692		       85 1c		      sta	GRP1
    108  2694
    109  2694		       b9 dc fb 	      lda	bmp_96x2_1_03,y	;5
    110  2697		       85 1b		      sta	GRP0	;3 =  8
    111  2699		       b9 1e fc 	      lda	bmp_96x2_1_05,y	;5
    112  269c		       85 1b		      sta	GRP0	;3 =  8
    113  269e
      0  269e					      sleep	2
      1  269e				   .CYCLES    SET	2
      2  269e
      3  269e				  -	      IF	.CYCLES < 2
      4  269e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269e				  -	      ERR
      6  269e					      ENDIF
      7  269e
      8  269e				  -	      IF	.CYCLES & 1
      9  269e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  269e				  -	      nop	0
     11  269e				  -	      ELSE
     12  269e				  -	      bit	VSYNC
     13  269e				  -	      ENDIF
     14  269e				  -.CYCLES    SET	.CYCLES - 3
     15  269e					      ENDIF
     16  269e
     17  269e					      REPEAT	.CYCLES / 2
     18  269e		       ea		      nop
     19  269f					      REPEND
    115  269f
    116  269f		       b9 96 fc 	      lda	bmp_96x2_1_09,y	;5
    117  26a2		       85 1c		      sta	GRP1	;3 =  8
    118  26a4		       b9 d2 fc 	      lda	bmp_96x2_1_11,y	;5
    119  26a7		       85 1c		      sta	GRP1	;3 =  8
    120  26a9
      0  26a9					      sleep	2
      1  26a9				   .CYCLES    SET	2
      2  26a9
      3  26a9				  -	      IF	.CYCLES < 2
      4  26a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26a9				  -	      ERR
      6  26a9					      ENDIF
      7  26a9
      8  26a9				  -	      IF	.CYCLES & 1
      9  26a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26a9				  -	      nop	0
     11  26a9				  -	      ELSE
     12  26a9				  -	      bit	VSYNC
     13  26a9				  -	      ENDIF
     14  26a9				  -.CYCLES    SET	.CYCLES - 3
     15  26a9					      ENDIF
     16  26a9
     17  26a9					      REPEAT	.CYCLES / 2
     18  26a9		       ea		      nop
     19  26aa					      REPEND
    122  26aa		       86 07		      stx	COLUP1
    123  26ac		       86 06		      stx	COLUP0
    124  26ae
    125  26ae
    126  26ae		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE 
      0  26b0					      sleep	2
      1  26b0				   .CYCLES    SET	2
      2  26b0
      3  26b0				  -	      IF	.CYCLES < 2
      4  26b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26b0				  -	      ERR
      6  26b0					      ENDIF
      7  26b0
      8  26b0				  -	      IF	.CYCLES & 1
      9  26b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26b0				  -	      nop	0
     11  26b0				  -	      ELSE
     12  26b0				  -	      bit	VSYNC
     13  26b0				  -	      ENDIF
     14  26b0				  -.CYCLES    SET	.CYCLES - 3
     15  26b0					      ENDIF
     16  26b0
     17  26b0					      REPEAT	.CYCLES / 2
     18  26b0		       ea		      nop
     19  26b1					      REPEND
    128  26b1		       88		      dey
    129  26b2
    130  26b2		       c4 cb		      cpy	temp1	;3
    131  26b4		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    132  26b6
    133  26b6				   pf96x2_1_0codeend
    134  26b6							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    135  26b6
    136  26b6		       a9 00		      lda	#0
    137  26b8		       85 1b		      sta	GRP0
    138  26ba		       85 1c		      sta	GRP1
    139  26bc		       4c 6e f7 	      jmp	pfdone_96x2_1
    140  26bf
    141  26bf
    142  26bf				   pf96x2_1_frame1
    143  26bf
    144  26bf							;postion P0 and P1
    145  26bf		       85 02		      sta	WSYNC
    146  26c1		       a9 20		      lda	#%00100000
    147  26c3		       85 20		      sta	HMP0
    148  26c5		       a9 00		      lda	#0
    149  26c7		       a9 f0		      lda	#%11110000
    150  26c9		       85 21		      sta	HMP1
    151  26cb		       85 02		      sta	WSYNC
      0  26cd					      sleep	32
      1  26cd				   .CYCLES    SET	32
      2  26cd
      3  26cd				  -	      IF	.CYCLES < 2
      4  26cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26cd				  -	      ERR
      6  26cd					      ENDIF
      7  26cd
      8  26cd				  -	      IF	.CYCLES & 1
      9  26cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26cd				  -	      nop	0
     11  26cd				  -	      ELSE
     12  26cd				  -	      bit	VSYNC
     13  26cd				  -	      ENDIF
     14  26cd				  -.CYCLES    SET	.CYCLES - 3
     15  26cd					      ENDIF
     16  26cd
     17  26cd					      REPEAT	.CYCLES / 2
     18  26cd		       ea		      nop
     17  26cd					      REPEND
     18  26ce		       ea		      nop
     17  26ce					      REPEND
     18  26cf		       ea		      nop
     17  26cf					      REPEND
     18  26d0		       ea		      nop
     17  26d0					      REPEND
     18  26d1		       ea		      nop
     17  26d1					      REPEND
     18  26d2		       ea		      nop
     17  26d2					      REPEND
     18  26d3		       ea		      nop
     17  26d3					      REPEND
     18  26d4		       ea		      nop
     17  26d4					      REPEND
     18  26d5		       ea		      nop
     17  26d5					      REPEND
     18  26d6		       ea		      nop
     17  26d6					      REPEND
     18  26d7		       ea		      nop
     17  26d7					      REPEND
     18  26d8		       ea		      nop
     17  26d8					      REPEND
     18  26d9		       ea		      nop
     17  26d9					      REPEND
     18  26da		       ea		      nop
     17  26da					      REPEND
     18  26db		       ea		      nop
     17  26db					      REPEND
     18  26dc		       ea		      nop
     19  26dd					      REPEND
    153  26dd		       85 10		      sta	RESP0
      0  26df					      sleep	12
      1  26df				   .CYCLES    SET	12
      2  26df
      3  26df				  -	      IF	.CYCLES < 2
      4  26df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26df				  -	      ERR
      6  26df					      ENDIF
      7  26df
      8  26df				  -	      IF	.CYCLES & 1
      9  26df				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26df				  -	      nop	0
     11  26df				  -	      ELSE
     12  26df				  -	      bit	VSYNC
     13  26df				  -	      ENDIF
     14  26df				  -.CYCLES    SET	.CYCLES - 3
     15  26df					      ENDIF
     16  26df
     17  26df					      REPEAT	.CYCLES / 2
     18  26df		       ea		      nop
     17  26df					      REPEND
     18  26e0		       ea		      nop
     17  26e0					      REPEND
     18  26e1		       ea		      nop
     17  26e1					      REPEND
     18  26e2		       ea		      nop
     17  26e2					      REPEND
     18  26e3		       ea		      nop
     17  26e3					      REPEND
     18  26e4		       ea		      nop
     19  26e5					      REPEND
    155  26e5		       85 11		      sta	RESP1
    156  26e7		       85 02		      sta	WSYNC
    157  26e9		       85 2a		      sta	HMOVE
    158  26eb
    159  26eb		       85 02		      sta	WSYNC
    160  26ed		       85 2b		      sta	HMCLR
    161  26ef
    162  26ef
    163  26ef
    164  26ef		       85 02		      sta	WSYNC
      0  26f1					      sleep	3
      1  26f1				   .CYCLES    SET	3
      2  26f1
      3  26f1				  -	      IF	.CYCLES < 2
      4  26f1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26f1				  -	      ERR
      6  26f1					      ENDIF
      7  26f1
      8  26f1					      IF	.CYCLES & 1
      9  26f1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26f1		       04 00		      nop	0
     11  26f3				  -	      ELSE
     12  26f3				  -	      bit	VSYNC
     13  26f3					      ENDIF
     14  26f3				   .CYCLES    SET	.CYCLES - 3
     15  26f3					      ENDIF
     16  26f3
     17  26f3				  -	      REPEAT	.CYCLES / 2
     18  26f3				  -	      nop
     19  26f3					      REPEND
    166  26f3		       4c 00 f7 	      jmp	pfline_96x2_1_frame1
    167  26f6
    168  26f6							;align so our branch doesn't unexpectedly cross a page...
    169  26f6					      if	>. != >[.+$70]
    170  2700		       00 00 00 00*	      align	256
    171  2700					      endif
    172  2700
    173  2700				   pfline_96x2_1_frame1
    174  2700
    175  2700		       85 2a		      sta	HMOVE
    176  2702
    177  2702		       b9 5a fc 	      lda	bmp_96x2_1_07,y	;4
    178  2705		       85 1c		      sta	GRP1	;3
    179  2707
    180  2707		       a9 00		      lda	#$0	;2
    181  2709		       85 20		      sta	HMP0	;3
    182  270b		       85 21		      sta	HMP1	;3
    183  270d
    184  270d		       b9 a0 fb 	      lda	bmp_96x2_1_01,y
    185  2710		       8d 1b 00 	      sta.w	GRP0
    186  2713		       b9 dc fb 	      lda	bmp_96x2_1_03,y
    187  2716		       85 1b		      sta	GRP0
    188  2718		       b9 1e fc 	      lda	bmp_96x2_1_05,y
    189  271b		       85 1b		      sta	GRP0
    190  271d
      0  271d					      sleep	2
      1  271d				   .CYCLES    SET	2
      2  271d
      3  271d				  -	      IF	.CYCLES < 2
      4  271d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  271d				  -	      ERR
      6  271d					      ENDIF
      7  271d
      8  271d				  -	      IF	.CYCLES & 1
      9  271d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  271d				  -	      nop	0
     11  271d				  -	      ELSE
     12  271d				  -	      bit	VSYNC
     13  271d				  -	      ENDIF
     14  271d				  -.CYCLES    SET	.CYCLES - 3
     15  271d					      ENDIF
     16  271d
     17  271d					      REPEAT	.CYCLES / 2
     18  271d		       ea		      nop
     19  271e					      REPEND
    192  271e
    193  271e		       b9 96 fc 	      lda	bmp_96x2_1_09,y
    194  2721		       85 1c		      sta	GRP1
    195  2723		       b9 d2 fc 	      lda	bmp_96x2_1_11,y
    196  2726		       85 1c		      sta	GRP1
    197  2728
    198  2728		       b9 82 fb 	      lda	bmp_96x2_1_00,y
    199  272b		       85 1b		      sta	GRP0
    200  272d
    201  272d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2730
    203  2730							;sta WSYNC	;=0 -----------------------------------------
    204  2730
    205  2730		       b9 3c fc 	      lda	bmp_96x2_1_06,y
    206  2733		       85 1c		      sta	GRP1
    207  2735
      0  2735					      sleep	8
      1  2735				   .CYCLES    SET	8
      2  2735
      3  2735				  -	      IF	.CYCLES < 2
      4  2735				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2735				  -	      ERR
      6  2735					      ENDIF
      7  2735
      8  2735				  -	      IF	.CYCLES & 1
      9  2735				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2735				  -	      nop	0
     11  2735				  -	      ELSE
     12  2735				  -	      bit	VSYNC
     13  2735				  -	      ENDIF
     14  2735				  -.CYCLES    SET	.CYCLES - 3
     15  2735					      ENDIF
     16  2735
     17  2735					      REPEAT	.CYCLES / 2
     18  2735		       ea		      nop
     17  2735					      REPEND
     18  2736		       ea		      nop
     17  2736					      REPEND
     18  2737		       ea		      nop
     17  2737					      REPEND
     18  2738		       ea		      nop
     19  2739					      REPEND
    209  2739
    210  2739		       b9 63 fb 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    211  273c		       aa		      tax		;2
    212  273d
      0  273d					      sleep	3
      1  273d				   .CYCLES    SET	3
      2  273d
      3  273d				  -	      IF	.CYCLES < 2
      4  273d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  273d				  -	      ERR
      6  273d					      ENDIF
      7  273d
      8  273d					      IF	.CYCLES & 1
      9  273d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  273d		       04 00		      nop	0
     11  273f				  -	      ELSE
     12  273f				  -	      bit	VSYNC
     13  273f					      ENDIF
     14  273f				   .CYCLES    SET	.CYCLES - 3
     15  273f					      ENDIF
     16  273f
     17  273f				  -	      REPEAT	.CYCLES / 2
     18  273f				  -	      nop
     19  273f					      REPEND
    214  273f
    215  273f		       a9 80		      lda	#$80	;2
    216  2741		       85 20		      sta	HMP0	;3
    217  2743		       85 21		      sta	HMP1	;3
    218  2745
    219  2745
    220  2745		       b9 be fb 	      lda	bmp_96x2_1_02,y	;5
    221  2748		       85 1b		      sta	GRP0	;3 =  8
    222  274a
    223  274a		       b9 00 fc 	      lda	bmp_96x2_1_04,y	;5
    224  274d		       85 1b		      sta	GRP0	;3 =  8
    225  274f
      0  274f					      sleep	2
      1  274f				   .CYCLES    SET	2
      2  274f
      3  274f				  -	      IF	.CYCLES < 2
      4  274f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  274f				  -	      ERR
      6  274f					      ENDIF
      7  274f
      8  274f				  -	      IF	.CYCLES & 1
      9  274f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  274f				  -	      nop	0
     11  274f				  -	      ELSE
     12  274f				  -	      bit	VSYNC
     13  274f				  -	      ENDIF
     14  274f				  -.CYCLES    SET	.CYCLES - 3
     15  274f					      ENDIF
     16  274f
     17  274f					      REPEAT	.CYCLES / 2
     18  274f		       ea		      nop
     19  2750					      REPEND
    227  2750
    228  2750		       b9 78 fc 	      lda	bmp_96x2_1_08,y	;5
    229  2753		       85 1c		      sta	GRP1	;3 =  8
    230  2755
    231  2755		       b9 b4 fc 	      lda	bmp_96x2_1_10,y	;5
    232  2758		       85 1c		      sta	GRP1	;3 =  8
    233  275a
      0  275a					      sleep	4
      1  275a				   .CYCLES    SET	4
      2  275a
      3  275a				  -	      IF	.CYCLES < 2
      4  275a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  275a				  -	      ERR
      6  275a					      ENDIF
      7  275a
      8  275a				  -	      IF	.CYCLES & 1
      9  275a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  275a				  -	      nop	0
     11  275a				  -	      ELSE
     12  275a				  -	      bit	VSYNC
     13  275a				  -	      ENDIF
     14  275a				  -.CYCLES    SET	.CYCLES - 3
     15  275a					      ENDIF
     16  275a
     17  275a					      REPEAT	.CYCLES / 2
     18  275a		       ea		      nop
     17  275a					      REPEND
     18  275b		       ea		      nop
     19  275c					      REPEND
    235  275c
    236  275c		       88		      dey
    237  275d
    238  275d		       8a		      txa
    239  275e				  -	      ifconst	bmp_96x2_1_fade
    240  275e				  -	      and	bmp_96x2_1_fade
    241  275e					      else
      0  275e					      sleep	3
      1  275e				   .CYCLES    SET	3
      2  275e
      3  275e				  -	      IF	.CYCLES < 2
      4  275e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  275e				  -	      ERR
      6  275e					      ENDIF
      7  275e
      8  275e					      IF	.CYCLES & 1
      9  275e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  275e		       04 00		      nop	0
     11  2760				  -	      ELSE
     12  2760				  -	      bit	VSYNC
     13  2760					      ENDIF
     14  2760				   .CYCLES    SET	.CYCLES - 3
     15  2760					      ENDIF
     16  2760
     17  2760				  -	      REPEAT	.CYCLES / 2
     18  2760				  -	      nop
     19  2760					      REPEND
    243  2760					      endif
    244  2760		       85 07		      sta	COLUP1	;3
    245  2762		       85 06		      sta	COLUP0	;3
    246  2764
    247  2764		       c4 cb		      cpy	temp1	;2
    248  2766		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    249  2768
    250  2768				   pf96x2_1_1codeend
    251  2768							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    252  2768
    253  2768		       a9 00		      lda	#0
    254  276a		       85 1b		      sta	GRP0
    255  276c		       85 1c		      sta	GRP1
    256  276e
    257  276e				   pfdone_96x2_1
    258  276e		       85 02		      sta	WSYNC	; debug
    259  2770
    260  2770		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    100  2771					      endif		;mk_96x2_1_on
    101  2771
    102  2771				  -	      ifconst	mk_96x2_2_on
    103  2771				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2771					      endif		;mk_96x2_2_on
    105  2771
    106  2771				  -	      ifconst	mk_96x2_3_on
    107  2771				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2771					      endif		;mk_96x2_3_on
    109  2771
    110  2771					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2771					      include	"titlescreen/asm/score_kernel.asm"
      1  2771							; The batari Basic score kernel
      2  2771							; This minikernel is not under the same license as the rest of the 
      3  2771							; titlescreen code. Refer to the bB license before you use this in
      4  2771							; a non-bB program.
      5  2771
      6  2771				   draw_score_display
      7  2771
      8  2771		       a7 d4		      lax	score+2
      9  2773		       20 48 f8 	      jsr	miniscorepointerset
     10  2776		       84 ca		      sty	scorepointers+5
     11  2778		       86 c7		      stx	scorepointers+2
     12  277a		       a7 d3		      lax	score+1
     13  277c		       20 48 f8 	      jsr	miniscorepointerset
     14  277f		       84 c9		      sty	scorepointers+4
     15  2781		       86 c6		      stx	scorepointers+1
     16  2783		       a7 d2		      lax	score
     17  2785		       20 48 f8 	      jsr	miniscorepointerset
     18  2788		       84 c8		      sty	scorepointers+3
     19  278a		       86 c5		      stx	scorepointers
     20  278c
     21  278c		       a5 c6		      lda	scorepointers+1
     22  278e		       85 cb		      sta	temp1
     23  2790
     24  2790		       a5 c8		      lda	scorepointers+3
     25  2792		       85 cd		      sta	temp3
     26  2794
     27  2794
     28  2794		       85 2b		      sta	HMCLR
     29  2796		       ba		      tsx
     30  2797		       86 f6		      stx	stack1
     31  2799							;ldx #$10
     32  2799		       a2 20		      ldx	#$20
     33  279b		       86 20		      stx	HMP0
     34  279d
     35  279d		       a2 00		      ldx	#0
     36  279f		       85 02		      sta	WSYNC
     37  27a1		       86 1b		      STx	GRP0
     38  27a3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  27a5
     40  27a5		       a5 ca		      lda	scorepointers+5
     41  27a7		       95 cf		      sta	temp5,x
     42  27a9		       a9 fd		      lda	#>miniscoretable
     43  27ab		       85 c6		      sta	scorepointers+1
     44  27ad		       85 c8		      sta	scorepointers+3
     45  27af		       95 ca		      sta	scorepointers+5,x
     46  27b1		       95 cc		      sta	temp2,x
     47  27b3		       95 ce		      sta	temp4,x
     48  27b5		       95 d0		      sta	temp6,x
     49  27b7
     50  27b7
     51  27b7		       a0 07		      LDY	#7
     52  27b9		       85 10		      STA	RESP0
     53  27bb		       85 11		      STA	RESP1
     54  27bd
     55  27bd
     56  27bd		       a9 03		      LDA	#$03
     57  27bf		       85 04		      STA	NUSIZ0
     58  27c1		       95 05		      STA	NUSIZ1,x
     59  27c3		       85 25		      STA	VDELP0
     60  27c5		       85 26		      STA	VDELP1
     61  27c7							;LDA #$20
     62  27c7		       a9 30		      LDA	#$30
     63  27c9		       85 21		      STA	HMP1
     64  27cb		       a5 d5		      LDA	scorecolor
     65  27cd		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  27cf				  -	      ifconst	score_kernel_fade
     67  27cf				  -	      and	score_kernel_fade
     68  27cf					      endif
     69  27cf
     70  27cf		       85 06		      STA	COLUP0
     71  27d1		       85 07		      STA	COLUP1
     72  27d3				  -	      ifconst	scorefade
     73  27d3				  -	      STA	stack2	; scorefade
     74  27d3					      endif
     75  27d3		       b1 c5		      lda	(scorepointers),y
     76  27d5		       85 1b		      sta	GRP0
     77  27d7		       b1 cd		      lda	(scorepointers+8),y
     78  27d9		       85 02		      sta	WSYNC
      0  27db					      sleep	2
      1  27db				   .CYCLES    SET	2
      2  27db
      3  27db				  -	      IF	.CYCLES < 2
      4  27db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27db				  -	      ERR
      6  27db					      ENDIF
      7  27db
      8  27db				  -	      IF	.CYCLES & 1
      9  27db				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  27db				  -	      nop	0
     11  27db				  -	      ELSE
     12  27db				  -	      bit	VSYNC
     13  27db				  -	      ENDIF
     14  27db				  -.CYCLES    SET	.CYCLES - 3
     15  27db					      ENDIF
     16  27db
     17  27db					      REPEAT	.CYCLES / 2
     18  27db		       ea		      nop
     19  27dc					      REPEND
     80  27dc		       4c 0b f8 	      jmp	beginscoreloop
     81  27df
     82  27df					      if	((<*)>$d4)
     83  2800		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  2800					      endif
     85  2800
     86  2800				   scoreloop2
     87  2800				  -	      ifconst	scorefade
     88  2800				  -	      lda	stack2
     89  2800				  -	      sta	COLUP0
     90  2800				  -	      sta	COLUP1
     91  2800					      else
      0  2800					      sleep	9
      1  2800				   .CYCLES    SET	9
      2  2800
      3  2800				  -	      IF	.CYCLES < 2
      4  2800				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2800				  -	      ERR
      6  2800					      ENDIF
      7  2800
      8  2800					      IF	.CYCLES & 1
      9  2800					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2800		       04 00		      nop	0
     11  2802				  -	      ELSE
     12  2802				  -	      bit	VSYNC
     13  2802					      ENDIF
     14  2802				   .CYCLES    SET	.CYCLES - 3
     15  2802					      ENDIF
     16  2802
     17  2802					      REPEAT	.CYCLES / 2
     18  2802		       ea		      nop
     17  2802					      REPEND
     18  2803		       ea		      nop
     17  2803					      REPEND
     18  2804		       ea		      nop
     19  2805					      REPEND
     93  2805					      endif
     94  2805		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  2807		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  2809		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  280b							; cycle 0
     98  280b				   beginscoreloop
     99  280b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  280d		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  280f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  2811		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  2813		       9a		      txs
    104  2814		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  2816
    106  2816				  -	      ifconst	scorefade
    107  2816				  -	      dec	stack2
    108  2816					      else
      0  2816					      sleep	5
      1  2816				   .CYCLES    SET	5
      2  2816
      3  2816				  -	      IF	.CYCLES < 2
      4  2816				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2816				  -	      ERR
      6  2816					      ENDIF
      7  2816
      8  2816					      IF	.CYCLES & 1
      9  2816					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2816		       04 00		      nop	0
     11  2818				  -	      ELSE
     12  2818				  -	      bit	VSYNC
     13  2818					      ENDIF
     14  2818				   .CYCLES    SET	.CYCLES - 3
     15  2818					      ENDIF
     16  2818
     17  2818					      REPEAT	.CYCLES / 2
     18  2818		       ea		      nop
     19  2819					      REPEND
    110  2819					      endif
      0  2819					      sleep	2
      1  2819				   .CYCLES    SET	2
      2  2819
      3  2819				  -	      IF	.CYCLES < 2
      4  2819				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2819				  -	      ERR
      6  2819					      ENDIF
      7  2819
      8  2819				  -	      IF	.CYCLES & 1
      9  2819				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2819				  -	      nop	0
     11  2819				  -	      ELSE
     12  2819				  -	      bit	VSYNC
     13  2819				  -	      ENDIF
     14  2819				  -.CYCLES    SET	.CYCLES - 3
     15  2819					      ENDIF
     16  2819
     17  2819					      REPEAT	.CYCLES / 2
     18  2819		       ea		      nop
     19  281a					      REPEND
    112  281a
    113  281a		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  281c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  281e		       ba		      tsx
    116  281f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  2821		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  2823
    119  2823		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  2825		       88		      dey
    121  2826		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  2828
    123  2828
    124  2828		       a6 f6		      ldx	stack1
    125  282a		       9a		      txs
    126  282b		       a4 cb		      ldy	temp1
    127  282d		       84 c6		      sty	scorepointers+1
    128  282f
    129  282f		       a9 00		      LDA	#0
    130  2831		       85 0e		      sta	PF1
    131  2833		       85 1b		      STA	GRP0
    132  2835		       85 1c		      STA	GRP1
    133  2837		       85 25		      STA	VDELP0
    134  2839		       85 26		      STA	VDELP1
    135  283b		       85 04		      STA	NUSIZ0
    136  283d		       85 05		      STA	NUSIZ1
    137  283f
    138  283f		       a4 cd		      ldy	temp3
    139  2841		       84 c8		      sty	scorepointers+3
    140  2843
    141  2843		       a4 cf		      ldy	temp5
    142  2845		       84 ca		      sty	scorepointers+5
    143  2847		       60		      rts
    144  2848
    145  2848				   miniscorepointerset
    146  2848		       29 0f		      and	#$0F
    147  284a		       0a		      asl
    148  284b		       0a		      asl
    149  284c		       0a		      asl
    150  284d		       69 00		      adc	#<miniscoretable
    151  284f		       a8		      tay
    152  2850		       8a		      txa
    153  2851		       29 f0		      and	#$F0
    154  2853		       4a		      lsr
    155  2854		       69 00		      adc	#<miniscoretable
    156  2856		       aa		      tax
    157  2857		       60		      rts
    158  2858
------- FILE titlescreen/asm/titlescreen.asm
    112  2858					      endif		;mk_score_on
    113  2858
    114  2858				  -	      ifconst	mk_gameselect_on
    115  2858				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2858					      endif		;mk_gameselect_on
    117  2858
    118  2858				   PFWAIT
    119  2858		       ad 84 02 	      lda	INTIM
    120  285b		       d0 fb		      bne	PFWAIT
    121  285d
    122  285d				   OVERSCAN
    123  285d							;lda #35+128 
    124  285d
    125  285d					      ifnconst	overscan_time
    126  285d		       a9 a3		      lda	#35+128
    127  285f				  -	      else
    128  285f				  -	      lda	#overscan_time+128-3-1
    129  285f					      endif
    130  285f
    131  285f
    132  285f		       8d 96 02 	      sta	TIM64T
    133  2862		       a9 c2		      lda	#%11000010
    134  2864		       85 02		      sta	WSYNC
    135  2866		       85 01		      sta	VBLANK
      0  2868					      RETURN
      1  2868				  -	      ifnconst	bankswitch
      2  2868				  -	      rts
      3  2868					      else
      4  2868		       4c dd ff 	      jmp	BS_return
      5  286b					      endif
    137  286b
    138  286b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  286b					      include	"titlescreen/48x1_1_image.asm"
      1  286b
      2  286b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  286b							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  286b							; *** color.
      5  286b
      6  286b							;*** The height of the displayed data...
      7  286b		       00 5a	   bmp_48x1_1_window =	90
      8  286b
      9  286b							;*** The height of the bitmap data. This can be larger than
     10  286b							;*** the displayed data height, if you are scrolling or animating
     11  286b							;*** the data...
     12  286b		       00 62	   bmp_48x1_1_height =	98
     13  286b
     14  286b				  -	      ifnconst	bmp_48x1_1_color
     15  286b				  -bmp_48x1_1_color
     16  286b					      endif
     17  286b							; *** this is the bitmap color. If you want to change it in a 
     18  286b							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  286b		       42		      .byte.b	$42
     20  286c
     21  286c
     22  286c				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  286c				  -	      align	256
     24  286c					      endif
     25  286c
     26  286c				   bmp_48x1_1_00
     27  286c
     28  286c		       00		      BYTE.b	%00000000
     29  286d		       00		      BYTE.b	%00000000
     30  286e		       00		      BYTE.b	%00000000
     31  286f		       00		      BYTE.b	%00000000
     32  2870		       0f		      BYTE.b	%00001111
     33  2871		       38		      BYTE.b	%00111000
     34  2872		       60		      BYTE.b	%01100000
     35  2873		       87		      BYTE.b	%10000111
     36  2874		       1f		      BYTE.b	%00011111
     37  2875		       7f		      BYTE.b	%01111111
     38  2876		       fe		      BYTE.b	%11111110
     39  2877		       ff		      BYTE.b	%11111111
     40  2878		       ff		      BYTE.b	%11111111
     41  2879		       ff		      BYTE.b	%11111111
     42  287a		       ff		      BYTE.b	%11111111
     43  287b		       ff		      BYTE.b	%11111111
     44  287c		       ff		      BYTE.b	%11111111
     45  287d		       ff		      BYTE.b	%11111111
     46  287e		       ff		      BYTE.b	%11111111
     47  287f		       ff		      BYTE.b	%11111111
     48  2880		       ff		      BYTE.b	%11111111
     49  2881		       ff		      BYTE.b	%11111111
     50  2882		       ff		      BYTE.b	%11111111
     51  2883		       ff		      BYTE.b	%11111111
     52  2884		       ff		      BYTE.b	%11111111
     53  2885		       fe		      BYTE.b	%11111110
     54  2886		       7c		      BYTE.b	%01111100
     55  2887		       00		      BYTE.b	%00000000
     56  2888		       00		      BYTE.b	%00000000
     57  2889		       80		      BYTE.b	%10000000
     58  288a		       00		      BYTE.b	%00000000
     59  288b		       00		      BYTE.b	%00000000
     60  288c		       00		      BYTE.b	%00000000
     61  288d		       00		      BYTE.b	%00000000
     62  288e		       10		      BYTE.b	%00010000
     63  288f		       80		      BYTE.b	%10000000
     64  2890		       c0		      BYTE.b	%11000000
     65  2891		       e4		      BYTE.b	%11100100
     66  2892		       e0		      BYTE.b	%11100000
     67  2893		       ff		      BYTE.b	%11111111
     68  2894		       f1		      BYTE.b	%11110001
     69  2895		       f1		      BYTE.b	%11110001
     70  2896		       f1		      BYTE.b	%11110001
     71  2897		       f1		      BYTE.b	%11110001
     72  2898		       f1		      BYTE.b	%11110001
     73  2899		       f8		      BYTE.b	%11111000
     74  289a		       f8		      BYTE.b	%11111000
     75  289b		       fe		      BYTE.b	%11111110
     76  289c		       f3		      BYTE.b	%11110011
     77  289d		       f3		      BYTE.b	%11110011
     78  289e		       f3		      BYTE.b	%11110011
     79  289f		       f3		      BYTE.b	%11110011
     80  28a0		       f2		      BYTE.b	%11110010
     81  28a1		       f8		      BYTE.b	%11111000
     82  28a2		       f8		      BYTE.b	%11111000
     83  28a3		       fc		      BYTE.b	%11111100
     84  28a4		       9e		      BYTE.b	%10011110
     85  28a5		       0e		      BYTE.b	%00001110
     86  28a6		       8e		      BYTE.b	%10001110
     87  28a7		       84		      BYTE.b	%10000100
     88  28a8		       80		      BYTE.b	%10000000
     89  28a9		       c0		      BYTE.b	%11000000
     90  28aa		       c0		      BYTE.b	%11000000
     91  28ab		       81		      BYTE.b	%10000001
     92  28ac		       80		      BYTE.b	%10000000
     93  28ad		       00		      BYTE.b	%00000000
     94  28ae		       00		      BYTE.b	%00000000
     95  28af		       00		      BYTE.b	%00000000
     96  28b0		       00		      BYTE.b	%00000000
     97  28b1		       00		      BYTE.b	%00000000
     98  28b2		       00		      BYTE.b	%00000000
     99  28b3		       03		      BYTE.b	%00000011
    100  28b4		       07		      BYTE.b	%00000111
    101  28b5		       0f		      BYTE.b	%00001111
    102  28b6		       c3		      BYTE.b	%11000011
    103  28b7		       c3		      BYTE.b	%11000011
    104  28b8		       83		      BYTE.b	%10000011
    105  28b9		       0f		      BYTE.b	%00001111
    106  28ba		       2f		      BYTE.b	%00101111
    107  28bb		       2f		      BYTE.b	%00101111
    108  28bc		       1f		      BYTE.b	%00011111
    109  28bd		       33		      BYTE.b	%00110011
    110  28be		       63		      BYTE.b	%01100011
    111  28bf		       8f		      BYTE.b	%10001111
    112  28c0		       0f		      BYTE.b	%00001111
    113  28c1		       0f		      BYTE.b	%00001111
    114  28c2		       06		      BYTE.b	%00000110
    115  28c3		       0e		      BYTE.b	%00001110
    116  28c4		       0e		      BYTE.b	%00001110
    117  28c5		       06		      BYTE.b	%00000110
    118  28c6		       02		      BYTE.b	%00000010
    119  28c7		       00		      BYTE.b	%00000000
    120  28c8		       00		      BYTE.b	%00000000
    121  28c9		       00		      BYTE.b	%00000000
    122  28ca		       00		      BYTE.b	%00000000
    123  28cb		       00		      BYTE.b	%00000000
    124  28cc		       00		      BYTE.b	%00000000
    125  28cd		       00		      BYTE.b	%00000000
    126  28ce		       00		      BYTE.b	%00000000
    127  28cf
    128  28cf					      if	>. != >[.+(bmp_48x1_1_height)]
    129  2900		       00 00 00 00*	      align	256
    130  2900					      endif
    131  2900
    132  2900				   bmp_48x1_1_01
    133  2900
    134  2900		       00		      BYTE.b	%00000000
    135  2901		       00		      BYTE.b	%00000000
    136  2902		       00		      BYTE.b	%00000000
    137  2903		       00		      BYTE.b	%00000000
    138  2904		       80		      BYTE.b	%10000000
    139  2905		       60		      BYTE.b	%01100000
    140  2906		       10		      BYTE.b	%00010000
    141  2907		       08		      BYTE.b	%00001000
    142  2908		       c4		      BYTE.b	%11000100
    143  2909		       ec		      BYTE.b	%11101100
    144  290a		       1a		      BYTE.b	%00011010
    145  290b		       92		      BYTE.b	%10010010
    146  290c		       d4		      BYTE.b	%11010100
    147  290d		       dc		      BYTE.b	%11011100
    148  290e		       fc		      BYTE.b	%11111100
    149  290f		       f0		      BYTE.b	%11110000
    150  2910		       f3		      BYTE.b	%11110011
    151  2911		       f7		      BYTE.b	%11110111
    152  2912		       ff		      BYTE.b	%11111111
    153  2913		       ff		      BYTE.b	%11111111
    154  2914		       ff		      BYTE.b	%11111111
    155  2915		       ff		      BYTE.b	%11111111
    156  2916		       8f		      BYTE.b	%10001111
    157  2917		       8f		      BYTE.b	%10001111
    158  2918		       07		      BYTE.b	%00000111
    159  2919		       04		      BYTE.b	%00000100
    160  291a		       03		      BYTE.b	%00000011
    161  291b		       0f		      BYTE.b	%00001111
    162  291c		       0f		      BYTE.b	%00001111
    163  291d		       0f		      BYTE.b	%00001111
    164  291e		       07		      BYTE.b	%00000111
    165  291f		       07		      BYTE.b	%00000111
    166  2920		       07		      BYTE.b	%00000111
    167  2921		       07		      BYTE.b	%00000111
    168  2922		       07		      BYTE.b	%00000111
    169  2923		       07		      BYTE.b	%00000111
    170  2924		       03		      BYTE.b	%00000011
    171  2925		       13		      BYTE.b	%00010011
    172  2926		       1b		      BYTE.b	%00011011
    173  2927		       fa		      BYTE.b	%11111010
    174  2928		       d2		      BYTE.b	%11010010
    175  2929		       e2		      BYTE.b	%11100010
    176  292a		       e3		      BYTE.b	%11100011
    177  292b		       d7		      BYTE.b	%11010111
    178  292c		       95		      BYTE.b	%10010101
    179  292d		       b3		      BYTE.b	%10110011
    180  292e		       b5		      BYTE.b	%10110101
    181  292f		       78		      BYTE.b	%01111000
    182  2930		       7c		      BYTE.b	%01111100
    183  2931		       7e		      BYTE.b	%01111110
    184  2932		       0e		      BYTE.b	%00001110
    185  2933		       1c		      BYTE.b	%00011100
    186  2934		       bc		      BYTE.b	%10111100
    187  2935		       ec		      BYTE.b	%11101100
    188  2936		       78		      BYTE.b	%01111000
    189  2937		       5c		      BYTE.b	%01011100
    190  2938		       9f		      BYTE.b	%10011111
    191  2939		       3e		      BYTE.b	%00111110
    192  293a		       3c		      BYTE.b	%00111100
    193  293b		       3e		      BYTE.b	%00111110
    194  293c		       5e		      BYTE.b	%01011110
    195  293d		       5f		      BYTE.b	%01011111
    196  293e		       1f		      BYTE.b	%00011111
    197  293f		       1e		      BYTE.b	%00011110
    198  2940		       1f		      BYTE.b	%00011111
    199  2941		       7f		      BYTE.b	%01111111
    200  2942		       7f		      BYTE.b	%01111111
    201  2943		       3f		      BYTE.b	%00111111
    202  2944		       0f		      BYTE.b	%00001111
    203  2945		       01		      BYTE.b	%00000001
    204  2946		       01		      BYTE.b	%00000001
    205  2947		       f1		      BYTE.b	%11110001
    206  2948		       f8		      BYTE.b	%11111000
    207  2949		       fe		      BYTE.b	%11111110
    208  294a		       ff		      BYTE.b	%11111111
    209  294b		       ff		      BYTE.b	%11111111
    210  294c		       ff		      BYTE.b	%11111111
    211  294d		       ff		      BYTE.b	%11111111
    212  294e		       ff		      BYTE.b	%11111111
    213  294f		       ff		      BYTE.b	%11111111
    214  2950		       ff		      BYTE.b	%11111111
    215  2951		       bf		      BYTE.b	%10111111
    216  2952		       9f		      BYTE.b	%10011111
    217  2953		       07		      BYTE.b	%00000111
    218  2954		       03		      BYTE.b	%00000011
    219  2955		       03		      BYTE.b	%00000011
    220  2956		       81		      BYTE.b	%10000001
    221  2957		       01		      BYTE.b	%00000001
    222  2958		       00		      BYTE.b	%00000000
    223  2959		       00		      BYTE.b	%00000000
    224  295a		       00		      BYTE.b	%00000000
    225  295b		       00		      BYTE.b	%00000000
    226  295c		       40		      BYTE.b	%01000000
    227  295d		       20		      BYTE.b	%00100000
    228  295e		       0f		      BYTE.b	%00001111
    229  295f		       00		      BYTE.b	%00000000
    230  2960		       00		      BYTE.b	%00000000
    231  2961		       00		      BYTE.b	%00000000
    232  2962		       40		      BYTE.b	%01000000
    233  2963
    234  2963				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    235  2963				  -	      align	256
    236  2963					      endif
    237  2963
    238  2963				   bmp_48x1_1_02
    239  2963
    240  2963		       00		      BYTE.b	%00000000
    241  2964		       00		      BYTE.b	%00000000
    242  2965		       00		      BYTE.b	%00000000
    243  2966		       00		      BYTE.b	%00000000
    244  2967		       00		      BYTE.b	%00000000
    245  2968		       00		      BYTE.b	%00000000
    246  2969		       00		      BYTE.b	%00000000
    247  296a		       00		      BYTE.b	%00000000
    248  296b		       00		      BYTE.b	%00000000
    249  296c		       00		      BYTE.b	%00000000
    250  296d		       00		      BYTE.b	%00000000
    251  296e		       00		      BYTE.b	%00000000
    252  296f		       00		      BYTE.b	%00000000
    253  2970		       00		      BYTE.b	%00000000
    254  2971		       00		      BYTE.b	%00000000
    255  2972		       40		      BYTE.b	%01000000
    256  2973		       90		      BYTE.b	%10010000
    257  2974		       90		      BYTE.b	%10010000
    258  2975		       90		      BYTE.b	%10010000
    259  2976		       90		      BYTE.b	%10010000
    260  2977		       90		      BYTE.b	%10010000
    261  2978		       81		      BYTE.b	%10000001
    262  2979		       87		      BYTE.b	%10000111
    263  297a		       1f		      BYTE.b	%00011111
    264  297b		       3f		      BYTE.b	%00111111
    265  297c		       ff		      BYTE.b	%11111111
    266  297d		       ff		      BYTE.b	%11111111
    267  297e		       ff		      BYTE.b	%11111111
    268  297f		       ff		      BYTE.b	%11111111
    269  2980		       ff		      BYTE.b	%11111111
    270  2981		       fd		      BYTE.b	%11111101
    271  2982		       fd		      BYTE.b	%11111101
    272  2983		       bf		      BYTE.b	%10111111
    273  2984		       db		      BYTE.b	%11011011
    274  2985		       e7		      BYTE.b	%11100111
    275  2986		       ff		      BYTE.b	%11111111
    276  2987		       fd		      BYTE.b	%11111101
    277  2988		       fb		      BYTE.b	%11111011
    278  2989		       fe		      BYTE.b	%11111110
    279  298a		       7e		      BYTE.b	%01111110
    280  298b		       7c		      BYTE.b	%01111100
    281  298c		       7b		      BYTE.b	%01111011
    282  298d		       7e		      BYTE.b	%01111110
    283  298e		       3c		      BYTE.b	%00111100
    284  298f		       00		      BYTE.b	%00000000
    285  2990		       80		      BYTE.b	%10000000
    286  2991		       c0		      BYTE.b	%11000000
    287  2992		       e3		      BYTE.b	%11100011
    288  2993		       f7		      BYTE.b	%11110111
    289  2994		       ff		      BYTE.b	%11111111
    290  2995		       ff		      BYTE.b	%11111111
    291  2996		       ff		      BYTE.b	%11111111
    292  2997		       f7		      BYTE.b	%11110111
    293  2998		       f7		      BYTE.b	%11110111
    294  2999		       ff		      BYTE.b	%11111111
    295  299a		       f3		      BYTE.b	%11110011
    296  299b		       71		      BYTE.b	%01110001
    297  299c		       7d		      BYTE.b	%01111101
    298  299d		       6d		      BYTE.b	%01101101
    299  299e		       68		      BYTE.b	%01101000
    300  299f		       2c		      BYTE.b	%00101100
    301  29a0		       34		      BYTE.b	%00110100
    302  29a1		       32		      BYTE.b	%00110010
    303  29a2		       22		      BYTE.b	%00100010
    304  29a3		       a2		      BYTE.b	%10100010
    305  29a4		       05		      BYTE.b	%00000101
    306  29a5		       19		      BYTE.b	%00011001
    307  29a6		       10		      BYTE.b	%00010000
    308  29a7		       82		      BYTE.b	%10000010
    309  29a8		       c2		      BYTE.b	%11000010
    310  29a9		       da		      BYTE.b	%11011010
    311  29aa		       dc		      BYTE.b	%11011100
    312  29ab		       98		      BYTE.b	%10011000
    313  29ac		       90		      BYTE.b	%10010000
    314  29ad		       91		      BYTE.b	%10010001
    315  29ae		       17		      BYTE.b	%00010111
    316  29af		       1f		      BYTE.b	%00011111
    317  29b0		       ff		      BYTE.b	%11111111
    318  29b1		       ff		      BYTE.b	%11111111
    319  29b2		       ef		      BYTE.b	%11101111
    320  29b3		       ef		      BYTE.b	%11101111
    321  29b4		       ef		      BYTE.b	%11101111
    322  29b5		       ef		      BYTE.b	%11101111
    323  29b6		       e7		      BYTE.b	%11100111
    324  29b7		       e7		      BYTE.b	%11100111
    325  29b8		       c1		      BYTE.b	%11000001
    326  29b9		       c2		      BYTE.b	%11000010
    327  29ba		       c1		      BYTE.b	%11000001
    328  29bb		       c1		      BYTE.b	%11000001
    329  29bc		       80		      BYTE.b	%10000000
    330  29bd		       80		      BYTE.b	%10000000
    331  29be		       80		      BYTE.b	%10000000
    332  29bf		       80		      BYTE.b	%10000000
    333  29c0		       00		      BYTE.b	%00000000
    334  29c1		       00		      BYTE.b	%00000000
    335  29c2		       00		      BYTE.b	%00000000
    336  29c3		       00		      BYTE.b	%00000000
    337  29c4		       00		      BYTE.b	%00000000
    338  29c5		       80		      BYTE.b	%10000000
    339  29c6
    340  29c6					      if	>. != >[.+(bmp_48x1_1_height)]
    341  2a00		       00 00 00 00*	      align	256
    342  2a00					      endif
    343  2a00
    344  2a00				   bmp_48x1_1_03
    345  2a00
    346  2a00		       0a		      BYTE.b	%00001010
    347  2a01		       0b		      BYTE.b	%00001011
    348  2a02		       0d		      BYTE.b	%00001101
    349  2a03		       07		      BYTE.b	%00000111
    350  2a04		       03		      BYTE.b	%00000011
    351  2a05		       03		      BYTE.b	%00000011
    352  2a06		       03		      BYTE.b	%00000011
    353  2a07		       03		      BYTE.b	%00000011
    354  2a08		       05		      BYTE.b	%00000101
    355  2a09		       05		      BYTE.b	%00000101
    356  2a0a		       01		      BYTE.b	%00000001
    357  2a0b		       07		      BYTE.b	%00000111
    358  2a0c		       17		      BYTE.b	%00010111
    359  2a0d		       17		      BYTE.b	%00010111
    360  2a0e		       17		      BYTE.b	%00010111
    361  2a0f		       13		      BYTE.b	%00010011
    362  2a10		       03		      BYTE.b	%00000011
    363  2a11		       07		      BYTE.b	%00000111
    364  2a12		       0f		      BYTE.b	%00001111
    365  2a13		       3f		      BYTE.b	%00111111
    366  2a14		       ff		      BYTE.b	%11111111
    367  2a15		       ff		      BYTE.b	%11111111
    368  2a16		       ff		      BYTE.b	%11111111
    369  2a17		       ff		      BYTE.b	%11111111
    370  2a18		       ff		      BYTE.b	%11111111
    371  2a19		       ff		      BYTE.b	%11111111
    372  2a1a		       ff		      BYTE.b	%11111111
    373  2a1b		       ff		      BYTE.b	%11111111
    374  2a1c		       ff		      BYTE.b	%11111111
    375  2a1d		       ef		      BYTE.b	%11101111
    376  2a1e		       ef		      BYTE.b	%11101111
    377  2a1f		       e7		      BYTE.b	%11100111
    378  2a20		       e7		      BYTE.b	%11100111
    379  2a21		       e7		      BYTE.b	%11100111
    380  2a22		       e7		      BYTE.b	%11100111
    381  2a23		       e7		      BYTE.b	%11100111
    382  2a24		       c7		      BYTE.b	%11000111
    383  2a25		       c7		      BYTE.b	%11000111
    384  2a26		       cf		      BYTE.b	%11001111
    385  2a27		       8f		      BYTE.b	%10001111
    386  2a28		       89		      BYTE.b	%10001001
    387  2a29		       80		      BYTE.b	%10000000
    388  2a2a		       0e		      BYTE.b	%00001110
    389  2a2b		       1f		      BYTE.b	%00011111
    390  2a2c		       1f		      BYTE.b	%00011111
    391  2a2d		       3f		      BYTE.b	%00111111
    392  2a2e		       3f		      BYTE.b	%00111111
    393  2a2f		       bf		      BYTE.b	%10111111
    394  2a30		       bf		      BYTE.b	%10111111
    395  2a31		       be		      BYTE.b	%10111110
    396  2a32		       98		      BYTE.b	%10011000
    397  2a33		       96		      BYTE.b	%10010110
    398  2a34		       ef		      BYTE.b	%11101111
    399  2a35		       ef		      BYTE.b	%11101111
    400  2a36		       ee		      BYTE.b	%11101110
    401  2a37		       ee		      BYTE.b	%11101110
    402  2a38		       ea		      BYTE.b	%11101010
    403  2a39		       e8		      BYTE.b	%11101000
    404  2a3a		       e8		      BYTE.b	%11101000
    405  2a3b		       e8		      BYTE.b	%11101000
    406  2a3c		       f8		      BYTE.b	%11111000
    407  2a3d		       fa		      BYTE.b	%11111010
    408  2a3e		       f6		      BYTE.b	%11110110
    409  2a3f		       f8		      BYTE.b	%11111000
    410  2a40		       fc		      BYTE.b	%11111100
    411  2a41		       c7		      BYTE.b	%11000111
    412  2a42		       c0		      BYTE.b	%11000000
    413  2a43		       58		      BYTE.b	%01011000
    414  2a44		       5c		      BYTE.b	%01011100
    415  2a45		       5f		      BYTE.b	%01011111
    416  2a46		       df		      BYTE.b	%11011111
    417  2a47		       ef		      BYTE.b	%11101111
    418  2a48		       7f		      BYTE.b	%01111111
    419  2a49		       ff		      BYTE.b	%11111111
    420  2a4a		       ff		      BYTE.b	%11111111
    421  2a4b		       ff		      BYTE.b	%11111111
    422  2a4c		       ff		      BYTE.b	%11111111
    423  2a4d		       ff		      BYTE.b	%11111111
    424  2a4e		       ff		      BYTE.b	%11111111
    425  2a4f		       ff		      BYTE.b	%11111111
    426  2a50		       ff		      BYTE.b	%11111111
    427  2a51		       ff		      BYTE.b	%11111111
    428  2a52		       fe		      BYTE.b	%11111110
    429  2a53		       f8		      BYTE.b	%11111000
    430  2a54		       f0		      BYTE.b	%11110000
    431  2a55		       e0		      BYTE.b	%11100000
    432  2a56		       07		      BYTE.b	%00000111
    433  2a57		       0f		      BYTE.b	%00001111
    434  2a58		       1e		      BYTE.b	%00011110
    435  2a59		       f8		      BYTE.b	%11111000
    436  2a5a		       f0		      BYTE.b	%11110000
    437  2a5b		       0f		      BYTE.b	%00001111
    438  2a5c		       03		      BYTE.b	%00000011
    439  2a5d		       00		      BYTE.b	%00000000
    440  2a5e		       00		      BYTE.b	%00000000
    441  2a5f		       00		      BYTE.b	%00000000
    442  2a60		       00		      BYTE.b	%00000000
    443  2a61		       00		      BYTE.b	%00000000
    444  2a62		       03		      BYTE.b	%00000011
    445  2a63
    446  2a63				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    447  2a63				  -	      align	256
    448  2a63					      endif
    449  2a63
    450  2a63				   bmp_48x1_1_04
    451  2a63
    452  2a63		       ff		      BYTE.b	%11111111
    453  2a64		       ff		      BYTE.b	%11111111
    454  2a65		       ff		      BYTE.b	%11111111
    455  2a66		       ff		      BYTE.b	%11111111
    456  2a67		       ff		      BYTE.b	%11111111
    457  2a68		       ff		      BYTE.b	%11111111
    458  2a69		       ff		      BYTE.b	%11111111
    459  2a6a		       ff		      BYTE.b	%11111111
    460  2a6b		       ff		      BYTE.b	%11111111
    461  2a6c		       ff		      BYTE.b	%11111111
    462  2a6d		       ff		      BYTE.b	%11111111
    463  2a6e		       fe		      BYTE.b	%11111110
    464  2a6f		       fc		      BYTE.b	%11111100
    465  2a70		       f8		      BYTE.b	%11111000
    466  2a71		       e0		      BYTE.b	%11100000
    467  2a72		       c0		      BYTE.b	%11000000
    468  2a73		       00		      BYTE.b	%00000000
    469  2a74		       80		      BYTE.b	%10000000
    470  2a75		       c0		      BYTE.b	%11000000
    471  2a76		       a0		      BYTE.b	%10100000
    472  2a77		       80		      BYTE.b	%10000000
    473  2a78		       90		      BYTE.b	%10010000
    474  2a79		       88		      BYTE.b	%10001000
    475  2a7a		       84		      BYTE.b	%10000100
    476  2a7b		       82		      BYTE.b	%10000010
    477  2a7c		       81		      BYTE.b	%10000001
    478  2a7d		       80		      BYTE.b	%10000000
    479  2a7e		       c0		      BYTE.b	%11000000
    480  2a7f		       c0		      BYTE.b	%11000000
    481  2a80		       c0		      BYTE.b	%11000000
    482  2a81		       c0		      BYTE.b	%11000000
    483  2a82		       c0		      BYTE.b	%11000000
    484  2a83		       c0		      BYTE.b	%11000000
    485  2a84		       c0		      BYTE.b	%11000000
    486  2a85		       e0		      BYTE.b	%11100000
    487  2a86		       e0		      BYTE.b	%11100000
    488  2a87		       e0		      BYTE.b	%11100000
    489  2a88		       c0		      BYTE.b	%11000000
    490  2a89		       c0		      BYTE.b	%11000000
    491  2a8a		       90		      BYTE.b	%10010000
    492  2a8b		       90		      BYTE.b	%10010000
    493  2a8c		       80		      BYTE.b	%10000000
    494  2a8d		       80		      BYTE.b	%10000000
    495  2a8e		       c0		      BYTE.b	%11000000
    496  2a8f		       00		      BYTE.b	%00000000
    497  2a90		       e0		      BYTE.b	%11100000
    498  2a91		       e8		      BYTE.b	%11101000
    499  2a92		       e8		      BYTE.b	%11101000
    500  2a93		       f0		      BYTE.b	%11110000
    501  2a94		       f0		      BYTE.b	%11110000
    502  2a95		       f0		      BYTE.b	%11110000
    503  2a96		       fc		      BYTE.b	%11111100
    504  2a97		       fc		      BYTE.b	%11111100
    505  2a98		       7c		      BYTE.b	%01111100
    506  2a99		       78		      BYTE.b	%01111000
    507  2a9a		       3c		      BYTE.b	%00111100
    508  2a9b		       3c		      BYTE.b	%00111100
    509  2a9c		       2e		      BYTE.b	%00101110
    510  2a9d		       be		      BYTE.b	%10111110
    511  2a9e		       9e		      BYTE.b	%10011110
    512  2a9f		       bc		      BYTE.b	%10111100
    513  2aa0		       3c		      BYTE.b	%00111100
    514  2aa1		       7d		      BYTE.b	%01111101
    515  2aa2		       3d		      BYTE.b	%00111101
    516  2aa3		       fd		      BYTE.b	%11111101
    517  2aa4		       8f		      BYTE.b	%10001111
    518  2aa5		       0e		      BYTE.b	%00001110
    519  2aa6		       0c		      BYTE.b	%00001100
    520  2aa7		       74		      BYTE.b	%01110100
    521  2aa8		       f4		      BYTE.b	%11110100
    522  2aa9		       f4		      BYTE.b	%11110100
    523  2aaa		       f4		      BYTE.b	%11110100
    524  2aab		       f8		      BYTE.b	%11111000
    525  2aac		       f8		      BYTE.b	%11111000
    526  2aad		       fe		      BYTE.b	%11111110
    527  2aae		       f6		      BYTE.b	%11110110
    528  2aaf		       e3		      BYTE.b	%11100011
    529  2ab0		       e0		      BYTE.b	%11100000
    530  2ab1		       c0		      BYTE.b	%11000000
    531  2ab2		       c0		      BYTE.b	%11000000
    532  2ab3		       83		      BYTE.b	%10000011
    533  2ab4		       07		      BYTE.b	%00000111
    534  2ab5		       0f		      BYTE.b	%00001111
    535  2ab6		       3e		      BYTE.b	%00111110
    536  2ab7		       7e		      BYTE.b	%01111110
    537  2ab8		       fc		      BYTE.b	%11111100
    538  2ab9		       fb		      BYTE.b	%11111011
    539  2aba		       f3		      BYTE.b	%11110011
    540  2abb		       e3		      BYTE.b	%11100011
    541  2abc		       e3		      BYTE.b	%11100011
    542  2abd		       ee		      BYTE.b	%11101110
    543  2abe		       f8		      BYTE.b	%11111000
    544  2abf		       e0		      BYTE.b	%11100000
    545  2ac0		       60		      BYTE.b	%01100000
    546  2ac1		       60		      BYTE.b	%01100000
    547  2ac2		       60		      BYTE.b	%01100000
    548  2ac3		       60		      BYTE.b	%01100000
    549  2ac4		       00		      BYTE.b	%00000000
    550  2ac5		       e0		      BYTE.b	%11100000
    551  2ac6
    552  2ac6					      if	>. != >[.+(bmp_48x1_1_height)]
    553  2b00		       00 00 00 00*	      align	256
    554  2b00					      endif
    555  2b00
    556  2b00				   bmp_48x1_1_05
    557  2b00
    558  2b00		       c0		      BYTE.b	%11000000
    559  2b01		       c0		      BYTE.b	%11000000
    560  2b02		       c0		      BYTE.b	%11000000
    561  2b03		       c0		      BYTE.b	%11000000
    562  2b04		       c0		      BYTE.b	%11000000
    563  2b05		       c0		      BYTE.b	%11000000
    564  2b06		       80		      BYTE.b	%10000000
    565  2b07		       80		      BYTE.b	%10000000
    566  2b08		       80		      BYTE.b	%10000000
    567  2b09		       80		      BYTE.b	%10000000
    568  2b0a		       00		      BYTE.b	%00000000
    569  2b0b		       01		      BYTE.b	%00000001
    570  2b0c		       00		      BYTE.b	%00000000
    571  2b0d		       01		      BYTE.b	%00000001
    572  2b0e		       04		      BYTE.b	%00000100
    573  2b0f		       07		      BYTE.b	%00000111
    574  2b10		       37		      BYTE.b	%00110111
    575  2b11		       76		      BYTE.b	%01110110
    576  2b12		       7e		      BYTE.b	%01111110
    577  2b13		       7f		      BYTE.b	%01111111
    578  2b14		       77		      BYTE.b	%01110111
    579  2b15		       67		      BYTE.b	%01100111
    580  2b16		       4b		      BYTE.b	%01001011
    581  2b17		       4b		      BYTE.b	%01001011
    582  2b18		       0b		      BYTE.b	%00001011
    583  2b19		       03		      BYTE.b	%00000011
    584  2b1a		       03		      BYTE.b	%00000011
    585  2b1b		       05		      BYTE.b	%00000101
    586  2b1c		       09		      BYTE.b	%00001001
    587  2b1d		       13		      BYTE.b	%00010011
    588  2b1e		       0f		      BYTE.b	%00001111
    589  2b1f		       0f		      BYTE.b	%00001111
    590  2b20		       0b		      BYTE.b	%00001011
    591  2b21		       0c		      BYTE.b	%00001100
    592  2b22		       08		      BYTE.b	%00001000
    593  2b23		       08		      BYTE.b	%00001000
    594  2b24		       00		      BYTE.b	%00000000
    595  2b25		       00		      BYTE.b	%00000000
    596  2b26		       00		      BYTE.b	%00000000
    597  2b27		       01		      BYTE.b	%00000001
    598  2b28		       01		      BYTE.b	%00000001
    599  2b29		       01		      BYTE.b	%00000001
    600  2b2a		       01		      BYTE.b	%00000001
    601  2b2b		       00		      BYTE.b	%00000000
    602  2b2c		       04		      BYTE.b	%00000100
    603  2b2d		       04		      BYTE.b	%00000100
    604  2b2e		       04		      BYTE.b	%00000100
    605  2b2f		       04		      BYTE.b	%00000100
    606  2b30		       28		      BYTE.b	%00101000
    607  2b31		       10		      BYTE.b	%00010000
    608  2b32		       00		      BYTE.b	%00000000
    609  2b33		       00		      BYTE.b	%00000000
    610  2b34		       00		      BYTE.b	%00000000
    611  2b35		       00		      BYTE.b	%00000000
    612  2b36		       00		      BYTE.b	%00000000
    613  2b37		       00		      BYTE.b	%00000000
    614  2b38		       00		      BYTE.b	%00000000
    615  2b39		       00		      BYTE.b	%00000000
    616  2b3a		       00		      BYTE.b	%00000000
    617  2b3b		       00		      BYTE.b	%00000000
    618  2b3c		       00		      BYTE.b	%00000000
    619  2b3d		       00		      BYTE.b	%00000000
    620  2b3e		       00		      BYTE.b	%00000000
    621  2b3f		       00		      BYTE.b	%00000000
    622  2b40		       00		      BYTE.b	%00000000
    623  2b41		       00		      BYTE.b	%00000000
    624  2b42		       00		      BYTE.b	%00000000
    625  2b43		       00		      BYTE.b	%00000000
    626  2b44		       80		      BYTE.b	%10000000
    627  2b45		       80		      BYTE.b	%10000000
    628  2b46		       80		      BYTE.b	%10000000
    629  2b47		       80		      BYTE.b	%10000000
    630  2b48		       00		      BYTE.b	%00000000
    631  2b49		       00		      BYTE.b	%00000000
    632  2b4a		       00		      BYTE.b	%00000000
    633  2b4b		       40		      BYTE.b	%01000000
    634  2b4c		       40		      BYTE.b	%01000000
    635  2b4d		       c0		      BYTE.b	%11000000
    636  2b4e		       60		      BYTE.b	%01100000
    637  2b4f		       f0		      BYTE.b	%11110000
    638  2b50		       fe		      BYTE.b	%11111110
    639  2b51		       87		      BYTE.b	%10000111
    640  2b52		       8f		      BYTE.b	%10001111
    641  2b53		       3f		      BYTE.b	%00111111
    642  2b54		       3f		      BYTE.b	%00111111
    643  2b55		       3f		      BYTE.b	%00111111
    644  2b56		       7e		      BYTE.b	%01111110
    645  2b57		       60		      BYTE.b	%01100000
    646  2b58		       80		      BYTE.b	%10000000
    647  2b59		       00		      BYTE.b	%00000000
    648  2b5a		       00		      BYTE.b	%00000000
    649  2b5b		       00		      BYTE.b	%00000000
    650  2b5c		       00		      BYTE.b	%00000000
    651  2b5d		       00		      BYTE.b	%00000000
    652  2b5e		       00		      BYTE.b	%00000000
    653  2b5f		       00		      BYTE.b	%00000000
    654  2b60		       00		      BYTE.b	%00000000
    655  2b61		       00		      BYTE.b	%00000000
    656  2b62		       00		      BYTE.b	%00000000
    657  2b63
------- FILE titlescreen/asm/titlescreen.asm
    140  2b63					      endif
    141  2b63				  -	      ifconst	mk_48x1_2_on
    142  2b63				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2b63					      endif
    144  2b63				  -	      ifconst	mk_48x1_3_on
    145  2b63				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2b63					      endif
    147  2b63
    148  2b63				  -	      ifconst	mk_48x2_1_on
    149  2b63				  -	      include	"titlescreen/48x2_1_image.asm"
    150  2b63					      endif
    151  2b63				  -	      ifconst	mk_48x2_2_on
    152  2b63				  -	      include	"titlescreen/48x2_2_image.asm"
    153  2b63					      endif
    154  2b63				  -	      ifconst	mk_48x2_3_on
    155  2b63				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2b63					      endif
    157  2b63
    158  2b63					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  2b63					      include	"titlescreen/96x2_1_image.asm"
      1  2b63
      2  2b63							;*** The height of the displayed data...
      3  2b63		       00 1c	   bmp_96x2_1_window =	28
      4  2b63
      5  2b63							;*** The height of the bitmap data. This can be larger than
      6  2b63							;*** the displayed data height, if you are scrolling or animating
      7  2b63							;*** the data...
      8  2b63		       00 1e	   bmp_96x2_1_height =	30
      9  2b63
     10  2b63				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     11  2b63				  -	      align	256
     12  2b63					      endif
     13  2b63		       00		      BYTE.b	$00	; leave this here!
     14  2b64
     15  2b64
     16  2b64							;*** this is the color of each line in the bitmap data
     17  2b64				   bmp_96x2_1_colors
     18  2b64		       0c		      BYTE.b	$0c
     19  2b65		       0c		      BYTE.b	$0c
     20  2b66		       0c		      BYTE.b	$0c
     21  2b67		       0c		      BYTE.b	$0c
     22  2b68		       0c		      BYTE.b	$0c
     23  2b69		       0c		      BYTE.b	$0c
     24  2b6a		       0c		      BYTE.b	$0c
     25  2b6b		       0c		      BYTE.b	$0c
     26  2b6c		       0c		      BYTE.b	$0c
     27  2b6d		       0c		      BYTE.b	$0c
     28  2b6e		       0c		      BYTE.b	$0c
     29  2b6f		       0c		      BYTE.b	$0c
     30  2b70		       0c		      BYTE.b	$0c
     31  2b71		       0c		      BYTE.b	$0c
     32  2b72		       0c		      BYTE.b	$0c
     33  2b73		       0c		      BYTE.b	$0c
     34  2b74		       0c		      BYTE.b	$0c
     35  2b75		       0c		      BYTE.b	$0c
     36  2b76		       0c		      BYTE.b	$0c
     37  2b77		       0c		      BYTE.b	$0c
     38  2b78		       0c		      BYTE.b	$0c
     39  2b79		       0c		      BYTE.b	$0c
     40  2b7a		       0c		      BYTE.b	$0c
     41  2b7b		       0c		      BYTE.b	$0c
     42  2b7c		       0c		      BYTE.b	$0c
     43  2b7d		       0c		      BYTE.b	$0c
     44  2b7e		       0c		      BYTE.b	$0c
     45  2b7f		       0c		      BYTE.b	$0c
     46  2b80		       0c		      BYTE.b	$0c
     47  2b81		       0c		      BYTE.b	$0c
     48  2b82
     49  2b82				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     50  2b82				  -	      align	256
     51  2b82					      endif
     52  2b82
     53  2b82				   bmp_96x2_1_00
     54  2b82
     55  2b82		       00		      BYTE.b	%00000000
     56  2b83		       00		      BYTE.b	%00000000
     57  2b84		       00		      BYTE.b	%00000000
     58  2b85		       00		      BYTE.b	%00000000
     59  2b86		       00		      BYTE.b	%00000000
     60  2b87		       00		      BYTE.b	%00000000
     61  2b88		       00		      BYTE.b	%00000000
     62  2b89		       00		      BYTE.b	%00000000
     63  2b8a		       00		      BYTE.b	%00000000
     64  2b8b		       00		      BYTE.b	%00000000
     65  2b8c		       00		      BYTE.b	%00000000
     66  2b8d		       00		      BYTE.b	%00000000
     67  2b8e		       00		      BYTE.b	%00000000
     68  2b8f		       00		      BYTE.b	%00000000
     69  2b90		       00		      BYTE.b	%00000000
     70  2b91		       00		      BYTE.b	%00000000
     71  2b92		       70		      BYTE.b	%01110000
     72  2b93		       70		      BYTE.b	%01110000
     73  2b94		       70		      BYTE.b	%01110000
     74  2b95		       78		      BYTE.b	%01111000
     75  2b96		       7f		      BYTE.b	%01111111
     76  2b97		       7f		      BYTE.b	%01111111
     77  2b98		       7f		      BYTE.b	%01111111
     78  2b99		       70		      BYTE.b	%01110000
     79  2b9a		       70		      BYTE.b	%01110000
     80  2b9b		       70		      BYTE.b	%01110000
     81  2b9c		       70		      BYTE.b	%01110000
     82  2b9d		       00		      BYTE.b	%00000000
     83  2b9e		       00		      BYTE.b	%00000000
     84  2b9f		       00		      BYTE.b	%00000000
     85  2ba0
     86  2ba0				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     87  2ba0				  -	      align	256
     88  2ba0					      endif
     89  2ba0
     90  2ba0				   bmp_96x2_1_01
     91  2ba0
     92  2ba0		       00		      BYTE.b	%00000000
     93  2ba1		       00		      BYTE.b	%00000000
     94  2ba2		       00		      BYTE.b	%00000000
     95  2ba3		       00		      BYTE.b	%00000000
     96  2ba4		       00		      BYTE.b	%00000000
     97  2ba5		       00		      BYTE.b	%00000000
     98  2ba6		       00		      BYTE.b	%00000000
     99  2ba7		       00		      BYTE.b	%00000000
    100  2ba8		       00		      BYTE.b	%00000000
    101  2ba9		       00		      BYTE.b	%00000000
    102  2baa		       00		      BYTE.b	%00000000
    103  2bab		       00		      BYTE.b	%00000000
    104  2bac		       00		      BYTE.b	%00000000
    105  2bad		       00		      BYTE.b	%00000000
    106  2bae		       00		      BYTE.b	%00000000
    107  2baf		       00		      BYTE.b	%00000000
    108  2bb0		       3c		      BYTE.b	%00111100
    109  2bb1		       3c		      BYTE.b	%00111100
    110  2bb2		       3c		      BYTE.b	%00111100
    111  2bb3		       3d		      BYTE.b	%00111101
    112  2bb4		       fd		      BYTE.b	%11111101
    113  2bb5		       fd		      BYTE.b	%11111101
    114  2bb6		       fd		      BYTE.b	%11111101
    115  2bb7		       3d		      BYTE.b	%00111101
    116  2bb8		       3c		      BYTE.b	%00111100
    117  2bb9		       3c		      BYTE.b	%00111100
    118  2bba		       18		      BYTE.b	%00011000
    119  2bbb		       00		      BYTE.b	%00000000
    120  2bbc		       00		      BYTE.b	%00000000
    121  2bbd		       00		      BYTE.b	%00000000
    122  2bbe
    123  2bbe				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    124  2bbe				  -	      align	256
    125  2bbe					      endif
    126  2bbe
    127  2bbe				   bmp_96x2_1_02
    128  2bbe
    129  2bbe		       00		      BYTE.b	%00000000
    130  2bbf		       00		      BYTE.b	%00000000
    131  2bc0		       00		      BYTE.b	%00000000
    132  2bc1		       00		      BYTE.b	%00000000
    133  2bc2		       00		      BYTE.b	%00000000
    134  2bc3		       00		      BYTE.b	%00000000
    135  2bc4		       00		      BYTE.b	%00000000
    136  2bc5		       00		      BYTE.b	%00000000
    137  2bc6		       00		      BYTE.b	%00000000
    138  2bc7		       00		      BYTE.b	%00000000
    139  2bc8		       00		      BYTE.b	%00000000
    140  2bc9		       00		      BYTE.b	%00000000
    141  2bca		       00		      BYTE.b	%00000000
    142  2bcb		       00		      BYTE.b	%00000000
    143  2bcc		       00		      BYTE.b	%00000000
    144  2bcd		       00		      BYTE.b	%00000000
    145  2bce		       3f		      BYTE.b	%00111111
    146  2bcf		       ff		      BYTE.b	%11111111
    147  2bd0		       ff		      BYTE.b	%11111111
    148  2bd1		       e0		      BYTE.b	%11100000
    149  2bd2		       c0		      BYTE.b	%11000000
    150  2bd3		       c0		      BYTE.b	%11000000
    151  2bd4		       e0		      BYTE.b	%11100000
    152  2bd5		       f0		      BYTE.b	%11110000
    153  2bd6		       ff		      BYTE.b	%11111111
    154  2bd7		       7f		      BYTE.b	%01111111
    155  2bd8		       1f		      BYTE.b	%00011111
    156  2bd9		       00		      BYTE.b	%00000000
    157  2bda		       00		      BYTE.b	%00000000
    158  2bdb		       00		      BYTE.b	%00000000
    159  2bdc
    160  2bdc				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    161  2bdc				  -	      align	256
    162  2bdc					      endif
    163  2bdc
    164  2bdc				   bmp_96x2_1_03
    165  2bdc
    166  2bdc		       00		      BYTE.b	%00000000
    167  2bdd		       00		      BYTE.b	%00000000
    168  2bde		       00		      BYTE.b	%00000000
    169  2bdf		       ff		      BYTE.b	%11111111
    170  2be0		       ff		      BYTE.b	%11111111
    171  2be1		       7f		      BYTE.b	%01111111
    172  2be2		       00		      BYTE.b	%00000000
    173  2be3		       1f		      BYTE.b	%00011111
    174  2be4		       7f		      BYTE.b	%01111111
    175  2be5		       ff		      BYTE.b	%11111111
    176  2be6		       f0		      BYTE.b	%11110000
    177  2be7		       ff		      BYTE.b	%11111111
    178  2be8		       ff		      BYTE.b	%11111111
    179  2be9		       3f		      BYTE.b	%00111111
    180  2bea		       00		      BYTE.b	%00000000
    181  2beb		       00		      BYTE.b	%00000000
    182  2bec		       f1		      BYTE.b	%11110001
    183  2bed		       f9		      BYTE.b	%11111001
    184  2bee		       fd		      BYTE.b	%11111101
    185  2bef		       3d		      BYTE.b	%00111101
    186  2bf0		       1d		      BYTE.b	%00011101
    187  2bf1		       1d		      BYTE.b	%00011101
    188  2bf2		       1c		      BYTE.b	%00011100
    189  2bf3		       7c		      BYTE.b	%01111100
    190  2bf4		       f8		      BYTE.b	%11111000
    191  2bf5		       f0		      BYTE.b	%11110000
    192  2bf6		       c0		      BYTE.b	%11000000
    193  2bf7		       00		      BYTE.b	%00000000
    194  2bf8		       00		      BYTE.b	%00000000
    195  2bf9		       00		      BYTE.b	%00000000
    196  2bfa
    197  2bfa					      if	>. != >[.+(bmp_96x2_1_height)]
    198  2c00		       00 00 00 00*	      align	256
    199  2c00					      endif
    200  2c00
    201  2c00				   bmp_96x2_1_04
    202  2c00
    203  2c00		       00		      BYTE.b	%00000000
    204  2c01		       00		      BYTE.b	%00000000
    205  2c02		       00		      BYTE.b	%00000000
    206  2c03		       e1		      BYTE.b	%11100001
    207  2c04		       f9		      BYTE.b	%11111001
    208  2c05		       fd		      BYTE.b	%11111101
    209  2c06		       3d		      BYTE.b	%00111101
    210  2c07		       fd		      BYTE.b	%11111101
    211  2c08		       f9		      BYTE.b	%11111001
    212  2c09		       f1		      BYTE.b	%11110001
    213  2c0a		       01		      BYTE.b	%00000001
    214  2c0b		       f1		      BYTE.b	%11110001
    215  2c0c		       f1		      BYTE.b	%11110001
    216  2c0d		       f9		      BYTE.b	%11111001
    217  2c0e		       00		      BYTE.b	%00000000
    218  2c0f		       00		      BYTE.b	%00000000
    219  2c10		       c0		      BYTE.b	%11000000
    220  2c11		       c0		      BYTE.b	%11000000
    221  2c12		       e1		      BYTE.b	%11100001
    222  2c13		       ff		      BYTE.b	%11111111
    223  2c14		       ff		      BYTE.b	%11111111
    224  2c15		       ff		      BYTE.b	%11111111
    225  2c16		       00		      BYTE.b	%00000000
    226  2c17		       00		      BYTE.b	%00000000
    227  2c18		       ff		      BYTE.b	%11111111
    228  2c19		       ff		      BYTE.b	%11111111
    229  2c1a		       7f		      BYTE.b	%01111111
    230  2c1b		       00		      BYTE.b	%00000000
    231  2c1c		       00		      BYTE.b	%00000000
    232  2c1d		       00		      BYTE.b	%00000000
    233  2c1e
    234  2c1e				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    235  2c1e				  -	      align	256
    236  2c1e					      endif
    237  2c1e
    238  2c1e				   bmp_96x2_1_05
    239  2c1e
    240  2c1e		       00		      BYTE.b	%00000000
    241  2c1f		       00		      BYTE.b	%00000000
    242  2c20		       00		      BYTE.b	%00000000
    243  2c21		       c0		      BYTE.b	%11000000
    244  2c22		       c0		      BYTE.b	%11000000
    245  2c23		       c0		      BYTE.b	%11000000
    246  2c24		       c0		      BYTE.b	%11000000
    247  2c25		       ff		      BYTE.b	%11111111
    248  2c26		       ff		      BYTE.b	%11111111
    249  2c27		       ff		      BYTE.b	%11111111
    250  2c28		       c0		      BYTE.b	%11000000
    251  2c29		       c0		      BYTE.b	%11000000
    252  2c2a		       c0		      BYTE.b	%11000000
    253  2c2b		       c0		      BYTE.b	%11000000
    254  2c2c		       00		      BYTE.b	%00000000
    255  2c2d		       00		      BYTE.b	%00000000
    256  2c2e		       7c		      BYTE.b	%01111100
    257  2c2f		       f8		      BYTE.b	%11111000
    258  2c30		       f0		      BYTE.b	%11110000
    259  2c31		       f0		      BYTE.b	%11110000
    260  2c32		       f8		      BYTE.b	%11111000
    261  2c33		       f8		      BYTE.b	%11111000
    262  2c34		       3c		      BYTE.b	%00111100
    263  2c35		       78		      BYTE.b	%01111000
    264  2c36		       f8		      BYTE.b	%11111000
    265  2c37		       f0		      BYTE.b	%11110000
    266  2c38		       c0		      BYTE.b	%11000000
    267  2c39		       00		      BYTE.b	%00000000
    268  2c3a		       00		      BYTE.b	%00000000
    269  2c3b		       00		      BYTE.b	%00000000
    270  2c3c
    271  2c3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    272  2c3c				  -	      align	256
    273  2c3c					      endif
    274  2c3c
    275  2c3c				   bmp_96x2_1_06
    276  2c3c
    277  2c3c		       00		      BYTE.b	%00000000
    278  2c3d		       00		      BYTE.b	%00000000
    279  2c3e		       00		      BYTE.b	%00000000
    280  2c3f		       e7		      BYTE.b	%11100111
    281  2c40		       e7		      BYTE.b	%11100111
    282  2c41		       e7		      BYTE.b	%11100111
    283  2c42		       e7		      BYTE.b	%11100111
    284  2c43		       e7		      BYTE.b	%11100111
    285  2c44		       e7		      BYTE.b	%11100111
    286  2c45		       e7		      BYTE.b	%11100111
    287  2c46		       e7		      BYTE.b	%11100111
    288  2c47		       e7		      BYTE.b	%11100111
    289  2c48		       e7		      BYTE.b	%11100111
    290  2c49		       e7		      BYTE.b	%11100111
    291  2c4a		       00		      BYTE.b	%00000000
    292  2c4b		       00		      BYTE.b	%00000000
    293  2c4c		       ef		      BYTE.b	%11101111
    294  2c4d		       ef		      BYTE.b	%11101111
    295  2c4e		       e7		      BYTE.b	%11100111
    296  2c4f		       e3		      BYTE.b	%11100011
    297  2c50		       e1		      BYTE.b	%11100001
    298  2c51		       e0		      BYTE.b	%11100000
    299  2c52		       e0		      BYTE.b	%11100000
    300  2c53		       e0		      BYTE.b	%11100000
    301  2c54		       ef		      BYTE.b	%11101111
    302  2c55		       e7		      BYTE.b	%11100111
    303  2c56		       e3		      BYTE.b	%11100011
    304  2c57		       00		      BYTE.b	%00000000
    305  2c58		       00		      BYTE.b	%00000000
    306  2c59		       00		      BYTE.b	%00000000
    307  2c5a
    308  2c5a				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    309  2c5a				  -	      align	256
    310  2c5a					      endif
    311  2c5a
    312  2c5a				   bmp_96x2_1_07
    313  2c5a
    314  2c5a		       00		      BYTE.b	%00000000
    315  2c5b		       00		      BYTE.b	%00000000
    316  2c5c		       00		      BYTE.b	%00000000
    317  2c5d		       70		      BYTE.b	%01110000
    318  2c5e		       70		      BYTE.b	%01110000
    319  2c5f		       70		      BYTE.b	%01110000
    320  2c60		       70		      BYTE.b	%01110000
    321  2c61		       7f		      BYTE.b	%01111111
    322  2c62		       7f		      BYTE.b	%01111111
    323  2c63		       7f		      BYTE.b	%01111111
    324  2c64		       70		      BYTE.b	%01110000
    325  2c65		       7f		      BYTE.b	%01111111
    326  2c66		       7f		      BYTE.b	%01111111
    327  2c67		       7f		      BYTE.b	%01111111
    328  2c68		       00		      BYTE.b	%00000000
    329  2c69		       00		      BYTE.b	%00000000
    330  2c6a		       ff		      BYTE.b	%11111111
    331  2c6b		       ff		      BYTE.b	%11111111
    332  2c6c		       ff		      BYTE.b	%11111111
    333  2c6d		       e0		      BYTE.b	%11100000
    334  2c6e		       f0		      BYTE.b	%11110000
    335  2c6f		       fc		      BYTE.b	%11111100
    336  2c70		       7e		      BYTE.b	%01111110
    337  2c71		       3f		      BYTE.b	%00111111
    338  2c72		       ff		      BYTE.b	%11111111
    339  2c73		       ff		      BYTE.b	%11111111
    340  2c74		       ff		      BYTE.b	%11111111
    341  2c75		       00		      BYTE.b	%00000000
    342  2c76		       00		      BYTE.b	%00000000
    343  2c77		       00		      BYTE.b	%00000000
    344  2c78
    345  2c78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2c78				  -	      align	256
    347  2c78					      endif
    348  2c78
    349  2c78				   bmp_96x2_1_08
    350  2c78
    351  2c78		       00		      BYTE.b	%00000000
    352  2c79		       00		      BYTE.b	%00000000
    353  2c7a		       00		      BYTE.b	%00000000
    354  2c7b		       00		      BYTE.b	%00000000
    355  2c7c		       00		      BYTE.b	%00000000
    356  2c7d		       00		      BYTE.b	%00000000
    357  2c7e		       00		      BYTE.b	%00000000
    358  2c7f		       c0		      BYTE.b	%11000000
    359  2c80		       e0		      BYTE.b	%11100000
    360  2c81		       e0		      BYTE.b	%11100000
    361  2c82		       00		      BYTE.b	%00000000
    362  2c83		       cf		      BYTE.b	%11001111
    363  2c84		       e7		      BYTE.b	%11100111
    364  2c85		       f7		      BYTE.b	%11110111
    365  2c86		       00		      BYTE.b	%00000000
    366  2c87		       00		      BYTE.b	%00000000
    367  2c88		       87		      BYTE.b	%10000111
    368  2c89		       1f		      BYTE.b	%00011111
    369  2c8a		       1f		      BYTE.b	%00011111
    370  2c8b		       3c		      BYTE.b	%00111100
    371  2c8c		       38		      BYTE.b	%00111000
    372  2c8d		       38		      BYTE.b	%00111000
    373  2c8e		       3c		      BYTE.b	%00111100
    374  2c8f		       3e		      BYTE.b	%00111110
    375  2c90		       9f		      BYTE.b	%10011111
    376  2c91		       8f		      BYTE.b	%10001111
    377  2c92		       03		      BYTE.b	%00000011
    378  2c93		       00		      BYTE.b	%00000000
    379  2c94		       00		      BYTE.b	%00000000
    380  2c95		       00		      BYTE.b	%00000000
    381  2c96
    382  2c96				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    383  2c96				  -	      align	256
    384  2c96					      endif
    385  2c96
    386  2c96				   bmp_96x2_1_09
    387  2c96
    388  2c96		       00		      BYTE.b	%00000000
    389  2c97		       00		      BYTE.b	%00000000
    390  2c98		       00		      BYTE.b	%00000000
    391  2c99		       e0		      BYTE.b	%11100000
    392  2c9a		       e0		      BYTE.b	%11100000
    393  2c9b		       e0		      BYTE.b	%11100000
    394  2c9c		       e0		      BYTE.b	%11100000
    395  2c9d		       e0		      BYTE.b	%11100000
    396  2c9e		       e0		      BYTE.b	%11100000
    397  2c9f		       e0		      BYTE.b	%11100000
    398  2ca0		       e0		      BYTE.b	%11100000
    399  2ca1		       fe		      BYTE.b	%11111110
    400  2ca2		       ff		      BYTE.b	%11111111
    401  2ca3		       ff		      BYTE.b	%11111111
    402  2ca4		       00		      BYTE.b	%00000000
    403  2ca5		       00		      BYTE.b	%00000000
    404  2ca6		       fe		      BYTE.b	%11111110
    405  2ca7		       ff		      BYTE.b	%11111111
    406  2ca8		       ff		      BYTE.b	%11111111
    407  2ca9		       07		      BYTE.b	%00000111
    408  2caa		       03		      BYTE.b	%00000011
    409  2cab		       03		      BYTE.b	%00000011
    410  2cac		       03		      BYTE.b	%00000011
    411  2cad		       0f		      BYTE.b	%00001111
    412  2cae		       ff		      BYTE.b	%11111111
    413  2caf		       ff		      BYTE.b	%11111111
    414  2cb0		       f8		      BYTE.b	%11111000
    415  2cb1		       00		      BYTE.b	%00000000
    416  2cb2		       00		      BYTE.b	%00000000
    417  2cb3		       00		      BYTE.b	%00000000
    418  2cb4
    419  2cb4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    420  2cb4				  -	      align	256
    421  2cb4					      endif
    422  2cb4
    423  2cb4				   bmp_96x2_1_10
    424  2cb4
    425  2cb4		       00		      BYTE.b	%00000000
    426  2cb5		       00		      BYTE.b	%00000000
    427  2cb6		       00		      BYTE.b	%00000000
    428  2cb7		       00		      BYTE.b	%00000000
    429  2cb8		       00		      BYTE.b	%00000000
    430  2cb9		       00		      BYTE.b	%00000000
    431  2cba		       00		      BYTE.b	%00000000
    432  2cbb		       00		      BYTE.b	%00000000
    433  2cbc		       00		      BYTE.b	%00000000
    434  2cbd		       00		      BYTE.b	%00000000
    435  2cbe		       00		      BYTE.b	%00000000
    436  2cbf		       00		      BYTE.b	%00000000
    437  2cc0		       00		      BYTE.b	%00000000
    438  2cc1		       00		      BYTE.b	%00000000
    439  2cc2		       00		      BYTE.b	%00000000
    440  2cc3		       00		      BYTE.b	%00000000
    441  2cc4		       1c		      BYTE.b	%00011100
    442  2cc5		       1c		      BYTE.b	%00011100
    443  2cc6		       9c		      BYTE.b	%10011100
    444  2cc7		       9c		      BYTE.b	%10011100
    445  2cc8		       9d		      BYTE.b	%10011101
    446  2cc9		       df		      BYTE.b	%11011111
    447  2cca		       9f		      BYTE.b	%10011111
    448  2ccb		       9f		      BYTE.b	%10011111
    449  2ccc		       9f		      BYTE.b	%10011111
    450  2ccd		       1c		      BYTE.b	%00011100
    451  2cce		       18		      BYTE.b	%00011000
    452  2ccf		       00		      BYTE.b	%00000000
    453  2cd0		       00		      BYTE.b	%00000000
    454  2cd1		       00		      BYTE.b	%00000000
    455  2cd2
    456  2cd2				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    457  2cd2				  -	      align	256
    458  2cd2					      endif
    459  2cd2
    460  2cd2				   bmp_96x2_1_11
    461  2cd2
    462  2cd2		       00		      BYTE.b	%00000000
    463  2cd3		       00		      BYTE.b	%00000000
    464  2cd4		       00		      BYTE.b	%00000000
    465  2cd5		       00		      BYTE.b	%00000000
    466  2cd6		       00		      BYTE.b	%00000000
    467  2cd7		       00		      BYTE.b	%00000000
    468  2cd8		       00		      BYTE.b	%00000000
    469  2cd9		       00		      BYTE.b	%00000000
    470  2cda		       00		      BYTE.b	%00000000
    471  2cdb		       00		      BYTE.b	%00000000
    472  2cdc		       00		      BYTE.b	%00000000
    473  2cdd		       00		      BYTE.b	%00000000
    474  2cde		       00		      BYTE.b	%00000000
    475  2cdf		       00		      BYTE.b	%00000000
    476  2ce0		       00		      BYTE.b	%00000000
    477  2ce1		       00		      BYTE.b	%00000000
    478  2ce2		       0e		      BYTE.b	%00001110
    479  2ce3		       3e		      BYTE.b	%00111110
    480  2ce4		       7e		      BYTE.b	%01111110
    481  2ce5		       fe		      BYTE.b	%11111110
    482  2ce6		       fe		      BYTE.b	%11111110
    483  2ce7		       fe		      BYTE.b	%11111110
    484  2ce8		       ce		      BYTE.b	%11001110
    485  2ce9		       8e		      BYTE.b	%10001110
    486  2cea		       0e		      BYTE.b	%00001110
    487  2ceb		       0e		      BYTE.b	%00001110
    488  2cec		       0e		      BYTE.b	%00001110
    489  2ced		       00		      BYTE.b	%00000000
    490  2cee		       00		      BYTE.b	%00000000
    491  2cef		       00		      BYTE.b	%00000000
    492  2cf0
------- FILE titlescreen/asm/titlescreen.asm
    160  2cf0					      endif
    161  2cf0				  -	      ifconst	mk_96x2_2_on
    162  2cf0				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2cf0					      endif
    164  2cf0				  -	      ifconst	mk_96x2_3_on
    165  2cf0				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2cf0					      endif
    167  2cf0
    168  2cf0					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2cf0					      include	"titlescreen/score_image.asm"
      1  2cf0							; feel free to modify the score graphics - just keep each digit 8 high
      2  2cf0							; if you're looking to want to modify any one font, pick on the 
      3  2cf0
      4  2cf0				  -	      ifnconst	NOFONT
      5  2cf0				  -NOFONT     =	0
      6  2cf0					      endif
      7  2cf0				  -	      ifnconst	STOCK
      8  2cf0				  -STOCK      =	1	;_FONTNAME
      9  2cf0					      endif
     10  2cf0				  -	      ifnconst	NEWCENTURY
     11  2cf0				  -NEWCENTURY =	2	;_FONTNAME
     12  2cf0					      endif
     13  2cf0				  -	      ifnconst	WHIMSEY
     14  2cf0				  -WHIMSEY    =	3	;_FONTNAME
     15  2cf0					      endif
     16  2cf0				  -	      ifnconst	ALARMCLOCK
     17  2cf0				  -ALARMCLOCK =	4	;_FONTNAME
     18  2cf0					      endif
     19  2cf0				  -	      ifnconst	HANDWRITTEN
     20  2cf0				  -HANDWRITTEN =	5	;_FONTNAME
     21  2cf0					      endif
     22  2cf0				  -	      ifnconst	INTERRUPTED
     23  2cf0				  -INTERRUPTED =	6	;_FONTNAME
     24  2cf0					      endif
     25  2cf0				  -	      ifnconst	TINY
     26  2cf0				  -TINY       =	7	;_FONTNAME
     27  2cf0					      endif
     28  2cf0				  -	      ifnconst	RETROPUTER
     29  2cf0				  -RETROPUTER =	8	;_FONTNAME
     30  2cf0					      endif
     31  2cf0				  -	      ifnconst	CURVES
     32  2cf0				  -CURVES     =	9	;_FONTNAME
     33  2cf0					      endif
     34  2cf0				  -	      ifnconst	HUSKY
     35  2cf0				  -HUSKY      =	10	;_FONTNAME
     36  2cf0					      endif
     37  2cf0				  -	      ifnconst	SNAKE
     38  2cf0				  -SNAKE      =	11	;_FONTNAME
     39  2cf0					      endif
     40  2cf0				  -	      ifnconst	PLOK
     41  2cf0				  -PLOK       =	13	;_FONTNAME
     42  2cf0					      endif
     43  2cf0
     44  2cf0				  -	      ifnconst	SYMBOLS
     45  2cf0				  -SYMBOLS    =	0	;_FONTNAME 
     46  2cf0					      endif
     47  2cf0
     48  2cf0							; ### setup some defaults
     49  2cf0				  -	      ifnconst	fontstyle
     50  2cf0				  -fontstyle  =	STOCK
     51  2cf0					      endif
     52  2cf0
     53  2cf0							;fix up the table alignment, if necessary
     54  2cf0					      if	>. != >[.+128]
     55  2d00		       00 00 00 00*	      align	256
     56  2d00					      endif
     57  2d00
     58  2d00				   miniscoretable
     59  2d00
     60  2d00					      if	fontstyle == STOCK
     61  2d00
     62  2d00							;byte %00000000 ; STOCK
     63  2d00
     64  2d00		       3c		      .byte.b	%00111100	; STOCK
     65  2d01		       66		      .byte.b	%01100110	; STOCK
     66  2d02		       66		      .byte.b	%01100110	; STOCK
     67  2d03		       66		      .byte.b	%01100110	; STOCK
     68  2d04		       66		      .byte.b	%01100110	; STOCK
     69  2d05		       66		      .byte.b	%01100110	; STOCK
     70  2d06		       66		      .byte.b	%01100110	; STOCK
     71  2d07		       3c		      .byte.b	%00111100	; STOCK
     72  2d08
     73  2d08							;byte %00000000 ; STOCK
     74  2d08
     75  2d08		       7e		      .byte.b	%01111110	; STOCK
     76  2d09		       18		      .byte.b	%00011000	; STOCK
     77  2d0a		       18		      .byte.b	%00011000	; STOCK
     78  2d0b		       18		      .byte.b	%00011000	; STOCK
     79  2d0c		       18		      .byte.b	%00011000	; STOCK
     80  2d0d		       38		      .byte.b	%00111000	; STOCK
     81  2d0e		       18		      .byte.b	%00011000	; STOCK
     82  2d0f		       08		      .byte.b	%00001000	; STOCK
     83  2d10
     84  2d10							;byte %00000000 ; STOCK
     85  2d10
     86  2d10		       7e		      .byte.b	%01111110	; STOCK
     87  2d11		       60		      .byte.b	%01100000	; STOCK
     88  2d12		       60		      .byte.b	%01100000	; STOCK
     89  2d13		       3c		      .byte.b	%00111100	; STOCK
     90  2d14		       06		      .byte.b	%00000110	; STOCK
     91  2d15		       06		      .byte.b	%00000110	; STOCK
     92  2d16		       46		      .byte.b	%01000110	; STOCK
     93  2d17		       3c		      .byte.b	%00111100	; STOCK
     94  2d18
     95  2d18							;byte %00000000 ; STOCK
     96  2d18
     97  2d18		       3c		      .byte.b	%00111100	; STOCK
     98  2d19		       46		      .byte.b	%01000110	; STOCK
     99  2d1a		       06		      .byte.b	%00000110	; STOCK
    100  2d1b		       06		      .byte.b	%00000110	; STOCK
    101  2d1c		       1c		      .byte.b	%00011100	; STOCK
    102  2d1d		       06		      .byte.b	%00000110	; STOCK
    103  2d1e		       46		      .byte.b	%01000110	; STOCK
    104  2d1f		       3c		      .byte.b	%00111100	; STOCK
    105  2d20
    106  2d20							;byte %00000000 ; STOCK
    107  2d20
    108  2d20		       0c		      .byte.b	%00001100	; STOCK
    109  2d21		       0c		      .byte.b	%00001100	; STOCK
    110  2d22		       7e		      .byte.b	%01111110	; STOCK
    111  2d23		       4c		      .byte.b	%01001100	; STOCK
    112  2d24		       4c		      .byte.b	%01001100	; STOCK
    113  2d25		       2c		      .byte.b	%00101100	; STOCK
    114  2d26		       1c		      .byte.b	%00011100	; STOCK
    115  2d27		       0c		      .byte.b	%00001100	; STOCK
    116  2d28
    117  2d28							;byte %00000000 ; STOCK
    118  2d28
    119  2d28		       3c		      .byte.b	%00111100	; STOCK
    120  2d29		       46		      .byte.b	%01000110	; STOCK
    121  2d2a		       06		      .byte.b	%00000110	; STOCK
    122  2d2b		       06		      .byte.b	%00000110	; STOCK
    123  2d2c		       3c		      .byte.b	%00111100	; STOCK
    124  2d2d		       60		      .byte.b	%01100000	; STOCK
    125  2d2e		       60		      .byte.b	%01100000	; STOCK
    126  2d2f		       7e		      .byte.b	%01111110	; STOCK
    127  2d30
    128  2d30							;byte %00000000 ; STOCK
    129  2d30
    130  2d30		       3c		      .byte.b	%00111100	; STOCK
    131  2d31		       66		      .byte.b	%01100110	; STOCK
    132  2d32		       66		      .byte.b	%01100110	; STOCK
    133  2d33		       66		      .byte.b	%01100110	; STOCK
    134  2d34		       7c		      .byte.b	%01111100	; STOCK
    135  2d35		       60		      .byte.b	%01100000	; STOCK
    136  2d36		       62		      .byte.b	%01100010	; STOCK
    137  2d37		       3c		      .byte.b	%00111100	; STOCK
    138  2d38
    139  2d38							;byte %00000000 ; STOCK
    140  2d38
    141  2d38		       30		      .byte.b	%00110000	; STOCK
    142  2d39		       30		      .byte.b	%00110000	; STOCK
    143  2d3a		       30		      .byte.b	%00110000	; STOCK
    144  2d3b		       18		      .byte.b	%00011000	; STOCK
    145  2d3c		       0c		      .byte.b	%00001100	; STOCK
    146  2d3d		       06		      .byte.b	%00000110	; STOCK
    147  2d3e		       42		      .byte.b	%01000010	; STOCK
    148  2d3f		       3e		      .byte.b	%00111110	; STOCK
    149  2d40
    150  2d40							;byte %00000000 ; STOCK
    151  2d40
    152  2d40		       3c		      .byte.b	%00111100	; STOCK
    153  2d41		       66		      .byte.b	%01100110	; STOCK
    154  2d42		       66		      .byte.b	%01100110	; STOCK
    155  2d43		       66		      .byte.b	%01100110	; STOCK
    156  2d44		       3c		      .byte.b	%00111100	; STOCK
    157  2d45		       66		      .byte.b	%01100110	; STOCK
    158  2d46		       66		      .byte.b	%01100110	; STOCK
    159  2d47		       3c		      .byte.b	%00111100	; STOCK
    160  2d48
    161  2d48							;byte %00000000 ; STOCK
    162  2d48
    163  2d48		       3c		      .byte.b	%00111100	; STOCK
    164  2d49		       46		      .byte.b	%01000110	; STOCK
    165  2d4a		       06		      .byte.b	%00000110	; STOCK
    166  2d4b		       3e		      .byte.b	%00111110	; STOCK
    167  2d4c		       66		      .byte.b	%01100110	; STOCK
    168  2d4d		       66		      .byte.b	%01100110	; STOCK
    169  2d4e		       66		      .byte.b	%01100110	; STOCK
    170  2d4f		       3c		      .byte.b	%00111100	; STOCK
    171  2d50
    172  2d50							;byte %00000000 ; STOCK
    173  2d50
    174  2d50				  -	      ifconst	fontcharsHEX
    175  2d50				  -
    176  2d50				  -	      .byte	%01100110	; STOCK
    177  2d50				  -	      .byte	%01100110	; STOCK
    178  2d50				  -	      .byte	%01100110	; STOCK
    179  2d50				  -	      .byte	%01111110	; STOCK
    180  2d50				  -	      .byte	%01100110	; STOCK
    181  2d50				  -	      .byte	%01100110	; STOCK
    182  2d50				  -	      .byte	%01100110	; STOCK
    183  2d50				  -	      .byte	%00111100	; STOCK
    184  2d50				  -
    185  2d50				  -			;byte %00000000 ; STOCK
    186  2d50				  -
    187  2d50				  -	      .byte	%01111100	; STOCK
    188  2d50				  -	      .byte	%01100110	; STOCK
    189  2d50				  -	      .byte	%01100110	; STOCK
    190  2d50				  -	      .byte	%01100110	; STOCK
    191  2d50				  -	      .byte	%01111100	; STOCK
    192  2d50				  -	      .byte	%01100110	; STOCK
    193  2d50				  -	      .byte	%01100110	; STOCK
    194  2d50				  -	      .byte	%01111100	; STOCK
    195  2d50				  -
    196  2d50				  -			;byte %00000000 ; STOCK
    197  2d50				  -
    198  2d50				  -	      .byte	%00111100	; STOCK
    199  2d50				  -	      .byte	%01100110	; STOCK
    200  2d50				  -	      .byte	%01100000	; STOCK
    201  2d50				  -	      .byte	%01100000	; STOCK
    202  2d50				  -	      .byte	%01100000	; STOCK
    203  2d50				  -	      .byte	%01100000	; STOCK
    204  2d50				  -	      .byte	%01100110	; STOCK
    205  2d50				  -	      .byte	%00111100	; STOCK
    206  2d50				  -
    207  2d50				  -			;byte %00000000 ; STOCK
    208  2d50				  -
    209  2d50				  -	      .byte	%01111100	; STOCK
    210  2d50				  -	      .byte	%01100110	; STOCK
    211  2d50				  -	      .byte	%01100110	; STOCK
    212  2d50				  -	      .byte	%01100110	; STOCK
    213  2d50				  -	      .byte	%01100110	; STOCK
    214  2d50				  -	      .byte	%01100110	; STOCK
    215  2d50				  -	      .byte	%01100110	; STOCK
    216  2d50				  -	      .byte	%01111100	; STOCK
    217  2d50				  -
    218  2d50				  -			;byte %00000000 ; STOCK
    219  2d50				  -
    220  2d50				  -	      .byte	%01111110	; STOCK
    221  2d50				  -	      .byte	%01100000	; STOCK
    222  2d50				  -	      .byte	%01100000	; STOCK
    223  2d50				  -	      .byte	%01100000	; STOCK
    224  2d50				  -	      .byte	%01111100	; STOCK
    225  2d50				  -	      .byte	%01100000	; STOCK
    226  2d50				  -	      .byte	%01100000	; STOCK
    227  2d50				  -	      .byte	%01111110	; STOCK
    228  2d50				  -
    229  2d50				  -			;byte %00000000 ; STOCK
    230  2d50				  -
    231  2d50				  -	      .byte	%01100000	; STOCK
    232  2d50				  -	      .byte	%01100000	; STOCK
    233  2d50				  -	      .byte	%01100000	; STOCK
    234  2d50				  -	      .byte	%01100000	; STOCK
    235  2d50				  -	      .byte	%01111100	; STOCK
    236  2d50				  -	      .byte	%01100000	; STOCK
    237  2d50				  -	      .byte	%01100000	; STOCK
    238  2d50				  -	      .byte	%01111110	; STOCK
    239  2d50				  -
    240  2d50				  -			;byte %00000000 ; STOCK
    241  2d50				  -			;byte %00000000 ; STOCK
    242  2d50				  -			;byte %00000000 ; STOCK
    243  2d50				  -			;byte %00000000 ; STOCK
    244  2d50					      endif		; fontcharsHEX 
    245  2d50					      endif		; STOCK
    246  2d50
    247  2d50				  -	      if	fontstyle == NEWCENTURY
    248  2d50				  -			;byte %00000000 ; NEWCENTURY
    249  2d50				  -
    250  2d50				  -	      .byte	%00111100	; NEWCENTURY
    251  2d50				  -	      .byte	%01000010	; NEWCENTURY
    252  2d50				  -	      .byte	%01000010	; NEWCENTURY
    253  2d50				  -	      .byte	%01000010	; NEWCENTURY
    254  2d50				  -	      .byte	%00100100	; NEWCENTURY
    255  2d50				  -	      .byte	%00100100	; NEWCENTURY
    256  2d50				  -	      .byte	%00100100	; NEWCENTURY
    257  2d50				  -	      .byte	%00011000	; NEWCENTURY
    258  2d50				  -
    259  2d50				  -			;byte %00000000 ; NEWCENTURY
    260  2d50				  -
    261  2d50				  -	      .byte	%00001000	; NEWCENTURY
    262  2d50				  -	      .byte	%00001000	; NEWCENTURY
    263  2d50				  -	      .byte	%00001000	; NEWCENTURY
    264  2d50				  -	      .byte	%00001000	; NEWCENTURY
    265  2d50				  -	      .byte	%00001000	; NEWCENTURY
    266  2d50				  -	      .byte	%00001000	; NEWCENTURY
    267  2d50				  -	      .byte	%00001000	; NEWCENTURY
    268  2d50				  -	      .byte	%00001000	; NEWCENTURY
    269  2d50				  -
    270  2d50				  -			;byte %00000000 ; NEWCENTURY
    271  2d50				  -
    272  2d50				  -	      .byte	%01111110	; NEWCENTURY
    273  2d50				  -	      .byte	%01000000	; NEWCENTURY
    274  2d50				  -	      .byte	%01000000	; NEWCENTURY
    275  2d50				  -	      .byte	%00100000	; NEWCENTURY
    276  2d50				  -	      .byte	%00011100	; NEWCENTURY
    277  2d50				  -	      .byte	%00000010	; NEWCENTURY
    278  2d50				  -	      .byte	%00000010	; NEWCENTURY
    279  2d50				  -	      .byte	%00011100	; NEWCENTURY
    280  2d50				  -
    281  2d50				  -			;byte %00000000 ; NEWCENTURY
    282  2d50				  -
    283  2d50				  -	      .byte	%01111100	; NEWCENTURY
    284  2d50				  -	      .byte	%00000010	; NEWCENTURY
    285  2d50				  -	      .byte	%00000010	; NEWCENTURY
    286  2d50				  -	      .byte	%00000010	; NEWCENTURY
    287  2d50				  -	      .byte	%00111100	; NEWCENTURY
    288  2d50				  -	      .byte	%00000010	; NEWCENTURY
    289  2d50				  -	      .byte	%00000010	; NEWCENTURY
    290  2d50				  -	      .byte	%00011100	; NEWCENTURY
    291  2d50				  -
    292  2d50				  -			;byte %00000000 ; NEWCENTURY
    293  2d50				  -
    294  2d50				  -	      .byte	%00000010	; NEWCENTURY
    295  2d50				  -	      .byte	%00000010	; NEWCENTURY
    296  2d50				  -	      .byte	%00000010	; NEWCENTURY
    297  2d50				  -	      .byte	%00111110	; NEWCENTURY
    298  2d50				  -	      .byte	%00100010	; NEWCENTURY
    299  2d50				  -	      .byte	%00100010	; NEWCENTURY
    300  2d50				  -	      .byte	%00010010	; NEWCENTURY
    301  2d50				  -	      .byte	%00010010	; NEWCENTURY
    302  2d50				  -
    303  2d50				  -			;byte %00000000 ; NEWCENTURY
    304  2d50				  -
    305  2d50				  -	      .byte	%01111100	; NEWCENTURY
    306  2d50				  -	      .byte	%00000010	; NEWCENTURY
    307  2d50				  -	      .byte	%00000010	; NEWCENTURY
    308  2d50				  -	      .byte	%00000010	; NEWCENTURY
    309  2d50				  -	      .byte	%01111100	; NEWCENTURY
    310  2d50				  -	      .byte	%01000000	; NEWCENTURY
    311  2d50				  -	      .byte	%01000000	; NEWCENTURY
    312  2d50				  -	      .byte	%01111000	; NEWCENTURY
    313  2d50				  -
    314  2d50				  -			;byte %00000000 ; NEWCENTURY
    315  2d50				  -
    316  2d50				  -	      .byte	%00111100	; NEWCENTURY
    317  2d50				  -	      .byte	%01000010	; NEWCENTURY
    318  2d50				  -	      .byte	%01000010	; NEWCENTURY
    319  2d50				  -	      .byte	%01000010	; NEWCENTURY
    320  2d50				  -	      .byte	%01111100	; NEWCENTURY
    321  2d50				  -	      .byte	%01000000	; NEWCENTURY
    322  2d50				  -	      .byte	%01000000	; NEWCENTURY
    323  2d50				  -	      .byte	%00110000	; NEWCENTURY
    324  2d50				  -
    325  2d50				  -			;byte %00000000 ; NEWCENTURY
    326  2d50				  -
    327  2d50				  -	      .byte	%00010000	; NEWCENTURY
    328  2d50				  -	      .byte	%00010000	; NEWCENTURY
    329  2d50				  -	      .byte	%00001000	; NEWCENTURY
    330  2d50				  -	      .byte	%00001000	; NEWCENTURY
    331  2d50				  -	      .byte	%00000100	; NEWCENTURY
    332  2d50				  -	      .byte	%00000100	; NEWCENTURY
    333  2d50				  -	      .byte	%00000010	; NEWCENTURY
    334  2d50				  -	      .byte	%00011110	; NEWCENTURY
    335  2d50				  -
    336  2d50				  -			;byte %00000000 ; NEWCENTURY
    337  2d50				  -
    338  2d50				  -	      .byte	%00111100	; NEWCENTURY
    339  2d50				  -	      .byte	%01000010	; NEWCENTURY
    340  2d50				  -	      .byte	%01000010	; NEWCENTURY
    341  2d50				  -	      .byte	%01000010	; NEWCENTURY
    342  2d50				  -	      .byte	%00111100	; NEWCENTURY
    343  2d50				  -	      .byte	%00100100	; NEWCENTURY
    344  2d50				  -	      .byte	%00100100	; NEWCENTURY
    345  2d50				  -	      .byte	%00011000	; NEWCENTURY
    346  2d50				  -
    347  2d50				  -			;byte %00000000 ; NEWCENTURY
    348  2d50				  -
    349  2d50				  -	      .byte	%00111100	; NEWCENTURY
    350  2d50				  -	      .byte	%00000010	; NEWCENTURY
    351  2d50				  -	      .byte	%00000010	; NEWCENTURY
    352  2d50				  -	      .byte	%00000010	; NEWCENTURY
    353  2d50				  -	      .byte	%00001110	; NEWCENTURY
    354  2d50				  -	      .byte	%00010010	; NEWCENTURY
    355  2d50				  -	      .byte	%00010010	; NEWCENTURY
    356  2d50				  -	      .byte	%00001100	; NEWCENTURY
    357  2d50				  -
    358  2d50				  -	      ifconst	fontcharsHEX
    359  2d50				  -
    360  2d50				  -			;byte %00000000 ; NEWCENTURY
    361  2d50				  -
    362  2d50				  -	      .byte	%01000010	; NEWCENTURY
    363  2d50				  -	      .byte	%01000010	; NEWCENTURY
    364  2d50				  -	      .byte	%01000010	; NEWCENTURY
    365  2d50				  -	      .byte	%01000010	; NEWCENTURY
    366  2d50				  -	      .byte	%01111100	; NEWCENTURY
    367  2d50				  -	      .byte	%01000100	; NEWCENTURY
    368  2d50				  -	      .byte	%01000100	; NEWCENTURY
    369  2d50				  -	      .byte	%00111000	; NEWCENTURY
    370  2d50				  -
    371  2d50				  -			;byte %00000000 ; NEWCENTURY
    372  2d50				  -
    373  2d50				  -	      .byte	%01111100	; NEWCENTURY
    374  2d50				  -	      .byte	%01000010	; NEWCENTURY
    375  2d50				  -	      .byte	%01000010	; NEWCENTURY
    376  2d50				  -	      .byte	%01000010	; NEWCENTURY
    377  2d50				  -	      .byte	%01111100	; NEWCENTURY
    378  2d50				  -	      .byte	%01000100	; NEWCENTURY
    379  2d50				  -	      .byte	%01000100	; NEWCENTURY
    380  2d50				  -	      .byte	%01111000	; NEWCENTURY
    381  2d50				  -
    382  2d50				  -			;byte %00000000 ; NEWCENTURY
    383  2d50				  -
    384  2d50				  -	      .byte	%00111100	; NEWCENTURY
    385  2d50				  -	      .byte	%01000010	; NEWCENTURY
    386  2d50				  -	      .byte	%01000000	; NEWCENTURY
    387  2d50				  -	      .byte	%01000000	; NEWCENTURY
    388  2d50				  -	      .byte	%01000000	; NEWCENTURY
    389  2d50				  -	      .byte	%01000000	; NEWCENTURY
    390  2d50				  -	      .byte	%01000000	; NEWCENTURY
    391  2d50				  -	      .byte	%00111000	; NEWCENTURY
    392  2d50				  -
    393  2d50				  -			;byte %00000000 ; NEWCENTURY
    394  2d50				  -
    395  2d50				  -	      .byte	%01111100	; NEWCENTURY
    396  2d50				  -	      .byte	%01000010	; NEWCENTURY
    397  2d50				  -	      .byte	%01000010	; NEWCENTURY
    398  2d50				  -	      .byte	%01000010	; NEWCENTURY
    399  2d50				  -	      .byte	%01000010	; NEWCENTURY
    400  2d50				  -	      .byte	%01000100	; NEWCENTURY
    401  2d50				  -	      .byte	%01000100	; NEWCENTURY
    402  2d50				  -	      .byte	%01111000	; NEWCENTURY
    403  2d50				  -
    404  2d50				  -			;byte %00000000 ; NEWCENTURY
    405  2d50				  -
    406  2d50				  -	      .byte	%01111110	; NEWCENTURY
    407  2d50				  -	      .byte	%01000000	; NEWCENTURY
    408  2d50				  -	      .byte	%01000000	; NEWCENTURY
    409  2d50				  -	      .byte	%01000000	; NEWCENTURY
    410  2d50				  -	      .byte	%01111100	; NEWCENTURY
    411  2d50				  -	      .byte	%01000000	; NEWCENTURY
    412  2d50				  -	      .byte	%01000000	; NEWCENTURY
    413  2d50				  -	      .byte	%01111000	; NEWCENTURY
    414  2d50				  -
    415  2d50				  -			;byte %00000000 ; NEWCENTURY
    416  2d50				  -
    417  2d50				  -	      .byte	%01000000	; NEWCENTURY
    418  2d50				  -	      .byte	%01000000	; NEWCENTURY
    419  2d50				  -	      .byte	%01000000	; NEWCENTURY
    420  2d50				  -	      .byte	%01000000	; NEWCENTURY
    421  2d50				  -	      .byte	%01111100	; NEWCENTURY
    422  2d50				  -	      .byte	%01000000	; NEWCENTURY
    423  2d50				  -	      .byte	%01000000	; NEWCENTURY
    424  2d50				  -	      .byte	%01111000	; NEWCENTURY
    425  2d50				  -
    426  2d50				  -			;byte %00000000 ; NEWCENTURY
    427  2d50				  -			;byte %00000000 ; NEWCENTURY
    428  2d50				  -			;byte %00000000 ; NEWCENTURY
    429  2d50				  -			;byte %00000000 ; NEWCENTURY
    430  2d50				  -
    431  2d50				  -	      endif		; fontcharsHEX 
    432  2d50					      endif		; NEWCENTURY
    433  2d50
    434  2d50				  -	      if	fontstyle == WHIMSEY
    435  2d50				  -			;byte %00000000 ; WHIMSEY
    436  2d50				  -
    437  2d50				  -	      .byte	%00111100	; WHIMSEY
    438  2d50				  -	      .byte	%01111110	; WHIMSEY
    439  2d50				  -	      .byte	%01111110	; WHIMSEY
    440  2d50				  -	      .byte	%01111110	; WHIMSEY
    441  2d50				  -	      .byte	%01110110	; WHIMSEY
    442  2d50				  -	      .byte	%01110110	; WHIMSEY
    443  2d50				  -	      .byte	%01110110	; WHIMSEY
    444  2d50				  -	      .byte	%00111100	; WHIMSEY
    445  2d50				  -
    446  2d50				  -			;byte %00000000 ; WHIMSEY
    447  2d50				  -
    448  2d50				  -	      .byte	%01111110	; WHIMSEY
    449  2d50				  -	      .byte	%01111110	; WHIMSEY
    450  2d50				  -	      .byte	%01111110	; WHIMSEY
    451  2d50				  -	      .byte	%00011000	; WHIMSEY
    452  2d50				  -	      .byte	%00011000	; WHIMSEY
    453  2d50				  -	      .byte	%00011000	; WHIMSEY
    454  2d50				  -	      .byte	%01111000	; WHIMSEY
    455  2d50				  -	      .byte	%00011000	; WHIMSEY
    456  2d50				  -
    457  2d50				  -			;byte %00000000 ; WHIMSEY
    458  2d50				  -
    459  2d50				  -	      .byte	%01111110	; WHIMSEY
    460  2d50				  -	      .byte	%01111110	; WHIMSEY
    461  2d50				  -	      .byte	%01111110	; WHIMSEY
    462  2d50				  -	      .byte	%01111000	; WHIMSEY
    463  2d50				  -	      .byte	%00111100	; WHIMSEY
    464  2d50				  -	      .byte	%00001110	; WHIMSEY
    465  2d50				  -	      .byte	%01100110	; WHIMSEY
    466  2d50				  -	      .byte	%00111100	; WHIMSEY
    467  2d50				  -
    468  2d50				  -			;byte %00000000 ; WHIMSEY
    469  2d50				  -
    470  2d50				  -	      .byte	%00111100	; WHIMSEY
    471  2d50				  -	      .byte	%01111110	; WHIMSEY
    472  2d50				  -	      .byte	%01111110	; WHIMSEY
    473  2d50				  -	      .byte	%01101110	; WHIMSEY
    474  2d50				  -	      .byte	%00001110	; WHIMSEY
    475  2d50				  -	      .byte	%00111100	; WHIMSEY
    476  2d50				  -	      .byte	%00011100	; WHIMSEY
    477  2d50				  -	      .byte	%01111110	; WHIMSEY
    478  2d50				  -
    479  2d50				  -			;byte %00000000 ; WHIMSEY
    480  2d50				  -
    481  2d50				  -	      .byte	%00011100	; WHIMSEY
    482  2d50				  -	      .byte	%00011100	; WHIMSEY
    483  2d50				  -	      .byte	%01111110	; WHIMSEY
    484  2d50				  -	      .byte	%01011100	; WHIMSEY
    485  2d50				  -	      .byte	%01011100	; WHIMSEY
    486  2d50				  -	      .byte	%00011100	; WHIMSEY
    487  2d50				  -	      .byte	%00011100	; WHIMSEY
    488  2d50				  -	      .byte	%00011100	; WHIMSEY
    489  2d50				  -
    490  2d50				  -			;byte %00000000 ; WHIMSEY
    491  2d50				  -
    492  2d50				  -	      .byte	%00111100	; WHIMSEY
    493  2d50				  -	      .byte	%01111110	; WHIMSEY
    494  2d50				  -	      .byte	%01111110	; WHIMSEY
    495  2d50				  -	      .byte	%01101110	; WHIMSEY
    496  2d50				  -	      .byte	%00001110	; WHIMSEY
    497  2d50				  -	      .byte	%01111100	; WHIMSEY
    498  2d50				  -	      .byte	%01110000	; WHIMSEY
    499  2d50				  -	      .byte	%01111110	; WHIMSEY
    500  2d50				  -
    501  2d50				  -			;byte %00000000 ; WHIMSEY
    502  2d50				  -
    503  2d50				  -	      .byte	%00111100	; WHIMSEY
    504  2d50				  -	      .byte	%01111110	; WHIMSEY
    505  2d50				  -	      .byte	%01111110	; WHIMSEY
    506  2d50				  -	      .byte	%01110110	; WHIMSEY
    507  2d50				  -	      .byte	%01110110	; WHIMSEY
    508  2d50				  -	      .byte	%01111100	; WHIMSEY
    509  2d50				  -	      .byte	%01110000	; WHIMSEY
    510  2d50				  -	      .byte	%00111110	; WHIMSEY
    511  2d50				  -
    512  2d50				  -			;byte %00000000 ; WHIMSEY
    513  2d50				  -
    514  2d50				  -	      .byte	%01111000	; WHIMSEY
    515  2d50				  -	      .byte	%01111000	; WHIMSEY
    516  2d50				  -	      .byte	%01111000	; WHIMSEY
    517  2d50				  -	      .byte	%00111100	; WHIMSEY
    518  2d50				  -	      .byte	%00011100	; WHIMSEY
    519  2d50				  -	      .byte	%00001110	; WHIMSEY
    520  2d50				  -	      .byte	%00001110	; WHIMSEY
    521  2d50				  -	      .byte	%01111110	; WHIMSEY
    522  2d50				  -
    523  2d50				  -			;byte %00000000 ; WHIMSEY
    524  2d50				  -
    525  2d50				  -	      .byte	%00111100	; WHIMSEY
    526  2d50				  -	      .byte	%01111110	; WHIMSEY
    527  2d50				  -	      .byte	%01111110	; WHIMSEY
    528  2d50				  -	      .byte	%01110110	; WHIMSEY
    529  2d50				  -	      .byte	%01110110	; WHIMSEY
    530  2d50				  -	      .byte	%00111100	; WHIMSEY
    531  2d50				  -	      .byte	%01110110	; WHIMSEY
    532  2d50				  -	      .byte	%00111100	; WHIMSEY
    533  2d50				  -
    534  2d50				  -			;byte %00000000 ; WHIMSEY
    535  2d50				  -
    536  2d50				  -	      .byte	%00111100	; WHIMSEY
    537  2d50				  -	      .byte	%01111110	; WHIMSEY
    538  2d50				  -	      .byte	%01111110	; WHIMSEY
    539  2d50				  -	      .byte	%01110110	; WHIMSEY
    540  2d50				  -	      .byte	%00000110	; WHIMSEY
    541  2d50				  -	      .byte	%00111110	; WHIMSEY
    542  2d50				  -	      .byte	%01110110	; WHIMSEY
    543  2d50				  -	      .byte	%00111100	; WHIMSEY
    544  2d50				  -
    545  2d50				  -	      ifconst	fontcharsHEX
    546  2d50				  -
    547  2d50				  -			;byte %00000000 ; WHIMSEY
    548  2d50				  -
    549  2d50				  -	      .byte	%01110110	; WHIMSEY
    550  2d50				  -	      .byte	%01110110	; WHIMSEY
    551  2d50				  -	      .byte	%01111110	; WHIMSEY
    552  2d50				  -	      .byte	%01111110	; WHIMSEY
    553  2d50				  -	      .byte	%01111110	; WHIMSEY
    554  2d50				  -	      .byte	%01110110	; WHIMSEY
    555  2d50				  -	      .byte	%01110110	; WHIMSEY
    556  2d50				  -	      .byte	%00111100	; WHIMSEY
    557  2d50				  -
    558  2d50				  -			;byte %00000000 ; WHIMSEY
    559  2d50				  -
    560  2d50				  -	      .byte	%01111100	; WHIMSEY
    561  2d50				  -	      .byte	%01111110	; WHIMSEY
    562  2d50				  -	      .byte	%01111110	; WHIMSEY
    563  2d50				  -	      .byte	%01110110	; WHIMSEY
    564  2d50				  -	      .byte	%01110110	; WHIMSEY
    565  2d50				  -	      .byte	%01111100	; WHIMSEY
    566  2d50				  -	      .byte	%01110110	; WHIMSEY
    567  2d50				  -	      .byte	%01111100	; WHIMSEY
    568  2d50				  -
    569  2d50				  -			;byte %00000000 ; WHIMSEY
    570  2d50				  -
    571  2d50				  -	      .byte	%00111100	; WHIMSEY
    572  2d50				  -	      .byte	%01111110	; WHIMSEY
    573  2d50				  -	      .byte	%01111110	; WHIMSEY
    574  2d50				  -	      .byte	%01110110	; WHIMSEY
    575  2d50				  -	      .byte	%01110000	; WHIMSEY
    576  2d50				  -	      .byte	%01110000	; WHIMSEY
    577  2d50				  -	      .byte	%01110110	; WHIMSEY
    578  2d50				  -	      .byte	%00111100	; WHIMSEY
    579  2d50				  -
    580  2d50				  -			;byte %00000000 ; WHIMSEY
    581  2d50				  -
    582  2d50				  -	      .byte	%01111100	; WHIMSEY
    583  2d50				  -	      .byte	%01111110	; WHIMSEY
    584  2d50				  -	      .byte	%01111110	; WHIMSEY
    585  2d50				  -	      .byte	%01111110	; WHIMSEY
    586  2d50				  -	      .byte	%01110110	; WHIMSEY
    587  2d50				  -	      .byte	%01110110	; WHIMSEY
    588  2d50				  -	      .byte	%01110110	; WHIMSEY
    589  2d50				  -	      .byte	%01111100	; WHIMSEY
    590  2d50				  -
    591  2d50				  -			;byte %00000000 ; WHIMSEY
    592  2d50				  -
    593  2d50				  -	      .byte	%01111110	; WHIMSEY
    594  2d50				  -	      .byte	%01111110	; WHIMSEY
    595  2d50				  -	      .byte	%01111110	; WHIMSEY
    596  2d50				  -	      .byte	%01110000	; WHIMSEY
    597  2d50				  -	      .byte	%01110000	; WHIMSEY
    598  2d50				  -	      .byte	%01111100	; WHIMSEY
    599  2d50				  -	      .byte	%01110000	; WHIMSEY
    600  2d50				  -	      .byte	%01111100	; WHIMSEY
    601  2d50				  -
    602  2d50				  -			;byte %00000000 ; WHIMSEY
    603  2d50				  -
    604  2d50				  -	      .byte	%01110000	; WHIMSEY
    605  2d50				  -	      .byte	%01110000	; WHIMSEY
    606  2d50				  -	      .byte	%01110000	; WHIMSEY
    607  2d50				  -	      .byte	%01110000	; WHIMSEY
    608  2d50				  -	      .byte	%01110000	; WHIMSEY
    609  2d50				  -	      .byte	%01111100	; WHIMSEY
    610  2d50				  -	      .byte	%01110000	; WHIMSEY
    611  2d50				  -	      .byte	%01111100	; WHIMSEY
    612  2d50				  -
    613  2d50				  -			;byte %00000000 ; WHIMSEY
    614  2d50				  -			;byte %00000000 ; WHIMSEY
    615  2d50				  -			;byte %00000000 ; WHIMSEY
    616  2d50				  -			;byte %00000000 ; WHIMSEY
    617  2d50				  -
    618  2d50				  -	      endif		; fontcharsHEX
    619  2d50					      endif		; WHIMSEY
    620  2d50
    621  2d50				  -	      if	fontstyle == ALARMCLOCK
    622  2d50				  -
    623  2d50				  -			;byte %00000000 ; ALARMCLOCK
    624  2d50				  -
    625  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    626  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    627  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    628  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    629  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    630  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    631  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    632  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    633  2d50				  -
    634  2d50				  -			;byte %00000000 ; ALARMCLOCK
    635  2d50				  -
    636  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    637  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    638  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    639  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    640  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    641  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    642  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    643  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    644  2d50				  -
    645  2d50				  -			;byte %00000000 ; ALARMCLOCK
    646  2d50				  -
    647  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    648  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    649  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    650  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    651  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    652  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    653  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    654  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    655  2d50				  -
    656  2d50				  -			;byte %00000000 ; ALARMCLOCK
    657  2d50				  -
    658  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    659  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    660  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    661  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    662  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    663  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    664  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    665  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    666  2d50				  -
    667  2d50				  -			;byte %00000000 ; ALARMCLOCK
    668  2d50				  -
    669  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    670  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    671  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    672  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    673  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    674  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    675  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    676  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    677  2d50				  -
    678  2d50				  -			;byte %00000000 ; ALARMCLOCK
    679  2d50				  -
    680  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    681  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    682  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    683  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    684  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    685  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    686  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    687  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    688  2d50				  -
    689  2d50				  -			;byte %00000000 ; ALARMCLOCK
    690  2d50				  -
    691  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    692  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    693  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    694  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    695  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    696  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    697  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    698  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    699  2d50				  -
    700  2d50				  -			;byte %00000000 ; ALARMCLOCK
    701  2d50				  -
    702  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    703  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    704  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    705  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    706  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    707  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    708  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    709  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    710  2d50				  -
    711  2d50				  -			;byte %00000000 ; ALARMCLOCK
    712  2d50				  -
    713  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    714  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    715  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    716  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    717  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    718  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    719  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    720  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    721  2d50				  -
    722  2d50				  -			;byte %00000000 ; ALARMCLOCK
    723  2d50				  -
    724  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    725  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    726  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    727  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    728  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    729  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    730  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    731  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    732  2d50				  -
    733  2d50				  -
    734  2d50				  -	      ifconst	fontcharsHEX
    735  2d50				  -			;byte %00000000 ; ALARMCLOCK
    736  2d50				  -
    737  2d50				  -
    738  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    739  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    740  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    741  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    742  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    743  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    744  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    745  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    746  2d50				  -
    747  2d50				  -			;byte %00000000 ; ALARMCLOCK
    748  2d50				  -
    749  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    750  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    751  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    752  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    753  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    754  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    755  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    756  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    757  2d50				  -
    758  2d50				  -			;byte %00000000 ; ALARMCLOCK
    759  2d50				  -
    760  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    761  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    762  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    763  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    764  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    765  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    766  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    767  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    768  2d50				  -
    769  2d50				  -			;byte %00000000 ; ALARMCLOCK
    770  2d50				  -
    771  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    772  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    773  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    774  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    775  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    776  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    777  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    778  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    779  2d50				  -
    780  2d50				  -			;byte %00000000 ; ALARMCLOCK
    781  2d50				  -
    782  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    783  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    784  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    785  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    786  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    787  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    788  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    789  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    790  2d50				  -
    791  2d50				  -			;byte %00000000 ; ALARMCLOCK
    792  2d50				  -
    793  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    794  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    795  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    796  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    797  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    798  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    799  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    800  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    801  2d50				  -
    802  2d50				  -			;byte %00000000 ; ALARMCLOCK
    803  2d50				  -			;byte %00000000 ; ALARMCLOCK
    804  2d50				  -			;byte %00000000 ; ALARMCLOCK
    805  2d50				  -			;byte %00000000 ; ALARMCLOCK
    806  2d50				  -
    807  2d50				  -	      endif		; fontcharsHEX
    808  2d50					      endif		; ALARMCLOCK
    809  2d50
    810  2d50				  -	      if	fontstyle == HANDWRITTEN
    811  2d50				  -
    812  2d50				  -			;byte %00000000 ; HANDWRITTEN
    813  2d50				  -
    814  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    815  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    816  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    817  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    818  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    819  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    820  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    821  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    822  2d50				  -
    823  2d50				  -			;byte %00000000 ; HANDWRITTEN
    824  2d50				  -
    825  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    826  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    827  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    828  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    829  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    830  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    831  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    832  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    833  2d50				  -
    834  2d50				  -			;byte %00000000 ; HANDWRITTEN
    835  2d50				  -
    836  2d50				  -	      .byte	%01110000	; HANDWRITTEN
    837  2d50				  -	      .byte	%01001100	; HANDWRITTEN
    838  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    839  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    840  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    841  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    842  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    843  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    844  2d50				  -
    845  2d50				  -			;byte %00000000 ; HANDWRITTEN
    846  2d50				  -
    847  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    848  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    849  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    850  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    851  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    852  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    853  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    854  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    855  2d50				  -
    856  2d50				  -			;byte %00000000 ; HANDWRITTEN
    857  2d50				  -
    858  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    859  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    860  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    861  2d50				  -	      .byte	%01111000	; HANDWRITTEN
    862  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    863  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    864  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    865  2d50				  -	      .byte	%00000010	; HANDWRITTEN
    866  2d50				  -
    867  2d50				  -			;byte %00000000 ; HANDWRITTEN
    868  2d50				  -
    869  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    870  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    871  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    872  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    873  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    874  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    875  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    876  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    877  2d50				  -
    878  2d50				  -			;byte %00000000 ; HANDWRITTEN
    879  2d50				  -
    880  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    881  2d50				  -	      .byte	%00101000	; HANDWRITTEN
    882  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    883  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    884  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    885  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    886  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    887  2d50				  -	      .byte	%00000110	; HANDWRITTEN
    888  2d50				  -
    889  2d50				  -			;byte %00000000 ; HANDWRITTEN
    890  2d50				  -
    891  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    892  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    893  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    894  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    895  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    896  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    897  2d50				  -	      .byte	%00110010	; HANDWRITTEN
    898  2d50				  -	      .byte	%00001110	; HANDWRITTEN
    899  2d50				  -
    900  2d50				  -			;byte %00000000 ; HANDWRITTEN
    901  2d50				  -
    902  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    903  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    904  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    905  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    906  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    907  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    908  2d50				  -	      .byte	%00001010	; HANDWRITTEN
    909  2d50				  -	      .byte	%00000110	; HANDWRITTEN
    910  2d50				  -
    911  2d50				  -			;byte %00000000 ; HANDWRITTEN
    912  2d50				  -
    913  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    914  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    915  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    916  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    917  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    918  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    919  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    920  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    921  2d50				  -
    922  2d50				  -	      ifconst	fontcharsHEX
    923  2d50				  -
    924  2d50				  -			;byte %00000000 ; HANDWRITTEN
    925  2d50				  -
    926  2d50				  -	      .byte	%00110110	; HANDWRITTEN
    927  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    928  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    929  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    930  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    931  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    932  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    933  2d50				  -	      .byte	%00001110	; HANDWRITTEN
    934  2d50				  -
    935  2d50				  -			;byte %00000000 ; HANDWRITTEN
    936  2d50				  -
    937  2d50				  -	      .byte	%11110000	; HANDWRITTEN
    938  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    939  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    940  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    941  2d50				  -	      .byte	%00111100	; HANDWRITTEN
    942  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    943  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    944  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    945  2d50				  -
    946  2d50				  -			;byte %00000000 ; HANDWRITTEN
    947  2d50				  -
    948  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    949  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    950  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    951  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    952  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    953  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    954  2d50				  -	      .byte	%00010100	; HANDWRITTEN
    955  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    956  2d50				  -
    957  2d50				  -			;byte %00000000 ; HANDWRITTEN
    958  2d50				  -
    959  2d50				  -	      .byte	%01111000	; HANDWRITTEN
    960  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    961  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    962  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    963  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    964  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    965  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    966  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    967  2d50				  -
    968  2d50				  -			;byte %00000000 ; HANDWRITTEN
    969  2d50				  -
    970  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    971  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    972  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    973  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    974  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    975  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    976  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    977  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    978  2d50				  -
    979  2d50				  -			;byte %00000000 ; HANDWRITTEN
    980  2d50				  -
    981  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    982  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    983  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    984  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    985  2d50				  -	      .byte	%00111000	; HANDWRITTEN
    986  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    987  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    988  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    989  2d50				  -
    990  2d50				  -			;byte %00000000 ; HANDWRITTEN
    991  2d50				  -			;byte %00000000 ; HANDWRITTEN
    992  2d50				  -			;byte %00000000 ; HANDWRITTEN
    993  2d50				  -			;byte %00000000 ; HANDWRITTEN
    994  2d50				  -
    995  2d50				  -	      endif		; fontcharsHEX
    996  2d50					      endif		; HANDWRITTEN
    997  2d50
    998  2d50				  -	      if	fontstyle == INTERRUPTED
    999  2d50				  -
   1000  2d50				  -			;byte %00000000 ; INTERRUPTED
   1001  2d50				  -
   1002  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1003  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1004  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1005  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1006  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1007  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1008  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1009  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1010  2d50				  -
   1011  2d50				  -			;byte %00000000 ; INTERRUPTED
   1012  2d50				  -
   1013  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1014  2d50				  -	      .byte	%00000000	; INTERRUPTED
   1015  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1016  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1017  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1018  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1019  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1020  2d50				  -	      .byte	%00111000	; INTERRUPTED
   1021  2d50				  -
   1022  2d50				  -			;byte %00000000 ; INTERRUPTED
   1023  2d50				  -
   1024  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1025  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1026  2d50				  -	      .byte	%00110000	; INTERRUPTED
   1027  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1028  2d50				  -	      .byte	%00001100	; INTERRUPTED
   1029  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1030  2d50				  -	      .byte	%01000110	; INTERRUPTED
   1031  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1032  2d50				  -
   1033  2d50				  -			;byte %00000000 ; INTERRUPTED
   1034  2d50				  -
   1035  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1036  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1037  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1038  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1039  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1040  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1041  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1042  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1043  2d50				  -
   1044  2d50				  -			;byte %00000000 ; INTERRUPTED
   1045  2d50				  -
   1046  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1047  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1048  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1049  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1050  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1051  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1052  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1053  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1054  2d50				  -
   1055  2d50				  -			;byte %00000000 ; INTERRUPTED
   1056  2d50				  -
   1057  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1058  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1059  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1060  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1061  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1062  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1063  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1064  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1065  2d50				  -
   1066  2d50				  -			;byte %00000000 ; INTERRUPTED
   1067  2d50				  -
   1068  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1069  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1070  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1071  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1072  2d50				  -	      .byte	%01101100	; INTERRUPTED
   1073  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1074  2d50				  -	      .byte	%00110000	; INTERRUPTED
   1075  2d50				  -	      .byte	%00011100	; INTERRUPTED
   1076  2d50				  -
   1077  2d50				  -			;byte %00000000 ; INTERRUPTED
   1078  2d50				  -
   1079  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1080  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1081  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1082  2d50				  -	      .byte	%00011100	; INTERRUPTED
   1083  2d50				  -	      .byte	%00001110	; INTERRUPTED
   1084  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1085  2d50				  -	      .byte	%00000000	; INTERRUPTED
   1086  2d50				  -	      .byte	%01111110	; INTERRUPTED
   1087  2d50				  -
   1088  2d50				  -			;byte %00000000 ; INTERRUPTED
   1089  2d50				  -
   1090  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1091  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1092  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1093  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1094  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1095  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1096  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1097  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1098  2d50				  -
   1099  2d50				  -			;byte %00000000 ; INTERRUPTED
   1100  2d50				  -
   1101  2d50				  -	      .byte	%00111000	; INTERRUPTED
   1102  2d50				  -	      .byte	%00001100	; INTERRUPTED
   1103  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1104  2d50				  -	      .byte	%00110110	; INTERRUPTED
   1105  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1106  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1107  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1108  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1109  2d50				  -
   1110  2d50				  -	      ifconst	fontcharsHEX
   1111  2d50				  -
   1112  2d50				  -			;byte %00000000 ; INTERRUPTED
   1113  2d50				  -
   1114  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1115  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1116  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1117  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1118  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1119  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1120  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1121  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1122  2d50				  -
   1123  2d50				  -			;byte %00000000 ; INTERRUPTED
   1124  2d50				  -
   1125  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1126  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1127  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1128  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1129  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1130  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1131  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1132  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1133  2d50				  -
   1134  2d50				  -			;byte %00000000 ; INTERRUPTED
   1135  2d50				  -
   1136  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1137  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1138  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1139  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1140  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1141  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1142  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1143  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1144  2d50				  -
   1145  2d50				  -			;byte %00000000 ; INTERRUPTED
   1146  2d50				  -
   1147  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1148  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1149  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1150  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1151  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1152  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1153  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1154  2d50				  -	      .byte	%01101100	; INTERRUPTED
   1155  2d50				  -
   1156  2d50				  -			;byte %00000000 ; INTERRUPTED
   1157  2d50				  -
   1158  2d50				  -	      .byte	%01111110	; INTERRUPTED
   1159  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1160  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1161  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1162  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1163  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1164  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1165  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1166  2d50				  -
   1167  2d50				  -			;byte %00000000 ; INTERRUPTED
   1168  2d50				  -
   1169  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1170  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1171  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1172  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1173  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1174  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1175  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1176  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1177  2d50				  -
   1178  2d50				  -			;byte %00000000 ; INTERRUPTED
   1179  2d50				  -			;byte %00000000 ; INTERRUPTED
   1180  2d50				  -			;byte %00000000 ; INTERRUPTED
   1181  2d50				  -			;byte %00000000 ; INTERRUPTED
   1182  2d50				  -
   1183  2d50				  -	      endif		; fontcharsHEX
   1184  2d50					      endif		; INTERRUPTED
   1185  2d50
   1186  2d50
   1187  2d50				  -	      if	fontstyle == TINY
   1188  2d50				  -
   1189  2d50				  -			;byte %00000000 ; TINY
   1190  2d50				  -
   1191  2d50				  -	      .byte	%00000000	; TINY
   1192  2d50				  -	      .byte	%00111000	; TINY
   1193  2d50				  -	      .byte	%00101000	; TINY
   1194  2d50				  -	      .byte	%00101000	; TINY
   1195  2d50				  -	      .byte	%00101000	; TINY
   1196  2d50				  -	      .byte	%00111000	; TINY
   1197  2d50				  -	      .byte	%00000000	; TINY
   1198  2d50				  -	      .byte	%00000000	; TINY
   1199  2d50				  -
   1200  2d50				  -			;byte %00000000 ; TINY
   1201  2d50				  -
   1202  2d50				  -	      .byte	%00000000	; TINY
   1203  2d50				  -	      .byte	%00010000	; TINY
   1204  2d50				  -	      .byte	%00010000	; TINY
   1205  2d50				  -	      .byte	%00010000	; TINY
   1206  2d50				  -	      .byte	%00010000	; TINY
   1207  2d50				  -	      .byte	%00010000	; TINY
   1208  2d50				  -	      .byte	%00000000	; TINY
   1209  2d50				  -	      .byte	%00000000	; TINY
   1210  2d50				  -
   1211  2d50				  -			;byte %00000000 ; TINY
   1212  2d50				  -
   1213  2d50				  -	      .byte	%00000000	; TINY
   1214  2d50				  -	      .byte	%00111000	; TINY
   1215  2d50				  -	      .byte	%00100000	; TINY
   1216  2d50				  -	      .byte	%00111000	; TINY
   1217  2d50				  -	      .byte	%00001000	; TINY
   1218  2d50				  -	      .byte	%00111000	; TINY
   1219  2d50				  -	      .byte	%00000000	; TINY
   1220  2d50				  -	      .byte	%00000000	; TINY
   1221  2d50				  -
   1222  2d50				  -			;byte %00000000 ; TINY
   1223  2d50				  -
   1224  2d50				  -	      .byte	%00000000	; TINY
   1225  2d50				  -	      .byte	%00111000	; TINY
   1226  2d50				  -	      .byte	%00001000	; TINY
   1227  2d50				  -	      .byte	%00111000	; TINY
   1228  2d50				  -	      .byte	%00001000	; TINY
   1229  2d50				  -	      .byte	%00111000	; TINY
   1230  2d50				  -	      .byte	%00000000	; TINY
   1231  2d50				  -	      .byte	%00000000	; TINY
   1232  2d50				  -
   1233  2d50				  -			;byte %00000000 ; TINY
   1234  2d50				  -
   1235  2d50				  -	      .byte	%00000000	; TINY
   1236  2d50				  -	      .byte	%00001000	; TINY
   1237  2d50				  -	      .byte	%00001000	; TINY
   1238  2d50				  -	      .byte	%00111000	; TINY
   1239  2d50				  -	      .byte	%00101000	; TINY
   1240  2d50				  -	      .byte	%00101000	; TINY
   1241  2d50				  -	      .byte	%00000000	; TINY
   1242  2d50				  -	      .byte	%00000000	; TINY
   1243  2d50				  -
   1244  2d50				  -			;byte %00000000 ; TINY
   1245  2d50				  -
   1246  2d50				  -	      .byte	%00000000	; TINY
   1247  2d50				  -	      .byte	%00111000	; TINY
   1248  2d50				  -	      .byte	%00001000	; TINY
   1249  2d50				  -	      .byte	%00111000	; TINY
   1250  2d50				  -	      .byte	%00100000	; TINY
   1251  2d50				  -	      .byte	%00111000	; TINY
   1252  2d50				  -	      .byte	%00000000	; TINY
   1253  2d50				  -	      .byte	%00000000	; TINY
   1254  2d50				  -
   1255  2d50				  -			;byte %00000000 ; TINY
   1256  2d50				  -
   1257  2d50				  -	      .byte	%00000000	; TINY
   1258  2d50				  -	      .byte	%00111000	; TINY
   1259  2d50				  -	      .byte	%00101000	; TINY
   1260  2d50				  -	      .byte	%00111000	; TINY
   1261  2d50				  -	      .byte	%00100000	; TINY
   1262  2d50				  -	      .byte	%00111000	; TINY
   1263  2d50				  -	      .byte	%00000000	; TINY
   1264  2d50				  -	      .byte	%00000000	; TINY
   1265  2d50				  -
   1266  2d50				  -			;byte %00000000 ; TINY
   1267  2d50				  -
   1268  2d50				  -	      .byte	%00000000	; TINY
   1269  2d50				  -	      .byte	%00001000	; TINY
   1270  2d50				  -	      .byte	%00001000	; TINY
   1271  2d50				  -	      .byte	%00001000	; TINY
   1272  2d50				  -	      .byte	%00001000	; TINY
   1273  2d50				  -	      .byte	%00111000	; TINY
   1274  2d50				  -	      .byte	%00000000	; TINY
   1275  2d50				  -	      .byte	%00000000	; TINY
   1276  2d50				  -
   1277  2d50				  -			;byte %00000000 ; TINY
   1278  2d50				  -
   1279  2d50				  -	      .byte	%00000000	; TINY
   1280  2d50				  -	      .byte	%00111000	; TINY
   1281  2d50				  -	      .byte	%00101000	; TINY
   1282  2d50				  -	      .byte	%00111000	; TINY
   1283  2d50				  -	      .byte	%00101000	; TINY
   1284  2d50				  -	      .byte	%00111000	; TINY
   1285  2d50				  -	      .byte	%00000000	; TINY
   1286  2d50				  -	      .byte	%00000000	; TINY
   1287  2d50				  -
   1288  2d50				  -			;byte %00000000 ; TINY
   1289  2d50				  -
   1290  2d50				  -	      .byte	%00000000	; TINY
   1291  2d50				  -	      .byte	%00001000	; TINY
   1292  2d50				  -	      .byte	%00001000	; TINY
   1293  2d50				  -	      .byte	%00111000	; TINY
   1294  2d50				  -	      .byte	%00101000	; TINY
   1295  2d50				  -	      .byte	%00111000	; TINY
   1296  2d50				  -	      .byte	%00000000	; TINY
   1297  2d50				  -	      .byte	%00000000	; TINY
   1298  2d50				  -
   1299  2d50				  -	      ifconst	fontcharsHEX
   1300  2d50				  -
   1301  2d50				  -			;byte %00000000 ; TINY
   1302  2d50				  -
   1303  2d50				  -	      .byte	%00000000	; TINY
   1304  2d50				  -	      .byte	%00101000	; TINY
   1305  2d50				  -	      .byte	%00101000	; TINY
   1306  2d50				  -	      .byte	%00111000	; TINY
   1307  2d50				  -	      .byte	%00101000	; TINY
   1308  2d50				  -	      .byte	%00111000	; TINY
   1309  2d50				  -	      .byte	%00000000	; TINY
   1310  2d50				  -	      .byte	%00000000	; TINY
   1311  2d50				  -
   1312  2d50				  -			;byte %00000000 ; TINY
   1313  2d50				  -
   1314  2d50				  -	      .byte	%00000000	; TINY
   1315  2d50				  -	      .byte	%00110000	; TINY
   1316  2d50				  -	      .byte	%00101000	; TINY
   1317  2d50				  -	      .byte	%00110000	; TINY
   1318  2d50				  -	      .byte	%00101000	; TINY
   1319  2d50				  -	      .byte	%00110000	; TINY
   1320  2d50				  -	      .byte	%00000000	; TINY
   1321  2d50				  -	      .byte	%00000000	; TINY
   1322  2d50				  -
   1323  2d50				  -			;byte %00000000 ; TINY
   1324  2d50				  -
   1325  2d50				  -	      .byte	%00000000	; TINY
   1326  2d50				  -	      .byte	%00111000	; TINY
   1327  2d50				  -	      .byte	%00100000	; TINY
   1328  2d50				  -	      .byte	%00100000	; TINY
   1329  2d50				  -	      .byte	%00100000	; TINY
   1330  2d50				  -	      .byte	%00111000	; TINY
   1331  2d50				  -	      .byte	%00000000	; TINY
   1332  2d50				  -	      .byte	%00000000	; TINY
   1333  2d50				  -
   1334  2d50				  -			;byte %00000000 ; TINY
   1335  2d50				  -
   1336  2d50				  -	      .byte	%00000000	; TINY
   1337  2d50				  -	      .byte	%00110000	; TINY
   1338  2d50				  -	      .byte	%00101000	; TINY
   1339  2d50				  -	      .byte	%00101000	; TINY
   1340  2d50				  -	      .byte	%00101000	; TINY
   1341  2d50				  -	      .byte	%00110000	; TINY
   1342  2d50				  -	      .byte	%00000000	; TINY
   1343  2d50				  -	      .byte	%00000000	; TINY
   1344  2d50				  -
   1345  2d50				  -			;byte %00000000 ; TINY
   1346  2d50				  -
   1347  2d50				  -	      .byte	%00000000	; TINY
   1348  2d50				  -	      .byte	%00111000	; TINY
   1349  2d50				  -	      .byte	%00100000	; TINY
   1350  2d50				  -	      .byte	%00111000	; TINY
   1351  2d50				  -	      .byte	%00100000	; TINY
   1352  2d50				  -	      .byte	%00111000	; TINY
   1353  2d50				  -	      .byte	%00000000	; TINY
   1354  2d50				  -	      .byte	%00000000	; TINY
   1355  2d50				  -
   1356  2d50				  -			;byte %00000000 ; TINY
   1357  2d50				  -
   1358  2d50				  -	      .byte	%00000000	; TINY
   1359  2d50				  -	      .byte	%00100000	; TINY
   1360  2d50				  -	      .byte	%00100000	; TINY
   1361  2d50				  -	      .byte	%00111000	; TINY
   1362  2d50				  -	      .byte	%00100000	; TINY
   1363  2d50				  -	      .byte	%00111000	; TINY
   1364  2d50				  -	      .byte	%00000000	; TINY
   1365  2d50				  -	      .byte	%00000000	; TINY
   1366  2d50				  -
   1367  2d50				  -			;byte %00000000 ; TINY
   1368  2d50				  -			;byte %00000000 ; TINY
   1369  2d50				  -			;byte %00000000 ; TINY
   1370  2d50				  -			;byte %00000000 ; TINY
   1371  2d50				  -
   1372  2d50				  -	      endif		; fontcharsHEX
   1373  2d50					      endif		; TINY
   1374  2d50
   1375  2d50				  -	      if	fontstyle == RETROPUTER
   1376  2d50				  -
   1377  2d50				  -			;byte %00000000 ; RETROPUTER
   1378  2d50				  -
   1379  2d50				  -	      .byte	%01111110	; RETROPUTER
   1380  2d50				  -	      .byte	%01000110	; RETROPUTER
   1381  2d50				  -	      .byte	%01000110	; RETROPUTER
   1382  2d50				  -	      .byte	%01000110	; RETROPUTER
   1383  2d50				  -	      .byte	%01100010	; RETROPUTER
   1384  2d50				  -	      .byte	%01100010	; RETROPUTER
   1385  2d50				  -	      .byte	%01100010	; RETROPUTER
   1386  2d50				  -	      .byte	%01111110	; RETROPUTER
   1387  2d50				  -
   1388  2d50				  -			;byte %00000000 ; RETROPUTER
   1389  2d50				  -
   1390  2d50				  -	      .byte	%00111000	; RETROPUTER
   1391  2d50				  -	      .byte	%00111000	; RETROPUTER
   1392  2d50				  -	      .byte	%00111000	; RETROPUTER
   1393  2d50				  -	      .byte	%00111000	; RETROPUTER
   1394  2d50				  -	      .byte	%00011000	; RETROPUTER
   1395  2d50				  -	      .byte	%00011000	; RETROPUTER
   1396  2d50				  -	      .byte	%00011000	; RETROPUTER
   1397  2d50				  -	      .byte	%00011000	; RETROPUTER
   1398  2d50				  -
   1399  2d50				  -			;byte %00000000 ; RETROPUTER
   1400  2d50				  -
   1401  2d50				  -	      .byte	%01111110	; RETROPUTER
   1402  2d50				  -	      .byte	%01100000	; RETROPUTER
   1403  2d50				  -	      .byte	%01100000	; RETROPUTER
   1404  2d50				  -	      .byte	%01100000	; RETROPUTER
   1405  2d50				  -	      .byte	%00111110	; RETROPUTER
   1406  2d50				  -	      .byte	%00000010	; RETROPUTER
   1407  2d50				  -	      .byte	%01000010	; RETROPUTER
   1408  2d50				  -	      .byte	%01111110	; RETROPUTER
   1409  2d50				  -
   1410  2d50				  -			;byte %00000000 ; RETROPUTER
   1411  2d50				  -
   1412  2d50				  -	      .byte	%01111110	; RETROPUTER
   1413  2d50				  -	      .byte	%01000110	; RETROPUTER
   1414  2d50				  -	      .byte	%00000110	; RETROPUTER
   1415  2d50				  -	      .byte	%00000110	; RETROPUTER
   1416  2d50				  -	      .byte	%00111110	; RETROPUTER
   1417  2d50				  -	      .byte	%00000010	; RETROPUTER
   1418  2d50				  -	      .byte	%01000010	; RETROPUTER
   1419  2d50				  -	      .byte	%01111110	; RETROPUTER
   1420  2d50				  -
   1421  2d50				  -			;byte %00000000 ; RETROPUTER
   1422  2d50				  -
   1423  2d50				  -	      .byte	%00001100	; RETROPUTER
   1424  2d50				  -	      .byte	%00001100	; RETROPUTER
   1425  2d50				  -	      .byte	%00001100	; RETROPUTER
   1426  2d50				  -	      .byte	%01111110	; RETROPUTER
   1427  2d50				  -	      .byte	%01000100	; RETROPUTER
   1428  2d50				  -	      .byte	%01000100	; RETROPUTER
   1429  2d50				  -	      .byte	%01000100	; RETROPUTER
   1430  2d50				  -	      .byte	%00000100	; RETROPUTER
   1431  2d50				  -
   1432  2d50				  -			;byte %00000000 ; RETROPUTER
   1433  2d50				  -
   1434  2d50				  -	      .byte	%01111110	; RETROPUTER
   1435  2d50				  -	      .byte	%01000110	; RETROPUTER
   1436  2d50				  -	      .byte	%00000110	; RETROPUTER
   1437  2d50				  -	      .byte	%00000110	; RETROPUTER
   1438  2d50				  -	      .byte	%01111100	; RETROPUTER
   1439  2d50				  -	      .byte	%01000000	; RETROPUTER
   1440  2d50				  -	      .byte	%01000000	; RETROPUTER
   1441  2d50				  -	      .byte	%01111110	; RETROPUTER
   1442  2d50				  -
   1443  2d50				  -			;byte %00000000 ; RETROPUTER
   1444  2d50				  -
   1445  2d50				  -	      .byte	%01111110	; RETROPUTER
   1446  2d50				  -	      .byte	%01000110	; RETROPUTER
   1447  2d50				  -	      .byte	%01000110	; RETROPUTER
   1448  2d50				  -	      .byte	%01000110	; RETROPUTER
   1449  2d50				  -	      .byte	%01111100	; RETROPUTER
   1450  2d50				  -	      .byte	%01000000	; RETROPUTER
   1451  2d50				  -	      .byte	%01000010	; RETROPUTER
   1452  2d50				  -	      .byte	%01111110	; RETROPUTER
   1453  2d50				  -
   1454  2d50				  -			;byte %00000000 ; RETROPUTER
   1455  2d50				  -
   1456  2d50				  -	      .byte	%00001100	; RETROPUTER
   1457  2d50				  -	      .byte	%00001100	; RETROPUTER
   1458  2d50				  -	      .byte	%00001100	; RETROPUTER
   1459  2d50				  -	      .byte	%00001100	; RETROPUTER
   1460  2d50				  -	      .byte	%00000100	; RETROPUTER
   1461  2d50				  -	      .byte	%00000010	; RETROPUTER
   1462  2d50				  -	      .byte	%01000010	; RETROPUTER
   1463  2d50				  -	      .byte	%01111110	; RETROPUTER
   1464  2d50				  -
   1465  2d50				  -			;byte %00000000 ; RETROPUTER
   1466  2d50				  -
   1467  2d50				  -	      .byte	%01111110	; RETROPUTER
   1468  2d50				  -	      .byte	%01000110	; RETROPUTER
   1469  2d50				  -	      .byte	%01000110	; RETROPUTER
   1470  2d50				  -	      .byte	%01000110	; RETROPUTER
   1471  2d50				  -	      .byte	%01111110	; RETROPUTER
   1472  2d50				  -	      .byte	%01000010	; RETROPUTER
   1473  2d50				  -	      .byte	%01000010	; RETROPUTER
   1474  2d50				  -	      .byte	%01111110	; RETROPUTER
   1475  2d50				  -
   1476  2d50				  -			;byte %00000000 ; RETROPUTER
   1477  2d50				  -
   1478  2d50				  -	      .byte	%00000110	; RETROPUTER
   1479  2d50				  -	      .byte	%00000110	; RETROPUTER
   1480  2d50				  -	      .byte	%00000110	; RETROPUTER
   1481  2d50				  -	      .byte	%00000010	; RETROPUTER
   1482  2d50				  -	      .byte	%01111110	; RETROPUTER
   1483  2d50				  -	      .byte	%01000010	; RETROPUTER
   1484  2d50				  -	      .byte	%01000010	; RETROPUTER
   1485  2d50				  -	      .byte	%01111110	; RETROPUTER
   1486  2d50				  -
   1487  2d50				  -	      ifconst	fontcharsHEX
   1488  2d50				  -
   1489  2d50				  -			;byte %00000000  ; RETROPUTER
   1490  2d50				  -
   1491  2d50				  -	      .byte	%01100010	; RETROPUTER
   1492  2d50				  -	      .byte	%01100010	; RETROPUTER
   1493  2d50				  -	      .byte	%01100010	; RETROPUTER
   1494  2d50				  -	      .byte	%01000010	; RETROPUTER
   1495  2d50				  -	      .byte	%01111110	; RETROPUTER
   1496  2d50				  -	      .byte	%01000010	; RETROPUTER
   1497  2d50				  -	      .byte	%01000010	; RETROPUTER
   1498  2d50				  -	      .byte	%01111110	; RETROPUTER
   1499  2d50				  -
   1500  2d50				  -			;byte %00000000 ; RETROPUTER
   1501  2d50				  -
   1502  2d50				  -	      .byte	%01111110	; RETROPUTER
   1503  2d50				  -	      .byte	%01100010	; RETROPUTER
   1504  2d50				  -	      .byte	%01100010	; RETROPUTER
   1505  2d50				  -	      .byte	%01000010	; RETROPUTER
   1506  2d50				  -	      .byte	%01111100	; RETROPUTER
   1507  2d50				  -	      .byte	%01000010	; RETROPUTER
   1508  2d50				  -	      .byte	%01000010	; RETROPUTER
   1509  2d50				  -	      .byte	%01111110	; RETROPUTER
   1510  2d50				  -
   1511  2d50				  -			;byte %00000000 ; RETROPUTER
   1512  2d50				  -
   1513  2d50				  -	      .byte	%01111110	; RETROPUTER
   1514  2d50				  -	      .byte	%01100010	; RETROPUTER
   1515  2d50				  -	      .byte	%01100010	; RETROPUTER
   1516  2d50				  -	      .byte	%01100000	; RETROPUTER
   1517  2d50				  -	      .byte	%01000000	; RETROPUTER
   1518  2d50				  -	      .byte	%01000000	; RETROPUTER
   1519  2d50				  -	      .byte	%01000010	; RETROPUTER
   1520  2d50				  -	      .byte	%01111110	; RETROPUTER
   1521  2d50				  -
   1522  2d50				  -			;byte %00000000 ; RETROPUTER
   1523  2d50				  -
   1524  2d50				  -	      .byte	%01111100	; RETROPUTER
   1525  2d50				  -	      .byte	%01100010	; RETROPUTER
   1526  2d50				  -	      .byte	%01100010	; RETROPUTER
   1527  2d50				  -	      .byte	%01100010	; RETROPUTER
   1528  2d50				  -	      .byte	%01000010	; RETROPUTER
   1529  2d50				  -	      .byte	%01000010	; RETROPUTER
   1530  2d50				  -	      .byte	%01000010	; RETROPUTER
   1531  2d50				  -	      .byte	%01111100	; RETROPUTER
   1532  2d50				  -
   1533  2d50				  -			;byte %00000000 ; RETROPUTER
   1534  2d50				  -
   1535  2d50				  -	      .byte	%01111110	; RETROPUTER
   1536  2d50				  -	      .byte	%01100010	; RETROPUTER
   1537  2d50				  -	      .byte	%01100000	; RETROPUTER
   1538  2d50				  -	      .byte	%01000000	; RETROPUTER
   1539  2d50				  -	      .byte	%01111100	; RETROPUTER
   1540  2d50				  -	      .byte	%01000000	; RETROPUTER
   1541  2d50				  -	      .byte	%01000010	; RETROPUTER
   1542  2d50				  -	      .byte	%01111110	; RETROPUTER
   1543  2d50				  -
   1544  2d50				  -			;byte %00000000 ; RETROPUTER
   1545  2d50				  -
   1546  2d50				  -	      .byte	%01100000	; RETROPUTER
   1547  2d50				  -	      .byte	%01100000	; RETROPUTER
   1548  2d50				  -	      .byte	%01100000	; RETROPUTER
   1549  2d50				  -	      .byte	%01000000	; RETROPUTER
   1550  2d50				  -	      .byte	%01111100	; RETROPUTER
   1551  2d50				  -	      .byte	%01000000	; RETROPUTER
   1552  2d50				  -	      .byte	%01000010	; RETROPUTER
   1553  2d50				  -	      .byte	%01111110	; RETROPUTER
   1554  2d50				  -
   1555  2d50				  -			;byte %00000000 ; RETROPUTER
   1556  2d50				  -			;byte %00000000 ; RETROPUTER
   1557  2d50				  -			;byte %00000000 ; RETROPUTER
   1558  2d50				  -			;byte %00000000 ; RETROPUTER
   1559  2d50				  -
   1560  2d50				  -	      endif		; fontcharsHEX
   1561  2d50					      endif		; RETROPUTER
   1562  2d50
   1563  2d50				  -	      if	fontstyle == CURVES
   1564  2d50				  -
   1565  2d50				  -			;byte %00000000 ; CURVES
   1566  2d50				  -
   1567  2d50				  -	      .byte	%00111100	; CURVES
   1568  2d50				  -	      .byte	%01111110	; CURVES
   1569  2d50				  -	      .byte	%01100110	; CURVES
   1570  2d50				  -	      .byte	%01100110	; CURVES
   1571  2d50				  -	      .byte	%01100110	; CURVES
   1572  2d50				  -	      .byte	%01100110	; CURVES
   1573  2d50				  -	      .byte	%01111110	; CURVES
   1574  2d50				  -	      .byte	%00111100	; CURVES
   1575  2d50				  -
   1576  2d50				  -			;byte %00000000 ; CURVES
   1577  2d50				  -
   1578  2d50				  -	      .byte	%00011000	; CURVES
   1579  2d50				  -	      .byte	%00011000	; CURVES
   1580  2d50				  -	      .byte	%00011000	; CURVES
   1581  2d50				  -	      .byte	%00011000	; CURVES
   1582  2d50				  -	      .byte	%00011000	; CURVES
   1583  2d50				  -	      .byte	%00011000	; CURVES
   1584  2d50				  -	      .byte	%01111000	; CURVES
   1585  2d50				  -	      .byte	%01110000	; CURVES
   1586  2d50				  -
   1587  2d50				  -			;byte %00000000 ; CURVES
   1588  2d50				  -
   1589  2d50				  -	      .byte	%01111110	; CURVES
   1590  2d50				  -	      .byte	%01111110	; CURVES
   1591  2d50				  -	      .byte	%01100000	; CURVES
   1592  2d50				  -	      .byte	%01111100	; CURVES
   1593  2d50				  -	      .byte	%00111110	; CURVES
   1594  2d50				  -	      .byte	%00000110	; CURVES
   1595  2d50				  -	      .byte	%01111110	; CURVES
   1596  2d50				  -	      .byte	%01111100	; CURVES
   1597  2d50				  -
   1598  2d50				  -			;byte %00000000 ; CURVES
   1599  2d50				  -
   1600  2d50				  -	      .byte	%01111100	; CURVES
   1601  2d50				  -	      .byte	%01111110	; CURVES
   1602  2d50				  -	      .byte	%00001110	; CURVES
   1603  2d50				  -	      .byte	%00111100	; CURVES
   1604  2d50				  -	      .byte	%00111100	; CURVES
   1605  2d50				  -	      .byte	%00001110	; CURVES
   1606  2d50				  -	      .byte	%01111110	; CURVES
   1607  2d50				  -	      .byte	%01111100	; CURVES
   1608  2d50				  -
   1609  2d50				  -			;byte %00000000 ; CURVES
   1610  2d50				  -
   1611  2d50				  -	      .byte	%00000110	; CURVES
   1612  2d50				  -	      .byte	%00000110	; CURVES
   1613  2d50				  -	      .byte	%00111110	; CURVES
   1614  2d50				  -	      .byte	%01111110	; CURVES
   1615  2d50				  -	      .byte	%01100110	; CURVES
   1616  2d50				  -	      .byte	%01100110	; CURVES
   1617  2d50				  -	      .byte	%01100110	; CURVES
   1618  2d50				  -	      .byte	%01100110	; CURVES
   1619  2d50				  -
   1620  2d50				  -			;byte %00000000 ; CURVES
   1621  2d50				  -
   1622  2d50				  -	      .byte	%01111100	; CURVES
   1623  2d50				  -	      .byte	%01111110	; CURVES
   1624  2d50				  -	      .byte	%00000110	; CURVES
   1625  2d50				  -	      .byte	%01111110	; CURVES
   1626  2d50				  -	      .byte	%01111100	; CURVES
   1627  2d50				  -	      .byte	%01100000	; CURVES
   1628  2d50				  -	      .byte	%01111110	; CURVES
   1629  2d50				  -	      .byte	%01111110	; CURVES
   1630  2d50				  -
   1631  2d50				  -			;byte %00000000 ; CURVES
   1632  2d50				  -
   1633  2d50				  -	      .byte	%00111100	; CURVES
   1634  2d50				  -	      .byte	%01111110	; CURVES
   1635  2d50				  -	      .byte	%01100110	; CURVES
   1636  2d50				  -	      .byte	%01111110	; CURVES
   1637  2d50				  -	      .byte	%01111100	; CURVES
   1638  2d50				  -	      .byte	%01100000	; CURVES
   1639  2d50				  -	      .byte	%01111110	; CURVES
   1640  2d50				  -	      .byte	%00111110	; CURVES
   1641  2d50				  -
   1642  2d50				  -			;byte %00000000 ; CURVES
   1643  2d50				  -
   1644  2d50				  -	      .byte	%00000110	; CURVES
   1645  2d50				  -	      .byte	%00000110	; CURVES
   1646  2d50				  -	      .byte	%00000110	; CURVES
   1647  2d50				  -	      .byte	%00000110	; CURVES
   1648  2d50				  -	      .byte	%00000110	; CURVES
   1649  2d50				  -	      .byte	%01100110	; CURVES
   1650  2d50				  -	      .byte	%01111110	; CURVES
   1651  2d50				  -	      .byte	%00111100	; CURVES
   1652  2d50				  -
   1653  2d50				  -			;byte %00000000 ; CURVES
   1654  2d50				  -
   1655  2d50				  -	      .byte	%00111100	; CURVES
   1656  2d50				  -	      .byte	%01111110	; CURVES
   1657  2d50				  -	      .byte	%01100110	; CURVES
   1658  2d50				  -	      .byte	%01111110	; CURVES
   1659  2d50				  -	      .byte	%00111100	; CURVES
   1660  2d50				  -	      .byte	%01100110	; CURVES
   1661  2d50				  -	      .byte	%01111110	; CURVES
   1662  2d50				  -	      .byte	%00111100	; CURVES
   1663  2d50				  -
   1664  2d50				  -			;byte %00000000 ; CURVES
   1665  2d50				  -
   1666  2d50				  -	      .byte	%01111100	; CURVES
   1667  2d50				  -	      .byte	%01111110	; CURVES
   1668  2d50				  -	      .byte	%00000110	; CURVES
   1669  2d50				  -	      .byte	%00111110	; CURVES
   1670  2d50				  -	      .byte	%01111110	; CURVES
   1671  2d50				  -	      .byte	%01100110	; CURVES
   1672  2d50				  -	      .byte	%01111110	; CURVES
   1673  2d50				  -	      .byte	%00111100	; CURVES
   1674  2d50				  -
   1675  2d50				  -	      ifconst	fontcharsHEX
   1676  2d50				  -
   1677  2d50				  -			;byte %00000000 ; CURVES
   1678  2d50				  -
   1679  2d50				  -	      .byte	%01100110	; CURVES
   1680  2d50				  -	      .byte	%01100110	; CURVES
   1681  2d50				  -	      .byte	%01111110	; CURVES
   1682  2d50				  -	      .byte	%01111110	; CURVES
   1683  2d50				  -	      .byte	%01100110	; CURVES
   1684  2d50				  -	      .byte	%01100110	; CURVES
   1685  2d50				  -	      .byte	%01111110	; CURVES
   1686  2d50				  -	      .byte	%00111100	; CURVES
   1687  2d50				  -
   1688  2d50				  -			;byte %00000000 ; CURVES
   1689  2d50				  -
   1690  2d50				  -	      .byte	%01111100	; CURVES
   1691  2d50				  -	      .byte	%01111110	; CURVES
   1692  2d50				  -	      .byte	%01100110	; CURVES
   1693  2d50				  -	      .byte	%01111110	; CURVES
   1694  2d50				  -	      .byte	%01111100	; CURVES
   1695  2d50				  -	      .byte	%01100110	; CURVES
   1696  2d50				  -	      .byte	%01111110	; CURVES
   1697  2d50				  -	      .byte	%01111100	; CURVES
   1698  2d50				  -
   1699  2d50				  -			;byte %00000000 ; CURVES
   1700  2d50				  -
   1701  2d50				  -	      .byte	%00111110	; CURVES
   1702  2d50				  -	      .byte	%01111110	; CURVES
   1703  2d50				  -	      .byte	%01100000	; CURVES
   1704  2d50				  -	      .byte	%01100000	; CURVES
   1705  2d50				  -	      .byte	%01100000	; CURVES
   1706  2d50				  -	      .byte	%01100000	; CURVES
   1707  2d50				  -	      .byte	%01111110	; CURVES
   1708  2d50				  -	      .byte	%00111110	; CURVES
   1709  2d50				  -
   1710  2d50				  -			;byte %00000000 ; CURVES
   1711  2d50				  -
   1712  2d50				  -	      .byte	%01111100	; CURVES
   1713  2d50				  -	      .byte	%01111110	; CURVES
   1714  2d50				  -	      .byte	%01100110	; CURVES
   1715  2d50				  -	      .byte	%01100110	; CURVES
   1716  2d50				  -	      .byte	%01100110	; CURVES
   1717  2d50				  -	      .byte	%01100110	; CURVES
   1718  2d50				  -	      .byte	%01111110	; CURVES
   1719  2d50				  -	      .byte	%01111100	; CURVES
   1720  2d50				  -
   1721  2d50				  -			;byte %00000000 ; CURVES
   1722  2d50				  -
   1723  2d50				  -	      .byte	%00111110	; CURVES
   1724  2d50				  -	      .byte	%01111110	; CURVES
   1725  2d50				  -	      .byte	%01100000	; CURVES
   1726  2d50				  -	      .byte	%01111100	; CURVES
   1727  2d50				  -	      .byte	%01111100	; CURVES
   1728  2d50				  -	      .byte	%01100000	; CURVES
   1729  2d50				  -	      .byte	%01111110	; CURVES
   1730  2d50				  -	      .byte	%00111110	; CURVES
   1731  2d50				  -
   1732  2d50				  -			;byte %00000000 ; CURVES
   1733  2d50				  -
   1734  2d50				  -	      .byte	%01100000	; CURVES
   1735  2d50				  -	      .byte	%01100000	; CURVES
   1736  2d50				  -	      .byte	%01100000	; CURVES
   1737  2d50				  -	      .byte	%01111100	; CURVES
   1738  2d50				  -	      .byte	%01111100	; CURVES
   1739  2d50				  -	      .byte	%01100000	; CURVES
   1740  2d50				  -	      .byte	%01111110	; CURVES
   1741  2d50				  -	      .byte	%00111110	; CURVES
   1742  2d50				  -
   1743  2d50				  -			;byte %00000000 ; CURVES
   1744  2d50				  -			;byte %00000000 ; CURVES
   1745  2d50				  -			;byte %00000000 ; CURVES
   1746  2d50				  -			;byte %00000000 ; CURVES
   1747  2d50				  -
   1748  2d50				  -	      endif		; fontcharsHEX 
   1749  2d50					      endif		; CURVES
   1750  2d50
   1751  2d50
   1752  2d50				  -	      if	fontstyle == HUSKY
   1753  2d50				  -
   1754  2d50				  -			;byte %00000000 ; HUSKY
   1755  2d50				  -
   1756  2d50				  -	      .byte	%01111100	; HUSKY
   1757  2d50				  -	      .byte	%11111110	; HUSKY
   1758  2d50				  -	      .byte	%11101110	; HUSKY
   1759  2d50				  -	      .byte	%11101110	; HUSKY
   1760  2d50				  -	      .byte	%11101110	; HUSKY
   1761  2d50				  -	      .byte	%11101110	; HUSKY
   1762  2d50				  -	      .byte	%11111110	; HUSKY
   1763  2d50				  -	      .byte	%01111100	; HUSKY
   1764  2d50				  -
   1765  2d50				  -			;byte %00000000 ; HUSKY
   1766  2d50				  -
   1767  2d50				  -	      .byte	%00111000	; HUSKY
   1768  2d50				  -	      .byte	%00111000	; HUSKY
   1769  2d50				  -	      .byte	%00111000	; HUSKY
   1770  2d50				  -	      .byte	%00111000	; HUSKY
   1771  2d50				  -	      .byte	%00111000	; HUSKY
   1772  2d50				  -	      .byte	%00111000	; HUSKY
   1773  2d50				  -	      .byte	%00111000	; HUSKY
   1774  2d50				  -	      .byte	%00111000	; HUSKY
   1775  2d50				  -
   1776  2d50				  -			;byte %00000000 ; HUSKY
   1777  2d50				  -
   1778  2d50				  -	      .byte	%11111110	; HUSKY
   1779  2d50				  -	      .byte	%11111110	; HUSKY
   1780  2d50				  -	      .byte	%11100000	; HUSKY
   1781  2d50				  -	      .byte	%11111100	; HUSKY
   1782  2d50				  -	      .byte	%01111110	; HUSKY
   1783  2d50				  -	      .byte	%00001110	; HUSKY
   1784  2d50				  -	      .byte	%11111110	; HUSKY
   1785  2d50				  -	      .byte	%11111100	; HUSKY
   1786  2d50				  -
   1787  2d50				  -			;byte %00000000 ; HUSKY
   1788  2d50				  -
   1789  2d50				  -	      .byte	%11111100	; HUSKY
   1790  2d50				  -	      .byte	%11111110	; HUSKY
   1791  2d50				  -	      .byte	%00001110	; HUSKY
   1792  2d50				  -	      .byte	%11111100	; HUSKY
   1793  2d50				  -	      .byte	%11111100	; HUSKY
   1794  2d50				  -	      .byte	%00001110	; HUSKY
   1795  2d50				  -	      .byte	%11111110	; HUSKY
   1796  2d50				  -	      .byte	%11111100	; HUSKY
   1797  2d50				  -
   1798  2d50				  -			;byte %00000000 ; HUSKY
   1799  2d50				  -
   1800  2d50				  -	      .byte	%00011100	; HUSKY
   1801  2d50				  -	      .byte	%00011100	; HUSKY
   1802  2d50				  -	      .byte	%11111110	; HUSKY
   1803  2d50				  -	      .byte	%11111110	; HUSKY
   1804  2d50				  -	      .byte	%11011100	; HUSKY
   1805  2d50				  -	      .byte	%11011100	; HUSKY
   1806  2d50				  -	      .byte	%00011100	; HUSKY
   1807  2d50				  -	      .byte	%00011100	; HUSKY
   1808  2d50				  -
   1809  2d50				  -			;byte %00000000 ; HUSKY
   1810  2d50				  -
   1811  2d50				  -	      .byte	%11111100	; HUSKY
   1812  2d50				  -	      .byte	%11111110	; HUSKY
   1813  2d50				  -	      .byte	%00001110	; HUSKY
   1814  2d50				  -	      .byte	%11111110	; HUSKY
   1815  2d50				  -	      .byte	%11111100	; HUSKY
   1816  2d50				  -	      .byte	%11100000	; HUSKY
   1817  2d50				  -	      .byte	%11111110	; HUSKY
   1818  2d50				  -	      .byte	%11111110	; HUSKY
   1819  2d50				  -
   1820  2d50				  -			;byte %00000000 ; HUSKY
   1821  2d50				  -
   1822  2d50				  -	      .byte	%01111100	; HUSKY
   1823  2d50				  -	      .byte	%11111110	; HUSKY
   1824  2d50				  -	      .byte	%11101110	; HUSKY
   1825  2d50				  -	      .byte	%11111110	; HUSKY
   1826  2d50				  -	      .byte	%11111100	; HUSKY
   1827  2d50				  -	      .byte	%11100000	; HUSKY
   1828  2d50				  -	      .byte	%11111110	; HUSKY
   1829  2d50				  -	      .byte	%01111110	; HUSKY
   1830  2d50				  -
   1831  2d50				  -			;byte %00000000 ; HUSKY
   1832  2d50				  -
   1833  2d50				  -	      .byte	%00111000	; HUSKY
   1834  2d50				  -	      .byte	%00111000	; HUSKY
   1835  2d50				  -	      .byte	%00111000	; HUSKY
   1836  2d50				  -	      .byte	%00111000	; HUSKY
   1837  2d50				  -	      .byte	%00011100	; HUSKY
   1838  2d50				  -	      .byte	%00001110	; HUSKY
   1839  2d50				  -	      .byte	%11111110	; HUSKY
   1840  2d50				  -	      .byte	%11111110	; HUSKY
   1841  2d50				  -
   1842  2d50				  -			;byte %00000000 ; HUSKY
   1843  2d50				  -
   1844  2d50				  -	      .byte	%01111100	; HUSKY
   1845  2d50				  -	      .byte	%11111110	; HUSKY
   1846  2d50				  -	      .byte	%11101110	; HUSKY
   1847  2d50				  -	      .byte	%11111110	; HUSKY
   1848  2d50				  -	      .byte	%01111100	; HUSKY
   1849  2d50				  -	      .byte	%11101110	; HUSKY
   1850  2d50				  -	      .byte	%11111110	; HUSKY
   1851  2d50				  -	      .byte	%01111100	; HUSKY
   1852  2d50				  -
   1853  2d50				  -			;byte %00000000 ; HUSKY
   1854  2d50				  -
   1855  2d50				  -	      .byte	%11111100	; HUSKY
   1856  2d50				  -	      .byte	%11111110	; HUSKY
   1857  2d50				  -	      .byte	%00001110	; HUSKY
   1858  2d50				  -	      .byte	%01111110	; HUSKY
   1859  2d50				  -	      .byte	%11111110	; HUSKY
   1860  2d50				  -	      .byte	%11101110	; HUSKY
   1861  2d50				  -	      .byte	%11111110	; HUSKY
   1862  2d50				  -	      .byte	%01111100	; HUSKY
   1863  2d50				  -
   1864  2d50				  -	      ifconst	fontcharsHEX
   1865  2d50				  -
   1866  2d50				  -			;byte %00000000 ; HUSKY
   1867  2d50				  -
   1868  2d50				  -	      .byte	%11101110	; HUSKY
   1869  2d50				  -	      .byte	%11101110	; HUSKY
   1870  2d50				  -	      .byte	%11111110	; HUSKY
   1871  2d50				  -	      .byte	%11111110	; HUSKY
   1872  2d50				  -	      .byte	%11101110	; HUSKY
   1873  2d50				  -	      .byte	%11111110	; HUSKY
   1874  2d50				  -	      .byte	%01111100	; HUSKY
   1875  2d50				  -	      .byte	%00111000	; HUSKY
   1876  2d50				  -
   1877  2d50				  -			;byte %00000000 ; HUSKY
   1878  2d50				  -
   1879  2d50				  -	      .byte	%11111100	; HUSKY
   1880  2d50				  -	      .byte	%11111110	; HUSKY
   1881  2d50				  -	      .byte	%11101110	; HUSKY
   1882  2d50				  -	      .byte	%11111110	; HUSKY
   1883  2d50				  -	      .byte	%11111100	; HUSKY
   1884  2d50				  -	      .byte	%11101110	; HUSKY
   1885  2d50				  -	      .byte	%11111110	; HUSKY
   1886  2d50				  -	      .byte	%11111100	; HUSKY
   1887  2d50				  -
   1888  2d50				  -			;byte %00000000 ; HUSKY
   1889  2d50				  -
   1890  2d50				  -	      .byte	%01111110	; HUSKY
   1891  2d50				  -	      .byte	%11111110	; HUSKY
   1892  2d50				  -	      .byte	%11110000	; HUSKY
   1893  2d50				  -	      .byte	%11100000	; HUSKY
   1894  2d50				  -	      .byte	%11100000	; HUSKY
   1895  2d50				  -	      .byte	%11110000	; HUSKY
   1896  2d50				  -	      .byte	%11111110	; HUSKY
   1897  2d50				  -	      .byte	%01111110	; HUSKY
   1898  2d50				  -
   1899  2d50				  -			;byte %00000000 ; HUSKY
   1900  2d50				  -
   1901  2d50				  -	      .byte	%11111000	; HUSKY
   1902  2d50				  -	      .byte	%11111100	; HUSKY
   1903  2d50				  -	      .byte	%11111110	; HUSKY
   1904  2d50				  -	      .byte	%11101110	; HUSKY
   1905  2d50				  -	      .byte	%11101110	; HUSKY
   1906  2d50				  -	      .byte	%11111110	; HUSKY
   1907  2d50				  -	      .byte	%11111100	; HUSKY
   1908  2d50				  -	      .byte	%11111000	; HUSKY
   1909  2d50				  -
   1910  2d50				  -			;byte %00000000 ; HUSKY
   1911  2d50				  -
   1912  2d50				  -	      .byte	%11111110	; HUSKY
   1913  2d50				  -	      .byte	%11111110	; HUSKY
   1914  2d50				  -	      .byte	%11100000	; HUSKY
   1915  2d50				  -	      .byte	%11111110	; HUSKY
   1916  2d50				  -	      .byte	%11111110	; HUSKY
   1917  2d50				  -	      .byte	%11100000	; HUSKY
   1918  2d50				  -	      .byte	%11111110	; HUSKY
   1919  2d50				  -	      .byte	%11111110	; HUSKY
   1920  2d50				  -
   1921  2d50				  -			;byte %00000000 ; HUSKY
   1922  2d50				  -
   1923  2d50				  -	      .byte	%11100000	; HUSKY
   1924  2d50				  -	      .byte	%11100000	; HUSKY
   1925  2d50				  -	      .byte	%11100000	; HUSKY
   1926  2d50				  -	      .byte	%11111110	; HUSKY
   1927  2d50				  -	      .byte	%11111110	; HUSKY
   1928  2d50				  -	      .byte	%11100000	; HUSKY
   1929  2d50				  -	      .byte	%11111110	; HUSKY
   1930  2d50				  -	      .byte	%11111110	; HUSKY
   1931  2d50				  -
   1932  2d50				  -			;byte %00000000 ; HUSKY
   1933  2d50				  -			;byte %00000000 ; HUSKY
   1934  2d50				  -			;byte %00000000 ; HUSKY
   1935  2d50				  -			;byte %00000000 ; HUSKY
   1936  2d50				  -
   1937  2d50				  -	      endif		; fontcharsHEX 
   1938  2d50					      endif		; HUSKY
   1939  2d50
   1940  2d50
   1941  2d50				  -	      if	fontstyle == SNAKE
   1942  2d50				  -
   1943  2d50				  -			;byte %00000000 ; SNAKE
   1944  2d50				  -
   1945  2d50				  -	      .byte	%01111110	; SNAKE
   1946  2d50				  -	      .byte	%01000010	; SNAKE
   1947  2d50				  -	      .byte	%01000010	; SNAKE
   1948  2d50				  -	      .byte	%01000010	; SNAKE
   1949  2d50				  -	      .byte	%01000010	; SNAKE
   1950  2d50				  -	      .byte	%01000010	; SNAKE
   1951  2d50				  -	      .byte	%01000010	; SNAKE
   1952  2d50				  -	      .byte	%01111110	; SNAKE
   1953  2d50				  -
   1954  2d50				  -			;byte %00000000 ; SNAKE
   1955  2d50				  -
   1956  2d50				  -	      .byte	%00111000	; SNAKE
   1957  2d50				  -	      .byte	%00101000	; SNAKE
   1958  2d50				  -	      .byte	%00001000	; SNAKE
   1959  2d50				  -	      .byte	%00001000	; SNAKE
   1960  2d50				  -	      .byte	%00001000	; SNAKE
   1961  2d50				  -	      .byte	%00001000	; SNAKE
   1962  2d50				  -	      .byte	%00001000	; SNAKE
   1963  2d50				  -	      .byte	%00111000	; SNAKE
   1964  2d50				  -
   1965  2d50				  -			;byte %00000000 ; SNAKE
   1966  2d50				  -
   1967  2d50				  -	      .byte	%01111110	; SNAKE
   1968  2d50				  -	      .byte	%01000010	; SNAKE
   1969  2d50				  -	      .byte	%01000110	; SNAKE
   1970  2d50				  -	      .byte	%01000000	; SNAKE
   1971  2d50				  -	      .byte	%01111110	; SNAKE
   1972  2d50				  -	      .byte	%00000010	; SNAKE
   1973  2d50				  -	      .byte	%01000010	; SNAKE
   1974  2d50				  -	      .byte	%01111110	; SNAKE
   1975  2d50				  -
   1976  2d50				  -			;byte %00000000 ; SNAKE
   1977  2d50				  -
   1978  2d50				  -	      .byte	%01111110	; SNAKE
   1979  2d50				  -	      .byte	%01000010	; SNAKE
   1980  2d50				  -	      .byte	%01100010	; SNAKE
   1981  2d50				  -	      .byte	%00000010	; SNAKE
   1982  2d50				  -	      .byte	%01111110	; SNAKE
   1983  2d50				  -	      .byte	%00000010	; SNAKE
   1984  2d50				  -	      .byte	%01000010	; SNAKE
   1985  2d50				  -	      .byte	%01111110	; SNAKE
   1986  2d50				  -
   1987  2d50				  -			;byte %00000000 ; SNAKE
   1988  2d50				  -
   1989  2d50				  -	      .byte	%00001110	; SNAKE
   1990  2d50				  -	      .byte	%00001010	; SNAKE
   1991  2d50				  -	      .byte	%00000010	; SNAKE
   1992  2d50				  -	      .byte	%01111110	; SNAKE
   1993  2d50				  -	      .byte	%01000010	; SNAKE
   1994  2d50				  -	      .byte	%01000010	; SNAKE
   1995  2d50				  -	      .byte	%01000010	; SNAKE
   1996  2d50				  -	      .byte	%01100110	; SNAKE
   1997  2d50				  -
   1998  2d50				  -			;byte %00000000 ; SNAKE
   1999  2d50				  -
   2000  2d50				  -	      .byte	%01111110	; SNAKE
   2001  2d50				  -	      .byte	%01000010	; SNAKE
   2002  2d50				  -	      .byte	%01100010	; SNAKE
   2003  2d50				  -	      .byte	%00000010	; SNAKE
   2004  2d50				  -	      .byte	%01111110	; SNAKE
   2005  2d50				  -	      .byte	%01000000	; SNAKE
   2006  2d50				  -	      .byte	%01000010	; SNAKE
   2007  2d50				  -	      .byte	%01111110	; SNAKE
   2008  2d50				  -
   2009  2d50				  -			;byte %00000000 ; SNAKE
   2010  2d50				  -
   2011  2d50				  -	      .byte	%01111110	; SNAKE
   2012  2d50				  -	      .byte	%01000010	; SNAKE
   2013  2d50				  -	      .byte	%01000010	; SNAKE
   2014  2d50				  -	      .byte	%01111110	; SNAKE
   2015  2d50				  -	      .byte	%01000000	; SNAKE
   2016  2d50				  -	      .byte	%01000110	; SNAKE
   2017  2d50				  -	      .byte	%01000010	; SNAKE
   2018  2d50				  -	      .byte	%01111110	; SNAKE
   2019  2d50				  -
   2020  2d50				  -			;byte %00000000 ; SNAKE
   2021  2d50				  -
   2022  2d50				  -	      .byte	%00000110	; SNAKE
   2023  2d50				  -	      .byte	%00000010	; SNAKE
   2024  2d50				  -	      .byte	%00000010	; SNAKE
   2025  2d50				  -	      .byte	%00000010	; SNAKE
   2026  2d50				  -	      .byte	%00000010	; SNAKE
   2027  2d50				  -	      .byte	%01100010	; SNAKE
   2028  2d50				  -	      .byte	%01000010	; SNAKE
   2029  2d50				  -	      .byte	%01111110	; SNAKE
   2030  2d50				  -
   2031  2d50				  -			;byte %00000000 ; SNAKE
   2032  2d50				  -
   2033  2d50				  -	      .byte	%01111110	; SNAKE
   2034  2d50				  -	      .byte	%01000010	; SNAKE
   2035  2d50				  -	      .byte	%01000010	; SNAKE
   2036  2d50				  -	      .byte	%01000010	; SNAKE
   2037  2d50				  -	      .byte	%01111110	; SNAKE
   2038  2d50				  -	      .byte	%01000010	; SNAKE
   2039  2d50				  -	      .byte	%01000010	; SNAKE
   2040  2d50				  -	      .byte	%01111110	; SNAKE
   2041  2d50				  -
   2042  2d50				  -			;byte %00000000 ; SNAKE
   2043  2d50				  -
   2044  2d50				  -	      .byte	%00001110	; SNAKE
   2045  2d50				  -	      .byte	%00001010	; SNAKE
   2046  2d50				  -	      .byte	%00000010	; SNAKE
   2047  2d50				  -	      .byte	%00000010	; SNAKE
   2048  2d50				  -	      .byte	%01111110	; SNAKE
   2049  2d50				  -	      .byte	%01000010	; SNAKE
   2050  2d50				  -	      .byte	%01000010	; SNAKE
   2051  2d50				  -	      .byte	%01111110	; SNAKE
   2052  2d50				  -
   2053  2d50				  -
   2054  2d50				  -	      ifconst	fontcharsHEX
   2055  2d50				  -
   2056  2d50				  -			;byte %00000000 ; SNAKE
   2057  2d50				  -
   2058  2d50				  -	      .byte	%01100110	; SNAKE
   2059  2d50				  -	      .byte	%01000010	; SNAKE
   2060  2d50				  -	      .byte	%01000010	; SNAKE
   2061  2d50				  -	      .byte	%01000010	; SNAKE
   2062  2d50				  -	      .byte	%01111110	; SNAKE
   2063  2d50				  -	      .byte	%01000010	; SNAKE
   2064  2d50				  -	      .byte	%01000010	; SNAKE
   2065  2d50				  -	      .byte	%01111110	; SNAKE
   2066  2d50				  -
   2067  2d50				  -			;byte %00000000 ; SNAKE
   2068  2d50				  -
   2069  2d50				  -	      .byte	%01111110	; SNAKE
   2070  2d50				  -	      .byte	%01000010	; SNAKE
   2071  2d50				  -	      .byte	%01000010	; SNAKE
   2072  2d50				  -	      .byte	%01000110	; SNAKE
   2073  2d50				  -	      .byte	%01111100	; SNAKE
   2074  2d50				  -	      .byte	%01000110	; SNAKE
   2075  2d50				  -	      .byte	%01000010	; SNAKE
   2076  2d50				  -	      .byte	%01111110	; SNAKE
   2077  2d50				  -
   2078  2d50				  -			;byte %00000000 ; SNAKE
   2079  2d50				  -
   2080  2d50				  -	      .byte	%01111110	; SNAKE
   2081  2d50				  -	      .byte	%01000010	; SNAKE
   2082  2d50				  -	      .byte	%01000110	; SNAKE
   2083  2d50				  -	      .byte	%01000000	; SNAKE
   2084  2d50				  -	      .byte	%01000000	; SNAKE
   2085  2d50				  -	      .byte	%01000110	; SNAKE
   2086  2d50				  -	      .byte	%01000010	; SNAKE
   2087  2d50				  -	      .byte	%01111110	; SNAKE
   2088  2d50				  -
   2089  2d50				  -			;byte %00000000 ; SNAKE
   2090  2d50				  -
   2091  2d50				  -	      .byte	%01111100	; SNAKE
   2092  2d50				  -	      .byte	%01000110	; SNAKE
   2093  2d50				  -	      .byte	%01000010	; SNAKE
   2094  2d50				  -	      .byte	%01000010	; SNAKE
   2095  2d50				  -	      .byte	%01000010	; SNAKE
   2096  2d50				  -	      .byte	%01000010	; SNAKE
   2097  2d50				  -	      .byte	%01000110	; SNAKE
   2098  2d50				  -	      .byte	%01111100	; SNAKE
   2099  2d50				  -
   2100  2d50				  -			;byte %00000000 ; SNAKE
   2101  2d50				  -
   2102  2d50				  -	      .byte	%01111110	; SNAKE
   2103  2d50				  -	      .byte	%01000010	; SNAKE
   2104  2d50				  -	      .byte	%01000110	; SNAKE
   2105  2d50				  -	      .byte	%01000000	; SNAKE
   2106  2d50				  -	      .byte	%01111000	; SNAKE
   2107  2d50				  -	      .byte	%01000000	; SNAKE
   2108  2d50				  -	      .byte	%01000010	; SNAKE
   2109  2d50				  -	      .byte	%01111110	; SNAKE
   2110  2d50				  -
   2111  2d50				  -			;byte %00000000 ; SNAKE
   2112  2d50				  -
   2113  2d50				  -	      .byte	%01000000	; SNAKE
   2114  2d50				  -	      .byte	%01000000	; SNAKE
   2115  2d50				  -	      .byte	%01000000	; SNAKE
   2116  2d50				  -	      .byte	%01000000	; SNAKE
   2117  2d50				  -	      .byte	%01111000	; SNAKE
   2118  2d50				  -	      .byte	%01000000	; SNAKE
   2119  2d50				  -	      .byte	%01000010	; SNAKE
   2120  2d50				  -	      .byte	%01111110	; SNAKE
   2121  2d50				  -
   2122  2d50				  -			;byte %00000000 ; SNAKE
   2123  2d50				  -			;byte %00000000 ; SNAKE
   2124  2d50				  -			;byte %00000000 ; SNAKE
   2125  2d50				  -			;byte %00000000 ; SNAKE
   2126  2d50				  -
   2127  2d50				  -	      endif		; fontcharsHEX 
   2128  2d50					      endif		; SNAKE
   2129  2d50
   2130  2d50				  -	      if	fontstyle == PLOK
   2131  2d50				  -
   2132  2d50				  -			;byte %00000000 ; PLOK
   2133  2d50				  -
   2134  2d50				  -	      .byte	%00000000	; PLOK
   2135  2d50				  -	      .byte	%00111000	; PLOK
   2136  2d50				  -	      .byte	%01100100	; PLOK
   2137  2d50				  -	      .byte	%01100010	; PLOK
   2138  2d50				  -	      .byte	%01100010	; PLOK
   2139  2d50				  -	      .byte	%00110110	; PLOK
   2140  2d50				  -	      .byte	%00011100	; PLOK
   2141  2d50				  -	      .byte	%00000000	; PLOK
   2142  2d50				  -
   2143  2d50				  -			;byte %00000000 ; PLOK
   2144  2d50				  -
   2145  2d50				  -	      .byte	%00000000	; PLOK
   2146  2d50				  -	      .byte	%00010000	; PLOK
   2147  2d50				  -	      .byte	%00011100	; PLOK
   2148  2d50				  -	      .byte	%00011100	; PLOK
   2149  2d50				  -	      .byte	%00011000	; PLOK
   2150  2d50				  -	      .byte	%00111000	; PLOK
   2151  2d50				  -	      .byte	%00011000	; PLOK
   2152  2d50				  -	      .byte	%00000000	; PLOK
   2153  2d50				  -
   2154  2d50				  -			;byte %00000000 ; PLOK
   2155  2d50				  -
   2156  2d50				  -	      .byte	%00000000	; PLOK
   2157  2d50				  -	      .byte	%00001110	; PLOK
   2158  2d50				  -	      .byte	%01111110	; PLOK
   2159  2d50				  -	      .byte	%00011000	; PLOK
   2160  2d50				  -	      .byte	%00001100	; PLOK
   2161  2d50				  -	      .byte	%00000110	; PLOK
   2162  2d50				  -	      .byte	%00111100	; PLOK
   2163  2d50				  -	      .byte	%00000000	; PLOK
   2164  2d50				  -
   2165  2d50				  -			;byte %00000000 ; PLOK
   2166  2d50				  -
   2167  2d50				  -	      .byte	%00000000	; PLOK
   2168  2d50				  -	      .byte	%00111100	; PLOK
   2169  2d50				  -	      .byte	%01101110	; PLOK
   2170  2d50				  -	      .byte	%00001110	; PLOK
   2171  2d50				  -	      .byte	%00011100	; PLOK
   2172  2d50				  -	      .byte	%00000110	; PLOK
   2173  2d50				  -	      .byte	%01111100	; PLOK
   2174  2d50				  -	      .byte	%00000000	; PLOK
   2175  2d50				  -
   2176  2d50				  -			;byte %00000000 ; PLOK
   2177  2d50				  -
   2178  2d50				  -	      .byte	%00000000	; PLOK
   2179  2d50				  -	      .byte	%00011000	; PLOK
   2180  2d50				  -	      .byte	%01111110	; PLOK
   2181  2d50				  -	      .byte	%01101100	; PLOK
   2182  2d50				  -	      .byte	%00100100	; PLOK
   2183  2d50				  -	      .byte	%00110000	; PLOK
   2184  2d50				  -	      .byte	%00110000	; PLOK
   2185  2d50				  -	      .byte	%00000000	; PLOK
   2186  2d50				  -
   2187  2d50				  -			;byte %00000000 ; PLOK
   2188  2d50				  -
   2189  2d50				  -	      .byte	%00000000	; PLOK
   2190  2d50				  -	      .byte	%00111100	; PLOK
   2191  2d50				  -	      .byte	%01001110	; PLOK
   2192  2d50				  -	      .byte	%00011100	; PLOK
   2193  2d50				  -	      .byte	%01100000	; PLOK
   2194  2d50				  -	      .byte	%01111100	; PLOK
   2195  2d50				  -	      .byte	%00011100	; PLOK
   2196  2d50				  -	      .byte	%00000000	; PLOK
   2197  2d50				  -
   2198  2d50				  -			;byte %00000000 ; PLOK
   2199  2d50				  -
   2200  2d50				  -	      .byte	%00000000	; PLOK
   2201  2d50				  -	      .byte	%00111100	; PLOK
   2202  2d50				  -	      .byte	%01000110	; PLOK
   2203  2d50				  -	      .byte	%01101100	; PLOK
   2204  2d50				  -	      .byte	%01110000	; PLOK
   2205  2d50				  -	      .byte	%00111000	; PLOK
   2206  2d50				  -	      .byte	%00010000	; PLOK
   2207  2d50				  -	      .byte	%00000000	; PLOK
   2208  2d50				  -
   2209  2d50				  -			;byte %00000000 ; PLOK
   2210  2d50				  -
   2211  2d50				  -	      .byte	%00000000	; PLOK
   2212  2d50				  -	      .byte	%00111100	; PLOK
   2213  2d50				  -	      .byte	%00011100	; PLOK
   2214  2d50				  -	      .byte	%00001100	; PLOK
   2215  2d50				  -	      .byte	%00000110	; PLOK
   2216  2d50				  -	      .byte	%01111110	; PLOK
   2217  2d50				  -	      .byte	%00110000	; PLOK
   2218  2d50				  -	      .byte	%00000000	; PLOK
   2219  2d50				  -
   2220  2d50				  -			;byte %00000000 ; PLOK
   2221  2d50				  -
   2222  2d50				  -	      .byte	%00000000	; PLOK
   2223  2d50				  -	      .byte	%00111100	; PLOK
   2224  2d50				  -	      .byte	%01001110	; PLOK
   2225  2d50				  -	      .byte	%01101110	; PLOK
   2226  2d50				  -	      .byte	%00111100	; PLOK
   2227  2d50				  -	      .byte	%01100100	; PLOK
   2228  2d50				  -	      .byte	%00111000	; PLOK
   2229  2d50				  -	      .byte	%00000000	; PLOK
   2230  2d50				  -
   2231  2d50				  -			;byte %00000000 ; PLOK
   2232  2d50				  -
   2233  2d50				  -	      .byte	%00000000	; PLOK
   2234  2d50				  -	      .byte	%00011000	; PLOK
   2235  2d50				  -	      .byte	%00001100	; PLOK
   2236  2d50				  -	      .byte	%00011100	; PLOK
   2237  2d50				  -	      .byte	%00100110	; PLOK
   2238  2d50				  -	      .byte	%01001110	; PLOK
   2239  2d50				  -	      .byte	%00111100	; PLOK
   2240  2d50				  -	      .byte	%00000000	; PLOK
   2241  2d50				  -
   2242  2d50				  -	      ifconst	fontcharsHEX
   2243  2d50				  -
   2244  2d50				  -			;byte %00000000 ; PLOK
   2245  2d50				  -
   2246  2d50				  -	      .byte	%00000000	; PLOK
   2247  2d50				  -	      .byte	%01100010	; PLOK
   2248  2d50				  -	      .byte	%01100110	; PLOK
   2249  2d50				  -	      .byte	%01111110	; PLOK
   2250  2d50				  -	      .byte	%00101100	; PLOK
   2251  2d50				  -	      .byte	%00101000	; PLOK
   2252  2d50				  -	      .byte	%00110000	; PLOK
   2253  2d50				  -	      .byte	%00000000	; PLOK
   2254  2d50				  -
   2255  2d50				  -			;byte %00000000 ; PLOK
   2256  2d50				  -
   2257  2d50				  -	      .byte	%00000000	; PLOK
   2258  2d50				  -	      .byte	%01111100	; PLOK
   2259  2d50				  -	      .byte	%00110010	; PLOK
   2260  2d50				  -	      .byte	%00110110	; PLOK
   2261  2d50				  -	      .byte	%00111100	; PLOK
   2262  2d50				  -	      .byte	%00110110	; PLOK
   2263  2d50				  -	      .byte	%01111100	; PLOK
   2264  2d50				  -	      .byte	%00000000	; PLOK
   2265  2d50				  -
   2266  2d50				  -			;byte %00000000 ; PLOK
   2267  2d50				  -
   2268  2d50				  -	      .byte	%00000000	; PLOK
   2269  2d50				  -	      .byte	%00111100	; PLOK
   2270  2d50				  -	      .byte	%01100110	; PLOK
   2271  2d50				  -	      .byte	%01100000	; PLOK
   2272  2d50				  -	      .byte	%01100100	; PLOK
   2273  2d50				  -	      .byte	%00101110	; PLOK
   2274  2d50				  -	      .byte	%00011100	; PLOK
   2275  2d50				  -	      .byte	%00000000	; PLOK
   2276  2d50				  -
   2277  2d50				  -			;byte %00000000 ; PLOK
   2278  2d50				  -
   2279  2d50				  -	      .byte	%00000000	; PLOK
   2280  2d50				  -	      .byte	%01111100	; PLOK
   2281  2d50				  -	      .byte	%00110010	; PLOK
   2282  2d50				  -	      .byte	%00110010	; PLOK
   2283  2d50				  -	      .byte	%00110110	; PLOK
   2284  2d50				  -	      .byte	%01111100	; PLOK
   2285  2d50				  -	      .byte	%01111000	; PLOK
   2286  2d50				  -	      .byte	%00000000	; PLOK
   2287  2d50				  -
   2288  2d50				  -			;byte %00000000 ; PLOK
   2289  2d50				  -
   2290  2d50				  -	      .byte	%00000000	; PLOK
   2291  2d50				  -	      .byte	%01111110	; PLOK
   2292  2d50				  -	      .byte	%00110000	; PLOK
   2293  2d50				  -	      .byte	%00111000	; PLOK
   2294  2d50				  -	      .byte	%00111100	; PLOK
   2295  2d50				  -	      .byte	%00110000	; PLOK
   2296  2d50				  -	      .byte	%01111110	; PLOK
   2297  2d50				  -	      .byte	%00000000	; PLOK
   2298  2d50				  -
   2299  2d50				  -			;byte %00000000 ; PLOK
   2300  2d50				  -
   2301  2d50				  -	      .byte	%00000000	; PLOK
   2302  2d50				  -	      .byte	%01100000	; PLOK
   2303  2d50				  -	      .byte	%01100000	; PLOK
   2304  2d50				  -	      .byte	%00111000	; PLOK
   2305  2d50				  -	      .byte	%00100000	; PLOK
   2306  2d50				  -	      .byte	%01111110	; PLOK
   2307  2d50				  -	      .byte	%00011100	; PLOK
   2308  2d50				  -	      .byte	%00000000	; PLOK
   2309  2d50				  -
   2310  2d50				  -			;byte %00000000 ; PLOK
   2311  2d50				  -			;byte %00000000 ; PLOK
   2312  2d50				  -			;byte %00000000 ; PLOK
   2313  2d50				  -			;byte %00000000 ; PLOK
   2314  2d50				  -
   2315  2d50				  -
   2316  2d50				  -	      endif		; fontcharsHEX
   2317  2d50					      endif		; PLOK
   2318  2d50
   2319  2d50							; ### any characters that aren't font specific follow... 
   2320  2d50
   2321  2d50				  -	      ifconst	fontcharSPACE
   2322  2d50				  -			;byte %00000000 ; SYMBOLS
   2323  2d50				  -
   2324  2d50				  -	      .byte	%00000000	; SYMBOLS
   2325  2d50				  -	      .byte	%00000000	; SYMBOLS
   2326  2d50				  -	      .byte	%00000000	; SYMBOLS
   2327  2d50				  -	      .byte	%00000000	; SYMBOLS
   2328  2d50				  -	      .byte	%00000000	; SYMBOLS
   2329  2d50				  -	      .byte	%00000000	; SYMBOLS
   2330  2d50				  -	      .byte	%00000000	; SYMBOLS
   2331  2d50				  -	      .byte	%00000000	; SYMBOLS
   2332  2d50				  -
   2333  2d50				  -			;byte %00000000 ; SYMBOLS
   2334  2d50					      endif		; fontcharSPACE
   2335  2d50
   2336  2d50				  -	      ifconst	fontcharDOLLAR
   2337  2d50				  -			;byte %00000000 ; SYMBOLS
   2338  2d50				  -
   2339  2d50				  -	      .byte	%00000000	; SYMBOLS
   2340  2d50				  -	      .byte	%00010000	; SYMBOLS
   2341  2d50				  -	      .byte	%01111100	; SYMBOLS
   2342  2d50				  -	      .byte	%00010010	; SYMBOLS
   2343  2d50				  -	      .byte	%01111100	; SYMBOLS
   2344  2d50				  -	      .byte	%10010000	; SYMBOLS
   2345  2d50				  -	      .byte	%01111100	; SYMBOLS
   2346  2d50				  -	      .byte	%00010000	; SYMBOLS
   2347  2d50				  -
   2348  2d50				  -			;byte %00000000 ; SYMBOLS
   2349  2d50				  -
   2350  2d50					      endif		; fontcharDOLLAR
   2351  2d50
   2352  2d50				  -	      ifconst	fontcharPOUND
   2353  2d50				  -			;byte %00000000 ; SYMBOLS
   2354  2d50				  -
   2355  2d50				  -	      .byte	%01111110	; SYMBOLS
   2356  2d50				  -	      .byte	%01000000	; SYMBOLS
   2357  2d50				  -	      .byte	%00100000	; SYMBOLS
   2358  2d50				  -	      .byte	%00100000	; SYMBOLS
   2359  2d50				  -	      .byte	%01111000	; SYMBOLS
   2360  2d50				  -	      .byte	%00100000	; SYMBOLS
   2361  2d50				  -	      .byte	%00100010	; SYMBOLS
   2362  2d50				  -	      .byte	%00011100	; SYMBOLS
   2363  2d50				  -
   2364  2d50				  -			;byte %00000000 ; SYMBOLS
   2365  2d50				  -
   2366  2d50					      endif		; fontcharPOUND
   2367  2d50
   2368  2d50
   2369  2d50				  -	      ifconst	fontcharMRHAPPY
   2370  2d50				  -			;byte %00000000 ; SYMBOLS
   2371  2d50				  -
   2372  2d50				  -	      .byte	%00111100	; SYMBOLS
   2373  2d50				  -	      .byte	%01100110	; SYMBOLS
   2374  2d50				  -	      .byte	%01011010	; SYMBOLS
   2375  2d50				  -	      .byte	%01111110	; SYMBOLS
   2376  2d50				  -	      .byte	%01111110	; SYMBOLS
   2377  2d50				  -	      .byte	%01011010	; SYMBOLS
   2378  2d50				  -	      .byte	%01111110	; SYMBOLS
   2379  2d50				  -	      .byte	%00111100	; SYMBOLS
   2380  2d50				  -
   2381  2d50				  -			;byte %00000000 ; SYMBOLS
   2382  2d50				  -
   2383  2d50					      endif		; fontcharMRHAPPY
   2384  2d50
   2385  2d50				  -	      ifconst	fontcharMRSAD
   2386  2d50				  -			;byte %00000000 ; SYMBOLS
   2387  2d50				  -
   2388  2d50				  -	      .byte	%00111100	; SYMBOLS
   2389  2d50				  -	      .byte	%01011010	; SYMBOLS
   2390  2d50				  -	      .byte	%01100110	; SYMBOLS
   2391  2d50				  -	      .byte	%01111110	; SYMBOLS
   2392  2d50				  -	      .byte	%01111110	; SYMBOLS
   2393  2d50				  -	      .byte	%01011010	; SYMBOLS
   2394  2d50				  -	      .byte	%01111110	; SYMBOLS
   2395  2d50				  -	      .byte	%00111100	; SYMBOLS
   2396  2d50				  -
   2397  2d50				  -			;byte %00000000 ; SYMBOLS
   2398  2d50				  -
   2399  2d50					      endif		; fontcharMRSAD
   2400  2d50
   2401  2d50
   2402  2d50				  -	      ifconst	fontcharCOPYRIGHT
   2403  2d50				  -			;byte %00000000 ; SYMBOLS
   2404  2d50				  -
   2405  2d50				  -	      .byte	%00000000	; SYMBOLS
   2406  2d50				  -	      .byte	%00111000	; SYMBOLS
   2407  2d50				  -	      .byte	%01000100	; SYMBOLS
   2408  2d50				  -	      .byte	%10111010	; SYMBOLS
   2409  2d50				  -	      .byte	%10100010	; SYMBOLS
   2410  2d50				  -	      .byte	%10111010	; SYMBOLS
   2411  2d50				  -	      .byte	%01000100	; SYMBOLS
   2412  2d50				  -	      .byte	%00111000	; SYMBOLS
   2413  2d50				  -
   2414  2d50				  -			;byte %00000000 ; SYMBOLS
   2415  2d50				  -
   2416  2d50					      endif		; fontcharCOPYRIGHT
   2417  2d50
   2418  2d50
   2419  2d50				  -	      ifconst	fontcharFUJI
   2420  2d50				  -
   2421  2d50				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  2d50				  -
   2423  2d50				  -	      .byte	%01110000	; SYMBOLS
   2424  2d50				  -	      .byte	%01111001	; SYMBOLS
   2425  2d50				  -	      .byte	%00011101	; SYMBOLS
   2426  2d50				  -	      .byte	%00001101	; SYMBOLS
   2427  2d50				  -	      .byte	%00001101	; SYMBOLS
   2428  2d50				  -	      .byte	%00001101	; SYMBOLS
   2429  2d50				  -	      .byte	%00001101	; SYMBOLS
   2430  2d50				  -	      .byte	%00000000	; SYMBOLS
   2431  2d50				  -
   2432  2d50				  -			;byte %00000000 ; SYMBOLS
   2433  2d50				  -
   2434  2d50				  -	      .byte	%00001110	; SYMBOLS
   2435  2d50				  -	      .byte	%10011110	; SYMBOLS
   2436  2d50				  -	      .byte	%10111000	; SYMBOLS
   2437  2d50				  -	      .byte	%10110000	; SYMBOLS
   2438  2d50				  -	      .byte	%10110000	; SYMBOLS
   2439  2d50				  -	      .byte	%10110000	; SYMBOLS
   2440  2d50				  -	      .byte	%10110000	; SYMBOLS
   2441  2d50				  -	      .byte	%00000000	; SYMBOLS
   2442  2d50				  -
   2443  2d50				  -			;byte %00000000 ; SYMBOLS
   2444  2d50				  -
   2445  2d50					      endif		; fontcharFUJI
   2446  2d50
   2447  2d50
   2448  2d50				  -	      ifconst	fontcharHEART
   2449  2d50				  -			;byte %00000000 ; SYMBOLS
   2450  2d50				  -
   2451  2d50				  -	      .byte	%00010000	; SYMBOLS
   2452  2d50				  -	      .byte	%00111000	; SYMBOLS
   2453  2d50				  -	      .byte	%01111100	; SYMBOLS
   2454  2d50				  -	      .byte	%01111100	; SYMBOLS
   2455  2d50				  -	      .byte	%11111110	; SYMBOLS
   2456  2d50				  -	      .byte	%11111110	; SYMBOLS
   2457  2d50				  -	      .byte	%11101110	; SYMBOLS
   2458  2d50				  -	      .byte	%01000100	; SYMBOLS
   2459  2d50				  -
   2460  2d50				  -			;byte %00000000 ; SYMBOLS
   2461  2d50				  -
   2462  2d50					      endif		; fontcharHEART
   2463  2d50
   2464  2d50				  -	      ifconst	fontcharDIAMOND
   2465  2d50				  -			;byte %00000000 ; SYMBOLS
   2466  2d50				  -
   2467  2d50				  -	      .byte	%00010000	; SYMBOLS
   2468  2d50				  -	      .byte	%00111000	; SYMBOLS
   2469  2d50				  -	      .byte	%01111100	; SYMBOLS
   2470  2d50				  -	      .byte	%11111110	; SYMBOLS
   2471  2d50				  -	      .byte	%11111110	; SYMBOLS
   2472  2d50				  -	      .byte	%01111100	; SYMBOLS
   2473  2d50				  -	      .byte	%00111000	; SYMBOLS
   2474  2d50				  -	      .byte	%00010000	; SYMBOLS
   2475  2d50				  -
   2476  2d50				  -			;byte %00000000 ; SYMBOLS
   2477  2d50				  -
   2478  2d50					      endif		; fontcharDIAMOND
   2479  2d50
   2480  2d50				  -	      ifconst	fontcharSPADE
   2481  2d50				  -			;byte %00000000 ; SYMBOLS
   2482  2d50				  -
   2483  2d50				  -	      .byte	%00111000	; SYMBOLS
   2484  2d50				  -	      .byte	%00010000	; SYMBOLS
   2485  2d50				  -	      .byte	%01010100	; SYMBOLS
   2486  2d50				  -	      .byte	%11111110	; SYMBOLS
   2487  2d50				  -	      .byte	%11111110	; SYMBOLS
   2488  2d50				  -	      .byte	%01111100	; SYMBOLS
   2489  2d50				  -	      .byte	%00111000	; SYMBOLS
   2490  2d50				  -	      .byte	%00010000	; SYMBOLS
   2491  2d50				  -
   2492  2d50				  -			;byte %00000000 ; SYMBOLS
   2493  2d50				  -
   2494  2d50					      endif		; fontcharSPADE
   2495  2d50
   2496  2d50				  -	      ifconst	fontcharCLUB
   2497  2d50				  -			;byte %00000000 ; SYMBOLS
   2498  2d50				  -
   2499  2d50				  -	      .byte	%00111000	; SYMBOLS
   2500  2d50				  -	      .byte	%00010000	; SYMBOLS
   2501  2d50				  -	      .byte	%11010110	; SYMBOLS
   2502  2d50				  -	      .byte	%11111110	; SYMBOLS
   2503  2d50				  -	      .byte	%11010110	; SYMBOLS
   2504  2d50				  -	      .byte	%00111000	; SYMBOLS
   2505  2d50				  -	      .byte	%00111000	; SYMBOLS
   2506  2d50				  -	      .byte	%00000000	; SYMBOLS
   2507  2d50				  -
   2508  2d50				  -			;byte %00000000 ; SYMBOLS
   2509  2d50				  -
   2510  2d50					      endif		; fontcharCLUB
   2511  2d50
   2512  2d50
   2513  2d50				  -	      ifconst	fontcharCOLON
   2514  2d50				  -			;byte %00000000 ; SYMBOLS
   2515  2d50				  -
   2516  2d50				  -	      .byte	%00000000	; SYMBOLS
   2517  2d50				  -	      .byte	%00011000	; SYMBOLS
   2518  2d50				  -	      .byte	%00011000	; SYMBOLS
   2519  2d50				  -	      .byte	%00000000	; SYMBOLS
   2520  2d50				  -	      .byte	%00000000	; SYMBOLS
   2521  2d50				  -	      .byte	%00011000	; SYMBOLS
   2522  2d50				  -	      .byte	%00011000	; SYMBOLS
   2523  2d50				  -	      .byte	%00000000	; SYMBOLS
   2524  2d50				  -
   2525  2d50				  -			;byte %00000000 ; SYMBOLS
   2526  2d50				  -
   2527  2d50					      endif		; fontcharCOLON
   2528  2d50
   2529  2d50
   2530  2d50				  -	      ifconst	fontcharBLOCK
   2531  2d50				  -
   2532  2d50				  -			;byte %00000000 ; SYMBOLS
   2533  2d50				  -
   2534  2d50				  -	      .byte	%11111111	; SYMBOLS
   2535  2d50				  -	      .byte	%11111111	; SYMBOLS
   2536  2d50				  -	      .byte	%11111111	; SYMBOLS
   2537  2d50				  -	      .byte	%11111111	; SYMBOLS
   2538  2d50				  -	      .byte	%11111111	; SYMBOLS
   2539  2d50				  -	      .byte	%11111111	; SYMBOLS
   2540  2d50				  -	      .byte	%11111111	; SYMBOLS
   2541  2d50				  -	      .byte	%11111111	; SYMBOLS
   2542  2d50				  -
   2543  2d50				  -			;byte %00000000 ; SYMBOLS
   2544  2d50				  -
   2545  2d50					      endif		; fontcharBLOCK
   2546  2d50
   2547  2d50				  -	      ifconst	fontcharUNDERLINE
   2548  2d50				  -
   2549  2d50				  -			;byte %00000000 ; SYMBOLS
   2550  2d50				  -
   2551  2d50				  -	      .byte	%11111111	; SYMBOLS
   2552  2d50				  -	      .byte	%00000000	; SYMBOLS
   2553  2d50				  -	      .byte	%00000000	; SYMBOLS
   2554  2d50				  -	      .byte	%00000000	; SYMBOLS
   2555  2d50				  -	      .byte	%00000000	; SYMBOLS
   2556  2d50				  -	      .byte	%00000000	; SYMBOLS
   2557  2d50				  -	      .byte	%00000000	; SYMBOLS
   2558  2d50				  -	      .byte	%00000000	; SYMBOLS
   2559  2d50				  -
   2560  2d50				  -			;byte %00000000 ; SYMBOLS
   2561  2d50				  -
   2562  2d50					      endif		; fontcharUNDERLINE
   2563  2d50
   2564  2d50				  -	      ifconst	fontcharARISIDE
   2565  2d50				  -			;byte %00000000 ; SYMBOLS
   2566  2d50				  -
   2567  2d50				  -	      .byte	%00000000	; SYMBOLS
   2568  2d50				  -	      .byte	%00101010	; SYMBOLS
   2569  2d50				  -	      .byte	%00101010	; SYMBOLS
   2570  2d50				  -	      .byte	%00101100	; SYMBOLS
   2571  2d50				  -	      .byte	%01111111	; SYMBOLS
   2572  2d50				  -	      .byte	%00110111	; SYMBOLS
   2573  2d50				  -	      .byte	%00000010	; SYMBOLS
   2574  2d50				  -	      .byte	%00000001	; SYMBOLS
   2575  2d50				  -
   2576  2d50				  -			;byte %00000000 ; SYMBOLS
   2577  2d50				  -
   2578  2d50					      endif		; fontcharARISIDE
   2579  2d50
   2580  2d50				  -	      ifconst	fontcharARIFACE
   2581  2d50				  -			;byte %00000000 ; SYMBOLS
   2582  2d50				  -
   2583  2d50				  -	      .byte	%00001000	; SYMBOLS
   2584  2d50				  -	      .byte	%00011100	; SYMBOLS
   2585  2d50				  -	      .byte	%00111110	; SYMBOLS
   2586  2d50				  -	      .byte	%00101010	; SYMBOLS
   2587  2d50				  -	      .byte	%00011100	; SYMBOLS
   2588  2d50				  -	      .byte	%01010100	; SYMBOLS
   2589  2d50				  -	      .byte	%00100100	; SYMBOLS
   2590  2d50				  -	      .byte	%00000010	; SYMBOLS
   2591  2d50				  -
   2592  2d50				  -			;byte %00000000 ; SYMBOLS
   2593  2d50				  -
   2594  2d50				  -
   2595  2d50					      endif		; fontcharARIRACE
   2596  2d50
------- FILE titlescreen/asm/titlescreen.asm
    170  2d50					      endif
    171  2d50
    172  2d50				  -	      ifconst	mk_gameselect_on
    173  2d50				  -	      include	"titlescreen/gameselect_image.asm"
    174  2d50					      endif
    175  2d50
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
   3740  2d50
   3741  2d50				   .
   3742  2d50							; 
   3743  2d50
   3744  2d50				   .
   3745  2d50							; 
   3746  2d50
   3747  2d50				   .L0245		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  2d50					      include	6lives_statusbar.asm
      1  2d50							; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  2d50
      3  2d50				   minikernel		; display up to 6 lives on screen
      4  2d50		       85 02		      sta	WSYNC
      5  2d52		       a2 20		      ldx	#$20
      6  2d54		       86 21		      stx	HMP1
      7  2d56		       86 25		      stx	VDELP0
      8  2d58		       a5 c2		      lda	lives
      9  2d5a		       4a		      lsr
     10  2d5b		       4a		      lsr
     11  2d5c		       4a		      lsr
     12  2d5d		       4a		      lsr
     13  2d5e		       4a		      lsr
     14  2d5f		       85 10		      sta	RESP0
     15  2d61		       85 11		      sta	RESP1
     16  2d63		       86 26		      stx	VDELP1
     17  2d65		       aa		      tax
     18  2d66		       bd 01 fe 	      lda	lifenusiz0table,x
     19  2d69		       85 04		      sta	NUSIZ0
     20  2d6b		       bd 00 fe 	      lda	lifenusiz1table,x
     21  2d6e		       85 05		      sta	NUSIZ1
     22  2d70		       a5 c0		      lda	lifecolor
     23  2d72		       85 06		      sta	COLUP0
     24  2d74		       85 07		      sta	COLUP1
     25  2d76		       a9 10		      lda	#$10
     26  2d78		       85 20		      sta	HMP0
     27  2d7a
     28  2d7a		       a5 bf		      lda	statusbarlength
     29  2d7c		       4a		      lsr
     30  2d7d		       4a		      lsr
     31  2d7e		       4a		      lsr		; 0-31
     32  2d7f							; 3 cases: 0-7, 8-15, 16-24
     33  2d7f							; if 0-7, temp1=val, temp2=0, temp3=0
     34  2d7f							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     35  2d7f							; if 16-23, temp1=255, temp2=255, temp3=val
     36  2d7f		       a8		      tay
     37  2d80
     38  2d80		       85 2a		      sta	HMOVE	;cycle 74?
     39  2d82
     40  2d82				  -	      ifconst	statusbarcolor
     41  2d82				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     42  2d82				  -	      lda	statusbarcolor
     43  2d82				  -	      sta	COLUPF
     44  2d82					      endif
     45  2d82
     46  2d82		       c0 08		      cpy	#8
     47  2d84		       90 17		      bcc	zero_7
     48  2d86		       c0 10		      cpy	#16
     49  2d88		       90 23		      bcc	eight_15
     50  2d8a		       a9 ff		      lda	#255
     51  2d8c		       85 cb		      sta	temp1
     52  2d8e		       85 cc		      sta	temp2
     53  2d90		       b9 f9 fd 	      lda	statustable-16,y
     54  2d93		       85 cd		      sta	temp3
     55  2d95		       b9 09 fe 	      lda	statustable,y
     56  2d98		       85 ce		      sta	temp4
     57  2d9a		       4c bc fd 	      jmp	startlifedisplay
     58  2d9d
     59  2d9d				   zero_7
     60  2d9d		       a9 00		      lda	#0
     61  2d9f		       85 ce		      sta	temp4
     62  2da1		       85 cd		      sta	temp3
     63  2da3		       85 cc		      sta	temp2
     64  2da5		       b9 09 fe 	      lda	statustable,y
     65  2da8		       85 cb		      sta	temp1
     66  2daa		       4c bc fd 	      jmp	startlifedisplay
     67  2dad				   eight_15
     68  2dad		       a9 ff		      lda	#255
     69  2daf		       85 cb		      sta	temp1
     70  2db1		       a9 00		      lda	#0
     71  2db3		       85 ce		      sta	temp4
     72  2db5		       85 cd		      sta	temp3
     73  2db7		       b9 19 fe 	      lda	statustable+16,y
     74  2dba		       85 cc		      sta	temp2
     75  2dbc				   startlifedisplay
     76  2dbc		       a0 07		      ldy	#7
     77  2dbe				   lifeloop
     78  2dbe		       85 02		      sta	WSYNC
     79  2dc0		       86 0d		      stx	PF0
     80  2dc2		       b1 c1		      lda	(lifepointer),y
     81  2dc4		       e0 00		      cpx	#0
     82  2dc6		       d0 01		      bne	onelife
     83  2dc8		       0c		      .byte.b	$0C
     84  2dc9				   onelife
     85  2dc9		       85 1b		      sta	GRP0
     86  2dcb
     87  2dcb		       e0 02		      cpx	#2
     88  2dcd		       b0 01		      bcs	nolives
     89  2dcf		       0c		      .byte.b	$0C
     90  2dd0				   nolives
     91  2dd0		       85 1c		      sta	GRP1
     92  2dd2		       a5 ce		      lda	temp4
     93  2dd4		       85 0d		      sta	PF0
     94  2dd6		       a5 cb		      lda	temp1
     95  2dd8		       85 0f		      sta	PF2
     96  2dda		       a5 cd		      lda	temp3
     97  2ddc		       85 0e		      sta	PF1
     98  2dde		       a5 cc		      lda	temp2
     99  2de0		       85 0f		      sta	PF2	;cycle 48!
    100  2de2		       68		      pla		; waste 14 cycles in 4 bytes
    101  2de3		       48		      pha		;
    102  2de4		       68		      pla		;
    103  2de5		       48		      pha		; Shouldn't hurt anything!
    104  2de6		       a9 00		      lda	#0
    105  2de8		       88		      dey
    106  2de9		       85 0e		      sta	PF1
    107  2deb		       10 d1		      bpl	lifeloop
    108  2ded		       85 02		      sta	WSYNC
    109  2def		       c8		      iny
    110  2df0		       84 0d		      sty	PF0
    111  2df2		       84 0f		      sty	PF2
    112  2df4		       84 0e		      sty	PF1
    113  2df6		       84 1b		      sty	GRP0
    114  2df8		       84 1c		      sty	GRP1
    115  2dfa		       60		      rts
    116  2dfb
    117  2dfb					      if	(<*) > $F5
    118  2e00		       00 00 00 00*	      align	256
    119  2e00					      endif
    120  2e00				   lifenusiz1table
    121  2e00		       00		      .byte.b	0
    122  2e01				   lifenusiz0table
    123  2e01		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    124  2e09
    125  2e09				   statustable		; warning: page-wrapping might cause issues
    126  2e09							;0-7 and 16+
    127  2e09		       00		      .byte.b	%00000000
    128  2e0a		       01		      .byte.b	%00000001
    129  2e0b		       03		      .byte.b	%00000011
    130  2e0c		       07		      .byte.b	%00000111
    131  2e0d		       0f		      .byte.b	%00001111
    132  2e0e		       1f		      .byte.b	%00011111
    133  2e0f		       3f		      .byte.b	%00111111
    134  2e10		       7f		      .byte.b	%01111111
    135  2e11		       ff		      .byte.b	255
    136  2e12		       ff		      .byte.b	255
    137  2e13		       ff		      .byte.b	255
    138  2e14		       ff		      .byte.b	255
    139  2e15		       ff		      .byte.b	255
    140  2e16		       ff		      .byte.b	255
    141  2e17		       ff		      .byte.b	255
    142  2e18		       ff		      .byte.b	255
    143  2e19							; 8-15
    144  2e19		       00		      .byte.b	0
    145  2e1a		       00		      .byte.b	0
    146  2e1b		       00		      .byte.b	0
    147  2e1c		       00		      .byte.b	0
    148  2e1d		       00		      .byte.b	0
    149  2e1e		       00		      .byte.b	0
    150  2e1f		       00		      .byte.b	0
    151  2e20		       00		      .byte.b	0
    152  2e21		       00		      .byte.b	%00000000
    153  2e22		       80		      .byte.b	%10000000
    154  2e23		       c0		      .byte.b	%11000000
    155  2e24		       e0		      .byte.b	%11100000
    156  2e25		       f0		      .byte.b	%11110000
    157  2e26		       f8		      .byte.b	%11111000
    158  2e27		       fc		      .byte.b	%11111100
    159  2e28		       fe		      .byte.b	%11111110
    160  2e29
------- FILE c:\Projects\HorizonShift_Atari2600\default.bas.asm
   3749  2e29				  -	      if	(<*) > (<(*+8))
   3750  2e29				  -	      repeat	($100-<*)
   3751  2e29				  -	      .byte	0
   3752  2e29				  -	      repend
   3753  2e29					      endif
   3754  2e29				   lives__L068
   3755  2e29		       00		      .byte.b	%00000000
   3756  2e2a		       66		      .byte.b	%01100110
   3757  2e2b		       7e		      .byte.b	%01111110
   3758  2e2c		       3c		      .byte.b	%00111100
   3759  2e2d		       3c		      .byte.b	%00111100
   3760  2e2e		       24		      .byte.b	%00100100
   3761  2e2f		       00		      .byte.b	%00000000
   3762  2e30		       00		      .byte.b	%00000000
   3763  2e31				  -	      if	(<*) > (<(*+7))
   3764  2e31				  -	      repeat	($100-<*)
   3765  2e31				  -	      .byte	0
   3766  2e31				  -	      repend
   3767  2e31					      endif
   3768  2e31					      if	(<*) < 90
   3769  2e31					      repeat	(90-<*)
   3770  2e31		       00		      .byte.b	0
   3769  2e31					      repend
   3770  2e32		       00		      .byte.b	0
   3769  2e32					      repend
   3770  2e33		       00		      .byte.b	0
   3769  2e33					      repend
   3770  2e34		       00		      .byte.b	0
   3769  2e34					      repend
   3770  2e35		       00		      .byte.b	0
   3769  2e35					      repend
   3770  2e36		       00		      .byte.b	0
   3769  2e36					      repend
   3770  2e37		       00		      .byte.b	0
   3769  2e37					      repend
   3770  2e38		       00		      .byte.b	0
   3769  2e38					      repend
   3770  2e39		       00		      .byte.b	0
   3769  2e39					      repend
   3770  2e3a		       00		      .byte.b	0
   3769  2e3a					      repend
   3770  2e3b		       00		      .byte.b	0
   3769  2e3b					      repend
   3770  2e3c		       00		      .byte.b	0
   3769  2e3c					      repend
   3770  2e3d		       00		      .byte.b	0
   3769  2e3d					      repend
   3770  2e3e		       00		      .byte.b	0
   3769  2e3e					      repend
   3770  2e3f		       00		      .byte.b	0
   3769  2e3f					      repend
   3770  2e40		       00		      .byte.b	0
   3769  2e40					      repend
   3770  2e41		       00		      .byte.b	0
   3769  2e41					      repend
   3770  2e42		       00		      .byte.b	0
   3769  2e42					      repend
   3770  2e43		       00		      .byte.b	0
   3769  2e43					      repend
   3770  2e44		       00		      .byte.b	0
   3769  2e44					      repend
   3770  2e45		       00		      .byte.b	0
   3769  2e45					      repend
   3770  2e46		       00		      .byte.b	0
   3769  2e46					      repend
   3770  2e47		       00		      .byte.b	0
   3769  2e47					      repend
   3770  2e48		       00		      .byte.b	0
   3769  2e48					      repend
   3770  2e49		       00		      .byte.b	0
   3769  2e49					      repend
   3770  2e4a		       00		      .byte.b	0
   3769  2e4a					      repend
   3770  2e4b		       00		      .byte.b	0
   3769  2e4b					      repend
   3770  2e4c		       00		      .byte.b	0
   3769  2e4c					      repend
   3770  2e4d		       00		      .byte.b	0
   3769  2e4d					      repend
   3770  2e4e		       00		      .byte.b	0
   3769  2e4e					      repend
   3770  2e4f		       00		      .byte.b	0
   3769  2e4f					      repend
   3770  2e50		       00		      .byte.b	0
   3769  2e50					      repend
   3770  2e51		       00		      .byte.b	0
   3769  2e51					      repend
   3770  2e52		       00		      .byte.b	0
   3769  2e52					      repend
   3770  2e53		       00		      .byte.b	0
   3769  2e53					      repend
   3770  2e54		       00		      .byte.b	0
   3769  2e54					      repend
   3770  2e55		       00		      .byte.b	0
   3769  2e55					      repend
   3770  2e56		       00		      .byte.b	0
   3769  2e56					      repend
   3770  2e57		       00		      .byte.b	0
   3769  2e57					      repend
   3770  2e58		       00		      .byte.b	0
   3769  2e58					      repend
   3770  2e59		       00		      .byte.b	0
   3771  2e5a					      repend
   3772  2e5a					      endif
   3773  2e5a				   playerL069_1
   3774  2e5a		       18		      .byte.b	%00011000
   3775  2e5b		       f8		      .byte.b	%11111000
   3776  2e5c		       fe		      .byte.b	%11111110
   3777  2e5d		       7e		      .byte.b	%01111110
   3778  2e5e		       7e		      .byte.b	%01111110
   3779  2e5f		       ff		      .byte.b	%11111111
   3780  2e60		       ff		      .byte.b	%11111111
   3781  2e61		       78		      .byte.b	%01111000
   3782  2e62				  -	      if	(<*) > (<(*+7))
   3783  2e62				  -	      repeat	($100-<*)
   3784  2e62				  -	      .byte	0
   3785  2e62				  -	      repend
   3786  2e62					      endif
   3787  2e62				  -	      if	(<*) < 90
   3788  2e62				  -	      repeat	(90-<*)
   3789  2e62				  -	      .byte	0
   3790  2e62				  -	      repend
   3791  2e62					      endif
   3792  2e62				   playerL070_3
   3793  2e62		       18		      .byte.b	%00011000
   3794  2e63		       f8		      .byte.b	%11111000
   3795  2e64		       fe		      .byte.b	%11111110
   3796  2e65		       7e		      .byte.b	%01111110
   3797  2e66		       7e		      .byte.b	%01111110
   3798  2e67		       ff		      .byte.b	%11111111
   3799  2e68		       ff		      .byte.b	%11111111
   3800  2e69		       78		      .byte.b	%01111000
   3801  2e6a				  -	      if	(<*) > (<(*+8))
   3802  2e6a				  -	      repeat	($100-<*)
   3803  2e6a				  -	      .byte	0
   3804  2e6a				  -	      repend
   3805  2e6a					      endif
   3806  2e6a				  -	      if	(<*) < 90
   3807  2e6a				  -	      repeat	(90-<*)
   3808  2e6a				  -	      .byte	0
   3809  2e6a				  -	      repend
   3810  2e6a					      endif
   3811  2e6a				   playerL0106_0
   3812  2e6a		       00		      .byte.b	0
   3813  2e6b		       00		      .byte.b	%00000000
   3814  2e6c		       66		      .byte.b	%01100110
   3815  2e6d		       7e		      .byte.b	%01111110
   3816  2e6e		       3c		      .byte.b	%00111100
   3817  2e6f		       24		      .byte.b	%00100100
   3818  2e70		       00		      .byte.b	%00000000
   3819  2e71		       00		      .byte.b	%00000000
   3820  2e72		       00		      .byte.b	%00000000
   3821  2e73				  -	      if	(<*) > (<(*+7))
   3822  2e73				  -	      repeat	($100-<*)
   3823  2e73				  -	      .byte	0
   3824  2e73				  -	      repend
   3825  2e73					      endif
   3826  2e73				  -	      if	(<*) < 90
   3827  2e73				  -	      repeat	(90-<*)
   3828  2e73				  -	      .byte	0
   3829  2e73				  -	      repend
   3830  2e73					      endif
   3831  2e73				   player34then_2
   3832  2e73		       c3		      .byte.b	%11000011
   3833  2e74		       5a		      .byte.b	%01011010
   3834  2e75		       7e		      .byte.b	%01111110
   3835  2e76		       24		      .byte.b	%00100100
   3836  2e77		       24		      .byte.b	%00100100
   3837  2e78		       7e		      .byte.b	%01111110
   3838  2e79		       5a		      .byte.b	%01011010
   3839  2e7a		       c3		      .byte.b	%11000011
   3840  2e7b				  -	      if	(<*) > (<(*+7))
   3841  2e7b				  -	      repeat	($100-<*)
   3842  2e7b				  -	      .byte	0
   3843  2e7b				  -	      repend
   3844  2e7b					      endif
   3845  2e7b				  -	      if	(<*) < 90
   3846  2e7b				  -	      repeat	(90-<*)
   3847  2e7b				  -	      .byte	0
   3848  2e7b				  -	      repend
   3849  2e7b					      endif
   3850  2e7b				   player35then_2
   3851  2e7b		       66		      .byte.b	%01100110
   3852  2e7c		       5a		      .byte.b	%01011010
   3853  2e7d		       7e		      .byte.b	%01111110
   3854  2e7e		       24		      .byte.b	%00100100
   3855  2e7f		       24		      .byte.b	%00100100
   3856  2e80		       7e		      .byte.b	%01111110
   3857  2e81		       5a		      .byte.b	%01011010
   3858  2e82		       66		      .byte.b	%01100110
   3859  2e83				  -	      if	(<*) > (<(*+7))
   3860  2e83				  -	      repeat	($100-<*)
   3861  2e83				  -	      .byte	0
   3862  2e83				  -	      repend
   3863  2e83					      endif
   3864  2e83				  -	      if	(<*) < 90
   3865  2e83				  -	      repeat	(90-<*)
   3866  2e83				  -	      .byte	0
   3867  2e83				  -	      repend
   3868  2e83					      endif
   3869  2e83				   player36then_2
   3870  2e83		       78		      .byte.b	%01111000
   3871  2e84		       ff		      .byte.b	%11111111
   3872  2e85		       ff		      .byte.b	%11111111
   3873  2e86		       7e		      .byte.b	%01111110
   3874  2e87		       7e		      .byte.b	%01111110
   3875  2e88		       fe		      .byte.b	%11111110
   3876  2e89		       f8		      .byte.b	%11111000
   3877  2e8a		       18		      .byte.b	%00011000
   3878  2e8b				  -	      if	(<*) > (<(*+7))
   3879  2e8b				  -	      repeat	($100-<*)
   3880  2e8b				  -	      .byte	0
   3881  2e8b				  -	      repend
   3882  2e8b					      endif
   3883  2e8b				  -	      if	(<*) < 90
   3884  2e8b				  -	      repeat	(90-<*)
   3885  2e8b				  -	      .byte	0
   3886  2e8b				  -	      repend
   3887  2e8b					      endif
   3888  2e8b				   player37then_4
   3889  2e8b		       81		      .byte.b	%10000001
   3890  2e8c		       42		      .byte.b	%01000010
   3891  2e8d		       7e		      .byte.b	%01111110
   3892  2e8e		       5a		      .byte.b	%01011010
   3893  2e8f		       5a		      .byte.b	%01011010
   3894  2e90		       7e		      .byte.b	%01111110
   3895  2e91		       42		      .byte.b	%01000010
   3896  2e92		       81		      .byte.b	%10000001
   3897  2e93				  -	      if	(<*) > (<(*+7))
   3898  2e93				  -	      repeat	($100-<*)
   3899  2e93				  -	      .byte	0
   3900  2e93				  -	      repend
   3901  2e93					      endif
   3902  2e93				  -	      if	(<*) < 90
   3903  2e93				  -	      repeat	(90-<*)
   3904  2e93				  -	      .byte	0
   3905  2e93				  -	      repend
   3906  2e93					      endif
   3907  2e93				   player38then_4
   3908  2e93		       42		      .byte.b	%01000010
   3909  2e94		       42		      .byte.b	%01000010
   3910  2e95		       7e		      .byte.b	%01111110
   3911  2e96		       5a		      .byte.b	%01011010
   3912  2e97		       5a		      .byte.b	%01011010
   3913  2e98		       7e		      .byte.b	%01111110
   3914  2e99		       42		      .byte.b	%01000010
   3915  2e9a		       42		      .byte.b	%01000010
   3916  2e9b				  -	      if	(<*) > (<(*+7))
   3917  2e9b				  -	      repeat	($100-<*)
   3918  2e9b				  -	      .byte	0
   3919  2e9b				  -	      repend
   3920  2e9b					      endif
   3921  2e9b				  -	      if	(<*) < 90
   3922  2e9b				  -	      repeat	(90-<*)
   3923  2e9b				  -	      .byte	0
   3924  2e9b				  -	      repend
   3925  2e9b					      endif
   3926  2e9b				   player39then_5
   3927  2e9b		       91		      .byte.b	%10010001
   3928  2e9c		       5a		      .byte.b	%01011010
   3929  2e9d		       24		      .byte.b	%00100100
   3930  2e9e		       db		      .byte.b	%11011011
   3931  2e9f		       5a		      .byte.b	%01011010
   3932  2ea0		       24		      .byte.b	%00100100
   3933  2ea1		       5a		      .byte.b	%01011010
   3934  2ea2		       89		      .byte.b	%10001001
   3935  2ea3				  -	      if	(<*) > (<(*+7))
   3936  2ea3				  -	      repeat	($100-<*)
   3937  2ea3				  -	      .byte	0
   3938  2ea3				  -	      repend
   3939  2ea3					      endif
   3940  2ea3				  -	      if	(<*) < 90
   3941  2ea3				  -	      repeat	(90-<*)
   3942  2ea3				  -	      .byte	0
   3943  2ea3				  -	      repend
   3944  2ea3					      endif
   3945  2ea3				   player40then_5
   3946  2ea3		       91		      .byte.b	%10010001
   3947  2ea4		       5a		      .byte.b	%01011010
   3948  2ea5		       24		      .byte.b	%00100100
   3949  2ea6		       42		      .byte.b	%01000010
   3950  2ea7		       43		      .byte.b	%01000011
   3951  2ea8		       24		      .byte.b	%00100100
   3952  2ea9		       5a		      .byte.b	%01011010
   3953  2eaa		       89		      .byte.b	%10001001
   3954  2eab				  -	      if	(<*) > (<(*+7))
   3955  2eab				  -	      repeat	($100-<*)
   3956  2eab				  -	      .byte	0
   3957  2eab				  -	      repend
   3958  2eab					      endif
   3959  2eab				  -	      if	(<*) < 90
   3960  2eab				  -	      repeat	(90-<*)
   3961  2eab				  -	      .byte	0
   3962  2eab				  -	      repend
   3963  2eab					      endif
   3964  2eab				   player41then_5
   3965  2eab		       91		      .byte.b	%10010001
   3966  2eac		       5a		      .byte.b	%01011010
   3967  2ead		       24		      .byte.b	%00100100
   3968  2eae		       db		      .byte.b	%11011011
   3969  2eaf		       5a		      .byte.b	%01011010
   3970  2eb0		       24		      .byte.b	%00100100
   3971  2eb1		       5a		      .byte.b	%01011010
   3972  2eb2		       89		      .byte.b	%10001001
   3973  2eb3				  -	      if	((>(*+11)) > (>*))
   3974  2eb3				  -	      ALIGN	256
   3975  2eb3					      endif
   3976  2eb3				   PF1_data0
   3977  2eb3		       7f		      .byte.b	%01111111
   3978  2eb4		       6b		      .byte.b	%01101011
   3979  2eb5		       7f		      .byte.b	%01111111
   3980  2eb6		       6b		      .byte.b	%01101011
   3981  2eb7		       3e		      .byte.b	%00111110
   3982  2eb8		       00		      .byte.b	%00000000
   3983  2eb9		       00		      .byte.b	%00000000
   3984  2eba		       00		      .byte.b	%00000000
   3985  2ebb		       00		      .byte.b	%00000000
   3986  2ebc		       00		      .byte.b	%00000000
   3987  2ebd		       00		      .byte.b	%00000000
   3988  2ebe				  -	      if	((>(*+11)) > (>*))
   3989  2ebe				  -	      ALIGN	256
   3990  2ebe					      endif
   3991  2ebe				   PF2_data0
   3992  2ebe		       7c		      .byte.b	%01111100
   3993  2ebf		       54		      .byte.b	%01010100
   3994  2ec0		       7c		      .byte.b	%01111100
   3995  2ec1		       54		      .byte.b	%01010100
   3996  2ec2		       7c		      .byte.b	%01111100
   3997  2ec3		       00		      .byte.b	%00000000
   3998  2ec4		       00		      .byte.b	%00000000
   3999  2ec5		       00		      .byte.b	%00000000
   4000  2ec6		       00		      .byte.b	%00000000
   4001  2ec7		       00		      .byte.b	%00000000
   4002  2ec8		       00		      .byte.b	%00000000
   4003  2ec9					      if	ECHOFIRST
      171 bytes of ROM space left in bank 2
   4004  2ec9					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   4005  2ec9					      endif
   4006  2ec9		       00 01	   ECHOFIRST  =	1
   4007  2ec9
   4008  2ec9
   4009  2ec9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4010  2ec9
   4011  2ec9							; feel free to modify the score graphics - just keep each digit 8 high
   4012  2ec9							; and keep the conditional compilation stuff intact
   4013  2ec9				  -	      ifconst	ROM2k
   4014  2ec9				  -	      ORG	$F7AC-8
   4015  2ec9					      else
   4016  2ec9					      ifconst	bankswitch
   4017  2ec9					      if	bankswitch == 8
   4018  2f74					      ORG	$2F94-bscode_length
   4019  2f74					      RORG	$FF94-bscode_length
   4020  2f74					      endif
   4021  2f74				  -	      if	bankswitch == 16
   4022  2f74				  -	      ORG	$4F94-bscode_length
   4023  2f74				  -	      RORG	$FF94-bscode_length
   4024  2f74					      endif
   4025  2f74				  -	      if	bankswitch == 32
   4026  2f74				  -	      ORG	$8F94-bscode_length
   4027  2f74				  -	      RORG	$FF94-bscode_length
   4028  2f74					      endif
   4029  2f74				  -	      if	bankswitch == 64
   4030  2f74				  -	      ORG	$10F80-bscode_length
   4031  2f74				  -	      RORG	$1FF80-bscode_length
   4032  2f74					      endif
   4033  2f74				  -	      else
   4034  2f74				  -	      ORG	$FF9C
   4035  2f74					      endif
   4036  2f74					      endif
   4037  2f74
   4038  2f74							; font equates
   4039  2f74		       00 01	   .21stcentury =	1
   4040  2f74		       00 02	   alarmclock =	2
   4041  2f74		       00 03	   handwritten =	3
   4042  2f74		       00 04	   interrupted =	4
   4043  2f74		       00 05	   retroputer =	5
   4044  2f74		       00 06	   whimsey    =	6
   4045  2f74		       00 07	   tiny       =	7
   4046  2f74		       00 08	   hex	      =	8
   4047  2f74
   4048  2f74				  -	      ifconst	font
   4049  2f74				  -	      if	font == hex
   4050  2f74				  -	      ORG	. - 48
   4051  2f74				  -	      endif
   4052  2f74					      endif
   4053  2f74
   4054  2f74				   scoretable
   4055  2f74
   4056  2f74				  -	      ifconst	font
   4057  2f74				  -	      if	font == .21stcentury
   4058  2f74				  -	      include	"score_graphics.asm.21stcentury"
   4059  2f74				  -	      endif
   4060  2f74				  -	      if	font == alarmclock
   4061  2f74				  -	      include	"score_graphics.asm.alarmclock"
   4062  2f74				  -	      endif
   4063  2f74				  -	      if	font == handwritten
   4064  2f74				  -	      include	"score_graphics.asm.handwritten"
   4065  2f74				  -	      endif
   4066  2f74				  -	      if	font == interrupted
   4067  2f74				  -	      include	"score_graphics.asm.interrupted"
   4068  2f74				  -	      endif
   4069  2f74				  -	      if	font == retroputer
   4070  2f74				  -	      include	"score_graphics.asm.retroputer"
   4071  2f74				  -	      endif
   4072  2f74				  -	      if	font == whimsey
   4073  2f74				  -	      include	"score_graphics.asm.whimsey"
   4074  2f74				  -	      endif
   4075  2f74				  -	      if	font == tiny
   4076  2f74				  -	      include	"score_graphics.asm.tiny"
   4077  2f74				  -	      endif
   4078  2f74				  -	      if	font == hex
   4079  2f74				  -	      include	"score_graphics.asm.hex"
   4080  2f74				  -	      endif
   4081  2f74					      else		; default font
   4082  2f74
   4083  2f74		       3c		      .byte.b	%00111100
   4084  2f75		       66		      .byte.b	%01100110
   4085  2f76		       66		      .byte.b	%01100110
   4086  2f77		       66		      .byte.b	%01100110
   4087  2f78		       66		      .byte.b	%01100110
   4088  2f79		       66		      .byte.b	%01100110
   4089  2f7a		       66		      .byte.b	%01100110
   4090  2f7b		       3c		      .byte.b	%00111100
   4091  2f7c
   4092  2f7c		       7e		      .byte.b	%01111110
   4093  2f7d		       18		      .byte.b	%00011000
   4094  2f7e		       18		      .byte.b	%00011000
   4095  2f7f		       18		      .byte.b	%00011000
   4096  2f80		       18		      .byte.b	%00011000
   4097  2f81		       38		      .byte.b	%00111000
   4098  2f82		       18		      .byte.b	%00011000
   4099  2f83		       08		      .byte.b	%00001000
   4100  2f84
   4101  2f84		       7e		      .byte.b	%01111110
   4102  2f85		       60		      .byte.b	%01100000
   4103  2f86		       60		      .byte.b	%01100000
   4104  2f87		       3c		      .byte.b	%00111100
   4105  2f88		       06		      .byte.b	%00000110
   4106  2f89		       06		      .byte.b	%00000110
   4107  2f8a		       46		      .byte.b	%01000110
   4108  2f8b		       3c		      .byte.b	%00111100
   4109  2f8c
   4110  2f8c		       3c		      .byte.b	%00111100
   4111  2f8d		       46		      .byte.b	%01000110
   4112  2f8e		       06		      .byte.b	%00000110
   4113  2f8f		       06		      .byte.b	%00000110
   4114  2f90		       1c		      .byte.b	%00011100
   4115  2f91		       06		      .byte.b	%00000110
   4116  2f92		       46		      .byte.b	%01000110
   4117  2f93		       3c		      .byte.b	%00111100
   4118  2f94
   4119  2f94		       0c		      .byte.b	%00001100
   4120  2f95		       0c		      .byte.b	%00001100
   4121  2f96		       7e		      .byte.b	%01111110
   4122  2f97		       4c		      .byte.b	%01001100
   4123  2f98		       4c		      .byte.b	%01001100
   4124  2f99		       2c		      .byte.b	%00101100
   4125  2f9a		       1c		      .byte.b	%00011100
   4126  2f9b		       0c		      .byte.b	%00001100
   4127  2f9c
   4128  2f9c		       3c		      .byte.b	%00111100
   4129  2f9d		       46		      .byte.b	%01000110
   4130  2f9e		       06		      .byte.b	%00000110
   4131  2f9f		       06		      .byte.b	%00000110
   4132  2fa0		       3c		      .byte.b	%00111100
   4133  2fa1		       60		      .byte.b	%01100000
   4134  2fa2		       60		      .byte.b	%01100000
   4135  2fa3		       7e		      .byte.b	%01111110
   4136  2fa4
   4137  2fa4		       3c		      .byte.b	%00111100
   4138  2fa5		       66		      .byte.b	%01100110
   4139  2fa6		       66		      .byte.b	%01100110
   4140  2fa7		       66		      .byte.b	%01100110
   4141  2fa8		       7c		      .byte.b	%01111100
   4142  2fa9		       60		      .byte.b	%01100000
   4143  2faa		       62		      .byte.b	%01100010
   4144  2fab		       3c		      .byte.b	%00111100
   4145  2fac
   4146  2fac		       30		      .byte.b	%00110000
   4147  2fad		       30		      .byte.b	%00110000
   4148  2fae		       30		      .byte.b	%00110000
   4149  2faf		       18		      .byte.b	%00011000
   4150  2fb0		       0c		      .byte.b	%00001100
   4151  2fb1		       06		      .byte.b	%00000110
   4152  2fb2		       42		      .byte.b	%01000010
   4153  2fb3		       3e		      .byte.b	%00111110
   4154  2fb4
   4155  2fb4		       3c		      .byte.b	%00111100
   4156  2fb5		       66		      .byte.b	%01100110
   4157  2fb6		       66		      .byte.b	%01100110
   4158  2fb7		       66		      .byte.b	%01100110
   4159  2fb8		       3c		      .byte.b	%00111100
   4160  2fb9		       66		      .byte.b	%01100110
   4161  2fba		       66		      .byte.b	%01100110
   4162  2fbb		       3c		      .byte.b	%00111100
   4163  2fbc
   4164  2fbc		       3c		      .byte.b	%00111100
   4165  2fbd		       46		      .byte.b	%01000110
   4166  2fbe		       06		      .byte.b	%00000110
   4167  2fbf		       3e		      .byte.b	%00111110
   4168  2fc0		       66		      .byte.b	%01100110
   4169  2fc1		       66		      .byte.b	%01100110
   4170  2fc2		       66		      .byte.b	%01100110
   4171  2fc3		       3c		      .byte.b	%00111100
   4172  2fc4
   4173  2fc4					      ifnconst	DPC_kernel_options
   4174  2fc4
   4175  2fc4		       00		      .byte.b	%00000000
   4176  2fc5		       00		      .byte.b	%00000000
   4177  2fc6		       00		      .byte.b	%00000000
   4178  2fc7		       00		      .byte.b	%00000000
   4179  2fc8		       00		      .byte.b	%00000000
   4180  2fc9		       00		      .byte.b	%00000000
   4181  2fca		       00		      .byte.b	%00000000
   4182  2fcb		       00		      .byte.b	%00000000
   4183  2fcc
   4184  2fcc					      endif
   4185  2fcc
   4186  2fcc					      endif
   4187  2fcc
   4188  2fcc				  -	      ifconst	ROM2k
   4189  2fcc				  -	      ORG	$F7FC
   4190  2fcc					      else
   4191  2fcc					      ifconst	bankswitch
   4192  2fcc					      if	bankswitch == 8
   4193  2fd4					      ORG	$2FF4-bscode_length
   4194  2fd4					      RORG	$FFF4-bscode_length
   4195  2fd4					      endif
   4196  2fd4				  -	      if	bankswitch == 16
   4197  2fd4				  -	      ORG	$4FF4-bscode_length
   4198  2fd4				  -	      RORG	$FFF4-bscode_length
   4199  2fd4					      endif
   4200  2fd4				  -	      if	bankswitch == 32
   4201  2fd4				  -	      ORG	$8FF4-bscode_length
   4202  2fd4				  -	      RORG	$FFF4-bscode_length
   4203  2fd4					      endif
   4204  2fd4				  -	      if	bankswitch == 64
   4205  2fd4				  -	      ORG	$10FE0-bscode_length
   4206  2fd4				  -	      RORG	$1FFE0-bscode_length
   4207  2fd4					      endif
   4208  2fd4				  -	      else
   4209  2fd4				  -	      ORG	$FFFC
   4210  2fd4					      endif
   4211  2fd4					      endif
   4212  2fd4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4213  2fd4
   4214  2fd4							; every bank has this stuff at the same place
   4215  2fd4							; this code can switch to/from any bank at any entry point
   4216  2fd4							; and can preserve register values
   4217  2fd4							; note: lines not starting with a space are not placed in all banks
   4218  2fd4							;
   4219  2fd4							; line below tells the compiler how long this is - do not remove
   4220  2fd4							;size=32
   4221  2fd4
   4222  2fd4				   begin_bscode
   4223  2fd4		       a2 ff		      ldx	#$ff
   4224  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   4225  2fd6				  -	      stx	FASTFETCH
   4226  2fd6					      endif
   4227  2fd6		       9a		      txs
   4228  2fd7				  -	      if	bankswitch == 64
   4229  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4230  2fd7					      else
   4231  2fd7		       a9 f3		      lda	#>(start-1)
   4232  2fd9					      endif
   4233  2fd9		       48		      pha
   4234  2fda		       a9 f7		      lda	#<(start-1)
   4235  2fdc		       48		      pha
   4236  2fdd
   4237  2fdd				   BS_return
   4238  2fdd		       48		      pha
   4239  2fde		       8a		      txa
   4240  2fdf		       48		      pha
   4241  2fe0		       ba		      tsx
   4242  2fe1
   4243  2fe1					      if	bankswitch != 64
   4244  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   4245  2fe3
   4246  2fe3		       2a		      rol
   4247  2fe4		       2a		      rol
   4248  2fe5		       2a		      rol
   4249  2fe6		       2a		      rol
   4250  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4251  2fe9		       aa		      tax
   4252  2fea		       e8		      inx
   4253  2feb				  -	      else
   4254  2feb				  -	      lda	4,x	; get high byte of return address
   4255  2feb				  -	      tay
   4256  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4257  2feb				  -	      sta	4,x
   4258  2feb				  -	      tya
   4259  2feb				  -	      lsr
   4260  2feb				  -	      lsr
   4261  2feb				  -	      lsr
   4262  2feb				  -	      lsr
   4263  2feb				  -	      tax
   4264  2feb				  -	      inx
   4265  2feb					      endif
   4266  2feb
   4267  2feb				   BS_jsr
   4268  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4269  2fee		       68		      pla
   4270  2fef		       aa		      tax
   4271  2ff0		       68		      pla
   4272  2ff1		       60		      rts
   4273  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4274  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4275  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4276  2ff2					      endif
   4277  2ff2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4278  2ff2
   4279  2ff2					      ifconst	bankswitch
   4280  2ff2					      if	bankswitch == 8
   4281  2ffc					      ORG	$2FFC
   4282  2ffc					      RORG	$FFFC
   4283  2ffc					      endif
   4284  2ffc				  -	      if	bankswitch == 16
   4285  2ffc				  -	      ORG	$4FFC
   4286  2ffc				  -	      RORG	$FFFC
   4287  2ffc					      endif
   4288  2ffc				  -	      if	bankswitch == 32
   4289  2ffc				  -	      ORG	$8FFC
   4290  2ffc				  -	      RORG	$FFFC
   4291  2ffc					      endif
   4292  2ffc				  -	      if	bankswitch == 64
   4293  2ffc				  -	      ORG	$10FF0
   4294  2ffc				  -	      RORG	$1FFF0
   4295  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4296  2ffc				  -	      ORG	$10FF8
   4297  2ffc				  -	      RORG	$1FFF8
   4298  2ffc				  -	      ifconst	superchip
   4299  2ffc				  -	      .byte	"E","F","S","C"
   4300  2ffc				  -	      else
   4301  2ffc				  -	      .byte	"E","F","E","F"
   4302  2ffc				  -	      endif
   4303  2ffc				  -	      ORG	$10FFC
   4304  2ffc				  -	      RORG	$1FFFC
   4305  2ffc					      endif
   4306  2ffc				  -	      else
   4307  2ffc				  -	      ifconst	ROM2k
   4308  2ffc				  -	      ORG	$F7FC
   4309  2ffc				  -	      else
   4310  2ffc				  -	      ORG	$FFFC
   4311  2ffc				  -	      endif
   4312  2ffc					      endif
   4313  2ffc		       f8 f3		      .word.w	(start & $ffff)
   4314  2ffe		       f8 f3		      .word.w	(start & $ffff)
