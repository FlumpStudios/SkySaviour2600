------- FILE E:\Dev\test\test_Title.bas.asm LEVEL 1 PASS 2
      1  4ffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; VCS.H
      2  5000 ????						; Version 1.05, 13/November/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_VCS =	105
      5  5000 ????
      6  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines hardware registers and memory mapping for the
     11  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  5000 ????						; with your views.  Please contribute, if you think you can improve this
     19  5000 ????						; file!
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify VCS.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  5000 ????						;			 readability issue, and binary compatibility with disassembled
     30  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  5000 ????						;			 which was broken by the use of segments in this file, as
     33  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  5000 ????						;						   it is safe to leave it undefined, and the base address will
     38  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  5000 ????						;			  - register definitions are now generated through assignment
     41  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  5000 ????						;			    address architecture.
     43  5000 ????						; 1.0	22/MAR/2003		Initial release
     44  5000 ????
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????
     48  5000 ????						; TIA_BASE_ADDRESS
     49  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  5000 ????						; Normally 0, the base address should (externally, before including this file)
     51  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  5000 ????						; < $40 as a bankswitch.
     54  5000 ????
     55  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  5000 ????			  -TIA_BASE_ADDRESS =	0
     57  5000 ????				      ENDIF
     58  5000 ????
     59  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  5000 ????						; *OR* by declaring the label before including this file, eg:
     62  5000 ????						; TIA_BASE_ADDRESS = $40
     63  5000 ????						;   include "vcs.h"
     64  5000 ????
     65  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  5000 ????						; for the mirrored ROM hardware registers.
     68  5000 ????
     69  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  5000 ????
     73  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  5000 ????				      ENDIF
     76  5000 ????
     77  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  5000 ????				      ENDIF
     80  5000 ????
     81  5000 ????						;-------------------------------------------------------------------------------
     82  5000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  5000 ????				      SEG
    199  5000 ????
    200  5000 ????						; EOF
------- FILE E:\Dev\test\test_Title.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; MACRO.H
      2  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_MACRO =	105
      5  5000 ????
      6  5000 ????						;
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  5000 ????						; It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  5000 ????						; contents, or would like to add something, please write to me
     17  5000 ????						; (atari2600@taswegian.com) with your contribution.
     18  5000 ????						;
     19  5000 ????						; Latest Revisions...
     20  5000 ????						;
     21  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  5000 ????						;			    used for code assembly.
     24  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  5000 ????						;
     26  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  5000 ????						;
     28  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  5000 ????						;			   (standardised macro for vertical synch code)
     30  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  5000 ????						; 1.0	22/MAR/2003		Initial release
     33  5000 ????
     34  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  5000 ????						;   registers and require them to be defined first).
     39  5000 ????
     40  5000 ????						; Available macros...
     41  5000 ????						;   SLEEP n		 - sleep for n cycles
     42  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????						; SLEEP duration
     48  5000 ????						; Original author: Thomas Jentzsch
     49  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  5000 ????						; useful for code where precise timing is required.
     51  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  5000 ????
     55  5000 ????				      MAC	sleep
     56  5000 ????			   .CYCLES    SET	{1}
     57  5000 ????
     58  5000 ????				      IF	.CYCLES < 2
     59  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  5000 ????				      ERR
     61  5000 ????				      ENDIF
     62  5000 ????
     63  5000 ????				      IF	.CYCLES & 1
     64  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  5000 ????				      nop	0
     66  5000 ????				      ELSE
     67  5000 ????				      bit	VSYNC
     68  5000 ????				      ENDIF
     69  5000 ????			   .CYCLES    SET	.CYCLES - 3
     70  5000 ????				      ENDIF
     71  5000 ????
     72  5000 ????				      REPEAT	.CYCLES / 2
     73  5000 ????				      nop
     74  5000 ????				      REPEND
     75  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  5000 ????
     77  5000 ????						;-------------------------------------------------------------------------------
     78  5000 ????						; VERTICAL_SYNC
     79  5000 ????						; Original author: Manuel Polik
     80  5000 ????						; Inserts the code required for a proper 3 scannline 
     81  5000 ????						; vertical sync sequence
     82  5000 ????						;
     83  5000 ????						; Note: Alters the accumulator
     84  5000 ????						;
     85  5000 ????						; IN:
     86  5000 ????						; OUT: A = 1
     87  5000 ????
     88  5000 ????				      MAC	vertical_sync
     89  5000 ????				      LDA	#$02	; A = VSYNC enable
     90  5000 ????				      STA	WSYNC	; Finish current line
     91  5000 ????				      STA	VSYNC	; Start vertical sync
     92  5000 ????				      STA	WSYNC	; 1st line vertical sync
     93  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  5000 ????				      LSR		; A = VSYNC disable
     95  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  5000 ????				      STA	VSYNC	; Stop vertical sync
     97  5000 ????				      ENDM
     98  5000 ????
     99  5000 ????						;-------------------------------------------------------------------------------
    100  5000 ????						; CLEAN_START
    101  5000 ????						; Original author: Andrew Davie
    102  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  5000 ????						; Use as very first section of code on boot (ie: at reset)
    106  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  5000 ????
    108  5000 ????				      MAC	clean_start
    109  5000 ????				      sei
    110  5000 ????				      cld
    111  5000 ????
    112  5000 ????				      ldx	#0
    113  5000 ????				      txa
    114  5000 ????				      tay
    115  5000 ????			   .CLEAR_STACK dex
    116  5000 ????				      txs
    117  5000 ????				      pha
    118  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  5000 ????
    120  5000 ????				      ENDM
    121  5000 ????
    122  5000 ????						;-------------------------------------------------------
    123  5000 ????						; SET_POINTER
    124  5000 ????						; Original author: Manuel Rotschkar
    125  5000 ????						;
    126  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  5000 ????						;
    128  5000 ????						; Usage: SET_POINTER pointer, address
    129  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  5000 ????						;
    131  5000 ????						; Note: Alters the accumulator, NZ flags
    132  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  5000 ????						; IN 2: absolute address
    134  5000 ????
    135  5000 ????				      MAC	set_pointer
    136  5000 ????			   .POINTER   SET	{1}
    137  5000 ????			   .ADDRESS   SET	{2}
    138  5000 ????
    139  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  5000 ????				      STA	.POINTER	; Store in pointer
    141  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  5000 ????
    144  5000 ????				      ENDM
    145  5000 ????
    146  5000 ????						; EOF
------- FILE E:\Dev\test\test_Title.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; VCS.H
      2  5000 ????						; Version 1.05, 13/November/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_VCS =	105
      5  5000 ????
      6  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines hardware registers and memory mapping for the
     11  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  5000 ????						; with your views.  Please contribute, if you think you can improve this
     19  5000 ????						; file!
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify VCS.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  5000 ????						;			 readability issue, and binary compatibility with disassembled
     30  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  5000 ????						;			 which was broken by the use of segments in this file, as
     33  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  5000 ????						;						   it is safe to leave it undefined, and the base address will
     38  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  5000 ????						;			  - register definitions are now generated through assignment
     41  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  5000 ????						;			    address architecture.
     43  5000 ????						; 1.0	22/MAR/2003		Initial release
     44  5000 ????
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????
     48  5000 ????						; TIA_BASE_ADDRESS
     49  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  5000 ????						; Normally 0, the base address should (externally, before including this file)
     51  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  5000 ????						; < $40 as a bankswitch.
     54  5000 ????
     55  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  5000 ????			  -TIA_BASE_ADDRESS =	0
     57  5000 ????				      ENDIF
     58  5000 ????
     59  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  5000 ????						; *OR* by declaring the label before including this file, eg:
     62  5000 ????						; TIA_BASE_ADDRESS = $40
     63  5000 ????						;   include "vcs.h"
     64  5000 ????
     65  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  5000 ????						; for the mirrored ROM hardware registers.
     68  5000 ????
     69  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  5000 ????
     73  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  5000 ????				      ENDIF
     76  5000 ????
     77  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  5000 ????				      ENDIF
     80  5000 ????
     81  5000 ????						;-------------------------------------------------------------------------------
     82  5000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  5000 ????				      SEG
    199  5000 ????
    200  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; MACRO.H
      2  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_MACRO =	105
      5  5000 ????
      6  5000 ????						;
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  5000 ????						; It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  5000 ????						; contents, or would like to add something, please write to me
     17  5000 ????						; (atari2600@taswegian.com) with your contribution.
     18  5000 ????						;
     19  5000 ????						; Latest Revisions...
     20  5000 ????						;
     21  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  5000 ????						;			    used for code assembly.
     24  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  5000 ????						;
     26  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  5000 ????						;
     28  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  5000 ????						;			   (standardised macro for vertical synch code)
     30  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  5000 ????						; 1.0	22/MAR/2003		Initial release
     33  5000 ????
     34  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  5000 ????						;   registers and require them to be defined first).
     39  5000 ????
     40  5000 ????						; Available macros...
     41  5000 ????						;   SLEEP n		 - sleep for n cycles
     42  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????						; SLEEP duration
     48  5000 ????						; Original author: Thomas Jentzsch
     49  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  5000 ????						; useful for code where precise timing is required.
     51  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  5000 ????
     55  5000 ????				      MAC	sleep
     56  5000 ????			   .CYCLES    SET	{1}
     57  5000 ????
     58  5000 ????				      IF	.CYCLES < 2
     59  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  5000 ????				      ERR
     61  5000 ????				      ENDIF
     62  5000 ????
     63  5000 ????				      IF	.CYCLES & 1
     64  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  5000 ????				      nop	0
     66  5000 ????				      ELSE
     67  5000 ????				      bit	VSYNC
     68  5000 ????				      ENDIF
     69  5000 ????			   .CYCLES    SET	.CYCLES - 3
     70  5000 ????				      ENDIF
     71  5000 ????
     72  5000 ????				      REPEAT	.CYCLES / 2
     73  5000 ????				      nop
     74  5000 ????				      REPEND
     75  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  5000 ????
     77  5000 ????						;-------------------------------------------------------------------------------
     78  5000 ????						; VERTICAL_SYNC
     79  5000 ????						; Original author: Manuel Polik
     80  5000 ????						; Inserts the code required for a proper 3 scannline 
     81  5000 ????						; vertical sync sequence
     82  5000 ????						;
     83  5000 ????						; Note: Alters the accumulator
     84  5000 ????						;
     85  5000 ????						; IN:
     86  5000 ????						; OUT: A = 1
     87  5000 ????
     88  5000 ????				      MAC	vertical_sync
     89  5000 ????				      LDA	#$02	; A = VSYNC enable
     90  5000 ????				      STA	WSYNC	; Finish current line
     91  5000 ????				      STA	VSYNC	; Start vertical sync
     92  5000 ????				      STA	WSYNC	; 1st line vertical sync
     93  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  5000 ????				      LSR		; A = VSYNC disable
     95  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  5000 ????				      STA	VSYNC	; Stop vertical sync
     97  5000 ????				      ENDM
     98  5000 ????
     99  5000 ????						;-------------------------------------------------------------------------------
    100  5000 ????						; CLEAN_START
    101  5000 ????						; Original author: Andrew Davie
    102  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  5000 ????						; Use as very first section of code on boot (ie: at reset)
    106  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  5000 ????
    108  5000 ????				      MAC	clean_start
    109  5000 ????				      sei
    110  5000 ????				      cld
    111  5000 ????
    112  5000 ????				      ldx	#0
    113  5000 ????				      txa
    114  5000 ????				      tay
    115  5000 ????			   .CLEAR_STACK dex
    116  5000 ????				      txs
    117  5000 ????				      pha
    118  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  5000 ????
    120  5000 ????				      ENDM
    121  5000 ????
    122  5000 ????						;-------------------------------------------------------
    123  5000 ????						; SET_POINTER
    124  5000 ????						; Original author: Manuel Rotschkar
    125  5000 ????						;
    126  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  5000 ????						;
    128  5000 ????						; Usage: SET_POINTER pointer, address
    129  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  5000 ????						;
    131  5000 ????						; Note: Alters the accumulator, NZ flags
    132  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  5000 ????						; IN 2: absolute address
    134  5000 ????
    135  5000 ????				      MAC	set_pointer
    136  5000 ????			   .POINTER   SET	{1}
    137  5000 ????			   .ADDRESS   SET	{2}
    138  5000 ????
    139  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  5000 ????				      STA	.POINTER	; Store in pointer
    141  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  5000 ????
    144  5000 ????				      ENDM
    145  5000 ????
    146  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   scorefade  =	1
      5  5000 ????
      6  5000 ????	       00 d5	   swdebounce =	b
      7  5000 ????
      8  5000 ????	       00 d4	   gamenumber =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      5  5000 ????
      6  5000 ????	       00 80	   player0x   =	$80
      7  5000 ????	       00 81	   player1x   =	$81
      8  5000 ????	       00 82	   missile0x  =	$82
      9  5000 ????	       00 83	   missile1x  =	$83
     10  5000 ????	       00 84	   ballx      =	$84
     11  5000 ????
     12  5000 ????	       00 85	   objecty    =	$85
     13  5000 ????	       00 85	   player0y   =	$85
     14  5000 ????	       00 86	   player1y   =	$86
     15  5000 ????	       00 87	   missile1height =	$87
     16  5000 ????	       00 88	   missile1y  =	$88
     17  5000 ????	       00 89	   bally      =	$89
     18  5000 ????
     19  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     20  5000 ????
     21  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     22  5000 ????	       00 8a	   player0pointerlo =	$8A
     23  5000 ????	       00 8b	   player0pointerhi =	$8B
     24  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     25  5000 ????	       00 8c	   player1pointerlo =	$8C
     26  5000 ????	       00 8d	   player1pointerhi =	$8D
     27  5000 ????
     28  5000 ????	       00 8e	   player0height =	$8E
     29  5000 ????	       00 8f	   player1height =	$8F
     30  5000 ????	       00 90	   missile0height =	$90
     31  5000 ????	       00 91	   missile0y  =	$91
     32  5000 ????	       00 92	   ballheight =	$92
     33  5000 ????
     34  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     36  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     37  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     38  5000 ????
     39  5000 ????	       00 93	   score      =	$93	; $93-$95
     40  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     41  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     43  5000 ????	       00 9e	   temp3      =	$9E
     44  5000 ????	       00 9f	   temp4      =	$9F
     45  5000 ????	       00 a0	   temp5      =	$A0
     46  5000 ????	       00 a1	   temp6      =	$A1
     47  5000 ????
     48  5000 ????	       00 a2	   rand       =	$A2
     49  5000 ????	       00 a3	   scorecolor =	$A3
     50  5000 ????
     51  5000 ????	       00 a4	   var0       =	$A4
     52  5000 ????	       00 a5	   var1       =	$A5
     53  5000 ????	       00 a6	   var2       =	$A6
     54  5000 ????	       00 a7	   var3       =	$A7
     55  5000 ????	       00 a8	   var4       =	$A8
     56  5000 ????	       00 a9	   var5       =	$A9
     57  5000 ????	       00 aa	   var6       =	$AA
     58  5000 ????	       00 ab	   var7       =	$AB
     59  5000 ????	       00 ac	   var8       =	$AC
     60  5000 ????	       00 ad	   var9       =	$AD
     61  5000 ????	       00 ae	   var10      =	$AE
     62  5000 ????	       00 af	   var11      =	$AF
     63  5000 ????	       00 b0	   var12      =	$B0
     64  5000 ????	       00 b1	   var13      =	$B1
     65  5000 ????	       00 b2	   var14      =	$B2
     66  5000 ????	       00 b3	   var15      =	$B3
     67  5000 ????	       00 b4	   var16      =	$B4
     68  5000 ????	       00 b5	   var17      =	$B5
     69  5000 ????	       00 b6	   var18      =	$B6
     70  5000 ????	       00 b7	   var19      =	$B7
     71  5000 ????	       00 b8	   var20      =	$B8
     72  5000 ????	       00 b9	   var21      =	$B9
     73  5000 ????	       00 ba	   var22      =	$BA
     74  5000 ????	       00 bb	   var23      =	$BB
     75  5000 ????	       00 bc	   var24      =	$BC
     76  5000 ????	       00 bd	   var25      =	$BD
     77  5000 ????	       00 be	   var26      =	$BE
     78  5000 ????	       00 bf	   var27      =	$BF
     79  5000 ????	       00 c0	   var28      =	$C0
     80  5000 ????	       00 c1	   var29      =	$C1
     81  5000 ????	       00 c2	   var30      =	$C2
     82  5000 ????	       00 c3	   var31      =	$C3
     83  5000 ????	       00 c4	   var32      =	$C4
     84  5000 ????	       00 c5	   var33      =	$C5
     85  5000 ????	       00 c6	   var34      =	$C6
     86  5000 ????	       00 c7	   var35      =	$C7
     87  5000 ????	       00 c8	   var36      =	$C8
     88  5000 ????	       00 c9	   var37      =	$C9
     89  5000 ????	       00 ca	   var38      =	$CA
     90  5000 ????	       00 cb	   var39      =	$CB
     91  5000 ????	       00 cc	   var40      =	$CC
     92  5000 ????	       00 cd	   var41      =	$CD
     93  5000 ????	       00 ce	   var42      =	$CE
     94  5000 ????	       00 cf	   var43      =	$CF
     95  5000 ????	       00 d0	   var44      =	$D0
     96  5000 ????	       00 d1	   var45      =	$D1
     97  5000 ????	       00 d2	   var46      =	$D2
     98  5000 ????	       00 d3	   var47      =	$D3
     99  5000 ????
    100  5000 ????	       00 d4	   A	      =	$d4
    101  5000 ????	       00 d4	   a	      =	$d4
    102  5000 ????	       00 d5	   B	      =	$d5
    103  5000 ????	       00 d5	   b	      =	$d5
    104  5000 ????	       00 d6	   C	      =	$d6
    105  5000 ????	       00 d6	   c	      =	$d6
    106  5000 ????	       00 d7	   D	      =	$d7
    107  5000 ????	       00 d7	   d	      =	$d7
    108  5000 ????	       00 d8	   E	      =	$d8
    109  5000 ????	       00 d8	   e	      =	$d8
    110  5000 ????	       00 d9	   F	      =	$d9
    111  5000 ????	       00 d9	   f	      =	$d9
    112  5000 ????	       00 da	   G	      =	$da
    113  5000 ????	       00 da	   g	      =	$da
    114  5000 ????	       00 db	   H	      =	$db
    115  5000 ????	       00 db	   h	      =	$db
    116  5000 ????	       00 dc	   I	      =	$dc
    117  5000 ????	       00 dc	   i	      =	$dc
    118  5000 ????	       00 dd	   J	      =	$dd
    119  5000 ????	       00 dd	   j	      =	$dd
    120  5000 ????	       00 de	   K	      =	$de
    121  5000 ????	       00 de	   k	      =	$de
    122  5000 ????	       00 df	   L	      =	$df
    123  5000 ????	       00 df	   l	      =	$df
    124  5000 ????	       00 e0	   M	      =	$e0
    125  5000 ????	       00 e0	   m	      =	$e0
    126  5000 ????	       00 e1	   N	      =	$e1
    127  5000 ????	       00 e1	   n	      =	$e1
    128  5000 ????	       00 e2	   O	      =	$e2
    129  5000 ????	       00 e2	   o	      =	$e2
    130  5000 ????	       00 e3	   P	      =	$e3
    131  5000 ????	       00 e3	   p	      =	$e3
    132  5000 ????	       00 e4	   Q	      =	$e4
    133  5000 ????	       00 e4	   q	      =	$e4
    134  5000 ????	       00 e5	   R	      =	$e5
    135  5000 ????	       00 e5	   r	      =	$e5
    136  5000 ????	       00 e6	   S	      =	$e6
    137  5000 ????	       00 e6	   s	      =	$e6
    138  5000 ????	       00 e7	   T	      =	$e7
    139  5000 ????	       00 e7	   t	      =	$e7
    140  5000 ????	       00 e8	   U	      =	$e8
    141  5000 ????	       00 e8	   u	      =	$e8
    142  5000 ????	       00 e9	   V	      =	$e9
    143  5000 ????	       00 e9	   v	      =	$e9
    144  5000 ????	       00 ea	   W	      =	$ea
    145  5000 ????	       00 ea	   w	      =	$ea
    146  5000 ????	       00 eb	   X	      =	$eb
    147  5000 ????	       00 eb	   x	      =	$eb
    148  5000 ????	       00 ec	   Y	      =	$ec
    149  5000 ????	       00 ec	   y	      =	$ec
    150  5000 ????	       00 ed	   Z	      =	$ed
    151  5000 ????	       00 ed	   z	      =	$ed
    152  5000 ????
    153  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    154  5000 ????	       00 ef	   playfieldpos =	$ef
    155  5000 ????
    156  5000 ????						; available for other uses, or if unused, provide more stack space
    157  5000 ????
    158  5000 ????	       00 f0	   aux1       =	$f0
    159  5000 ????	       00 f1	   aux2       =	$f1
    160  5000 ????	       00 f2	   aux3       =	$f2
    161  5000 ????	       00 f3	   aux4       =	$f3
    162  5000 ????	       00 f4	   aux5       =	$f4
    163  5000 ????	       00 f5	   aux6       =	$f5
    164  5000 ????
    165  5000 ????						; playfield color/height pointers
    166  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    167  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    168  5000 ????						; the above pointers are the same because if color and height are both used together,
    169  5000 ????						; they must used absolute indexed and cannot use pointers
    170  5000 ????
    171  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    172  5000 ????						; upper 3 bits of $f2 contain the number of lives
    173  5000 ????	       00 f4	   lifecolor  =	$f4
    174  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    175  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  5000 ????
    177  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    178  5000 ????	       00 f3	   pfscore2   =	$f3
    179  5000 ????	       00 f4	   pfscorecolor =	$f4
    180  5000 ????
    181  5000 ????	       00 f6	   stack1     =	$f6
    182  5000 ????	       00 f7	   stack2     =	$f7
    183  5000 ????	       00 f8	   stack3     =	$f8
    184  5000 ????	       00 f9	   stack4     =	$f9
    185  5000 ????						; the stack bytes above may be used in the kernel
    186  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  5000 ????
    188  5000 ????				      MAC	return
    189  5000 ????				      ifnconst	bankswitch
    190  5000 ????				      rts
    191  5000 ????				      else
    192  5000 ????				      jmp	BS_return
    193  5000 ????				      endif
    194  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    195  5000 ????
    196  5000 ????			  -	      ifconst	superchip
    197  5000 ????			  -playfieldbase =	$10D0
    198  5000 ????			  -	      include	superchip.h
    199  5000 ????				      else
    200  5000 ????	       00 a4	   playfieldbase =	$A4
    201  5000 ????				      endif
    202  5000 ????
    203  5000 ????				      ifnconst	pfhalfwidth
    204  5000 ????	       00 04	   pfwidth    =	4
    205  5000 ????	       00 0e	   PF1L       =	PF1
    206  5000 ????	       00 0f	   PF2L       =	PF2
    207  5000 ????	       00 0e	   PF1R       =	PF1
    208  5000 ????	       00 0f	   PF2R       =	PF2
    209  5000 ????	       00 00	   pfadjust   =	0
    210  5000 ????			  -	      else
    211  5000 ????			  -pfwidth    =	2
    212  5000 ????			  -	      ifconst	pfcenter
    213  5000 ????			  -PF1L       =	$3F	; no effect
    214  5000 ????			  -PF2L       =	PF2
    215  5000 ????			  -PF1R       =	$3F
    216  5000 ????			  -PF2R       =	PF2	; no effect
    217  5000 ????			  -pfadjust   =	1
    218  5000 ????			  -	      else
    219  5000 ????			  -PF1L       =	PF1
    220  5000 ????			  -PF2L       =	PF2
    221  5000 ????			  -PF1R       =	$3F	; no effect
    222  5000 ????			  -PF2R       =	$3F	; no effect
    223  5000 ????			  -pfadjust   =	0
    224  5000 ????			  -	      endif
    225  5000 ????				      endif
    226  5000 ????
    227  5000 ????						; define playfield start based on height
    228  5000 ????				      ifnconst	pfres
    229  5000 ????	       00 a4	   playfield  =	playfieldbase
    230  5000 ????			  -	      else
    231  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  5000 ????				      endif
------- FILE E:\Dev\test\test_Title.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   scorefade  =	1
      5  5000 ????
      6  5000 ????	       00 d5	   swdebounce =	b
      7  5000 ????
      8  5000 ????	       00 d4	   gamenumber =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE E:\Dev\test\test_Title.bas.asm
      6  5000 ????				      ifconst	bankswitch
      7  5000 ????			  -	      if	bankswitch == 8
      8  5000 ????			  -	      ORG	$1000
      9  5000 ????			  -	      RORG	$D000
     10  5000 ????				      endif
     11  5000 ????				      if	bankswitch == 16
     12  1000					      ORG	$1000
     13  1000					      RORG	$9000
     14  1000					      endif
     15  1000				  -	      if	bankswitch == 32
     16  1000				  -	      ORG	$1000
     17  1000				  -	      RORG	$1000
     18  1000					      endif
     19  1000				  -	      if	bankswitch == 64
     20  1000				  -	      ORG	$1000
     21  1000				  -	      RORG	$1000
     22  1000					      endif
     23  1000				  -	      else
     24  1000				  -	      ORG	$F000
     25  1000					      endif
     26  1000
     27  1000					      ifconst	bankswitch_hotspot
     28  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  1000				  -	      .byte	0	; stop unexpected bankswitches
     30  1000					      endif
     31  1000					      endif
     32  1000				   game
     33  1000				   .L00 		;  rem Original code by RevEng
     34  1000
     35  1000				   .L01 		;  rem http://www.atariage.com/forums/topic/169819-the-titlescreen-kernel/page__hl__titlescreen%20kernel
     36  1000
     37  1000				   .
     38  1000							; 
     39  1000
     40  1000				   .L02 		;  rem *** any romsize should work
     41  1000
     42  1000				   .L03 		;  set romsize 16k
     43  1000
     44  1000				   .
     45  1000							; 
     46  1000
     47  1000				   .L04 		;  rem *** The selected game number. The game selection minikernel displays 
     48  1000
     49  1000				   .L05 		;  rem *** this variable
     50  1000
     51  1000				   .L06 		;  dim gamenumber = a
     52  1000
     53  1000				   .
     54  1000							; 
     55  1000
     56  1000				   .L07 		;  rem *** this debounce variable is used to slow down the game number selection
     57  1000
     58  1000				   .L08 		;  dim swdebounce = b
     59  1000
     60  1000				   .
     61  1000							; 
     62  1000
     63  1000				   .L09 		;  rem *** this turns on the score fading effect. it looks especially pretty
     64  1000
     65  1000				   .L010		;  rem *** if you do a "scorecolor=scorecolor+1" every 2nd or 4th frame.
     66  1000
     67  1000				   .L011		;  const scorefade = 1
     68  1000
     69  1000				   .
     70  1000							; 
     71  1000
     72  1000				   .L012		;  scorecolor = $1a
     73  1000
     74  1000		       a9 1a		      LDA	#$1a
     75  1002		       85 a3		      STA	scorecolor
     76  1004				   .
     77  1004							; 
     78  1004
     79  1004				   .L013		;  swdebounce = 0
     80  1004
     81  1004		       a9 00		      LDA	#0
     82  1006		       85 d5		      STA	swdebounce
     83  1008				   .L014		;  gamenumber = 1
     84  1008
     85  1008		       a9 01		      LDA	#1
     86  100a		       85 d4		      STA	gamenumber
     87  100c				   .
     88  100c							; 
     89  100c
     90  100c				   .titlepage
     91  100c							; titlepage
     92  100c
     93  100c				   .L015		;  gosub titledrawscreen bank2
     94  100c
     95  100c		       85 ee		      sta	temp7
     96  100e		       a9 90		      lda	#>(ret_point1-1)
     97  1010		       48		      pha
     98  1011		       a9 23		      lda	#<(ret_point1-1)
     99  1013		       48		      pha
    100  1014		       a9 af		      lda	#>(.titledrawscreen-1)
    101  1016		       48		      pha
    102  1017		       a9 ff		      lda	#<(.titledrawscreen-1)
    103  1019		       48		      pha
    104  101a		       a5 ee		      lda	temp7
    105  101c		       48		      pha
    106  101d		       8a		      txa
    107  101e		       48		      pha
    108  101f		       a2 02		      ldx	#2
    109  1021		       4c eb ff 	      jmp	BS_jsr
    110  1024				   ret_point1
    111  1024				   .L016		;  if joy0fire  ||  switchreset then goto gamestart
    112  1024
    113  1024		       24 0c		      bit	INPT4
    114  1026		       30 03		      BMI	.skipL016
    115  1028				   .condpart0
    116  1028		       4c 32 90 	      jmp	.condpart1
    117  102b				   .skipL016
    118  102b		       a9 01		      lda	#1
    119  102d		       2c 82 02 	      bit	SWCHB
    120  1030		       d0 03		      BNE	.skip0OR
    121  1032				   .condpart1
    122  1032		       4c 65 90 	      jmp	.gamestart
    123  1035
    124  1035				   .skip0OR
    125  1035				   .L017		;  if !switchselect then swdebounce = 0
    126  1035
    127  1035		       a9 02		      lda	#2
    128  1037		       2c 82 02 	      bit	SWCHB
    129  103a		       f0 04		      BEQ	.skipL017
    130  103c				   .condpart2
    131  103c		       a9 00		      LDA	#0
    132  103e		       85 d5		      STA	swdebounce
    133  1040				   .skipL017
    134  1040				   .L018		;  if swdebounce > 0 then swdebounce = swdebounce - 1 :  goto titlepage
    135  1040
    136  1040		       a9 00		      LDA	#0
    137  1042		       c5 d5		      CMP	swdebounce
    138  1044		       b0 05		      BCS	.skipL018
    139  1046				   .condpart3
    140  1046		       c6 d5		      DEC	swdebounce
    141  1048		       4c 0c 90 	      jmp	.titlepage
    142  104b
    143  104b				   .skipL018
    144  104b				   .L019		;  if switchselect then swdebounce = 30 :  gamenumber = gamenumber + 1
    145  104b
    146  104b		       a9 02		      lda	#2
    147  104d		       2c 82 02 	      bit	SWCHB
    148  1050		       d0 06		      BNE	.skipL019
    149  1052				   .condpart4
    150  1052		       a9 1e		      LDA	#30
    151  1054		       85 d5		      STA	swdebounce
    152  1056		       e6 d4		      INC	gamenumber
    153  1058				   .skipL019
    154  1058				   .L020		;  if gamenumber = 21 then gamenumber = 1
    155  1058
    156  1058		       a5 d4		      LDA	gamenumber
    157  105a		       c9 15		      CMP	#21
    158  105c		       d0 04		      BNE	.skipL020
    159  105e				   .condpart5
    160  105e		       a9 01		      LDA	#1
    161  1060		       85 d4		      STA	gamenumber
    162  1062				   .skipL020
    163  1062				   .L021		;  goto titlepage
    164  1062
    165  1062		       4c 0c 90 	      jmp	.titlepage
    166  1065
    167  1065				   .
    168  1065							; 
    169  1065
    170  1065				   .L022		;  rem *** Our fake game start. If you move the joystick it goes back to the
    171  1065
    172  1065				   .L023		;  rem *** title screen.
    173  1065
    174  1065				   .gamestart
    175  1065							; gamestart
    176  1065
    177  1065				   .L024		;  drawscreen
    178  1065
    179  1065		       85 ee		      sta	temp7
    180  1067		       a9 90		      lda	#>(ret_point2-1)
    181  1069		       48		      pha
    182  106a		       a9 7c		      lda	#<(ret_point2-1)
    183  106c		       48		      pha
    184  106d		       a9 f4		      lda	#>(drawscreen-1)
    185  106f		       48		      pha
    186  1070		       a9 35		      lda	#<(drawscreen-1)
    187  1072		       48		      pha
    188  1073		       a5 ee		      lda	temp7
    189  1075		       48		      pha
    190  1076		       8a		      txa
    191  1077		       48		      pha
    192  1078		       a2 04		      ldx	#4
    193  107a		       4c eb ff 	      jmp	BS_jsr
    194  107d				   ret_point2
    195  107d				   .L025		;  if joy0left  ||  joy0right then goto titlepage
    196  107d
    197  107d		       2c 80 02 	      bit	SWCHA
    198  1080		       70 03		      BVS	.skipL025
    199  1082				   .condpart6
    200  1082		       4c 8a 90 	      jmp	.condpart7
    201  1085				   .skipL025
    202  1085		       2c 80 02 	      bit	SWCHA
    203  1088		       30 03		      BMI	.skip1OR
    204  108a				   .condpart7
    205  108a		       4c 0c 90 	      jmp	.titlepage
    206  108d
    207  108d				   .skip1OR
    208  108d				   .L026		;  if joy0up  ||  joy0down then goto titlepage
    209  108d
    210  108d		       a9 10		      lda	#$10
    211  108f		       2c 80 02 	      bit	SWCHA
    212  1092		       d0 03		      BNE	.skipL026
    213  1094				   .condpart8
    214  1094		       4c 9e 90 	      jmp	.condpart9
    215  1097				   .skipL026
    216  1097		       a9 20		      lda	#$20
    217  1099		       2c 80 02 	      bit	SWCHA
    218  109c		       d0 03		      BNE	.skip2OR
    219  109e				   .condpart9
    220  109e		       4c 0c 90 	      jmp	.titlepage
    221  10a1
    222  10a1				   .skip2OR
    223  10a1				   .L027		;  goto gamestart
    224  10a1
    225  10a1		       4c 65 90 	      jmp	.gamestart
    226  10a4
    227  10a4				   .
    228  10a4							; 
    229  10a4
    230  10a4				   .L028		;  bank 2
    231  10a4
    232  10a4					      if	ECHO1
      3888 bytes of ROM space left in bank 1
    233  10a4					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    234  10a4					      endif
    235  10a4		       00 01	   ECHO1      =	1
    236  1fd4					      ORG	$1FF4-bscode_length
    237  1fd4					      RORG	$9FF4-bscode_length
    238  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    239  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    240  1fd6				  -	      stx	FASTFETCH
    241  1fd6					      endif
    242  1fd6		       9a		      txs
    243  1fd7				  -	      if	bankswitch == 64
    244  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    245  1fd7					      else
    246  1fd7		       a9 f2		      lda	#>(start-1)
    247  1fd9					      endif
    248  1fd9		       48		      pha
    249  1fda		       a9 4f		      lda	#<(start-1)
    250  1fdc		       48		      pha
    251  1fdd		       48		      pha
    252  1fde		       8a		      txa
    253  1fdf		       48		      pha
    254  1fe0		       ba		      tsx
    255  1fe1					      if	bankswitch != 64
    256  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    257  1fe3		       2a		      rol
    258  1fe4		       2a		      rol
    259  1fe5		       2a		      rol
    260  1fe6		       2a		      rol
    261  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    262  1fe9		       aa		      tax
    263  1fea		       e8		      inx
    264  1feb				  -	      else
    265  1feb				  -	      lda	4,x	; get high byte of return address
    266  1feb				  -	      tay
    267  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    268  1feb				  -	      sta	4,x
    269  1feb				  -	      tya
    270  1feb				  -	      lsr
    271  1feb				  -	      lsr
    272  1feb				  -	      lsr
    273  1feb				  -	      lsr
    274  1feb				  -	      tax
    275  1feb				  -	      inx
    276  1feb					      endif
    277  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    278  1fee		       68		      pla
    279  1fef		       aa		      tax
    280  1ff0		       68		      pla
    281  1ff1		       60		      rts
    282  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    283  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    284  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    285  1ff2					      endif
    286  1ffc					      ORG	$1FFC
    287  1ffc					      RORG	$9FFC
    288  1ffc		       d4 9f		      .word.w	start_bank1
    289  1ffe		       d4 9f		      .word.w	start_bank1
    290  2000					      ORG	$2000
    291  2000					      RORG	$B000
    292  2000				   .L029		;  rem *** We're putting the title kernel here, but it can go in any bank you
    293  2000
    294  2000				   .L030		;  rem *** like. Just don't let your program flow accidentally fall into the
    295  2000
    296  2000				   .L031		;  rem *** line below.
    297  2000
    298  2000				   .L032		;  asm
    299  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_48x1_1
     20  2000				   mk_48x1_on =	1
     21  2000				   mk_48x1_1_on =	1
     22  2000					      jsr	draw_bmp_48x1_1
     23  2000					      ENDM
     24  2000
     25  2000					      MAC	draw_48x1_2
     26  2000				   mk_48x1_on =	1
     27  2000				   mk_48x1_2_on =	1
     28  2000					      jsr	draw_bmp_48x1_2
     29  2000					      ENDM
     30  2000
     31  2000					      MAC	draw_48x1_3
     32  2000				   mk_48x1_on =	1
     33  2000				   mk_48x1_3_on =	1
     34  2000					      jsr	draw_bmp_48x1_3
     35  2000					      ENDM
     36  2000
     37  2000					      MAC	draw_48x2_1
     38  2000				   mk_48x1_on =	1
     39  2000				   mk_48x2_1_on =	1
     40  2000					      jsr	draw_bmp_48x2_1
     41  2000					      ENDM
     42  2000
     43  2000					      MAC	draw_48x2_2
     44  2000				   mk_48x1_on =	1
     45  2000				   mk_48x2_2_on =	1
     46  2000					      jsr	draw_bmp_48x2_2
     47  2000					      ENDM
     48  2000
     49  2000					      MAC	draw_48x2_3
     50  2000				   mk_48x1_on =	1
     51  2000				   mk_48x2_3_on =	1
     52  2000					      jsr	draw_bmp_48x2_3
     53  2000					      ENDM
     54  2000
     55  2000					      MAC	draw_score
     56  2000				   mk_score_on =	1
     57  2000					      jsr	draw_score_display
     58  2000					      ENDM
     59  2000
     60  2000					      MAC	draw_gameselect
     61  2000				   mk_gameselect_on =	1
     62  2000					      jsr	draw_gameselect_display
     63  2000					      ENDM
     64  2000
     65  2000					      MAC	draw_space
     66  2000					      ldy	#{1}
     67  2000				   .loop
     68  2000					      sta	WSYNC
     69  2000					      dey
     70  2000					      bne	.loop
     71  2000					      ENDM
     72  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_96x2_1
     10  2000					      draw_48x1_1
     11  2000					      draw_score
     12  2000					      ENDM
     13  2000
     14  2000							; minikernel choices are:
     15  2000							; 
     16  2000							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2000							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2000							;
     19  2000							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2000							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2000							;
     22  2000							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2000							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2000							;
     25  2000							; draw_gameselect
     26  2000							;	The game selection display minikernel
     27  2000							;
     28  2000							; draw_score
     29  2000							;	A minikernel that draws the score
     30  2000							;
     31  2000							; draw_space 10
     32  2000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2000
      5  2000				   .titledrawscreen
      6  2000				   title_eat_overscan
      7  2000							;bB runs in overscan. Wait for the overscan to run out...
      8  2000		       18		      clc
      9  2001		       ad 84 02 	      lda	INTIM
     10  2004		       30 fa		      bmi	title_eat_overscan
     11  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     12  2009
     13  2009				   title_do_vertical_sync
     14  2009		       a9 02		      lda	#2
     15  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     16  200d		       85 00		      sta	VSYNC	;enable VSYNC
     17  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2013		       a9 00		      lda	#0
     20  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     22  2019
     23  2019							;lda #42+128
     24  2019					      ifnconst	vblank_time
     25  2019		       a9 aa		      lda	#42+128
     26  201b				  -	      else
     27  201b				  -	      lda	#vblank_time+128
     28  201b					      endif
     29  201b
     30  201b		       8d 96 02 	      sta	TIM64T
     31  201e
     32  201e		       00 82	   titleframe =	missile0x
     33  201e		       e6 82		      inc	titleframe	; increment the frame counter
     34  2020
     35  2020				  -	      ifconst	.title_vblank
     36  2020				  -	      jsr	.title_vblank
     37  2020					      endif
     38  2020
     39  2020				   title_vblank_loop
     40  2020		       ad 84 02 	      lda	INTIM
     41  2023		       30 fb		      bmi	title_vblank_loop
     42  2025		       a9 00		      lda	#0
     43  2027		       85 02		      sta	WSYNC
     44  2029		       85 01		      sta	VBLANK
     45  202b		       85 1d		      sta	ENAM0
     46  202d		       85 1f		      sta	ENABL
     47  202f
     48  202f				   title_playfield
     49  202f
     50  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  202f
     52  202f		       a9 e6		      lda	#230
     53  2031		       8d 96 02 	      sta	TIM64T
     54  2034
     55  2034		       a9 01		      lda	#1
     56  2036		       85 0a		      sta	CTRLPF
     57  2038		       18		      clc
     58  2039
     59  2039		       a9 00		      lda	#0
     60  203b		       85 02		      sta	WSYNC
     61  203d		       ad 4e b0 	      lda	titlescreencolor
     62  2040		       85 09		      sta	COLUBK
     63  2042
      0  2042					      titlescreenlayout
      0  2042					      draw_96x2_1
      1  2042		       00 01	   mk_96x2_1_on =	1
      2  2042		       20 d0 b1 	      jsr	draw_bmp_96x2_1
      0  2045					      draw_48x1_1
      1  2045		       00 01	   mk_48x1_on =	1
      2  2045		       00 01	   mk_48x1_1_on =	1
      3  2045		       20 76 b1 	      jsr	draw_bmp_48x1_1
      0  2048					      draw_score
      1  2048		       00 01	   mk_score_on =	1
      2  2048		       20 71 b3 	      jsr	draw_score_display
     65  204b
     66  204b		       4c 58 b4 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  204e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  204e					      include	"titlescreen/titlescreen_color.asm"
      1  204e
      2  204e							; This is where the titlescreen background color gets set.
      3  204e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  204e							; if you want to change the color on the fly.
      5  204e
      6  204e				  -	      ifnconst	titlescreencolor
      7  204e				  -titlescreencolor
      8  204e					      endif
      9  204e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  204f
     70  204f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 2
      0  204f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  204f							; 48x1_kernel.asm
      2  204f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  204f							;	pointers have been setup and y has been set to the height of the image 
      4  204f
      5  204f				   draw_bmp_48x1adv
      6  204f
      7  204f		       a9 03		      lda	#3
      8  2051		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2053		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2055		       a2 00		      ldx	#0
     11  2057		       86 1b		      stx	GRP0
     12  2059		       86 1c		      stx	GRP1
     13  205b		       18		      clc
     14  205c
     15  205c		       ad 4e b0 	      lda	titlescreencolor
     16  205f		       85 08		      sta	COLUPF
     17  2061		       a9 ff		      lda	#%11111111
     18  2063		       85 0e		      sta	PF1
     19  2065		       a9 01		      lda	#1
     20  2067		       85 0a		      sta	CTRLPF
     21  2069
     22  2069		       ba		      tsx
     23  206a		       86 f6		      stx	stack1	;save the stack pointer
     24  206c
     25  206c							;postion P0 and P1, Ball and Missile0
     26  206c		       85 02		      sta	WSYNC
     27  206e		       a9 20		      lda	#%00100000
     28  2070		       85 20		      sta	HMP0
     29  2072		       a9 30		      lda	#%00110000
     30  2074		       85 21		      sta	HMP1
     31  2076		       a9 00		      lda	#0
     32  2078		       85 24		      sta	HMBL
     33  207a		       a9 20		      lda	#%00100000
     34  207c		       85 22		      sta	HMM0
     35  207e
     36  207e		       85 02		      sta	WSYNC
      0  2080					      sleep	37
      1  2080				   .CYCLES    SET	37
      2  2080
      3  2080				  -	      IF	.CYCLES < 2
      4  2080				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2080				  -	      ERR
      6  2080					      ENDIF
      7  2080
      8  2080					      IF	.CYCLES & 1
      9  2080					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2080		       04 00		      nop	0
     11  2082				  -	      ELSE
     12  2082				  -	      bit	VSYNC
     13  2082					      ENDIF
     14  2082				   .CYCLES    SET	.CYCLES - 3
     15  2082					      ENDIF
     16  2082
     17  2082					      REPEAT	.CYCLES / 2
     18  2082		       ea		      nop
     17  2082					      REPEND
     18  2083		       ea		      nop
     17  2083					      REPEND
     18  2084		       ea		      nop
     17  2084					      REPEND
     18  2085		       ea		      nop
     17  2085					      REPEND
     18  2086		       ea		      nop
     17  2086					      REPEND
     18  2087		       ea		      nop
     17  2087					      REPEND
     18  2088		       ea		      nop
     17  2088					      REPEND
     18  2089		       ea		      nop
     17  2089					      REPEND
     18  208a		       ea		      nop
     17  208a					      REPEND
     18  208b		       ea		      nop
     17  208b					      REPEND
     18  208c		       ea		      nop
     17  208c					      REPEND
     18  208d		       ea		      nop
     17  208d					      REPEND
     18  208e		       ea		      nop
     17  208e					      REPEND
     18  208f		       ea		      nop
     17  208f					      REPEND
     18  2090		       ea		      nop
     17  2090					      REPEND
     18  2091		       ea		      nop
     17  2091					      REPEND
     18  2092		       ea		      nop
     19  2093					      REPEND
     38  2093		       85 10		      sta	RESP0
     39  2095		       85 11		      sta	RESP1
     40  2097		       85 02		      sta	WSYNC
      0  2099					      sleep	29
      1  2099				   .CYCLES    SET	29
      2  2099
      3  2099				  -	      IF	.CYCLES < 2
      4  2099				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2099				  -	      ERR
      6  2099					      ENDIF
      7  2099
      8  2099					      IF	.CYCLES & 1
      9  2099					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2099		       04 00		      nop	0
     11  209b				  -	      ELSE
     12  209b				  -	      bit	VSYNC
     13  209b					      ENDIF
     14  209b				   .CYCLES    SET	.CYCLES - 3
     15  209b					      ENDIF
     16  209b
     17  209b					      REPEAT	.CYCLES / 2
     18  209b		       ea		      nop
     17  209b					      REPEND
     18  209c		       ea		      nop
     17  209c					      REPEND
     18  209d		       ea		      nop
     17  209d					      REPEND
     18  209e		       ea		      nop
     17  209e					      REPEND
     18  209f		       ea		      nop
     17  209f					      REPEND
     18  20a0		       ea		      nop
     17  20a0					      REPEND
     18  20a1		       ea		      nop
     17  20a1					      REPEND
     18  20a2		       ea		      nop
     17  20a2					      REPEND
     18  20a3		       ea		      nop
     17  20a3					      REPEND
     18  20a4		       ea		      nop
     17  20a4					      REPEND
     18  20a5		       ea		      nop
     17  20a5					      REPEND
     18  20a6		       ea		      nop
     17  20a6					      REPEND
     18  20a7		       ea		      nop
     19  20a8					      REPEND
     42  20a8		       85 12		      sta	RESM0
      0  20aa					      sleep	7
      1  20aa				   .CYCLES    SET	7
      2  20aa
      3  20aa				  -	      IF	.CYCLES < 2
      4  20aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20aa				  -	      ERR
      6  20aa					      ENDIF
      7  20aa
      8  20aa					      IF	.CYCLES & 1
      9  20aa					      IFNCONST	NO_ILLEGAL_OPCODES
     10  20aa		       04 00		      nop	0
     11  20ac				  -	      ELSE
     12  20ac				  -	      bit	VSYNC
     13  20ac					      ENDIF
     14  20ac				   .CYCLES    SET	.CYCLES - 3
     15  20ac					      ENDIF
     16  20ac
     17  20ac					      REPEAT	.CYCLES / 2
     18  20ac		       ea		      nop
     17  20ac					      REPEND
     18  20ad		       ea		      nop
     19  20ae					      REPEND
     44  20ae		       85 14		      sta	RESBL
     45  20b0		       85 02		      sta	WSYNC
     46  20b2
     47  20b2		       85 2a		      sta	HMOVE	;3
     48  20b4
     49  20b4		       a9 03		      lda	#3	;2
     50  20b6		       85 25		      sta	VDELP0	;3
     51  20b8		       85 26		      sta	VDELP1	;3
     52  20ba
     53  20ba							;lda #2		;2
     54  20ba							;sta ENAM0	;3
     55  20ba							;sta ENABL	;3
     56  20ba		       a9 05		      lda	#5	;2
     57  20bc		       85 0a		      sta	CTRLPF	;3
     58  20be		       a9 00		      lda	#0	;2
     59  20c0		       85 27		      sta	VDELBL	;3
     60  20c2
     61  20c2							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  20c2		       85 2b		      sta	HMCLR
     63  20c4		       85 02		      sta	WSYNC
     64  20c6
      0  20c6					      sleep	(59-8)	;59
      1  20c6				   .CYCLES    SET	(59-8)
      2  20c6
      3  20c6				  -	      IF	.CYCLES < 2
      4  20c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20c6				  -	      ERR
      6  20c6					      ENDIF
      7  20c6
      8  20c6					      IF	.CYCLES & 1
      9  20c6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  20c6		       04 00		      nop	0
     11  20c8				  -	      ELSE
     12  20c8				  -	      bit	VSYNC
     13  20c8					      ENDIF
     14  20c8				   .CYCLES    SET	.CYCLES - 3
     15  20c8					      ENDIF
     16  20c8
     17  20c8					      REPEAT	.CYCLES / 2
     18  20c8		       ea		      nop
     17  20c8					      REPEND
     18  20c9		       ea		      nop
     17  20c9					      REPEND
     18  20ca		       ea		      nop
     17  20ca					      REPEND
     18  20cb		       ea		      nop
     17  20cb					      REPEND
     18  20cc		       ea		      nop
     17  20cc					      REPEND
     18  20cd		       ea		      nop
     17  20cd					      REPEND
     18  20ce		       ea		      nop
     17  20ce					      REPEND
     18  20cf		       ea		      nop
     17  20cf					      REPEND
     18  20d0		       ea		      nop
     17  20d0					      REPEND
     18  20d1		       ea		      nop
     17  20d1					      REPEND
     18  20d2		       ea		      nop
     17  20d2					      REPEND
     18  20d3		       ea		      nop
     17  20d3					      REPEND
     18  20d4		       ea		      nop
     17  20d4					      REPEND
     18  20d5		       ea		      nop
     17  20d5					      REPEND
     18  20d6		       ea		      nop
     17  20d6					      REPEND
     18  20d7		       ea		      nop
     17  20d7					      REPEND
     18  20d8		       ea		      nop
     17  20d8					      REPEND
     18  20d9		       ea		      nop
     17  20d9					      REPEND
     18  20da		       ea		      nop
     17  20da					      REPEND
     18  20db		       ea		      nop
     17  20db					      REPEND
     18  20dc		       ea		      nop
     17  20dc					      REPEND
     18  20dd		       ea		      nop
     17  20dd					      REPEND
     18  20de		       ea		      nop
     17  20de					      REPEND
     18  20df		       ea		      nop
     19  20e0					      REPEND
     66  20e0
     67  20e0		       a9 02		      lda	#2
     68  20e2		       85 1f		      sta	ENABL
     69  20e4		       85 1d		      sta	ENAM0
     70  20e6
     71  20e6		       4c 00 b1 	      jmp	pf48x1_loop	;3
     72  20e9
     73  20e9					      if	>. != >[.+$5e]
     74  2100		       00 00 00 00*	      align	256
     75  2100					      endif
     76  2100
     77  2100				   pf48x1_loop
      0  2100					      sleep	6
      1  2100				   .CYCLES    SET	6
      2  2100
      3  2100				  -	      IF	.CYCLES < 2
      4  2100				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2100				  -	      ERR
      6  2100					      ENDIF
      7  2100
      8  2100				  -	      IF	.CYCLES & 1
      9  2100				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2100				  -	      nop	0
     11  2100				  -	      ELSE
     12  2100				  -	      bit	VSYNC
     13  2100				  -	      ENDIF
     14  2100				  -.CYCLES    SET	.CYCLES - 3
     15  2100					      ENDIF
     16  2100
     17  2100					      REPEAT	.CYCLES / 2
     18  2100		       ea		      nop
     17  2100					      REPEND
     18  2101		       ea		      nop
     17  2101					      REPEND
     18  2102		       ea		      nop
     19  2103					      REPEND
     79  2103				   pf48x1_loop_line1
     80  2103
     81  2103		       b1 96		      lda	(scorepointers+0),y	;5
     82  2105		       85 1b		      sta	GRP0	;3
     83  2107
     84  2107							;fix the lost bit0 in the first character
     85  2107		       2a		      rol		;2
     86  2108		       49 02		      eor	#2	;2
     87  210a		       85 1f		      sta	ENABL	;3
     88  210c
     89  210c		       b1 98		      lda	(scorepointers+2),y	;5
     90  210e		       85 1c		      sta	GRP1	; 3
     91  2110
     92  2110		       b3 a0		      lax	(scorepointers+10),y	; 5
     93  2112		       9a		      txs		; 2	
     94  2113		       b3 9e		      lax	(scorepointers+8),y	; 5
     95  2115
     96  2115		       b1 9a		      lda	(scorepointers+4),y	; 5
     97  2117		       85 1b		      sta	GRP0
     98  2119		       b1 9c		      lda	(scorepointers+6),y	; 5
     99  211b		       85 1c		      sta	GRP1
    100  211d
    101  211d		       86 1b		      stx	GRP0
    102  211f		       ba		      tsx
    103  2120		       86 1c		      stx	GRP1
    104  2122		       84 1b		      sty	GRP0
    105  2124
    106  2124		       a5 f2		      lda	aux3	;3
    107  2126		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2128					      sleep	2
      1  2128				   .CYCLES    SET	2
      2  2128
      3  2128				  -	      IF	.CYCLES < 2
      4  2128				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2128				  -	      ERR
      6  2128					      ENDIF
      7  2128
      8  2128				  -	      IF	.CYCLES & 1
      9  2128				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2128				  -	      nop	0
     11  2128				  -	      ELSE
     12  2128				  -	      bit	VSYNC
     13  2128				  -	      ENDIF
     14  2128				  -.CYCLES    SET	.CYCLES - 3
     15  2128					      ENDIF
     16  2128
     17  2128					      REPEAT	.CYCLES / 2
     18  2128		       ea		      nop
     19  2129					      REPEND
    109  2129
    110  2129		       88		      dey
    111  212a		       c0 ff		      cpy	#255
    112  212c		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  212e
    114  212e		       4c 5e b1 	      jmp	pf48x1_codeend
    115  2131
    116  2131				   pf48x1_loop_line2
    117  2131
    118  2131		       b1 96		      lda	(scorepointers+0),y	;5
    119  2133		       85 1b		      sta	GRP0	;3
    120  2135
    121  2135		       b1 f4		      lda	(aux5),y	;5
    122  2137		       85 91		      sta	missile0y	;3
    123  2139
      0  2139					      sleep	7
      1  2139				   .CYCLES    SET	7
      2  2139
      3  2139				  -	      IF	.CYCLES < 2
      4  2139				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2139				  -	      ERR
      6  2139					      ENDIF
      7  2139
      8  2139					      IF	.CYCLES & 1
      9  2139					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2139		       04 00		      nop	0
     11  213b				  -	      ELSE
     12  213b				  -	      bit	VSYNC
     13  213b					      ENDIF
     14  213b				   .CYCLES    SET	.CYCLES - 3
     15  213b					      ENDIF
     16  213b
     17  213b					      REPEAT	.CYCLES / 2
     18  213b		       ea		      nop
     17  213b					      REPEND
     18  213c		       ea		      nop
     19  213d					      REPEND
    125  213d
    126  213d		       b1 98		      lda	(scorepointers+2),y	;5
    127  213f		       85 1c		      sta	GRP1	; 3
    128  2141
    129  2141		       b3 a0		      lax	(scorepointers+10),y	; 5
    130  2143		       9a		      txs		; 2	
    131  2144		       b3 9e		      lax	(scorepointers+8),y	; 5
    132  2146
    133  2146		       b1 9a		      lda	(scorepointers+4),y	; 5
    134  2148		       85 1b		      sta	GRP0
    135  214a		       b1 9c		      lda	(scorepointers+6),y	; 5
    136  214c		       85 1c		      sta	GRP1
    137  214e		       86 1b		      stx	GRP0
    138  2150		       ba		      tsx
    139  2151		       86 1c		      stx	GRP1
    140  2153		       84 1b		      sty	GRP0
    141  2155
    142  2155		       a5 91		      lda	missile0y
    143  2157		       85 06		      sta	COLUP0
    144  2159		       85 07		      sta	COLUP1
    145  215b
    146  215b							;sleep 6
    147  215b		       88		      dey
    148  215c							;cmp #255
    149  215c		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  215e
    151  215e				   pf48x1_codeend
    152  215e							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  215e
    154  215e		       a9 00		      lda	#0
    155  2160		       85 1b		      sta	GRP0
    156  2162		       85 1c		      sta	GRP1
    157  2164		       85 1f		      sta	ENABL
    158  2166		       85 1d		      sta	ENAM0
    159  2168		       85 25		      sta	VDELP0
    160  216a		       85 26		      sta	VDELP1
    161  216c		       85 0d		      sta	PF0
    162  216e		       85 0e		      sta	PF1
    163  2170		       85 0f		      sta	PF2
    164  2172
    165  2172		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  2174		       9a		      txs
    167  2175		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  2176					      endif		;mk_48x1_on
     73  2176
     74  2176					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  2176					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  2176
      2  2176				   draw_bmp_48x1_1
      3  2176
      4  2176		       a9 00		      lda	#0
      5  2178		       85 1b		      sta	GRP0
      6  217a		       85 1c		      sta	GRP1
      7  217c
      8  217c		       a0 59		      ldy	#(bmp_48x1_1_window-1)
      9  217e
     10  217e							;setup score pointers to point at my bitmap slices instead
     11  217e		       a9 6c		      lda	#<bmp_48x1_1_00
     12  2180		       18		      clc
     13  2181		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  2183				  -	      ifconst	bmp_48x1_1_index
     15  2183				  -	      sec
     16  2183				  -	      sbc	bmp_48x1_1_index
     17  2183					      endif
     18  2183		       85 96		      sta	scorepointers+0
     19  2185		       a9 b4		      lda	#>bmp_48x1_1_00
     20  2187		       85 97		      sta	scorepointers+1
     21  2189
     22  2189
     23  2189		       a9 00		      lda	#<bmp_48x1_1_01
     24  218b		       18		      clc
     25  218c		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  218e				  -	      ifconst	bmp_48x1_1_index
     27  218e				  -	      sec
     28  218e				  -	      sbc	bmp_48x1_1_index
     29  218e					      endif
     30  218e		       85 98		      sta	scorepointers+2
     31  2190		       a9 b5		      lda	#>bmp_48x1_1_01
     32  2192		       85 99		      sta	scorepointers+3
     33  2194
     34  2194
     35  2194		       a9 63		      lda	#<bmp_48x1_1_02
     36  2196		       18		      clc
     37  2197		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  2199				  -	      ifconst	bmp_48x1_1_index
     39  2199				  -	      sec
     40  2199				  -	      sbc	bmp_48x1_1_index
     41  2199					      endif
     42  2199		       85 9a		      sta	scorepointers+4
     43  219b		       a9 b5		      lda	#>bmp_48x1_1_02
     44  219d		       85 9b		      sta	scorepointers+5
     45  219f
     46  219f
     47  219f		       a9 00		      lda	#<bmp_48x1_1_03
     48  21a1		       18		      clc
     49  21a2		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  21a4				  -	      ifconst	bmp_48x1_1_index
     51  21a4				  -	      sec
     52  21a4				  -	      sbc	bmp_48x1_1_index
     53  21a4					      endif
     54  21a4		       85 9c		      sta	scorepointers+6
     55  21a6		       a9 b6		      lda	#>bmp_48x1_1_03
     56  21a8		       85 9d		      sta	scorepointers+7
     57  21aa
     58  21aa
     59  21aa		       a9 63		      lda	#<bmp_48x1_1_04
     60  21ac		       18		      clc
     61  21ad		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  21af				  -	      ifconst	bmp_48x1_1_index
     63  21af				  -	      sec
     64  21af				  -	      sbc	bmp_48x1_1_index
     65  21af					      endif
     66  21af		       85 9e		      sta	scorepointers+8
     67  21b1		       a9 b6		      lda	#>bmp_48x1_1_04
     68  21b3		       85 9f		      sta	scorepointers+9
     69  21b5
     70  21b5
     71  21b5		       a9 00		      lda	#<bmp_48x1_1_05
     72  21b7		       18		      clc
     73  21b8		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  21ba				  -	      ifconst	bmp_48x1_1_index
     75  21ba				  -	      sec
     76  21ba				  -	      sbc	bmp_48x1_1_index
     77  21ba					      endif
     78  21ba		       85 a0		      sta	scorepointers+10
     79  21bc		       a9 b7		      lda	#>bmp_48x1_1_05
     80  21be		       85 a1		      sta	scorepointers+11
     81  21c0
     82  21c0		       a9 01		      lda	#1	;single line kernel
     83  21c2		       85 f2		      sta	aux3
     84  21c4
     85  21c4		       ad 6b b4 	      lda	bmp_48x1_1_color
     86  21c7		       85 06		      sta	COLUP0	;3
     87  21c9		       85 07		      sta	COLUP1	;3
     88  21cb		       85 2b		      sta	HMCLR	;3
     89  21cd
     90  21cd
     91  21cd		       4c 4f b0 	      jmp	draw_bmp_48x1adv
     92  21d0
------- FILE titlescreen/asm/titlescreen.asm
     76  21d0					      endif		;mk_48x1_1_on
     77  21d0
     78  21d0				  -	      ifconst	mk_48x1_2_on
     79  21d0				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  21d0					      endif		;mk_48x1_2_on
     81  21d0
     82  21d0				  -	      ifconst	mk_48x1_3_on
     83  21d0				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  21d0					      endif		;mk_48x1_3_on
     85  21d0
     86  21d0				  -	      ifconst	mk_48x2_1_on
     87  21d0				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  21d0					      endif		;mk_48x2_1_on
     89  21d0
     90  21d0				  -	      ifconst	mk_48x2_2_on
     91  21d0				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  21d0					      endif		;mk_48x2_2_on
     93  21d0
     94  21d0				  -	      ifconst	mk_48x2_3_on
     95  21d0				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  21d0					      endif		;mk_48x2_3_on
     97  21d0
     98  21d0					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 2
      0  21d0					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  21d0				   draw_bmp_96x2_1
      2  21d0
      3  21d0				  -	      ifconst	bmp_96x2_1_index
      4  21d0				  -	      lda	#(bmp_96x2_1_height-1)
      5  21d0				  -	      sec
      6  21d0				  -	      sbc	bmp_96x2_1_index
      7  21d0				  -	      tay
      8  21d0				  -	      sbc	#bmp_96x2_1_window
      9  21d0				  -	      sta	temp1
     10  21d0					      else
     11  21d0		       a0 1b		      ldy	#(bmp_96x2_1_window-1)
     12  21d2		       a9 ff		      lda	#255
     13  21d4		       85 9c		      sta	temp1
     14  21d6					      endif
     15  21d6
     16  21d6		       a9 03		      lda	#3
     17  21d8		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
     18  21da		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     19  21dc		       a9 00		      lda	#0
     20  21de
     21  21de		       b9 64 b7 	      lda	bmp_96x2_1_colors,y	;4
     22  21e1				  -	      ifconst	bmp_96x2_1_fade
     23  21e1				  -	      and	bmp_96x2_1_fade
     24  21e1					      endif
     25  21e1		       85 06		      sta	COLUP0	;3
     26  21e3		       85 07		      sta	COLUP1	;3
     27  21e5		       85 2b		      sta	HMCLR	;3
     28  21e7
     29  21e7		       a5 82		      lda	titleframe
     30  21e9		       29 01		      and	#1
     31  21eb		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  21ed		       4c 97 b2 	      jmp	pf96x2_1_frame1
     33  21f0				   jmp_pf96x2_1_frame0
     34  21f0		       4c f3 b1 	      jmp	pf96x2_1_frame0
     35  21f3
     36  21f3				   pf96x2_1_frame0
     37  21f3							;postion P0 and P1
     38  21f3		       85 02		      sta	WSYNC
     39  21f5		       a9 e0		      lda	#%11100000
     40  21f7		       85 20		      sta	HMP0
     41  21f9		       a9 10		      lda	#%00010000
     42  21fb		       85 21		      sta	HMP1
     43  21fd		       85 02		      sta	WSYNC
      0  21ff					      sleep	28
      1  21ff				   .CYCLES    SET	28
      2  21ff
      3  21ff				  -	      IF	.CYCLES < 2
      4  21ff				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ff				  -	      ERR
      6  21ff					      ENDIF
      7  21ff
      8  21ff				  -	      IF	.CYCLES & 1
      9  21ff				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ff				  -	      nop	0
     11  21ff				  -	      ELSE
     12  21ff				  -	      bit	VSYNC
     13  21ff				  -	      ENDIF
     14  21ff				  -.CYCLES    SET	.CYCLES - 3
     15  21ff					      ENDIF
     16  21ff
     17  21ff					      REPEAT	.CYCLES / 2
     18  21ff		       ea		      nop
     17  21ff					      REPEND
     18  2200		       ea		      nop
     17  2200					      REPEND
     18  2201		       ea		      nop
     17  2201					      REPEND
     18  2202		       ea		      nop
     17  2202					      REPEND
     18  2203		       ea		      nop
     17  2203					      REPEND
     18  2204		       ea		      nop
     17  2204					      REPEND
     18  2205		       ea		      nop
     17  2205					      REPEND
     18  2206		       ea		      nop
     17  2206					      REPEND
     18  2207		       ea		      nop
     17  2207					      REPEND
     18  2208		       ea		      nop
     17  2208					      REPEND
     18  2209		       ea		      nop
     17  2209					      REPEND
     18  220a		       ea		      nop
     17  220a					      REPEND
     18  220b		       ea		      nop
     17  220b					      REPEND
     18  220c		       ea		      nop
     19  220d					      REPEND
     45  220d		       85 10		      sta	RESP0
      0  220f					      sleep	14
      1  220f				   .CYCLES    SET	14
      2  220f
      3  220f				  -	      IF	.CYCLES < 2
      4  220f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  220f				  -	      ERR
      6  220f					      ENDIF
      7  220f
      8  220f				  -	      IF	.CYCLES & 1
      9  220f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  220f				  -	      nop	0
     11  220f				  -	      ELSE
     12  220f				  -	      bit	VSYNC
     13  220f				  -	      ENDIF
     14  220f				  -.CYCLES    SET	.CYCLES - 3
     15  220f					      ENDIF
     16  220f
     17  220f					      REPEAT	.CYCLES / 2
     18  220f		       ea		      nop
     17  220f					      REPEND
     18  2210		       ea		      nop
     17  2210					      REPEND
     18  2211		       ea		      nop
     17  2211					      REPEND
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     17  2213					      REPEND
     18  2214		       ea		      nop
     17  2214					      REPEND
     18  2215		       ea		      nop
     19  2216					      REPEND
     47  2216		       85 11		      sta	RESP1
     48  2218		       85 02		      sta	WSYNC
     49  221a		       85 2a		      sta	HMOVE
     50  221c
     51  221c		       85 02		      sta	WSYNC
     52  221e		       85 2b		      sta	HMCLR
     53  2220		       85 02		      sta	WSYNC
     54  2222
      0  2222					      sleep	4
      1  2222				   .CYCLES    SET	4
      2  2222
      3  2222				  -	      IF	.CYCLES < 2
      4  2222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2222				  -	      ERR
      6  2222					      ENDIF
      7  2222
      8  2222				  -	      IF	.CYCLES & 1
      9  2222				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2222				  -	      nop	0
     11  2222				  -	      ELSE
     12  2222				  -	      bit	VSYNC
     13  2222				  -	      ENDIF
     14  2222				  -.CYCLES    SET	.CYCLES - 3
     15  2222					      ENDIF
     16  2222
     17  2222					      REPEAT	.CYCLES / 2
     18  2222		       ea		      nop
     17  2222					      REPEND
     18  2223		       ea		      nop
     19  2224					      REPEND
     56  2224		       4c 27 b2 	      jmp	pfline_96x2_1_frame0
     57  2227							;align so our branch doesn't unexpectedly cross a page...
     58  2227				  -	      if	>. != >[.+$70]
     59  2227				  -	      align	256
     60  2227					      endif
     61  2227
     62  2227				   pfline_96x2_1_frame0
     63  2227		       a9 80		      lda	#$80	;2
     64  2229		       85 20		      sta	HMP0	;3
     65  222b		       85 21		      sta	HMP1	;3
     66  222d
     67  222d		       b9 3c b8 	      lda	bmp_96x2_1_06,y	;4
     68  2230		       85 1c		      sta	GRP1	;3
     69  2232
     70  2232		       b9 82 b7 	      lda	bmp_96x2_1_00,y
     71  2235		       85 1b		      sta	GRP0
     72  2237		       b9 be b7 	      lda	bmp_96x2_1_02,y
     73  223a		       85 1b		      sta	GRP0
     74  223c		       b9 00 b8 	      lda	bmp_96x2_1_04,y
     75  223f		       85 1b		      sta	GRP0
     76  2241
      0  2241					      sleep	2
      1  2241				   .CYCLES    SET	2
      2  2241
      3  2241				  -	      IF	.CYCLES < 2
      4  2241				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2241				  -	      ERR
      6  2241					      ENDIF
      7  2241
      8  2241				  -	      IF	.CYCLES & 1
      9  2241				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2241				  -	      nop	0
     11  2241				  -	      ELSE
     12  2241				  -	      bit	VSYNC
     13  2241				  -	      ENDIF
     14  2241				  -.CYCLES    SET	.CYCLES - 3
     15  2241					      ENDIF
     16  2241
     17  2241					      REPEAT	.CYCLES / 2
     18  2241		       ea		      nop
     19  2242					      REPEND
     78  2242
     79  2242		       b9 78 b8 	      lda	bmp_96x2_1_08,y
     80  2245		       85 1c		      sta	GRP1
     81  2247		       b9 b4 b8 	      lda	bmp_96x2_1_10,y
     82  224a		       85 1c		      sta	GRP1
     83  224c
     84  224c		       b9 a0 b7 	      lda	bmp_96x2_1_01,y
     85  224f		       85 1b		      sta	GRP0
     86  2251
      0  2251					      sleep	8
      1  2251				   .CYCLES    SET	8
      2  2251
      3  2251				  -	      IF	.CYCLES < 2
      4  2251				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2251				  -	      ERR
      6  2251					      ENDIF
      7  2251
      8  2251				  -	      IF	.CYCLES & 1
      9  2251				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2251				  -	      nop	0
     11  2251				  -	      ELSE
     12  2251				  -	      bit	VSYNC
     13  2251				  -	      ENDIF
     14  2251				  -.CYCLES    SET	.CYCLES - 3
     15  2251					      ENDIF
     16  2251
     17  2251					      REPEAT	.CYCLES / 2
     18  2251		       ea		      nop
     17  2251					      REPEND
     18  2252		       ea		      nop
     17  2252					      REPEND
     18  2253		       ea		      nop
     17  2253					      REPEND
     18  2254		       ea		      nop
     19  2255					      REPEND
     88  2255
     89  2255							;sta WSYNC	;=0
     90  2255		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2257
     92  2257		       b9 63 b7 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  225a				  -	      ifconst	bmp_96x2_1_fade
     94  225a				  -	      and	bmp_96x2_1_fade
     95  225a					      else
      0  225a					      sleep	3
      1  225a				   .CYCLES    SET	3
      2  225a
      3  225a				  -	      IF	.CYCLES < 2
      4  225a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225a				  -	      ERR
      6  225a					      ENDIF
      7  225a
      8  225a					      IF	.CYCLES & 1
      9  225a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  225a		       04 00		      nop	0
     11  225c				  -	      ELSE
     12  225c				  -	      bit	VSYNC
     13  225c					      ENDIF
     14  225c				   .CYCLES    SET	.CYCLES - 3
     15  225c					      ENDIF
     16  225c
     17  225c				  -	      REPEAT	.CYCLES / 2
     18  225c				  -	      nop
     19  225c					      REPEND
     97  225c					      endif
     98  225c		       aa		      tax
     99  225d
    100  225d		       a9 00		      lda	#0	;2
    101  225f		       85 20		      sta	HMP0	;3
    102  2261		       85 21		      sta	HMP1	;3
    103  2263
      0  2263					      sleep	7
      1  2263				   .CYCLES    SET	7
      2  2263
      3  2263				  -	      IF	.CYCLES < 2
      4  2263				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2263				  -	      ERR
      6  2263					      ENDIF
      7  2263
      8  2263					      IF	.CYCLES & 1
      9  2263					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2263		       04 00		      nop	0
     11  2265				  -	      ELSE
     12  2265				  -	      bit	VSYNC
     13  2265					      ENDIF
     14  2265				   .CYCLES    SET	.CYCLES - 3
     15  2265					      ENDIF
     16  2265
     17  2265					      REPEAT	.CYCLES / 2
     18  2265		       ea		      nop
     17  2265					      REPEND
     18  2266		       ea		      nop
     19  2267					      REPEND
    105  2267
    106  2267		       b9 5a b8 	      lda	bmp_96x2_1_07,y
    107  226a		       85 1c		      sta	GRP1
    108  226c
    109  226c		       b9 dc b7 	      lda	bmp_96x2_1_03,y	;5
    110  226f		       85 1b		      sta	GRP0	;3 =  8
    111  2271		       b9 1e b8 	      lda	bmp_96x2_1_05,y	;5
    112  2274		       85 1b		      sta	GRP0	;3 =  8
    113  2276
      0  2276					      sleep	2
      1  2276				   .CYCLES    SET	2
      2  2276
      3  2276				  -	      IF	.CYCLES < 2
      4  2276				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2276				  -	      ERR
      6  2276					      ENDIF
      7  2276
      8  2276				  -	      IF	.CYCLES & 1
      9  2276				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2276				  -	      nop	0
     11  2276				  -	      ELSE
     12  2276				  -	      bit	VSYNC
     13  2276				  -	      ENDIF
     14  2276				  -.CYCLES    SET	.CYCLES - 3
     15  2276					      ENDIF
     16  2276
     17  2276					      REPEAT	.CYCLES / 2
     18  2276		       ea		      nop
     19  2277					      REPEND
    115  2277
    116  2277		       b9 96 b8 	      lda	bmp_96x2_1_09,y	;5
    117  227a		       85 1c		      sta	GRP1	;3 =  8
    118  227c		       b9 d2 b8 	      lda	bmp_96x2_1_11,y	;5
    119  227f		       85 1c		      sta	GRP1	;3 =  8
    120  2281
      0  2281					      sleep	2
      1  2281				   .CYCLES    SET	2
      2  2281
      3  2281				  -	      IF	.CYCLES < 2
      4  2281				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2281				  -	      ERR
      6  2281					      ENDIF
      7  2281
      8  2281				  -	      IF	.CYCLES & 1
      9  2281				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2281				  -	      nop	0
     11  2281				  -	      ELSE
     12  2281				  -	      bit	VSYNC
     13  2281				  -	      ENDIF
     14  2281				  -.CYCLES    SET	.CYCLES - 3
     15  2281					      ENDIF
     16  2281
     17  2281					      REPEAT	.CYCLES / 2
     18  2281		       ea		      nop
     19  2282					      REPEND
    122  2282		       86 07		      stx	COLUP1
    123  2284		       86 06		      stx	COLUP0
    124  2286
    125  2286
    126  2286		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE 
      0  2288					      sleep	2
      1  2288				   .CYCLES    SET	2
      2  2288
      3  2288				  -	      IF	.CYCLES < 2
      4  2288				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2288				  -	      ERR
      6  2288					      ENDIF
      7  2288
      8  2288				  -	      IF	.CYCLES & 1
      9  2288				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2288				  -	      nop	0
     11  2288				  -	      ELSE
     12  2288				  -	      bit	VSYNC
     13  2288				  -	      ENDIF
     14  2288				  -.CYCLES    SET	.CYCLES - 3
     15  2288					      ENDIF
     16  2288
     17  2288					      REPEAT	.CYCLES / 2
     18  2288		       ea		      nop
     19  2289					      REPEND
    128  2289		       88		      dey
    129  228a
    130  228a		       c4 9c		      cpy	temp1	;3
    131  228c		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    132  228e
    133  228e				   pf96x2_1_0codeend
    134  228e							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    135  228e
    136  228e		       a9 00		      lda	#0
    137  2290		       85 1b		      sta	GRP0
    138  2292		       85 1c		      sta	GRP1
    139  2294		       4c 6e b3 	      jmp	pfdone_96x2_1
    140  2297
    141  2297
    142  2297				   pf96x2_1_frame1
    143  2297
    144  2297							;postion P0 and P1
    145  2297		       85 02		      sta	WSYNC
    146  2299		       a9 20		      lda	#%00100000
    147  229b		       85 20		      sta	HMP0
    148  229d		       a9 00		      lda	#0
    149  229f		       a9 f0		      lda	#%11110000
    150  22a1		       85 21		      sta	HMP1
    151  22a3		       85 02		      sta	WSYNC
      0  22a5					      sleep	32
      1  22a5				   .CYCLES    SET	32
      2  22a5
      3  22a5				  -	      IF	.CYCLES < 2
      4  22a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a5				  -	      ERR
      6  22a5					      ENDIF
      7  22a5
      8  22a5				  -	      IF	.CYCLES & 1
      9  22a5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a5				  -	      nop	0
     11  22a5				  -	      ELSE
     12  22a5				  -	      bit	VSYNC
     13  22a5				  -	      ENDIF
     14  22a5				  -.CYCLES    SET	.CYCLES - 3
     15  22a5					      ENDIF
     16  22a5
     17  22a5					      REPEAT	.CYCLES / 2
     18  22a5		       ea		      nop
     17  22a5					      REPEND
     18  22a6		       ea		      nop
     17  22a6					      REPEND
     18  22a7		       ea		      nop
     17  22a7					      REPEND
     18  22a8		       ea		      nop
     17  22a8					      REPEND
     18  22a9		       ea		      nop
     17  22a9					      REPEND
     18  22aa		       ea		      nop
     17  22aa					      REPEND
     18  22ab		       ea		      nop
     17  22ab					      REPEND
     18  22ac		       ea		      nop
     17  22ac					      REPEND
     18  22ad		       ea		      nop
     17  22ad					      REPEND
     18  22ae		       ea		      nop
     17  22ae					      REPEND
     18  22af		       ea		      nop
     17  22af					      REPEND
     18  22b0		       ea		      nop
     17  22b0					      REPEND
     18  22b1		       ea		      nop
     17  22b1					      REPEND
     18  22b2		       ea		      nop
     17  22b2					      REPEND
     18  22b3		       ea		      nop
     17  22b3					      REPEND
     18  22b4		       ea		      nop
     19  22b5					      REPEND
    153  22b5		       85 10		      sta	RESP0
      0  22b7					      sleep	12
      1  22b7				   .CYCLES    SET	12
      2  22b7
      3  22b7				  -	      IF	.CYCLES < 2
      4  22b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22b7				  -	      ERR
      6  22b7					      ENDIF
      7  22b7
      8  22b7				  -	      IF	.CYCLES & 1
      9  22b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22b7				  -	      nop	0
     11  22b7				  -	      ELSE
     12  22b7				  -	      bit	VSYNC
     13  22b7				  -	      ENDIF
     14  22b7				  -.CYCLES    SET	.CYCLES - 3
     15  22b7					      ENDIF
     16  22b7
     17  22b7					      REPEAT	.CYCLES / 2
     18  22b7		       ea		      nop
     17  22b7					      REPEND
     18  22b8		       ea		      nop
     17  22b8					      REPEND
     18  22b9		       ea		      nop
     17  22b9					      REPEND
     18  22ba		       ea		      nop
     17  22ba					      REPEND
     18  22bb		       ea		      nop
     17  22bb					      REPEND
     18  22bc		       ea		      nop
     19  22bd					      REPEND
    155  22bd		       85 11		      sta	RESP1
    156  22bf		       85 02		      sta	WSYNC
    157  22c1		       85 2a		      sta	HMOVE
    158  22c3
    159  22c3		       85 02		      sta	WSYNC
    160  22c5		       85 2b		      sta	HMCLR
    161  22c7
    162  22c7
    163  22c7
    164  22c7		       85 02		      sta	WSYNC
      0  22c9					      sleep	3
      1  22c9				   .CYCLES    SET	3
      2  22c9
      3  22c9				  -	      IF	.CYCLES < 2
      4  22c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22c9				  -	      ERR
      6  22c9					      ENDIF
      7  22c9
      8  22c9					      IF	.CYCLES & 1
      9  22c9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22c9		       04 00		      nop	0
     11  22cb				  -	      ELSE
     12  22cb				  -	      bit	VSYNC
     13  22cb					      ENDIF
     14  22cb				   .CYCLES    SET	.CYCLES - 3
     15  22cb					      ENDIF
     16  22cb
     17  22cb				  -	      REPEAT	.CYCLES / 2
     18  22cb				  -	      nop
     19  22cb					      REPEND
    166  22cb		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    167  22ce
    168  22ce							;align so our branch doesn't unexpectedly cross a page...
    169  22ce					      if	>. != >[.+$70]
    170  2300		       00 00 00 00*	      align	256
    171  2300					      endif
    172  2300
    173  2300				   pfline_96x2_1_frame1
    174  2300
    175  2300		       85 2a		      sta	HMOVE
    176  2302
    177  2302		       b9 5a b8 	      lda	bmp_96x2_1_07,y	;4
    178  2305		       85 1c		      sta	GRP1	;3
    179  2307
    180  2307		       a9 00		      lda	#$0	;2
    181  2309		       85 20		      sta	HMP0	;3
    182  230b		       85 21		      sta	HMP1	;3
    183  230d
    184  230d		       b9 a0 b7 	      lda	bmp_96x2_1_01,y
    185  2310		       8d 1b 00 	      sta.w	GRP0
    186  2313		       b9 dc b7 	      lda	bmp_96x2_1_03,y
    187  2316		       85 1b		      sta	GRP0
    188  2318		       b9 1e b8 	      lda	bmp_96x2_1_05,y
    189  231b		       85 1b		      sta	GRP0
    190  231d
      0  231d					      sleep	2
      1  231d				   .CYCLES    SET	2
      2  231d
      3  231d				  -	      IF	.CYCLES < 2
      4  231d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  231d				  -	      ERR
      6  231d					      ENDIF
      7  231d
      8  231d				  -	      IF	.CYCLES & 1
      9  231d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  231d				  -	      nop	0
     11  231d				  -	      ELSE
     12  231d				  -	      bit	VSYNC
     13  231d				  -	      ENDIF
     14  231d				  -.CYCLES    SET	.CYCLES - 3
     15  231d					      ENDIF
     16  231d
     17  231d					      REPEAT	.CYCLES / 2
     18  231d		       ea		      nop
     19  231e					      REPEND
    192  231e
    193  231e		       b9 96 b8 	      lda	bmp_96x2_1_09,y
    194  2321		       85 1c		      sta	GRP1
    195  2323		       b9 d2 b8 	      lda	bmp_96x2_1_11,y
    196  2326		       85 1c		      sta	GRP1
    197  2328
    198  2328		       b9 82 b7 	      lda	bmp_96x2_1_00,y
    199  232b		       85 1b		      sta	GRP0
    200  232d
    201  232d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2330
    203  2330							;sta WSYNC	;=0 -----------------------------------------
    204  2330
    205  2330		       b9 3c b8 	      lda	bmp_96x2_1_06,y
    206  2333		       85 1c		      sta	GRP1
    207  2335
      0  2335					      sleep	8
      1  2335				   .CYCLES    SET	8
      2  2335
      3  2335				  -	      IF	.CYCLES < 2
      4  2335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2335				  -	      ERR
      6  2335					      ENDIF
      7  2335
      8  2335				  -	      IF	.CYCLES & 1
      9  2335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2335				  -	      nop	0
     11  2335				  -	      ELSE
     12  2335				  -	      bit	VSYNC
     13  2335				  -	      ENDIF
     14  2335				  -.CYCLES    SET	.CYCLES - 3
     15  2335					      ENDIF
     16  2335
     17  2335					      REPEAT	.CYCLES / 2
     18  2335		       ea		      nop
     17  2335					      REPEND
     18  2336		       ea		      nop
     17  2336					      REPEND
     18  2337		       ea		      nop
     17  2337					      REPEND
     18  2338		       ea		      nop
     19  2339					      REPEND
    209  2339
    210  2339		       b9 63 b7 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    211  233c		       aa		      tax		;2
    212  233d
      0  233d					      sleep	3
      1  233d				   .CYCLES    SET	3
      2  233d
      3  233d				  -	      IF	.CYCLES < 2
      4  233d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  233d				  -	      ERR
      6  233d					      ENDIF
      7  233d
      8  233d					      IF	.CYCLES & 1
      9  233d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  233d		       04 00		      nop	0
     11  233f				  -	      ELSE
     12  233f				  -	      bit	VSYNC
     13  233f					      ENDIF
     14  233f				   .CYCLES    SET	.CYCLES - 3
     15  233f					      ENDIF
     16  233f
     17  233f				  -	      REPEAT	.CYCLES / 2
     18  233f				  -	      nop
     19  233f					      REPEND
    214  233f
    215  233f		       a9 80		      lda	#$80	;2
    216  2341		       85 20		      sta	HMP0	;3
    217  2343		       85 21		      sta	HMP1	;3
    218  2345
    219  2345
    220  2345		       b9 be b7 	      lda	bmp_96x2_1_02,y	;5
    221  2348		       85 1b		      sta	GRP0	;3 =  8
    222  234a
    223  234a		       b9 00 b8 	      lda	bmp_96x2_1_04,y	;5
    224  234d		       85 1b		      sta	GRP0	;3 =  8
    225  234f
      0  234f					      sleep	2
      1  234f				   .CYCLES    SET	2
      2  234f
      3  234f				  -	      IF	.CYCLES < 2
      4  234f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  234f				  -	      ERR
      6  234f					      ENDIF
      7  234f
      8  234f				  -	      IF	.CYCLES & 1
      9  234f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  234f				  -	      nop	0
     11  234f				  -	      ELSE
     12  234f				  -	      bit	VSYNC
     13  234f				  -	      ENDIF
     14  234f				  -.CYCLES    SET	.CYCLES - 3
     15  234f					      ENDIF
     16  234f
     17  234f					      REPEAT	.CYCLES / 2
     18  234f		       ea		      nop
     19  2350					      REPEND
    227  2350
    228  2350		       b9 78 b8 	      lda	bmp_96x2_1_08,y	;5
    229  2353		       85 1c		      sta	GRP1	;3 =  8
    230  2355
    231  2355		       b9 b4 b8 	      lda	bmp_96x2_1_10,y	;5
    232  2358		       85 1c		      sta	GRP1	;3 =  8
    233  235a
      0  235a					      sleep	4
      1  235a				   .CYCLES    SET	4
      2  235a
      3  235a				  -	      IF	.CYCLES < 2
      4  235a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235a				  -	      ERR
      6  235a					      ENDIF
      7  235a
      8  235a				  -	      IF	.CYCLES & 1
      9  235a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  235a				  -	      nop	0
     11  235a				  -	      ELSE
     12  235a				  -	      bit	VSYNC
     13  235a				  -	      ENDIF
     14  235a				  -.CYCLES    SET	.CYCLES - 3
     15  235a					      ENDIF
     16  235a
     17  235a					      REPEAT	.CYCLES / 2
     18  235a		       ea		      nop
     17  235a					      REPEND
     18  235b		       ea		      nop
     19  235c					      REPEND
    235  235c
    236  235c		       88		      dey
    237  235d
    238  235d		       8a		      txa
    239  235e				  -	      ifconst	bmp_96x2_1_fade
    240  235e				  -	      and	bmp_96x2_1_fade
    241  235e					      else
      0  235e					      sleep	3
      1  235e				   .CYCLES    SET	3
      2  235e
      3  235e				  -	      IF	.CYCLES < 2
      4  235e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235e				  -	      ERR
      6  235e					      ENDIF
      7  235e
      8  235e					      IF	.CYCLES & 1
      9  235e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  235e		       04 00		      nop	0
     11  2360				  -	      ELSE
     12  2360				  -	      bit	VSYNC
     13  2360					      ENDIF
     14  2360				   .CYCLES    SET	.CYCLES - 3
     15  2360					      ENDIF
     16  2360
     17  2360				  -	      REPEAT	.CYCLES / 2
     18  2360				  -	      nop
     19  2360					      REPEND
    243  2360					      endif
    244  2360		       85 07		      sta	COLUP1	;3
    245  2362		       85 06		      sta	COLUP0	;3
    246  2364
    247  2364		       c4 9c		      cpy	temp1	;2
    248  2366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    249  2368
    250  2368				   pf96x2_1_1codeend
    251  2368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    252  2368
    253  2368		       a9 00		      lda	#0
    254  236a		       85 1b		      sta	GRP0
    255  236c		       85 1c		      sta	GRP1
    256  236e
    257  236e				   pfdone_96x2_1
    258  236e		       85 02		      sta	WSYNC	; debug
    259  2370
    260  2370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    100  2371					      endif		;mk_96x2_1_on
    101  2371
    102  2371				  -	      ifconst	mk_96x2_2_on
    103  2371				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2371					      endif		;mk_96x2_2_on
    105  2371
    106  2371				  -	      ifconst	mk_96x2_3_on
    107  2371				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2371					      endif		;mk_96x2_3_on
    109  2371
    110  2371					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  2371					      include	"titlescreen/asm/score_kernel.asm"
      1  2371							; The batari Basic score kernel
      2  2371							; This minikernel is not under the same license as the rest of the 
      3  2371							; titlescreen code. Refer to the bB license before you use this in
      4  2371							; a non-bB program.
      5  2371
      6  2371				   draw_score_display
      7  2371
      8  2371		       a7 95		      lax	score+2
      9  2373		       20 48 b4 	      jsr	miniscorepointerset
     10  2376		       84 9b		      sty	scorepointers+5
     11  2378		       86 98		      stx	scorepointers+2
     12  237a		       a7 94		      lax	score+1
     13  237c		       20 48 b4 	      jsr	miniscorepointerset
     14  237f		       84 9a		      sty	scorepointers+4
     15  2381		       86 97		      stx	scorepointers+1
     16  2383		       a7 93		      lax	score
     17  2385		       20 48 b4 	      jsr	miniscorepointerset
     18  2388		       84 99		      sty	scorepointers+3
     19  238a		       86 96		      stx	scorepointers
     20  238c
     21  238c		       a5 97		      lda	scorepointers+1
     22  238e		       85 9c		      sta	temp1
     23  2390
     24  2390		       a5 99		      lda	scorepointers+3
     25  2392		       85 9e		      sta	temp3
     26  2394
     27  2394
     28  2394		       85 2b		      sta	HMCLR
     29  2396		       ba		      tsx
     30  2397		       86 f6		      stx	stack1
     31  2399							;ldx #$10
     32  2399		       a2 20		      ldx	#$20
     33  239b		       86 20		      stx	HMP0
     34  239d
     35  239d		       a2 00		      ldx	#0
     36  239f		       85 02		      sta	WSYNC
     37  23a1		       86 1b		      STx	GRP0
     38  23a3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  23a5
     40  23a5		       a5 9b		      lda	scorepointers+5
     41  23a7		       95 a0		      sta	temp5,x
     42  23a9		       a9 b9		      lda	#>miniscoretable
     43  23ab		       85 97		      sta	scorepointers+1
     44  23ad		       85 99		      sta	scorepointers+3
     45  23af		       95 9b		      sta	scorepointers+5,x
     46  23b1		       95 9d		      sta	temp2,x
     47  23b3		       95 9f		      sta	temp4,x
     48  23b5		       95 a1		      sta	temp6,x
     49  23b7
     50  23b7
     51  23b7		       a0 07		      LDY	#7
     52  23b9		       85 10		      STA	RESP0
     53  23bb		       85 11		      STA	RESP1
     54  23bd
     55  23bd
     56  23bd		       a9 03		      LDA	#$03
     57  23bf		       85 04		      STA	NUSIZ0
     58  23c1		       95 05		      STA	NUSIZ1,x
     59  23c3		       85 25		      STA	VDELP0
     60  23c5		       85 26		      STA	VDELP1
     61  23c7							;LDA #$20
     62  23c7		       a9 30		      LDA	#$30
     63  23c9		       85 21		      STA	HMP1
     64  23cb		       a5 a3		      LDA	scorecolor
     65  23cd		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  23cf				  -	      ifconst	score_kernel_fade
     67  23cf				  -	      and	score_kernel_fade
     68  23cf					      endif
     69  23cf
     70  23cf		       85 06		      STA	COLUP0
     71  23d1		       85 07		      STA	COLUP1
     72  23d3					      ifconst	scorefade
     73  23d3		       85 f7		      STA	stack2	; scorefade
     74  23d5					      endif
     75  23d5		       b1 96		      lda	(scorepointers),y
     76  23d7		       85 1b		      sta	GRP0
     77  23d9		       b1 9e		      lda	(scorepointers+8),y
     78  23db		       85 02		      sta	WSYNC
      0  23dd					      sleep	2
      1  23dd				   .CYCLES    SET	2
      2  23dd
      3  23dd				  -	      IF	.CYCLES < 2
      4  23dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23dd				  -	      ERR
      6  23dd					      ENDIF
      7  23dd
      8  23dd				  -	      IF	.CYCLES & 1
      9  23dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23dd				  -	      nop	0
     11  23dd				  -	      ELSE
     12  23dd				  -	      bit	VSYNC
     13  23dd				  -	      ENDIF
     14  23dd				  -.CYCLES    SET	.CYCLES - 3
     15  23dd					      ENDIF
     16  23dd
     17  23dd					      REPEAT	.CYCLES / 2
     18  23dd		       ea		      nop
     19  23de					      REPEND
     80  23de		       4c 0c b4 	      jmp	beginscoreloop
     81  23e1
     82  23e1					      if	((<*)>$d4)
     83  2400		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  2400					      endif
     85  2400
     86  2400				   scoreloop2
     87  2400					      ifconst	scorefade
     88  2400		       a5 f7		      lda	stack2
     89  2402		       85 06		      sta	COLUP0
     90  2404		       85 07		      sta	COLUP1
     91  2406				  -	      else
     92  2406				  -	      sleep	9
     93  2406					      endif
     94  2406		       b1 96		      lda	(scorepointers),y	;+5  68  204
     95  2408		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  240a		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     97  240c							; cycle 0
     98  240c				   beginscoreloop
     99  240c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  240e		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
    101  2410		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  2412		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
    103  2414		       9a		      txs
    104  2415		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
    105  2417
    106  2417					      ifconst	scorefade
    107  2417		       c6 f7		      dec	stack2
    108  2419				  -	      else
    109  2419				  -	      sleep	5
    110  2419					      endif
      0  2419					      sleep	2
      1  2419				   .CYCLES    SET	2
      2  2419
      3  2419				  -	      IF	.CYCLES < 2
      4  2419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2419				  -	      ERR
      6  2419					      ENDIF
      7  2419
      8  2419				  -	      IF	.CYCLES & 1
      9  2419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2419				  -	      nop	0
     11  2419				  -	      ELSE
     12  2419				  -	      bit	VSYNC
     13  2419				  -	      ENDIF
     14  2419				  -.CYCLES    SET	.CYCLES - 3
     15  2419					      ENDIF
     16  2419
     17  2419					      REPEAT	.CYCLES / 2
     18  2419		       ea		      nop
     19  241a					      REPEND
    112  241a
    113  241a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  241c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  241e		       ba		      tsx
    116  241f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  2421		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  2423
    119  2423		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  2425		       88		      dey
    121  2426		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  2428
    123  2428
    124  2428		       a6 f6		      ldx	stack1
    125  242a		       9a		      txs
    126  242b		       a4 9c		      ldy	temp1
    127  242d		       84 97		      sty	scorepointers+1
    128  242f
    129  242f		       a9 00		      LDA	#0
    130  2431		       85 0e		      sta	PF1
    131  2433		       85 1b		      STA	GRP0
    132  2435		       85 1c		      STA	GRP1
    133  2437		       85 25		      STA	VDELP0
    134  2439		       85 26		      STA	VDELP1
    135  243b		       85 04		      STA	NUSIZ0
    136  243d		       85 05		      STA	NUSIZ1
    137  243f
    138  243f		       a4 9e		      ldy	temp3
    139  2441		       84 99		      sty	scorepointers+3
    140  2443
    141  2443		       a4 a0		      ldy	temp5
    142  2445		       84 9b		      sty	scorepointers+5
    143  2447		       60		      rts
    144  2448
    145  2448				   miniscorepointerset
    146  2448		       29 0f		      and	#$0F
    147  244a		       0a		      asl
    148  244b		       0a		      asl
    149  244c		       0a		      asl
    150  244d		       69 00		      adc	#<miniscoretable
    151  244f		       a8		      tay
    152  2450		       8a		      txa
    153  2451		       29 f0		      and	#$F0
    154  2453		       4a		      lsr
    155  2454		       69 00		      adc	#<miniscoretable
    156  2456		       aa		      tax
    157  2457		       60		      rts
    158  2458
------- FILE titlescreen/asm/titlescreen.asm
    112  2458					      endif		;mk_score_on
    113  2458
    114  2458				  -	      ifconst	mk_gameselect_on
    115  2458				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2458					      endif		;mk_gameselect_on
    117  2458
    118  2458				   PFWAIT
    119  2458		       ad 84 02 	      lda	INTIM
    120  245b		       d0 fb		      bne	PFWAIT
    121  245d
    122  245d				   OVERSCAN
    123  245d							;lda #35+128 
    124  245d
    125  245d					      ifnconst	overscan_time
    126  245d		       a9 a3		      lda	#35+128
    127  245f				  -	      else
    128  245f				  -	      lda	#overscan_time+128-3-1
    129  245f					      endif
    130  245f
    131  245f
    132  245f		       8d 96 02 	      sta	TIM64T
    133  2462		       a9 c2		      lda	#%11000010
    134  2464		       85 02		      sta	WSYNC
    135  2466		       85 01		      sta	VBLANK
      0  2468					      RETURN
      1  2468				  -	      ifnconst	bankswitch
      2  2468				  -	      rts
      3  2468					      else
      4  2468		       4c dd ff 	      jmp	BS_return
      5  246b					      endif
    137  246b
    138  246b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  246b					      include	"titlescreen/48x1_1_image.asm"
      1  246b
      2  246b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  246b							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  246b							; *** color.
      5  246b
      6  246b							;*** The height of the displayed data...
      7  246b		       00 5a	   bmp_48x1_1_window =	90
      8  246b
      9  246b							;*** The height of the bitmap data. This can be larger than
     10  246b							;*** the displayed data height, if you are scrolling or animating
     11  246b							;*** the data...
     12  246b		       00 62	   bmp_48x1_1_height =	98
     13  246b
     14  246b				  -	      ifnconst	bmp_48x1_1_color
     15  246b				  -bmp_48x1_1_color
     16  246b					      endif
     17  246b							; *** this is the bitmap color. If you want to change it in a 
     18  246b							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  246b		       42		      .byte.b	$42
     20  246c
     21  246c
     22  246c				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  246c				  -	      align	256
     24  246c					      endif
     25  246c
     26  246c				   bmp_48x1_1_00
     27  246c
     28  246c		       00		      BYTE.b	%00000000
     29  246d		       00		      BYTE.b	%00000000
     30  246e		       00		      BYTE.b	%00000000
     31  246f		       00		      BYTE.b	%00000000
     32  2470		       0f		      BYTE.b	%00001111
     33  2471		       38		      BYTE.b	%00111000
     34  2472		       60		      BYTE.b	%01100000
     35  2473		       87		      BYTE.b	%10000111
     36  2474		       1f		      BYTE.b	%00011111
     37  2475		       7f		      BYTE.b	%01111111
     38  2476		       fe		      BYTE.b	%11111110
     39  2477		       ff		      BYTE.b	%11111111
     40  2478		       ff		      BYTE.b	%11111111
     41  2479		       ff		      BYTE.b	%11111111
     42  247a		       ff		      BYTE.b	%11111111
     43  247b		       ff		      BYTE.b	%11111111
     44  247c		       ff		      BYTE.b	%11111111
     45  247d		       ff		      BYTE.b	%11111111
     46  247e		       ff		      BYTE.b	%11111111
     47  247f		       ff		      BYTE.b	%11111111
     48  2480		       ff		      BYTE.b	%11111111
     49  2481		       ff		      BYTE.b	%11111111
     50  2482		       ff		      BYTE.b	%11111111
     51  2483		       ff		      BYTE.b	%11111111
     52  2484		       ff		      BYTE.b	%11111111
     53  2485		       fe		      BYTE.b	%11111110
     54  2486		       7c		      BYTE.b	%01111100
     55  2487		       00		      BYTE.b	%00000000
     56  2488		       00		      BYTE.b	%00000000
     57  2489		       80		      BYTE.b	%10000000
     58  248a		       00		      BYTE.b	%00000000
     59  248b		       00		      BYTE.b	%00000000
     60  248c		       00		      BYTE.b	%00000000
     61  248d		       00		      BYTE.b	%00000000
     62  248e		       10		      BYTE.b	%00010000
     63  248f		       80		      BYTE.b	%10000000
     64  2490		       c0		      BYTE.b	%11000000
     65  2491		       e4		      BYTE.b	%11100100
     66  2492		       e0		      BYTE.b	%11100000
     67  2493		       ff		      BYTE.b	%11111111
     68  2494		       f1		      BYTE.b	%11110001
     69  2495		       f1		      BYTE.b	%11110001
     70  2496		       f1		      BYTE.b	%11110001
     71  2497		       f1		      BYTE.b	%11110001
     72  2498		       f1		      BYTE.b	%11110001
     73  2499		       f8		      BYTE.b	%11111000
     74  249a		       f8		      BYTE.b	%11111000
     75  249b		       fe		      BYTE.b	%11111110
     76  249c		       f3		      BYTE.b	%11110011
     77  249d		       f3		      BYTE.b	%11110011
     78  249e		       f3		      BYTE.b	%11110011
     79  249f		       f3		      BYTE.b	%11110011
     80  24a0		       f2		      BYTE.b	%11110010
     81  24a1		       f8		      BYTE.b	%11111000
     82  24a2		       f8		      BYTE.b	%11111000
     83  24a3		       fc		      BYTE.b	%11111100
     84  24a4		       9e		      BYTE.b	%10011110
     85  24a5		       0e		      BYTE.b	%00001110
     86  24a6		       8e		      BYTE.b	%10001110
     87  24a7		       84		      BYTE.b	%10000100
     88  24a8		       80		      BYTE.b	%10000000
     89  24a9		       c0		      BYTE.b	%11000000
     90  24aa		       c0		      BYTE.b	%11000000
     91  24ab		       81		      BYTE.b	%10000001
     92  24ac		       80		      BYTE.b	%10000000
     93  24ad		       00		      BYTE.b	%00000000
     94  24ae		       00		      BYTE.b	%00000000
     95  24af		       00		      BYTE.b	%00000000
     96  24b0		       00		      BYTE.b	%00000000
     97  24b1		       00		      BYTE.b	%00000000
     98  24b2		       00		      BYTE.b	%00000000
     99  24b3		       03		      BYTE.b	%00000011
    100  24b4		       07		      BYTE.b	%00000111
    101  24b5		       0f		      BYTE.b	%00001111
    102  24b6		       c3		      BYTE.b	%11000011
    103  24b7		       c3		      BYTE.b	%11000011
    104  24b8		       83		      BYTE.b	%10000011
    105  24b9		       0f		      BYTE.b	%00001111
    106  24ba		       2f		      BYTE.b	%00101111
    107  24bb		       2f		      BYTE.b	%00101111
    108  24bc		       1f		      BYTE.b	%00011111
    109  24bd		       33		      BYTE.b	%00110011
    110  24be		       63		      BYTE.b	%01100011
    111  24bf		       8f		      BYTE.b	%10001111
    112  24c0		       0f		      BYTE.b	%00001111
    113  24c1		       0f		      BYTE.b	%00001111
    114  24c2		       06		      BYTE.b	%00000110
    115  24c3		       0e		      BYTE.b	%00001110
    116  24c4		       0e		      BYTE.b	%00001110
    117  24c5		       06		      BYTE.b	%00000110
    118  24c6		       02		      BYTE.b	%00000010
    119  24c7		       00		      BYTE.b	%00000000
    120  24c8		       00		      BYTE.b	%00000000
    121  24c9		       00		      BYTE.b	%00000000
    122  24ca		       00		      BYTE.b	%00000000
    123  24cb		       00		      BYTE.b	%00000000
    124  24cc		       00		      BYTE.b	%00000000
    125  24cd		       00		      BYTE.b	%00000000
    126  24ce		       00		      BYTE.b	%00000000
    127  24cf
    128  24cf					      if	>. != >[.+(bmp_48x1_1_height)]
    129  2500		       00 00 00 00*	      align	256
    130  2500					      endif
    131  2500
    132  2500				   bmp_48x1_1_01
    133  2500
    134  2500		       00		      BYTE.b	%00000000
    135  2501		       00		      BYTE.b	%00000000
    136  2502		       00		      BYTE.b	%00000000
    137  2503		       00		      BYTE.b	%00000000
    138  2504		       80		      BYTE.b	%10000000
    139  2505		       60		      BYTE.b	%01100000
    140  2506		       10		      BYTE.b	%00010000
    141  2507		       08		      BYTE.b	%00001000
    142  2508		       c4		      BYTE.b	%11000100
    143  2509		       ec		      BYTE.b	%11101100
    144  250a		       1a		      BYTE.b	%00011010
    145  250b		       92		      BYTE.b	%10010010
    146  250c		       d4		      BYTE.b	%11010100
    147  250d		       dc		      BYTE.b	%11011100
    148  250e		       fc		      BYTE.b	%11111100
    149  250f		       f0		      BYTE.b	%11110000
    150  2510		       f3		      BYTE.b	%11110011
    151  2511		       f7		      BYTE.b	%11110111
    152  2512		       ff		      BYTE.b	%11111111
    153  2513		       ff		      BYTE.b	%11111111
    154  2514		       ff		      BYTE.b	%11111111
    155  2515		       ff		      BYTE.b	%11111111
    156  2516		       8f		      BYTE.b	%10001111
    157  2517		       8f		      BYTE.b	%10001111
    158  2518		       07		      BYTE.b	%00000111
    159  2519		       04		      BYTE.b	%00000100
    160  251a		       03		      BYTE.b	%00000011
    161  251b		       0f		      BYTE.b	%00001111
    162  251c		       0f		      BYTE.b	%00001111
    163  251d		       0f		      BYTE.b	%00001111
    164  251e		       07		      BYTE.b	%00000111
    165  251f		       07		      BYTE.b	%00000111
    166  2520		       07		      BYTE.b	%00000111
    167  2521		       07		      BYTE.b	%00000111
    168  2522		       07		      BYTE.b	%00000111
    169  2523		       07		      BYTE.b	%00000111
    170  2524		       03		      BYTE.b	%00000011
    171  2525		       13		      BYTE.b	%00010011
    172  2526		       1b		      BYTE.b	%00011011
    173  2527		       fa		      BYTE.b	%11111010
    174  2528		       d2		      BYTE.b	%11010010
    175  2529		       e2		      BYTE.b	%11100010
    176  252a		       e3		      BYTE.b	%11100011
    177  252b		       d7		      BYTE.b	%11010111
    178  252c		       95		      BYTE.b	%10010101
    179  252d		       b3		      BYTE.b	%10110011
    180  252e		       b5		      BYTE.b	%10110101
    181  252f		       78		      BYTE.b	%01111000
    182  2530		       7c		      BYTE.b	%01111100
    183  2531		       7e		      BYTE.b	%01111110
    184  2532		       0e		      BYTE.b	%00001110
    185  2533		       1c		      BYTE.b	%00011100
    186  2534		       bc		      BYTE.b	%10111100
    187  2535		       ec		      BYTE.b	%11101100
    188  2536		       78		      BYTE.b	%01111000
    189  2537		       5c		      BYTE.b	%01011100
    190  2538		       9f		      BYTE.b	%10011111
    191  2539		       3e		      BYTE.b	%00111110
    192  253a		       3c		      BYTE.b	%00111100
    193  253b		       3e		      BYTE.b	%00111110
    194  253c		       5e		      BYTE.b	%01011110
    195  253d		       5f		      BYTE.b	%01011111
    196  253e		       1f		      BYTE.b	%00011111
    197  253f		       1e		      BYTE.b	%00011110
    198  2540		       1f		      BYTE.b	%00011111
    199  2541		       7f		      BYTE.b	%01111111
    200  2542		       7f		      BYTE.b	%01111111
    201  2543		       3f		      BYTE.b	%00111111
    202  2544		       0f		      BYTE.b	%00001111
    203  2545		       01		      BYTE.b	%00000001
    204  2546		       01		      BYTE.b	%00000001
    205  2547		       f1		      BYTE.b	%11110001
    206  2548		       f8		      BYTE.b	%11111000
    207  2549		       fe		      BYTE.b	%11111110
    208  254a		       ff		      BYTE.b	%11111111
    209  254b		       ff		      BYTE.b	%11111111
    210  254c		       ff		      BYTE.b	%11111111
    211  254d		       ff		      BYTE.b	%11111111
    212  254e		       ff		      BYTE.b	%11111111
    213  254f		       ff		      BYTE.b	%11111111
    214  2550		       ff		      BYTE.b	%11111111
    215  2551		       bf		      BYTE.b	%10111111
    216  2552		       9f		      BYTE.b	%10011111
    217  2553		       07		      BYTE.b	%00000111
    218  2554		       03		      BYTE.b	%00000011
    219  2555		       03		      BYTE.b	%00000011
    220  2556		       81		      BYTE.b	%10000001
    221  2557		       01		      BYTE.b	%00000001
    222  2558		       00		      BYTE.b	%00000000
    223  2559		       00		      BYTE.b	%00000000
    224  255a		       00		      BYTE.b	%00000000
    225  255b		       00		      BYTE.b	%00000000
    226  255c		       40		      BYTE.b	%01000000
    227  255d		       20		      BYTE.b	%00100000
    228  255e		       0f		      BYTE.b	%00001111
    229  255f		       00		      BYTE.b	%00000000
    230  2560		       00		      BYTE.b	%00000000
    231  2561		       00		      BYTE.b	%00000000
    232  2562		       40		      BYTE.b	%01000000
    233  2563
    234  2563				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    235  2563				  -	      align	256
    236  2563					      endif
    237  2563
    238  2563				   bmp_48x1_1_02
    239  2563
    240  2563		       00		      BYTE.b	%00000000
    241  2564		       00		      BYTE.b	%00000000
    242  2565		       00		      BYTE.b	%00000000
    243  2566		       00		      BYTE.b	%00000000
    244  2567		       00		      BYTE.b	%00000000
    245  2568		       00		      BYTE.b	%00000000
    246  2569		       00		      BYTE.b	%00000000
    247  256a		       00		      BYTE.b	%00000000
    248  256b		       00		      BYTE.b	%00000000
    249  256c		       00		      BYTE.b	%00000000
    250  256d		       00		      BYTE.b	%00000000
    251  256e		       00		      BYTE.b	%00000000
    252  256f		       00		      BYTE.b	%00000000
    253  2570		       00		      BYTE.b	%00000000
    254  2571		       00		      BYTE.b	%00000000
    255  2572		       40		      BYTE.b	%01000000
    256  2573		       90		      BYTE.b	%10010000
    257  2574		       90		      BYTE.b	%10010000
    258  2575		       90		      BYTE.b	%10010000
    259  2576		       90		      BYTE.b	%10010000
    260  2577		       90		      BYTE.b	%10010000
    261  2578		       81		      BYTE.b	%10000001
    262  2579		       87		      BYTE.b	%10000111
    263  257a		       1f		      BYTE.b	%00011111
    264  257b		       3f		      BYTE.b	%00111111
    265  257c		       ff		      BYTE.b	%11111111
    266  257d		       ff		      BYTE.b	%11111111
    267  257e		       ff		      BYTE.b	%11111111
    268  257f		       ff		      BYTE.b	%11111111
    269  2580		       ff		      BYTE.b	%11111111
    270  2581		       fd		      BYTE.b	%11111101
    271  2582		       fd		      BYTE.b	%11111101
    272  2583		       bf		      BYTE.b	%10111111
    273  2584		       db		      BYTE.b	%11011011
    274  2585		       e7		      BYTE.b	%11100111
    275  2586		       ff		      BYTE.b	%11111111
    276  2587		       fd		      BYTE.b	%11111101
    277  2588		       fb		      BYTE.b	%11111011
    278  2589		       fe		      BYTE.b	%11111110
    279  258a		       7e		      BYTE.b	%01111110
    280  258b		       7c		      BYTE.b	%01111100
    281  258c		       7b		      BYTE.b	%01111011
    282  258d		       7e		      BYTE.b	%01111110
    283  258e		       3c		      BYTE.b	%00111100
    284  258f		       00		      BYTE.b	%00000000
    285  2590		       80		      BYTE.b	%10000000
    286  2591		       c0		      BYTE.b	%11000000
    287  2592		       e3		      BYTE.b	%11100011
    288  2593		       f7		      BYTE.b	%11110111
    289  2594		       ff		      BYTE.b	%11111111
    290  2595		       ff		      BYTE.b	%11111111
    291  2596		       ff		      BYTE.b	%11111111
    292  2597		       f7		      BYTE.b	%11110111
    293  2598		       f7		      BYTE.b	%11110111
    294  2599		       ff		      BYTE.b	%11111111
    295  259a		       f3		      BYTE.b	%11110011
    296  259b		       71		      BYTE.b	%01110001
    297  259c		       7d		      BYTE.b	%01111101
    298  259d		       6d		      BYTE.b	%01101101
    299  259e		       68		      BYTE.b	%01101000
    300  259f		       2c		      BYTE.b	%00101100
    301  25a0		       34		      BYTE.b	%00110100
    302  25a1		       32		      BYTE.b	%00110010
    303  25a2		       22		      BYTE.b	%00100010
    304  25a3		       a2		      BYTE.b	%10100010
    305  25a4		       05		      BYTE.b	%00000101
    306  25a5		       19		      BYTE.b	%00011001
    307  25a6		       10		      BYTE.b	%00010000
    308  25a7		       82		      BYTE.b	%10000010
    309  25a8		       c2		      BYTE.b	%11000010
    310  25a9		       da		      BYTE.b	%11011010
    311  25aa		       dc		      BYTE.b	%11011100
    312  25ab		       98		      BYTE.b	%10011000
    313  25ac		       90		      BYTE.b	%10010000
    314  25ad		       91		      BYTE.b	%10010001
    315  25ae		       17		      BYTE.b	%00010111
    316  25af		       1f		      BYTE.b	%00011111
    317  25b0		       ff		      BYTE.b	%11111111
    318  25b1		       ff		      BYTE.b	%11111111
    319  25b2		       ef		      BYTE.b	%11101111
    320  25b3		       ef		      BYTE.b	%11101111
    321  25b4		       ef		      BYTE.b	%11101111
    322  25b5		       ef		      BYTE.b	%11101111
    323  25b6		       e7		      BYTE.b	%11100111
    324  25b7		       e7		      BYTE.b	%11100111
    325  25b8		       c1		      BYTE.b	%11000001
    326  25b9		       c2		      BYTE.b	%11000010
    327  25ba		       c1		      BYTE.b	%11000001
    328  25bb		       c1		      BYTE.b	%11000001
    329  25bc		       80		      BYTE.b	%10000000
    330  25bd		       80		      BYTE.b	%10000000
    331  25be		       80		      BYTE.b	%10000000
    332  25bf		       80		      BYTE.b	%10000000
    333  25c0		       00		      BYTE.b	%00000000
    334  25c1		       00		      BYTE.b	%00000000
    335  25c2		       00		      BYTE.b	%00000000
    336  25c3		       00		      BYTE.b	%00000000
    337  25c4		       00		      BYTE.b	%00000000
    338  25c5		       80		      BYTE.b	%10000000
    339  25c6
    340  25c6					      if	>. != >[.+(bmp_48x1_1_height)]
    341  2600		       00 00 00 00*	      align	256
    342  2600					      endif
    343  2600
    344  2600				   bmp_48x1_1_03
    345  2600
    346  2600		       0a		      BYTE.b	%00001010
    347  2601		       0b		      BYTE.b	%00001011
    348  2602		       0d		      BYTE.b	%00001101
    349  2603		       07		      BYTE.b	%00000111
    350  2604		       03		      BYTE.b	%00000011
    351  2605		       03		      BYTE.b	%00000011
    352  2606		       03		      BYTE.b	%00000011
    353  2607		       03		      BYTE.b	%00000011
    354  2608		       05		      BYTE.b	%00000101
    355  2609		       05		      BYTE.b	%00000101
    356  260a		       01		      BYTE.b	%00000001
    357  260b		       07		      BYTE.b	%00000111
    358  260c		       17		      BYTE.b	%00010111
    359  260d		       17		      BYTE.b	%00010111
    360  260e		       17		      BYTE.b	%00010111
    361  260f		       13		      BYTE.b	%00010011
    362  2610		       03		      BYTE.b	%00000011
    363  2611		       07		      BYTE.b	%00000111
    364  2612		       0f		      BYTE.b	%00001111
    365  2613		       3f		      BYTE.b	%00111111
    366  2614		       ff		      BYTE.b	%11111111
    367  2615		       ff		      BYTE.b	%11111111
    368  2616		       ff		      BYTE.b	%11111111
    369  2617		       ff		      BYTE.b	%11111111
    370  2618		       ff		      BYTE.b	%11111111
    371  2619		       ff		      BYTE.b	%11111111
    372  261a		       ff		      BYTE.b	%11111111
    373  261b		       ff		      BYTE.b	%11111111
    374  261c		       ff		      BYTE.b	%11111111
    375  261d		       ef		      BYTE.b	%11101111
    376  261e		       ef		      BYTE.b	%11101111
    377  261f		       e7		      BYTE.b	%11100111
    378  2620		       e7		      BYTE.b	%11100111
    379  2621		       e7		      BYTE.b	%11100111
    380  2622		       e7		      BYTE.b	%11100111
    381  2623		       e7		      BYTE.b	%11100111
    382  2624		       c7		      BYTE.b	%11000111
    383  2625		       c7		      BYTE.b	%11000111
    384  2626		       cf		      BYTE.b	%11001111
    385  2627		       8f		      BYTE.b	%10001111
    386  2628		       89		      BYTE.b	%10001001
    387  2629		       80		      BYTE.b	%10000000
    388  262a		       0e		      BYTE.b	%00001110
    389  262b		       1f		      BYTE.b	%00011111
    390  262c		       1f		      BYTE.b	%00011111
    391  262d		       3f		      BYTE.b	%00111111
    392  262e		       3f		      BYTE.b	%00111111
    393  262f		       bf		      BYTE.b	%10111111
    394  2630		       bf		      BYTE.b	%10111111
    395  2631		       be		      BYTE.b	%10111110
    396  2632		       98		      BYTE.b	%10011000
    397  2633		       96		      BYTE.b	%10010110
    398  2634		       ef		      BYTE.b	%11101111
    399  2635		       ef		      BYTE.b	%11101111
    400  2636		       ee		      BYTE.b	%11101110
    401  2637		       ee		      BYTE.b	%11101110
    402  2638		       ea		      BYTE.b	%11101010
    403  2639		       e8		      BYTE.b	%11101000
    404  263a		       e8		      BYTE.b	%11101000
    405  263b		       e8		      BYTE.b	%11101000
    406  263c		       f8		      BYTE.b	%11111000
    407  263d		       fa		      BYTE.b	%11111010
    408  263e		       f6		      BYTE.b	%11110110
    409  263f		       f8		      BYTE.b	%11111000
    410  2640		       fc		      BYTE.b	%11111100
    411  2641		       c7		      BYTE.b	%11000111
    412  2642		       c0		      BYTE.b	%11000000
    413  2643		       58		      BYTE.b	%01011000
    414  2644		       5c		      BYTE.b	%01011100
    415  2645		       5f		      BYTE.b	%01011111
    416  2646		       df		      BYTE.b	%11011111
    417  2647		       ef		      BYTE.b	%11101111
    418  2648		       7f		      BYTE.b	%01111111
    419  2649		       ff		      BYTE.b	%11111111
    420  264a		       ff		      BYTE.b	%11111111
    421  264b		       ff		      BYTE.b	%11111111
    422  264c		       ff		      BYTE.b	%11111111
    423  264d		       ff		      BYTE.b	%11111111
    424  264e		       ff		      BYTE.b	%11111111
    425  264f		       ff		      BYTE.b	%11111111
    426  2650		       ff		      BYTE.b	%11111111
    427  2651		       ff		      BYTE.b	%11111111
    428  2652		       fe		      BYTE.b	%11111110
    429  2653		       f8		      BYTE.b	%11111000
    430  2654		       f0		      BYTE.b	%11110000
    431  2655		       e0		      BYTE.b	%11100000
    432  2656		       07		      BYTE.b	%00000111
    433  2657		       0f		      BYTE.b	%00001111
    434  2658		       1e		      BYTE.b	%00011110
    435  2659		       f8		      BYTE.b	%11111000
    436  265a		       f0		      BYTE.b	%11110000
    437  265b		       0f		      BYTE.b	%00001111
    438  265c		       03		      BYTE.b	%00000011
    439  265d		       00		      BYTE.b	%00000000
    440  265e		       00		      BYTE.b	%00000000
    441  265f		       00		      BYTE.b	%00000000
    442  2660		       00		      BYTE.b	%00000000
    443  2661		       00		      BYTE.b	%00000000
    444  2662		       03		      BYTE.b	%00000011
    445  2663
    446  2663				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    447  2663				  -	      align	256
    448  2663					      endif
    449  2663
    450  2663				   bmp_48x1_1_04
    451  2663
    452  2663		       ff		      BYTE.b	%11111111
    453  2664		       ff		      BYTE.b	%11111111
    454  2665		       ff		      BYTE.b	%11111111
    455  2666		       ff		      BYTE.b	%11111111
    456  2667		       ff		      BYTE.b	%11111111
    457  2668		       ff		      BYTE.b	%11111111
    458  2669		       ff		      BYTE.b	%11111111
    459  266a		       ff		      BYTE.b	%11111111
    460  266b		       ff		      BYTE.b	%11111111
    461  266c		       ff		      BYTE.b	%11111111
    462  266d		       ff		      BYTE.b	%11111111
    463  266e		       fe		      BYTE.b	%11111110
    464  266f		       fc		      BYTE.b	%11111100
    465  2670		       f8		      BYTE.b	%11111000
    466  2671		       e0		      BYTE.b	%11100000
    467  2672		       c0		      BYTE.b	%11000000
    468  2673		       00		      BYTE.b	%00000000
    469  2674		       80		      BYTE.b	%10000000
    470  2675		       c0		      BYTE.b	%11000000
    471  2676		       a0		      BYTE.b	%10100000
    472  2677		       80		      BYTE.b	%10000000
    473  2678		       90		      BYTE.b	%10010000
    474  2679		       88		      BYTE.b	%10001000
    475  267a		       84		      BYTE.b	%10000100
    476  267b		       82		      BYTE.b	%10000010
    477  267c		       81		      BYTE.b	%10000001
    478  267d		       80		      BYTE.b	%10000000
    479  267e		       c0		      BYTE.b	%11000000
    480  267f		       c0		      BYTE.b	%11000000
    481  2680		       c0		      BYTE.b	%11000000
    482  2681		       c0		      BYTE.b	%11000000
    483  2682		       c0		      BYTE.b	%11000000
    484  2683		       c0		      BYTE.b	%11000000
    485  2684		       c0		      BYTE.b	%11000000
    486  2685		       e0		      BYTE.b	%11100000
    487  2686		       e0		      BYTE.b	%11100000
    488  2687		       e0		      BYTE.b	%11100000
    489  2688		       c0		      BYTE.b	%11000000
    490  2689		       c0		      BYTE.b	%11000000
    491  268a		       90		      BYTE.b	%10010000
    492  268b		       90		      BYTE.b	%10010000
    493  268c		       80		      BYTE.b	%10000000
    494  268d		       80		      BYTE.b	%10000000
    495  268e		       c0		      BYTE.b	%11000000
    496  268f		       00		      BYTE.b	%00000000
    497  2690		       e0		      BYTE.b	%11100000
    498  2691		       e8		      BYTE.b	%11101000
    499  2692		       e8		      BYTE.b	%11101000
    500  2693		       f0		      BYTE.b	%11110000
    501  2694		       f0		      BYTE.b	%11110000
    502  2695		       f0		      BYTE.b	%11110000
    503  2696		       fc		      BYTE.b	%11111100
    504  2697		       fc		      BYTE.b	%11111100
    505  2698		       7c		      BYTE.b	%01111100
    506  2699		       78		      BYTE.b	%01111000
    507  269a		       3c		      BYTE.b	%00111100
    508  269b		       3c		      BYTE.b	%00111100
    509  269c		       2e		      BYTE.b	%00101110
    510  269d		       be		      BYTE.b	%10111110
    511  269e		       9e		      BYTE.b	%10011110
    512  269f		       bc		      BYTE.b	%10111100
    513  26a0		       3c		      BYTE.b	%00111100
    514  26a1		       7d		      BYTE.b	%01111101
    515  26a2		       3d		      BYTE.b	%00111101
    516  26a3		       fd		      BYTE.b	%11111101
    517  26a4		       8f		      BYTE.b	%10001111
    518  26a5		       0e		      BYTE.b	%00001110
    519  26a6		       0c		      BYTE.b	%00001100
    520  26a7		       74		      BYTE.b	%01110100
    521  26a8		       f4		      BYTE.b	%11110100
    522  26a9		       f4		      BYTE.b	%11110100
    523  26aa		       f4		      BYTE.b	%11110100
    524  26ab		       f8		      BYTE.b	%11111000
    525  26ac		       f8		      BYTE.b	%11111000
    526  26ad		       fe		      BYTE.b	%11111110
    527  26ae		       f6		      BYTE.b	%11110110
    528  26af		       e3		      BYTE.b	%11100011
    529  26b0		       e0		      BYTE.b	%11100000
    530  26b1		       c0		      BYTE.b	%11000000
    531  26b2		       c0		      BYTE.b	%11000000
    532  26b3		       83		      BYTE.b	%10000011
    533  26b4		       07		      BYTE.b	%00000111
    534  26b5		       0f		      BYTE.b	%00001111
    535  26b6		       3e		      BYTE.b	%00111110
    536  26b7		       7e		      BYTE.b	%01111110
    537  26b8		       fc		      BYTE.b	%11111100
    538  26b9		       fb		      BYTE.b	%11111011
    539  26ba		       f3		      BYTE.b	%11110011
    540  26bb		       e3		      BYTE.b	%11100011
    541  26bc		       e3		      BYTE.b	%11100011
    542  26bd		       ee		      BYTE.b	%11101110
    543  26be		       f8		      BYTE.b	%11111000
    544  26bf		       e0		      BYTE.b	%11100000
    545  26c0		       60		      BYTE.b	%01100000
    546  26c1		       60		      BYTE.b	%01100000
    547  26c2		       60		      BYTE.b	%01100000
    548  26c3		       60		      BYTE.b	%01100000
    549  26c4		       00		      BYTE.b	%00000000
    550  26c5		       e0		      BYTE.b	%11100000
    551  26c6
    552  26c6					      if	>. != >[.+(bmp_48x1_1_height)]
    553  2700		       00 00 00 00*	      align	256
    554  2700					      endif
    555  2700
    556  2700				   bmp_48x1_1_05
    557  2700
    558  2700		       c0		      BYTE.b	%11000000
    559  2701		       c0		      BYTE.b	%11000000
    560  2702		       c0		      BYTE.b	%11000000
    561  2703		       c0		      BYTE.b	%11000000
    562  2704		       c0		      BYTE.b	%11000000
    563  2705		       c0		      BYTE.b	%11000000
    564  2706		       80		      BYTE.b	%10000000
    565  2707		       80		      BYTE.b	%10000000
    566  2708		       80		      BYTE.b	%10000000
    567  2709		       80		      BYTE.b	%10000000
    568  270a		       00		      BYTE.b	%00000000
    569  270b		       01		      BYTE.b	%00000001
    570  270c		       00		      BYTE.b	%00000000
    571  270d		       01		      BYTE.b	%00000001
    572  270e		       04		      BYTE.b	%00000100
    573  270f		       07		      BYTE.b	%00000111
    574  2710		       37		      BYTE.b	%00110111
    575  2711		       76		      BYTE.b	%01110110
    576  2712		       7e		      BYTE.b	%01111110
    577  2713		       7f		      BYTE.b	%01111111
    578  2714		       77		      BYTE.b	%01110111
    579  2715		       67		      BYTE.b	%01100111
    580  2716		       4b		      BYTE.b	%01001011
    581  2717		       4b		      BYTE.b	%01001011
    582  2718		       0b		      BYTE.b	%00001011
    583  2719		       03		      BYTE.b	%00000011
    584  271a		       03		      BYTE.b	%00000011
    585  271b		       05		      BYTE.b	%00000101
    586  271c		       09		      BYTE.b	%00001001
    587  271d		       13		      BYTE.b	%00010011
    588  271e		       0f		      BYTE.b	%00001111
    589  271f		       0f		      BYTE.b	%00001111
    590  2720		       0b		      BYTE.b	%00001011
    591  2721		       0c		      BYTE.b	%00001100
    592  2722		       08		      BYTE.b	%00001000
    593  2723		       08		      BYTE.b	%00001000
    594  2724		       00		      BYTE.b	%00000000
    595  2725		       00		      BYTE.b	%00000000
    596  2726		       00		      BYTE.b	%00000000
    597  2727		       01		      BYTE.b	%00000001
    598  2728		       01		      BYTE.b	%00000001
    599  2729		       01		      BYTE.b	%00000001
    600  272a		       01		      BYTE.b	%00000001
    601  272b		       00		      BYTE.b	%00000000
    602  272c		       04		      BYTE.b	%00000100
    603  272d		       04		      BYTE.b	%00000100
    604  272e		       04		      BYTE.b	%00000100
    605  272f		       04		      BYTE.b	%00000100
    606  2730		       28		      BYTE.b	%00101000
    607  2731		       10		      BYTE.b	%00010000
    608  2732		       00		      BYTE.b	%00000000
    609  2733		       00		      BYTE.b	%00000000
    610  2734		       00		      BYTE.b	%00000000
    611  2735		       00		      BYTE.b	%00000000
    612  2736		       00		      BYTE.b	%00000000
    613  2737		       00		      BYTE.b	%00000000
    614  2738		       00		      BYTE.b	%00000000
    615  2739		       00		      BYTE.b	%00000000
    616  273a		       00		      BYTE.b	%00000000
    617  273b		       00		      BYTE.b	%00000000
    618  273c		       00		      BYTE.b	%00000000
    619  273d		       00		      BYTE.b	%00000000
    620  273e		       00		      BYTE.b	%00000000
    621  273f		       00		      BYTE.b	%00000000
    622  2740		       00		      BYTE.b	%00000000
    623  2741		       00		      BYTE.b	%00000000
    624  2742		       00		      BYTE.b	%00000000
    625  2743		       00		      BYTE.b	%00000000
    626  2744		       80		      BYTE.b	%10000000
    627  2745		       80		      BYTE.b	%10000000
    628  2746		       80		      BYTE.b	%10000000
    629  2747		       80		      BYTE.b	%10000000
    630  2748		       00		      BYTE.b	%00000000
    631  2749		       00		      BYTE.b	%00000000
    632  274a		       00		      BYTE.b	%00000000
    633  274b		       40		      BYTE.b	%01000000
    634  274c		       40		      BYTE.b	%01000000
    635  274d		       c0		      BYTE.b	%11000000
    636  274e		       60		      BYTE.b	%01100000
    637  274f		       f0		      BYTE.b	%11110000
    638  2750		       fe		      BYTE.b	%11111110
    639  2751		       87		      BYTE.b	%10000111
    640  2752		       8f		      BYTE.b	%10001111
    641  2753		       3f		      BYTE.b	%00111111
    642  2754		       3f		      BYTE.b	%00111111
    643  2755		       3f		      BYTE.b	%00111111
    644  2756		       7e		      BYTE.b	%01111110
    645  2757		       60		      BYTE.b	%01100000
    646  2758		       80		      BYTE.b	%10000000
    647  2759		       00		      BYTE.b	%00000000
    648  275a		       00		      BYTE.b	%00000000
    649  275b		       00		      BYTE.b	%00000000
    650  275c		       00		      BYTE.b	%00000000
    651  275d		       00		      BYTE.b	%00000000
    652  275e		       00		      BYTE.b	%00000000
    653  275f		       00		      BYTE.b	%00000000
    654  2760		       00		      BYTE.b	%00000000
    655  2761		       00		      BYTE.b	%00000000
    656  2762		       00		      BYTE.b	%00000000
    657  2763
------- FILE titlescreen/asm/titlescreen.asm
    140  2763					      endif
    141  2763				  -	      ifconst	mk_48x1_2_on
    142  2763				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2763					      endif
    144  2763				  -	      ifconst	mk_48x1_3_on
    145  2763				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2763					      endif
    147  2763
    148  2763				  -	      ifconst	mk_48x2_1_on
    149  2763				  -	      include	"titlescreen/48x2_1_image.asm"
    150  2763					      endif
    151  2763				  -	      ifconst	mk_48x2_2_on
    152  2763				  -	      include	"titlescreen/48x2_2_image.asm"
    153  2763					      endif
    154  2763				  -	      ifconst	mk_48x2_3_on
    155  2763				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2763					      endif
    157  2763
    158  2763					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 2
      0  2763					      include	"titlescreen/96x2_1_image.asm"
      1  2763
      2  2763							;*** The height of the displayed data...
      3  2763		       00 1c	   bmp_96x2_1_window =	28
      4  2763
      5  2763							;*** The height of the bitmap data. This can be larger than
      6  2763							;*** the displayed data height, if you are scrolling or animating
      7  2763							;*** the data...
      8  2763		       00 1e	   bmp_96x2_1_height =	30
      9  2763
     10  2763				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     11  2763				  -	      align	256
     12  2763					      endif
     13  2763		       00		      BYTE.b	$00	; leave this here!
     14  2764
     15  2764
     16  2764							;*** this is the color of each line in the bitmap data
     17  2764				   bmp_96x2_1_colors
     18  2764		       0c		      BYTE.b	$0c
     19  2765		       0c		      BYTE.b	$0c
     20  2766		       0c		      BYTE.b	$0c
     21  2767		       0c		      BYTE.b	$0c
     22  2768		       0c		      BYTE.b	$0c
     23  2769		       0c		      BYTE.b	$0c
     24  276a		       0c		      BYTE.b	$0c
     25  276b		       0c		      BYTE.b	$0c
     26  276c		       0c		      BYTE.b	$0c
     27  276d		       0c		      BYTE.b	$0c
     28  276e		       0c		      BYTE.b	$0c
     29  276f		       0c		      BYTE.b	$0c
     30  2770		       0c		      BYTE.b	$0c
     31  2771		       0c		      BYTE.b	$0c
     32  2772		       0c		      BYTE.b	$0c
     33  2773		       0c		      BYTE.b	$0c
     34  2774		       0c		      BYTE.b	$0c
     35  2775		       0c		      BYTE.b	$0c
     36  2776		       0c		      BYTE.b	$0c
     37  2777		       0c		      BYTE.b	$0c
     38  2778		       0c		      BYTE.b	$0c
     39  2779		       0c		      BYTE.b	$0c
     40  277a		       0c		      BYTE.b	$0c
     41  277b		       0c		      BYTE.b	$0c
     42  277c		       0c		      BYTE.b	$0c
     43  277d		       0c		      BYTE.b	$0c
     44  277e		       0c		      BYTE.b	$0c
     45  277f		       0c		      BYTE.b	$0c
     46  2780		       0c		      BYTE.b	$0c
     47  2781		       0c		      BYTE.b	$0c
     48  2782
     49  2782				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     50  2782				  -	      align	256
     51  2782					      endif
     52  2782
     53  2782				   bmp_96x2_1_00
     54  2782
     55  2782		       00		      BYTE.b	%00000000
     56  2783		       00		      BYTE.b	%00000000
     57  2784		       00		      BYTE.b	%00000000
     58  2785		       00		      BYTE.b	%00000000
     59  2786		       00		      BYTE.b	%00000000
     60  2787		       00		      BYTE.b	%00000000
     61  2788		       00		      BYTE.b	%00000000
     62  2789		       00		      BYTE.b	%00000000
     63  278a		       00		      BYTE.b	%00000000
     64  278b		       00		      BYTE.b	%00000000
     65  278c		       00		      BYTE.b	%00000000
     66  278d		       00		      BYTE.b	%00000000
     67  278e		       00		      BYTE.b	%00000000
     68  278f		       00		      BYTE.b	%00000000
     69  2790		       00		      BYTE.b	%00000000
     70  2791		       00		      BYTE.b	%00000000
     71  2792		       70		      BYTE.b	%01110000
     72  2793		       70		      BYTE.b	%01110000
     73  2794		       70		      BYTE.b	%01110000
     74  2795		       78		      BYTE.b	%01111000
     75  2796		       7f		      BYTE.b	%01111111
     76  2797		       7f		      BYTE.b	%01111111
     77  2798		       7f		      BYTE.b	%01111111
     78  2799		       70		      BYTE.b	%01110000
     79  279a		       70		      BYTE.b	%01110000
     80  279b		       70		      BYTE.b	%01110000
     81  279c		       70		      BYTE.b	%01110000
     82  279d		       00		      BYTE.b	%00000000
     83  279e		       00		      BYTE.b	%00000000
     84  279f		       00		      BYTE.b	%00000000
     85  27a0
     86  27a0				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     87  27a0				  -	      align	256
     88  27a0					      endif
     89  27a0
     90  27a0				   bmp_96x2_1_01
     91  27a0
     92  27a0		       00		      BYTE.b	%00000000
     93  27a1		       00		      BYTE.b	%00000000
     94  27a2		       00		      BYTE.b	%00000000
     95  27a3		       00		      BYTE.b	%00000000
     96  27a4		       00		      BYTE.b	%00000000
     97  27a5		       00		      BYTE.b	%00000000
     98  27a6		       00		      BYTE.b	%00000000
     99  27a7		       00		      BYTE.b	%00000000
    100  27a8		       00		      BYTE.b	%00000000
    101  27a9		       00		      BYTE.b	%00000000
    102  27aa		       00		      BYTE.b	%00000000
    103  27ab		       00		      BYTE.b	%00000000
    104  27ac		       00		      BYTE.b	%00000000
    105  27ad		       00		      BYTE.b	%00000000
    106  27ae		       00		      BYTE.b	%00000000
    107  27af		       00		      BYTE.b	%00000000
    108  27b0		       3c		      BYTE.b	%00111100
    109  27b1		       3c		      BYTE.b	%00111100
    110  27b2		       3c		      BYTE.b	%00111100
    111  27b3		       3d		      BYTE.b	%00111101
    112  27b4		       fd		      BYTE.b	%11111101
    113  27b5		       fd		      BYTE.b	%11111101
    114  27b6		       fd		      BYTE.b	%11111101
    115  27b7		       3d		      BYTE.b	%00111101
    116  27b8		       3c		      BYTE.b	%00111100
    117  27b9		       3c		      BYTE.b	%00111100
    118  27ba		       18		      BYTE.b	%00011000
    119  27bb		       00		      BYTE.b	%00000000
    120  27bc		       00		      BYTE.b	%00000000
    121  27bd		       00		      BYTE.b	%00000000
    122  27be
    123  27be				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    124  27be				  -	      align	256
    125  27be					      endif
    126  27be
    127  27be				   bmp_96x2_1_02
    128  27be
    129  27be		       00		      BYTE.b	%00000000
    130  27bf		       00		      BYTE.b	%00000000
    131  27c0		       00		      BYTE.b	%00000000
    132  27c1		       00		      BYTE.b	%00000000
    133  27c2		       00		      BYTE.b	%00000000
    134  27c3		       00		      BYTE.b	%00000000
    135  27c4		       00		      BYTE.b	%00000000
    136  27c5		       00		      BYTE.b	%00000000
    137  27c6		       00		      BYTE.b	%00000000
    138  27c7		       00		      BYTE.b	%00000000
    139  27c8		       00		      BYTE.b	%00000000
    140  27c9		       00		      BYTE.b	%00000000
    141  27ca		       00		      BYTE.b	%00000000
    142  27cb		       00		      BYTE.b	%00000000
    143  27cc		       00		      BYTE.b	%00000000
    144  27cd		       00		      BYTE.b	%00000000
    145  27ce		       3f		      BYTE.b	%00111111
    146  27cf		       ff		      BYTE.b	%11111111
    147  27d0		       ff		      BYTE.b	%11111111
    148  27d1		       e0		      BYTE.b	%11100000
    149  27d2		       c0		      BYTE.b	%11000000
    150  27d3		       c0		      BYTE.b	%11000000
    151  27d4		       e0		      BYTE.b	%11100000
    152  27d5		       f0		      BYTE.b	%11110000
    153  27d6		       ff		      BYTE.b	%11111111
    154  27d7		       7f		      BYTE.b	%01111111
    155  27d8		       1f		      BYTE.b	%00011111
    156  27d9		       00		      BYTE.b	%00000000
    157  27da		       00		      BYTE.b	%00000000
    158  27db		       00		      BYTE.b	%00000000
    159  27dc
    160  27dc				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    161  27dc				  -	      align	256
    162  27dc					      endif
    163  27dc
    164  27dc				   bmp_96x2_1_03
    165  27dc
    166  27dc		       00		      BYTE.b	%00000000
    167  27dd		       00		      BYTE.b	%00000000
    168  27de		       00		      BYTE.b	%00000000
    169  27df		       ff		      BYTE.b	%11111111
    170  27e0		       ff		      BYTE.b	%11111111
    171  27e1		       7f		      BYTE.b	%01111111
    172  27e2		       00		      BYTE.b	%00000000
    173  27e3		       1f		      BYTE.b	%00011111
    174  27e4		       7f		      BYTE.b	%01111111
    175  27e5		       ff		      BYTE.b	%11111111
    176  27e6		       f0		      BYTE.b	%11110000
    177  27e7		       ff		      BYTE.b	%11111111
    178  27e8		       ff		      BYTE.b	%11111111
    179  27e9		       3f		      BYTE.b	%00111111
    180  27ea		       00		      BYTE.b	%00000000
    181  27eb		       00		      BYTE.b	%00000000
    182  27ec		       f1		      BYTE.b	%11110001
    183  27ed		       f9		      BYTE.b	%11111001
    184  27ee		       fd		      BYTE.b	%11111101
    185  27ef		       3d		      BYTE.b	%00111101
    186  27f0		       1d		      BYTE.b	%00011101
    187  27f1		       1d		      BYTE.b	%00011101
    188  27f2		       1c		      BYTE.b	%00011100
    189  27f3		       7c		      BYTE.b	%01111100
    190  27f4		       f8		      BYTE.b	%11111000
    191  27f5		       f0		      BYTE.b	%11110000
    192  27f6		       c0		      BYTE.b	%11000000
    193  27f7		       00		      BYTE.b	%00000000
    194  27f8		       00		      BYTE.b	%00000000
    195  27f9		       00		      BYTE.b	%00000000
    196  27fa
    197  27fa					      if	>. != >[.+(bmp_96x2_1_height)]
    198  2800		       00 00 00 00*	      align	256
    199  2800					      endif
    200  2800
    201  2800				   bmp_96x2_1_04
    202  2800
    203  2800		       00		      BYTE.b	%00000000
    204  2801		       00		      BYTE.b	%00000000
    205  2802		       00		      BYTE.b	%00000000
    206  2803		       e1		      BYTE.b	%11100001
    207  2804		       f9		      BYTE.b	%11111001
    208  2805		       fd		      BYTE.b	%11111101
    209  2806		       3d		      BYTE.b	%00111101
    210  2807		       fd		      BYTE.b	%11111101
    211  2808		       f9		      BYTE.b	%11111001
    212  2809		       f1		      BYTE.b	%11110001
    213  280a		       01		      BYTE.b	%00000001
    214  280b		       f1		      BYTE.b	%11110001
    215  280c		       f1		      BYTE.b	%11110001
    216  280d		       f9		      BYTE.b	%11111001
    217  280e		       00		      BYTE.b	%00000000
    218  280f		       00		      BYTE.b	%00000000
    219  2810		       c0		      BYTE.b	%11000000
    220  2811		       c0		      BYTE.b	%11000000
    221  2812		       e1		      BYTE.b	%11100001
    222  2813		       ff		      BYTE.b	%11111111
    223  2814		       ff		      BYTE.b	%11111111
    224  2815		       ff		      BYTE.b	%11111111
    225  2816		       00		      BYTE.b	%00000000
    226  2817		       00		      BYTE.b	%00000000
    227  2818		       ff		      BYTE.b	%11111111
    228  2819		       ff		      BYTE.b	%11111111
    229  281a		       7f		      BYTE.b	%01111111
    230  281b		       00		      BYTE.b	%00000000
    231  281c		       00		      BYTE.b	%00000000
    232  281d		       00		      BYTE.b	%00000000
    233  281e
    234  281e				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    235  281e				  -	      align	256
    236  281e					      endif
    237  281e
    238  281e				   bmp_96x2_1_05
    239  281e
    240  281e		       00		      BYTE.b	%00000000
    241  281f		       00		      BYTE.b	%00000000
    242  2820		       00		      BYTE.b	%00000000
    243  2821		       c0		      BYTE.b	%11000000
    244  2822		       c0		      BYTE.b	%11000000
    245  2823		       c0		      BYTE.b	%11000000
    246  2824		       c0		      BYTE.b	%11000000
    247  2825		       ff		      BYTE.b	%11111111
    248  2826		       ff		      BYTE.b	%11111111
    249  2827		       ff		      BYTE.b	%11111111
    250  2828		       c0		      BYTE.b	%11000000
    251  2829		       c0		      BYTE.b	%11000000
    252  282a		       c0		      BYTE.b	%11000000
    253  282b		       c0		      BYTE.b	%11000000
    254  282c		       00		      BYTE.b	%00000000
    255  282d		       00		      BYTE.b	%00000000
    256  282e		       7c		      BYTE.b	%01111100
    257  282f		       f8		      BYTE.b	%11111000
    258  2830		       f0		      BYTE.b	%11110000
    259  2831		       f0		      BYTE.b	%11110000
    260  2832		       f8		      BYTE.b	%11111000
    261  2833		       f8		      BYTE.b	%11111000
    262  2834		       3c		      BYTE.b	%00111100
    263  2835		       78		      BYTE.b	%01111000
    264  2836		       f8		      BYTE.b	%11111000
    265  2837		       f0		      BYTE.b	%11110000
    266  2838		       c0		      BYTE.b	%11000000
    267  2839		       00		      BYTE.b	%00000000
    268  283a		       00		      BYTE.b	%00000000
    269  283b		       00		      BYTE.b	%00000000
    270  283c
    271  283c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    272  283c				  -	      align	256
    273  283c					      endif
    274  283c
    275  283c				   bmp_96x2_1_06
    276  283c
    277  283c		       00		      BYTE.b	%00000000
    278  283d		       00		      BYTE.b	%00000000
    279  283e		       00		      BYTE.b	%00000000
    280  283f		       e7		      BYTE.b	%11100111
    281  2840		       e7		      BYTE.b	%11100111
    282  2841		       e7		      BYTE.b	%11100111
    283  2842		       e7		      BYTE.b	%11100111
    284  2843		       e7		      BYTE.b	%11100111
    285  2844		       e7		      BYTE.b	%11100111
    286  2845		       e7		      BYTE.b	%11100111
    287  2846		       e7		      BYTE.b	%11100111
    288  2847		       e7		      BYTE.b	%11100111
    289  2848		       e7		      BYTE.b	%11100111
    290  2849		       e7		      BYTE.b	%11100111
    291  284a		       00		      BYTE.b	%00000000
    292  284b		       00		      BYTE.b	%00000000
    293  284c		       ef		      BYTE.b	%11101111
    294  284d		       ef		      BYTE.b	%11101111
    295  284e		       e7		      BYTE.b	%11100111
    296  284f		       e3		      BYTE.b	%11100011
    297  2850		       e1		      BYTE.b	%11100001
    298  2851		       e0		      BYTE.b	%11100000
    299  2852		       e0		      BYTE.b	%11100000
    300  2853		       e0		      BYTE.b	%11100000
    301  2854		       ef		      BYTE.b	%11101111
    302  2855		       e7		      BYTE.b	%11100111
    303  2856		       e3		      BYTE.b	%11100011
    304  2857		       00		      BYTE.b	%00000000
    305  2858		       00		      BYTE.b	%00000000
    306  2859		       00		      BYTE.b	%00000000
    307  285a
    308  285a				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    309  285a				  -	      align	256
    310  285a					      endif
    311  285a
    312  285a				   bmp_96x2_1_07
    313  285a
    314  285a		       00		      BYTE.b	%00000000
    315  285b		       00		      BYTE.b	%00000000
    316  285c		       00		      BYTE.b	%00000000
    317  285d		       70		      BYTE.b	%01110000
    318  285e		       70		      BYTE.b	%01110000
    319  285f		       70		      BYTE.b	%01110000
    320  2860		       70		      BYTE.b	%01110000
    321  2861		       7f		      BYTE.b	%01111111
    322  2862		       7f		      BYTE.b	%01111111
    323  2863		       7f		      BYTE.b	%01111111
    324  2864		       70		      BYTE.b	%01110000
    325  2865		       7f		      BYTE.b	%01111111
    326  2866		       7f		      BYTE.b	%01111111
    327  2867		       7f		      BYTE.b	%01111111
    328  2868		       00		      BYTE.b	%00000000
    329  2869		       00		      BYTE.b	%00000000
    330  286a		       ff		      BYTE.b	%11111111
    331  286b		       ff		      BYTE.b	%11111111
    332  286c		       ff		      BYTE.b	%11111111
    333  286d		       e0		      BYTE.b	%11100000
    334  286e		       f0		      BYTE.b	%11110000
    335  286f		       fc		      BYTE.b	%11111100
    336  2870		       7e		      BYTE.b	%01111110
    337  2871		       3f		      BYTE.b	%00111111
    338  2872		       ff		      BYTE.b	%11111111
    339  2873		       ff		      BYTE.b	%11111111
    340  2874		       ff		      BYTE.b	%11111111
    341  2875		       00		      BYTE.b	%00000000
    342  2876		       00		      BYTE.b	%00000000
    343  2877		       00		      BYTE.b	%00000000
    344  2878
    345  2878				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2878				  -	      align	256
    347  2878					      endif
    348  2878
    349  2878				   bmp_96x2_1_08
    350  2878
    351  2878		       00		      BYTE.b	%00000000
    352  2879		       00		      BYTE.b	%00000000
    353  287a		       00		      BYTE.b	%00000000
    354  287b		       00		      BYTE.b	%00000000
    355  287c		       00		      BYTE.b	%00000000
    356  287d		       00		      BYTE.b	%00000000
    357  287e		       00		      BYTE.b	%00000000
    358  287f		       c0		      BYTE.b	%11000000
    359  2880		       e0		      BYTE.b	%11100000
    360  2881		       e0		      BYTE.b	%11100000
    361  2882		       00		      BYTE.b	%00000000
    362  2883		       cf		      BYTE.b	%11001111
    363  2884		       e7		      BYTE.b	%11100111
    364  2885		       f7		      BYTE.b	%11110111
    365  2886		       00		      BYTE.b	%00000000
    366  2887		       00		      BYTE.b	%00000000
    367  2888		       87		      BYTE.b	%10000111
    368  2889		       1f		      BYTE.b	%00011111
    369  288a		       1f		      BYTE.b	%00011111
    370  288b		       3c		      BYTE.b	%00111100
    371  288c		       38		      BYTE.b	%00111000
    372  288d		       38		      BYTE.b	%00111000
    373  288e		       3c		      BYTE.b	%00111100
    374  288f		       3e		      BYTE.b	%00111110
    375  2890		       9f		      BYTE.b	%10011111
    376  2891		       8f		      BYTE.b	%10001111
    377  2892		       03		      BYTE.b	%00000011
    378  2893		       00		      BYTE.b	%00000000
    379  2894		       00		      BYTE.b	%00000000
    380  2895		       00		      BYTE.b	%00000000
    381  2896
    382  2896				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    383  2896				  -	      align	256
    384  2896					      endif
    385  2896
    386  2896				   bmp_96x2_1_09
    387  2896
    388  2896		       00		      BYTE.b	%00000000
    389  2897		       00		      BYTE.b	%00000000
    390  2898		       00		      BYTE.b	%00000000
    391  2899		       e0		      BYTE.b	%11100000
    392  289a		       e0		      BYTE.b	%11100000
    393  289b		       e0		      BYTE.b	%11100000
    394  289c		       e0		      BYTE.b	%11100000
    395  289d		       e0		      BYTE.b	%11100000
    396  289e		       e0		      BYTE.b	%11100000
    397  289f		       e0		      BYTE.b	%11100000
    398  28a0		       e0		      BYTE.b	%11100000
    399  28a1		       fe		      BYTE.b	%11111110
    400  28a2		       ff		      BYTE.b	%11111111
    401  28a3		       ff		      BYTE.b	%11111111
    402  28a4		       00		      BYTE.b	%00000000
    403  28a5		       00		      BYTE.b	%00000000
    404  28a6		       fe		      BYTE.b	%11111110
    405  28a7		       ff		      BYTE.b	%11111111
    406  28a8		       ff		      BYTE.b	%11111111
    407  28a9		       07		      BYTE.b	%00000111
    408  28aa		       03		      BYTE.b	%00000011
    409  28ab		       03		      BYTE.b	%00000011
    410  28ac		       03		      BYTE.b	%00000011
    411  28ad		       0f		      BYTE.b	%00001111
    412  28ae		       ff		      BYTE.b	%11111111
    413  28af		       ff		      BYTE.b	%11111111
    414  28b0		       f8		      BYTE.b	%11111000
    415  28b1		       00		      BYTE.b	%00000000
    416  28b2		       00		      BYTE.b	%00000000
    417  28b3		       00		      BYTE.b	%00000000
    418  28b4
    419  28b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    420  28b4				  -	      align	256
    421  28b4					      endif
    422  28b4
    423  28b4				   bmp_96x2_1_10
    424  28b4
    425  28b4		       00		      BYTE.b	%00000000
    426  28b5		       00		      BYTE.b	%00000000
    427  28b6		       00		      BYTE.b	%00000000
    428  28b7		       00		      BYTE.b	%00000000
    429  28b8		       00		      BYTE.b	%00000000
    430  28b9		       00		      BYTE.b	%00000000
    431  28ba		       00		      BYTE.b	%00000000
    432  28bb		       00		      BYTE.b	%00000000
    433  28bc		       00		      BYTE.b	%00000000
    434  28bd		       00		      BYTE.b	%00000000
    435  28be		       00		      BYTE.b	%00000000
    436  28bf		       00		      BYTE.b	%00000000
    437  28c0		       00		      BYTE.b	%00000000
    438  28c1		       00		      BYTE.b	%00000000
    439  28c2		       00		      BYTE.b	%00000000
    440  28c3		       00		      BYTE.b	%00000000
    441  28c4		       1c		      BYTE.b	%00011100
    442  28c5		       1c		      BYTE.b	%00011100
    443  28c6		       9c		      BYTE.b	%10011100
    444  28c7		       9c		      BYTE.b	%10011100
    445  28c8		       9d		      BYTE.b	%10011101
    446  28c9		       df		      BYTE.b	%11011111
    447  28ca		       9f		      BYTE.b	%10011111
    448  28cb		       9f		      BYTE.b	%10011111
    449  28cc		       9f		      BYTE.b	%10011111
    450  28cd		       1c		      BYTE.b	%00011100
    451  28ce		       18		      BYTE.b	%00011000
    452  28cf		       00		      BYTE.b	%00000000
    453  28d0		       00		      BYTE.b	%00000000
    454  28d1		       00		      BYTE.b	%00000000
    455  28d2
    456  28d2				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    457  28d2				  -	      align	256
    458  28d2					      endif
    459  28d2
    460  28d2				   bmp_96x2_1_11
    461  28d2
    462  28d2		       00		      BYTE.b	%00000000
    463  28d3		       00		      BYTE.b	%00000000
    464  28d4		       00		      BYTE.b	%00000000
    465  28d5		       00		      BYTE.b	%00000000
    466  28d6		       00		      BYTE.b	%00000000
    467  28d7		       00		      BYTE.b	%00000000
    468  28d8		       00		      BYTE.b	%00000000
    469  28d9		       00		      BYTE.b	%00000000
    470  28da		       00		      BYTE.b	%00000000
    471  28db		       00		      BYTE.b	%00000000
    472  28dc		       00		      BYTE.b	%00000000
    473  28dd		       00		      BYTE.b	%00000000
    474  28de		       00		      BYTE.b	%00000000
    475  28df		       00		      BYTE.b	%00000000
    476  28e0		       00		      BYTE.b	%00000000
    477  28e1		       00		      BYTE.b	%00000000
    478  28e2		       0e		      BYTE.b	%00001110
    479  28e3		       3e		      BYTE.b	%00111110
    480  28e4		       7e		      BYTE.b	%01111110
    481  28e5		       fe		      BYTE.b	%11111110
    482  28e6		       fe		      BYTE.b	%11111110
    483  28e7		       fe		      BYTE.b	%11111110
    484  28e8		       ce		      BYTE.b	%11001110
    485  28e9		       8e		      BYTE.b	%10001110
    486  28ea		       0e		      BYTE.b	%00001110
    487  28eb		       0e		      BYTE.b	%00001110
    488  28ec		       0e		      BYTE.b	%00001110
    489  28ed		       00		      BYTE.b	%00000000
    490  28ee		       00		      BYTE.b	%00000000
    491  28ef		       00		      BYTE.b	%00000000
    492  28f0
------- FILE titlescreen/asm/titlescreen.asm
    160  28f0					      endif
    161  28f0				  -	      ifconst	mk_96x2_2_on
    162  28f0				  -	      include	"titlescreen/96x2_2_image.asm"
    163  28f0					      endif
    164  28f0				  -	      ifconst	mk_96x2_3_on
    165  28f0				  -	      include	"titlescreen/96x2_3_image.asm"
    166  28f0					      endif
    167  28f0
    168  28f0					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  28f0					      include	"titlescreen/score_image.asm"
      1  28f0							; feel free to modify the score graphics - just keep each digit 8 high
      2  28f0							; if you're looking to want to modify any one font, pick on the 
      3  28f0
      4  28f0				  -	      ifnconst	NOFONT
      5  28f0				  -NOFONT     =	0
      6  28f0					      endif
      7  28f0				  -	      ifnconst	STOCK
      8  28f0				  -STOCK      =	1	;_FONTNAME
      9  28f0					      endif
     10  28f0				  -	      ifnconst	NEWCENTURY
     11  28f0				  -NEWCENTURY =	2	;_FONTNAME
     12  28f0					      endif
     13  28f0				  -	      ifnconst	WHIMSEY
     14  28f0				  -WHIMSEY    =	3	;_FONTNAME
     15  28f0					      endif
     16  28f0				  -	      ifnconst	ALARMCLOCK
     17  28f0				  -ALARMCLOCK =	4	;_FONTNAME
     18  28f0					      endif
     19  28f0				  -	      ifnconst	HANDWRITTEN
     20  28f0				  -HANDWRITTEN =	5	;_FONTNAME
     21  28f0					      endif
     22  28f0				  -	      ifnconst	INTERRUPTED
     23  28f0				  -INTERRUPTED =	6	;_FONTNAME
     24  28f0					      endif
     25  28f0				  -	      ifnconst	TINY
     26  28f0				  -TINY       =	7	;_FONTNAME
     27  28f0					      endif
     28  28f0				  -	      ifnconst	RETROPUTER
     29  28f0				  -RETROPUTER =	8	;_FONTNAME
     30  28f0					      endif
     31  28f0				  -	      ifnconst	CURVES
     32  28f0				  -CURVES     =	9	;_FONTNAME
     33  28f0					      endif
     34  28f0				  -	      ifnconst	HUSKY
     35  28f0				  -HUSKY      =	10	;_FONTNAME
     36  28f0					      endif
     37  28f0				  -	      ifnconst	SNAKE
     38  28f0				  -SNAKE      =	11	;_FONTNAME
     39  28f0					      endif
     40  28f0				  -	      ifnconst	PLOK
     41  28f0				  -PLOK       =	13	;_FONTNAME
     42  28f0					      endif
     43  28f0
     44  28f0				  -	      ifnconst	SYMBOLS
     45  28f0				  -SYMBOLS    =	0	;_FONTNAME 
     46  28f0					      endif
     47  28f0
     48  28f0							; ### setup some defaults
     49  28f0				  -	      ifnconst	fontstyle
     50  28f0				  -fontstyle  =	STOCK
     51  28f0					      endif
     52  28f0
     53  28f0							;fix up the table alignment, if necessary
     54  28f0					      if	>. != >[.+128]
     55  2900		       00 00 00 00*	      align	256
     56  2900					      endif
     57  2900
     58  2900				   miniscoretable
     59  2900
     60  2900					      if	fontstyle == STOCK
     61  2900
     62  2900							;byte %00000000 ; STOCK
     63  2900
     64  2900		       3c		      .byte.b	%00111100	; STOCK
     65  2901		       66		      .byte.b	%01100110	; STOCK
     66  2902		       66		      .byte.b	%01100110	; STOCK
     67  2903		       66		      .byte.b	%01100110	; STOCK
     68  2904		       66		      .byte.b	%01100110	; STOCK
     69  2905		       66		      .byte.b	%01100110	; STOCK
     70  2906		       66		      .byte.b	%01100110	; STOCK
     71  2907		       3c		      .byte.b	%00111100	; STOCK
     72  2908
     73  2908							;byte %00000000 ; STOCK
     74  2908
     75  2908		       7e		      .byte.b	%01111110	; STOCK
     76  2909		       18		      .byte.b	%00011000	; STOCK
     77  290a		       18		      .byte.b	%00011000	; STOCK
     78  290b		       18		      .byte.b	%00011000	; STOCK
     79  290c		       18		      .byte.b	%00011000	; STOCK
     80  290d		       38		      .byte.b	%00111000	; STOCK
     81  290e		       18		      .byte.b	%00011000	; STOCK
     82  290f		       08		      .byte.b	%00001000	; STOCK
     83  2910
     84  2910							;byte %00000000 ; STOCK
     85  2910
     86  2910		       7e		      .byte.b	%01111110	; STOCK
     87  2911		       60		      .byte.b	%01100000	; STOCK
     88  2912		       60		      .byte.b	%01100000	; STOCK
     89  2913		       3c		      .byte.b	%00111100	; STOCK
     90  2914		       06		      .byte.b	%00000110	; STOCK
     91  2915		       06		      .byte.b	%00000110	; STOCK
     92  2916		       46		      .byte.b	%01000110	; STOCK
     93  2917		       3c		      .byte.b	%00111100	; STOCK
     94  2918
     95  2918							;byte %00000000 ; STOCK
     96  2918
     97  2918		       3c		      .byte.b	%00111100	; STOCK
     98  2919		       46		      .byte.b	%01000110	; STOCK
     99  291a		       06		      .byte.b	%00000110	; STOCK
    100  291b		       06		      .byte.b	%00000110	; STOCK
    101  291c		       1c		      .byte.b	%00011100	; STOCK
    102  291d		       06		      .byte.b	%00000110	; STOCK
    103  291e		       46		      .byte.b	%01000110	; STOCK
    104  291f		       3c		      .byte.b	%00111100	; STOCK
    105  2920
    106  2920							;byte %00000000 ; STOCK
    107  2920
    108  2920		       0c		      .byte.b	%00001100	; STOCK
    109  2921		       0c		      .byte.b	%00001100	; STOCK
    110  2922		       7e		      .byte.b	%01111110	; STOCK
    111  2923		       4c		      .byte.b	%01001100	; STOCK
    112  2924		       4c		      .byte.b	%01001100	; STOCK
    113  2925		       2c		      .byte.b	%00101100	; STOCK
    114  2926		       1c		      .byte.b	%00011100	; STOCK
    115  2927		       0c		      .byte.b	%00001100	; STOCK
    116  2928
    117  2928							;byte %00000000 ; STOCK
    118  2928
    119  2928		       3c		      .byte.b	%00111100	; STOCK
    120  2929		       46		      .byte.b	%01000110	; STOCK
    121  292a		       06		      .byte.b	%00000110	; STOCK
    122  292b		       06		      .byte.b	%00000110	; STOCK
    123  292c		       3c		      .byte.b	%00111100	; STOCK
    124  292d		       60		      .byte.b	%01100000	; STOCK
    125  292e		       60		      .byte.b	%01100000	; STOCK
    126  292f		       7e		      .byte.b	%01111110	; STOCK
    127  2930
    128  2930							;byte %00000000 ; STOCK
    129  2930
    130  2930		       3c		      .byte.b	%00111100	; STOCK
    131  2931		       66		      .byte.b	%01100110	; STOCK
    132  2932		       66		      .byte.b	%01100110	; STOCK
    133  2933		       66		      .byte.b	%01100110	; STOCK
    134  2934		       7c		      .byte.b	%01111100	; STOCK
    135  2935		       60		      .byte.b	%01100000	; STOCK
    136  2936		       62		      .byte.b	%01100010	; STOCK
    137  2937		       3c		      .byte.b	%00111100	; STOCK
    138  2938
    139  2938							;byte %00000000 ; STOCK
    140  2938
    141  2938		       30		      .byte.b	%00110000	; STOCK
    142  2939		       30		      .byte.b	%00110000	; STOCK
    143  293a		       30		      .byte.b	%00110000	; STOCK
    144  293b		       18		      .byte.b	%00011000	; STOCK
    145  293c		       0c		      .byte.b	%00001100	; STOCK
    146  293d		       06		      .byte.b	%00000110	; STOCK
    147  293e		       42		      .byte.b	%01000010	; STOCK
    148  293f		       3e		      .byte.b	%00111110	; STOCK
    149  2940
    150  2940							;byte %00000000 ; STOCK
    151  2940
    152  2940		       3c		      .byte.b	%00111100	; STOCK
    153  2941		       66		      .byte.b	%01100110	; STOCK
    154  2942		       66		      .byte.b	%01100110	; STOCK
    155  2943		       66		      .byte.b	%01100110	; STOCK
    156  2944		       3c		      .byte.b	%00111100	; STOCK
    157  2945		       66		      .byte.b	%01100110	; STOCK
    158  2946		       66		      .byte.b	%01100110	; STOCK
    159  2947		       3c		      .byte.b	%00111100	; STOCK
    160  2948
    161  2948							;byte %00000000 ; STOCK
    162  2948
    163  2948		       3c		      .byte.b	%00111100	; STOCK
    164  2949		       46		      .byte.b	%01000110	; STOCK
    165  294a		       06		      .byte.b	%00000110	; STOCK
    166  294b		       3e		      .byte.b	%00111110	; STOCK
    167  294c		       66		      .byte.b	%01100110	; STOCK
    168  294d		       66		      .byte.b	%01100110	; STOCK
    169  294e		       66		      .byte.b	%01100110	; STOCK
    170  294f		       3c		      .byte.b	%00111100	; STOCK
    171  2950
    172  2950							;byte %00000000 ; STOCK
    173  2950
    174  2950				  -	      ifconst	fontcharsHEX
    175  2950				  -
    176  2950				  -	      .byte	%01100110	; STOCK
    177  2950				  -	      .byte	%01100110	; STOCK
    178  2950				  -	      .byte	%01100110	; STOCK
    179  2950				  -	      .byte	%01111110	; STOCK
    180  2950				  -	      .byte	%01100110	; STOCK
    181  2950				  -	      .byte	%01100110	; STOCK
    182  2950				  -	      .byte	%01100110	; STOCK
    183  2950				  -	      .byte	%00111100	; STOCK
    184  2950				  -
    185  2950				  -			;byte %00000000 ; STOCK
    186  2950				  -
    187  2950				  -	      .byte	%01111100	; STOCK
    188  2950				  -	      .byte	%01100110	; STOCK
    189  2950				  -	      .byte	%01100110	; STOCK
    190  2950				  -	      .byte	%01100110	; STOCK
    191  2950				  -	      .byte	%01111100	; STOCK
    192  2950				  -	      .byte	%01100110	; STOCK
    193  2950				  -	      .byte	%01100110	; STOCK
    194  2950				  -	      .byte	%01111100	; STOCK
    195  2950				  -
    196  2950				  -			;byte %00000000 ; STOCK
    197  2950				  -
    198  2950				  -	      .byte	%00111100	; STOCK
    199  2950				  -	      .byte	%01100110	; STOCK
    200  2950				  -	      .byte	%01100000	; STOCK
    201  2950				  -	      .byte	%01100000	; STOCK
    202  2950				  -	      .byte	%01100000	; STOCK
    203  2950				  -	      .byte	%01100000	; STOCK
    204  2950				  -	      .byte	%01100110	; STOCK
    205  2950				  -	      .byte	%00111100	; STOCK
    206  2950				  -
    207  2950				  -			;byte %00000000 ; STOCK
    208  2950				  -
    209  2950				  -	      .byte	%01111100	; STOCK
    210  2950				  -	      .byte	%01100110	; STOCK
    211  2950				  -	      .byte	%01100110	; STOCK
    212  2950				  -	      .byte	%01100110	; STOCK
    213  2950				  -	      .byte	%01100110	; STOCK
    214  2950				  -	      .byte	%01100110	; STOCK
    215  2950				  -	      .byte	%01100110	; STOCK
    216  2950				  -	      .byte	%01111100	; STOCK
    217  2950				  -
    218  2950				  -			;byte %00000000 ; STOCK
    219  2950				  -
    220  2950				  -	      .byte	%01111110	; STOCK
    221  2950				  -	      .byte	%01100000	; STOCK
    222  2950				  -	      .byte	%01100000	; STOCK
    223  2950				  -	      .byte	%01100000	; STOCK
    224  2950				  -	      .byte	%01111100	; STOCK
    225  2950				  -	      .byte	%01100000	; STOCK
    226  2950				  -	      .byte	%01100000	; STOCK
    227  2950				  -	      .byte	%01111110	; STOCK
    228  2950				  -
    229  2950				  -			;byte %00000000 ; STOCK
    230  2950				  -
    231  2950				  -	      .byte	%01100000	; STOCK
    232  2950				  -	      .byte	%01100000	; STOCK
    233  2950				  -	      .byte	%01100000	; STOCK
    234  2950				  -	      .byte	%01100000	; STOCK
    235  2950				  -	      .byte	%01111100	; STOCK
    236  2950				  -	      .byte	%01100000	; STOCK
    237  2950				  -	      .byte	%01100000	; STOCK
    238  2950				  -	      .byte	%01111110	; STOCK
    239  2950				  -
    240  2950				  -			;byte %00000000 ; STOCK
    241  2950				  -			;byte %00000000 ; STOCK
    242  2950				  -			;byte %00000000 ; STOCK
    243  2950				  -			;byte %00000000 ; STOCK
    244  2950					      endif		; fontcharsHEX 
    245  2950					      endif		; STOCK
    246  2950
    247  2950				  -	      if	fontstyle == NEWCENTURY
    248  2950				  -			;byte %00000000 ; NEWCENTURY
    249  2950				  -
    250  2950				  -	      .byte	%00111100	; NEWCENTURY
    251  2950				  -	      .byte	%01000010	; NEWCENTURY
    252  2950				  -	      .byte	%01000010	; NEWCENTURY
    253  2950				  -	      .byte	%01000010	; NEWCENTURY
    254  2950				  -	      .byte	%00100100	; NEWCENTURY
    255  2950				  -	      .byte	%00100100	; NEWCENTURY
    256  2950				  -	      .byte	%00100100	; NEWCENTURY
    257  2950				  -	      .byte	%00011000	; NEWCENTURY
    258  2950				  -
    259  2950				  -			;byte %00000000 ; NEWCENTURY
    260  2950				  -
    261  2950				  -	      .byte	%00001000	; NEWCENTURY
    262  2950				  -	      .byte	%00001000	; NEWCENTURY
    263  2950				  -	      .byte	%00001000	; NEWCENTURY
    264  2950				  -	      .byte	%00001000	; NEWCENTURY
    265  2950				  -	      .byte	%00001000	; NEWCENTURY
    266  2950				  -	      .byte	%00001000	; NEWCENTURY
    267  2950				  -	      .byte	%00001000	; NEWCENTURY
    268  2950				  -	      .byte	%00001000	; NEWCENTURY
    269  2950				  -
    270  2950				  -			;byte %00000000 ; NEWCENTURY
    271  2950				  -
    272  2950				  -	      .byte	%01111110	; NEWCENTURY
    273  2950				  -	      .byte	%01000000	; NEWCENTURY
    274  2950				  -	      .byte	%01000000	; NEWCENTURY
    275  2950				  -	      .byte	%00100000	; NEWCENTURY
    276  2950				  -	      .byte	%00011100	; NEWCENTURY
    277  2950				  -	      .byte	%00000010	; NEWCENTURY
    278  2950				  -	      .byte	%00000010	; NEWCENTURY
    279  2950				  -	      .byte	%00011100	; NEWCENTURY
    280  2950				  -
    281  2950				  -			;byte %00000000 ; NEWCENTURY
    282  2950				  -
    283  2950				  -	      .byte	%01111100	; NEWCENTURY
    284  2950				  -	      .byte	%00000010	; NEWCENTURY
    285  2950				  -	      .byte	%00000010	; NEWCENTURY
    286  2950				  -	      .byte	%00000010	; NEWCENTURY
    287  2950				  -	      .byte	%00111100	; NEWCENTURY
    288  2950				  -	      .byte	%00000010	; NEWCENTURY
    289  2950				  -	      .byte	%00000010	; NEWCENTURY
    290  2950				  -	      .byte	%00011100	; NEWCENTURY
    291  2950				  -
    292  2950				  -			;byte %00000000 ; NEWCENTURY
    293  2950				  -
    294  2950				  -	      .byte	%00000010	; NEWCENTURY
    295  2950				  -	      .byte	%00000010	; NEWCENTURY
    296  2950				  -	      .byte	%00000010	; NEWCENTURY
    297  2950				  -	      .byte	%00111110	; NEWCENTURY
    298  2950				  -	      .byte	%00100010	; NEWCENTURY
    299  2950				  -	      .byte	%00100010	; NEWCENTURY
    300  2950				  -	      .byte	%00010010	; NEWCENTURY
    301  2950				  -	      .byte	%00010010	; NEWCENTURY
    302  2950				  -
    303  2950				  -			;byte %00000000 ; NEWCENTURY
    304  2950				  -
    305  2950				  -	      .byte	%01111100	; NEWCENTURY
    306  2950				  -	      .byte	%00000010	; NEWCENTURY
    307  2950				  -	      .byte	%00000010	; NEWCENTURY
    308  2950				  -	      .byte	%00000010	; NEWCENTURY
    309  2950				  -	      .byte	%01111100	; NEWCENTURY
    310  2950				  -	      .byte	%01000000	; NEWCENTURY
    311  2950				  -	      .byte	%01000000	; NEWCENTURY
    312  2950				  -	      .byte	%01111000	; NEWCENTURY
    313  2950				  -
    314  2950				  -			;byte %00000000 ; NEWCENTURY
    315  2950				  -
    316  2950				  -	      .byte	%00111100	; NEWCENTURY
    317  2950				  -	      .byte	%01000010	; NEWCENTURY
    318  2950				  -	      .byte	%01000010	; NEWCENTURY
    319  2950				  -	      .byte	%01000010	; NEWCENTURY
    320  2950				  -	      .byte	%01111100	; NEWCENTURY
    321  2950				  -	      .byte	%01000000	; NEWCENTURY
    322  2950				  -	      .byte	%01000000	; NEWCENTURY
    323  2950				  -	      .byte	%00110000	; NEWCENTURY
    324  2950				  -
    325  2950				  -			;byte %00000000 ; NEWCENTURY
    326  2950				  -
    327  2950				  -	      .byte	%00010000	; NEWCENTURY
    328  2950				  -	      .byte	%00010000	; NEWCENTURY
    329  2950				  -	      .byte	%00001000	; NEWCENTURY
    330  2950				  -	      .byte	%00001000	; NEWCENTURY
    331  2950				  -	      .byte	%00000100	; NEWCENTURY
    332  2950				  -	      .byte	%00000100	; NEWCENTURY
    333  2950				  -	      .byte	%00000010	; NEWCENTURY
    334  2950				  -	      .byte	%00011110	; NEWCENTURY
    335  2950				  -
    336  2950				  -			;byte %00000000 ; NEWCENTURY
    337  2950				  -
    338  2950				  -	      .byte	%00111100	; NEWCENTURY
    339  2950				  -	      .byte	%01000010	; NEWCENTURY
    340  2950				  -	      .byte	%01000010	; NEWCENTURY
    341  2950				  -	      .byte	%01000010	; NEWCENTURY
    342  2950				  -	      .byte	%00111100	; NEWCENTURY
    343  2950				  -	      .byte	%00100100	; NEWCENTURY
    344  2950				  -	      .byte	%00100100	; NEWCENTURY
    345  2950				  -	      .byte	%00011000	; NEWCENTURY
    346  2950				  -
    347  2950				  -			;byte %00000000 ; NEWCENTURY
    348  2950				  -
    349  2950				  -	      .byte	%00111100	; NEWCENTURY
    350  2950				  -	      .byte	%00000010	; NEWCENTURY
    351  2950				  -	      .byte	%00000010	; NEWCENTURY
    352  2950				  -	      .byte	%00000010	; NEWCENTURY
    353  2950				  -	      .byte	%00001110	; NEWCENTURY
    354  2950				  -	      .byte	%00010010	; NEWCENTURY
    355  2950				  -	      .byte	%00010010	; NEWCENTURY
    356  2950				  -	      .byte	%00001100	; NEWCENTURY
    357  2950				  -
    358  2950				  -	      ifconst	fontcharsHEX
    359  2950				  -
    360  2950				  -			;byte %00000000 ; NEWCENTURY
    361  2950				  -
    362  2950				  -	      .byte	%01000010	; NEWCENTURY
    363  2950				  -	      .byte	%01000010	; NEWCENTURY
    364  2950				  -	      .byte	%01000010	; NEWCENTURY
    365  2950				  -	      .byte	%01000010	; NEWCENTURY
    366  2950				  -	      .byte	%01111100	; NEWCENTURY
    367  2950				  -	      .byte	%01000100	; NEWCENTURY
    368  2950				  -	      .byte	%01000100	; NEWCENTURY
    369  2950				  -	      .byte	%00111000	; NEWCENTURY
    370  2950				  -
    371  2950				  -			;byte %00000000 ; NEWCENTURY
    372  2950				  -
    373  2950				  -	      .byte	%01111100	; NEWCENTURY
    374  2950				  -	      .byte	%01000010	; NEWCENTURY
    375  2950				  -	      .byte	%01000010	; NEWCENTURY
    376  2950				  -	      .byte	%01000010	; NEWCENTURY
    377  2950				  -	      .byte	%01111100	; NEWCENTURY
    378  2950				  -	      .byte	%01000100	; NEWCENTURY
    379  2950				  -	      .byte	%01000100	; NEWCENTURY
    380  2950				  -	      .byte	%01111000	; NEWCENTURY
    381  2950				  -
    382  2950				  -			;byte %00000000 ; NEWCENTURY
    383  2950				  -
    384  2950				  -	      .byte	%00111100	; NEWCENTURY
    385  2950				  -	      .byte	%01000010	; NEWCENTURY
    386  2950				  -	      .byte	%01000000	; NEWCENTURY
    387  2950				  -	      .byte	%01000000	; NEWCENTURY
    388  2950				  -	      .byte	%01000000	; NEWCENTURY
    389  2950				  -	      .byte	%01000000	; NEWCENTURY
    390  2950				  -	      .byte	%01000000	; NEWCENTURY
    391  2950				  -	      .byte	%00111000	; NEWCENTURY
    392  2950				  -
    393  2950				  -			;byte %00000000 ; NEWCENTURY
    394  2950				  -
    395  2950				  -	      .byte	%01111100	; NEWCENTURY
    396  2950				  -	      .byte	%01000010	; NEWCENTURY
    397  2950				  -	      .byte	%01000010	; NEWCENTURY
    398  2950				  -	      .byte	%01000010	; NEWCENTURY
    399  2950				  -	      .byte	%01000010	; NEWCENTURY
    400  2950				  -	      .byte	%01000100	; NEWCENTURY
    401  2950				  -	      .byte	%01000100	; NEWCENTURY
    402  2950				  -	      .byte	%01111000	; NEWCENTURY
    403  2950				  -
    404  2950				  -			;byte %00000000 ; NEWCENTURY
    405  2950				  -
    406  2950				  -	      .byte	%01111110	; NEWCENTURY
    407  2950				  -	      .byte	%01000000	; NEWCENTURY
    408  2950				  -	      .byte	%01000000	; NEWCENTURY
    409  2950				  -	      .byte	%01000000	; NEWCENTURY
    410  2950				  -	      .byte	%01111100	; NEWCENTURY
    411  2950				  -	      .byte	%01000000	; NEWCENTURY
    412  2950				  -	      .byte	%01000000	; NEWCENTURY
    413  2950				  -	      .byte	%01111000	; NEWCENTURY
    414  2950				  -
    415  2950				  -			;byte %00000000 ; NEWCENTURY
    416  2950				  -
    417  2950				  -	      .byte	%01000000	; NEWCENTURY
    418  2950				  -	      .byte	%01000000	; NEWCENTURY
    419  2950				  -	      .byte	%01000000	; NEWCENTURY
    420  2950				  -	      .byte	%01000000	; NEWCENTURY
    421  2950				  -	      .byte	%01111100	; NEWCENTURY
    422  2950				  -	      .byte	%01000000	; NEWCENTURY
    423  2950				  -	      .byte	%01000000	; NEWCENTURY
    424  2950				  -	      .byte	%01111000	; NEWCENTURY
    425  2950				  -
    426  2950				  -			;byte %00000000 ; NEWCENTURY
    427  2950				  -			;byte %00000000 ; NEWCENTURY
    428  2950				  -			;byte %00000000 ; NEWCENTURY
    429  2950				  -			;byte %00000000 ; NEWCENTURY
    430  2950				  -
    431  2950				  -	      endif		; fontcharsHEX 
    432  2950					      endif		; NEWCENTURY
    433  2950
    434  2950				  -	      if	fontstyle == WHIMSEY
    435  2950				  -			;byte %00000000 ; WHIMSEY
    436  2950				  -
    437  2950				  -	      .byte	%00111100	; WHIMSEY
    438  2950				  -	      .byte	%01111110	; WHIMSEY
    439  2950				  -	      .byte	%01111110	; WHIMSEY
    440  2950				  -	      .byte	%01111110	; WHIMSEY
    441  2950				  -	      .byte	%01110110	; WHIMSEY
    442  2950				  -	      .byte	%01110110	; WHIMSEY
    443  2950				  -	      .byte	%01110110	; WHIMSEY
    444  2950				  -	      .byte	%00111100	; WHIMSEY
    445  2950				  -
    446  2950				  -			;byte %00000000 ; WHIMSEY
    447  2950				  -
    448  2950				  -	      .byte	%01111110	; WHIMSEY
    449  2950				  -	      .byte	%01111110	; WHIMSEY
    450  2950				  -	      .byte	%01111110	; WHIMSEY
    451  2950				  -	      .byte	%00011000	; WHIMSEY
    452  2950				  -	      .byte	%00011000	; WHIMSEY
    453  2950				  -	      .byte	%00011000	; WHIMSEY
    454  2950				  -	      .byte	%01111000	; WHIMSEY
    455  2950				  -	      .byte	%00011000	; WHIMSEY
    456  2950				  -
    457  2950				  -			;byte %00000000 ; WHIMSEY
    458  2950				  -
    459  2950				  -	      .byte	%01111110	; WHIMSEY
    460  2950				  -	      .byte	%01111110	; WHIMSEY
    461  2950				  -	      .byte	%01111110	; WHIMSEY
    462  2950				  -	      .byte	%01111000	; WHIMSEY
    463  2950				  -	      .byte	%00111100	; WHIMSEY
    464  2950				  -	      .byte	%00001110	; WHIMSEY
    465  2950				  -	      .byte	%01100110	; WHIMSEY
    466  2950				  -	      .byte	%00111100	; WHIMSEY
    467  2950				  -
    468  2950				  -			;byte %00000000 ; WHIMSEY
    469  2950				  -
    470  2950				  -	      .byte	%00111100	; WHIMSEY
    471  2950				  -	      .byte	%01111110	; WHIMSEY
    472  2950				  -	      .byte	%01111110	; WHIMSEY
    473  2950				  -	      .byte	%01101110	; WHIMSEY
    474  2950				  -	      .byte	%00001110	; WHIMSEY
    475  2950				  -	      .byte	%00111100	; WHIMSEY
    476  2950				  -	      .byte	%00011100	; WHIMSEY
    477  2950				  -	      .byte	%01111110	; WHIMSEY
    478  2950				  -
    479  2950				  -			;byte %00000000 ; WHIMSEY
    480  2950				  -
    481  2950				  -	      .byte	%00011100	; WHIMSEY
    482  2950				  -	      .byte	%00011100	; WHIMSEY
    483  2950				  -	      .byte	%01111110	; WHIMSEY
    484  2950				  -	      .byte	%01011100	; WHIMSEY
    485  2950				  -	      .byte	%01011100	; WHIMSEY
    486  2950				  -	      .byte	%00011100	; WHIMSEY
    487  2950				  -	      .byte	%00011100	; WHIMSEY
    488  2950				  -	      .byte	%00011100	; WHIMSEY
    489  2950				  -
    490  2950				  -			;byte %00000000 ; WHIMSEY
    491  2950				  -
    492  2950				  -	      .byte	%00111100	; WHIMSEY
    493  2950				  -	      .byte	%01111110	; WHIMSEY
    494  2950				  -	      .byte	%01111110	; WHIMSEY
    495  2950				  -	      .byte	%01101110	; WHIMSEY
    496  2950				  -	      .byte	%00001110	; WHIMSEY
    497  2950				  -	      .byte	%01111100	; WHIMSEY
    498  2950				  -	      .byte	%01110000	; WHIMSEY
    499  2950				  -	      .byte	%01111110	; WHIMSEY
    500  2950				  -
    501  2950				  -			;byte %00000000 ; WHIMSEY
    502  2950				  -
    503  2950				  -	      .byte	%00111100	; WHIMSEY
    504  2950				  -	      .byte	%01111110	; WHIMSEY
    505  2950				  -	      .byte	%01111110	; WHIMSEY
    506  2950				  -	      .byte	%01110110	; WHIMSEY
    507  2950				  -	      .byte	%01110110	; WHIMSEY
    508  2950				  -	      .byte	%01111100	; WHIMSEY
    509  2950				  -	      .byte	%01110000	; WHIMSEY
    510  2950				  -	      .byte	%00111110	; WHIMSEY
    511  2950				  -
    512  2950				  -			;byte %00000000 ; WHIMSEY
    513  2950				  -
    514  2950				  -	      .byte	%01111000	; WHIMSEY
    515  2950				  -	      .byte	%01111000	; WHIMSEY
    516  2950				  -	      .byte	%01111000	; WHIMSEY
    517  2950				  -	      .byte	%00111100	; WHIMSEY
    518  2950				  -	      .byte	%00011100	; WHIMSEY
    519  2950				  -	      .byte	%00001110	; WHIMSEY
    520  2950				  -	      .byte	%00001110	; WHIMSEY
    521  2950				  -	      .byte	%01111110	; WHIMSEY
    522  2950				  -
    523  2950				  -			;byte %00000000 ; WHIMSEY
    524  2950				  -
    525  2950				  -	      .byte	%00111100	; WHIMSEY
    526  2950				  -	      .byte	%01111110	; WHIMSEY
    527  2950				  -	      .byte	%01111110	; WHIMSEY
    528  2950				  -	      .byte	%01110110	; WHIMSEY
    529  2950				  -	      .byte	%01110110	; WHIMSEY
    530  2950				  -	      .byte	%00111100	; WHIMSEY
    531  2950				  -	      .byte	%01110110	; WHIMSEY
    532  2950				  -	      .byte	%00111100	; WHIMSEY
    533  2950				  -
    534  2950				  -			;byte %00000000 ; WHIMSEY
    535  2950				  -
    536  2950				  -	      .byte	%00111100	; WHIMSEY
    537  2950				  -	      .byte	%01111110	; WHIMSEY
    538  2950				  -	      .byte	%01111110	; WHIMSEY
    539  2950				  -	      .byte	%01110110	; WHIMSEY
    540  2950				  -	      .byte	%00000110	; WHIMSEY
    541  2950				  -	      .byte	%00111110	; WHIMSEY
    542  2950				  -	      .byte	%01110110	; WHIMSEY
    543  2950				  -	      .byte	%00111100	; WHIMSEY
    544  2950				  -
    545  2950				  -	      ifconst	fontcharsHEX
    546  2950				  -
    547  2950				  -			;byte %00000000 ; WHIMSEY
    548  2950				  -
    549  2950				  -	      .byte	%01110110	; WHIMSEY
    550  2950				  -	      .byte	%01110110	; WHIMSEY
    551  2950				  -	      .byte	%01111110	; WHIMSEY
    552  2950				  -	      .byte	%01111110	; WHIMSEY
    553  2950				  -	      .byte	%01111110	; WHIMSEY
    554  2950				  -	      .byte	%01110110	; WHIMSEY
    555  2950				  -	      .byte	%01110110	; WHIMSEY
    556  2950				  -	      .byte	%00111100	; WHIMSEY
    557  2950				  -
    558  2950				  -			;byte %00000000 ; WHIMSEY
    559  2950				  -
    560  2950				  -	      .byte	%01111100	; WHIMSEY
    561  2950				  -	      .byte	%01111110	; WHIMSEY
    562  2950				  -	      .byte	%01111110	; WHIMSEY
    563  2950				  -	      .byte	%01110110	; WHIMSEY
    564  2950				  -	      .byte	%01110110	; WHIMSEY
    565  2950				  -	      .byte	%01111100	; WHIMSEY
    566  2950				  -	      .byte	%01110110	; WHIMSEY
    567  2950				  -	      .byte	%01111100	; WHIMSEY
    568  2950				  -
    569  2950				  -			;byte %00000000 ; WHIMSEY
    570  2950				  -
    571  2950				  -	      .byte	%00111100	; WHIMSEY
    572  2950				  -	      .byte	%01111110	; WHIMSEY
    573  2950				  -	      .byte	%01111110	; WHIMSEY
    574  2950				  -	      .byte	%01110110	; WHIMSEY
    575  2950				  -	      .byte	%01110000	; WHIMSEY
    576  2950				  -	      .byte	%01110000	; WHIMSEY
    577  2950				  -	      .byte	%01110110	; WHIMSEY
    578  2950				  -	      .byte	%00111100	; WHIMSEY
    579  2950				  -
    580  2950				  -			;byte %00000000 ; WHIMSEY
    581  2950				  -
    582  2950				  -	      .byte	%01111100	; WHIMSEY
    583  2950				  -	      .byte	%01111110	; WHIMSEY
    584  2950				  -	      .byte	%01111110	; WHIMSEY
    585  2950				  -	      .byte	%01111110	; WHIMSEY
    586  2950				  -	      .byte	%01110110	; WHIMSEY
    587  2950				  -	      .byte	%01110110	; WHIMSEY
    588  2950				  -	      .byte	%01110110	; WHIMSEY
    589  2950				  -	      .byte	%01111100	; WHIMSEY
    590  2950				  -
    591  2950				  -			;byte %00000000 ; WHIMSEY
    592  2950				  -
    593  2950				  -	      .byte	%01111110	; WHIMSEY
    594  2950				  -	      .byte	%01111110	; WHIMSEY
    595  2950				  -	      .byte	%01111110	; WHIMSEY
    596  2950				  -	      .byte	%01110000	; WHIMSEY
    597  2950				  -	      .byte	%01110000	; WHIMSEY
    598  2950				  -	      .byte	%01111100	; WHIMSEY
    599  2950				  -	      .byte	%01110000	; WHIMSEY
    600  2950				  -	      .byte	%01111100	; WHIMSEY
    601  2950				  -
    602  2950				  -			;byte %00000000 ; WHIMSEY
    603  2950				  -
    604  2950				  -	      .byte	%01110000	; WHIMSEY
    605  2950				  -	      .byte	%01110000	; WHIMSEY
    606  2950				  -	      .byte	%01110000	; WHIMSEY
    607  2950				  -	      .byte	%01110000	; WHIMSEY
    608  2950				  -	      .byte	%01110000	; WHIMSEY
    609  2950				  -	      .byte	%01111100	; WHIMSEY
    610  2950				  -	      .byte	%01110000	; WHIMSEY
    611  2950				  -	      .byte	%01111100	; WHIMSEY
    612  2950				  -
    613  2950				  -			;byte %00000000 ; WHIMSEY
    614  2950				  -			;byte %00000000 ; WHIMSEY
    615  2950				  -			;byte %00000000 ; WHIMSEY
    616  2950				  -			;byte %00000000 ; WHIMSEY
    617  2950				  -
    618  2950				  -	      endif		; fontcharsHEX
    619  2950					      endif		; WHIMSEY
    620  2950
    621  2950				  -	      if	fontstyle == ALARMCLOCK
    622  2950				  -
    623  2950				  -			;byte %00000000 ; ALARMCLOCK
    624  2950				  -
    625  2950				  -	      .byte	%00111100	; ALARMCLOCK
    626  2950				  -	      .byte	%01000010	; ALARMCLOCK
    627  2950				  -	      .byte	%01000010	; ALARMCLOCK
    628  2950				  -	      .byte	%01000010	; ALARMCLOCK
    629  2950				  -	      .byte	%00000000	; ALARMCLOCK
    630  2950				  -	      .byte	%01000010	; ALARMCLOCK
    631  2950				  -	      .byte	%01000010	; ALARMCLOCK
    632  2950				  -	      .byte	%00111100	; ALARMCLOCK
    633  2950				  -
    634  2950				  -			;byte %00000000 ; ALARMCLOCK
    635  2950				  -
    636  2950				  -	      .byte	%00000000	; ALARMCLOCK
    637  2950				  -	      .byte	%00000010	; ALARMCLOCK
    638  2950				  -	      .byte	%00000010	; ALARMCLOCK
    639  2950				  -	      .byte	%00000010	; ALARMCLOCK
    640  2950				  -	      .byte	%00000000	; ALARMCLOCK
    641  2950				  -	      .byte	%00000010	; ALARMCLOCK
    642  2950				  -	      .byte	%00000010	; ALARMCLOCK
    643  2950				  -	      .byte	%00000000	; ALARMCLOCK
    644  2950				  -
    645  2950				  -			;byte %00000000 ; ALARMCLOCK
    646  2950				  -
    647  2950				  -	      .byte	%00111100	; ALARMCLOCK
    648  2950				  -	      .byte	%01000000	; ALARMCLOCK
    649  2950				  -	      .byte	%01000000	; ALARMCLOCK
    650  2950				  -	      .byte	%01000000	; ALARMCLOCK
    651  2950				  -	      .byte	%00111100	; ALARMCLOCK
    652  2950				  -	      .byte	%00000010	; ALARMCLOCK
    653  2950				  -	      .byte	%00000010	; ALARMCLOCK
    654  2950				  -	      .byte	%00111100	; ALARMCLOCK
    655  2950				  -
    656  2950				  -			;byte %00000000 ; ALARMCLOCK
    657  2950				  -
    658  2950				  -	      .byte	%00111100	; ALARMCLOCK
    659  2950				  -	      .byte	%00000010	; ALARMCLOCK
    660  2950				  -	      .byte	%00000010	; ALARMCLOCK
    661  2950				  -	      .byte	%00000010	; ALARMCLOCK
    662  2950				  -	      .byte	%00111100	; ALARMCLOCK
    663  2950				  -	      .byte	%00000010	; ALARMCLOCK
    664  2950				  -	      .byte	%00000010	; ALARMCLOCK
    665  2950				  -	      .byte	%00111100	; ALARMCLOCK
    666  2950				  -
    667  2950				  -			;byte %00000000 ; ALARMCLOCK
    668  2950				  -
    669  2950				  -	      .byte	%00000000	; ALARMCLOCK
    670  2950				  -	      .byte	%00000010	; ALARMCLOCK
    671  2950				  -	      .byte	%00000010	; ALARMCLOCK
    672  2950				  -	      .byte	%00000010	; ALARMCLOCK
    673  2950				  -	      .byte	%00111100	; ALARMCLOCK
    674  2950				  -	      .byte	%01000010	; ALARMCLOCK
    675  2950				  -	      .byte	%01000010	; ALARMCLOCK
    676  2950				  -	      .byte	%00000000	; ALARMCLOCK
    677  2950				  -
    678  2950				  -			;byte %00000000 ; ALARMCLOCK
    679  2950				  -
    680  2950				  -	      .byte	%00111100	; ALARMCLOCK
    681  2950				  -	      .byte	%00000010	; ALARMCLOCK
    682  2950				  -	      .byte	%00000010	; ALARMCLOCK
    683  2950				  -	      .byte	%00000010	; ALARMCLOCK
    684  2950				  -	      .byte	%00111100	; ALARMCLOCK
    685  2950				  -	      .byte	%01000000	; ALARMCLOCK
    686  2950				  -	      .byte	%01000000	; ALARMCLOCK
    687  2950				  -	      .byte	%00111100	; ALARMCLOCK
    688  2950				  -
    689  2950				  -			;byte %00000000 ; ALARMCLOCK
    690  2950				  -
    691  2950				  -	      .byte	%00111100	; ALARMCLOCK
    692  2950				  -	      .byte	%01000010	; ALARMCLOCK
    693  2950				  -	      .byte	%01000010	; ALARMCLOCK
    694  2950				  -	      .byte	%01000010	; ALARMCLOCK
    695  2950				  -	      .byte	%00111100	; ALARMCLOCK
    696  2950				  -	      .byte	%01000000	; ALARMCLOCK
    697  2950				  -	      .byte	%01000000	; ALARMCLOCK
    698  2950				  -	      .byte	%00111100	; ALARMCLOCK
    699  2950				  -
    700  2950				  -			;byte %00000000 ; ALARMCLOCK
    701  2950				  -
    702  2950				  -	      .byte	%00000000	; ALARMCLOCK
    703  2950				  -	      .byte	%00000010	; ALARMCLOCK
    704  2950				  -	      .byte	%00000010	; ALARMCLOCK
    705  2950				  -	      .byte	%00000010	; ALARMCLOCK
    706  2950				  -	      .byte	%00000000	; ALARMCLOCK
    707  2950				  -	      .byte	%00000010	; ALARMCLOCK
    708  2950				  -	      .byte	%00000010	; ALARMCLOCK
    709  2950				  -	      .byte	%00111100	; ALARMCLOCK
    710  2950				  -
    711  2950				  -			;byte %00000000 ; ALARMCLOCK
    712  2950				  -
    713  2950				  -	      .byte	%00111100	; ALARMCLOCK
    714  2950				  -	      .byte	%01000010	; ALARMCLOCK
    715  2950				  -	      .byte	%01000010	; ALARMCLOCK
    716  2950				  -	      .byte	%01000010	; ALARMCLOCK
    717  2950				  -	      .byte	%00111100	; ALARMCLOCK
    718  2950				  -	      .byte	%01000010	; ALARMCLOCK
    719  2950				  -	      .byte	%01000010	; ALARMCLOCK
    720  2950				  -	      .byte	%00111100	; ALARMCLOCK
    721  2950				  -
    722  2950				  -			;byte %00000000 ; ALARMCLOCK
    723  2950				  -
    724  2950				  -	      .byte	%00111100	; ALARMCLOCK
    725  2950				  -	      .byte	%00000010	; ALARMCLOCK
    726  2950				  -	      .byte	%00000010	; ALARMCLOCK
    727  2950				  -	      .byte	%00000010	; ALARMCLOCK
    728  2950				  -	      .byte	%00111100	; ALARMCLOCK
    729  2950				  -	      .byte	%01000010	; ALARMCLOCK
    730  2950				  -	      .byte	%01000010	; ALARMCLOCK
    731  2950				  -	      .byte	%00111100	; ALARMCLOCK
    732  2950				  -
    733  2950				  -
    734  2950				  -	      ifconst	fontcharsHEX
    735  2950				  -			;byte %00000000 ; ALARMCLOCK
    736  2950				  -
    737  2950				  -
    738  2950				  -	      .byte	%00000000	; ALARMCLOCK
    739  2950				  -	      .byte	%01000010	; ALARMCLOCK
    740  2950				  -	      .byte	%01000010	; ALARMCLOCK
    741  2950				  -	      .byte	%01000010	; ALARMCLOCK
    742  2950				  -	      .byte	%00111100	; ALARMCLOCK
    743  2950				  -	      .byte	%01000010	; ALARMCLOCK
    744  2950				  -	      .byte	%01000010	; ALARMCLOCK
    745  2950				  -	      .byte	%00111100	; ALARMCLOCK
    746  2950				  -
    747  2950				  -			;byte %00000000 ; ALARMCLOCK
    748  2950				  -
    749  2950				  -	      .byte	%00111100	; ALARMCLOCK
    750  2950				  -	      .byte	%01000010	; ALARMCLOCK
    751  2950				  -	      .byte	%01000010	; ALARMCLOCK
    752  2950				  -	      .byte	%01000010	; ALARMCLOCK
    753  2950				  -	      .byte	%00111100	; ALARMCLOCK
    754  2950				  -	      .byte	%01000000	; ALARMCLOCK
    755  2950				  -	      .byte	%01000000	; ALARMCLOCK
    756  2950				  -	      .byte	%00000000	; ALARMCLOCK
    757  2950				  -
    758  2950				  -			;byte %00000000 ; ALARMCLOCK
    759  2950				  -
    760  2950				  -	      .byte	%00111100	; ALARMCLOCK
    761  2950				  -	      .byte	%01000000	; ALARMCLOCK
    762  2950				  -	      .byte	%01000000	; ALARMCLOCK
    763  2950				  -	      .byte	%01000000	; ALARMCLOCK
    764  2950				  -	      .byte	%00000000	; ALARMCLOCK
    765  2950				  -	      .byte	%01000000	; ALARMCLOCK
    766  2950				  -	      .byte	%01000000	; ALARMCLOCK
    767  2950				  -	      .byte	%00111100	; ALARMCLOCK
    768  2950				  -
    769  2950				  -			;byte %00000000 ; ALARMCLOCK
    770  2950				  -
    771  2950				  -	      .byte	%00111100	; ALARMCLOCK
    772  2950				  -	      .byte	%01000010	; ALARMCLOCK
    773  2950				  -	      .byte	%01000010	; ALARMCLOCK
    774  2950				  -	      .byte	%01000010	; ALARMCLOCK
    775  2950				  -	      .byte	%00111100	; ALARMCLOCK
    776  2950				  -	      .byte	%00000010	; ALARMCLOCK
    777  2950				  -	      .byte	%00000010	; ALARMCLOCK
    778  2950				  -	      .byte	%00000000	; ALARMCLOCK
    779  2950				  -
    780  2950				  -			;byte %00000000 ; ALARMCLOCK
    781  2950				  -
    782  2950				  -	      .byte	%00111100	; ALARMCLOCK
    783  2950				  -	      .byte	%01000000	; ALARMCLOCK
    784  2950				  -	      .byte	%01000000	; ALARMCLOCK
    785  2950				  -	      .byte	%01000000	; ALARMCLOCK
    786  2950				  -	      .byte	%00111100	; ALARMCLOCK
    787  2950				  -	      .byte	%01000000	; ALARMCLOCK
    788  2950				  -	      .byte	%01000000	; ALARMCLOCK
    789  2950				  -	      .byte	%00111100	; ALARMCLOCK
    790  2950				  -
    791  2950				  -			;byte %00000000 ; ALARMCLOCK
    792  2950				  -
    793  2950				  -	      .byte	%00000000	; ALARMCLOCK
    794  2950				  -	      .byte	%01000000	; ALARMCLOCK
    795  2950				  -	      .byte	%01000000	; ALARMCLOCK
    796  2950				  -	      .byte	%01000000	; ALARMCLOCK
    797  2950				  -	      .byte	%00111100	; ALARMCLOCK
    798  2950				  -	      .byte	%01000000	; ALARMCLOCK
    799  2950				  -	      .byte	%01000000	; ALARMCLOCK
    800  2950				  -	      .byte	%00111100	; ALARMCLOCK
    801  2950				  -
    802  2950				  -			;byte %00000000 ; ALARMCLOCK
    803  2950				  -			;byte %00000000 ; ALARMCLOCK
    804  2950				  -			;byte %00000000 ; ALARMCLOCK
    805  2950				  -			;byte %00000000 ; ALARMCLOCK
    806  2950				  -
    807  2950				  -	      endif		; fontcharsHEX
    808  2950					      endif		; ALARMCLOCK
    809  2950
    810  2950				  -	      if	fontstyle == HANDWRITTEN
    811  2950				  -
    812  2950				  -			;byte %00000000 ; HANDWRITTEN
    813  2950				  -
    814  2950				  -	      .byte	%00110000	; HANDWRITTEN
    815  2950				  -	      .byte	%01001000	; HANDWRITTEN
    816  2950				  -	      .byte	%01001000	; HANDWRITTEN
    817  2950				  -	      .byte	%01001000	; HANDWRITTEN
    818  2950				  -	      .byte	%00100100	; HANDWRITTEN
    819  2950				  -	      .byte	%00100100	; HANDWRITTEN
    820  2950				  -	      .byte	%00010010	; HANDWRITTEN
    821  2950				  -	      .byte	%00001100	; HANDWRITTEN
    822  2950				  -
    823  2950				  -			;byte %00000000 ; HANDWRITTEN
    824  2950				  -
    825  2950				  -	      .byte	%00010000	; HANDWRITTEN
    826  2950				  -	      .byte	%00010000	; HANDWRITTEN
    827  2950				  -	      .byte	%00010000	; HANDWRITTEN
    828  2950				  -	      .byte	%00001000	; HANDWRITTEN
    829  2950				  -	      .byte	%00001000	; HANDWRITTEN
    830  2950				  -	      .byte	%00001000	; HANDWRITTEN
    831  2950				  -	      .byte	%00000100	; HANDWRITTEN
    832  2950				  -	      .byte	%00000100	; HANDWRITTEN
    833  2950				  -
    834  2950				  -			;byte %00000000 ; HANDWRITTEN
    835  2950				  -
    836  2950				  -	      .byte	%01110000	; HANDWRITTEN
    837  2950				  -	      .byte	%01001100	; HANDWRITTEN
    838  2950				  -	      .byte	%01000000	; HANDWRITTEN
    839  2950				  -	      .byte	%00100000	; HANDWRITTEN
    840  2950				  -	      .byte	%00011000	; HANDWRITTEN
    841  2950				  -	      .byte	%00000100	; HANDWRITTEN
    842  2950				  -	      .byte	%00100010	; HANDWRITTEN
    843  2950				  -	      .byte	%00011100	; HANDWRITTEN
    844  2950				  -
    845  2950				  -			;byte %00000000 ; HANDWRITTEN
    846  2950				  -
    847  2950				  -	      .byte	%00110000	; HANDWRITTEN
    848  2950				  -	      .byte	%01001000	; HANDWRITTEN
    849  2950				  -	      .byte	%00000100	; HANDWRITTEN
    850  2950				  -	      .byte	%00000100	; HANDWRITTEN
    851  2950				  -	      .byte	%00011000	; HANDWRITTEN
    852  2950				  -	      .byte	%00000100	; HANDWRITTEN
    853  2950				  -	      .byte	%00100010	; HANDWRITTEN
    854  2950				  -	      .byte	%00011100	; HANDWRITTEN
    855  2950				  -
    856  2950				  -			;byte %00000000 ; HANDWRITTEN
    857  2950				  -
    858  2950				  -	      .byte	%00010000	; HANDWRITTEN
    859  2950				  -	      .byte	%00010000	; HANDWRITTEN
    860  2950				  -	      .byte	%00001000	; HANDWRITTEN
    861  2950				  -	      .byte	%01111000	; HANDWRITTEN
    862  2950				  -	      .byte	%01000100	; HANDWRITTEN
    863  2950				  -	      .byte	%00100100	; HANDWRITTEN
    864  2950				  -	      .byte	%00010010	; HANDWRITTEN
    865  2950				  -	      .byte	%00000010	; HANDWRITTEN
    866  2950				  -
    867  2950				  -			;byte %00000000 ; HANDWRITTEN
    868  2950				  -
    869  2950				  -	      .byte	%00110000	; HANDWRITTEN
    870  2950				  -	      .byte	%01001000	; HANDWRITTEN
    871  2950				  -	      .byte	%00000100	; HANDWRITTEN
    872  2950				  -	      .byte	%00000100	; HANDWRITTEN
    873  2950				  -	      .byte	%00011000	; HANDWRITTEN
    874  2950				  -	      .byte	%00100000	; HANDWRITTEN
    875  2950				  -	      .byte	%00010010	; HANDWRITTEN
    876  2950				  -	      .byte	%00001100	; HANDWRITTEN
    877  2950				  -
    878  2950				  -			;byte %00000000 ; HANDWRITTEN
    879  2950				  -
    880  2950				  -	      .byte	%00010000	; HANDWRITTEN
    881  2950				  -	      .byte	%00101000	; HANDWRITTEN
    882  2950				  -	      .byte	%00100100	; HANDWRITTEN
    883  2950				  -	      .byte	%00100100	; HANDWRITTEN
    884  2950				  -	      .byte	%00011000	; HANDWRITTEN
    885  2950				  -	      .byte	%00010000	; HANDWRITTEN
    886  2950				  -	      .byte	%00001000	; HANDWRITTEN
    887  2950				  -	      .byte	%00000110	; HANDWRITTEN
    888  2950				  -
    889  2950				  -			;byte %00000000 ; HANDWRITTEN
    890  2950				  -
    891  2950				  -	      .byte	%00010000	; HANDWRITTEN
    892  2950				  -	      .byte	%00010000	; HANDWRITTEN
    893  2950				  -	      .byte	%00010000	; HANDWRITTEN
    894  2950				  -	      .byte	%00001000	; HANDWRITTEN
    895  2950				  -	      .byte	%00000100	; HANDWRITTEN
    896  2950				  -	      .byte	%00000100	; HANDWRITTEN
    897  2950				  -	      .byte	%00110010	; HANDWRITTEN
    898  2950				  -	      .byte	%00001110	; HANDWRITTEN
    899  2950				  -
    900  2950				  -			;byte %00000000 ; HANDWRITTEN
    901  2950				  -
    902  2950				  -	      .byte	%00110000	; HANDWRITTEN
    903  2950				  -	      .byte	%01001000	; HANDWRITTEN
    904  2950				  -	      .byte	%01000100	; HANDWRITTEN
    905  2950				  -	      .byte	%00100100	; HANDWRITTEN
    906  2950				  -	      .byte	%00011100	; HANDWRITTEN
    907  2950				  -	      .byte	%00010010	; HANDWRITTEN
    908  2950				  -	      .byte	%00001010	; HANDWRITTEN
    909  2950				  -	      .byte	%00000110	; HANDWRITTEN
    910  2950				  -
    911  2950				  -			;byte %00000000 ; HANDWRITTEN
    912  2950				  -
    913  2950				  -	      .byte	%00010000	; HANDWRITTEN
    914  2950				  -	      .byte	%00010000	; HANDWRITTEN
    915  2950				  -	      .byte	%00001000	; HANDWRITTEN
    916  2950				  -	      .byte	%00001000	; HANDWRITTEN
    917  2950				  -	      .byte	%00011100	; HANDWRITTEN
    918  2950				  -	      .byte	%00100100	; HANDWRITTEN
    919  2950				  -	      .byte	%00010010	; HANDWRITTEN
    920  2950				  -	      .byte	%00001100	; HANDWRITTEN
    921  2950				  -
    922  2950				  -	      ifconst	fontcharsHEX
    923  2950				  -
    924  2950				  -			;byte %00000000 ; HANDWRITTEN
    925  2950				  -
    926  2950				  -	      .byte	%00110110	; HANDWRITTEN
    927  2950				  -	      .byte	%01001000	; HANDWRITTEN
    928  2950				  -	      .byte	%01001000	; HANDWRITTEN
    929  2950				  -	      .byte	%01001000	; HANDWRITTEN
    930  2950				  -	      .byte	%00100100	; HANDWRITTEN
    931  2950				  -	      .byte	%00100100	; HANDWRITTEN
    932  2950				  -	      .byte	%00010010	; HANDWRITTEN
    933  2950				  -	      .byte	%00001110	; HANDWRITTEN
    934  2950				  -
    935  2950				  -			;byte %00000000 ; HANDWRITTEN
    936  2950				  -
    937  2950				  -	      .byte	%11110000	; HANDWRITTEN
    938  2950				  -	      .byte	%01001000	; HANDWRITTEN
    939  2950				  -	      .byte	%01000100	; HANDWRITTEN
    940  2950				  -	      .byte	%00100100	; HANDWRITTEN
    941  2950				  -	      .byte	%00111100	; HANDWRITTEN
    942  2950				  -	      .byte	%00010010	; HANDWRITTEN
    943  2950				  -	      .byte	%00010010	; HANDWRITTEN
    944  2950				  -	      .byte	%00001100	; HANDWRITTEN
    945  2950				  -
    946  2950				  -			;byte %00000000 ; HANDWRITTEN
    947  2950				  -
    948  2950				  -	      .byte	%00110000	; HANDWRITTEN
    949  2950				  -	      .byte	%01001000	; HANDWRITTEN
    950  2950				  -	      .byte	%01001000	; HANDWRITTEN
    951  2950				  -	      .byte	%01000000	; HANDWRITTEN
    952  2950				  -	      .byte	%00100000	; HANDWRITTEN
    953  2950				  -	      .byte	%00100100	; HANDWRITTEN
    954  2950				  -	      .byte	%00010100	; HANDWRITTEN
    955  2950				  -	      .byte	%00001000	; HANDWRITTEN
    956  2950				  -
    957  2950				  -			;byte %00000000 ; HANDWRITTEN
    958  2950				  -
    959  2950				  -	      .byte	%01111000	; HANDWRITTEN
    960  2950				  -	      .byte	%01000100	; HANDWRITTEN
    961  2950				  -	      .byte	%01000100	; HANDWRITTEN
    962  2950				  -	      .byte	%00100100	; HANDWRITTEN
    963  2950				  -	      .byte	%00100010	; HANDWRITTEN
    964  2950				  -	      .byte	%00010010	; HANDWRITTEN
    965  2950				  -	      .byte	%00010010	; HANDWRITTEN
    966  2950				  -	      .byte	%00001100	; HANDWRITTEN
    967  2950				  -
    968  2950				  -			;byte %00000000 ; HANDWRITTEN
    969  2950				  -
    970  2950				  -	      .byte	%00110000	; HANDWRITTEN
    971  2950				  -	      .byte	%01001000	; HANDWRITTEN
    972  2950				  -	      .byte	%01000000	; HANDWRITTEN
    973  2950				  -	      .byte	%00100000	; HANDWRITTEN
    974  2950				  -	      .byte	%00011000	; HANDWRITTEN
    975  2950				  -	      .byte	%00010000	; HANDWRITTEN
    976  2950				  -	      .byte	%00010010	; HANDWRITTEN
    977  2950				  -	      .byte	%00001100	; HANDWRITTEN
    978  2950				  -
    979  2950				  -			;byte %00000000 ; HANDWRITTEN
    980  2950				  -
    981  2950				  -	      .byte	%01000000	; HANDWRITTEN
    982  2950				  -	      .byte	%01000000	; HANDWRITTEN
    983  2950				  -	      .byte	%01000000	; HANDWRITTEN
    984  2950				  -	      .byte	%00100000	; HANDWRITTEN
    985  2950				  -	      .byte	%00111000	; HANDWRITTEN
    986  2950				  -	      .byte	%00010000	; HANDWRITTEN
    987  2950				  -	      .byte	%00010010	; HANDWRITTEN
    988  2950				  -	      .byte	%00001100	; HANDWRITTEN
    989  2950				  -
    990  2950				  -			;byte %00000000 ; HANDWRITTEN
    991  2950				  -			;byte %00000000 ; HANDWRITTEN
    992  2950				  -			;byte %00000000 ; HANDWRITTEN
    993  2950				  -			;byte %00000000 ; HANDWRITTEN
    994  2950				  -
    995  2950				  -	      endif		; fontcharsHEX
    996  2950					      endif		; HANDWRITTEN
    997  2950
    998  2950				  -	      if	fontstyle == INTERRUPTED
    999  2950				  -
   1000  2950				  -			;byte %00000000 ; INTERRUPTED
   1001  2950				  -
   1002  2950				  -	      .byte	%00110100	; INTERRUPTED
   1003  2950				  -	      .byte	%01100110	; INTERRUPTED
   1004  2950				  -	      .byte	%01100110	; INTERRUPTED
   1005  2950				  -	      .byte	%01100110	; INTERRUPTED
   1006  2950				  -	      .byte	%01100110	; INTERRUPTED
   1007  2950				  -	      .byte	%01100110	; INTERRUPTED
   1008  2950				  -	      .byte	%01100110	; INTERRUPTED
   1009  2950				  -	      .byte	%00110100	; INTERRUPTED
   1010  2950				  -
   1011  2950				  -			;byte %00000000 ; INTERRUPTED
   1012  2950				  -
   1013  2950				  -	      .byte	%00111100	; INTERRUPTED
   1014  2950				  -	      .byte	%00000000	; INTERRUPTED
   1015  2950				  -	      .byte	%00011000	; INTERRUPTED
   1016  2950				  -	      .byte	%00011000	; INTERRUPTED
   1017  2950				  -	      .byte	%00011000	; INTERRUPTED
   1018  2950				  -	      .byte	%00011000	; INTERRUPTED
   1019  2950				  -	      .byte	%00011000	; INTERRUPTED
   1020  2950				  -	      .byte	%00111000	; INTERRUPTED
   1021  2950				  -
   1022  2950				  -			;byte %00000000 ; INTERRUPTED
   1023  2950				  -
   1024  2950				  -	      .byte	%01101110	; INTERRUPTED
   1025  2950				  -	      .byte	%01100000	; INTERRUPTED
   1026  2950				  -	      .byte	%00110000	; INTERRUPTED
   1027  2950				  -	      .byte	%00011000	; INTERRUPTED
   1028  2950				  -	      .byte	%00001100	; INTERRUPTED
   1029  2950				  -	      .byte	%00000110	; INTERRUPTED
   1030  2950				  -	      .byte	%01000110	; INTERRUPTED
   1031  2950				  -	      .byte	%00111100	; INTERRUPTED
   1032  2950				  -
   1033  2950				  -			;byte %00000000 ; INTERRUPTED
   1034  2950				  -
   1035  2950				  -	      .byte	%01111100	; INTERRUPTED
   1036  2950				  -	      .byte	%00000110	; INTERRUPTED
   1037  2950				  -	      .byte	%00000110	; INTERRUPTED
   1038  2950				  -	      .byte	%00000110	; INTERRUPTED
   1039  2950				  -	      .byte	%01110110	; INTERRUPTED
   1040  2950				  -	      .byte	%00000110	; INTERRUPTED
   1041  2950				  -	      .byte	%00000110	; INTERRUPTED
   1042  2950				  -	      .byte	%01110100	; INTERRUPTED
   1043  2950				  -
   1044  2950				  -			;byte %00000000 ; INTERRUPTED
   1045  2950				  -
   1046  2950				  -	      .byte	%00000110	; INTERRUPTED
   1047  2950				  -	      .byte	%00000110	; INTERRUPTED
   1048  2950				  -	      .byte	%00000110	; INTERRUPTED
   1049  2950				  -	      .byte	%00000110	; INTERRUPTED
   1050  2950				  -	      .byte	%01110110	; INTERRUPTED
   1051  2950				  -	      .byte	%01100110	; INTERRUPTED
   1052  2950				  -	      .byte	%01100110	; INTERRUPTED
   1053  2950				  -	      .byte	%01100110	; INTERRUPTED
   1054  2950				  -
   1055  2950				  -			;byte %00000000 ; INTERRUPTED
   1056  2950				  -
   1057  2950				  -	      .byte	%01111100	; INTERRUPTED
   1058  2950				  -	      .byte	%00000110	; INTERRUPTED
   1059  2950				  -	      .byte	%00000110	; INTERRUPTED
   1060  2950				  -	      .byte	%00000110	; INTERRUPTED
   1061  2950				  -	      .byte	%01111100	; INTERRUPTED
   1062  2950				  -	      .byte	%01100000	; INTERRUPTED
   1063  2950				  -	      .byte	%01100000	; INTERRUPTED
   1064  2950				  -	      .byte	%01101110	; INTERRUPTED
   1065  2950				  -
   1066  2950				  -			;byte %00000000 ; INTERRUPTED
   1067  2950				  -
   1068  2950				  -	      .byte	%00101100	; INTERRUPTED
   1069  2950				  -	      .byte	%01100110	; INTERRUPTED
   1070  2950				  -	      .byte	%01100110	; INTERRUPTED
   1071  2950				  -	      .byte	%01100110	; INTERRUPTED
   1072  2950				  -	      .byte	%01101100	; INTERRUPTED
   1073  2950				  -	      .byte	%01100000	; INTERRUPTED
   1074  2950				  -	      .byte	%00110000	; INTERRUPTED
   1075  2950				  -	      .byte	%00011100	; INTERRUPTED
   1076  2950				  -
   1077  2950				  -			;byte %00000000 ; INTERRUPTED
   1078  2950				  -
   1079  2950				  -	      .byte	%00011000	; INTERRUPTED
   1080  2950				  -	      .byte	%00011000	; INTERRUPTED
   1081  2950				  -	      .byte	%00011000	; INTERRUPTED
   1082  2950				  -	      .byte	%00011100	; INTERRUPTED
   1083  2950				  -	      .byte	%00001110	; INTERRUPTED
   1084  2950				  -	      .byte	%00000110	; INTERRUPTED
   1085  2950				  -	      .byte	%00000000	; INTERRUPTED
   1086  2950				  -	      .byte	%01111110	; INTERRUPTED
   1087  2950				  -
   1088  2950				  -			;byte %00000000 ; INTERRUPTED
   1089  2950				  -
   1090  2950				  -	      .byte	%00110100	; INTERRUPTED
   1091  2950				  -	      .byte	%01100110	; INTERRUPTED
   1092  2950				  -	      .byte	%01100110	; INTERRUPTED
   1093  2950				  -	      .byte	%01100110	; INTERRUPTED
   1094  2950				  -	      .byte	%00110100	; INTERRUPTED
   1095  2950				  -	      .byte	%01100110	; INTERRUPTED
   1096  2950				  -	      .byte	%01100110	; INTERRUPTED
   1097  2950				  -	      .byte	%00110100	; INTERRUPTED
   1098  2950				  -
   1099  2950				  -			;byte %00000000 ; INTERRUPTED
   1100  2950				  -
   1101  2950				  -	      .byte	%00111000	; INTERRUPTED
   1102  2950				  -	      .byte	%00001100	; INTERRUPTED
   1103  2950				  -	      .byte	%00000110	; INTERRUPTED
   1104  2950				  -	      .byte	%00110110	; INTERRUPTED
   1105  2950				  -	      .byte	%01100110	; INTERRUPTED
   1106  2950				  -	      .byte	%01100110	; INTERRUPTED
   1107  2950				  -	      .byte	%01100110	; INTERRUPTED
   1108  2950				  -	      .byte	%00110100	; INTERRUPTED
   1109  2950				  -
   1110  2950				  -	      ifconst	fontcharsHEX
   1111  2950				  -
   1112  2950				  -			;byte %00000000 ; INTERRUPTED
   1113  2950				  -
   1114  2950				  -	      .byte	%01100110	; INTERRUPTED
   1115  2950				  -	      .byte	%01100110	; INTERRUPTED
   1116  2950				  -	      .byte	%01100110	; INTERRUPTED
   1117  2950				  -	      .byte	%01100110	; INTERRUPTED
   1118  2950				  -	      .byte	%01110110	; INTERRUPTED
   1119  2950				  -	      .byte	%01100110	; INTERRUPTED
   1120  2950				  -	      .byte	%01100110	; INTERRUPTED
   1121  2950				  -	      .byte	%00111100	; INTERRUPTED
   1122  2950				  -
   1123  2950				  -			;byte %00000000 ; INTERRUPTED
   1124  2950				  -
   1125  2950				  -	      .byte	%01110100	; INTERRUPTED
   1126  2950				  -	      .byte	%01100110	; INTERRUPTED
   1127  2950				  -	      .byte	%01100110	; INTERRUPTED
   1128  2950				  -	      .byte	%01100110	; INTERRUPTED
   1129  2950				  -	      .byte	%01110100	; INTERRUPTED
   1130  2950				  -	      .byte	%01100110	; INTERRUPTED
   1131  2950				  -	      .byte	%01100110	; INTERRUPTED
   1132  2950				  -	      .byte	%01110100	; INTERRUPTED
   1133  2950				  -
   1134  2950				  -			;byte %00000000 ; INTERRUPTED
   1135  2950				  -
   1136  2950				  -	      .byte	%00101100	; INTERRUPTED
   1137  2950				  -	      .byte	%01100110	; INTERRUPTED
   1138  2950				  -	      .byte	%01100000	; INTERRUPTED
   1139  2950				  -	      .byte	%01100000	; INTERRUPTED
   1140  2950				  -	      .byte	%01100000	; INTERRUPTED
   1141  2950				  -	      .byte	%01100000	; INTERRUPTED
   1142  2950				  -	      .byte	%01100110	; INTERRUPTED
   1143  2950				  -	      .byte	%00101100	; INTERRUPTED
   1144  2950				  -
   1145  2950				  -			;byte %00000000 ; INTERRUPTED
   1146  2950				  -
   1147  2950				  -	      .byte	%01111100	; INTERRUPTED
   1148  2950				  -	      .byte	%01100110	; INTERRUPTED
   1149  2950				  -	      .byte	%01100110	; INTERRUPTED
   1150  2950				  -	      .byte	%01100110	; INTERRUPTED
   1151  2950				  -	      .byte	%01100110	; INTERRUPTED
   1152  2950				  -	      .byte	%01100110	; INTERRUPTED
   1153  2950				  -	      .byte	%01100110	; INTERRUPTED
   1154  2950				  -	      .byte	%01101100	; INTERRUPTED
   1155  2950				  -
   1156  2950				  -			;byte %00000000 ; INTERRUPTED
   1157  2950				  -
   1158  2950				  -	      .byte	%01111110	; INTERRUPTED
   1159  2950				  -	      .byte	%01100000	; INTERRUPTED
   1160  2950				  -	      .byte	%01100000	; INTERRUPTED
   1161  2950				  -	      .byte	%01100000	; INTERRUPTED
   1162  2950				  -	      .byte	%01101110	; INTERRUPTED
   1163  2950				  -	      .byte	%01100000	; INTERRUPTED
   1164  2950				  -	      .byte	%01100000	; INTERRUPTED
   1165  2950				  -	      .byte	%01101110	; INTERRUPTED
   1166  2950				  -
   1167  2950				  -			;byte %00000000 ; INTERRUPTED
   1168  2950				  -
   1169  2950				  -	      .byte	%01100000	; INTERRUPTED
   1170  2950				  -	      .byte	%01100000	; INTERRUPTED
   1171  2950				  -	      .byte	%01100000	; INTERRUPTED
   1172  2950				  -	      .byte	%01100000	; INTERRUPTED
   1173  2950				  -	      .byte	%01101110	; INTERRUPTED
   1174  2950				  -	      .byte	%01100000	; INTERRUPTED
   1175  2950				  -	      .byte	%01100000	; INTERRUPTED
   1176  2950				  -	      .byte	%01101110	; INTERRUPTED
   1177  2950				  -
   1178  2950				  -			;byte %00000000 ; INTERRUPTED
   1179  2950				  -			;byte %00000000 ; INTERRUPTED
   1180  2950				  -			;byte %00000000 ; INTERRUPTED
   1181  2950				  -			;byte %00000000 ; INTERRUPTED
   1182  2950				  -
   1183  2950				  -	      endif		; fontcharsHEX
   1184  2950					      endif		; INTERRUPTED
   1185  2950
   1186  2950
   1187  2950				  -	      if	fontstyle == TINY
   1188  2950				  -
   1189  2950				  -			;byte %00000000 ; TINY
   1190  2950				  -
   1191  2950				  -	      .byte	%00000000	; TINY
   1192  2950				  -	      .byte	%00111000	; TINY
   1193  2950				  -	      .byte	%00101000	; TINY
   1194  2950				  -	      .byte	%00101000	; TINY
   1195  2950				  -	      .byte	%00101000	; TINY
   1196  2950				  -	      .byte	%00111000	; TINY
   1197  2950				  -	      .byte	%00000000	; TINY
   1198  2950				  -	      .byte	%00000000	; TINY
   1199  2950				  -
   1200  2950				  -			;byte %00000000 ; TINY
   1201  2950				  -
   1202  2950				  -	      .byte	%00000000	; TINY
   1203  2950				  -	      .byte	%00010000	; TINY
   1204  2950				  -	      .byte	%00010000	; TINY
   1205  2950				  -	      .byte	%00010000	; TINY
   1206  2950				  -	      .byte	%00010000	; TINY
   1207  2950				  -	      .byte	%00010000	; TINY
   1208  2950				  -	      .byte	%00000000	; TINY
   1209  2950				  -	      .byte	%00000000	; TINY
   1210  2950				  -
   1211  2950				  -			;byte %00000000 ; TINY
   1212  2950				  -
   1213  2950				  -	      .byte	%00000000	; TINY
   1214  2950				  -	      .byte	%00111000	; TINY
   1215  2950				  -	      .byte	%00100000	; TINY
   1216  2950				  -	      .byte	%00111000	; TINY
   1217  2950				  -	      .byte	%00001000	; TINY
   1218  2950				  -	      .byte	%00111000	; TINY
   1219  2950				  -	      .byte	%00000000	; TINY
   1220  2950				  -	      .byte	%00000000	; TINY
   1221  2950				  -
   1222  2950				  -			;byte %00000000 ; TINY
   1223  2950				  -
   1224  2950				  -	      .byte	%00000000	; TINY
   1225  2950				  -	      .byte	%00111000	; TINY
   1226  2950				  -	      .byte	%00001000	; TINY
   1227  2950				  -	      .byte	%00111000	; TINY
   1228  2950				  -	      .byte	%00001000	; TINY
   1229  2950				  -	      .byte	%00111000	; TINY
   1230  2950				  -	      .byte	%00000000	; TINY
   1231  2950				  -	      .byte	%00000000	; TINY
   1232  2950				  -
   1233  2950				  -			;byte %00000000 ; TINY
   1234  2950				  -
   1235  2950				  -	      .byte	%00000000	; TINY
   1236  2950				  -	      .byte	%00001000	; TINY
   1237  2950				  -	      .byte	%00001000	; TINY
   1238  2950				  -	      .byte	%00111000	; TINY
   1239  2950				  -	      .byte	%00101000	; TINY
   1240  2950				  -	      .byte	%00101000	; TINY
   1241  2950				  -	      .byte	%00000000	; TINY
   1242  2950				  -	      .byte	%00000000	; TINY
   1243  2950				  -
   1244  2950				  -			;byte %00000000 ; TINY
   1245  2950				  -
   1246  2950				  -	      .byte	%00000000	; TINY
   1247  2950				  -	      .byte	%00111000	; TINY
   1248  2950				  -	      .byte	%00001000	; TINY
   1249  2950				  -	      .byte	%00111000	; TINY
   1250  2950				  -	      .byte	%00100000	; TINY
   1251  2950				  -	      .byte	%00111000	; TINY
   1252  2950				  -	      .byte	%00000000	; TINY
   1253  2950				  -	      .byte	%00000000	; TINY
   1254  2950				  -
   1255  2950				  -			;byte %00000000 ; TINY
   1256  2950				  -
   1257  2950				  -	      .byte	%00000000	; TINY
   1258  2950				  -	      .byte	%00111000	; TINY
   1259  2950				  -	      .byte	%00101000	; TINY
   1260  2950				  -	      .byte	%00111000	; TINY
   1261  2950				  -	      .byte	%00100000	; TINY
   1262  2950				  -	      .byte	%00111000	; TINY
   1263  2950				  -	      .byte	%00000000	; TINY
   1264  2950				  -	      .byte	%00000000	; TINY
   1265  2950				  -
   1266  2950				  -			;byte %00000000 ; TINY
   1267  2950				  -
   1268  2950				  -	      .byte	%00000000	; TINY
   1269  2950				  -	      .byte	%00001000	; TINY
   1270  2950				  -	      .byte	%00001000	; TINY
   1271  2950				  -	      .byte	%00001000	; TINY
   1272  2950				  -	      .byte	%00001000	; TINY
   1273  2950				  -	      .byte	%00111000	; TINY
   1274  2950				  -	      .byte	%00000000	; TINY
   1275  2950				  -	      .byte	%00000000	; TINY
   1276  2950				  -
   1277  2950				  -			;byte %00000000 ; TINY
   1278  2950				  -
   1279  2950				  -	      .byte	%00000000	; TINY
   1280  2950				  -	      .byte	%00111000	; TINY
   1281  2950				  -	      .byte	%00101000	; TINY
   1282  2950				  -	      .byte	%00111000	; TINY
   1283  2950				  -	      .byte	%00101000	; TINY
   1284  2950				  -	      .byte	%00111000	; TINY
   1285  2950				  -	      .byte	%00000000	; TINY
   1286  2950				  -	      .byte	%00000000	; TINY
   1287  2950				  -
   1288  2950				  -			;byte %00000000 ; TINY
   1289  2950				  -
   1290  2950				  -	      .byte	%00000000	; TINY
   1291  2950				  -	      .byte	%00001000	; TINY
   1292  2950				  -	      .byte	%00001000	; TINY
   1293  2950				  -	      .byte	%00111000	; TINY
   1294  2950				  -	      .byte	%00101000	; TINY
   1295  2950				  -	      .byte	%00111000	; TINY
   1296  2950				  -	      .byte	%00000000	; TINY
   1297  2950				  -	      .byte	%00000000	; TINY
   1298  2950				  -
   1299  2950				  -	      ifconst	fontcharsHEX
   1300  2950				  -
   1301  2950				  -			;byte %00000000 ; TINY
   1302  2950				  -
   1303  2950				  -	      .byte	%00000000	; TINY
   1304  2950				  -	      .byte	%00101000	; TINY
   1305  2950				  -	      .byte	%00101000	; TINY
   1306  2950				  -	      .byte	%00111000	; TINY
   1307  2950				  -	      .byte	%00101000	; TINY
   1308  2950				  -	      .byte	%00111000	; TINY
   1309  2950				  -	      .byte	%00000000	; TINY
   1310  2950				  -	      .byte	%00000000	; TINY
   1311  2950				  -
   1312  2950				  -			;byte %00000000 ; TINY
   1313  2950				  -
   1314  2950				  -	      .byte	%00000000	; TINY
   1315  2950				  -	      .byte	%00110000	; TINY
   1316  2950				  -	      .byte	%00101000	; TINY
   1317  2950				  -	      .byte	%00110000	; TINY
   1318  2950				  -	      .byte	%00101000	; TINY
   1319  2950				  -	      .byte	%00110000	; TINY
   1320  2950				  -	      .byte	%00000000	; TINY
   1321  2950				  -	      .byte	%00000000	; TINY
   1322  2950				  -
   1323  2950				  -			;byte %00000000 ; TINY
   1324  2950				  -
   1325  2950				  -	      .byte	%00000000	; TINY
   1326  2950				  -	      .byte	%00111000	; TINY
   1327  2950				  -	      .byte	%00100000	; TINY
   1328  2950				  -	      .byte	%00100000	; TINY
   1329  2950				  -	      .byte	%00100000	; TINY
   1330  2950				  -	      .byte	%00111000	; TINY
   1331  2950				  -	      .byte	%00000000	; TINY
   1332  2950				  -	      .byte	%00000000	; TINY
   1333  2950				  -
   1334  2950				  -			;byte %00000000 ; TINY
   1335  2950				  -
   1336  2950				  -	      .byte	%00000000	; TINY
   1337  2950				  -	      .byte	%00110000	; TINY
   1338  2950				  -	      .byte	%00101000	; TINY
   1339  2950				  -	      .byte	%00101000	; TINY
   1340  2950				  -	      .byte	%00101000	; TINY
   1341  2950				  -	      .byte	%00110000	; TINY
   1342  2950				  -	      .byte	%00000000	; TINY
   1343  2950				  -	      .byte	%00000000	; TINY
   1344  2950				  -
   1345  2950				  -			;byte %00000000 ; TINY
   1346  2950				  -
   1347  2950				  -	      .byte	%00000000	; TINY
   1348  2950				  -	      .byte	%00111000	; TINY
   1349  2950				  -	      .byte	%00100000	; TINY
   1350  2950				  -	      .byte	%00111000	; TINY
   1351  2950				  -	      .byte	%00100000	; TINY
   1352  2950				  -	      .byte	%00111000	; TINY
   1353  2950				  -	      .byte	%00000000	; TINY
   1354  2950				  -	      .byte	%00000000	; TINY
   1355  2950				  -
   1356  2950				  -			;byte %00000000 ; TINY
   1357  2950				  -
   1358  2950				  -	      .byte	%00000000	; TINY
   1359  2950				  -	      .byte	%00100000	; TINY
   1360  2950				  -	      .byte	%00100000	; TINY
   1361  2950				  -	      .byte	%00111000	; TINY
   1362  2950				  -	      .byte	%00100000	; TINY
   1363  2950				  -	      .byte	%00111000	; TINY
   1364  2950				  -	      .byte	%00000000	; TINY
   1365  2950				  -	      .byte	%00000000	; TINY
   1366  2950				  -
   1367  2950				  -			;byte %00000000 ; TINY
   1368  2950				  -			;byte %00000000 ; TINY
   1369  2950				  -			;byte %00000000 ; TINY
   1370  2950				  -			;byte %00000000 ; TINY
   1371  2950				  -
   1372  2950				  -	      endif		; fontcharsHEX
   1373  2950					      endif		; TINY
   1374  2950
   1375  2950				  -	      if	fontstyle == RETROPUTER
   1376  2950				  -
   1377  2950				  -			;byte %00000000 ; RETROPUTER
   1378  2950				  -
   1379  2950				  -	      .byte	%01111110	; RETROPUTER
   1380  2950				  -	      .byte	%01000110	; RETROPUTER
   1381  2950				  -	      .byte	%01000110	; RETROPUTER
   1382  2950				  -	      .byte	%01000110	; RETROPUTER
   1383  2950				  -	      .byte	%01100010	; RETROPUTER
   1384  2950				  -	      .byte	%01100010	; RETROPUTER
   1385  2950				  -	      .byte	%01100010	; RETROPUTER
   1386  2950				  -	      .byte	%01111110	; RETROPUTER
   1387  2950				  -
   1388  2950				  -			;byte %00000000 ; RETROPUTER
   1389  2950				  -
   1390  2950				  -	      .byte	%00111000	; RETROPUTER
   1391  2950				  -	      .byte	%00111000	; RETROPUTER
   1392  2950				  -	      .byte	%00111000	; RETROPUTER
   1393  2950				  -	      .byte	%00111000	; RETROPUTER
   1394  2950				  -	      .byte	%00011000	; RETROPUTER
   1395  2950				  -	      .byte	%00011000	; RETROPUTER
   1396  2950				  -	      .byte	%00011000	; RETROPUTER
   1397  2950				  -	      .byte	%00011000	; RETROPUTER
   1398  2950				  -
   1399  2950				  -			;byte %00000000 ; RETROPUTER
   1400  2950				  -
   1401  2950				  -	      .byte	%01111110	; RETROPUTER
   1402  2950				  -	      .byte	%01100000	; RETROPUTER
   1403  2950				  -	      .byte	%01100000	; RETROPUTER
   1404  2950				  -	      .byte	%01100000	; RETROPUTER
   1405  2950				  -	      .byte	%00111110	; RETROPUTER
   1406  2950				  -	      .byte	%00000010	; RETROPUTER
   1407  2950				  -	      .byte	%01000010	; RETROPUTER
   1408  2950				  -	      .byte	%01111110	; RETROPUTER
   1409  2950				  -
   1410  2950				  -			;byte %00000000 ; RETROPUTER
   1411  2950				  -
   1412  2950				  -	      .byte	%01111110	; RETROPUTER
   1413  2950				  -	      .byte	%01000110	; RETROPUTER
   1414  2950				  -	      .byte	%00000110	; RETROPUTER
   1415  2950				  -	      .byte	%00000110	; RETROPUTER
   1416  2950				  -	      .byte	%00111110	; RETROPUTER
   1417  2950				  -	      .byte	%00000010	; RETROPUTER
   1418  2950				  -	      .byte	%01000010	; RETROPUTER
   1419  2950				  -	      .byte	%01111110	; RETROPUTER
   1420  2950				  -
   1421  2950				  -			;byte %00000000 ; RETROPUTER
   1422  2950				  -
   1423  2950				  -	      .byte	%00001100	; RETROPUTER
   1424  2950				  -	      .byte	%00001100	; RETROPUTER
   1425  2950				  -	      .byte	%00001100	; RETROPUTER
   1426  2950				  -	      .byte	%01111110	; RETROPUTER
   1427  2950				  -	      .byte	%01000100	; RETROPUTER
   1428  2950				  -	      .byte	%01000100	; RETROPUTER
   1429  2950				  -	      .byte	%01000100	; RETROPUTER
   1430  2950				  -	      .byte	%00000100	; RETROPUTER
   1431  2950				  -
   1432  2950				  -			;byte %00000000 ; RETROPUTER
   1433  2950				  -
   1434  2950				  -	      .byte	%01111110	; RETROPUTER
   1435  2950				  -	      .byte	%01000110	; RETROPUTER
   1436  2950				  -	      .byte	%00000110	; RETROPUTER
   1437  2950				  -	      .byte	%00000110	; RETROPUTER
   1438  2950				  -	      .byte	%01111100	; RETROPUTER
   1439  2950				  -	      .byte	%01000000	; RETROPUTER
   1440  2950				  -	      .byte	%01000000	; RETROPUTER
   1441  2950				  -	      .byte	%01111110	; RETROPUTER
   1442  2950				  -
   1443  2950				  -			;byte %00000000 ; RETROPUTER
   1444  2950				  -
   1445  2950				  -	      .byte	%01111110	; RETROPUTER
   1446  2950				  -	      .byte	%01000110	; RETROPUTER
   1447  2950				  -	      .byte	%01000110	; RETROPUTER
   1448  2950				  -	      .byte	%01000110	; RETROPUTER
   1449  2950				  -	      .byte	%01111100	; RETROPUTER
   1450  2950				  -	      .byte	%01000000	; RETROPUTER
   1451  2950				  -	      .byte	%01000010	; RETROPUTER
   1452  2950				  -	      .byte	%01111110	; RETROPUTER
   1453  2950				  -
   1454  2950				  -			;byte %00000000 ; RETROPUTER
   1455  2950				  -
   1456  2950				  -	      .byte	%00001100	; RETROPUTER
   1457  2950				  -	      .byte	%00001100	; RETROPUTER
   1458  2950				  -	      .byte	%00001100	; RETROPUTER
   1459  2950				  -	      .byte	%00001100	; RETROPUTER
   1460  2950				  -	      .byte	%00000100	; RETROPUTER
   1461  2950				  -	      .byte	%00000010	; RETROPUTER
   1462  2950				  -	      .byte	%01000010	; RETROPUTER
   1463  2950				  -	      .byte	%01111110	; RETROPUTER
   1464  2950				  -
   1465  2950				  -			;byte %00000000 ; RETROPUTER
   1466  2950				  -
   1467  2950				  -	      .byte	%01111110	; RETROPUTER
   1468  2950				  -	      .byte	%01000110	; RETROPUTER
   1469  2950				  -	      .byte	%01000110	; RETROPUTER
   1470  2950				  -	      .byte	%01000110	; RETROPUTER
   1471  2950				  -	      .byte	%01111110	; RETROPUTER
   1472  2950				  -	      .byte	%01000010	; RETROPUTER
   1473  2950				  -	      .byte	%01000010	; RETROPUTER
   1474  2950				  -	      .byte	%01111110	; RETROPUTER
   1475  2950				  -
   1476  2950				  -			;byte %00000000 ; RETROPUTER
   1477  2950				  -
   1478  2950				  -	      .byte	%00000110	; RETROPUTER
   1479  2950				  -	      .byte	%00000110	; RETROPUTER
   1480  2950				  -	      .byte	%00000110	; RETROPUTER
   1481  2950				  -	      .byte	%00000010	; RETROPUTER
   1482  2950				  -	      .byte	%01111110	; RETROPUTER
   1483  2950				  -	      .byte	%01000010	; RETROPUTER
   1484  2950				  -	      .byte	%01000010	; RETROPUTER
   1485  2950				  -	      .byte	%01111110	; RETROPUTER
   1486  2950				  -
   1487  2950				  -	      ifconst	fontcharsHEX
   1488  2950				  -
   1489  2950				  -			;byte %00000000  ; RETROPUTER
   1490  2950				  -
   1491  2950				  -	      .byte	%01100010	; RETROPUTER
   1492  2950				  -	      .byte	%01100010	; RETROPUTER
   1493  2950				  -	      .byte	%01100010	; RETROPUTER
   1494  2950				  -	      .byte	%01000010	; RETROPUTER
   1495  2950				  -	      .byte	%01111110	; RETROPUTER
   1496  2950				  -	      .byte	%01000010	; RETROPUTER
   1497  2950				  -	      .byte	%01000010	; RETROPUTER
   1498  2950				  -	      .byte	%01111110	; RETROPUTER
   1499  2950				  -
   1500  2950				  -			;byte %00000000 ; RETROPUTER
   1501  2950				  -
   1502  2950				  -	      .byte	%01111110	; RETROPUTER
   1503  2950				  -	      .byte	%01100010	; RETROPUTER
   1504  2950				  -	      .byte	%01100010	; RETROPUTER
   1505  2950				  -	      .byte	%01000010	; RETROPUTER
   1506  2950				  -	      .byte	%01111100	; RETROPUTER
   1507  2950				  -	      .byte	%01000010	; RETROPUTER
   1508  2950				  -	      .byte	%01000010	; RETROPUTER
   1509  2950				  -	      .byte	%01111110	; RETROPUTER
   1510  2950				  -
   1511  2950				  -			;byte %00000000 ; RETROPUTER
   1512  2950				  -
   1513  2950				  -	      .byte	%01111110	; RETROPUTER
   1514  2950				  -	      .byte	%01100010	; RETROPUTER
   1515  2950				  -	      .byte	%01100010	; RETROPUTER
   1516  2950				  -	      .byte	%01100000	; RETROPUTER
   1517  2950				  -	      .byte	%01000000	; RETROPUTER
   1518  2950				  -	      .byte	%01000000	; RETROPUTER
   1519  2950				  -	      .byte	%01000010	; RETROPUTER
   1520  2950				  -	      .byte	%01111110	; RETROPUTER
   1521  2950				  -
   1522  2950				  -			;byte %00000000 ; RETROPUTER
   1523  2950				  -
   1524  2950				  -	      .byte	%01111100	; RETROPUTER
   1525  2950				  -	      .byte	%01100010	; RETROPUTER
   1526  2950				  -	      .byte	%01100010	; RETROPUTER
   1527  2950				  -	      .byte	%01100010	; RETROPUTER
   1528  2950				  -	      .byte	%01000010	; RETROPUTER
   1529  2950				  -	      .byte	%01000010	; RETROPUTER
   1530  2950				  -	      .byte	%01000010	; RETROPUTER
   1531  2950				  -	      .byte	%01111100	; RETROPUTER
   1532  2950				  -
   1533  2950				  -			;byte %00000000 ; RETROPUTER
   1534  2950				  -
   1535  2950				  -	      .byte	%01111110	; RETROPUTER
   1536  2950				  -	      .byte	%01100010	; RETROPUTER
   1537  2950				  -	      .byte	%01100000	; RETROPUTER
   1538  2950				  -	      .byte	%01000000	; RETROPUTER
   1539  2950				  -	      .byte	%01111100	; RETROPUTER
   1540  2950				  -	      .byte	%01000000	; RETROPUTER
   1541  2950				  -	      .byte	%01000010	; RETROPUTER
   1542  2950				  -	      .byte	%01111110	; RETROPUTER
   1543  2950				  -
   1544  2950				  -			;byte %00000000 ; RETROPUTER
   1545  2950				  -
   1546  2950				  -	      .byte	%01100000	; RETROPUTER
   1547  2950				  -	      .byte	%01100000	; RETROPUTER
   1548  2950				  -	      .byte	%01100000	; RETROPUTER
   1549  2950				  -	      .byte	%01000000	; RETROPUTER
   1550  2950				  -	      .byte	%01111100	; RETROPUTER
   1551  2950				  -	      .byte	%01000000	; RETROPUTER
   1552  2950				  -	      .byte	%01000010	; RETROPUTER
   1553  2950				  -	      .byte	%01111110	; RETROPUTER
   1554  2950				  -
   1555  2950				  -			;byte %00000000 ; RETROPUTER
   1556  2950				  -			;byte %00000000 ; RETROPUTER
   1557  2950				  -			;byte %00000000 ; RETROPUTER
   1558  2950				  -			;byte %00000000 ; RETROPUTER
   1559  2950				  -
   1560  2950				  -	      endif		; fontcharsHEX
   1561  2950					      endif		; RETROPUTER
   1562  2950
   1563  2950				  -	      if	fontstyle == CURVES
   1564  2950				  -
   1565  2950				  -			;byte %00000000 ; CURVES
   1566  2950				  -
   1567  2950				  -	      .byte	%00111100	; CURVES
   1568  2950				  -	      .byte	%01111110	; CURVES
   1569  2950				  -	      .byte	%01100110	; CURVES
   1570  2950				  -	      .byte	%01100110	; CURVES
   1571  2950				  -	      .byte	%01100110	; CURVES
   1572  2950				  -	      .byte	%01100110	; CURVES
   1573  2950				  -	      .byte	%01111110	; CURVES
   1574  2950				  -	      .byte	%00111100	; CURVES
   1575  2950				  -
   1576  2950				  -			;byte %00000000 ; CURVES
   1577  2950				  -
   1578  2950				  -	      .byte	%00011000	; CURVES
   1579  2950				  -	      .byte	%00011000	; CURVES
   1580  2950				  -	      .byte	%00011000	; CURVES
   1581  2950				  -	      .byte	%00011000	; CURVES
   1582  2950				  -	      .byte	%00011000	; CURVES
   1583  2950				  -	      .byte	%00011000	; CURVES
   1584  2950				  -	      .byte	%01111000	; CURVES
   1585  2950				  -	      .byte	%01110000	; CURVES
   1586  2950				  -
   1587  2950				  -			;byte %00000000 ; CURVES
   1588  2950				  -
   1589  2950				  -	      .byte	%01111110	; CURVES
   1590  2950				  -	      .byte	%01111110	; CURVES
   1591  2950				  -	      .byte	%01100000	; CURVES
   1592  2950				  -	      .byte	%01111100	; CURVES
   1593  2950				  -	      .byte	%00111110	; CURVES
   1594  2950				  -	      .byte	%00000110	; CURVES
   1595  2950				  -	      .byte	%01111110	; CURVES
   1596  2950				  -	      .byte	%01111100	; CURVES
   1597  2950				  -
   1598  2950				  -			;byte %00000000 ; CURVES
   1599  2950				  -
   1600  2950				  -	      .byte	%01111100	; CURVES
   1601  2950				  -	      .byte	%01111110	; CURVES
   1602  2950				  -	      .byte	%00001110	; CURVES
   1603  2950				  -	      .byte	%00111100	; CURVES
   1604  2950				  -	      .byte	%00111100	; CURVES
   1605  2950				  -	      .byte	%00001110	; CURVES
   1606  2950				  -	      .byte	%01111110	; CURVES
   1607  2950				  -	      .byte	%01111100	; CURVES
   1608  2950				  -
   1609  2950				  -			;byte %00000000 ; CURVES
   1610  2950				  -
   1611  2950				  -	      .byte	%00000110	; CURVES
   1612  2950				  -	      .byte	%00000110	; CURVES
   1613  2950				  -	      .byte	%00111110	; CURVES
   1614  2950				  -	      .byte	%01111110	; CURVES
   1615  2950				  -	      .byte	%01100110	; CURVES
   1616  2950				  -	      .byte	%01100110	; CURVES
   1617  2950				  -	      .byte	%01100110	; CURVES
   1618  2950				  -	      .byte	%01100110	; CURVES
   1619  2950				  -
   1620  2950				  -			;byte %00000000 ; CURVES
   1621  2950				  -
   1622  2950				  -	      .byte	%01111100	; CURVES
   1623  2950				  -	      .byte	%01111110	; CURVES
   1624  2950				  -	      .byte	%00000110	; CURVES
   1625  2950				  -	      .byte	%01111110	; CURVES
   1626  2950				  -	      .byte	%01111100	; CURVES
   1627  2950				  -	      .byte	%01100000	; CURVES
   1628  2950				  -	      .byte	%01111110	; CURVES
   1629  2950				  -	      .byte	%01111110	; CURVES
   1630  2950				  -
   1631  2950				  -			;byte %00000000 ; CURVES
   1632  2950				  -
   1633  2950				  -	      .byte	%00111100	; CURVES
   1634  2950				  -	      .byte	%01111110	; CURVES
   1635  2950				  -	      .byte	%01100110	; CURVES
   1636  2950				  -	      .byte	%01111110	; CURVES
   1637  2950				  -	      .byte	%01111100	; CURVES
   1638  2950				  -	      .byte	%01100000	; CURVES
   1639  2950				  -	      .byte	%01111110	; CURVES
   1640  2950				  -	      .byte	%00111110	; CURVES
   1641  2950				  -
   1642  2950				  -			;byte %00000000 ; CURVES
   1643  2950				  -
   1644  2950				  -	      .byte	%00000110	; CURVES
   1645  2950				  -	      .byte	%00000110	; CURVES
   1646  2950				  -	      .byte	%00000110	; CURVES
   1647  2950				  -	      .byte	%00000110	; CURVES
   1648  2950				  -	      .byte	%00000110	; CURVES
   1649  2950				  -	      .byte	%01100110	; CURVES
   1650  2950				  -	      .byte	%01111110	; CURVES
   1651  2950				  -	      .byte	%00111100	; CURVES
   1652  2950				  -
   1653  2950				  -			;byte %00000000 ; CURVES
   1654  2950				  -
   1655  2950				  -	      .byte	%00111100	; CURVES
   1656  2950				  -	      .byte	%01111110	; CURVES
   1657  2950				  -	      .byte	%01100110	; CURVES
   1658  2950				  -	      .byte	%01111110	; CURVES
   1659  2950				  -	      .byte	%00111100	; CURVES
   1660  2950				  -	      .byte	%01100110	; CURVES
   1661  2950				  -	      .byte	%01111110	; CURVES
   1662  2950				  -	      .byte	%00111100	; CURVES
   1663  2950				  -
   1664  2950				  -			;byte %00000000 ; CURVES
   1665  2950				  -
   1666  2950				  -	      .byte	%01111100	; CURVES
   1667  2950				  -	      .byte	%01111110	; CURVES
   1668  2950				  -	      .byte	%00000110	; CURVES
   1669  2950				  -	      .byte	%00111110	; CURVES
   1670  2950				  -	      .byte	%01111110	; CURVES
   1671  2950				  -	      .byte	%01100110	; CURVES
   1672  2950				  -	      .byte	%01111110	; CURVES
   1673  2950				  -	      .byte	%00111100	; CURVES
   1674  2950				  -
   1675  2950				  -	      ifconst	fontcharsHEX
   1676  2950				  -
   1677  2950				  -			;byte %00000000 ; CURVES
   1678  2950				  -
   1679  2950				  -	      .byte	%01100110	; CURVES
   1680  2950				  -	      .byte	%01100110	; CURVES
   1681  2950				  -	      .byte	%01111110	; CURVES
   1682  2950				  -	      .byte	%01111110	; CURVES
   1683  2950				  -	      .byte	%01100110	; CURVES
   1684  2950				  -	      .byte	%01100110	; CURVES
   1685  2950				  -	      .byte	%01111110	; CURVES
   1686  2950				  -	      .byte	%00111100	; CURVES
   1687  2950				  -
   1688  2950				  -			;byte %00000000 ; CURVES
   1689  2950				  -
   1690  2950				  -	      .byte	%01111100	; CURVES
   1691  2950				  -	      .byte	%01111110	; CURVES
   1692  2950				  -	      .byte	%01100110	; CURVES
   1693  2950				  -	      .byte	%01111110	; CURVES
   1694  2950				  -	      .byte	%01111100	; CURVES
   1695  2950				  -	      .byte	%01100110	; CURVES
   1696  2950				  -	      .byte	%01111110	; CURVES
   1697  2950				  -	      .byte	%01111100	; CURVES
   1698  2950				  -
   1699  2950				  -			;byte %00000000 ; CURVES
   1700  2950				  -
   1701  2950				  -	      .byte	%00111110	; CURVES
   1702  2950				  -	      .byte	%01111110	; CURVES
   1703  2950				  -	      .byte	%01100000	; CURVES
   1704  2950				  -	      .byte	%01100000	; CURVES
   1705  2950				  -	      .byte	%01100000	; CURVES
   1706  2950				  -	      .byte	%01100000	; CURVES
   1707  2950				  -	      .byte	%01111110	; CURVES
   1708  2950				  -	      .byte	%00111110	; CURVES
   1709  2950				  -
   1710  2950				  -			;byte %00000000 ; CURVES
   1711  2950				  -
   1712  2950				  -	      .byte	%01111100	; CURVES
   1713  2950				  -	      .byte	%01111110	; CURVES
   1714  2950				  -	      .byte	%01100110	; CURVES
   1715  2950				  -	      .byte	%01100110	; CURVES
   1716  2950				  -	      .byte	%01100110	; CURVES
   1717  2950				  -	      .byte	%01100110	; CURVES
   1718  2950				  -	      .byte	%01111110	; CURVES
   1719  2950				  -	      .byte	%01111100	; CURVES
   1720  2950				  -
   1721  2950				  -			;byte %00000000 ; CURVES
   1722  2950				  -
   1723  2950				  -	      .byte	%00111110	; CURVES
   1724  2950				  -	      .byte	%01111110	; CURVES
   1725  2950				  -	      .byte	%01100000	; CURVES
   1726  2950				  -	      .byte	%01111100	; CURVES
   1727  2950				  -	      .byte	%01111100	; CURVES
   1728  2950				  -	      .byte	%01100000	; CURVES
   1729  2950				  -	      .byte	%01111110	; CURVES
   1730  2950				  -	      .byte	%00111110	; CURVES
   1731  2950				  -
   1732  2950				  -			;byte %00000000 ; CURVES
   1733  2950				  -
   1734  2950				  -	      .byte	%01100000	; CURVES
   1735  2950				  -	      .byte	%01100000	; CURVES
   1736  2950				  -	      .byte	%01100000	; CURVES
   1737  2950				  -	      .byte	%01111100	; CURVES
   1738  2950				  -	      .byte	%01111100	; CURVES
   1739  2950				  -	      .byte	%01100000	; CURVES
   1740  2950				  -	      .byte	%01111110	; CURVES
   1741  2950				  -	      .byte	%00111110	; CURVES
   1742  2950				  -
   1743  2950				  -			;byte %00000000 ; CURVES
   1744  2950				  -			;byte %00000000 ; CURVES
   1745  2950				  -			;byte %00000000 ; CURVES
   1746  2950				  -			;byte %00000000 ; CURVES
   1747  2950				  -
   1748  2950				  -	      endif		; fontcharsHEX 
   1749  2950					      endif		; CURVES
   1750  2950
   1751  2950
   1752  2950				  -	      if	fontstyle == HUSKY
   1753  2950				  -
   1754  2950				  -			;byte %00000000 ; HUSKY
   1755  2950				  -
   1756  2950				  -	      .byte	%01111100	; HUSKY
   1757  2950				  -	      .byte	%11111110	; HUSKY
   1758  2950				  -	      .byte	%11101110	; HUSKY
   1759  2950				  -	      .byte	%11101110	; HUSKY
   1760  2950				  -	      .byte	%11101110	; HUSKY
   1761  2950				  -	      .byte	%11101110	; HUSKY
   1762  2950				  -	      .byte	%11111110	; HUSKY
   1763  2950				  -	      .byte	%01111100	; HUSKY
   1764  2950				  -
   1765  2950				  -			;byte %00000000 ; HUSKY
   1766  2950				  -
   1767  2950				  -	      .byte	%00111000	; HUSKY
   1768  2950				  -	      .byte	%00111000	; HUSKY
   1769  2950				  -	      .byte	%00111000	; HUSKY
   1770  2950				  -	      .byte	%00111000	; HUSKY
   1771  2950				  -	      .byte	%00111000	; HUSKY
   1772  2950				  -	      .byte	%00111000	; HUSKY
   1773  2950				  -	      .byte	%00111000	; HUSKY
   1774  2950				  -	      .byte	%00111000	; HUSKY
   1775  2950				  -
   1776  2950				  -			;byte %00000000 ; HUSKY
   1777  2950				  -
   1778  2950				  -	      .byte	%11111110	; HUSKY
   1779  2950				  -	      .byte	%11111110	; HUSKY
   1780  2950				  -	      .byte	%11100000	; HUSKY
   1781  2950				  -	      .byte	%11111100	; HUSKY
   1782  2950				  -	      .byte	%01111110	; HUSKY
   1783  2950				  -	      .byte	%00001110	; HUSKY
   1784  2950				  -	      .byte	%11111110	; HUSKY
   1785  2950				  -	      .byte	%11111100	; HUSKY
   1786  2950				  -
   1787  2950				  -			;byte %00000000 ; HUSKY
   1788  2950				  -
   1789  2950				  -	      .byte	%11111100	; HUSKY
   1790  2950				  -	      .byte	%11111110	; HUSKY
   1791  2950				  -	      .byte	%00001110	; HUSKY
   1792  2950				  -	      .byte	%11111100	; HUSKY
   1793  2950				  -	      .byte	%11111100	; HUSKY
   1794  2950				  -	      .byte	%00001110	; HUSKY
   1795  2950				  -	      .byte	%11111110	; HUSKY
   1796  2950				  -	      .byte	%11111100	; HUSKY
   1797  2950				  -
   1798  2950				  -			;byte %00000000 ; HUSKY
   1799  2950				  -
   1800  2950				  -	      .byte	%00011100	; HUSKY
   1801  2950				  -	      .byte	%00011100	; HUSKY
   1802  2950				  -	      .byte	%11111110	; HUSKY
   1803  2950				  -	      .byte	%11111110	; HUSKY
   1804  2950				  -	      .byte	%11011100	; HUSKY
   1805  2950				  -	      .byte	%11011100	; HUSKY
   1806  2950				  -	      .byte	%00011100	; HUSKY
   1807  2950				  -	      .byte	%00011100	; HUSKY
   1808  2950				  -
   1809  2950				  -			;byte %00000000 ; HUSKY
   1810  2950				  -
   1811  2950				  -	      .byte	%11111100	; HUSKY
   1812  2950				  -	      .byte	%11111110	; HUSKY
   1813  2950				  -	      .byte	%00001110	; HUSKY
   1814  2950				  -	      .byte	%11111110	; HUSKY
   1815  2950				  -	      .byte	%11111100	; HUSKY
   1816  2950				  -	      .byte	%11100000	; HUSKY
   1817  2950				  -	      .byte	%11111110	; HUSKY
   1818  2950				  -	      .byte	%11111110	; HUSKY
   1819  2950				  -
   1820  2950				  -			;byte %00000000 ; HUSKY
   1821  2950				  -
   1822  2950				  -	      .byte	%01111100	; HUSKY
   1823  2950				  -	      .byte	%11111110	; HUSKY
   1824  2950				  -	      .byte	%11101110	; HUSKY
   1825  2950				  -	      .byte	%11111110	; HUSKY
   1826  2950				  -	      .byte	%11111100	; HUSKY
   1827  2950				  -	      .byte	%11100000	; HUSKY
   1828  2950				  -	      .byte	%11111110	; HUSKY
   1829  2950				  -	      .byte	%01111110	; HUSKY
   1830  2950				  -
   1831  2950				  -			;byte %00000000 ; HUSKY
   1832  2950				  -
   1833  2950				  -	      .byte	%00111000	; HUSKY
   1834  2950				  -	      .byte	%00111000	; HUSKY
   1835  2950				  -	      .byte	%00111000	; HUSKY
   1836  2950				  -	      .byte	%00111000	; HUSKY
   1837  2950				  -	      .byte	%00011100	; HUSKY
   1838  2950				  -	      .byte	%00001110	; HUSKY
   1839  2950				  -	      .byte	%11111110	; HUSKY
   1840  2950				  -	      .byte	%11111110	; HUSKY
   1841  2950				  -
   1842  2950				  -			;byte %00000000 ; HUSKY
   1843  2950				  -
   1844  2950				  -	      .byte	%01111100	; HUSKY
   1845  2950				  -	      .byte	%11111110	; HUSKY
   1846  2950				  -	      .byte	%11101110	; HUSKY
   1847  2950				  -	      .byte	%11111110	; HUSKY
   1848  2950				  -	      .byte	%01111100	; HUSKY
   1849  2950				  -	      .byte	%11101110	; HUSKY
   1850  2950				  -	      .byte	%11111110	; HUSKY
   1851  2950				  -	      .byte	%01111100	; HUSKY
   1852  2950				  -
   1853  2950				  -			;byte %00000000 ; HUSKY
   1854  2950				  -
   1855  2950				  -	      .byte	%11111100	; HUSKY
   1856  2950				  -	      .byte	%11111110	; HUSKY
   1857  2950				  -	      .byte	%00001110	; HUSKY
   1858  2950				  -	      .byte	%01111110	; HUSKY
   1859  2950				  -	      .byte	%11111110	; HUSKY
   1860  2950				  -	      .byte	%11101110	; HUSKY
   1861  2950				  -	      .byte	%11111110	; HUSKY
   1862  2950				  -	      .byte	%01111100	; HUSKY
   1863  2950				  -
   1864  2950				  -	      ifconst	fontcharsHEX
   1865  2950				  -
   1866  2950				  -			;byte %00000000 ; HUSKY
   1867  2950				  -
   1868  2950				  -	      .byte	%11101110	; HUSKY
   1869  2950				  -	      .byte	%11101110	; HUSKY
   1870  2950				  -	      .byte	%11111110	; HUSKY
   1871  2950				  -	      .byte	%11111110	; HUSKY
   1872  2950				  -	      .byte	%11101110	; HUSKY
   1873  2950				  -	      .byte	%11111110	; HUSKY
   1874  2950				  -	      .byte	%01111100	; HUSKY
   1875  2950				  -	      .byte	%00111000	; HUSKY
   1876  2950				  -
   1877  2950				  -			;byte %00000000 ; HUSKY
   1878  2950				  -
   1879  2950				  -	      .byte	%11111100	; HUSKY
   1880  2950				  -	      .byte	%11111110	; HUSKY
   1881  2950				  -	      .byte	%11101110	; HUSKY
   1882  2950				  -	      .byte	%11111110	; HUSKY
   1883  2950				  -	      .byte	%11111100	; HUSKY
   1884  2950				  -	      .byte	%11101110	; HUSKY
   1885  2950				  -	      .byte	%11111110	; HUSKY
   1886  2950				  -	      .byte	%11111100	; HUSKY
   1887  2950				  -
   1888  2950				  -			;byte %00000000 ; HUSKY
   1889  2950				  -
   1890  2950				  -	      .byte	%01111110	; HUSKY
   1891  2950				  -	      .byte	%11111110	; HUSKY
   1892  2950				  -	      .byte	%11110000	; HUSKY
   1893  2950				  -	      .byte	%11100000	; HUSKY
   1894  2950				  -	      .byte	%11100000	; HUSKY
   1895  2950				  -	      .byte	%11110000	; HUSKY
   1896  2950				  -	      .byte	%11111110	; HUSKY
   1897  2950				  -	      .byte	%01111110	; HUSKY
   1898  2950				  -
   1899  2950				  -			;byte %00000000 ; HUSKY
   1900  2950				  -
   1901  2950				  -	      .byte	%11111000	; HUSKY
   1902  2950				  -	      .byte	%11111100	; HUSKY
   1903  2950				  -	      .byte	%11111110	; HUSKY
   1904  2950				  -	      .byte	%11101110	; HUSKY
   1905  2950				  -	      .byte	%11101110	; HUSKY
   1906  2950				  -	      .byte	%11111110	; HUSKY
   1907  2950				  -	      .byte	%11111100	; HUSKY
   1908  2950				  -	      .byte	%11111000	; HUSKY
   1909  2950				  -
   1910  2950				  -			;byte %00000000 ; HUSKY
   1911  2950				  -
   1912  2950				  -	      .byte	%11111110	; HUSKY
   1913  2950				  -	      .byte	%11111110	; HUSKY
   1914  2950				  -	      .byte	%11100000	; HUSKY
   1915  2950				  -	      .byte	%11111110	; HUSKY
   1916  2950				  -	      .byte	%11111110	; HUSKY
   1917  2950				  -	      .byte	%11100000	; HUSKY
   1918  2950				  -	      .byte	%11111110	; HUSKY
   1919  2950				  -	      .byte	%11111110	; HUSKY
   1920  2950				  -
   1921  2950				  -			;byte %00000000 ; HUSKY
   1922  2950				  -
   1923  2950				  -	      .byte	%11100000	; HUSKY
   1924  2950				  -	      .byte	%11100000	; HUSKY
   1925  2950				  -	      .byte	%11100000	; HUSKY
   1926  2950				  -	      .byte	%11111110	; HUSKY
   1927  2950				  -	      .byte	%11111110	; HUSKY
   1928  2950				  -	      .byte	%11100000	; HUSKY
   1929  2950				  -	      .byte	%11111110	; HUSKY
   1930  2950				  -	      .byte	%11111110	; HUSKY
   1931  2950				  -
   1932  2950				  -			;byte %00000000 ; HUSKY
   1933  2950				  -			;byte %00000000 ; HUSKY
   1934  2950				  -			;byte %00000000 ; HUSKY
   1935  2950				  -			;byte %00000000 ; HUSKY
   1936  2950				  -
   1937  2950				  -	      endif		; fontcharsHEX 
   1938  2950					      endif		; HUSKY
   1939  2950
   1940  2950
   1941  2950				  -	      if	fontstyle == SNAKE
   1942  2950				  -
   1943  2950				  -			;byte %00000000 ; SNAKE
   1944  2950				  -
   1945  2950				  -	      .byte	%01111110	; SNAKE
   1946  2950				  -	      .byte	%01000010	; SNAKE
   1947  2950				  -	      .byte	%01000010	; SNAKE
   1948  2950				  -	      .byte	%01000010	; SNAKE
   1949  2950				  -	      .byte	%01000010	; SNAKE
   1950  2950				  -	      .byte	%01000010	; SNAKE
   1951  2950				  -	      .byte	%01000010	; SNAKE
   1952  2950				  -	      .byte	%01111110	; SNAKE
   1953  2950				  -
   1954  2950				  -			;byte %00000000 ; SNAKE
   1955  2950				  -
   1956  2950				  -	      .byte	%00111000	; SNAKE
   1957  2950				  -	      .byte	%00101000	; SNAKE
   1958  2950				  -	      .byte	%00001000	; SNAKE
   1959  2950				  -	      .byte	%00001000	; SNAKE
   1960  2950				  -	      .byte	%00001000	; SNAKE
   1961  2950				  -	      .byte	%00001000	; SNAKE
   1962  2950				  -	      .byte	%00001000	; SNAKE
   1963  2950				  -	      .byte	%00111000	; SNAKE
   1964  2950				  -
   1965  2950				  -			;byte %00000000 ; SNAKE
   1966  2950				  -
   1967  2950				  -	      .byte	%01111110	; SNAKE
   1968  2950				  -	      .byte	%01000010	; SNAKE
   1969  2950				  -	      .byte	%01000110	; SNAKE
   1970  2950				  -	      .byte	%01000000	; SNAKE
   1971  2950				  -	      .byte	%01111110	; SNAKE
   1972  2950				  -	      .byte	%00000010	; SNAKE
   1973  2950				  -	      .byte	%01000010	; SNAKE
   1974  2950				  -	      .byte	%01111110	; SNAKE
   1975  2950				  -
   1976  2950				  -			;byte %00000000 ; SNAKE
   1977  2950				  -
   1978  2950				  -	      .byte	%01111110	; SNAKE
   1979  2950				  -	      .byte	%01000010	; SNAKE
   1980  2950				  -	      .byte	%01100010	; SNAKE
   1981  2950				  -	      .byte	%00000010	; SNAKE
   1982  2950				  -	      .byte	%01111110	; SNAKE
   1983  2950				  -	      .byte	%00000010	; SNAKE
   1984  2950				  -	      .byte	%01000010	; SNAKE
   1985  2950				  -	      .byte	%01111110	; SNAKE
   1986  2950				  -
   1987  2950				  -			;byte %00000000 ; SNAKE
   1988  2950				  -
   1989  2950				  -	      .byte	%00001110	; SNAKE
   1990  2950				  -	      .byte	%00001010	; SNAKE
   1991  2950				  -	      .byte	%00000010	; SNAKE
   1992  2950				  -	      .byte	%01111110	; SNAKE
   1993  2950				  -	      .byte	%01000010	; SNAKE
   1994  2950				  -	      .byte	%01000010	; SNAKE
   1995  2950				  -	      .byte	%01000010	; SNAKE
   1996  2950				  -	      .byte	%01100110	; SNAKE
   1997  2950				  -
   1998  2950				  -			;byte %00000000 ; SNAKE
   1999  2950				  -
   2000  2950				  -	      .byte	%01111110	; SNAKE
   2001  2950				  -	      .byte	%01000010	; SNAKE
   2002  2950				  -	      .byte	%01100010	; SNAKE
   2003  2950				  -	      .byte	%00000010	; SNAKE
   2004  2950				  -	      .byte	%01111110	; SNAKE
   2005  2950				  -	      .byte	%01000000	; SNAKE
   2006  2950				  -	      .byte	%01000010	; SNAKE
   2007  2950				  -	      .byte	%01111110	; SNAKE
   2008  2950				  -
   2009  2950				  -			;byte %00000000 ; SNAKE
   2010  2950				  -
   2011  2950				  -	      .byte	%01111110	; SNAKE
   2012  2950				  -	      .byte	%01000010	; SNAKE
   2013  2950				  -	      .byte	%01000010	; SNAKE
   2014  2950				  -	      .byte	%01111110	; SNAKE
   2015  2950				  -	      .byte	%01000000	; SNAKE
   2016  2950				  -	      .byte	%01000110	; SNAKE
   2017  2950				  -	      .byte	%01000010	; SNAKE
   2018  2950				  -	      .byte	%01111110	; SNAKE
   2019  2950				  -
   2020  2950				  -			;byte %00000000 ; SNAKE
   2021  2950				  -
   2022  2950				  -	      .byte	%00000110	; SNAKE
   2023  2950				  -	      .byte	%00000010	; SNAKE
   2024  2950				  -	      .byte	%00000010	; SNAKE
   2025  2950				  -	      .byte	%00000010	; SNAKE
   2026  2950				  -	      .byte	%00000010	; SNAKE
   2027  2950				  -	      .byte	%01100010	; SNAKE
   2028  2950				  -	      .byte	%01000010	; SNAKE
   2029  2950				  -	      .byte	%01111110	; SNAKE
   2030  2950				  -
   2031  2950				  -			;byte %00000000 ; SNAKE
   2032  2950				  -
   2033  2950				  -	      .byte	%01111110	; SNAKE
   2034  2950				  -	      .byte	%01000010	; SNAKE
   2035  2950				  -	      .byte	%01000010	; SNAKE
   2036  2950				  -	      .byte	%01000010	; SNAKE
   2037  2950				  -	      .byte	%01111110	; SNAKE
   2038  2950				  -	      .byte	%01000010	; SNAKE
   2039  2950				  -	      .byte	%01000010	; SNAKE
   2040  2950				  -	      .byte	%01111110	; SNAKE
   2041  2950				  -
   2042  2950				  -			;byte %00000000 ; SNAKE
   2043  2950				  -
   2044  2950				  -	      .byte	%00001110	; SNAKE
   2045  2950				  -	      .byte	%00001010	; SNAKE
   2046  2950				  -	      .byte	%00000010	; SNAKE
   2047  2950				  -	      .byte	%00000010	; SNAKE
   2048  2950				  -	      .byte	%01111110	; SNAKE
   2049  2950				  -	      .byte	%01000010	; SNAKE
   2050  2950				  -	      .byte	%01000010	; SNAKE
   2051  2950				  -	      .byte	%01111110	; SNAKE
   2052  2950				  -
   2053  2950				  -
   2054  2950				  -	      ifconst	fontcharsHEX
   2055  2950				  -
   2056  2950				  -			;byte %00000000 ; SNAKE
   2057  2950				  -
   2058  2950				  -	      .byte	%01100110	; SNAKE
   2059  2950				  -	      .byte	%01000010	; SNAKE
   2060  2950				  -	      .byte	%01000010	; SNAKE
   2061  2950				  -	      .byte	%01000010	; SNAKE
   2062  2950				  -	      .byte	%01111110	; SNAKE
   2063  2950				  -	      .byte	%01000010	; SNAKE
   2064  2950				  -	      .byte	%01000010	; SNAKE
   2065  2950				  -	      .byte	%01111110	; SNAKE
   2066  2950				  -
   2067  2950				  -			;byte %00000000 ; SNAKE
   2068  2950				  -
   2069  2950				  -	      .byte	%01111110	; SNAKE
   2070  2950				  -	      .byte	%01000010	; SNAKE
   2071  2950				  -	      .byte	%01000010	; SNAKE
   2072  2950				  -	      .byte	%01000110	; SNAKE
   2073  2950				  -	      .byte	%01111100	; SNAKE
   2074  2950				  -	      .byte	%01000110	; SNAKE
   2075  2950				  -	      .byte	%01000010	; SNAKE
   2076  2950				  -	      .byte	%01111110	; SNAKE
   2077  2950				  -
   2078  2950				  -			;byte %00000000 ; SNAKE
   2079  2950				  -
   2080  2950				  -	      .byte	%01111110	; SNAKE
   2081  2950				  -	      .byte	%01000010	; SNAKE
   2082  2950				  -	      .byte	%01000110	; SNAKE
   2083  2950				  -	      .byte	%01000000	; SNAKE
   2084  2950				  -	      .byte	%01000000	; SNAKE
   2085  2950				  -	      .byte	%01000110	; SNAKE
   2086  2950				  -	      .byte	%01000010	; SNAKE
   2087  2950				  -	      .byte	%01111110	; SNAKE
   2088  2950				  -
   2089  2950				  -			;byte %00000000 ; SNAKE
   2090  2950				  -
   2091  2950				  -	      .byte	%01111100	; SNAKE
   2092  2950				  -	      .byte	%01000110	; SNAKE
   2093  2950				  -	      .byte	%01000010	; SNAKE
   2094  2950				  -	      .byte	%01000010	; SNAKE
   2095  2950				  -	      .byte	%01000010	; SNAKE
   2096  2950				  -	      .byte	%01000010	; SNAKE
   2097  2950				  -	      .byte	%01000110	; SNAKE
   2098  2950				  -	      .byte	%01111100	; SNAKE
   2099  2950				  -
   2100  2950				  -			;byte %00000000 ; SNAKE
   2101  2950				  -
   2102  2950				  -	      .byte	%01111110	; SNAKE
   2103  2950				  -	      .byte	%01000010	; SNAKE
   2104  2950				  -	      .byte	%01000110	; SNAKE
   2105  2950				  -	      .byte	%01000000	; SNAKE
   2106  2950				  -	      .byte	%01111000	; SNAKE
   2107  2950				  -	      .byte	%01000000	; SNAKE
   2108  2950				  -	      .byte	%01000010	; SNAKE
   2109  2950				  -	      .byte	%01111110	; SNAKE
   2110  2950				  -
   2111  2950				  -			;byte %00000000 ; SNAKE
   2112  2950				  -
   2113  2950				  -	      .byte	%01000000	; SNAKE
   2114  2950				  -	      .byte	%01000000	; SNAKE
   2115  2950				  -	      .byte	%01000000	; SNAKE
   2116  2950				  -	      .byte	%01000000	; SNAKE
   2117  2950				  -	      .byte	%01111000	; SNAKE
   2118  2950				  -	      .byte	%01000000	; SNAKE
   2119  2950				  -	      .byte	%01000010	; SNAKE
   2120  2950				  -	      .byte	%01111110	; SNAKE
   2121  2950				  -
   2122  2950				  -			;byte %00000000 ; SNAKE
   2123  2950				  -			;byte %00000000 ; SNAKE
   2124  2950				  -			;byte %00000000 ; SNAKE
   2125  2950				  -			;byte %00000000 ; SNAKE
   2126  2950				  -
   2127  2950				  -	      endif		; fontcharsHEX 
   2128  2950					      endif		; SNAKE
   2129  2950
   2130  2950				  -	      if	fontstyle == PLOK
   2131  2950				  -
   2132  2950				  -			;byte %00000000 ; PLOK
   2133  2950				  -
   2134  2950				  -	      .byte	%00000000	; PLOK
   2135  2950				  -	      .byte	%00111000	; PLOK
   2136  2950				  -	      .byte	%01100100	; PLOK
   2137  2950				  -	      .byte	%01100010	; PLOK
   2138  2950				  -	      .byte	%01100010	; PLOK
   2139  2950				  -	      .byte	%00110110	; PLOK
   2140  2950				  -	      .byte	%00011100	; PLOK
   2141  2950				  -	      .byte	%00000000	; PLOK
   2142  2950				  -
   2143  2950				  -			;byte %00000000 ; PLOK
   2144  2950				  -
   2145  2950				  -	      .byte	%00000000	; PLOK
   2146  2950				  -	      .byte	%00010000	; PLOK
   2147  2950				  -	      .byte	%00011100	; PLOK
   2148  2950				  -	      .byte	%00011100	; PLOK
   2149  2950				  -	      .byte	%00011000	; PLOK
   2150  2950				  -	      .byte	%00111000	; PLOK
   2151  2950				  -	      .byte	%00011000	; PLOK
   2152  2950				  -	      .byte	%00000000	; PLOK
   2153  2950				  -
   2154  2950				  -			;byte %00000000 ; PLOK
   2155  2950				  -
   2156  2950				  -	      .byte	%00000000	; PLOK
   2157  2950				  -	      .byte	%00001110	; PLOK
   2158  2950				  -	      .byte	%01111110	; PLOK
   2159  2950				  -	      .byte	%00011000	; PLOK
   2160  2950				  -	      .byte	%00001100	; PLOK
   2161  2950				  -	      .byte	%00000110	; PLOK
   2162  2950				  -	      .byte	%00111100	; PLOK
   2163  2950				  -	      .byte	%00000000	; PLOK
   2164  2950				  -
   2165  2950				  -			;byte %00000000 ; PLOK
   2166  2950				  -
   2167  2950				  -	      .byte	%00000000	; PLOK
   2168  2950				  -	      .byte	%00111100	; PLOK
   2169  2950				  -	      .byte	%01101110	; PLOK
   2170  2950				  -	      .byte	%00001110	; PLOK
   2171  2950				  -	      .byte	%00011100	; PLOK
   2172  2950				  -	      .byte	%00000110	; PLOK
   2173  2950				  -	      .byte	%01111100	; PLOK
   2174  2950				  -	      .byte	%00000000	; PLOK
   2175  2950				  -
   2176  2950				  -			;byte %00000000 ; PLOK
   2177  2950				  -
   2178  2950				  -	      .byte	%00000000	; PLOK
   2179  2950				  -	      .byte	%00011000	; PLOK
   2180  2950				  -	      .byte	%01111110	; PLOK
   2181  2950				  -	      .byte	%01101100	; PLOK
   2182  2950				  -	      .byte	%00100100	; PLOK
   2183  2950				  -	      .byte	%00110000	; PLOK
   2184  2950				  -	      .byte	%00110000	; PLOK
   2185  2950				  -	      .byte	%00000000	; PLOK
   2186  2950				  -
   2187  2950				  -			;byte %00000000 ; PLOK
   2188  2950				  -
   2189  2950				  -	      .byte	%00000000	; PLOK
   2190  2950				  -	      .byte	%00111100	; PLOK
   2191  2950				  -	      .byte	%01001110	; PLOK
   2192  2950				  -	      .byte	%00011100	; PLOK
   2193  2950				  -	      .byte	%01100000	; PLOK
   2194  2950				  -	      .byte	%01111100	; PLOK
   2195  2950				  -	      .byte	%00011100	; PLOK
   2196  2950				  -	      .byte	%00000000	; PLOK
   2197  2950				  -
   2198  2950				  -			;byte %00000000 ; PLOK
   2199  2950				  -
   2200  2950				  -	      .byte	%00000000	; PLOK
   2201  2950				  -	      .byte	%00111100	; PLOK
   2202  2950				  -	      .byte	%01000110	; PLOK
   2203  2950				  -	      .byte	%01101100	; PLOK
   2204  2950				  -	      .byte	%01110000	; PLOK
   2205  2950				  -	      .byte	%00111000	; PLOK
   2206  2950				  -	      .byte	%00010000	; PLOK
   2207  2950				  -	      .byte	%00000000	; PLOK
   2208  2950				  -
   2209  2950				  -			;byte %00000000 ; PLOK
   2210  2950				  -
   2211  2950				  -	      .byte	%00000000	; PLOK
   2212  2950				  -	      .byte	%00111100	; PLOK
   2213  2950				  -	      .byte	%00011100	; PLOK
   2214  2950				  -	      .byte	%00001100	; PLOK
   2215  2950				  -	      .byte	%00000110	; PLOK
   2216  2950				  -	      .byte	%01111110	; PLOK
   2217  2950				  -	      .byte	%00110000	; PLOK
   2218  2950				  -	      .byte	%00000000	; PLOK
   2219  2950				  -
   2220  2950				  -			;byte %00000000 ; PLOK
   2221  2950				  -
   2222  2950				  -	      .byte	%00000000	; PLOK
   2223  2950				  -	      .byte	%00111100	; PLOK
   2224  2950				  -	      .byte	%01001110	; PLOK
   2225  2950				  -	      .byte	%01101110	; PLOK
   2226  2950				  -	      .byte	%00111100	; PLOK
   2227  2950				  -	      .byte	%01100100	; PLOK
   2228  2950				  -	      .byte	%00111000	; PLOK
   2229  2950				  -	      .byte	%00000000	; PLOK
   2230  2950				  -
   2231  2950				  -			;byte %00000000 ; PLOK
   2232  2950				  -
   2233  2950				  -	      .byte	%00000000	; PLOK
   2234  2950				  -	      .byte	%00011000	; PLOK
   2235  2950				  -	      .byte	%00001100	; PLOK
   2236  2950				  -	      .byte	%00011100	; PLOK
   2237  2950				  -	      .byte	%00100110	; PLOK
   2238  2950				  -	      .byte	%01001110	; PLOK
   2239  2950				  -	      .byte	%00111100	; PLOK
   2240  2950				  -	      .byte	%00000000	; PLOK
   2241  2950				  -
   2242  2950				  -	      ifconst	fontcharsHEX
   2243  2950				  -
   2244  2950				  -			;byte %00000000 ; PLOK
   2245  2950				  -
   2246  2950				  -	      .byte	%00000000	; PLOK
   2247  2950				  -	      .byte	%01100010	; PLOK
   2248  2950				  -	      .byte	%01100110	; PLOK
   2249  2950				  -	      .byte	%01111110	; PLOK
   2250  2950				  -	      .byte	%00101100	; PLOK
   2251  2950				  -	      .byte	%00101000	; PLOK
   2252  2950				  -	      .byte	%00110000	; PLOK
   2253  2950				  -	      .byte	%00000000	; PLOK
   2254  2950				  -
   2255  2950				  -			;byte %00000000 ; PLOK
   2256  2950				  -
   2257  2950				  -	      .byte	%00000000	; PLOK
   2258  2950				  -	      .byte	%01111100	; PLOK
   2259  2950				  -	      .byte	%00110010	; PLOK
   2260  2950				  -	      .byte	%00110110	; PLOK
   2261  2950				  -	      .byte	%00111100	; PLOK
   2262  2950				  -	      .byte	%00110110	; PLOK
   2263  2950				  -	      .byte	%01111100	; PLOK
   2264  2950				  -	      .byte	%00000000	; PLOK
   2265  2950				  -
   2266  2950				  -			;byte %00000000 ; PLOK
   2267  2950				  -
   2268  2950				  -	      .byte	%00000000	; PLOK
   2269  2950				  -	      .byte	%00111100	; PLOK
   2270  2950				  -	      .byte	%01100110	; PLOK
   2271  2950				  -	      .byte	%01100000	; PLOK
   2272  2950				  -	      .byte	%01100100	; PLOK
   2273  2950				  -	      .byte	%00101110	; PLOK
   2274  2950				  -	      .byte	%00011100	; PLOK
   2275  2950				  -	      .byte	%00000000	; PLOK
   2276  2950				  -
   2277  2950				  -			;byte %00000000 ; PLOK
   2278  2950				  -
   2279  2950				  -	      .byte	%00000000	; PLOK
   2280  2950				  -	      .byte	%01111100	; PLOK
   2281  2950				  -	      .byte	%00110010	; PLOK
   2282  2950				  -	      .byte	%00110010	; PLOK
   2283  2950				  -	      .byte	%00110110	; PLOK
   2284  2950				  -	      .byte	%01111100	; PLOK
   2285  2950				  -	      .byte	%01111000	; PLOK
   2286  2950				  -	      .byte	%00000000	; PLOK
   2287  2950				  -
   2288  2950				  -			;byte %00000000 ; PLOK
   2289  2950				  -
   2290  2950				  -	      .byte	%00000000	; PLOK
   2291  2950				  -	      .byte	%01111110	; PLOK
   2292  2950				  -	      .byte	%00110000	; PLOK
   2293  2950				  -	      .byte	%00111000	; PLOK
   2294  2950				  -	      .byte	%00111100	; PLOK
   2295  2950				  -	      .byte	%00110000	; PLOK
   2296  2950				  -	      .byte	%01111110	; PLOK
   2297  2950				  -	      .byte	%00000000	; PLOK
   2298  2950				  -
   2299  2950				  -			;byte %00000000 ; PLOK
   2300  2950				  -
   2301  2950				  -	      .byte	%00000000	; PLOK
   2302  2950				  -	      .byte	%01100000	; PLOK
   2303  2950				  -	      .byte	%01100000	; PLOK
   2304  2950				  -	      .byte	%00111000	; PLOK
   2305  2950				  -	      .byte	%00100000	; PLOK
   2306  2950				  -	      .byte	%01111110	; PLOK
   2307  2950				  -	      .byte	%00011100	; PLOK
   2308  2950				  -	      .byte	%00000000	; PLOK
   2309  2950				  -
   2310  2950				  -			;byte %00000000 ; PLOK
   2311  2950				  -			;byte %00000000 ; PLOK
   2312  2950				  -			;byte %00000000 ; PLOK
   2313  2950				  -			;byte %00000000 ; PLOK
   2314  2950				  -
   2315  2950				  -
   2316  2950				  -	      endif		; fontcharsHEX
   2317  2950					      endif		; PLOK
   2318  2950
   2319  2950							; ### any characters that aren't font specific follow... 
   2320  2950
   2321  2950				  -	      ifconst	fontcharSPACE
   2322  2950				  -			;byte %00000000 ; SYMBOLS
   2323  2950				  -
   2324  2950				  -	      .byte	%00000000	; SYMBOLS
   2325  2950				  -	      .byte	%00000000	; SYMBOLS
   2326  2950				  -	      .byte	%00000000	; SYMBOLS
   2327  2950				  -	      .byte	%00000000	; SYMBOLS
   2328  2950				  -	      .byte	%00000000	; SYMBOLS
   2329  2950				  -	      .byte	%00000000	; SYMBOLS
   2330  2950				  -	      .byte	%00000000	; SYMBOLS
   2331  2950				  -	      .byte	%00000000	; SYMBOLS
   2332  2950				  -
   2333  2950				  -			;byte %00000000 ; SYMBOLS
   2334  2950					      endif		; fontcharSPACE
   2335  2950
   2336  2950				  -	      ifconst	fontcharDOLLAR
   2337  2950				  -			;byte %00000000 ; SYMBOLS
   2338  2950				  -
   2339  2950				  -	      .byte	%00000000	; SYMBOLS
   2340  2950				  -	      .byte	%00010000	; SYMBOLS
   2341  2950				  -	      .byte	%01111100	; SYMBOLS
   2342  2950				  -	      .byte	%00010010	; SYMBOLS
   2343  2950				  -	      .byte	%01111100	; SYMBOLS
   2344  2950				  -	      .byte	%10010000	; SYMBOLS
   2345  2950				  -	      .byte	%01111100	; SYMBOLS
   2346  2950				  -	      .byte	%00010000	; SYMBOLS
   2347  2950				  -
   2348  2950				  -			;byte %00000000 ; SYMBOLS
   2349  2950				  -
   2350  2950					      endif		; fontcharDOLLAR
   2351  2950
   2352  2950				  -	      ifconst	fontcharPOUND
   2353  2950				  -			;byte %00000000 ; SYMBOLS
   2354  2950				  -
   2355  2950				  -	      .byte	%01111110	; SYMBOLS
   2356  2950				  -	      .byte	%01000000	; SYMBOLS
   2357  2950				  -	      .byte	%00100000	; SYMBOLS
   2358  2950				  -	      .byte	%00100000	; SYMBOLS
   2359  2950				  -	      .byte	%01111000	; SYMBOLS
   2360  2950				  -	      .byte	%00100000	; SYMBOLS
   2361  2950				  -	      .byte	%00100010	; SYMBOLS
   2362  2950				  -	      .byte	%00011100	; SYMBOLS
   2363  2950				  -
   2364  2950				  -			;byte %00000000 ; SYMBOLS
   2365  2950				  -
   2366  2950					      endif		; fontcharPOUND
   2367  2950
   2368  2950
   2369  2950				  -	      ifconst	fontcharMRHAPPY
   2370  2950				  -			;byte %00000000 ; SYMBOLS
   2371  2950				  -
   2372  2950				  -	      .byte	%00111100	; SYMBOLS
   2373  2950				  -	      .byte	%01100110	; SYMBOLS
   2374  2950				  -	      .byte	%01011010	; SYMBOLS
   2375  2950				  -	      .byte	%01111110	; SYMBOLS
   2376  2950				  -	      .byte	%01111110	; SYMBOLS
   2377  2950				  -	      .byte	%01011010	; SYMBOLS
   2378  2950				  -	      .byte	%01111110	; SYMBOLS
   2379  2950				  -	      .byte	%00111100	; SYMBOLS
   2380  2950				  -
   2381  2950				  -			;byte %00000000 ; SYMBOLS
   2382  2950				  -
   2383  2950					      endif		; fontcharMRHAPPY
   2384  2950
   2385  2950				  -	      ifconst	fontcharMRSAD
   2386  2950				  -			;byte %00000000 ; SYMBOLS
   2387  2950				  -
   2388  2950				  -	      .byte	%00111100	; SYMBOLS
   2389  2950				  -	      .byte	%01011010	; SYMBOLS
   2390  2950				  -	      .byte	%01100110	; SYMBOLS
   2391  2950				  -	      .byte	%01111110	; SYMBOLS
   2392  2950				  -	      .byte	%01111110	; SYMBOLS
   2393  2950				  -	      .byte	%01011010	; SYMBOLS
   2394  2950				  -	      .byte	%01111110	; SYMBOLS
   2395  2950				  -	      .byte	%00111100	; SYMBOLS
   2396  2950				  -
   2397  2950				  -			;byte %00000000 ; SYMBOLS
   2398  2950				  -
   2399  2950					      endif		; fontcharMRSAD
   2400  2950
   2401  2950
   2402  2950				  -	      ifconst	fontcharCOPYRIGHT
   2403  2950				  -			;byte %00000000 ; SYMBOLS
   2404  2950				  -
   2405  2950				  -	      .byte	%00000000	; SYMBOLS
   2406  2950				  -	      .byte	%00111000	; SYMBOLS
   2407  2950				  -	      .byte	%01000100	; SYMBOLS
   2408  2950				  -	      .byte	%10111010	; SYMBOLS
   2409  2950				  -	      .byte	%10100010	; SYMBOLS
   2410  2950				  -	      .byte	%10111010	; SYMBOLS
   2411  2950				  -	      .byte	%01000100	; SYMBOLS
   2412  2950				  -	      .byte	%00111000	; SYMBOLS
   2413  2950				  -
   2414  2950				  -			;byte %00000000 ; SYMBOLS
   2415  2950				  -
   2416  2950					      endif		; fontcharCOPYRIGHT
   2417  2950
   2418  2950
   2419  2950				  -	      ifconst	fontcharFUJI
   2420  2950				  -
   2421  2950				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  2950				  -
   2423  2950				  -	      .byte	%01110000	; SYMBOLS
   2424  2950				  -	      .byte	%01111001	; SYMBOLS
   2425  2950				  -	      .byte	%00011101	; SYMBOLS
   2426  2950				  -	      .byte	%00001101	; SYMBOLS
   2427  2950				  -	      .byte	%00001101	; SYMBOLS
   2428  2950				  -	      .byte	%00001101	; SYMBOLS
   2429  2950				  -	      .byte	%00001101	; SYMBOLS
   2430  2950				  -	      .byte	%00000000	; SYMBOLS
   2431  2950				  -
   2432  2950				  -			;byte %00000000 ; SYMBOLS
   2433  2950				  -
   2434  2950				  -	      .byte	%00001110	; SYMBOLS
   2435  2950				  -	      .byte	%10011110	; SYMBOLS
   2436  2950				  -	      .byte	%10111000	; SYMBOLS
   2437  2950				  -	      .byte	%10110000	; SYMBOLS
   2438  2950				  -	      .byte	%10110000	; SYMBOLS
   2439  2950				  -	      .byte	%10110000	; SYMBOLS
   2440  2950				  -	      .byte	%10110000	; SYMBOLS
   2441  2950				  -	      .byte	%00000000	; SYMBOLS
   2442  2950				  -
   2443  2950				  -			;byte %00000000 ; SYMBOLS
   2444  2950				  -
   2445  2950					      endif		; fontcharFUJI
   2446  2950
   2447  2950
   2448  2950				  -	      ifconst	fontcharHEART
   2449  2950				  -			;byte %00000000 ; SYMBOLS
   2450  2950				  -
   2451  2950				  -	      .byte	%00010000	; SYMBOLS
   2452  2950				  -	      .byte	%00111000	; SYMBOLS
   2453  2950				  -	      .byte	%01111100	; SYMBOLS
   2454  2950				  -	      .byte	%01111100	; SYMBOLS
   2455  2950				  -	      .byte	%11111110	; SYMBOLS
   2456  2950				  -	      .byte	%11111110	; SYMBOLS
   2457  2950				  -	      .byte	%11101110	; SYMBOLS
   2458  2950				  -	      .byte	%01000100	; SYMBOLS
   2459  2950				  -
   2460  2950				  -			;byte %00000000 ; SYMBOLS
   2461  2950				  -
   2462  2950					      endif		; fontcharHEART
   2463  2950
   2464  2950				  -	      ifconst	fontcharDIAMOND
   2465  2950				  -			;byte %00000000 ; SYMBOLS
   2466  2950				  -
   2467  2950				  -	      .byte	%00010000	; SYMBOLS
   2468  2950				  -	      .byte	%00111000	; SYMBOLS
   2469  2950				  -	      .byte	%01111100	; SYMBOLS
   2470  2950				  -	      .byte	%11111110	; SYMBOLS
   2471  2950				  -	      .byte	%11111110	; SYMBOLS
   2472  2950				  -	      .byte	%01111100	; SYMBOLS
   2473  2950				  -	      .byte	%00111000	; SYMBOLS
   2474  2950				  -	      .byte	%00010000	; SYMBOLS
   2475  2950				  -
   2476  2950				  -			;byte %00000000 ; SYMBOLS
   2477  2950				  -
   2478  2950					      endif		; fontcharDIAMOND
   2479  2950
   2480  2950				  -	      ifconst	fontcharSPADE
   2481  2950				  -			;byte %00000000 ; SYMBOLS
   2482  2950				  -
   2483  2950				  -	      .byte	%00111000	; SYMBOLS
   2484  2950				  -	      .byte	%00010000	; SYMBOLS
   2485  2950				  -	      .byte	%01010100	; SYMBOLS
   2486  2950				  -	      .byte	%11111110	; SYMBOLS
   2487  2950				  -	      .byte	%11111110	; SYMBOLS
   2488  2950				  -	      .byte	%01111100	; SYMBOLS
   2489  2950				  -	      .byte	%00111000	; SYMBOLS
   2490  2950				  -	      .byte	%00010000	; SYMBOLS
   2491  2950				  -
   2492  2950				  -			;byte %00000000 ; SYMBOLS
   2493  2950				  -
   2494  2950					      endif		; fontcharSPADE
   2495  2950
   2496  2950				  -	      ifconst	fontcharCLUB
   2497  2950				  -			;byte %00000000 ; SYMBOLS
   2498  2950				  -
   2499  2950				  -	      .byte	%00111000	; SYMBOLS
   2500  2950				  -	      .byte	%00010000	; SYMBOLS
   2501  2950				  -	      .byte	%11010110	; SYMBOLS
   2502  2950				  -	      .byte	%11111110	; SYMBOLS
   2503  2950				  -	      .byte	%11010110	; SYMBOLS
   2504  2950				  -	      .byte	%00111000	; SYMBOLS
   2505  2950				  -	      .byte	%00111000	; SYMBOLS
   2506  2950				  -	      .byte	%00000000	; SYMBOLS
   2507  2950				  -
   2508  2950				  -			;byte %00000000 ; SYMBOLS
   2509  2950				  -
   2510  2950					      endif		; fontcharCLUB
   2511  2950
   2512  2950
   2513  2950				  -	      ifconst	fontcharCOLON
   2514  2950				  -			;byte %00000000 ; SYMBOLS
   2515  2950				  -
   2516  2950				  -	      .byte	%00000000	; SYMBOLS
   2517  2950				  -	      .byte	%00011000	; SYMBOLS
   2518  2950				  -	      .byte	%00011000	; SYMBOLS
   2519  2950				  -	      .byte	%00000000	; SYMBOLS
   2520  2950				  -	      .byte	%00000000	; SYMBOLS
   2521  2950				  -	      .byte	%00011000	; SYMBOLS
   2522  2950				  -	      .byte	%00011000	; SYMBOLS
   2523  2950				  -	      .byte	%00000000	; SYMBOLS
   2524  2950				  -
   2525  2950				  -			;byte %00000000 ; SYMBOLS
   2526  2950				  -
   2527  2950					      endif		; fontcharCOLON
   2528  2950
   2529  2950
   2530  2950				  -	      ifconst	fontcharBLOCK
   2531  2950				  -
   2532  2950				  -			;byte %00000000 ; SYMBOLS
   2533  2950				  -
   2534  2950				  -	      .byte	%11111111	; SYMBOLS
   2535  2950				  -	      .byte	%11111111	; SYMBOLS
   2536  2950				  -	      .byte	%11111111	; SYMBOLS
   2537  2950				  -	      .byte	%11111111	; SYMBOLS
   2538  2950				  -	      .byte	%11111111	; SYMBOLS
   2539  2950				  -	      .byte	%11111111	; SYMBOLS
   2540  2950				  -	      .byte	%11111111	; SYMBOLS
   2541  2950				  -	      .byte	%11111111	; SYMBOLS
   2542  2950				  -
   2543  2950				  -			;byte %00000000 ; SYMBOLS
   2544  2950				  -
   2545  2950					      endif		; fontcharBLOCK
   2546  2950
   2547  2950				  -	      ifconst	fontcharUNDERLINE
   2548  2950				  -
   2549  2950				  -			;byte %00000000 ; SYMBOLS
   2550  2950				  -
   2551  2950				  -	      .byte	%11111111	; SYMBOLS
   2552  2950				  -	      .byte	%00000000	; SYMBOLS
   2553  2950				  -	      .byte	%00000000	; SYMBOLS
   2554  2950				  -	      .byte	%00000000	; SYMBOLS
   2555  2950				  -	      .byte	%00000000	; SYMBOLS
   2556  2950				  -	      .byte	%00000000	; SYMBOLS
   2557  2950				  -	      .byte	%00000000	; SYMBOLS
   2558  2950				  -	      .byte	%00000000	; SYMBOLS
   2559  2950				  -
   2560  2950				  -			;byte %00000000 ; SYMBOLS
   2561  2950				  -
   2562  2950					      endif		; fontcharUNDERLINE
   2563  2950
   2564  2950				  -	      ifconst	fontcharARISIDE
   2565  2950				  -			;byte %00000000 ; SYMBOLS
   2566  2950				  -
   2567  2950				  -	      .byte	%00000000	; SYMBOLS
   2568  2950				  -	      .byte	%00101010	; SYMBOLS
   2569  2950				  -	      .byte	%00101010	; SYMBOLS
   2570  2950				  -	      .byte	%00101100	; SYMBOLS
   2571  2950				  -	      .byte	%01111111	; SYMBOLS
   2572  2950				  -	      .byte	%00110111	; SYMBOLS
   2573  2950				  -	      .byte	%00000010	; SYMBOLS
   2574  2950				  -	      .byte	%00000001	; SYMBOLS
   2575  2950				  -
   2576  2950				  -			;byte %00000000 ; SYMBOLS
   2577  2950				  -
   2578  2950					      endif		; fontcharARISIDE
   2579  2950
   2580  2950				  -	      ifconst	fontcharARIFACE
   2581  2950				  -			;byte %00000000 ; SYMBOLS
   2582  2950				  -
   2583  2950				  -	      .byte	%00001000	; SYMBOLS
   2584  2950				  -	      .byte	%00011100	; SYMBOLS
   2585  2950				  -	      .byte	%00111110	; SYMBOLS
   2586  2950				  -	      .byte	%00101010	; SYMBOLS
   2587  2950				  -	      .byte	%00011100	; SYMBOLS
   2588  2950				  -	      .byte	%01010100	; SYMBOLS
   2589  2950				  -	      .byte	%00100100	; SYMBOLS
   2590  2950				  -	      .byte	%00000010	; SYMBOLS
   2591  2950				  -
   2592  2950				  -			;byte %00000000 ; SYMBOLS
   2593  2950				  -
   2594  2950				  -
   2595  2950					      endif		; fontcharARIRACE
   2596  2950
------- FILE titlescreen/asm/titlescreen.asm
    170  2950					      endif
    171  2950
    172  2950				  -	      ifconst	mk_gameselect_on
    173  2950				  -	      include	"titlescreen/gameselect_image.asm"
    174  2950					      endif
    175  2950
------- FILE E:\Dev\test\test_Title.bas.asm
    301  2950
    302  2950				   .
    303  2950							; 
    304  2950
    305  2950				   .L033		;  bank 3
    306  2950
    307  2950					      if	ECHO2
      1668 bytes of ROM space left in bank 2
    308  2950					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    309  2950					      endif
    310  2950		       00 01	   ECHO2      =	1
    311  2fd4					      ORG	$2FF4-bscode_length
    312  2fd4					      RORG	$BFF4-bscode_length
    313  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    314  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    315  2fd6				  -	      stx	FASTFETCH
    316  2fd6					      endif
    317  2fd6		       9a		      txs
    318  2fd7				  -	      if	bankswitch == 64
    319  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    320  2fd7					      else
    321  2fd7		       a9 f2		      lda	#>(start-1)
    322  2fd9					      endif
    323  2fd9		       48		      pha
    324  2fda		       a9 4f		      lda	#<(start-1)
    325  2fdc		       48		      pha
    326  2fdd		       48		      pha
    327  2fde		       8a		      txa
    328  2fdf		       48		      pha
    329  2fe0		       ba		      tsx
    330  2fe1					      if	bankswitch != 64
    331  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    332  2fe3		       2a		      rol
    333  2fe4		       2a		      rol
    334  2fe5		       2a		      rol
    335  2fe6		       2a		      rol
    336  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    337  2fe9		       aa		      tax
    338  2fea		       e8		      inx
    339  2feb				  -	      else
    340  2feb				  -	      lda	4,x	; get high byte of return address
    341  2feb				  -	      tay
    342  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    343  2feb				  -	      sta	4,x
    344  2feb				  -	      tya
    345  2feb				  -	      lsr
    346  2feb				  -	      lsr
    347  2feb				  -	      lsr
    348  2feb				  -	      lsr
    349  2feb				  -	      tax
    350  2feb				  -	      inx
    351  2feb					      endif
    352  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    353  2fee		       68		      pla
    354  2fef		       aa		      tax
    355  2ff0		       68		      pla
    356  2ff1		       60		      rts
    357  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    358  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    359  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    360  2ff2					      endif
    361  2ffc					      ORG	$2FFC
    362  2ffc					      RORG	$BFFC
    363  2ffc		       d4 bf		      .word.w	start_bank2
    364  2ffe		       d4 bf		      .word.w	start_bank2
    365  3000					      ORG	$3000
    366  3000					      RORG	$D000
    367  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    368  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    369  3000					      endif
    370  3000		       00 01	   ECHO3      =	1
    371  3fd4					      ORG	$3FF4-bscode_length
    372  3fd4					      RORG	$DFF4-bscode_length
    373  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    374  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    375  3fd6				  -	      stx	FASTFETCH
    376  3fd6					      endif
    377  3fd6		       9a		      txs
    378  3fd7				  -	      if	bankswitch == 64
    379  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    380  3fd7					      else
    381  3fd7		       a9 f2		      lda	#>(start-1)
    382  3fd9					      endif
    383  3fd9		       48		      pha
    384  3fda		       a9 4f		      lda	#<(start-1)
    385  3fdc		       48		      pha
    386  3fdd		       48		      pha
    387  3fde		       8a		      txa
    388  3fdf		       48		      pha
    389  3fe0		       ba		      tsx
    390  3fe1					      if	bankswitch != 64
    391  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    392  3fe3		       2a		      rol
    393  3fe4		       2a		      rol
    394  3fe5		       2a		      rol
    395  3fe6		       2a		      rol
    396  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    397  3fe9		       aa		      tax
    398  3fea		       e8		      inx
    399  3feb				  -	      else
    400  3feb				  -	      lda	4,x	; get high byte of return address
    401  3feb				  -	      tay
    402  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    403  3feb				  -	      sta	4,x
    404  3feb				  -	      tya
    405  3feb				  -	      lsr
    406  3feb				  -	      lsr
    407  3feb				  -	      lsr
    408  3feb				  -	      lsr
    409  3feb				  -	      tax
    410  3feb				  -	      inx
    411  3feb					      endif
    412  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    413  3fee		       68		      pla
    414  3fef		       aa		      tax
    415  3ff0		       68		      pla
    416  3ff1		       60		      rts
    417  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    418  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    419  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    420  3ff2					      endif
    421  3ffc					      ORG	$3FFC
    422  3ffc					      RORG	$DFFC
    423  3ffc		       d4 df		      .word.w	start_bank3
    424  3ffe		       d4 df		      .word.w	start_bank3
    425  4000					      ORG	$4000
    426  4000					      RORG	$F000
    427  4000							; This is a 2-line kernel!
    428  4000					      ifnconst	vertical_reflect
    429  4000				   kernel
    430  4000					      endif
    431  4000		       85 02		      sta	WSYNC
    432  4002		       a9 ff		      lda	#255
    433  4004		       8d 96 02 	      sta	TIM64T
    434  4007
    435  4007		       a9 01		      lda	#1
    436  4009		       85 27		      sta	VDELBL
    437  400b		       85 25		      sta	VDELP0
    438  400d		       a6 92		      ldx	ballheight
    439  400f		       e8		      inx
    440  4010		       e8		      inx
    441  4011		       86 9f		      stx	temp4
    442  4013		       a5 86		      lda	player1y
    443  4015		       85 9e		      sta	temp3
    444  4017
    445  4017				  -	      ifconst	shakescreen
    446  4017				  -	      jsr	doshakescreen
    447  4017					      else
    448  4017		       a6 90		      ldx	missile0height
    449  4019		       e8		      inx
    450  401a					      endif
    451  401a
    452  401a		       e8		      inx
    453  401b		       86 f6		      stx	stack1
    454  401d
    455  401d		       a5 89		      lda	bally
    456  401f		       85 f7		      sta	stack2
    457  4021
    458  4021		       a5 85		      lda	player0y
    459  4023		       a2 00		      ldx	#0
    460  4025		       85 02		      sta	WSYNC
    461  4027		       86 1b		      stx	GRP0
    462  4029		       86 1c		      stx	GRP1
    463  402b		       86 0e		      stx	PF1L
    464  402d		       86 0f		      stx	PF2
    465  402f		       86 2c		      stx	CXCLR
    466  4031				  -	      ifconst	readpaddle
    467  4031				  -	      stx	paddle
    468  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    470  4033					      endif
    471  4033
    472  4033		       95 9d		      sta	temp2,x
    473  4035
    474  4035							;store these so they can be retrieved later
    475  4035					      ifnconst	pfres
    476  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    477  4037				  -	      else
    478  4037				  -	      ldx	#132-pfres*pfwidth
    479  4037					      endif
    480  4037
    481  4037		       c6 85		      dec	player0y
    482  4039
    483  4039		       a5 91		      lda	missile0y
    484  403b		       85 a0		      sta	temp5
    485  403d		       a5 88		      lda	missile1y
    486  403f		       85 a1		      sta	temp6
    487  4041
    488  4041		       a5 ef		      lda	playfieldpos
    489  4043		       85 9c		      sta	temp1
    490  4045
    491  4045				  -	      ifconst	pfrowheight
    492  4045				  -	      lda	#pfrowheight+2
    493  4045					      else
    494  4045					      ifnconst	pfres
    495  4045		       a9 0a		      lda	#10
    496  4047				  -	      else
    497  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    498  4047					      endif
    499  4047					      endif
    500  4047		       18		      clc
    501  4048		       e5 ef		      sbc	playfieldpos
    502  404a		       85 ef		      sta	playfieldpos
    503  404c		       4c 74 f0 	      jmp	.startkernel
    504  404f
    505  404f				   .skipDrawP0
    506  404f		       a9 00		      lda	#0
    507  4051		       a8		      tay
    508  4052		       4c a2 f0 	      jmp	.continueP0
    509  4055
    510  4055				   .skipDrawP1
    511  4055		       a9 00		      lda	#0
    512  4057		       a8		      tay
    513  4058		       4c 7e f0 	      jmp	.continueP1
    514  405b
    515  405b				   .kerloop		; enter at cycle 59??
    516  405b
    517  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    519  405c				   continuekernel2
    520  405c		       a5 92		      lda	ballheight
    521  405e
    522  405e				  -	      ifconst	pfres
    523  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    524  405e				  -	      sty	PF1L	;3
    525  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    526  405e				  -	      sty	PF2L	;3
    527  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    528  405e				  -	      sty	PF1R	; 3 too early?
    529  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    530  405e				  -	      sty	PF2R	;3
    531  405e					      else
    532  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    533  4060		       84 0e		      sty	PF1L	;3
    534  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    535  4064		       84 0f		      sty	PF2L	;3
    536  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    537  4068		       84 0e		      sty	PF1R	; 3 too early?
    538  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    539  406c		       84 0f		      sty	PF2R	;3
    540  406e					      endif
    541  406e
    542  406e							; should be playfield+$38 for width=2
    543  406e
    544  406e		       c7 89		      dcp	bally
    545  4070		       2a		      rol
    546  4071		       2a		      rol
    547  4072							; rol
    548  4072							; rol
    549  4072				   goback
    550  4072		       85 1f		      sta	ENABL
    551  4074				   .startkernel
    552  4074		       a5 8f		      lda	player1height	;3
    553  4076		       c7 86		      dcp	player1y	;5
    554  4078		       90 db		      bcc	.skipDrawP1	;2
    555  407a		       a4 86		      ldy	player1y	;3
    556  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    557  407e							; so it doesn't cross a page boundary!
    558  407e
    559  407e				   .continueP1
    560  407e		       85 1c		      sta	GRP1	;3
    561  4080
    562  4080					      ifnconst	player1colors
    563  4080		       a5 87		      lda	missile1height	;3
    564  4082		       c7 88		      dcp	missile1y	;5
    565  4084		       2a		      rol		;2
    566  4085		       2a		      rol		;2
    567  4086		       85 1e		      sta	ENAM1	;3
    568  4088				  -	      else
    569  4088				  -	      lda	(player1color),y
    570  4088				  -	      sta	COLUP1
    571  4088				  -	      ifnconst	playercolors
    572  4088				  -	      sleep	7
    573  4088				  -	      else
    574  4088				  -	      lda.w	player0colorstore
    575  4088				  -	      sta	COLUP0
    576  4088				  -	      endif
    577  4088					      endif
    578  4088
    579  4088				  -	      ifconst	pfres
    580  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    581  4088				  -	      sta	PF1L	;3
    582  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    583  4088				  -	      sta	PF2L	;3
    584  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    585  4088				  -	      sta	PF1R	; 3 too early?
    586  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    587  4088				  -	      sta	PF2R	;3
    588  4088					      else
    589  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    590  408a		       85 0e		      sta	PF1L	;3
    591  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    592  408e		       85 0f		      sta	PF2L	;3
    593  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    594  4092		       85 0e		      sta	PF1R	; 3 too early?
    595  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    596  4096		       85 0f		      sta	PF2R	;3
    597  4098					      endif
    598  4098							; sleep 3
    599  4098
    600  4098		       a5 8e		      lda	player0height
    601  409a		       c7 85		      dcp	player0y
    602  409c		       90 b1		      bcc	.skipDrawP0
    603  409e		       a4 85		      ldy	player0y
    604  40a0		       b1 8a		      lda	(player0pointer),y
    605  40a2				   .continueP0
    606  40a2		       85 1b		      sta	GRP0
    607  40a4
    608  40a4					      ifnconst	no_blank_lines
    609  40a4					      ifnconst	playercolors
    610  40a4		       a5 90		      lda	missile0height	;3
    611  40a6		       c7 91		      dcp	missile0y	;5
    612  40a8		       e5 f6		      sbc	stack1
    613  40aa		       85 1d		      sta	ENAM0	;3
    614  40ac				  -	      else
    615  40ac				  -	      lda	(player0color),y
    616  40ac				  -	      sta	player0colorstore
    617  40ac				  -	      sleep	6
    618  40ac					      endif
    619  40ac		       c6 9c		      dec	temp1
    620  40ae		       d0 ab		      bne	continuekernel
    621  40b0				  -	      else
    622  40b0				  -	      dec	temp1
    623  40b0				  -	      beq	altkernel2
    624  40b0				  -	      ifconst	readpaddle
    625  40b0				  -	      ldy	currentpaddle
    626  40b0				  -	      lda	INPT0,y
    627  40b0				  -	      bpl	noreadpaddle
    628  40b0				  -	      inc	paddle
    629  40b0				  -	      jmp	continuekernel2
    630  40b0				  -noreadpaddle
    631  40b0				  -	      sleep	2
    632  40b0				  -	      jmp	continuekernel
    633  40b0				  -	      else
    634  40b0				  -	      ifnconst	playercolors
    635  40b0				  -	      ifconst	PFcolors
    636  40b0				  -	      txa
    637  40b0				  -	      tay
    638  40b0				  -	      lda	(pfcolortable),y
    639  40b0				  -	      ifnconst	backgroundchange
    640  40b0				  -	      sta	COLUPF
    641  40b0				  -	      else
    642  40b0				  -	      sta	COLUBK
    643  40b0				  -	      endif
    644  40b0				  -	      jmp	continuekernel
    645  40b0				  -	      else
    646  40b0				  -	      ifconst	kernelmacrodef
    647  40b0				  -	      kernelmacro
    648  40b0				  -	      else
    649  40b0				  -	      sleep	12
    650  40b0				  -	      endif
    651  40b0				  -	      endif
    652  40b0				  -	      else
    653  40b0				  -	      lda	(player0color),y
    654  40b0				  -	      sta	player0colorstore
    655  40b0				  -	      sleep	4
    656  40b0				  -	      endif
    657  40b0				  -	      jmp	continuekernel
    658  40b0				  -	      endif
    659  40b0				  -altkernel2
    660  40b0				  -	      txa
    661  40b0				  -	      ifnconst	vertical_reflect
    662  40b0				  -	      sbx	#256-pfwidth
    663  40b0				  -	      else
    664  40b0				  -	      sbx	#256-pfwidth/2
    665  40b0				  -	      endif
    666  40b0				  -	      bmi	lastkernelline
    667  40b0				  -	      ifconst	pfrowheight
    668  40b0				  -	      lda	#pfrowheight
    669  40b0				  -	      else
    670  40b0				  -	      ifnconst	pfres
    671  40b0				  -	      lda	#8
    672  40b0				  -	      else
    673  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    674  40b0				  -	      endif
    675  40b0				  -	      endif
    676  40b0				  -	      sta	temp1
    677  40b0				  -	      jmp	continuekernel
    678  40b0					      endif
    679  40b0
    680  40b0				   altkernel
    681  40b0
    682  40b0				  -	      ifconst	PFmaskvalue
    683  40b0				  -	      lda	#PFmaskvalue
    684  40b0					      else
    685  40b0		       a9 00		      lda	#0
    686  40b2					      endif
    687  40b2		       85 0e		      sta	PF1L
    688  40b4		       85 0f		      sta	PF2
    689  40b6
    690  40b6
    691  40b6							;sleep 3
    692  40b6
    693  40b6							;28 cycles to fix things
    694  40b6							;minus 11=17
    695  40b6
    696  40b6							; lax temp4
    697  40b6							; clc
    698  40b6		       8a		      txa
    699  40b7					      ifnconst	vertical_reflect
    700  40b7		       cb fc		      sbx	#256-pfwidth
    701  40b9				  -	      else
    702  40b9				  -	      sbx	#256-pfwidth/2
    703  40b9					      endif
    704  40b9
    705  40b9		       30 12		      bmi	lastkernelline
    706  40bb
    707  40bb				  -	      ifconst	PFcolorandheight
    708  40bb				  -	      ifconst	pfres
    709  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    710  40bb				  -	      else
    711  40bb				  -	      ldy	playfieldcolorandheight-87,x
    712  40bb				  -	      endif
    713  40bb				  -	      ifnconst	backgroundchange
    714  40bb				  -	      sty	COLUPF
    715  40bb				  -	      else
    716  40bb				  -	      sty	COLUBK
    717  40bb				  -	      endif
    718  40bb				  -	      ifconst	pfres
    719  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    720  40bb				  -	      else
    721  40bb				  -	      lda	playfieldcolorandheight-88,x
    722  40bb				  -	      endif
    723  40bb				  -	      sta.w	temp1
    724  40bb					      endif
    725  40bb				  -	      ifconst	PFheights
    726  40bb				  -	      lsr
    727  40bb				  -	      lsr
    728  40bb				  -	      tay
    729  40bb				  -	      lda	(pfheighttable),y
    730  40bb				  -	      sta.w	temp1
    731  40bb					      endif
    732  40bb				  -	      ifconst	PFcolors
    733  40bb				  -	      tay
    734  40bb				  -	      lda	(pfcolortable),y
    735  40bb				  -	      ifnconst	backgroundchange
    736  40bb				  -	      sta	COLUPF
    737  40bb				  -	      else
    738  40bb				  -	      sta	COLUBK
    739  40bb				  -	      endif
    740  40bb				  -	      ifconst	pfrowheight
    741  40bb				  -	      lda	#pfrowheight
    742  40bb				  -	      else
    743  40bb				  -	      ifnconst	pfres
    744  40bb				  -	      lda	#8
    745  40bb				  -	      else
    746  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    747  40bb				  -	      endif
    748  40bb				  -	      endif
    749  40bb				  -	      sta	temp1
    750  40bb					      endif
    751  40bb					      ifnconst	PFcolorandheight
    752  40bb					      ifnconst	PFcolors
    753  40bb					      ifnconst	PFheights
    754  40bb					      ifnconst	no_blank_lines
    755  40bb							; read paddle 0
    756  40bb							; lo-res paddle read
    757  40bb							; bit INPT0
    758  40bb							; bmi paddleskipread
    759  40bb							; inc paddle0
    760  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    762  40c0				  -	      ifconst	pfrowheight
    763  40c0				  -	      lda	#pfrowheight
    764  40c0					      else
    765  40c0					      ifnconst	pfres
    766  40c0		       a9 08		      lda	#8
    767  40c2				  -	      else
    768  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    769  40c2					      endif
    770  40c2					      endif
    771  40c2		       85 9c		      sta	temp1
    772  40c4					      endif
    773  40c4					      endif
    774  40c4					      endif
    775  40c4					      endif
    776  40c4
    777  40c4
    778  40c4		       a5 92		      lda	ballheight
    779  40c6		       c7 89		      dcp	bally
    780  40c8		       e5 9f		      sbc	temp4
    781  40ca
    782  40ca
    783  40ca		       4c 72 f0 	      jmp	goback
    784  40cd
    785  40cd
    786  40cd					      ifnconst	no_blank_lines
    787  40cd				   lastkernelline
    788  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    790  40d2				  -	      else
    791  40d2				  -	      ldy	#124
    792  40d2				  -	      lda	(pfcolortable),y
    793  40d2				  -	      sta	COLUPF
    794  40d2					      endif
    795  40d2
    796  40d2				  -	      ifconst	PFheights
    797  40d2				  -	      ldx	#1
    798  40d2				  -			;sleep 4
    799  40d2				  -	      sleep	3	; REVENG - this was over 1 cycle
    800  40d2					      else
    801  40d2		       a6 ef		      ldx	playfieldpos
    802  40d4							;sleep 3
      0  40d4					      sleep	2	; REVENG - this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    804  40d5					      endif
    805  40d5
    806  40d5		       4c 1b f1 	      jmp	enterlastkernel
    807  40d8
    808  40d8				  -	      else
    809  40d8				  -lastkernelline
    810  40d8				  -
    811  40d8				  -	      ifconst	PFheights
    812  40d8				  -	      ldx	#1
    813  40d8				  -			;sleep 5
    814  40d8				  -	      sleep	4	; REVENG - this was over 1 cycle
    815  40d8				  -	      else
    816  40d8				  -	      ldx	playfieldpos
    817  40d8				  -			;sleep 4
    818  40d8				  -	      sleep	3	; REVENG - this was over 1 cycle
    819  40d8				  -	      endif
    820  40d8				  -
    821  40d8				  -	      cpx	#0
    822  40d8				  -	      bne	.enterfromNBL
    823  40d8				  -	      jmp	no_blank_lines_bailout
    824  40d8					      endif
    825  40d8
    826  40d8					      if	((<*)>$d5)
    827  4100		       00 00 00 00*	      align	256
    828  4100					      endif
    829  4100							; this is a kludge to prevent page wrapping - fix!!!
    830  4100
    831  4100				   .skipDrawlastP1
    832  4100		       a9 00		      lda	#0
    833  4102		       a8		      tay		; REVENG - added so we don't cross a page
    834  4103		       4c 2d f1 	      jmp	.continuelastP1
    835  4106
    836  4106				   .endkerloop		; enter at cycle 59??
    837  4106
    838  4106		       ea		      nop
    839  4107
    840  4107				   .enterfromNBL
    841  4107				  -	      ifconst	pfres
    842  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    843  4107				  -	      sty	PF1L	;3
    844  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    845  4107				  -	      sty	PF2L	;3
    846  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    847  4107				  -	      sty	PF1R	; possibly too early?
    848  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    849  4107				  -	      sty	PF2R	;3
    850  4107					      else
    851  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    852  410a		       84 0e		      sty	PF1L	;3
    853  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    854  410f		       84 0f		      sty	PF2L	;3
    855  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    856  4114		       84 0e		      sty	PF1R	; possibly too early?
    857  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    858  4119		       84 0f		      sty	PF2R	;3
    859  411b					      endif
    860  411b
    861  411b				   enterlastkernel
    862  411b		       a5 92		      lda	ballheight
    863  411d
    864  411d							; tya
    865  411d		       c7 89		      dcp	bally
    866  411f							; sleep 4
    867  411f
    868  411f							; sbc stack3
    869  411f		       2a		      rol
    870  4120		       2a		      rol
    871  4121		       85 1f		      sta	ENABL
    872  4123
    873  4123		       a5 8f		      lda	player1height	;3
    874  4125		       c7 86		      dcp	player1y	;5
    875  4127		       90 d7		      bcc	.skipDrawlastP1
    876  4129		       a4 86		      ldy	player1y	;3
    877  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    878  412d							; so it doesn't cross a page boundary!
    879  412d
    880  412d				   .continuelastP1
    881  412d		       85 1c		      sta	GRP1	;3
    882  412f
    883  412f					      ifnconst	player1colors
    884  412f		       a5 87		      lda	missile1height	;3
    885  4131		       c7 88		      dcp	missile1y	;5
    886  4133				  -	      else
    887  4133				  -	      lda	(player1color),y
    888  4133				  -	      sta	COLUP1
    889  4133					      endif
    890  4133
    891  4133		       ca		      dex
    892  4134							;dec temp4 ; might try putting this above PF writes
    893  4134		       f0 36		      beq	endkernel
    894  4136
    895  4136
    896  4136				  -	      ifconst	pfres
    897  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    898  4136				  -	      sty	PF1L	;3
    899  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    900  4136				  -	      sty	PF2L	;3
    901  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    902  4136				  -	      sty	PF1R	; possibly too early?
    903  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    904  4136				  -	      sty	PF2R	;3
    905  4136					      else
    906  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    907  4139		       84 0e		      sty	PF1L	;3
    908  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    909  413e		       84 0f		      sty	PF2L	;3
    910  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    911  4143		       84 0e		      sty	PF1R	; possibly too early?
    912  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    913  4148		       84 0f		      sty	PF2R	;3
    914  414a					      endif
    915  414a
    916  414a					      ifnconst	player1colors
    917  414a		       2a		      rol		;2
    918  414b		       2a		      rol		;2
    919  414c		       85 1e		      sta	ENAM1	;3
    920  414e				  -	      else
    921  414e				  -	      ifnconst	playercolors
    922  414e				  -	      sleep	7
    923  414e				  -	      else
    924  414e				  -	      lda.w	player0colorstore
    925  414e				  -	      sta	COLUP0
    926  414e				  -	      endif
    927  414e					      endif
    928  414e
    929  414e		       ad 8e 00 	      lda.w	player0height
    930  4151		       c7 85		      dcp	player0y
    931  4153		       90 11		      bcc	.skipDrawlastP0
    932  4155		       a4 85		      ldy	player0y
    933  4157		       b1 8a		      lda	(player0pointer),y
    934  4159				   .continuelastP0
    935  4159		       85 1b		      sta	GRP0
    936  415b
    937  415b
    938  415b
    939  415b					      ifnconst	no_blank_lines
    940  415b		       a5 90		      lda	missile0height	;3
    941  415d		       c7 91		      dcp	missile0y	;5
    942  415f		       e5 f6		      sbc	stack1
    943  4161		       85 1d		      sta	ENAM0	;3
    944  4163		       4c 06 f1 	      jmp	.endkerloop
    945  4166				  -	      else
    946  4166				  -	      ifconst	readpaddle
    947  4166				  -	      ldy	currentpaddle
    948  4166				  -	      lda	INPT0,y
    949  4166				  -	      bpl	noreadpaddle2
    950  4166				  -	      inc	paddle
    951  4166				  -	      jmp	.endkerloop
    952  4166				  -noreadpaddle2
    953  4166				  -	      sleep	4
    954  4166				  -	      jmp	.endkerloop
    955  4166				  -	      else		; no_blank_lines and no paddle reading
    956  4166				  -	      pla
    957  4166				  -	      pha		; 14 cycles in 4 bytes
    958  4166				  -	      pla
    959  4166				  -	      pha
    960  4166				  -			; sleep 14
    961  4166				  -	      jmp	.endkerloop
    962  4166				  -	      endif
    963  4166					      endif
    964  4166
    965  4166
    966  4166							; ifconst donepaddleskip
    967  4166							;paddleskipread
    968  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    969  4166							; plus we get a lo-res paddle read
    970  4166							; bmi donepaddleskip
    971  4166							; endif
    972  4166
    973  4166				   .skipDrawlastP0
    974  4166		       a9 00		      lda	#0
    975  4168		       a8		      tay
    976  4169		       4c 59 f1 	      jmp	.continuelastP0
    977  416c
    978  416c				  -	      ifconst	no_blank_lines
    979  416c				  -no_blank_lines_bailout
    980  416c				  -	      ldx	#0
    981  416c					      endif
    982  416c
    983  416c				   endkernel
    984  416c							; 6 digit score routine
    985  416c		       86 0e		      stx	PF1
    986  416e		       86 0f		      stx	PF2
    987  4170		       86 0d		      stx	PF0
    988  4172		       18		      clc
    989  4173
    990  4173				  -	      ifconst	pfrowheight
    991  4173				  -	      lda	#pfrowheight+2
    992  4173					      else
    993  4173					      ifnconst	pfres
    994  4173		       a9 0a		      lda	#10
    995  4175				  -	      else
    996  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    997  4175					      endif
    998  4175					      endif
    999  4175
   1000  4175		       e5 ef		      sbc	playfieldpos
   1001  4177		       85 ef		      sta	playfieldpos
   1002  4179		       8a		      txa
   1003  417a
   1004  417a				  -	      ifconst	shakescreen
   1005  417a				  -	      bit	shakescreen
   1006  417a				  -	      bmi	noshakescreen2
   1007  417a				  -	      ldx	#$3D
   1008  417a				  -noshakescreen2
   1009  417a					      endif
   1010  417a
   1011  417a		       95 02		      sta	WSYNC,x
   1012  417c
   1013  417c							; STA WSYNC ;first one, need one more
   1014  417c		       85 0b		      sta	REFP0
   1015  417e		       85 0c		      sta	REFP1
   1016  4180		       85 1b		      STA	GRP0
   1017  4182		       85 1c		      STA	GRP1
   1018  4184							; STA PF1
   1019  4184							; STA PF2
   1020  4184		       85 2b		      sta	HMCLR
   1021  4186		       85 1d		      sta	ENAM0
   1022  4188		       85 1e		      sta	ENAM1
   1023  418a		       85 1f		      sta	ENABL
   1024  418c
   1025  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1026  418e		       85 85		      sta	player0y
   1027  4190		       a5 9e		      lda	temp3
   1028  4192		       85 86		      sta	player1y
   1029  4194					      ifnconst	player1colors
   1030  4194		       a5 a1		      lda	temp6
   1031  4196		       85 88		      sta	missile1y
   1032  4198					      endif
   1033  4198					      ifnconst	playercolors
   1034  4198					      ifnconst	readpaddle
   1035  4198		       a5 a0		      lda	temp5
   1036  419a		       85 91		      sta	missile0y
   1037  419c					      endif
   1038  419c					      endif
   1039  419c		       a5 f7		      lda	stack2
   1040  419e		       85 89		      sta	bally
   1041  41a0
   1042  41a0							; REVENG - strangely, this isn't required any more. might have
   1043  41a0							; resulted from the no_blank_lines score bounce fix
   1044  41a0							;ifconst no_blank_lines
   1045  41a0							;sta WSYNC
   1046  41a0							;endif
   1047  41a0
   1048  41a0		       ad 84 02 	      lda	INTIM
   1049  41a3		       18		      clc
   1050  41a4					      ifnconst	vblank_time
   1051  41a4		       69 8e		      adc	#43+12+87
   1052  41a6				  -	      else
   1053  41a6				  -	      adc	#vblank_time+12+87
   1054  41a6				  -
   1055  41a6					      endif
   1056  41a6							; sta WSYNC
   1057  41a6		       8d 96 02 	      sta	TIM64T
   1058  41a9
   1059  41a9				  -	      ifconst	minikernel
   1060  41a9				  -	      jsr	minikernel
   1061  41a9					      endif
   1062  41a9
   1063  41a9							; now reassign temp vars for score pointers
   1064  41a9
   1065  41a9							; score pointers contain:
   1066  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1067  41a9							; swap lo2->temp1
   1068  41a9							; swap lo4->temp3
   1069  41a9							; swap lo6->temp5
   1070  41a9					      ifnconst	noscore
   1071  41a9		       a5 97		      lda	scorepointers+1
   1072  41ab							; ldy temp1
   1073  41ab		       85 9c		      sta	temp1
   1074  41ad							; sty scorepointers+1
   1075  41ad
   1076  41ad		       a5 99		      lda	scorepointers+3
   1077  41af							; ldy temp3
   1078  41af		       85 9e		      sta	temp3
   1079  41b1							; sty scorepointers+3
   1080  41b1
   1081  41b1
   1082  41b1		       85 2b		      sta	HMCLR
   1083  41b3		       ba		      tsx
   1084  41b4		       86 f6		      stx	stack1
   1085  41b6		       a2 e0		      ldx	#$E0
   1086  41b8		       86 20		      stx	HMP0
   1087  41ba
   1088  41ba		       a5 a3		      LDA	scorecolor
   1089  41bc		       85 06		      STA	COLUP0
   1090  41be		       85 07		      STA	COLUP1
   1091  41c0					      ifconst	scorefade
   1092  41c0		       85 f7		      STA	stack2
   1093  41c2					      endif
   1094  41c2				  -	      ifconst	pfscore
   1095  41c2				  -	      lda	pfscorecolor
   1096  41c2				  -	      sta	COLUPF
   1097  41c2					      endif
   1098  41c2		       85 02		      sta	WSYNC
   1099  41c4		       a2 00		      ldx	#0
   1100  41c6		       86 1b		      STx	GRP0
   1101  41c8		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1102  41ca
   1103  41ca		       a5 9b		      lda	scorepointers+5
   1104  41cc							; ldy temp5
   1105  41cc		       95 a0		      sta	temp5,x
   1106  41ce							; sty scorepointers+5
   1107  41ce		       a9 ff		      lda	#>scoretable
   1108  41d0		       85 97		      sta	scorepointers+1
   1109  41d2		       85 99		      sta	scorepointers+3
   1110  41d4		       85 9b		      sta	scorepointers+5
   1111  41d6		       85 9d		      sta	temp2
   1112  41d8		       85 9f		      sta	temp4
   1113  41da		       85 a1		      sta	temp6
   1114  41dc		       a0 07		      LDY	#7
   1115  41de		       84 25		      STY	VDELP0
   1116  41e0		       85 10		      STA	RESP0
   1117  41e2		       85 11		      STA	RESP1
   1118  41e4
   1119  41e4
   1120  41e4		       a9 03		      LDA	#$03
   1121  41e6		       85 04		      STA	NUSIZ0
   1122  41e8		       85 05		      STA	NUSIZ1
   1123  41ea		       85 26		      STA	VDELP1
   1124  41ec		       a9 f0		      LDA	#$F0
   1125  41ee		       85 21		      STA	HMP1
   1126  41f0		       b1 96		      lda	(scorepointers),y
   1127  41f2		       85 1b		      sta	GRP0
   1128  41f4		       85 2a		      STA	HMOVE	; cycle 73 ?
   1129  41f6		       4c 07 f2 	      jmp	beginscore
   1130  41f9
   1131  41f9
   1132  41f9					      if	((<*)>$d4)
   1133  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1134  4200					      endif
   1135  4200
   1136  4200				   loop2
   1137  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1138  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1139  4204				  -	      ifconst	pfscore
   1140  4204				  -	      lda.w	pfscore1
   1141  4204				  -	      sta	PF1
   1142  4204					      else
   1143  4204					      ifconst	scorefade
      0  4204					      sleep	2
      1  4204				   .CYCLES    SET	2
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204				  -	      IF	.CYCLES & 1
      9  4204				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204				  -	      nop	0
     11  4204				  -	      ELSE
     12  4204				  -	      bit	VSYNC
     13  4204				  -	      ENDIF
     14  4204				  -.CYCLES    SET	.CYCLES - 3
     15  4204					      ENDIF
     16  4204
     17  4204					      REPEAT	.CYCLES / 2
     18  4204		       ea		      nop
     19  4205					      REPEND
   1145  4205		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
   1146  4207				  -	      else
   1147  4207				  -	      sleep	7
   1148  4207					      endif
   1149  4207					      endif
   1150  4207							; cycle 0
   1151  4207				   beginscore
   1152  4207		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1153  4209		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1154  420b		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1155  420d		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1156  420f		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1157  4211		       9a		      txs
   1158  4212		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1159  4214					      ifconst	scorefade
   1160  4214		       a5 f7		      lda	stack2
   1161  4216				  -	      else
   1162  4216				  -	      sleep	3
   1163  4216					      endif
   1164  4216
   1165  4216				  -	      ifconst	pfscore
   1166  4216				  -	      lda	pfscore2
   1167  4216				  -	      sta	PF1
   1168  4216					      else
   1169  4216					      ifconst	scorefade
   1170  4216		       85 06		      sta	COLUP0
   1171  4218		       85 07		      sta	COLUP1
   1172  421a				  -	      else
   1173  421a				  -	      sleep	6
   1174  421a					      endif
   1175  421a					      endif
   1176  421a
   1177  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1178  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1179  421e		       ba		      tsx
   1180  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1181  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1182  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1183  4225		       88		      dey
   1184  4226		       10 d8		      bpl	loop2	;+2 60 180
   1185  4228
   1186  4228		       a6 f6		      ldx	stack1
   1187  422a		       9a		      txs
   1188  422b							; lda scorepointers+1
   1189  422b		       a4 9c		      ldy	temp1
   1190  422d							; sta temp1
   1191  422d		       84 97		      sty	scorepointers+1
   1192  422f
   1193  422f		       a9 00		      LDA	#0
   1194  4231		       85 0e		      sta	PF1
   1195  4233		       85 1b		      STA	GRP0
   1196  4235		       85 1c		      STA	GRP1
   1197  4237		       85 25		      STA	VDELP0
   1198  4239		       85 26		      STA	VDELP1	;do we need these
   1199  423b		       85 04		      STA	NUSIZ0
   1200  423d		       85 05		      STA	NUSIZ1
   1201  423f
   1202  423f							; lda scorepointers+3
   1203  423f		       a4 9e		      ldy	temp3
   1204  4241							; sta temp3
   1205  4241		       84 99		      sty	scorepointers+3
   1206  4243
   1207  4243							; lda scorepointers+5
   1208  4243		       a4 a0		      ldy	temp5
   1209  4245							; sta temp5
   1210  4245		       84 9b		      sty	scorepointers+5
   1211  4247					      endif		;noscore
   1212  4247		       a9 c2		      LDA	#%11000010
   1213  4249		       85 02		      sta	WSYNC
   1214  424b		       85 01		      STA	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1216  4250
   1217  4250				  -	      ifconst	shakescreen
   1218  4250				  -doshakescreen
   1219  4250				  -	      bit	shakescreen
   1220  4250				  -	      bmi	noshakescreen
   1221  4250				  -	      sta	WSYNC
   1222  4250				  -noshakescreen
   1223  4250				  -	      ldx	missile0height
   1224  4250				  -	      inx
   1225  4250				  -	      rts
   1226  4250					      endif
   1227  4250
   1228  4250				   start
   1229  4250		       78		      sei
   1230  4251		       d8		      cld
   1231  4252		       a0 00		      ldy	#0
   1232  4254		       a5 d0		      lda	$D0
   1233  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1234  4258		       d0 07		      bne	MachineIs2600
   1235  425a		       a5 d1		      lda	$D1
   1236  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1237  425e		       d0 01		      bne	MachineIs2600
   1238  4260		       88		      dey
   1239  4261				   MachineIs2600
   1240  4261		       a2 00		      ldx	#0
   1241  4263		       8a		      txa
   1242  4264				   clearmem
   1243  4264		       e8		      inx
   1244  4265		       9a		      txs
   1245  4266		       48		      pha
   1246  4267		       d0 fb		      bne	clearmem
   1247  4269		       84 9c		      sty	temp1
   1248  426b					      ifnconst	multisprite
   1249  426b				  -	      ifconst	pfrowheight
   1250  426b				  -	      lda	#pfrowheight
   1251  426b					      else
   1252  426b				  -	      ifconst	pfres
   1253  426b				  -	      lda	#(96/pfres)
   1254  426b					      else
   1255  426b		       a9 08		      lda	#8
   1256  426d					      endif
   1257  426d					      endif
   1258  426d		       85 ef		      sta	playfieldpos
   1259  426f					      endif
   1260  426f		       a2 05		      ldx	#5
   1261  4271				   initscore
   1262  4271		       a9 74		      lda	#<scoretable
   1263  4273		       95 96		      sta	scorepointers,x
   1264  4275		       ca		      dex
   1265  4276		       10 f9		      bpl	initscore
   1266  4278		       a9 01		      lda	#1
   1267  427a		       85 0a		      sta	CTRLPF
   1268  427c		       0d 84 02 	      ora	INTIM
   1269  427f		       85 a2		      sta	rand
   1270  4281
   1271  4281				  -	      ifconst	multisprite
   1272  4281				  -	      jsr	multisprite_setup
   1273  4281					      endif
   1274  4281
   1275  4281				  -	      ifnconst	bankswitch
   1276  4281				  -	      jmp	game
   1277  4281					      else
   1278  4281		       a9 8f		      lda	#>(game-1)
   1279  4283		       48		      pha
   1280  4284		       a9 ff		      lda	#<(game-1)
   1281  4286		       48		      pha
   1282  4287		       48		      pha
   1283  4288		       48		      pha
   1284  4289		       a2 01		      ldx	#1
   1285  428b		       4c eb ff 	      jmp	BS_jsr
   1286  428e					      endif
   1287  428e							; playfield drawing routines
   1288  428e							; you get a 32x12 bitmapped display in a single color :)
   1289  428e							; 0-31 and 0-11
   1290  428e
   1291  428e				   pfclear		; clears playfield - or fill with pattern
   1292  428e				  -	      ifconst	pfres
   1293  428e				  -	      ldx	#pfres*pfwidth-1
   1294  428e					      else
   1295  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1296  4290					      endif
   1297  4290				   pfclear_loop
   1298  4290					      ifnconst	superchip
   1299  4290		       95 a4		      sta	playfield,x
   1300  4292				  -	      else
   1301  4292				  -	      sta	playfield-128,x
   1302  4292					      endif
   1303  4292		       ca		      dex
   1304  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1306  4298
   1307  4298				   setuppointers
   1308  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1309  429a		       aa		      tax		; put x-value in x 
   1310  429b		       4a		      lsr
   1311  429c		       4a		      lsr
   1312  429d		       4a		      lsr		; divide x pos by 8 
   1313  429e		       85 9c		      sta	temp1
   1314  42a0		       98		      tya
   1315  42a1		       0a		      asl
   1316  42a2					      if	pfwidth=4
   1317  42a2		       0a		      asl		; multiply y pos by 4
   1318  42a3					      endif		; else multiply by 2
   1319  42a3		       18		      clc
   1320  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1321  42a6		       a8		      tay		; put the value in y
   1322  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1323  42a9		       60		      rts
   1324  42aa
   1325  42aa				   pfread
   1326  42aa							;x=xvalue, y=yvalue
   1327  42aa		       20 98 f2 	      jsr	setuppointers
   1328  42ad		       bd 42 f3 	      lda	setbyte,x
   1329  42b0		       39 a4 00 	      and	playfield,y
   1330  42b3		       5d 42 f3 	      eor	setbyte,x
   1331  42b6							; beq readzero
   1332  42b6							; lda #1
   1333  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1335  42b9
   1336  42b9				   pfpixel
   1337  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1338  42b9		       20 98 f2 	      jsr	setuppointers
   1339  42bc
   1340  42bc					      ifconst	bankswitch
   1341  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1342  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1343  42c0		       4a		      lsr
   1344  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1345  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1346  42c6		       5d 42 f3 	      eor	setbyte,x
   1347  42c9				  -	      ifconst	superchip
   1348  42c9				  -	      sta	playfield-128,y
   1349  42c9					      else
   1350  42c9		       99 a4 00 	      sta	playfield,y
   1351  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1353  42cf				   pixelon_r
   1354  42cf		       b9 a4 00 	      lda	playfield,y
   1355  42d2		       1d 42 f3 	      ora	setbyte,x
   1356  42d5				  -	      ifconst	superchip
   1357  42d5				  -	      sta	playfield-128,y
   1358  42d5					      else
   1359  42d5		       99 a4 00 	      sta	playfield,y
   1360  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1362  42db				   pixeloff_r
   1363  42db		       bd 42 f3 	      lda	setbyte,x
   1364  42de		       49 ff		      eor	#$ff
   1365  42e0		       39 a4 00 	      and	playfield,y
   1366  42e3				  -	      ifconst	superchip
   1367  42e3				  -	      sta	playfield-128,y
   1368  42e3					      else
   1369  42e3		       99 a4 00 	      sta	playfield,y
   1370  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1372  42e9
   1373  42e9				  -	      else
   1374  42e9				  -	      jmp	plotpoint
   1375  42e9					      endif
   1376  42e9
   1377  42e9				   pfhline
   1378  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1379  42e9		       20 98 f2 	      jsr	setuppointers
   1380  42ec		       4c f6 f2 	      jmp	noinc
   1381  42ef				   keepgoing
   1382  42ef		       e8		      inx
   1383  42f0		       8a		      txa
   1384  42f1		       29 07		      and	#7
   1385  42f3		       d0 01		      bne	noinc
   1386  42f5		       c8		      iny
   1387  42f6				   noinc
   1388  42f6		       20 1b f3 	      jsr	plotpoint
   1389  42f9		       e4 9e		      cpx	temp3
   1390  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1392  4300
   1393  4300				   pfvline
   1394  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1395  4300		       20 98 f2 	      jsr	setuppointers
   1396  4303		       84 9c		      sty	temp1	; store memory location offset
   1397  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1398  4307		       a5 9e		      lda	temp3
   1399  4309		       0a		      asl
   1400  430a					      if	pfwidth=4
   1401  430a		       0a		      asl		; multiply by 4
   1402  430b					      endif		; else multiply by 2
   1403  430b		       85 9e		      sta	temp3	; store it
   1404  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1405  430d							; right now, temp1=y=starting memory location, temp3=final
   1406  430d							; x should equal original x value
   1407  430d				   keepgoingy
   1408  430d		       20 1b f3 	      jsr	plotpoint
   1409  4310		       c8		      iny
   1410  4311		       c8		      iny
   1411  4312					      if	pfwidth=4
   1412  4312		       c8		      iny
   1413  4313		       c8		      iny
   1414  4314					      endif
   1415  4314		       c4 9e		      cpy	temp3
   1416  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1418  431b
   1419  431b				   plotpoint
   1420  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1421  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1422  431f		       4a		      lsr
   1423  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1424  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1425  4325		       5d 42 f3 	      eor	setbyte,x
   1426  4328				  -	      ifconst	superchip
   1427  4328				  -	      sta	playfield-128,y
   1428  4328					      else
   1429  4328		       99 a4 00 	      sta	playfield,y
   1430  432b					      endif
   1431  432b		       60		      rts
   1432  432c				   pixelon
   1433  432c		       b9 a4 00 	      lda	playfield,y
   1434  432f		       1d 42 f3 	      ora	setbyte,x
   1435  4332				  -	      ifconst	superchip
   1436  4332				  -	      sta	playfield-128,y
   1437  4332					      else
   1438  4332		       99 a4 00 	      sta	playfield,y
   1439  4335					      endif
   1440  4335		       60		      rts
   1441  4336				   pixeloff
   1442  4336		       bd 42 f3 	      lda	setbyte,x
   1443  4339		       49 ff		      eor	#$ff
   1444  433b		       39 a4 00 	      and	playfield,y
   1445  433e				  -	      ifconst	superchip
   1446  433e				  -	      sta	playfield-128,y
   1447  433e					      else
   1448  433e		       99 a4 00 	      sta	playfield,y
   1449  4341					      endif
   1450  4341		       60		      rts
   1451  4342
   1452  4342				   setbyte
   1453  4342					      ifnconst	pfcenter
   1454  4342		       80		      .byte.b	$80
   1455  4343		       40		      .byte.b	$40
   1456  4344		       20		      .byte.b	$20
   1457  4345		       10		      .byte.b	$10
   1458  4346		       08		      .byte.b	$08
   1459  4347		       04		      .byte.b	$04
   1460  4348		       02		      .byte.b	$02
   1461  4349		       01		      .byte.b	$01
   1462  434a					      endif
   1463  434a		       01		      .byte.b	$01
   1464  434b		       02		      .byte.b	$02
   1465  434c		       04		      .byte.b	$04
   1466  434d		       08		      .byte.b	$08
   1467  434e		       10		      .byte.b	$10
   1468  434f		       20		      .byte.b	$20
   1469  4350		       40		      .byte.b	$40
   1470  4351		       80		      .byte.b	$80
   1471  4352		       80		      .byte.b	$80
   1472  4353		       40		      .byte.b	$40
   1473  4354		       20		      .byte.b	$20
   1474  4355		       10		      .byte.b	$10
   1475  4356		       08		      .byte.b	$08
   1476  4357		       04		      .byte.b	$04
   1477  4358		       02		      .byte.b	$02
   1478  4359		       01		      .byte.b	$01
   1479  435a		       01		      .byte.b	$01
   1480  435b		       02		      .byte.b	$02
   1481  435c		       04		      .byte.b	$04
   1482  435d		       08		      .byte.b	$08
   1483  435e		       10		      .byte.b	$10
   1484  435f		       20		      .byte.b	$20
   1485  4360		       40		      .byte.b	$40
   1486  4361		       80		      .byte.b	$80
   1487  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1488  4362		       d0 15		      bne	notleft
   1489  4364							;left
   1490  4364				  -	      ifconst	pfres
   1491  4364				  -	      ldx	#pfres*4
   1492  4364					      else
   1493  4364		       a2 30		      ldx	#48
   1494  4366					      endif
   1495  4366				   leftloop
   1496  4366		       b5 a3		      lda	playfield-1,x
   1497  4368		       4a		      lsr
   1498  4369
   1499  4369				  -	      ifconst	superchip
   1500  4369				  -	      lda	playfield-2,x
   1501  4369				  -	      rol
   1502  4369				  -	      sta	playfield-130,x
   1503  4369				  -	      lda	playfield-3,x
   1504  4369				  -	      ror
   1505  4369				  -	      sta	playfield-131,x
   1506  4369				  -	      lda	playfield-4,x
   1507  4369				  -	      rol
   1508  4369				  -	      sta	playfield-132,x
   1509  4369				  -	      lda	playfield-1,x
   1510  4369				  -	      ror
   1511  4369				  -	      sta	playfield-129,x
   1512  4369					      else
   1513  4369		       36 a2		      rol	playfield-2,x
   1514  436b		       76 a1		      ror	playfield-3,x
   1515  436d		       36 a0		      rol	playfield-4,x
   1516  436f		       76 a3		      ror	playfield-1,x
   1517  4371					      endif
   1518  4371
   1519  4371		       8a		      txa
   1520  4372		       cb 04		      sbx	#4
   1521  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1523  4379
   1524  4379				   notleft
   1525  4379		       4a		      lsr
   1526  437a		       90 15		      bcc	notright
   1527  437c							;right
   1528  437c
   1529  437c				  -	      ifconst	pfres
   1530  437c				  -	      ldx	#pfres*4
   1531  437c					      else
   1532  437c		       a2 30		      ldx	#48
   1533  437e					      endif
   1534  437e				   rightloop
   1535  437e		       b5 a0		      lda	playfield-4,x
   1536  4380		       4a		      lsr
   1537  4381				  -	      ifconst	superchip
   1538  4381				  -	      lda	playfield-3,x
   1539  4381				  -	      rol
   1540  4381				  -	      sta	playfield-131,x
   1541  4381				  -	      lda	playfield-2,x
   1542  4381				  -	      ror
   1543  4381				  -	      sta	playfield-130,x
   1544  4381				  -	      lda	playfield-1,x
   1545  4381				  -	      rol
   1546  4381				  -	      sta	playfield-129,x
   1547  4381				  -	      lda	playfield-4,x
   1548  4381				  -	      ror
   1549  4381				  -	      sta	playfield-132,x
   1550  4381					      else
   1551  4381		       36 a1		      rol	playfield-3,x
   1552  4383		       76 a2		      ror	playfield-2,x
   1553  4385		       36 a3		      rol	playfield-1,x
   1554  4387		       76 a0		      ror	playfield-4,x
   1555  4389					      endif
   1556  4389		       8a		      txa
   1557  438a		       cb 04		      sbx	#4
   1558  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1560  4391
   1561  4391				   notright
   1562  4391		       4a		      lsr
   1563  4392		       90 4b		      bcc	notup
   1564  4394							;up
   1565  4394		       4a		      lsr
   1566  4395		       90 02		      bcc	onedecup
   1567  4397		       c6 ef		      dec	playfieldpos
   1568  4399				   onedecup
   1569  4399		       c6 ef		      dec	playfieldpos
   1570  439b		       f0 02		      beq	shiftdown
   1571  439d		       10 3d		      bpl	noshiftdown2
   1572  439f				   shiftdown
   1573  439f				  -	      ifconst	pfrowheight
   1574  439f				  -	      lda	#pfrowheight
   1575  439f					      else
   1576  439f					      ifnconst	pfres
   1577  439f		       a9 08		      lda	#8
   1578  43a1				  -	      else
   1579  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1580  43a1					      endif
   1581  43a1					      endif
   1582  43a1
   1583  43a1		       85 ef		      sta	playfieldpos
   1584  43a3		       a5 a7		      lda	playfield+3
   1585  43a5		       85 9f		      sta	temp4
   1586  43a7		       a5 a6		      lda	playfield+2
   1587  43a9		       85 9e		      sta	temp3
   1588  43ab		       a5 a5		      lda	playfield+1
   1589  43ad		       85 9d		      sta	temp2
   1590  43af		       a5 a4		      lda	playfield
   1591  43b1		       85 9c		      sta	temp1
   1592  43b3		       a2 00		      ldx	#0
   1593  43b5				   up2
   1594  43b5		       b5 a8		      lda	playfield+4,x
   1595  43b7				  -	      ifconst	superchip
   1596  43b7				  -	      sta	playfield-128,x
   1597  43b7				  -	      lda	playfield+5,x
   1598  43b7				  -	      sta	playfield-127,x
   1599  43b7				  -	      lda	playfield+6,x
   1600  43b7				  -	      sta	playfield-126,x
   1601  43b7				  -	      lda	playfield+7,x
   1602  43b7				  -	      sta	playfield-125,x
   1603  43b7					      else
   1604  43b7		       95 a4		      sta	playfield,x
   1605  43b9		       b5 a9		      lda	playfield+5,x
   1606  43bb		       95 a5		      sta	playfield+1,x
   1607  43bd		       b5 aa		      lda	playfield+6,x
   1608  43bf		       95 a6		      sta	playfield+2,x
   1609  43c1		       b5 ab		      lda	playfield+7,x
   1610  43c3		       95 a7		      sta	playfield+3,x
   1611  43c5					      endif
   1612  43c5		       8a		      txa
   1613  43c6		       cb fc		      sbx	#252
   1614  43c8				  -	      ifconst	pfres
   1615  43c8				  -	      cpx	#(pfres-1)*4
   1616  43c8					      else
   1617  43c8		       e0 2c		      cpx	#44
   1618  43ca					      endif
   1619  43ca		       d0 e9		      bne	up2
   1620  43cc
   1621  43cc		       a5 9f		      lda	temp4
   1622  43ce
   1623  43ce				  -	      ifconst	superchip
   1624  43ce				  -	      ifconst	pfres
   1625  43ce				  -	      sta	playfield+pfres*4-129
   1626  43ce				  -	      lda	temp3
   1627  43ce				  -	      sta	playfield+pfres*4-130
   1628  43ce				  -	      lda	temp2
   1629  43ce				  -	      sta	playfield+pfres*4-131
   1630  43ce				  -	      lda	temp1
   1631  43ce				  -	      sta	playfield+pfres*4-132
   1632  43ce				  -	      else
   1633  43ce				  -	      sta	playfield+47-128
   1634  43ce				  -	      lda	temp3
   1635  43ce				  -	      sta	playfield+46-128
   1636  43ce				  -	      lda	temp2
   1637  43ce				  -	      sta	playfield+45-128
   1638  43ce				  -	      lda	temp1
   1639  43ce				  -	      sta	playfield+44-128
   1640  43ce				  -	      endif
   1641  43ce					      else
   1642  43ce				  -	      ifconst	pfres
   1643  43ce				  -	      sta	playfield+pfres*4-1
   1644  43ce				  -	      lda	temp3
   1645  43ce				  -	      sta	playfield+pfres*4-2
   1646  43ce				  -	      lda	temp2
   1647  43ce				  -	      sta	playfield+pfres*4-3
   1648  43ce				  -	      lda	temp1
   1649  43ce				  -	      sta	playfield+pfres*4-4
   1650  43ce					      else
   1651  43ce		       85 d3		      sta	playfield+47
   1652  43d0		       a5 9e		      lda	temp3
   1653  43d2		       85 d2		      sta	playfield+46
   1654  43d4		       a5 9d		      lda	temp2
   1655  43d6		       85 d1		      sta	playfield+45
   1656  43d8		       a5 9c		      lda	temp1
   1657  43da		       85 d0		      sta	playfield+44
   1658  43dc					      endif
   1659  43dc					      endif
   1660  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1662  43df
   1663  43df
   1664  43df				   notup
   1665  43df							;down
   1666  43df		       4a		      lsr
   1667  43e0		       b0 02		      bcs	oneincup
   1668  43e2		       e6 ef		      inc	playfieldpos
   1669  43e4				   oneincup
   1670  43e4		       e6 ef		      inc	playfieldpos
   1671  43e6		       a5 ef		      lda	playfieldpos
   1672  43e8
   1673  43e8				  -	      ifconst	pfrowheight
   1674  43e8				  -	      cmp	#pfrowheight+1
   1675  43e8					      else
   1676  43e8					      ifnconst	pfres
   1677  43e8		       c9 09		      cmp	#9
   1678  43ea				  -	      else
   1679  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1680  43ea					      endif
   1681  43ea					      endif
   1682  43ea
   1683  43ea		       90 3b		      bcc	noshiftdown
   1684  43ec		       a9 01		      lda	#1
   1685  43ee		       85 ef		      sta	playfieldpos
   1686  43f0
   1687  43f0				  -	      ifconst	pfres
   1688  43f0				  -	      lda	playfield+pfres*4-1
   1689  43f0				  -	      sta	temp4
   1690  43f0				  -	      lda	playfield+pfres*4-2
   1691  43f0				  -	      sta	temp3
   1692  43f0				  -	      lda	playfield+pfres*4-3
   1693  43f0				  -	      sta	temp2
   1694  43f0				  -	      lda	playfield+pfres*4-4
   1695  43f0					      else
   1696  43f0		       a5 d3		      lda	playfield+47
   1697  43f2		       85 9f		      sta	temp4
   1698  43f4		       a5 d2		      lda	playfield+46
   1699  43f6		       85 9e		      sta	temp3
   1700  43f8		       a5 d1		      lda	playfield+45
   1701  43fa		       85 9d		      sta	temp2
   1702  43fc		       a5 d0		      lda	playfield+44
   1703  43fe					      endif
   1704  43fe
   1705  43fe		       85 9c		      sta	temp1
   1706  4400
   1707  4400				  -	      ifconst	pfres
   1708  4400				  -	      ldx	#(pfres-1)*4
   1709  4400					      else
   1710  4400		       a2 2c		      ldx	#44
   1711  4402					      endif
   1712  4402				   down2
   1713  4402		       b5 a3		      lda	playfield-1,x
   1714  4404				  -	      ifconst	superchip
   1715  4404				  -	      sta	playfield-125,x
   1716  4404				  -	      lda	playfield-2,x
   1717  4404				  -	      sta	playfield-126,x
   1718  4404				  -	      lda	playfield-3,x
   1719  4404				  -	      sta	playfield-127,x
   1720  4404				  -	      lda	playfield-4,x
   1721  4404				  -	      sta	playfield-128,x
   1722  4404					      else
   1723  4404		       95 a7		      sta	playfield+3,x
   1724  4406		       b5 a2		      lda	playfield-2,x
   1725  4408		       95 a6		      sta	playfield+2,x
   1726  440a		       b5 a1		      lda	playfield-3,x
   1727  440c		       95 a5		      sta	playfield+1,x
   1728  440e		       b5 a0		      lda	playfield-4,x
   1729  4410		       95 a4		      sta	playfield,x
   1730  4412					      endif
   1731  4412		       8a		      txa
   1732  4413		       cb 04		      sbx	#4
   1733  4415		       d0 eb		      bne	down2
   1734  4417
   1735  4417		       a5 9f		      lda	temp4
   1736  4419				  -	      ifconst	superchip
   1737  4419				  -	      sta	playfield-125
   1738  4419				  -	      lda	temp3
   1739  4419				  -	      sta	playfield-126
   1740  4419				  -	      lda	temp2
   1741  4419				  -	      sta	playfield-127
   1742  4419				  -	      lda	temp1
   1743  4419				  -	      sta	playfield-128
   1744  4419					      else
   1745  4419		       85 a7		      sta	playfield+3
   1746  441b		       a5 9e		      lda	temp3
   1747  441d		       85 a6		      sta	playfield+2
   1748  441f		       a5 9d		      lda	temp2
   1749  4421		       85 a5		      sta	playfield+1
   1750  4423		       a5 9c		      lda	temp1
   1751  4425		       85 a4		      sta	playfield
   1752  4427					      endif
   1753  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1755  442a							;standard routines needed for pretty much all games
   1756  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1757  442a							; repositioning code and score pointer setup moved to overscan
   1758  442a							; read switches, joysticks now compiler generated (more efficient)
   1759  442a
   1760  442a				   randomize
   1761  442a		       a5 a2		      lda	rand
   1762  442c		       4a		      lsr
   1763  442d				  -	      ifconst	rand16
   1764  442d				  -	      rol	rand16
   1765  442d					      endif
   1766  442d		       90 02		      bcc	noeor
   1767  442f		       49 b4		      eor	#$B4
   1768  4431				   noeor
   1769  4431		       85 a2		      sta	rand
   1770  4433				  -	      ifconst	rand16
   1771  4433				  -	      eor	rand16
   1772  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1774  4436				   drawscreen
   1775  4436				  -	      ifconst	debugscore
   1776  4436				  -	      ldx	#14
   1777  4436				  -	      lda	INTIM	; display # cycles left in the score
   1778  4436				  -
   1779  4436				  -	      ifconst	mincycles
   1780  4436				  -	      lda	mincycles
   1781  4436				  -	      cmp	INTIM
   1782  4436				  -	      lda	mincycles
   1783  4436				  -	      bcc	nochange
   1784  4436				  -	      lda	INTIM
   1785  4436				  -	      sta	mincycles
   1786  4436				  -nochange
   1787  4436				  -	      endif
   1788  4436				  -
   1789  4436				  -			; cmp #$2B
   1790  4436				  -			; bcs no_cycles_left
   1791  4436				  -	      bmi	cycles_left
   1792  4436				  -	      ldx	#64
   1793  4436				  -	      eor	#$ff	;make negative
   1794  4436				  -cycles_left
   1795  4436				  -	      stx	scorecolor
   1796  4436				  -	      and	#$7f	; clear sign bit
   1797  4436				  -	      tax
   1798  4436				  -	      lda	scorebcd,x
   1799  4436				  -	      sta	score+2
   1800  4436				  -	      lda	scorebcd1,x
   1801  4436				  -	      sta	score+1
   1802  4436				  -	      jmp	done_debugscore
   1803  4436				  -scorebcd
   1804  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1805  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1806  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1807  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1808  4436				  -scorebcd1
   1809  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1810  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1811  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1812  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1813  4436				  -done_debugscore
   1814  4436					      endif
   1815  4436
   1816  4436				  -	      ifconst	debugcycles
   1817  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1818  4436				  -			; cmp #$2B
   1819  4436				  -			; BCC overscan
   1820  4436				  -	      bmi	overscan
   1821  4436				  -	      sta	COLUBK
   1822  4436				  -	      bcs	doneoverscan
   1823  4436					      endif
   1824  4436
   1825  4436				   overscan
   1826  4436				  -	      ifconst	interlaced
   1827  4436				  -	      PHP
   1828  4436				  -	      PLA
   1829  4436				  -	      EOR	#4	; flip interrupt bit
   1830  4436				  -	      PHA
   1831  4436				  -	      PLP
   1832  4436				  -	      AND	#4	; isolate the interrupt bit
   1833  4436				  -	      TAX		; save it for later
   1834  4436					      endif
   1835  4436
   1836  4436				   overscanloop
   1837  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1838  4439		       30 fb		      bmi	overscanloop
   1839  443b				   doneoverscan
   1840  443b
   1841  443b							;do VSYNC
   1842  443b
   1843  443b				  -	      ifconst	interlaced
   1844  443b				  -	      CPX	#4
   1845  443b				  -	      BNE	oddframevsync
   1846  443b					      endif
   1847  443b
   1848  443b		       a9 02		      lda	#2
   1849  443d		       85 02		      sta	WSYNC
   1850  443f		       85 00		      sta	VSYNC
   1851  4441		       85 02		      STA	WSYNC
   1852  4443		       85 02		      STA	WSYNC
   1853  4445		       4a		      lsr
   1854  4446		       85 02		      STA	WSYNC
   1855  4448		       85 00		      STA	VSYNC
   1856  444a		       85 01		      sta	VBLANK
   1857  444c					      ifnconst	overscan_time
   1858  444c		       a9 a5		      lda	#37+128
   1859  444e				  -	      else
   1860  444e				  -	      lda	#overscan_time+128
   1861  444e					      endif
   1862  444e		       8d 96 02 	      sta	TIM64T
   1863  4451
   1864  4451				  -	      ifconst	interlaced
   1865  4451				  -	      jmp	postsync
   1866  4451				  -
   1867  4451				  -oddframevsync
   1868  4451				  -	      sta	WSYNC
   1869  4451				  -
   1870  4451				  -	      LDA	($80,X)	; 11 waste
   1871  4451				  -	      LDA	($80,X)	; 11 waste
   1872  4451				  -	      LDA	($80,X)	; 11 waste
   1873  4451				  -
   1874  4451				  -	      lda	#2
   1875  4451				  -	      sta	VSYNC
   1876  4451				  -	      sta	WSYNC
   1877  4451				  -	      sta	WSYNC
   1878  4451				  -	      sta	WSYNC
   1879  4451				  -
   1880  4451				  -	      LDA	($80,X)	; 11 waste
   1881  4451				  -	      LDA	($80,X)	; 11 waste
   1882  4451				  -	      LDA	($80,X)	; 11 waste
   1883  4451				  -
   1884  4451				  -	      lda	#0
   1885  4451				  -	      sta	VSYNC
   1886  4451				  -	      sta	VBLANK
   1887  4451				  -	      ifnconst	overscan_time
   1888  4451				  -	      lda	#37+128
   1889  4451				  -	      else
   1890  4451				  -	      lda	#overscan_time+128
   1891  4451				  -	      endif
   1892  4451				  -	      sta	TIM64T
   1893  4451				  -
   1894  4451				  -postsync
   1895  4451					      endif
   1896  4451
   1897  4451				  -	      ifconst	legacy
   1898  4451				  -	      if	legacy < 100
   1899  4451				  -	      ldx	#4
   1900  4451				  -adjustloop
   1901  4451				  -	      lda	player0x,x
   1902  4451				  -	      sec
   1903  4451				  -	      sbc	#14	;?
   1904  4451				  -	      sta	player0x,x
   1905  4451				  -	      dex
   1906  4451				  -	      bpl	adjustloop
   1907  4451				  -	      endif
   1908  4451					      endif
   1909  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1910  4451				  -	      repeat	($fa-(<*))
   1911  4451				  -	      nop
   1912  4451				  -	      repend
   1913  4451					      endif
   1914  4451		       85 02		      sta	WSYNC
   1915  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1917  4457				   HorPosLoop		; 5
   1918  4457		       b5 80		      lda	player0x,X	;+4 9
   1919  4459		       38		      sec		;+2 11
   1920  445a				   DivideLoop
   1921  445a		       e9 0f		      sbc	#15
   1922  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1923  445e		       95 9c		      sta	temp1,X	;+4 19
   1924  4460		       95 10		      sta	RESP0,X	;+4 23
   1925  4462		       85 02		      sta	WSYNC
   1926  4464		       ca		      dex
   1927  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1928  4467							; 4
   1929  4467
   1930  4467		       a2 04		      ldx	#4
   1931  4469		       b4 9c		      ldy	temp1,X
   1932  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1933  446e		       95 20		      sta	HMP0,X	;+14 18
   1934  4470
   1935  4470		       ca		      dex
   1936  4471		       b4 9c		      ldy	temp1,X
   1937  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1938  4476		       95 20		      sta	HMP0,X	;+14 32
   1939  4478
   1940  4478		       ca		      dex
   1941  4479		       b4 9c		      ldy	temp1,X
   1942  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1943  447e		       95 20		      sta	HMP0,X	;+14 46
   1944  4480
   1945  4480		       ca		      dex
   1946  4481		       b4 9c		      ldy	temp1,X
   1947  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1948  4486		       95 20		      sta	HMP0,X	;+14 60
   1949  4488
   1950  4488		       ca		      dex
   1951  4489		       b4 9c		      ldy	temp1,X
   1952  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1953  448e		       95 20		      sta	HMP0,X	;+14 74
   1954  4490
   1955  4490		       85 02		      sta	WSYNC
   1956  4492
   1957  4492		       85 2a		      sta	HMOVE	;+3 3
   1958  4494
   1959  4494
   1960  4494				  -	      ifconst	legacy
   1961  4494				  -	      if	legacy < 100
   1962  4494				  -	      ldx	#4
   1963  4494				  -adjustloop2
   1964  4494				  -	      lda	player0x,x
   1965  4494				  -	      clc
   1966  4494				  -	      adc	#14	;?
   1967  4494				  -	      sta	player0x,x
   1968  4494				  -	      dex
   1969  4494				  -	      bpl	adjustloop2
   1970  4494				  -	      endif
   1971  4494					      endif
   1972  4494
   1973  4494
   1974  4494
   1975  4494
   1976  4494							;set score pointers
   1977  4494		       a7 95		      lax	score+2
   1978  4496		       20 c7 f4 	      jsr	scorepointerset
   1979  4499		       84 9b		      sty	scorepointers+5
   1980  449b		       86 98		      stx	scorepointers+2
   1981  449d		       a7 94		      lax	score+1
   1982  449f		       20 c7 f4 	      jsr	scorepointerset
   1983  44a2		       84 9a		      sty	scorepointers+4
   1984  44a4		       86 97		      stx	scorepointers+1
   1985  44a6		       a7 93		      lax	score
   1986  44a8		       20 c7 f4 	      jsr	scorepointerset
   1987  44ab		       84 99		      sty	scorepointers+3
   1988  44ad		       86 96		      stx	scorepointers
   1989  44af
   1990  44af				   vblk
   1991  44af							; run possible vblank bB code
   1992  44af				  -	      ifconst	vblank_bB_code
   1993  44af				  -	      jsr	vblank_bB_code
   1994  44af					      endif
   1995  44af				   vblk2
   1996  44af		       ad 84 02 	      LDA	INTIM
   1997  44b2		       30 fb		      bmi	vblk2
   1998  44b4		       4c 00 f0 	      jmp	kernel
   1999  44b7
   2000  44b7
   2001  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   2002  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   2003  44c7				   repostable
   2004  44c7
   2005  44c7				   scorepointerset
   2006  44c7		       29 0f		      and	#$0F
   2007  44c9		       0a		      asl
   2008  44ca		       0a		      asl
   2009  44cb		       0a		      asl
   2010  44cc		       69 74		      adc	#<scoretable
   2011  44ce		       a8		      tay
   2012  44cf		       8a		      txa
   2013  44d0							; and #$F0
   2014  44d0							; lsr
   2015  44d0		       4b f0		      asr	#$F0
   2016  44d2		       69 74		      adc	#<scoretable
   2017  44d4		       aa		      tax
   2018  44d5		       60		      rts
   2019  44d6							;bB.asm
   2020  44d6							; bB.asm file is split here
   2021  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2022  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2023  44d6					      endif
   2024  44d6		       00 01	   ECHOFIRST  =	1
   2025  44d6
   2026  44d6
   2027  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2028  44d6							; and keep the conditional compilation stuff intact
   2029  44d6				  -	      ifconst	ROM2k
   2030  44d6				  -	      ORG	$F7AC-8
   2031  44d6					      else
   2032  44d6					      ifconst	bankswitch
   2033  44d6				  -	      if	bankswitch == 8
   2034  44d6				  -	      ORG	$2F94-bscode_length
   2035  44d6				  -	      RORG	$FF94-bscode_length
   2036  44d6					      endif
   2037  44d6					      if	bankswitch == 16
   2038  4f74					      ORG	$4F94-bscode_length
   2039  4f74					      RORG	$FF94-bscode_length
   2040  4f74					      endif
   2041  4f74				  -	      if	bankswitch == 32
   2042  4f74				  -	      ORG	$8F94-bscode_length
   2043  4f74				  -	      RORG	$FF94-bscode_length
   2044  4f74					      endif
   2045  4f74				  -	      if	bankswitch == 64
   2046  4f74				  -	      ORG	$10F80-bscode_length
   2047  4f74				  -	      RORG	$1FF80-bscode_length
   2048  4f74					      endif
   2049  4f74				  -	      else
   2050  4f74				  -	      ORG	$FF9C
   2051  4f74					      endif
   2052  4f74					      endif
   2053  4f74
   2054  4f74							; font equates
   2055  4f74		       00 01	   .21stcentury =	1
   2056  4f74		       00 02	   alarmclock =	2
   2057  4f74		       00 03	   handwritten =	3
   2058  4f74		       00 04	   interrupted =	4
   2059  4f74		       00 05	   retroputer =	5
   2060  4f74		       00 06	   whimsey    =	6
   2061  4f74		       00 07	   tiny       =	7
   2062  4f74
   2063  4f74				   scoretable
   2064  4f74
   2065  4f74				  -	      ifconst	font
   2066  4f74				  -	      if	font == .21stcentury
   2067  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2068  4f74				  -	      endif
   2069  4f74				  -	      if	font == alarmclock
   2070  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2071  4f74				  -	      endif
   2072  4f74				  -	      if	font == handwritten
   2073  4f74				  -	      include	"score_graphics.asm.handwritten"
   2074  4f74				  -	      endif
   2075  4f74				  -	      if	font == interrupted
   2076  4f74				  -	      include	"score_graphics.asm.interrupted"
   2077  4f74				  -	      endif
   2078  4f74				  -	      if	font == retroputer
   2079  4f74				  -	      include	"score_graphics.asm.retroputer"
   2080  4f74				  -	      endif
   2081  4f74				  -	      if	font == whimsey
   2082  4f74				  -	      include	"score_graphics.asm.whimsey"
   2083  4f74				  -	      endif
   2084  4f74				  -	      if	font == tiny
   2085  4f74				  -	      include	"score_graphics.asm.tiny"
   2086  4f74				  -	      endif
   2087  4f74					      else		; default font
   2088  4f74
   2089  4f74		       3c		      .byte.b	%00111100
   2090  4f75		       66		      .byte.b	%01100110
   2091  4f76		       66		      .byte.b	%01100110
   2092  4f77		       66		      .byte.b	%01100110
   2093  4f78		       66		      .byte.b	%01100110
   2094  4f79		       66		      .byte.b	%01100110
   2095  4f7a		       66		      .byte.b	%01100110
   2096  4f7b		       3c		      .byte.b	%00111100
   2097  4f7c
   2098  4f7c		       7e		      .byte.b	%01111110
   2099  4f7d		       18		      .byte.b	%00011000
   2100  4f7e		       18		      .byte.b	%00011000
   2101  4f7f		       18		      .byte.b	%00011000
   2102  4f80		       18		      .byte.b	%00011000
   2103  4f81		       38		      .byte.b	%00111000
   2104  4f82		       18		      .byte.b	%00011000
   2105  4f83		       08		      .byte.b	%00001000
   2106  4f84
   2107  4f84		       7e		      .byte.b	%01111110
   2108  4f85		       60		      .byte.b	%01100000
   2109  4f86		       60		      .byte.b	%01100000
   2110  4f87		       3c		      .byte.b	%00111100
   2111  4f88		       06		      .byte.b	%00000110
   2112  4f89		       06		      .byte.b	%00000110
   2113  4f8a		       46		      .byte.b	%01000110
   2114  4f8b		       3c		      .byte.b	%00111100
   2115  4f8c
   2116  4f8c		       3c		      .byte.b	%00111100
   2117  4f8d		       46		      .byte.b	%01000110
   2118  4f8e		       06		      .byte.b	%00000110
   2119  4f8f		       06		      .byte.b	%00000110
   2120  4f90		       1c		      .byte.b	%00011100
   2121  4f91		       06		      .byte.b	%00000110
   2122  4f92		       46		      .byte.b	%01000110
   2123  4f93		       3c		      .byte.b	%00111100
   2124  4f94
   2125  4f94		       0c		      .byte.b	%00001100
   2126  4f95		       0c		      .byte.b	%00001100
   2127  4f96		       7e		      .byte.b	%01111110
   2128  4f97		       4c		      .byte.b	%01001100
   2129  4f98		       4c		      .byte.b	%01001100
   2130  4f99		       2c		      .byte.b	%00101100
   2131  4f9a		       1c		      .byte.b	%00011100
   2132  4f9b		       0c		      .byte.b	%00001100
   2133  4f9c
   2134  4f9c		       3c		      .byte.b	%00111100
   2135  4f9d		       46		      .byte.b	%01000110
   2136  4f9e		       06		      .byte.b	%00000110
   2137  4f9f		       06		      .byte.b	%00000110
   2138  4fa0		       3c		      .byte.b	%00111100
   2139  4fa1		       60		      .byte.b	%01100000
   2140  4fa2		       60		      .byte.b	%01100000
   2141  4fa3		       7e		      .byte.b	%01111110
   2142  4fa4
   2143  4fa4		       3c		      .byte.b	%00111100
   2144  4fa5		       66		      .byte.b	%01100110
   2145  4fa6		       66		      .byte.b	%01100110
   2146  4fa7		       66		      .byte.b	%01100110
   2147  4fa8		       7c		      .byte.b	%01111100
   2148  4fa9		       60		      .byte.b	%01100000
   2149  4faa		       62		      .byte.b	%01100010
   2150  4fab		       3c		      .byte.b	%00111100
   2151  4fac
   2152  4fac		       30		      .byte.b	%00110000
   2153  4fad		       30		      .byte.b	%00110000
   2154  4fae		       30		      .byte.b	%00110000
   2155  4faf		       18		      .byte.b	%00011000
   2156  4fb0		       0c		      .byte.b	%00001100
   2157  4fb1		       06		      .byte.b	%00000110
   2158  4fb2		       42		      .byte.b	%01000010
   2159  4fb3		       3e		      .byte.b	%00111110
   2160  4fb4
   2161  4fb4		       3c		      .byte.b	%00111100
   2162  4fb5		       66		      .byte.b	%01100110
   2163  4fb6		       66		      .byte.b	%01100110
   2164  4fb7		       66		      .byte.b	%01100110
   2165  4fb8		       3c		      .byte.b	%00111100
   2166  4fb9		       66		      .byte.b	%01100110
   2167  4fba		       66		      .byte.b	%01100110
   2168  4fbb		       3c		      .byte.b	%00111100
   2169  4fbc
   2170  4fbc		       3c		      .byte.b	%00111100
   2171  4fbd		       46		      .byte.b	%01000110
   2172  4fbe		       06		      .byte.b	%00000110
   2173  4fbf		       3e		      .byte.b	%00111110
   2174  4fc0		       66		      .byte.b	%01100110
   2175  4fc1		       66		      .byte.b	%01100110
   2176  4fc2		       66		      .byte.b	%01100110
   2177  4fc3		       3c		      .byte.b	%00111100
   2178  4fc4
   2179  4fc4					      ifnconst	DPC_kernel_options
   2180  4fc4
   2181  4fc4		       00		      .byte.b	%00000000
   2182  4fc5		       00		      .byte.b	%00000000
   2183  4fc6		       00		      .byte.b	%00000000
   2184  4fc7		       00		      .byte.b	%00000000
   2185  4fc8		       00		      .byte.b	%00000000
   2186  4fc9		       00		      .byte.b	%00000000
   2187  4fca		       00		      .byte.b	%00000000
   2188  4fcb		       00		      .byte.b	%00000000
   2189  4fcc
   2190  4fcc					      endif
   2191  4fcc
   2192  4fcc					      endif
   2193  4fcc
   2194  4fcc				  -	      ifconst	ROM2k
   2195  4fcc				  -	      ORG	$F7FC
   2196  4fcc					      else
   2197  4fcc					      ifconst	bankswitch
   2198  4fcc				  -	      if	bankswitch == 8
   2199  4fcc				  -	      ORG	$2FF4-bscode_length
   2200  4fcc				  -	      RORG	$FFF4-bscode_length
   2201  4fcc					      endif
   2202  4fcc					      if	bankswitch == 16
   2203  4fd4					      ORG	$4FF4-bscode_length
   2204  4fd4					      RORG	$FFF4-bscode_length
   2205  4fd4					      endif
   2206  4fd4				  -	      if	bankswitch == 32
   2207  4fd4				  -	      ORG	$8FF4-bscode_length
   2208  4fd4				  -	      RORG	$FFF4-bscode_length
   2209  4fd4					      endif
   2210  4fd4				  -	      if	bankswitch == 64
   2211  4fd4				  -	      ORG	$10FE0-bscode_length
   2212  4fd4				  -	      RORG	$1FFE0-bscode_length
   2213  4fd4					      endif
   2214  4fd4				  -	      else
   2215  4fd4				  -	      ORG	$FFFC
   2216  4fd4					      endif
   2217  4fd4					      endif
   2218  4fd4							; every bank has this stuff at the same place
   2219  4fd4							; this code can switch to/from any bank at any entry point
   2220  4fd4							; and can preserve register values
   2221  4fd4							; note: lines not starting with a space are not placed in all banks
   2222  4fd4							;
   2223  4fd4							; line below tells the compiler how long this is - do not remove
   2224  4fd4							;size=32
   2225  4fd4
   2226  4fd4				   begin_bscode
   2227  4fd4		       a2 ff		      ldx	#$ff
   2228  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2229  4fd6				  -	      stx	FASTFETCH
   2230  4fd6					      endif
   2231  4fd6		       9a		      txs
   2232  4fd7				  -	      if	bankswitch == 64
   2233  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2234  4fd7					      else
   2235  4fd7		       a9 f2		      lda	#>(start-1)
   2236  4fd9					      endif
   2237  4fd9		       48		      pha
   2238  4fda		       a9 4f		      lda	#<(start-1)
   2239  4fdc		       48		      pha
   2240  4fdd
   2241  4fdd				   BS_return
   2242  4fdd		       48		      pha
   2243  4fde		       8a		      txa
   2244  4fdf		       48		      pha
   2245  4fe0		       ba		      tsx
   2246  4fe1
   2247  4fe1					      if	bankswitch != 64
   2248  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2249  4fe3
   2250  4fe3		       2a		      rol
   2251  4fe4		       2a		      rol
   2252  4fe5		       2a		      rol
   2253  4fe6		       2a		      rol
   2254  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2255  4fe9		       aa		      tax
   2256  4fea		       e8		      inx
   2257  4feb				  -	      else
   2258  4feb				  -	      lda	4,x	; get high byte of return address
   2259  4feb				  -	      tay
   2260  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2261  4feb				  -	      sta	4,x
   2262  4feb				  -	      tya
   2263  4feb				  -	      lsr
   2264  4feb				  -	      lsr
   2265  4feb				  -	      lsr
   2266  4feb				  -	      lsr
   2267  4feb				  -	      tax
   2268  4feb				  -	      inx
   2269  4feb					      endif
   2270  4feb
   2271  4feb				   BS_jsr
   2272  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2273  4fee		       68		      pla
   2274  4fef		       aa		      tax
   2275  4ff0		       68		      pla
   2276  4ff1		       60		      rts
   2277  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2278  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2279  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2280  4ff2					      endif
   2281  4ff2					      ifconst	bankswitch
   2282  4ff2				  -	      if	bankswitch == 8
   2283  4ff2				  -	      ORG	$2FFC
   2284  4ff2				  -	      RORG	$FFFC
   2285  4ff2					      endif
   2286  4ff2					      if	bankswitch == 16
   2287  4ffc					      ORG	$4FFC
   2288  4ffc					      RORG	$FFFC
   2289  4ffc					      endif
   2290  4ffc				  -	      if	bankswitch == 32
   2291  4ffc				  -	      ORG	$8FFC
   2292  4ffc				  -	      RORG	$FFFC
   2293  4ffc					      endif
   2294  4ffc				  -	      if	bankswitch == 64
   2295  4ffc				  -	      ORG	$10FF0
   2296  4ffc				  -	      RORG	$1FFF0
   2297  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2298  4ffc				  -	      ORG	$10FF8
   2299  4ffc				  -	      RORG	$1FFF8
   2300  4ffc				  -	      ifconst	superchip
   2301  4ffc				  -	      .byte	"E","F","S","C"
   2302  4ffc				  -	      else
   2303  4ffc				  -	      .byte	"E","F","E","F"
   2304  4ffc				  -	      endif
   2305  4ffc				  -	      ORG	$10FFC
   2306  4ffc				  -	      RORG	$1FFFC
   2307  4ffc					      endif
   2308  4ffc				  -	      else
   2309  4ffc				  -	      ifconst	ROM2k
   2310  4ffc				  -	      ORG	$F7FC
   2311  4ffc				  -	      else
   2312  4ffc				  -	      ORG	$FFFC
   2313  4ffc				  -	      endif
   2314  4ffc					      endif
   2315  4ffc		       50 f2		      .word.w	start
   2316  4ffe		       50 f2		      .word.w	start
